<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="3.0.7" segtype="paragraph" srclang="en-us"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="en-us">
        <seg>#$</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>#$</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>#b101100 @result{} 44
#o54 @result{} 44
#x2c @result{} 44
#24r1k @result{} 44</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>#b101100 @result{} 44
#o54 @result{} 44
#x2c @result{} 44
#24r1k @result{} 44</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>$</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>$</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>% dividend divisor</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>% dividend divisor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(% 9 4)
     @result{} 1
(% -9 4)
     @result{} -1
(% 9 -4)
     @result{} 1
(% -9 -4)
     @result{} -1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(% 9 4)
     @result{} 1
(% -9 4)
     @result{} -1
(% 9 -4)
     @result{} 1
(% -9 -4)
     @result{} -1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(*)
     @result{} 1
(* 1)
     @result{} 1
(* 1 2 3 4)
     @result{} 24</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(*)
     @result{} 1
(* 1)
     @result{} 1
(* 1 2 3 4)
     @result{} 24</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(+ (% @var{dividend} @var{divisor})
   (* (/ @var{dividend} @var{divisor}) @var{divisor}))</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(+ (% @var{dividend} @var{divisor})
   (* (/ @var{dividend} @var{divisor}) @var{divisor}))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(+ (mod @var{dividend} @var{divisor})
   (* (floor @var{dividend} @var{divisor}) @var{divisor}))</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(+ (mod @var{dividend} @var{divisor})
   (* (floor @var{dividend} @var{divisor}) @var{divisor}))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(+ 1 268435455)
     @result{} -268435456
     @result{} 1 0000  0000 0000  0000 0000  0000 0000</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(+ 1 268435455)
     @result{} -268435456
     @result{} 1 0000  0000 0000  0000 0000  0000 0000</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(+)
     @result{} 0
(+ 1)
     @result{} 1
(+ 1 2 3 4)
     @result{} 10</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(+)
     @result{} 0
(+ 1)
     @result{} 1
(+ 1 2 3 4)
     @result{} 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(- 10 1 2 3 4)
     @result{} 0
(- 10)
     @result{} -10
(-)
     @result{} 0</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(- 10 1 2 3 4)
     @result{} 0
(- 10)
     @result{} -10
(-)
     @result{} 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(/ -17 6)
     @result{} -2   @r{(could in theory be @minus{}3 on some machines)}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(/ -17 6)
     @result{} -2   @r{(pourrait être @minus{}3 sur certaines machines)}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(/ 5 2)
     @result{} 2
(/ 5.0 2)
     @result{} 2.5
(/ 5 2.0)
     @result{} 2.5
(/ 5.0 2.0)
     @result{} 2.5
(/ 25 3 2)
     @result{} 4</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(/ 5 2)
     @result{} 2
(/ 5.0 2)
     @result{} 2.5
(/ 5 2.0)
     @result{} 2.5
(/ 5.0 2.0)
     @result{} 2.5
(/ 25 3 2)
     @result{} 4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(/ 6 2)
     @result{} 3</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(/ 6 2)
     @result{} 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(@var{condition})</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(@var{condition})</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(We have inserted spaces between groups of 4 bits, and two spaces between groups of 8 bits, to make the binary integer easier to read.)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(Nous avons inséré un espace entre les groupes de 4 bits, et deux
espaces entre les groupes de 8 bits, pour faciliter la lecture du
nombre entier binaire.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(ash -5 -2)        ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}
     @result{} -2         ;      =  @r{1 1111  1111 1111  1111 1111  1111 1110}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(ash -5 -2)        ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}
     @result{} -2         ;      =  @r{1 1111  1111 1111  1111 1111  1111 1110}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(ash -6 -1) @result{} -3
;; @r{Decimal @minus{}6 becomes decimal @minus{}3.}
1 1111  1111 1111  1111 1111  1111 1010
     @result{}
1 1111  1111 1111  1111 1111  1111 1101</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(ash -6 -1)
@result{} -3
;; @r{La décimale @minus{}6 devient la décimale @minus{}3.}
1 1111  1111 1111  1111 1111  1111 1010
     @result{}
1 1111  1111 1111  1111 1111  1111 1101</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(ash 5 -2)
     @result{} 1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(ash 5 -2)
     @result{} 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(ash 5 2)
     @result{} 20
(lsh -5 2)         ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}
     @result{} -20        ;      =  @r{1 1111  1111 1111  1111 1111  1110 1100}
(ash -5 2)
     @result{} -20</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(ash 5 2)
     @result{} 20
(lsh -5 2)         ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}
     @result{} -20        ;      =  @r{1 1111  1111 1111  1111 1111  1110 1100}
(ash -5 2)
     @result{} -20</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(ceiling 1.2)
     @result{} 2
(ceiling 1.7)
     @result{} 2
(ceiling -1.2)
     @result{} -1
(ceiling -1.7)
     @result{} -1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(ceiling 1.2)
     @result{} 2
(ceiling 1.7)
     @result{} 2
(ceiling -1.2)
     @result{} -1
(ceiling -1.7)
     @result{} -1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(count-loop (done)
  (if (pending)
      (fixit)
    (setq done t)))</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030317Z" creationid="jchelary" creationdate="20140131T030317Z">
        <seg>(count-loop (done)
  (if (pending)
      (fixit)
    (setq done t)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(count-loop (i 0 10)
  (prin1 i) (princ " ")
  (prin1 (aref vector i))
  (terpri))</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030313Z" creationid="jchelary" creationdate="20140131T030313Z">
        <seg>(count-loop (i 0 10)
  (prin1 i) (princ " ")
  (prin1 (aref vector i))
  (terpri))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(defvar fuzz-factor 1.0e-6)
(defun approx-equal (x y)
  (or (and (= x 0) (= y 0))
      (&lt; (/ (abs (- x y))
            (max (abs x) (abs y)))
         fuzz-factor)))</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(defvar fuzz-factor 1.0e-6)
(defun approx-equal (x y)
  (or (and (= x 0) (= y 0))
      (&lt; (/ (abs (- x y))
            (max (abs x) (abs y)))
         fuzz-factor)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(dir)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(dir)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(emacs-version)
  @result{} "GNU Emacs 20.3.5 (i486-pc-linux-gnulibc1, X toolkit)
 of Sat Feb 14 1998 on psilocin.gnu.org"</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(emacs-version)
  @result{} "GNU Emacs 20.3.5 (i486-pc-linux-gnulibc1, X toolkit)
 of Sat Feb 14 1998 on psilocin.gnu.org"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(exclusive) whose tangent is @var{y}.  If the optional second argument @var{x} is given, the value of @code{(atan y x)} is the angle in radians between the vector @code{[@var{x}, @var{y}]} and the @code{X} axis.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(exclusif) dont la tangente est @var{y}. Si le deuxième argument
facultatif @var{x} est donné, la valeur de @code{(atan y x)} est
pêcher en radians entre le vecteur @code{[@var{x}, @var{y}]} et l'axis
@code{X}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(floor 1.2)
     @result{} 1
(floor 1.7)
     @result{} 1
(floor -1.2)
     @result{} -2
(floor -1.7)
     @result{} -2
(floor 5.99 3)
     @result{} 1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(floor 1.2)
     @result{} 1
(floor 1.7)
     @result{} 1
(floor -1.2)
     @result{} -2
(floor -1.7)
     @result{} -2
(floor 5.99 3)
     @result{} 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(if @var{condition} (progn @var{a} @var{b} @var{c}) nil)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(if @var{condition} (progn @var{a} @var{b} @var{c}) nil)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(inclusive) whose cosine is @var{arg}; if, however, @var{arg} is out of range (outside [@minus{}1, 1]), it signals a @code{domain-error} error.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032424Z">
        <seg>(inclus) dont le cosinus est @var{arg} ; si, cependant, @var{arg} est
hors de portée (en dehors de [@minus{} 1, 1]), il signale une erreur
@code{domaine-error}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(inclusive) whose sine is @var{arg}; if, however, @var{arg} is out of range (outside [@minus{}1, 1]), it signals a @code{domain-error} error.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032419Z">
        <seg>(inclus) dont le sinus est @var{arg} ; si, cependant, @var{arg} est
hors de portée (en dehors de [@minus{} 1, 1]), il signale une erreur
@code{domaine-error}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(logand 13 12)
     @result{} 12</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(logand 13 12)
     @result{} 12</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(logand 14 13 4)   ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}
                   ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}
                   ;  4  =  @r{0 0000  0000 0000  0000 0000  0000 0100}
     @result{} 4          ;  4  =  @r{0 0000  0000 0000  0000 0000  0000 0100}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(logand 14 13 4)   ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}
                   ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}
                   ;  4  =  @r{0 0000  0000 0000  0000 0000  0000 0100}
     @result{} 4          ;  4  =  @r{0 0000  0000 0000  0000 0000  0000 0100}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(logand 14 13)     ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}
                   ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}
     @result{} 12         ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(logand 14 13)     ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}
                   ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}
     @result{} 12         ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(logand)
     @result{} -1         ; -1  =  @r{1 1111  1111 1111  1111 1111  1111 1111}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(logand)
     @result{} -1         ; -1  =  @r{1 1111  1111 1111  1111 1111  1111 1111}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(logior 12 5 7)    ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
                   ;  7  =  @r{0 0000  0000 0000  0000 0000  0000 0111}
     @result{} 15         ; 15  =  @r{0 0000  0000 0000  0000 0000  0000 1111}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(logior 12 5 7)    ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
                   ;  7  =  @r{0 0000  0000 0000  0000 0000  0000 0111}
     @result{} 15         ; 15  =  @r{0 0000  0000 0000  0000 0000  0000 1111}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(logior 12 5)      ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 13         ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(logior 12 5)      ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 13         ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(lognot 5)
     @result{} -6
;;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
;; @r{becomes}
;; -6  =  @r{1 1111  1111 1111  1111 1111  1111 1010}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lognot 5)
     @result{} -6
;;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
;; @r{devient}
;; -6  =  @r{1 1111  1111 1111  1111 1111  1111 1010}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(logxor 12 5 7)    ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
                   ;  7  =  @r{0 0000  0000 0000  0000 0000  0000 0111}
     @result{} 14         ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(logxor 12 5 7)    ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
                   ;  7  =  @r{0 0000  0000 0000  0000 0000  0000 0111}
     @result{} 14         ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(logxor 12 5)      ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 9          ;  9  =  @r{0 0000  0000 0000  0000 0000  0000 1001}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(logxor 12 5)      ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 9          ;  9  =  @r{0 0000  0000 0000  0000 0000  0000 1001}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(lsh -5 -2)        ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}
     @result{} 134217726  ;      =  @r{0 0111  1111 1111  1111 1111  1111 1110}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh -5 -2)        ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}
     @result{} 134217726  ;      =  @r{0 0111  1111 1111  1111 1111  1111 1110}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(lsh -6 -1) @result{} 268435453
;; @r{Decimal @minus{}6 becomes decimal 268,435,453.}
1 1111  1111 1111  1111 1111  1111 1010
     @result{}
0 1111  1111 1111  1111 1111  1111 1101</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh -6 -1)
@result{} 268435453
;; @r{La décimale @minus{}6 devient la décimale 268 435 453.}
1 1111  1111 1111  1111 1111  1111 1010
     @result{}
0 1111  1111 1111  1111 1111  1111 1101</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(lsh 3 2)
     @result{} 12
;; @r{Decimal 3 becomes decimal 12.}
00000011 @result{} 00001100</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh 3 2)
     @result{} 12
;; @r{La décimale 3 devient décimale 12.}
00000011 @result{} 00001100</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(lsh 5 -1)
     @result{} 2
;; @r{Decimal 5 becomes decimal 2.}
00000101 @result{} 00000010</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh 5 -1)
     @result{} 2
;; @r{La décimale 5 devient décimale 2.}
00000101 @result{} 00000010</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(lsh 5 -2)         ;   5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 1          ;      =  @r{0 0000  0000 0000  0000 0000  0000 0001}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh 5 -2)         ;   5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 1          ;      =  @r{0 0000  0000 0000  0000 0000  0000 0001}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(lsh 5 1)
     @result{} 10
;; @r{Decimal 5 becomes decimal 10.}
00000101 @result{} 00001010</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh 5 1)
     @result{} 10
;; @r{Decimal 5 becomes decimal 10.}
00000101 @result{} 00001010</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(lsh 5 2)          ;   5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 20         ;      =  @r{0 0000  0000 0000  0000 0000  0001 0100}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh 5 2)          ;   5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 20         ;      =  @r{0 0000  0000 0000  0000 0000  0001 0100}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(lsh 6 -1)
     @result{} 3
;; @r{Decimal 6 becomes decimal 3.}
00000110 @result{} 00000011</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh 6 -1)
     @result{} 3
;; @r{La décimale 6 devient décimale 3.}
00000110 @result{} 00000011</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(lsh 7 1)
     @result{} 14
;; @r{Decimal 7 becomes decimal 14.}
00000111 @result{} 00001110</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh 7 1)
     @result{} 14
;; @r{La décimale 7 devient la décimale 14.}
00000111 @result{} 00001110</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(min -4 1)
     @result{} -4</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(min -4 1)
     @result{} -4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(mod -9 -4)
     @result{} -1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(mod -9 -4)
     @result{} -1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(mod -9 4)
     @result{} 3</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(mod -9 4)
     @result{} 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(mod 5.5 2.5)
     @result{} .5</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(mod 5.5 2.5)
     @result{} .5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(mod 9 -4)
     @result{} -3</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(mod 9 -4)
     @result{} -3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(mod 9 4)
     @result{} 1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(mod 9 4)
     @result{} 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(round 1.2)
     @result{} 1
(round 1.7)
     @result{} 2
(round -1.2)
     @result{} -1
(round -1.7)
     @result{} -2</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(round 1.2)
     @result{} 1
(round 1.7)
     @result{} 2
(round -1.2)
     @result{} -1
(round -1.7)
     @result{} -2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(setq foo (1+ foo))
     @result{} 5</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(setq foo (1+ foo))
     @result{} 5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(setq foo 4)
     @result{} 4
(1+ foo)
     @result{} 5</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(setq foo 4)
     @result{} 4
(1+ foo)
     @result{} 5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(setq x1 '(a b c))
     @result{} (a b c)
(setcdr x1 (cons 'd (cdr x1)))
     @result{} (d b c)
x1
     @result{} (a d b c)</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030553Z" creationid="jchelary" creationdate="20140131T030553Z">
        <seg>(setq x1 '(a b c))
     @result{} (a b c)
(setcdr x1 (cons 'd (cdr x1)))
     @result{} (d b c)
x1
     @result{} (a d b c)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(symbol-name 'foo)
     @result{} "foo"</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(symbol-name 'toto)
     @result{} "toto"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(third '(a b c))
     @expansion{} (car (cdr (cdr '(a b c))))
     @result{} c</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030203Z" creationid="jchelary" creationdate="20140131T030203Z">
        <seg>(third '(a b c))
     @expansion{} (car (cdr (cdr '(a b c))))
     @result{} c</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(truncate 1.2)
     @result{} 1
(truncate 1.7)
     @result{} 1
(truncate -1.2)
     @result{} -1
(truncate -1.7)
     @result{} -1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(truncate 1.2)
     @result{} 1
(truncate 1.7)
     @result{} 1
(truncate -1.2)
     @result{} -1
(truncate -1.7)
     @result{} -1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(when @var{condition} @var{a} @var{b} @var{c})</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(when @var{condition} @var{a} @var{b} @var{c})</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>*</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>* A Sample Function Description::  A description of an imaginary
                                     function, @code{foo}.
* A Sample Variable Description::  A description of an imaginary
                                     variable, @code{electric-future-map}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>* Un exemple d'une description de fonction::  Une description d'une imaginaire
                                     fonction, @code{foo}.
* Un exemple d'une description de variable::  Une description d'une imaginaire
                                     variable, @code{electric-future-map}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>* Abbrev Mode::             Setting up Emacs for abbreviation.
* Abbrev Tables::           Creating and working with abbrev tables.
* Defining Abbrevs::        Specifying abbreviations and their expansions.
* Abbrev Files::            Saving abbrevs in files.
* Abbrev Expansion::        Controlling expansion; expansion subroutines.
* Standard Abbrev Tables::  Abbrev tables used by various major modes.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>* Mode abbrev::                 Configuration d'Emacs pour l'abréviation.
* Tables d'abréviations::       Créer et travailler avec des tables d'abréviations.
* Définir des abréviations::    Spécifier des abréviations et leurs expansions.
* Fichiers d'abréviations::     Sauver des abréviations dans les fichiers.
* Expansions d'abréviations::    Contrôler l'expansion ; sous-programmes d'expansions.
* Tables standard d'abréviations:: Tables d'abréviations employées par divers modes majeurs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>* Caveats::                 Flaws and a request for help.
* Lisp History::            Emacs Lisp is descended from Maclisp.
* Conventions::             How the manual is formatted.
* Version Info::            Which Emacs version is running?
* Acknowledgements::        The authors, editors, and sponsors of this manual.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025531Z">
        <seg>* Avertissements::              Erreurs et demande d'aide.
* L'histoire de Lisp::          Emacs Lisp descend de Maclisp.
* Conventions::                 Comment le manuel est composé.
* Information de version::      Quelle version d'Emacs fonctionne ?
* Remerciements::               Les auteurs, les rédacteurs, et les commanditaires de ce manuel.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>* Integer Basics::          Representation and range of integers.
* Float Basics::	    Representation and range of floating point.
* Predicates on Numbers::   Testing for numbers.
* Comparison of Numbers::   Equality and inequality predicates.
* Numeric Conversions::	    Converting float to integer and vice versa.
* Arithmetic Operations::   How to add, subtract, multiply and divide.
* Rounding Operations::     Explicitly rounding floating point numbers.
* Bitwise Operations::      Logical and, or, not, shifting.
* Math Functions::          Trig, exponential and logarithmic functions.
* Random Numbers::          Obtaining random integers, predictable or not.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031015Z">
        <seg>* Entiers basiques::                     Représentation et champ des nombres entiers.
* Nombres à virgule flottante basiques:: Représentation et champ des nombres à virgule flottante.
* Attributs des nombres::                Tester les nombres.
* Comparaison des nombres::              Attributs d'égalité et d'inégalité.
* Conversions numériques::               Convertir des nombres à virgule flottante en nombres entiers et vice-versa.
* Opérations arithmétiques::             Comment additionner, soustraire, multiplier et diviser.
* Opérations d'arrondissage::            Arrondir explicitement les nombres à virgule flottante.
* Opérations de bits::                   and, or, not logique et décalage.
* Fonctions mathématiques::              Fonctions trigonométrique, exponentielle et logarithmique.
* Nombres aléatoires::                   Obtention des nombres entiers aléatoires, prévisibles ou pas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>* Some Terms::              Explanation of terms we use in this manual.
* nil and t::               How the symbols @code{nil} and @code{t} are used.
* Evaluation Notation::     The format we use for examples of evaluation.
* Printing Notation::       The format we use for examples that print output.
* Error Messages::          The format we use for examples of errors.
* Buffer Text Notation::    The format we use for buffer contents in examples.
* Format of Descriptions::  Notation for describing functions, variables, etc.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>* Quelques termes::             Explication des termes que nous employons en ce manuel.
* nil et t::                    Comment les symboles @code{nil} et @code{t} sont employés.
* Notation d'évaluation::       Le format que nous employons pour des exemples de l'évaluation.
* Notation d'affichage::        Le format que nous employons quand les exemples affichent du texte.
* Messages d'erreur::           Le format que nous employons pour des exemples d'erreurs.
* Notation des textes de tampon:: Le format que nous employons pour le contenu de tampons dans les exemples.
* Format des descriptions::     Notation pour décrire des fonctions, des variables, etc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>*/</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>*/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>+</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>+</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>--- ---        --- ---      --- ---
x1---&gt; |   |   |----&gt; |   |   |--&gt; |   |   |--&gt; nil
        --- ---        --- ---      --- ---
         |        --&gt;   |            |
         |       |      |            |
          --&gt; a  |       --&gt; b        --&gt; c
                 |
       --- ---   |
x2--&gt; |   |   |--
       --- ---
        |
        |
         --&gt; z</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030536Z" creationid="jchelary" creationdate="20140131T030536Z">
        <seg>--- ---        --- ---      --- ---
x1---&gt; |   |   |----&gt; |   |   |--&gt; |   |   |--&gt; nil
        --- ---        --- ---      --- ---
         |        --&gt;   |            |
         |       |      |            |
          --&gt; a  |       --&gt; b        --&gt; c
                 |
       --- ---   |
x2--&gt; |   |   |--
       --- ---
        |
        |
         --&gt; z</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>--------------        -------------       -------------
| car  | cdr   |      | car  | cdr  |     | car  | cdr  |
|   a  |   o   |   --&gt;|   b  |   o-------&gt;|   c  |  nil |
|      |   |   |  |   |      |      |     |      |      |
 --------- | --   |    -------------       -------------
           |      |
     -----         --------
    |                      |
    |    ---------------   |
    |   | car   | cdr   |  |
     --&gt;|   d   |   o------
        |       |       |
         ---------------</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030556Z" creationid="jchelary" creationdate="20140131T030556Z">
        <seg>--------------        -------------       -------------
| car  | cdr   |      | car  | cdr  |     | car  | cdr  |
|   a  |   o   |   --&gt;|   b  |   o-------&gt;|   c  |  nil |
|      |   |   |  |   |      |      |     |      |      |
 --------- | --   |    -------------       -------------
           |      |
     -----         --------
    |                      |
    |    ---------------   |
    |   | car   | cdr   |  |
     --&gt;|   d   |   o------
        |       |       |
         ---------------</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>--------------------
                  |                    |
 --------------   |   --------------   |    --------------
| car   | cdr  |  |  | car   | cdr  |   --&gt;| car   | cdr  |
|   a   |   o-----   |   b   |   o--------&gt;|   c   |  nil |
|       |      |     |       |      |      |       |      |
 --------------       --------------        --------------</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030549Z" creationid="jchelary" creationdate="20140131T030549Z">
        <seg>--------------------
                  |                    |
 --------------   |   --------------   |    --------------
| car   | cdr  |  |  | car   | cdr  |   --&gt;| car   | cdr  |
|   a   |   o-----   |   b   |   o--------&gt;|   c   |  nil |
|       |      |     |       |      |      |       |      |
 --------------       --------------        --------------</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>-1.0e+INF</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>-1.0e+INF</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>-2**28</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>-2**28</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>/</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>/ dividend divisor &amp;rest divisors</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>/ dividend divisor &amp;rest divisors</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>/*</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>/*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>//</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>//</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>0 0000  0000 0000  0000 0000  0000 0101</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>0 0000  0000 0000  0000 0000  0000 0101</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>0 1111  1111 1111  1111 1111  1111 1111</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>0 1111  1111 1111  1111 1111  1111 1111</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>1               ; @r{The integer 1.}
 1.              ; @r{The integer 1.}
+1               ; @r{Also the integer 1.}
-1               ; @r{The integer @minus{}1.}
 536870913       ; @r{Also the integer 1, due to overflow.}
 0               ; @r{The integer 0.}
-0               ; @r{The integer 0.}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>1               ; @r{L'entier 1.}
 1.              ; @r{L'entier 1.}
+1               ; @r{Encore l'entier 1.}
-1               ; @r{L'entier @minus{}1.}
 536870913       ; @r{Encore l'entier 1, dû au débordement.}
 0               ; @r{L'entier 0.}
-0               ; @r{L'entier 0.}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>1 1111  1111 1111  1111 1111  1111 1011</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>1 1111  1111 1111  1111 1111  1111 1011</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>1 1111  1111 1111  1111 1111  1111 1111</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>1 1111  1111 1111  1111 1111  1111 1111</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>1.0e+INF</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>1.0e+INF</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>124b</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>124b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>2**28 - 1),</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>2**28 - 1),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>23</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>23</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>2C-mode-map</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>2C-mode-map</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>:all</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>:all</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>:safe</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>:safe</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>;; @r{Decimal 268,435,455}
0 1111  1111 1111  1111 1111  1111 1111</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>;; @r{La décimale 268 435 455}
0 1111  1111 1111  1111 1111  1111 1111</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>;; @r{Decimal @minus{}2}
1 1111  1111 1111  1111 1111  1111 1110</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>;; @r{La décimale @minus{}2}
1 1111  1111 1111  1111 1111  1111 1110</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>&gt;b</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>&gt;b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>?</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@b{Common Lisp note:} Comparing numbers in Common Lisp always requires @code{=} because Common Lisp implements multi-word integers, and two distinct integer objects can have the same numeric value.  Emacs Lisp can have just one integer object for any given value because it has a limited range of integer values.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031730Z">
        <seg>@b{Common Lisp note:} Comparer des nombres en Common Lisp exige
toujours @code{=} parce que le Common Lisp met en application des
nombres entiers pluritermes, et deux objets distincts de nombre entier
peuvent avoir la même valeur numérique. Emacs Lisp peut avoir juste
un objet de nombre entier pour n'importe quelle valeur donnée parce
qu'il a un champ limité des valeurs de nombre entier.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{"Symbol's value as variable is void"}@* @xref{Accessing Variables}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{"La valeur du symbole comme variable est vide"}@* @xref{Accès aux variables}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{(zerop x)} is equivalent to @code{(= x 0)}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{(zerop x)} est équivalent à @code{(= x 0)}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{EMACSLOADPATH} environment variable</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>variable d'environnement @code{EMACSLOADPATH}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{and}, @code{or}, @code{not}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{and}, @code{or}, @code{not}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{ash} (@dfn{arithmetic shift}) shifts the bits in @var{integer1} to the left @var{count} places, or to the right if @var{count} is negative.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{ash} (@dfn{arithmetic shift}) décale les bits dans
@var{integer1} de @var{count} places vers la gauche, ou vers la droite
si @var{count} est négatif.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{ash} gives the same results as @code{lsh} except when @var{integer1} and @var{count} are both negative.  In that case, @code{ash} puts ones in the empty bit positions on the left, while @code{lsh} puts zeros in those bit positions.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{ash} donne les mêmes résultats que @code{lsh} excepté quand
@var{integer1} et @var{count} sont tous les deux négatifs. Dans ce
cas, @code{ash} met des 1 dans les positions de bit vide du côté
gauche, alors que @code{lsh} met des 0 dans ces positions de bit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{composition} property, and point display</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140216T051551Z" creationid="jchelary" creationdate="20140216T051551Z">
        <seg>Propriété @code{composition} et affichage du point</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{define-abbrev} is the low-level basic function for defining an abbrev in a specified abbrev table.  When major modes predefine standard abbrevs, they should call @code{define-abbrev} and specify @code{t} for @var{system-flag}.  Be aware that any saved non-``system'' abbrevs are restored at startup, i.e. before some major modes are loaded.  Major modes should therefore not assume that when they are first loaded their abbrev tables are empty.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T113207Z">
        <seg>@code{define-abbrev} est la fonction de base de bas niveau pour
définir les abréviations dans une table d'abréviations indiquée. Si
les modes majeurs prédéfinissent la norme des abréviations, ils
devraient appeler @code{define-abbrev} et indiquer @code{t} pour
@var{system-flag}. Faites attention, les abréviations non sauvés du
non-``système'' sont restaurées au démarrage, c.-à-d. avant que les
modes majeurs sont chargés. C'est pourquoi les modes majeurs ne
devraient pas assumer que, quand ils sont d'abord chargés, leurs
tables d'abréviations soient vides.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{display} property, and point display</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140216T051527Z" creationid="jchelary" creationdate="20140216T051527Z">
        <seg>Propriété @code{display} et affichage du point</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{electric-future-map}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{electric-future-map}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{floatp} does not exist in Emacs versions 18 and earlier.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{floatp} n'existe pas dans les versions 18 et précédentes
d'Emacs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{if}, @code{cond}, @code{when}, @code{unless}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{if}, @code{cond}, @code{when}, @code{unless}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{lsh}, which is an abbreviation for @dfn{logical shift}, shifts the bits in @var{integer1} to the left @var{count} places, or to the right if @var{count} is negative, bringing zeros into the vacated bits.  If @var{count} is negative, @code{lsh} shifts zeros into the leftmost (most-significant) bit, producing a positive result even if @var{integer1} is negative.  Contrast this with @code{ash}, below.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{lsh}, qui est une abréviation de @dfn{logical shift}, décale les
bits dans @var{integer1} de @var{count} places à gauche, ou vers la
droite si @var{count} est négatif, introduisant des zéros dans les
places vacantes des bits. Si @var{count} est négatif, @code{lsh}
décale les zéros dans l'extrême gauche du bit (plus fort), produisant
un résultat positif même si @var{integer1} est négatif. Contrairement
à @code{ash}, ci-dessous.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{nil} and @code{t}</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030031Z" creationid="jchelary" creationdate="20140131T030031Z">
        <seg>@code{nil} et @code{t}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{no-self-insert} property</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140216T051506Z" creationid="jchelary" creationdate="20140216T051506Z">
        <seg>Propriété @code{no-self-insert}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{while} loops.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>boucles @code{while}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@hfil</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T024906Z" creationid="jchelary" creationdate="20140131T024906Z">
        <seg>@hfil</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@minus{}1 is represented as 29 ones.  (This is called @dfn{two's complement} notation.)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@minus{}1 est représenté en tant que 29 unités. (Ceci s'appelle la
notation @dfn{two's complement}.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@minus{}pi/2</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@minus{}pi/2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@result{} for</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@result{} for</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@r{Original list head:}                       @r{Reversed list:}
 -------------        -------------        ------------
| car  | cdr  |      | car  | cdr  |      | car | cdr  |
|   a  |  nil |&lt;--   |   b  |   o  |&lt;--   |   c |   o  |
|      |      |   |  |      |   |  |   |  |     |   |  |
 -------------    |   --------- | -    |   -------- | -
                  |             |      |            |
                   -------------        ------------</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030650Z" creationid="jchelary" creationdate="20140131T030650Z">
        <seg>@r{Original list head:}                       @r{Reversed list:}
 -------------        -------------        ------------
| car  | cdr  |      | car  | cdr  |      | car | cdr  |
|   a  |  nil |&lt;--   |   b  |   o  |&lt;--   |   c |   o  |
|      |      |   |  |      |   |  |   |  |     |   |  |
 -------------    |   --------- | -    |   -------- | -
                  |             |      |            |
                   -------------        ------------</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@samp{*?}, @samp{+?}, @samp{??}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@samp{*?}, @samp{+?}, @samp{??}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@samp{0.0e+NaN} or @samp{-0.0e+NaN}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@samp{0.0e+NaN} ou @samp{-0.0e+NaN}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@smallbook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@smallbook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@xref{Lambda Expressions}, for a more complete description of optional and rest arguments.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@xref{Lambda Expressions}, pour une description plus complète des
arguments optionnels et restants.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A @dfn{symbol} is an object with a unique name.  This chapter describes symbols, their components, their property lists, and how they are created and interned.  Separate chapters describe the use of symbols as variables and as function names; see @ref{Variables}, and @ref{Functions}.  For the precise read syntax for symbols, see @ref{Symbol Type}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Un @dfn{symbole} est un objet avec un nom unique. Ce chapitre décrit les symboles, leurs composants, leurs listes de propriétés et comment ils sont créés et conservés. L'utilisation de symboles comme noms de variables ou de fonctions est décrit dans d'autres chapitres ; consultez @ref{Variables} et @ref{Functions}. Pour la syntaxe exacte des symboles, consultez @ref{Le type symbole}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A @dfn{variable} is a name that can hold a value.  Although nearly all variables can be set by the user, certain variables exist specifically so that users can change them; these are called @dfn{user options}.  Ordinary variables and user options are described using a format like that for functions except that there are no arguments.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030406Z">
        <seg>Une @dfn{variable} est un nom qui peut contenir une valeur. Bien que
presque toutes les variables puissent être initialisées par
l'utilisateur, certaines variables existent spécifiquement de sorte
que les utilisateurs puissent les changer ; celles-ci s'appellent
@dfn{users options}. Des variables ordinaires et les options
d'utilisateur sont décrites en utilisant un format comme pour des
fonctions sauf qu'il n'y a aucun argument.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A Lisp @dfn{object} is a piece of data used and manipulated by Lisp programs.  For our purposes, a @dfn{type} or @dfn{data type} is a set of possible objects.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Un @dfn{object} List est un morceau de données employées et manipulées
par les programmes Lisp. Pour nous, un @dfn{type} ou un @dfn{data
type} est un ensemble d'objets possibles.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A Lisp expression that you can evaluate is called a @dfn{form}.  Evaluating a form always produces a result, which is a Lisp object.  In the examples in this manual, this is indicated with @samp{@result{}}:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032755Z">
        <seg>Une expression de Lisp que vous pouvez évaluer s'appelle une
@dfn{form}. L'évaluation d'un formulaire produit toujours un résultat,
qui est un objet de Lisp. Dans les exemples en ce manuel, ceci est
indiqué avec @samp{@result{}} :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A Sample Function Description</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Un exemple d'une description de fonction</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A Sample Variable Description</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Un exemple d'une description de variable</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A certain amount of Common Lisp emulation is available via the @file{cl} library.  @inforef{Top, Overview, cl}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Une certaine quantité de programmes Lisp Common est disponible par
l'intermédiaire de la @file{cl} bibliothèque. @inforef{Top, Overview,
cl}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A definition says how a symbol will be used.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Une définition indique comment un symbole sera utilisé.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A description of an imaginary</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Une description d'une imaginaire</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A deterministic computer program cannot generate true random numbers.  For most purposes, @dfn{pseudo-random numbers} suffice.  A series of pseudo-random numbers is generated in a deterministic fashion.  The numbers are not truly random, but they have certain properties that mimic a random series.  For example, all possible values occur equally often in a pseudo-random series.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Un programme machine déterministe ne peut pas produire de véritables
nombres aléatoires. Dans la plupart des cas, @dfn{pseudo-randam
numbers} suffit. Une série de nombres pseudo-aléatoires est produite
d'une façon déterminée. Les nombres ne sont pas vraiment aléatoires,
mais ils ont certaines propriétés à imiter une série aléatoire. Par
exemple, toutes les valeurs possibles se produisent également souvent
dans une série pseudo-aléatoire.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A function is a Lisp program</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Une fonction est un programme Lisp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A non-@code{nil} value of this variable turns on the automatic expansion of abbrevs when their abbreviations are inserted into a buffer.  If the value is @code{nil}, abbrevs may be defined, but they are not expanded automatically.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Une valeur non-@code{nil} de cette variable active l'expansion
automatique des abréviations quand elles sont insérées dans un
tampon. Si la valeur est @code{nil}, des abréviations peuvent être
définis, mais elles ne sont pas développées automatiquement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Abbrev Expansion</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Expansions d'abréviations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Abbrev Files</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Fichiers d'abréviations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Abbrev Mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Mode abbrev</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Abbrev Tables</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Tables d'abréviations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Abbrev mode is a minor mode controlled by the value of the variable @code{abbrev-mode}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le mode abbrev est un mode mineur contrôlé par la valeur de la
variable @code{abbrev-mode}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Abbrev tables used by various major modes.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Tables d'abréviations employées par divers modes majeurs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Abbrevs</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Abbrevs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Abbrevs And Abbrev Expansion</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Abréviations et abréviations expansions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Abbrevs and Abbrev Expansion</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Abbrevs et expansion d'abbrev</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Accessing files.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025458Z" creationid="jchelary" creationdate="20140131T025458Z">
        <seg>Accès aux fichiers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Acknowledgements</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Remerciements</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Adding to the definition of a function.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025358Z" creationid="jchelary" creationdate="20140131T025358Z">
        <seg>Ajout à la définition d'une fonction.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Advice and coding conventions for Emacs Lisp.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Conseils et règles de codage pour le Lisp d'Emacs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>After Emacs reads your init file, it initializes @code{auto-save-list-file-name} (if you have not already set it non-@code{nil}) based on this prefix, adding the host name and process ID.  If you set this to @code{nil} in your init file, then Emacs does not initialize @code{auto-save-list-file-name}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicoals" changedate="20140307T211732Z" creationid="nicoals" creationdate="20140307T211201Z">
        <seg>Après qu'Emacs ait lu votre fichier de configuration, il initialise @code{auto-save-list-file-name} (si vous ne l'avez pas déjà réglé en non-@code{nil}) sur la base de ce préfixe, en ajoutant le nom d'hôte et l'ID de processus. Si vous réglez cette option en @code{nil} dans votre fichier de configuration, Emacs n'initialisera pas @code{auto-save-list-file-name}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>All of these functions except @code{%} return a floating point value if any argument is floating.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Toutes ces fonctions, à part @code{%}, retourne une valeur à virgule
flottante si au moins un argument est une valeur à virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>An @code{arith-error} results if @var{divisor} is 0.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Un @code{arith-error} est généré quand @var{divisor} est 0.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>An abbrev table is represented as an obarray containing a symbol for each abbreviation.  The symbol's name is the abbreviation; its value is the expansion; its function definition is the hook function to do the expansion (@pxref{Defining Abbrevs}); its property list cell typically contains the use count, the number of times the abbreviation has been expanded.  Alternatively, the use count is on the @code{count} property and the system-abbrev flag is on the @code{system-type} property.  Abbrevs with a non-@code{nil} @code{system-type} property are called ``system'' abbrevs.  They are usually defined by modes or packages, instead of by the user, and are treated specially in certain respects.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicoals" changedate="20140307T211001Z">
        <seg>Une table d'abréviation est représentée par une liste contenant
un symbole pour chaque abréviation. Le nom du symbole est
l'abréviation ; sa valeur est l'expansion ; sa définition de fonction
est la fonction hook devant faire l'expansion (@pxref{Defining
Abbrevs}) ; sa cellule de liste de propriété contient typiquement le
compteur d'utilisation, le nombre de fois que l'abréviation a été
développée. Alternativement, le compteur d'utilisation pointe vers la
propriété @code{count} et le drapeau de system-abbrev pointe vers la
propriété @code{system-type}. Les abréviations avec la propriété
non-@code{nil} @code{system-type} s'appellent les abréviations de
``système''. Elles sont habituellement définies par des modes ou des
paquets, non par l'utilisateur, et traitées spécialement à certains
égards.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>An abbreviation or @dfn{abbrev} is a string of characters that may be expanded to a longer string.  The user can insert the abbrev string and find it replaced automatically with the expansion of the abbrev.  This saves typing.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Une abréviation ou @dfn{abbrev} est une chaîne de caractères qui peut
être développée dans une chaîne plus longue. L'utilisateur peut
insérer la chaîne d'abréviation et se rendre compte qu'elle a été
remplacée automatiquement avec l'expansion de l'abréviation. Ceci
améliore la dactylographie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Any argument whose name contains the name of a type (e.g., @var{integer}, @var{integer1} or @var{buffer}) is expected to be of that type.  A plural of a type (such as @var{buffers}) often means a list of objects of that type.  Arguments named @var{object} may be of any type.  (@xref{Lisp Data Types}, for a list of Emacs object types.)  Arguments with other sorts of names (e.g., @var{new-file}) are discussed specifically in the description of the function.  In some sections, features common to the arguments of several functions are described at the beginning.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Tout argument dont le nom contient le nom d'un type (par exemple,
@var{integer}, @var{integer1} ou @var{buffer}) est prévu pour être de
ce type. Un pluriel d'un type (tel que @var{buffers}) signifie souvent
une liste d'objets de ce type. Les arguments appelés @var{object}
peuvent être de n'importe quel type. (@xref{Lisp Data Types}, pour une
liste des types d'objet d'Emacs.) Des arguments avec d'autres sortes
de noms (par exemple, @var{new-file}) sont discutés spécialement dans
la description de la fonction. Dans quelques sections, des dispositifs
communs aux arguments de plusieurs fonctions sont décrits du
commencement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Appendices</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Annexes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Arithmetic Operations</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Opérations arithmétiques</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>As far as the Lisp reader is concerned, @samp{()} and @samp{nil} are identical: they stand for the same object, the symbol @code{nil}.  The different ways of writing the symbol are intended entirely for human readers.  After the Lisp reader has read either @samp{()} or @samp{nil}, there is no way to determine which representation was actually written by the programmer.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030122Z">
        <seg>En ce qui concerne le lecteur Lisp, @samp{()} et @samp{nil} sont
identiques : ils représentent le même objet, le symbole
@code{nil}. Les différentes manières d'écrire le symbole sont prévues
entièrement pour les lecteurs humains. Après que le lecteur Lisp ait
lu l'un ou l'autre, @samp{()} ou @samp{nil}, il n'y a aucune manière
de déterminer quelle représentation a été écrite réellement par le
programmeur.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>As the example illustrates, shifting one place to the right divides the value of a positive integer by two, rounding downward.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Comme l'exemple le montre, le décalage d'une place vers la droite
divise la valeur d'un nombre entier positif par deux, arrondissant
vers le bas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>As the examples illustrate, shifting the pattern of bits one place to the left produces a number that is twice the value of the previous number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Comme ces exemples le montrent, lorsqu'on décale la combinaison de
chiffres binaires d'une place vers la gauche, on produit un nombre qui
est le double de la valeur du précédent nombre.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>As you use this manual, we ask that you mark pages with corrections so you can later look them up and send them to us.  If you think of a simple, real-life example for a function or group of functions, please make an effort to write it up and send it in.  Please reference any comments to the chapter name, section name, and function name, as appropriate, since page numbers and chapter and section numbers will change and we may have trouble finding the text you are talking about.  Also state the number of the edition you are criticizing.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Quand vous employez ce manuel, nous vous demandons de marquer
les pages avec les corrections ainsi vous pouvez plus tard les
rechercher et nous les envoyer. Si vous pensez à un exemple simple et
réel pour une fonction ou au groupe de fonctions, merci de faire
l'effort de l'écrire et de l'envoyer. Veuillez mettre en référence
tous les commentaires au nom de chapitre, nom de section, et le nom de
fonction, comme approprié, puisque les numéros de page et les nombres
de chapitre et de section changeront et nous aurions des problèmes
pour trouver le texte dont vous parlez. Énoncer en outre le numéro de
l'édition que vous critiquez.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>As you use this manual, we ask that you send corrections as soon as you find them.  If you think of a simple, real life example for a function or group of functions, please make an effort to write it up and send it in.  Please reference any comments to the node name and function or variable name, as appropriate.  Also state the number of the edition you are criticizing.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025951Z">
        <seg>Quand vous vous servez de ce manuel, nous vous demandons d'envoyer les
corrections dès que vous en trouverez. Si vous pensez à un exemple
simple et réel pour une fonction ou au groupe de fonctions, merci de
faire l'effort de l'écrire et de l'envoyer. Veuillez mettre en
référence tous les commentaires du nom du nœud et la fonction ou le
nom de la variable, comme approprié. Énoncer en outre le numéro de
l'édition que vous critiquez.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>At present, each integer value has a unique Lisp object in Emacs Lisp.  Therefore, @code{eq} is equivalent to @code{=} where integers are concerned.  It is sometimes convenient to use @code{eq} for comparing an unknown value with an integer, because @code{eq} does not report an error if the unknown value is not a number---it accepts arguments of any type.  By contrast, @code{=} signals an error if the arguments are not numbers or markers.  However, it is a good idea to use @code{=} if you can, even for comparing integers, just in case we change the representation of integers in a future Emacs version.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Actuellement, chaque valeur de nombre entier a un objet unique de Lisp
dans Emacs Lisp. Par conséquent, @code{eq} est équivalent au @code{=}
quand des nombres entiers sont concernés. Il est parfois commode
d'employer @code{eq} pour comparer une valeur inconnue à un nombre
entier, parce que @code{eq} ne rapporte pas d'erreur si la valeur
inconnue n'est pas un nombre---il accepte des arguments de n'importe
quel type---. En revanche, @code{=} signale une erreur si les
arguments ne sont pas des nombres ou des marqueurs. Cependant, c'est
une bonne idée d'employer @code{=} si vous le pouvez, même pour
comparer des nombres entiers, juste au cas où nous changerions la
représentation des nombres entiers dans une future version d'Emacs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Because Emacs Lisp is designed for use in an editor, it has special features for scanning and parsing text as well as features for handling files, buffers, displays, subprocesses, and so on.  Emacs Lisp is closely integrated with the editing facilities; thus, editing commands are functions that can also conveniently be called from Lisp programs, and parameters for customization are ordinary Lisp variables.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicoals" changedate="20140307T213011Z">
        <seg>Puisque Emacs Lisp est conçu pour l'utilisation dans un éditeur, il dispose
de fonctions spécifiques pour le balayage et l'analyse de texte aussi bien
que des dispositifs pour manipuler des fichiers, des tampons, des affichages,
des sous-processus, et ainsi de suite. Emacs Lisp est intégré avec
de nombreuses fonctions d'édition ; ainsi, les commandes d'édition sont
des fonctions qui peuvent également être commodément appelées par des programmes
Lisp, et les paramètres de configuration sont des variables Lisp
ordinaires.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Because the symbols used for abbrevs are not interned in the usual obarray, they will never appear as the result of reading a Lisp expression; in fact, normally they are never used except by the code that handles abbrevs.  Therefore, it is safe to use them in an extremely nonstandard way.  @xref{Creating Symbols}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032521Z">
        <seg>Puisque les symboles utilisés pour les abréviations ne sont pas
compris dans la liste habituelle, ils n'apparaîtront jamais comme le
résultat de lecture d'une expression Lisp ; en fait, normalement ils
ne sont jamais utilisés excepté par le code qui traite ces
abréviations. Par conséquent, il est prudent de les utiliser d'une
manière extrêmement non-standard. @xref{Création de symboles}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Bil Lewis,</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Bil Lewis,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Bitwise Operations</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Opérations de bits</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Bitwise Operations on Integers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Opérations de bits sur les entiers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Buffer Text Notation</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Notation des textes de tampon</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>C-]</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C-]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>C-c</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C-c</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>C-h</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C-h</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>C-x</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C-x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>C-x 4</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C-x 4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>C-x 5</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C-x 5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>C-x 6</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C-x 6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>C-x @key{RET}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C-x @key{RET}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>C-x v</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C-x v</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Caveats</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Avertissements</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Command, macro, and special form descriptions have the same format, but the word `Function' is replaced by `Command', `Macro', or `Special Form', respectively.  Commands are simply functions that may be called interactively; macros process their arguments differently from functions (the arguments are not evaluated), but are presented the same way.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Commande, macro, et descriptions de formulaire spécial ont le même
format, mais le mot `Function' est remplacé par `Command', `Macro', ou
`Special Form', respectivement. Les commandes sont simplement des
fonctions qui peuvent s'appeler interactivement; les macros traitent
leurs arguments différemment des fonctions (les arguments ne sont pas
évalués), mais sont présentés la même manière.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Common Lisp</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Common Lisp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Comparison of Numbers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Comparaison des nombres</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Compilation makes programs run faster.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La compilation rend les programmes plus rapides.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Conditionals</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Conditions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Conditionals, loops, nonlocal exits.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Conditions, boucles et sorties non locales.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Control-X-prefix</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Control-X-prefix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Controlling expansion; expansion subroutines.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Contrôler l'expansion ; sous-programmes d'expansions.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Conventions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Conventions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Converting Lisp objects to text and back.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Convertir des objets Lisp en texte et inversement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Converting float to integer and vice versa.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Convertir des nombres à virgule flottante en nombres entiers et vice-versa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Copyright (C) 2000,2001,2002  Free Software Foundation, Inc.
51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Copyright (C) 2000,2001,2002  Free Software Foundation, Inc.
51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Corrections were supplied by Karl Berry, Jim Blandy, Bard Bloom, Stephane Boucher, David Boyes, Alan Carroll, Richard Davis, Lawrence R. Dodd, Peter Doornbosch, David A. Duff, Chris Eich, Beverly Erlebacher, David Eckelkamp, Ralf Fassel, Eirik Fuller, Stephen Gildea, Bob Glickstein, Eric Hanchrow, George Hartzell, Nathan Hess, Masayuki Ida, Dan Jacobson, Jak Kirman, Bob Knighten, Frederick M. Korz, Joe Lammens, Glenn M. Lewis, K. Richard Magill, Brian Marick, Roland McGrath, Skip Montanaro, John Gardiner Myers, Thomas A. Peterson, Francesco Potorti, Friedrich Pukelsheim, Arnold D. Robbins, Raul Rockwell, Per Starb@"ack, Shinichirou Sugou, Kimmo Suominen, Edward Tharp, Bill Trost, Rickard Westman, Jean White, Matthew Wilding, Carl Witty, Dale Worley, Rusty Wright, and David D. Zuhn.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les corrections ont été fournies par Karl Berry, Jim Blandy, Bard
Bloom, Stephane Boucher, David Boyes, Alan Carroll, Richard Davis,
Lawrence R. Dodd, Peter Doornbosch, David A. Duff, Chris Eich, Beverly
Erlebacher, David Eckelkamp, Ralf Fassel, Eirik Fuller, Stephen
Gildea, Bob Glickstein, Eric Hanchrow, George Hartzell, Nathan Hess,
Masayuki Ida, Dan Jacobson, Jak Kirman, Bob Knighten, Frederick
M. Korz, Joe Lammens, Glenn M. Lewis, K. Richard Magill, Brian Marick,
Roland McGrath, Skip Montanaro, John Gardiner Myers, Thomas
A. Peterson, Francesco Potorti, Friedrich Pukelsheim, Arnold
D. Robbins, Raul Rockwell, Per Starbäck, Shinichirou Sugou, Kimmo
Suominen, Edward Tharp, Bill Trost, Rickard Westman, Jean White,
Matthew Wilding, Carl Witty, Dale Worley, Rusty Wright, et David
D. Zuhn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Creating Symbols</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Créer des symboles</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Creating and working with abbrev tables.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Créer et travailler avec des tables d'abréviations.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Dan LaLiberte,</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Dan LaLiberte,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Data types of objects in Emacs Lisp.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Types de données des objets dans Emacs Lisp.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Defining Abbrevs</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Définir des abréviations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Defining Symbols</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Définir des symboles</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Defining major and minor modes.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Définition de modes majeurs et mineurs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Defining the bindings from keys to commands.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Définition de l'association des touches à des commandes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Definition of mapatoms</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Définition de mapatoms</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Definition of sentence-end-double-space</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Définition de sentence-end-double-space</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Definitions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Definitions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Display</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140216T051604Z" creationid="jchelary" creationdate="20140216T051604Z">
        <seg>Affichage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Documentation</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Documentation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Dozens of Lisp implementations have been built over the years, each with its own idiosyncrasies.  Many of them were inspired by Maclisp, which was written in the 1960s at MIT's Project MAC.  Eventually the implementors of the descendants of Maclisp came together and developed a standard for Lisp systems, called Common Lisp.  In the meantime, Gerry Sussman and Guy Steele at MIT developed a simplified but very powerful dialect of Lisp, called Scheme.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Des douzaines de réalisations de Lisp ont été établies au cours des
années, chacune avec ses propres particularités. Bon nombre d'entre
elles ont été inspirées par Maclisp, qui a été écrit dans les années
60 au MIT's Project MAC. Par la suite les programmeurs des descendants
de Maclisp se sont réunis et ont développé une norme pour des systèmes
Lisp, appelée Common Lisp. En attendant, Gerry Sussman et Guy Steele
au MIT ont développé un dialecte simplifié mais très puissant de Lisp,
appelé Scheme.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>ESC-prefix</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>ESC-prefix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Each symbol has a property list</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Chaque symbole a une liste de propriétés</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Elisp: (elisp)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Elisp: (elisp)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Emacs</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Emacs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Emacs Display</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140216T051610Z" creationid="jchelary" creationdate="20140216T051610Z">
        <seg>Affichage Emacs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Emacs Lisp is descended from Maclisp.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Emacs Lisp descend de Maclisp.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Emacs Lisp is not at all influenced by Scheme; but the GNU project has an implementation of Scheme, called Guile.  We use Guile in all new GNU software that calls for extensibility.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Emacs Lisp n'est pas du tout influencé par Scheme; mais le projet GNU
a une implémentation, appelée Guile. Nous employons Guile dans tout
nouveau logiciel de GNU qui réclame l'extensibilité.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Emacs Lisp provides the traditional four arithmetic operations: addition, subtraction, multiplication, and division.  Remainder and modulus functions supplement the division functions.  The functions to add or subtract 1 are provided because they are traditional in Lisp and commonly used.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031949Z">
        <seg>Emacs Lisp fournit les quatre opérations arithmétiques
traditionnelles : addition, soustraction, multiplication et division.
Les fonctions de reste et de modulo complètent les fonctions de
division. Les fonctions additionner ou soustraire 1 sont fournies parce
qu'elles sont traditionnelles en Lisp et utilisées généralement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Equality and inequality predicates.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Attributs d'égalité et d'inégalité.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Error Messages</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Messages d'erreur</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Evaluation</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T024956Z">
        <seg>Évaluation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Evaluation Notation</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Notation d'évaluation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Examples in this manual indicate printed text with @samp{@print{}}, irrespective of where that text goes.  The value returned by evaluating the form (here @code{bar}) follows on a separate line with @samp{@result{}}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les exemples de ce manuel indiquent le texte affiché avec
@samp{@print{}}, indépendamment de la destination du texte. La valeur
retournée par l'évaluation du formulaire (ici @code{bar}) suit sur une
ligne séparée avec @samp{@result{}}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Examples of Lisp code are formatted like this: @code{(list 1 2 3)}.  Names that represent metasyntactic variables, or arguments to a function being described, are formatted like this: @var{first-number}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032542Z">
        <seg>Des exemples du code de Lisp sont composés comme ceci : @code{(list 1
2 3)}. Des noms qui représentent des variables, ou des arguments à une
fonction décrite, sont composés comme ceci : @var{first-number}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Expansion: Abbrev Expansion</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Expansion : Expansions d'abréviations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Explanation of terms we use in this manual.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Explication des termes que nous employons en ce manuel.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Explicitly rounding floating point numbers.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Arrondir explicitement les nombres à virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Files: Abbrev Files</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Fichiers : Fichiers d'abréviations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Flaws and a request for help.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Erreurs et demande d'aide.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Float Basics</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031545Z">
        <seg>Introduction aux nombres à virgule flottante</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Floating Point Basics</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031611Z">
        <seg>Introduction aux nombres à virgule flottante</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Floating point numbers are useful for representing numbers that are not integral.  The precise range of floating point numbers is machine-specific; it is the same as the range of the C data type @code{double} on the machine you are using.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031637Z">
        <seg>Les nombres à virgule flottante sont utiles pour la représentation des
nombres qui ne sont pas intégraux. Le champ précis des nombres à
virgule flottante est propre à la machine ; c'est identique au champ
du type de données de C @code{double} sur la machine que vous
employée.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>For any two integers @var{dividend} and @var{divisor},</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Pour deux nombres entiers quelconques @var{dividend} et @var{divisor},</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>For any two numbers @var{dividend} and @var{divisor},</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Pour deux nombres quelconques @var{dividend} et @var{divisor},</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>For example, using 4-bit binary numbers, the ``logical and'' of 13 and 12 is 12: 1101 combined with 1100 produces 1100.  In both the binary numbers, the leftmost two bits are set (i.e., they are 1's), so the leftmost two bits of the returned value are set.  However, for the rightmost two bits, each is zero in at least one of the arguments, so the rightmost two bits of the returned value are 0's.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Par exemple, en utilisant des nombres binaires de 4 bits, le ``et
logique'' de 13 et 12 est 12: 1101 combiné avec 1100 produit 1100.
Dans les deux nombres binaires, les deux bits à l'extrême gauche sont
placés (c.-à-d., ils sont à 1), ainsi les deux bits à l'extrême gauche
de la valeur retournée sont placés. Cependant, pour les deux bits à
l'extrême droite, chacun est à zéro dans au moins un des arguments,
ainsi les deux bits à l'extrême droite de la valeur retournée sont 0.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>For negative arguments, the remainder is in principle machine-dependent since the quotient is; but in practice, all known machines behave alike.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032056Z">
        <seg>Pour des arguments négatifs, le reste est en principe dépendant de la
machine puisque le quotient est variable ; mais dans la pratique,
toutes les machines connues se comportent de la même façon.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>For the user-level commands for abbrevs, see @ref{Abbrevs,, Abbrev Mode, emacs, The GNU Emacs Manual}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Pour les commandes du niveau utilisateur des abréviations, voir
@ref{Abbrevs,, Abbrev Mode, emacs, The GNU Emacs Manual}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Format of Descriptions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Format de descriptions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Free Software Foundation</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Free Software Foundation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Fonction</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Functions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Fonctions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Functions, variables, macros, commands, user options, and special forms are described in this manual in a uniform format.  The first line of a description contains the name of the item followed by its arguments, if any.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Des fonctions, les variables, les macros, les commandes, les options
d'utilisateur, et les formulaires spéciaux sont décrits dans ce manuel
dans un format uniforme. La première ligne de la description contient
le nom de l'article suivi de ses arguments, s'il y a.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>GNU</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>GNU</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>GNU Emacs Internals</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Fonctionnement interne de GNU Emacs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>GNU Emacs Lisp is largely inspired by Maclisp, and a little by Common Lisp.  If you know Common Lisp, you will notice many similarities.  However, many features of Common Lisp have been omitted or simplified in order to reduce the memory requirements of GNU Emacs.  Sometimes the simplifications are so drastic that a Common Lisp user might be very confused.  We will occasionally point out how GNU Emacs Lisp differs from Common Lisp.  If you don't know Common Lisp, don't worry about it; this manual is self-contained.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>GNU Emacs Lisp est en grande partie inspiré par Maclisp, et par Common
Lisp. Si vous connaissez le Common Lisp, vous noterez beaucoup de
similitudes. Cependant, beaucoup de dispositifs de Common Lisp ont été
omis ou simplifié afin de réduire les conditions de mémoire de GNU
Emacs. Parfois les simplifications sont si importantes qu'un
utilisateur Lisp Common pourrait être très dérouté. Nous préciserons
de temps en temps comment le GNU Emacs Lisp diffère du Common Lisp. Si
vous ne connaissez pas le Common Lisp, ne vous inquiétez à son sujet;
ce manuel est indépendant.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>GNU Emacs supports two numeric data types: @dfn{integers} and @dfn{floating point numbers}.  Integers are whole numbers such as @minus{}3, 0, 7, 13, and 511.  Their values are exact.  Floating point numbers are numbers with fractional parts, such as @minus{}4.5, 0.0, or 2.71828.  They can also be expressed in exponential notation: 1.5e2 equals 150; in this example, @samp{e2} stands for ten to the second power, and that is multiplied by 1.5.  Floating point values are not exact; they have a fixed, limited amount of precision.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030712Z">
        <seg>GNU Emacs supporte deux types de données numériques : @dfn{entiers} et
@dfn{nombres à virgule flottante}. Les nombres entiers sont des
nombres entiers tels que @minus{}3, 0, 7, 13, et 511. Leurs valeurs
sont exactes. Les nombres à virgule flottante sont des nombres avec
les parties partielles, telles que le @minus{}4.5, 0.0, ou
2.71828. Ils peuvent également être exprimés en notation
exponentielle : 1.5e2 est égal à 150 ; dans cet exemple, le @samp{e2}
représente dix à la puissance deux, le tout est multiplié par 1.5. Les
valeurs à virgule flottante ne sont pas exactes ; elles sont fixes et
limitées en précision.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>GPL</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>GPL</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Generally speaking, the earlier chapters describe features of Emacs Lisp that have counterparts in many programming languages, and later chapters describe features that are peculiar to Emacs Lisp or relate specifically to editing.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>D'une manière générale, les premiers chapitres décrivent les
caractéristiques d'Emacs Lisp qui ont des équivalences dans beaucoup
de langages de programmation, et les chapitres postérieurs décrivent
les caractéristiques qui sont particulières au Emacs Lisp ou se
relient spécifiquement à l'édition.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Hash Tables</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Tables de hachage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Here are other examples:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Voici d'autres exemples:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Here are two examples of @code{lsh}, shifting a pattern of bits one place to the left.  We show only the low-order eight bits of the binary pattern; the rest are all zero.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032313Z">
        <seg>Voici deux exemples de @code{lsh}, décalant une combinaison de
chiffres binaires d'une place vers la gauche. Nous montrons seulement
les huit bits faibles du binaire modèle ; le reste est fait de zéro.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Here is a description of an imaginary function @code{foo}:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Voici une description de fonction imaginaire @code{foo}:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>How Lisp expressions are evaluated.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Comment les expressions Lisp sont évaluées.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>How symbols are kept unique.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Comment les symboles sont gardés uniques.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>How the editor command loop works,</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025421Z" creationid="jchelary" creationdate="20140131T025421Z">
        <seg>Comment fonctionne la boucle de commande de l'éditeur,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>How the manual is formatted.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Comment le manuel est composé.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>How the symbols @code{nil} and @code{t} are used.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Comment les symboles @code{nil} et @code{t} sont employés.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>How to add, subtract, multiply and divide.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Comment additionner, soustraire, multiplier et diviser.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @code{logand} is not passed any argument, it returns a value of @minus{}1.  This number is an identity element for @code{logand} because its binary representation consists entirely of ones.  If @code{logand} is passed just one argument, it returns that argument.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si @code{logand} est passé sans argument, il renvoie une valeur
@minus{}1. Ce nombre est un élément d'identité pour @code{logand}
parce que sa représentation binaire consiste entièrement de 1. Si
@code{logand} est passé à juste un argument, il renvoie cet argument.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{divisor} is specified, this uses the kind of division operation that corresponds to @code{mod}, rounding downward.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si @var{divisor} est indiqué, ceci utilise le genre d'opération de
division qui correspond à @code{mod}, arrondissant en bas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{from} and @var{to} are omitted, @var{var} is bound to @code{nil} before the loop begins, and the loop exits if @var{var} is non-@code{nil} at the beginning of an iteration.  Here is an example:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si @var{from} et @var{to} sont omis, @var{var} est lié à @code{nil}
avant que la boucle commence, et la boucle est arrêtée si @var{var}
est non-@code{nil} au début d'une itération. Voici un exemple :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{here} is non-@code{nil}, it inserts the text in the buffer before point, and returns @code{nil}.  Called interactively, the function prints the same information in the echo area, but giving a prefix argument makes @var{here} non-@code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si @var{here} est non-@code{nil}, ça insère le texte dans le tampon
avant le point, et renvoie le @code{nil}. Appelée interactivement, la
fonction affiche la même information dans le secteur d'écho, mais en
donnant un argument de préfixe rend @var{here} non-@code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{human} is non-@code{nil}, the description is human-oriented.  System abbrevs are listed and identified as such.  Otherwise the description is a Lisp expression---a call to @code{define-abbrev-table} that would define @var{name} as it is currently defined, but without the system abbrevs.  (The mode or package using @var{name} is supposed to add these to @var{name} separately.)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si @var{human} est non-@code{nil}, la description est orientée pour
l'humain. Des abréviations de système sont énumérées et identifiées en
tant que telles. Autrement la description est une expression de
Lisp---un appel à @code{define-abbrev-table} définirait @var{name}
comme il l'est actuellement, mais en dehors des abréviations de
système---. (Le mode ou le paquet employant @var{name} est supposé
ajouter ces derniers à @var{name} séparément.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{limit} is @code{t}, it means to choose a new seed based on the current time of day and on Emacs's process @acronym{ID} number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si @var{limit} est @code{t}, cela signifie de choisir une nouvelle
graine basée sur heure courante et sur le numéro de processus
@acronym{ID} d'Emacs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{limit} is a positive integer, the value is chosen to be nonnegative and less than @var{limit}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si @var{limit} est un nombre entier positif, la valeur est choisie
pour être non négative et inférieure à @var{limit}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If all the arguments are integers, then the result is an integer too.  This means the result has to be rounded.  On most machines, the result is rounded towards zero after each division, but some machines may round differently with negative arguments.  This is because the Lisp function @code{/} is implemented using the C division operator, which also permits machine-dependent rounding.  As a practical matter, all known machines round in the standard fashion.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si tous les arguments sont des nombres entiers, alors le résultat est
aussi un nombre entier. Ceci signifie que le résultat doit être
arrondi. Sur la plupart des machines, le résultat est arrondi vers le
zéro après chaque division, mais quelques machines peuvent arrondir
différemment les arguments négatifs. C'est parce que la fonction de
Lisp @code{/} est implémentée en utilisant l'opérateur de division de
C qui permet l'arrondi en fonction de la machine. Du côté pratique,
toutes les machines connues arrondissent en mode standard.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If this function is called more than once for the same @var{tabname}, subsequent calls add the definitions in @var{definitions} to @var{tabname}, rather than overriding the entire original contents.  (A subsequent call only overrides abbrevs explicitly redefined or undefined in @var{definitions}.)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si cette fonction est appelée plus d'une fois pour le même
@var{tabname}, les appels suivants ajoutent les définitions dans
@var{definitions} à @var{tabname}, plutôt que de modifier en entier le
contenu original. (Un appel suivant modifie seulement des abréviations
explicitement redéfinies ou éliminées dans @var{definitions}.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If you divide an integer by 0, an @code{arith-error} error is signaled.  (@xref{Errors}.)  Floating point division by zero returns either infinity or a NaN if your machine supports @acronym{IEEE} floating point; otherwise, it signals an @code{arith-error} error.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si vous divisez un nombre entier par 0, une erreur @code{arith-error}
est signalée. (@xref{Errors}.) La division d'un nombre à virgule
flottante par zéro renvoie l'un ou l'autre infini ou NaN si votre
machine supporte les nombres à virgule flottante @acronym{IEEE};
autrement, elle signale une erreur @code{arith-error}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If you want random numbers that don't always come out the same, execute @code{(random t)}.  This chooses a new seed based on the current time of day and on Emacs's process @acronym{ID} number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si vous voulez des nombres aléatoires qui ne sont pas toujours
pareils, exécuter @code{(random t)}. Ceci choisit une nouvelle graine
basée sur l'heure courante du jour et sur le numéro du processus
@acronym{ID} d'Emacs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If you want to increment the variable, you must use @code{setq}, like this:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032010Z">
        <seg>Si vous voulez incrémenter la variable, vous devez employer
@code{setq}, comme ceci :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In 29-bit binary, the decimal integer 5 looks like this:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>En 29-bit binaire, le nombre entier décimal 5 ressemble à ceci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In Emacs Lisp, @code{nil} and @code{t} are special symbols that always evaluate to themselves.  This is so that you do not need to quote them to use them as constants in a program.  An attempt to change their values results in a @code{setting-constant} error.  @xref{Constant Variables}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>En Emacs Lisp, @code{nil} et @code{t} sont des symboles spéciaux qui
s'évaluent toujours eux-mêmes. De sorte que vous n'avez pas besoin de
les citer pour les employer comme constantes dans un programme. Une
tentative de changer leurs valeurs a comme conséquence une erreur
@code{setting-constant}. @xref{Constant Variables}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In Emacs, pseudo-random numbers are generated from a ``seed'' number.  Starting from any given seed, the @code{random} function always generates the same sequence of numbers.  Emacs always starts with the same seed value, so the sequence of values of @code{random} is actually the same in each Emacs run! For example, in one operating system, the first call to @code{(random)} after you start Emacs always returns @minus{}1457731, and the second one always returns @minus{}7692030.  This repeatability is helpful for debugging.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032455Z">
        <seg>Dans Emacs, des nombres pseudo-aléatoires sont produits à partir de
``graine'' de nombre. À partir de n'importe quelle graine donnée, la
fonction @code{random} produit toujours le même ordre de
nombres. Emacs démarre toujours par la même valeur de graine, ainsi la
séquence des valeurs de @code{random} est réellement les mêmes dans
chaque passe d'Emacs ! Par exemple, dans un logiciel d'exploitation,
le premier appel à @code{(random)}, après que vous démarriez Emacs,
retourne toujours @minus{}1457731, et le second renvoie toujours
@minus{}7692030. Cette répétition est utile pour la correction.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In Lisp, the symbol @code{nil} has three separate meanings: it is a symbol with the name @samp{nil}; it is the logical truth value @var{false}; and it is the empty list---the list of zero elements.  When used as a variable, @code{nil} always has the value @code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030113Z">
        <seg>En Lisp, le symbole @code{nil} a trois significations distinctes : il
est un symbole nommé @samp{nil} ; c'est la vraie valeur logique
@var{false} ; et c'est la liste vide---la liste de zéro élément. Une
fois utilisé comme variable, @code{nil} a toujours la valeur
@code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In a computer, an integer is represented as a binary number, a sequence of @dfn{bits} (digits which are either zero or one).  A bitwise operation acts on the individual bits of such a sequence.  For example, @dfn{shifting} moves the whole sequence left or right one or more places, reproducing the same pattern ``moved over.''</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Dans un ordinateur, un nombre entier est représenté comme nombre
binaire, une séquence de @dfn{bits} (des chiffres qui sont zéro ou
un). Une opération de bits agit sur les bits individuels d'une telle
séquence. Par exemple, le @dfn{shifting} déplace l'ordre entier à
gauche ou à droite d'une ou plusieures places, pour reproduire le même
modèle ``moved over.''</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In a function description, the name of the function being described appears first.  It is followed on the same line by a list of argument names.  These names are also used in the body of the description, to stand for the values of the arguments.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Dans une description de fonction, le nom de la fonction étant décrite
apparaît d'abord. Il est suivi sur la même ligne d'une liste de noms
d'argument. Ces noms sont également employés dans le corps de la
description, pour représenter les valeurs des arguments.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In binary, in the 29-bit implementation, the argument looks like this:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032337Z">
        <seg>En binaire, dans l'exécution de 29 bits, l'argument ressemble à ceci :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In contexts where a truth value is expected, any non-@code{nil} value is considered to be @var{true}.  However, @code{t} is the preferred way to represent the truth value @var{true}.  When you need to choose a value which represents @var{true}, and there is no other basis for choosing, use @code{t}.  The symbol @code{t} always has the value @code{t}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Dans les contextes où une vraie valeur est prévue, n'importe quelle
valeur non-@code{nil} est considérée comme @var{true}. Cependant,
@code{t} est la manière préférée de représenter la vraie valeur
@var{true}. Quand vous devez choisir une valeur qui représente
@var{true}, et que vous n'avez aucun autre choix, employer
@code{t}. Le symbole @code{t} a toujours la valeur @code{t}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In contrast, shifting the pattern of bits one place to the right with @code{lsh} looks like this:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>En revanche, décaler la combinaison de chiffres binaires d'une place
vers la droite avec @code{lsh} ressemble à ceci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In this implementation, the largest 29-bit binary integer value is 268,435,455 in decimal.  In binary, it looks like this:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031444Z">
        <seg>Dans cet exemple, la plus grande valeur de nombre entier binaire de
29 bits est 268 435 455 en décimale. En binaire, elle ressemble à
ceci :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In this manual, we write @code{()} when we wish to emphasize that it means the empty list, and we write @code{nil} when we wish to emphasize that it means the truth value @var{false}.  That is a good convention to use in Lisp programs also.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Dans ce manuel, nous écrivons @code{()} quand nous souhaitons
souligner qu'il signifie la liste vide, et nous écrivons @code{nil}
quand nous souhaitons souligner qu'il signifie la vraie valeur
@var{false}. C'est une bonne convention à employer dans des programmes
de Lisp également.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In this special form, the arguments @var{from} and @var{to} are optional, but must both be present or both absent.  If they are present, @var{inc} may optionally be specified as well.  These arguments are grouped with the argument @var{var} into a list, to distinguish them from @var{body}, which includes all remaining elements of the form.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030353Z">
        <seg>Sous ce formulaire spécial, les arguments @var{from} et @var{to} sont
facultatif, mais il faut qu'ils soient tous deux présents ou tous deux
absents. S'ils sont présents, @var{inc} peut aussi bien être indiqué
de manière optionnelle. Ces arguments sont groupés avec l'argument @var{var}
dans une liste, pour les distinguer de @var{body}, qui inclut tous les
éléments restants de la forme.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Integer Basics</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031533Z">
        <seg>Introduction aux entiers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Introduction</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Introduction</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Introduction and conventions used.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Introduction et conventions utilisées.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>It is important to note that in Emacs Lisp, arithmetic functions do not check for overflow.  Thus @code{(1+ 268435455)} may evaluate to @minus{}268435456, depending on your hardware.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031958Z">
        <seg>Il est important de noter qu'en Emacs Lisp, les fonctions
arithmétiques ne vérifient pas le débordement. Ainsi @code{(1+
268435455)} peut être évalué à @minus{}268435456, selon votre
matériel.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Iteration</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025015Z">
        <seg>Itération</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Lisp (LISt Processing language) was first developed in the late 1950s at the Massachusetts Institute of Technology for research in artificial intelligence.  The great power of the Lisp language makes it ideal for other purposes as well, such as writing editing commands.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Lisp (LISt Processing language) a été développé la première fois vers
la fin des années 50 au Massachusetts Institute of Technology pour la
recherche en intelligence artificielle. La grande puissance du langage
Lisp le rend idéal pour d'autres buts aussi bien, comme l'écriture de
commandes d'édition.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Lisp Data Types</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Types de données Lisp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Lisp History</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>L'histoire de Lisp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Lisp history</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030008Z" creationid="jchelary" creationdate="20140131T030008Z">
        <seg>L'histoire de Lisp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>List of all error symbols.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Liste de tous les symboles d'erreur</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Logical and, or, not, shifting.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>and, or, not logique et décalage.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>M-o</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>M-o</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Maclisp</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Maclisp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Macros are a way to extend the Lisp language.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les macros sont un moyen d'étendre le langage Lisp.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Many of the examples in this manual print text when they are evaluated.  If you execute example code in a Lisp Interaction buffer (such as the buffer @samp{*scratch*}), the printed text is inserted into the buffer.  If you execute the example by other means (such as by evaluating the function @code{eval-region}), the printed text is displayed in the echo area.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Plusieurs des exemples de ce manuel affichent du texte quand ils sont
évalués. Si vous exécutez le code d'exemple dans un tampon
d'interaction de Lisp (tel que le tampon @samp{*scratch*}), le texte
affiché est inséré dans le tampon. Si vous exécutez l'exemple par
d'autres moyens (comme pour évaluer la fonction @code{eval-région}),
le texte affiché est montré dans le secteur d'écho.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Many of the functions described in this chapter accept markers for arguments in place of numbers.  (@xref{Markers}.)  Since the actual arguments to such functions may be either numbers or markers, we often give these arguments the name @var{number-or-marker}.  When the argument value is a marker, its position value is used and its buffer is ignored.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031454Z">
        <seg>Plusieurs des fonctions décrites dans ce chapitre acceptent des
marqueurs comme arguments au lieu des nombres. (@xref{Markers}.)
Puisque les arguments réels à de telles fonctions peuvent être des
nombres ou des marqueurs, nous donnons souvent à ces arguments le nom
de @var{number-or-marker}. Quand la valeur d'argument est un marqueur,
sa valeur de position est employée et son tampon est ignoré.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Markers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Marqueurs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Math Functions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Fonctions mathématiques</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Modes</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Modes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Most modern computers support the @acronym{IEEE} floating point standard, which provides for positive infinity and negative infinity as floating point values.  It also provides for a class of values called NaN or ``not-a-number''; numerical functions return such values in cases where there is no correct answer.  For example, @code{(/ 0.0 0.0)} returns a NaN.  For practical purposes, there's no significant difference between different NaN values in Emacs Lisp, and there's no rule for precisely which NaN value should be used in a particular case, so Emacs Lisp doesn't try to distinguish them (but it does report the sign, if you print it).  Here are the read syntaxes for these special floating point values:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031646Z">
        <seg>La plupart des ordinateurs modernes soutiennent la norme à virgule
flottante @acronym{IEEE}, qui prévoit plus l'infini et moins l'infini
comme valeurs à virgule flottante. Elle prévoit également une classe
de valeurs appelées NaN ou ``not-a-number''; les fonctions numériques
renvoient de telles valeurs dans les cas où il n'y a aucune réponse
correcte. Par exemple, @code{(/ 0.0 0.0)} renvoie NaN. Pour des buts
pratiques, il n'y a aucune différence significative entre différentes
valeurs de NaN en Emacs Lisp, et il n'y a aucune règle pour la valeur
NaN à utiliser dans un cas particulier, ainsi Emacs Lisp n'essaye pas
de les distinguer (mais rapporte le signal, si vous l'affichez). Voici
les syntaxes lues pour ces valeurs à virgule flottante spéciales :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Most of the GNU Emacs text editor is written in the programming language called Emacs Lisp.  You can write new code in Emacs Lisp and install it as an extension to the editor.  However, Emacs Lisp is more than a mere ``extension language''; it is a full computer programming language in its own right.  You can use it as you would any other programming language.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicoals" changedate="20140307T212258Z">
        <seg>La majeure partie de l'éditeur de texte GNU Emacs est écrite dans
le langage de programmation appelé Emacs Lisp. Vous pouvez écrire du
code en Emacs Lisp et l'installer comme extension de l'éditeur.
Cependant, Emacs Lisp est plus qu'un simple ``langage d'extension'' ;
c'est un langage de programmation d'ordinateur complet et autonome.
Vous pouvez l'employer comme n'importe quel autre langage de programmation.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>New Symbols</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Nouveaux symboles</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Non-ASCII Characters</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030951Z">
        <seg>Caractères non-ASCII</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Notation for describing functions, variables, etc.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Notation pour décrire des fonctions, des variables, etc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Numbers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Nombres</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Numbers and arithmetic functions.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Nombres et fonctions arithmétiques.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Numeric Conversions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Conversions numériques</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Obtaining random integers, predictable or not.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Obtention des nombres entiers aléatoires, prévisibles ou pas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>On some machines, any integer representable in Lisp may be the result of @code{random}.  On other machines, the result can never be larger than a certain maximum or less than a certain (negative) minimum.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Sur quelques machines, n'importe quel nombre entier représentable en
Lisp peut être le résultat de @code{random}. Sur d'autres machines, le
résultat peut ne jamais être plus grand qu'un certain maximum ou moins
qu'un certain minimum (négatif).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>On the other hand, shifting one place to the right looks like this:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032323Z">
        <seg>D'autre part, le décalage d'une place vers la droite ressemble à ceci :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Please mail comments and corrections to</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Merci d'envoyer vos commentaires et corrections à</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Positions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Positions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Predicates on Numbers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Attributs des nombres</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Printing Notation</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Notation d'affichage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Processes</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Processus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Property Lists</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Listes de propriétés</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Q</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Q</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Random Numbers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Nombres aléatoires</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Reading files of Lisp code into Lisp.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Lire des fichiers de code Lisp depuis Lisp.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Representation and range of floating point.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030742Z">
        <seg>Représentation et champ des nombres à virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Representation and range of integers.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Représentation et champ des nombres entiers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Return non-nil iff @var{object} is one of the two canonical boolean values: @code{t} or @code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032750Z">
        <seg>Retourne non-nil si @var{objet} est une des deux valeurs booléennes
canoniques : @code{t} ou @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Rounding Operations</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Opérations d'arrondissage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Saving Abbrevs in Files</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T024608Z" creationid="jchelary" creationdate="20140131T024541Z">
        <seg>Enregistrer des abréviations dans les fichiers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Saving abbrevs in files.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Sauver des abréviations dans les fichiers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Searching and Matching</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Recherches et correspondances</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Searching buffers for strings or regexps.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Rechercher une chaîne ou expression rationnelle dans un buffer.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>See @code{put} for an example.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Consultez @code{put} pour un exemple.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Setting Up Abbrev Mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Démarrer le mode abbrev</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Setting up Emacs for abbreviation.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Configuration d'Emacs pour l'abréviation.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Shifting a pattern of bits two places to the left produces results like this (with 8-bit binary numbers):</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032319Z">
        <seg>Lorsqu'on décale de deux places une combinaison de chiffres binaires
vers la gauche, on produit les résultats suivants (avec des nombres
binaires de 8 bits) :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Since the arithmetic functions do not check whether integers go outside their range, when you add 1 to 268,435,455, the value is the negative integer @minus{}268,435,456:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Puisque les fonctions arithmétiques ne vérifient pas si les nombres
entiers ne sont pas à l'extérieur de leur champ, quand vous
additionnez 1 à 268 435 455, la valeur est le nombre entier négatif
@minus{}268 435 456:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Some Terms</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Quelques termes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Some examples describe modifications to the contents of a buffer, by showing the ``before'' and ``after'' versions of the text.  These examples show the contents of the buffer in question between two lines of dashes containing the buffer name.  In addition, @samp{@point{}} indicates the location of point.  (The symbol for point, of course, is not part of the text in the buffer; it indicates the place @emph{between} two characters where point is currently located.)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Quelques exemples décrivent des modifications du contenu d'un tampon,
en montrant ``l'avant'' et ``l'après'' des versions du texte. Ces
exemples montrent le contenu du tampon en question entre deux lignes
de tirets contenant le nom du tampon. En outre, le @samp{@point{}}
indique l'endroit du point. (Le symbole pour le point, naturellement,
n'est pas une partie du texte dans le tampon ; il indique l'endroit
@emph{entre} deux caractères où le point est actuellement localisé.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Some examples signal errors.  This normally displays an error message in the echo area.  We show the error message on a line starting with @samp{@error{}}.  Note that @samp{@error{}} itself does not appear in the echo area.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Quelques exemples de signal d'erreurs. Ceci montre normalement un
message d'erreur dans le secteur d'écho. Nous montrons le message
d'erreur sur une ligne commençant par @samp{@error{}}. Noter que
@samp{@error{}} lui-même n'apparaît pas dans le secteur d'écho.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Sometimes it is useful to compare numbers with @code{equal}; it treats two numbers as equal if they have the same data type (both integers, or both floating point) and the same value.  By contrast, @code{=} can treat an integer and a floating point number as equal.  @xref{Equality Predicates}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Parfois il est utile de comparer des nombres avec @code{equal}; les
deux nombres sont traités comme égaux s'ils ont le même type de
données (les deux sont des nombres entiers, ou à virgule flottante) et
la même valeur. En revanche, @code{=} peut traiter un nombre entier et
un nombre à virgule flottante en tant qu'égaux. @xref{Equality
Predicates}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Sometimes to help describe one form we show another form that produces identical results.  The exact equivalence of two forms is indicated with @samp{@equiv{}}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Parfois pour aider à décrire un formulaire, nous montrons un autre
formulaire qui produit des résultats identiques. L'équivalence exacte
de deux formulaires est indiquée avec le @samp{@equiv{}}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Special form descriptions use a more complex notation to specify optional and repeated arguments because they can break the argument list down into separate arguments in more complicated ways.  @samp{@r{[}@var{optional-arg}@r{]}} means that @var{optional-arg} is optional and @samp{@var{repeated-args}@dots{}} stands for zero or more arguments.  Parentheses are used when several arguments are grouped into additional levels of list structure.  Here is an example:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les descriptions de formulaire spécial emploient une notation plus
complexe pour indiquer des arguments facultatifs et répétés parce
qu'elles peuvent démonter la liste d'argument en arguments séparés de
manières plus compliquées. @samp{@r{[}@var{optional-arg}@r{]}}
signifie que @var{optional-arg} est facultatif et
@samp{@var{reapeated-args}@dots{}} représente zéro arguments ou
plus. Des parenthèses sont employées quand plusieurs arguments sont
groupés dans les niveaux additionnels de la structure de liste. Voici
un exemple :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Specifying abbreviations and their expansions.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Spécifier des abréviations et leurs expansions.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Standard Abbrev Tables</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Tables standard d'abréviations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Standard Errors</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Erreurs standard</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Standard Mathematical Functions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Fonctions mathématiques standards</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Strings and Characters</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Chaînes et caractères</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Strings, and functions that work on them.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Chaînes et fonctions qui sont basés sur elles.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Symbol Components</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Composants des symboles</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Symbol Type</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le type symbole</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Symbols</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Symboles</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Symbols have names, values, function definitions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les symboles ont des noms, des valeurs, des définitions de fonction</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Symbols represent names, uniquely.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les symboles représentent des noms, de façon unique.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Syntax Tables</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Tables de syntaxe</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Tables: Abbrev Tables</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Tables : Tables d'abréviations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Testing for numbers.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Tester les nombres.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Text</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Texte</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The @code{-} function serves two purposes: negation and subtraction.  When @code{-} has a single argument, the value is the negative of the argument.  When there are multiple arguments, @code{-} subtracts each of the @var{more-numbers-or-markers} from @var{number-or-marker}, cumulatively.  If there are no arguments, the result is 0.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032036Z">
        <seg>La fonction @code{-} atteint deux objectifs : négation et soustraction.
Quand @code{-} a un argument simple, la valeur est le négatif de
l'argument. Quand il y a des arguments multiples, @code{-} soustrait
chacun des @var{more-numbers-or-markers} de @var{number-or-marker}, de
manière cumulée. S'il n'y a aucun argument, le résultat est 0.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The @code{wholenump} predicate (whose name comes from the phrase ``whole-number-p'') tests to see whether its argument is a nonnegative integer, and returns @code{t} if so, @code{nil} otherwise.  0 is considered non-negative.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>L'attribut @code{wholenump} (dont le nom vient de l'expression
``whole-number-p'') teste pour voir si son argument est un nombre
entier non négatif, et renvoie le @code{t} si oui, @code{nil}
autrement. 0 est considéré non négatif.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The Lisp reader reads an integer as a sequence of digits with optional initial sign and optional final period.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le lecteur de Lisp lit un nombre entier comme une séquence de chiffres
avec le signe initial et le point final facultatifs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The appearance of the keyword @code{&amp;optional} in the argument list indicates that the subsequent arguments may be omitted (omitted arguments default to @code{nil}).  Do not write @code{&amp;optional} when you call the function.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>L'apparition du mot-clé @code{&amp;optional} dans la liste d'argument
indique que les arguments suivants peuvent être omis (les arguments
omis se transfèrent comme @code{nil}). Ne pas écrire @code{&amp;optional}
quand vous appelez la fonction.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The argument @var{hook} is a function or @code{nil}.  If @var{hook} is non-@code{nil}, then it is called with no arguments after the abbrev is replaced with @var{expansion}; point is located at the end of @var{expansion} when @var{hook} is called.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140216T051432Z" creationid="jchelary" creationdate="20140216T051432Z">
        <seg>L'argument @var{hook} est une fonction ou @code{nil}. Si @var{hook} n'est pas @code{nil} alors il est appelé sans arguments après que l'abbréviation soit remplacée par @var{expansion}. Le point est situé à la fin de @var{expansion} quand @var{hook} est appelée.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The argument @var{name} should be a string.  The argument @var{expansion} is normally the desired expansion (a string), or @code{nil} to undefine the abbrev.  If it is anything but a string or @code{nil}, then the abbreviation ``expands'' solely by running @var{hook}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140216T051209Z" creationid="jchelary" creationdate="20140216T051209Z">
        <seg>L'argument @var{name} doit être une chaîne de caractères. L'argument @var{expansion} est normalement l'expansion souhaitée (une chaîne de caractères), or @code{nil} pour éliminer une abréviation. S'il n'est ni une chaîne de caractères ni @code{nil} alors l'abréviation se "développe" exclusivement en exécutant @var{hook}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The authors, editors, and sponsors of this manual.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les auteurs, les rédacteurs, et les commanditaires de ce manuel.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The bitwise operations in Emacs Lisp apply only to integers.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les opérations de bits en Emacs Lisp s'appliquent seulement aux
nombres entiers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The category---function, variable, or whatever---appears at the beginning of the line.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La catégorie---fonction, variable, ou quoi que soit---est
imprimé à côté de la marge.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The category---function, variable, or whatever---is printed next to the right margin.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La catégorie---fonction, variable, ou quoi que soit---est
imprimé à côté de la marge.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The description follows on succeeding lines, sometimes with examples.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La description suit les lignes réussies, parfois avec des exemples.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The following two variables have existed since Emacs version 19.23:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030441Z">
        <seg>Les deux variables suivantes existent depuis la version 19.23 d'Emacs :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The format we use for buffer contents in examples.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le format que nous employons pour le contenu de tampons dans les exemples.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The format we use for examples of errors.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le format que nous employons pour des exemples d'erreurs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The format we use for examples of evaluation.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le format que nous employons pour des exemples de l'évaluation.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The format we use when examples print text.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le format que nous employons quand les exemples affichent du texte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The function @code{foo} subtracts @var{integer1} from @var{integer2}, then adds all the rest of the arguments to the result.  If @var{integer2} is not supplied, then the number 19 is used by default.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La fonction @code{foo} soustrait @var{integer1} de @var{integer2},
puis ajoute tout reste des arguments au résultat. Si @var{integer2}
n'est pas fourni, alors le numéro 19 est appliqué par défaut.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The function @code{lsh}, like all Emacs Lisp arithmetic functions, does not check for overflow, so shifting left can discard significant bits and change the sign of the number.  For example, left shifting 268,435,455 produces @minus{}2 on a 29-bit machine:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032334Z">
        <seg>La fonction @code{lsh}, comme toutes les fonctions arithmétiques
d'Emacs Lisp, ne vérifie pas le débordement, ainsi de décalage à
gauche peut changer le bit fort et changer le signe du nombre. Par
exemple, le décalage à gauche de 268.435.455 produit @minus{}2 sur une
machine de 29 bits :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The functions @code{ffloor}, @code{fceiling}, @code{fround}, and @code{ftruncate} take a floating point argument and return a floating point result whose value is a nearby integer.  @code{ffloor} returns the nearest integer below; @code{fceiling}, the nearest integer above; @code{ftruncate}, the nearest integer in the direction towards zero; @code{fround}, the nearest integer.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032308Z">
        <seg>Les fonctions @code{ffloor}, @code{fceiling}, @code{fround}, et
@code{ftruncate} prennent un argument à virgule flottante et renvoient
un monbre à virgule flottante représentant la valeur d'un nombre
entier voisin. @code{ffloor} renvoie le nombre entier le plus proche
inférieur ; @code{fceiling}, le nombre entier le plus proche supérieur ;
@code{ftruncate}, le nombre entier le plus proche de zéro ;
@code{fround}, le nombre entier le plus proche.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The functions in this section test for numbers, or for a specific type of number.  The functions @code{integerp} and @code{floatp} can take any type of Lisp object as argument (they would not be of much use otherwise), but the @code{zerop} predicate requires a number as its argument.  See also @code{integer-or-marker-p} and @code{number-or-marker-p}, in @ref{Predicates on Markers}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les fonctions dans cette section testent les nombres, ou un type
spécifique de nombre. Les fonctions @code{integerp} et @code{floatp}
peuvent prendre n'importe quel type d'objet de Lisp comme argument
(ils ne seraient pas utiles autrement), mais l'attribut @code{zerop}
exige un nombre en tant qu'argument. Voir également
@code{integer-or-marker-p} et @code{number-ou-marker-p}, dans le
@ref{Predicates on Markers}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The integer @minus{}1 looks like this:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le nombre entier @minus{}1 ressemble à ceci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The keyword @code{&amp;rest} (which must be followed by a single argument name) indicates that any number of arguments can follow.  The single argument name following @code{&amp;rest} will receive, as its value, a list of all the remaining arguments passed to the function.  Do not write @code{&amp;rest} when you call the function.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le mot-clé @code{&amp;rest} (qui doit être suivi d'un nom d'argument
simple) indique qu'un certain nombre d'arguments va suivre. Le nom
d'argument simple suivant @code{&amp;rest} recevra, comme valeur, une
liste de tous arguments restants à passer à la fonction. Ne pas écrire
@code{&amp;rest} quand vous appelez la fonction.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The major version number of Emacs, as an integer.  For Emacs version 20.3, the value is 20.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le numéro principal de version d'Emacs, comme nombre entier. Pour la
version 20.3 d'Emacs, la valeur est 20.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The manual should be fully correct in what it does cover, and it is therefore open to criticism on anything it says---from specific examples and descriptive text, to the ordering of chapters and sections.  If something is confusing, or you find that you have to look at the sources or experiment to learn something not covered in the manual, then perhaps the manual should be fixed.  Please let us know.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025900Z">
        <seg>Le manuel devrait être entièrement correct dans ce qu'il couvre, et il
est donc soumis à la critique sur tout ce qu'il indique---des exemples
spécifiques et du texte descriptif, à l'ordre des chapitres et des
sections---. Si quelque chose est peu clair, ou si vous constatez que
vous devez regarder les sources ou expérimenter pour apprendre quelque
chose non couvert dans le manuel, alors peut-être faudrait-il
l'inclure dans le manuel. Merci de nous faire le savoir.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The minor version number of Emacs, as an integer.  For Emacs version 20.3, the value is 3.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le numéro de version mineur d'Emacs, comme nombre entier. Pour la
version 20.3 d'Emacs, la valeur est 3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The negative integer, @minus{}5, is creating by subtracting 4 from @minus{}1.  In binary, the decimal integer 4 is 100.  Consequently, @minus{}5 looks like this:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le nombre entier négatif, @minus{}5, est créé en soustrayant 4 de
@minus{}1. Dans la base binaire, le nombre entier décimal 4 est
100. En conséquence, @minus{}5 ressemble à ceci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The range of values for an integer depends on the machine.  The minimum range is @minus{}268435456 to 268435455 (29 bits; i.e.,</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le champ des valeurs pour un nombre entier dépend de la machine. Le
champ minimum est @minus{}268435456 à 268435455 (29 bits; c.-à-d.,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The read-syntax for floating point numbers requires either a decimal point (with at least one digit following), an exponent, or both.  For example, @samp{1500.0}, @samp{15e2}, @samp{15.0e2}, @samp{1.5e3}, and @samp{.15e4} are five ways of writing a floating point number whose value is 1500.  They are all equivalent.  You can also use a minus sign to write negative floating point numbers, as in @samp{-1.0}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La syntaxe de lecture pour des nombres à virgule flottante exige une
virgule décimale (avec au moins un chiffre suivant), un exposant, ou
les deux. Par exemple, @samp{1500.0}, @samp{15e2}, @samp{15.0e2},
@samp{1.5e3}, et @samp{.15e4} sont cinq manières d'écrire le nombre à
virgule flottante dont la valeur est 1500. Ils sont tous
équivalents. Vous pouvez également employer un signe moins pour écrire
des nombres négatifs à virgule flottante, comme dans @samp{- 1.0}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The set of abbrevs currently in effect is recorded in an @dfn{abbrev table}.  Each buffer has a local abbrev table, but normally all buffers in the same major mode share one abbrev table.  There is also a global abbrev table.  Normally both are used.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicoals" changedate="20140307T210642Z">
        <seg>Actuellement, l'ensemble des abréviations est enregistré dans un
@dfn{abbrev table}. Chaque tampon a une table locale d'abréviations,
mais normalement tous les tampons dans le même mode majeur partage une
table principale d'abréviations. Il y a donc une table d'abréviation
globale. Normalement toutes les deux sont employées.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The syntax for integers in bases other than 10 uses @samp{#} followed by a letter that specifies the radix: @samp{b} for binary, @samp{o} for octal, @samp{x} for hex, or @samp{@var{radix}r} to specify radix @var{radix}.  Case is not significant for the letter that specifies the radix.  Thus, @samp{#b@var{integer}} reads @var{integer} in binary, and @samp{#@var{radix}r@var{integer}} reads @var{integer} in radix @var{radix}.  Allowed values of @var{radix} run from 2 to 36.  For example:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La syntaxe pour des nombres entiers dans les bases autres que la base
10 utilise @samp{#} suivi d'une lettre qui indique la base: @samp{b}
pour binaire, @samp{o} pour octal, @samp{x} pour hex, ou
@samp{@var{base}r} pour indiquer la base @var{base}. Le cas n'est pas
significatif pour la lettre qui indique la base. Ainsi, le
@samp{#b@var{integer}} lit @var{integer} en base binaire, et le
@samp{#@var{base}r@var{integer}} lit @var{integer} dans la base
@var{base}. Les valeurs permises de @var{base} vont de 2 à 36. Par
exemple:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The value @code{-0.0} is distinguishable from ordinary zero in @acronym{IEEE} floating point, but Emacs Lisp @code{equal} and @code{=} consider them equal values.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031811Z">
        <seg>La valeur @code{-0.0} est distinguable de l'ordinaire zéro dans la
virgule flottante de @acronym{IEEE}, mais en Emacs Lisp @code{equal} et
@code{=} sont considérés comme valeurs égales.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The value of @code{(acos @var{arg})} is a number between 0 and</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur de @code{(acos @var{arg})} est un nombre entre 0 et</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The value of @code{(asin @var{arg})} is a number between</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur de @code{(asin @var{arg})} est un nombre entre</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The value of @code{(atan @var{y})} is a number between</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur de @code{(acos @var{arg})} est un nombre entre</seg>
      </tuv>
    </tu>
    <tu>
      <note>use count =	usage du compteur ?
		compteur d'usage ?</note>
      <tuv lang="en-us">
        <seg>The value of @var{count}, if specified, initializes the abbrev's usage-count.  If @var{count} is not specified or @code{nil}, the use count is initialized to zero.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur @var{count}, si indiquée, initialise les abréviations
usage-compter. Si @var{count} n'est pas indiqué ou est @code{nil},
l'usage du compteur est initialisée à zéro.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The value of this variable indicates the time at which Emacs was built at the local site.  It is a list of three integers, like the value of @code{current-time} (@pxref{Time of Day}).</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur de cette variable indique le moment où Emacs a été construit
à l'emplacement local. C'est une liste de trois nombres entiers, comme
la valeur de @code{current-time} (@pxref{Time of Day}).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The value of this variable is a full keymap used by Electric Command Future mode.  The functions in this map allow you to edit commands you have not yet thought about executing.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur de cette variable est une keymap employé par le mode
Electric Command Future. Les fonctions dans cette map vous permettent
d'éditer des commandes auxquelles vous n'avez pas avez encore pensé.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The value of this variable is the largest integer that Emacs Lisp can handle.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur de cette variable est le plus grand nombre entier que Emacs
Lisp peut manipuler.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The value of this variable is the smallest integer that Emacs Lisp can handle.  It is negative.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur de cette variable est le plus petit nombre entier que Emacs
Lisp peut manipuler. Elle est négative.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The value of this variable is the version of Emacs being run.  It is a string such as @code{"20.3.1"}.  The last number in this string is not really part of the Emacs release version number; it is incremented each time you build Emacs in any given directory.  A value with four numeric components, such as @code{"20.3.9.1"}, indicates an unreleased test version.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030435Z">
        <seg>La valeur de cette variable est la version d'Emacs en cours. C'est une
chaine telle que @code{"20.3.1"}. Le dernier nombre dans cette chaine
n'est pas vraiment une partie du nombre de version de sortie d'Emacs ;
il est incrémenté chaque fois que vous construisez Emacs dans
n'importe quel répertoire donné. Une valeur avec quatre composants
numériques, tels que @code{"20.3.9.1"}, indique une version d'essai
non sortie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>There are four functions to convert floating point numbers to integers; they differ in how they round.  All accept an argument @var{number} and an optional argument @var{divisor}.  Both arguments may be integers or floating point numbers.  @var{divisor} may also be @code{nil}.  If @var{divisor} is @code{nil} or omitted, these functions convert @var{number} to an integer, or return it unchanged if it already is an integer.  If @var{divisor} is non-@code{nil}, they divide @var{number} by @var{divisor} and convert the result to an integer.  An @code{arith-error} results if @var{divisor} is 0.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031902Z">
        <seg>Il y a quatre fonctions pour convertir des nombres à virgule flottante
en nombres entiers ; ils diffèrent dans la façon dont ils
arrondissent. Tous acceptent un argument @var{number} et un argument
facultatif @var{divisor}. Les deux arguments peuvent être des nombres
entiers ou des nombres à virgule flottante. @var{divisor} peut
également être @code{nil}. Si @var{divisor} est @code{nil} ou omis,
ces fonctions convertissent @var{number} en nombre entier, ou le
renvoient sans changement si c'est déjà un nombre entier. Si
@var{divisor} est non-@code{nil}, elles divisent @var{number} par
@var{divisor} et convertissent le résultat en nombre entier. Un
@code{arith-error} en résulte si @var{divisor} est 0.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>There is another wrinkle: because floating point arithmetic is not exact, it is often a bad idea to check for equality of two floating point values.  Usually it is better to test for approximate equality.  Here's a function to do this:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031702Z">
        <seg>Il y a un autre problème : parce que l'arithmétique de virgule
flottante n'est pas exacte, c'est souvent une mauvaise idée de
vérifier l'égalité de deux valeurs à virgule flottante. Habituellement
il vaut mieux déterminer l'égalité approximative. Voici une fonction
pour faire ceci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Therefore,</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Par conséquent,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>These are the ordinary trigonometric functions, with argument measured in radians.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ce sont les fonctions trigonométriques ordinaires, avec l'argument mesuré
en radians.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>These facilities provide information about which version of Emacs is in use.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ces fonctions fournissent les informations au sujet de la version
d'Emacs en service.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>These mathematical functions allow integers as well as floating point numbers as arguments.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ces fonctions mathématiques autorisent des nombres entiers aussi bien
que des nombres à virgule flottante comme arguments.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This Info file contains edition @value{VERSION} of the GNU Emacs Lisp Reference Manual, corresponding to GNU Emacs version @value{EMACSVER}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ce dossier d'information contient l'édition @value{VERSION} du Manuel
de référence GNU Emacs Lisp, correspondant à la version
@value{EMACSVER} de GNU Emacs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This chapter describes a number of features related to the display that Emacs presents to the user.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140216T051644Z" creationid="jchelary" creationdate="20140216T051644Z">
        <seg>Ce chapitre décrit des fonctions en rapport avec l'affichage qu'Emacs présente à l'utilisateur.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function acts like @code{eq} except when both arguments are numbers.  It compares numbers by type and numeric value, so that @code{(eql 1.0 1)} returns @code{nil}, but @code{(eql 1.0 1.0)} and @code{(eql 1 1)} both return @code{t}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction agit comme @code{eq} sauf quand les deux arguments sont
des nombres. Elle compare des nombres par le type et la valeur
numérique, de sorte que @code{(eql 1.0 1)} renvoie le @code{nil}, mais
@code{(eql 1.0 1.0)} et @code{(eql 1 1)} renvoient tous les deux le
@code{t}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function adds its arguments together.  When given no arguments, @code{+} returns 0.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction fait la somme de ses arguments. Si aucun argument n'est
donné, @code{+} retourne 0.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function creates and returns a new, empty abbrev table---an obarray containing no symbols.  It is a vector filled with zeros.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction crée et renvoie une nouvelle table vide
d'abréviations---une liste ne contient aucun symbole---. C'est un
vecteur rempli de zéros.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function defines @var{tabname} (a symbol) as an abbrev table name, i.e., as a variable whose value is an abbrev table.  It defines abbrevs in the table according to @var{definitions}, a list of elements of the form @code{(@var{abbrevname} @var{expansion} @var{hook} @var{usecount} @var{system-flag})}.  If an element of @var{definitions} has length less than five, omitted elements default to @code{nil}.  A value of @code{nil} for @var{usecount} is equivalent to zero.  The return value is always @code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction définit @var{tabname} (un symbole) comme le nom d'une
table d'abréviations, c.-à-d., comme variable dont la valeur est une
table d'abréviations. Elle définit les abréviations dans la table
selon @var{definitions}, une liste d'éléments de forme
@code{(@var{abbrevname} @var{expansion} @var{hook} @var{usecount}
@var{system-flag})}. Si un élément de @var{definitions} a la longueur
inférieure à cinq, les éléments omis par défaut sont @code{nil}. Une
valeur de @code{nil} pour @var{usecount} est équivalente à zéro. La
valeur de retour est toujours @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function defines an abbrev named @var{name}, in @var{table}, to expand to @var{expansion} and call @var{hook}.  The return value is @var{name}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction définit une abréviation appelée @var{name}, dans
@var{table}, à développer @var{expansion} et appeler @var{hook}. La
valeur de retour est @var{name}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function divides @var{dividend} by @var{divisor} and returns the quotient.  If there are additional arguments @var{divisors}, then it divides @var{dividend} by each divisor in turn.  Each argument may be a number or a marker.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction divise @var{dividend} par @var{divisor} et retourne le
quotient. S'il y a des arguments additionnels @var{divisors}, il
divise @var{dividend} par chaque diviseur alternativement. Chaque
argument peut être un nombre ou un marqueur.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function inserts before point a description of the abbrev table named @var{name}.  The argument @var{name} is a symbol whose value is an abbrev table.  The return value is always @code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction insère avant le point une description de la table
d'abréviations avant nommé @var{name}. L'argument @var{name} est un
symbole dont la valeur est la table d'abréviations. La valeur de
retour est toujours @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function is not analogous to the C operator @code{++}---it does not increment a variable.  It just computes a sum.  Thus, if we continue,</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction n'est pas analogue à l'opérateur C @code{++} ---elle
n'incrémente pas une variable---. Elle calcule juste la somme. Ainsi,
si nous continuons,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function multiplies its arguments together, and returns the product.  When given no arguments, @code{*} returns 1.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction multiplie ses arguments entre elles, et renvoie le
produit. Si aucun argument n'est donné, @code{*} retourne 1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns @code{t} if @var{object} is a symbol, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie @code{t} si l'@var{objet} est un symbole et autrement @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns @var{number-or-marker} minus 1.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie @var{number-or-marker} moins 1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns @var{number-or-marker} plus 1.  For example,</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie @var{number-or-marker} plus 1. Par exemple,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns @var{x} raised to power @var{y}.  If both arguments are integers and @var{y} is positive, the result is an integer; in this case, overflow causes truncation, so watch out.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032439Z">
        <seg>Cette fonction renvoie @var{x} à la puissance @var{y}. Si tout les
deux les arguments sont des nombres entiers et @var{y} est positif, le
résultat est nombre entier ; dans ce cas, le débordement cause
l'abréviation, alors attention.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns a copy of abbrev table @var{table}---a new abbrev table that contains the same abbrev definitions.  The only difference between @var{table} and the returned copy is that this function sets the property lists of all copied abbrevs to 0.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie une copie de table d'abréviations
@var{table}---une nouvelle table d'abréviations qui contient les mêmes
définitions d'abréviations---. La seule différence entre @var{table}
et la copie retournée est que la fonction place les listes de
propriétés de toutes les abréviations copiées à 0.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns a pseudo-random integer.  Repeated calls return a series of pseudo-random integers.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie un nombre entier pseudo-aléatoire. Les appels
répétés renvoient a une série de nombres entiers pseudo-aléatoires.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns a string describing the version of Emacs that is running.  It is useful to include this string in bug reports.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie une chaine décrivant la version d'Emacs qui est
en fonction. Il est utile d'inclure cette chaine dans des rapports de
bogue.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the ``exclusive or'' of its arguments: the @var{n}th bit is set in the result if, and only if, the @var{n}th bit is set in an odd number of the arguments.  If there are no arguments, the result is 0, which is an identity element for this operation.  If @code{logxor} is passed just one argument, it returns that argument.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le ``ou exclusif'' de ses arguments: le
@var{n}ième bit est placé dans le résultat si, et seulement si, le bit
@var{n}ième bit est placé dans un nombre impair des arguments. S'il
n'y a aucun argument, le résultat est 0, qui est un élément d'identité
pour cette opération. Si @code{logxor} est passé juste à un argument,
il renvoie cet argument.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the ``inclusive or'' of its arguments: the @var{n}th bit is set in the result if, and only if, the @var{n}th bit is set in at least one of the arguments.  If there are no arguments, the result is zero, which is an identity element for this operation.  If @code{logior} is passed just one argument, it returns that argument.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le ``ou inclus'' de ses arguments: le
@var{n}ième bit est placé dans le résultat si, et seulement si, le
@var{n}ième bit est placé dans au moins un des arguments. S'il n'y a
aucun argument, le résultat est 0, ce qui est un élément d'identité
pour cette opération. Si @code{logior} est passé à juste un argument,
il renvoie cet argument.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the ``logical and'' of the arguments: the @var{n}th bit is set in the result if, and only if, the @var{n}th bit is set in all the arguments.  (``Set'' means that the value of the bit is 1 rather than 0.)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le ``et logique'' des arguments: le @var{n}th
bit est placé dans le résultat si, et seulement si, le @var{n}th bit
est placer dans tous arguments. (``Placer'' veut dire que la valeur du
bit est 1 plutôt que 0.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the absolute value of @var{number}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie la valeur absolue de @var{number}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the binary exponent of @var{number}.  More precisely, the value is the logarithm of @var{number} base 2, rounded down to an integer.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie l'exposant binaire de @var{number}. Plus
précisément, la valeur est le logarithme de @var{number} en base 2,
arrondie vers le bas à un nombre entier.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the integer remainder after division of @var{dividend} by @var{divisor}.  The arguments must be integers or markers.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le reste en nombre entier après la division de
@var{dividend} par @var{divisor}. Les arguments doivent être des
nombres entiers ou des marqueurs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the largest of its arguments.  If any of the arguments is floating-point, the value is returned as floating point, even if it was given as an integer.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le plus grand de ses arguments. Si l'un des
arguments est à virgule flottante, la valeur est retournée à virgule
flottante, même si elle était donnée comme nombre entier.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the logarithm of @var{arg}, with base 10.  If @var{arg} is negative, it signals a @code{domain-error} error.  @code{(log10 @var{x})} @equiv{} @code{(log @var{x} 10)}, at least approximately.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le logarithme de @var{arg}, en base 10. Si
@var{arg} est négatif, il signale une erreur @code{domain-error}.
@code{(log10 @var{x})} @equiv{} @code{(log @var{x} 10)}, au moins
approximativement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the logarithm of @var{arg}, with base @var{base}.  If you don't specify @var{base}, the base</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le logarithme de @var{arg}, en base @var{base}.
Si vous n'indiquez pas @var{base}, la base</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the logical complement of its argument: the @var{n}th bit is one in the result if, and only if, the @var{n}th bit is zero in @var{integer}, and vice-versa.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le complément logique de son argument: le
@var{n}ième bit est 1 dans le résultat si, et seulement si, le
@var{n}ième bit est 0 dans @var{integer}, et vice-versa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the smallest of its arguments.  If any of the arguments is floating-point, the value is returned as floating point, even if it was given as an integer.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le plus petit de ses arguments. Si l'un des
arguments est à virgule flottante, la valeur est retournée à virgule
flottante, même si elle était donnée comme nombre entier.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the string that is @var{symbol}'s name.  For example:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie la chaîne correspondant au nom du symbole. Par exemple :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the value of @var{dividend} modulo @var{divisor}; in other words, the remainder after division of @var{dividend} by @var{divisor}, but with the same sign as @var{divisor}.  The arguments must be numbers or markers.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie la valeur de @var{dividend} modulo
@var{divisor}; en d'autres termes, le reste après la division de
@var{dividend} par @var{divisor}, mais avec le même signe que
@var{divisor}. Les arguments doivent être des nombres ou des
marqueurs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function rounds @var{float} to the nearest integral value, and returns that value as a floating point number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction arrondit @var{float} à la valeur intégrale la plus
proche, et renvoie cette valeur comme nombre de virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function rounds @var{float} to the next higher integral value, and returns that value as a floating point number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction arrondit @var{float} à la prochaine valeur intégrale
supérieure, et renvoie cette valeur comme nombre à virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function rounds @var{float} to the next lower integral value, and returns that value as a floating point number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction arrondit @var{float} à la prochaine valeur intégrale
inférieure, et renvoie cette valeur comme nombre à virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function rounds @var{float} towards zero to an integral value, and returns that value as a floating point number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction arrondit @var{float} à la valeur intégrale proche de
zéro, et renvoie cette valeur comme nombre à virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function tests whether its arguments are numerically equal, and returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction teste si ses arguments sont numériquement égaux, et
renvoie le @code{t} si oui, @code{nil} autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function tests whether its arguments are numerically equal, and returns @code{t} if they are not, and @code{nil} if they are.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction teste si ses arguments sont numériquement égaux, et
renvoie @code{t} s'ils ne sont pas égaux, et @code{nil} s'ils sont
égaux.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function tests whether its first argument is greater than or equal to its second argument.  It returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction teste si son premier argument est supérieur ou égal à
son deuxième argument. Il renvoie @code{t} si oui, @code{nil}
autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function tests whether its first argument is less than or equal to its second argument.  It returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction teste si son premier argument est inférieur ou égal à
son deuxième argument. Elle renvoie @code{t} si oui, @code{nil}
autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function tests whether its first argument is strictly greater than its second argument.  It returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction teste si son premier argument est strictement plus
grand que son deuxième argument. Elle renvoie @code{t} si oui,
@code{nil} autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function tests whether its first argument is strictly less than its second argument.  It returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction teste si son premier argument est strictement moins
grand que son deuxième argument. Elle renvoie @code{t} si oui,
@code{nil} autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function undefines all the abbrevs in abbrev table @var{table}, leaving it empty.  It always returns @code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T111933Z">
        <seg>Cette fonction élimine toutes les abréviations dans la table
d'abréviations @var{table}, la laissant vide. Elle renvoie toujours
@code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This imaginary special form implements a loop that executes the @var{body} forms and then increments the variable @var{var} on each iteration.  On the first iteration, the variable has the value @var{from}; on subsequent iterations, it is incremented by one (or by @var{inc} if that is given).  The loop exits before executing @var{body} if @var{var} equals @var{to}.  Here is an example:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030311Z">
        <seg>Ce formulaire spécial imaginaire met en application une boucle qui
exécute la forme @var{body} et qui ensuite incrémente la variable
@var{var} à chaque itération. Sur la première itération, la variable
a la valeur @var{from} ; sur des itérations suivantes, elle est
incrémentée de un (ou par @var{inc} si elle est donnée). La boucle est
arrêtée avant l'exécution de @var{body} si @var{var} est égale à
@var{to}. Voici un exemple :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This is a list of symbols whose values are abbrev tables.  @code{define-abbrev-table} adds the new abbrev table name to this list.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C'est une liste de symboles dont les valeurs sont des tables
d'abréviations. @code{define-abbrev-table} ajoute le nouveau nom de
table d'abréviations à cette liste.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This is edition @value{VERSION} of the GNU Emacs Lisp Reference Manual, corresponding to Emacs version @value{EMACSVER}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025745Z">
        <seg>Ceci est l'édition @value{VERSION} du manuel de référence de GNU Emacs
Lisp, correspondant à la version d'Emacs @value{EMACSVER}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This is the exponential function; it returns</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032429Z">
        <seg>C'est la fonction exponentielle ; elle retourne</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This is the value of @code{abbrev-mode} for buffers that do not override it.  This is the same as @code{(default-value 'abbrev-mode)}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C'est la valeur de @code{abbrev-mode} pour les tampons qui ne la
modifient pas. C'est identique à @code{(default-value 'abbrev-mode)}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This manual attempts to be a full description of Emacs Lisp.  For a beginner's introduction to Emacs Lisp, see @cite{An Introduction to Emacs Lisp Programming}, by Bob Chassell, also published by the Free Software Foundation.  This manual presumes considerable familiarity with the use of Emacs for editing; see @cite{The GNU Emacs Manual} for this basic information.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ce manuel essaye d'être une description complète d'Emacs Lisp. Pour la
présentation à un débutant d'Emacs Lisp, voir @cite{An Introduction to
Emacs Lisp Programming}, par Bob Chassell, également édité par la Free
Software Foundation. Ce manuel suppose la connaissance parfaite de
l'utilisation d'Emacs pour l'édition ; voir @cite{The GNU Emacs
Manual} pour cette information de base.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This manual describes Emacs Lisp.  Generally speaking, the earlier chapters describe features of Emacs Lisp that have counterparts in many programming languages, and later chapters describe features that are peculiar to Emacs Lisp or relate specifically to editing.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T024841Z" creationid="jchelary" creationdate="20140131T024841Z">
        <seg>Ce manuel décrit Emacs Lisp. D'une manière générale, les premiers chapitres décrivent les
caractéristiques d'Emacs Lisp qui ont des équivalences dans beaucoup
de langages de programmation, et les chapitres postérieurs décrivent
les caractéristiques qui sont particulières au Emacs Lisp ou se
relient spécifiquement à l'édition.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This manual has gone through numerous drafts.  It is nearly complete but not flawless.  There are a few topics that are not covered, either because we consider them secondary (such as most of the individual modes) or because they are yet to be written.  Because we are not able to deal with them completely, we have left out several parts intentionally.  This includes most information about usage on VMS.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025835Z">
        <seg>Ce manuel est passé par de nombreuses ébauches. Il est presque complet
mais non impeccable. Il y a quelques sujets qui ne sont pas
couverts parce que nous les considérons secondaires (comme la plupart
des différents modes) ou parce qu'ils doivent encore être
écrits. Puisque nous ne pouvons pas les traiter complètement, nous
avons omis plusieurs parties intentionnellement. Ceci inclut la
plupart des informations sur l'utilisation de VMS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This manual was written by Robert Krawitz, Bil Lewis, Dan LaLiberte, Richard@tie{}M. Stallman and Chris Welty, the volunteers of the GNU manual group, in an effort extending over several years.  Robert@tie{}J. Chassell helped to review and edit the manual, with the support of the Defense Advanced Research Projects Agency, ARPA Order 6082, arranged by Warren@tie{}A. Hunt, Jr.@: of Computational Logic, Inc.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ce manuel a été écrit par Robert Krawitz, Bil Lewis, Dan LaLiberte,
Richard M. Stallman and Chris Welty, les volontaires du groupe GNU
manual, dans un effort se prolongeant sur plusieurs années. Robert
J. Chassell a aidé à passer en revue et éditer le manuel, avec l'appui
de la Defense Advanced Research Projects Agency, ARPA Ordre 6082, avec
l'accord de Warren A. Hunt, Jr.@: de Computational Logic, Inc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This predicate tests whether its argument is a floating point number and returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cet attribut examine si son argument est un nombre à virgule flottante
et renvoie @code{t} si oui, @code{nil} autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This predicate tests whether its argument is a number (either integer or floating point), and returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cet attribut examine si son argument est un nombre (nombre entier ou
virgule flottante), et renvoie le @code{t} si oui, @code{nil}
autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This predicate tests whether its argument is an integer, and returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cet attribut examine si son argument est un nombre entier, et renvoie
le @code{t} si oui, @code{nil} autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This predicate tests whether its argument is zero, and returns @code{t} if so, @code{nil} otherwise.  The argument must be a number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cet attribut examine si son argument est zéro, et renvoie @code{t} si
oui, @code{nil} autrement. L'argument doit être un nombre.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This returns @var{number} converted to floating point.  If @var{number} is already a floating point number, @code{float} returns it unchanged.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ceci renvoie @var{number} converti en un nombre à virgule
flottante. Si @var{number} est déjà un nombre à virgule flottante,
@code{float} le renvoie sans changement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This returns @var{number}, converted to an integer by rounding downward (towards negative infinity).</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ceci renvoie @var{number}, converti en nombre entier en arrondissant
en bas (vers moins l'infini).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This returns @var{number}, converted to an integer by rounding towards the nearest integer.  Rounding a value equidistant between two integers may choose the integer closer to zero, or it may prefer an even integer, depending on your machine.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ceci renvoie @var{number}, converti en nombre entier arrondi vers le
nombre entier le plus proche. L'arrondi d'une valeur équidistante
entre deux nombres entiers peut choisir le nombre entier plus près de
zéro, ou il peut préférer un nombre entier équivalent, selon votre
machine.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This returns @var{number}, converted to an integer by rounding towards zero.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ceci renvoie @var{number}, converti en nombre entier arrondis vers zéro.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This returns @var{number}, converted to an integer by rounding upward (towards positive infinity).</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ceci renvoie @var{number}, converti en nombre entier en arrondissant
vers le haut (vers plus l'infini).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This returns the square root of @var{arg}.  If @var{arg} is negative, it signals a @code{domain-error} error.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ceci renvoie la racine carrée de @var{arg}. Si @var{arg} est négatif,
il signale une erreur @code{domain-error}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This section describes how to create and manipulate abbrev tables.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette section décrit comment créer et manipuler des tables
d'abréviations.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This section explains the notational conventions that are used in this manual.  You may want to skip this section and refer back to it later.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette section explique les conventions d'écriture qui sont employées
dans ce manuel. Vous pouvez sauter cette section et vous y référer
plus tard.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This variable automatically becomes buffer-local when set in any fashion.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette variable devient automatiquement locale au tampon quand elle est
activée dans n'importe quelle mode.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Throughout this manual, the phrases ``the Lisp reader'' and ``the Lisp printer'' refer to those routines in Lisp that convert textual representations of Lisp objects into actual Lisp objects, and vice versa.  @xref{Printed Representation}, for more details.  You, the person reading this manual, are thought of as ``the programmer'' and are addressed as ``you.'' ``The user'' is the person who uses Lisp programs, including those you write.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Dans tout ce manuel, les expressions ``le lecteur de Lisp'' et
``l'afficheur de Lisp'' se rapportent à ces routines en Lisp qui
convertissent les représentations textuelles du Lisp object en objets
réels de Lisp, et vice-versa. @xref{Printed Representation}, pour plus
de détails. Vous, la personne lisant ce manuel, êtes considérée comme
``programmeur'' et êtes nommée en tant que ``vous''.
``L'utilisateur'' est la personne qui emploie le Lisp des programmes,
y compris ceux que vous écrivez.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Thus, with @code{ash}, shifting the pattern of bits one place to the right looks like this:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ainsi, @code{ash}, décalant la combinaison de chiffres binaires d'une
place vers la droite ressemble à ceci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Tips</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Astuces</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>To convert an integer to floating point, use the function @code{float}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Pour convertir un nombre entier en un nombre à virgule flottante,
employez la fonction @code{float}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>To test numbers for numerical equality, you should normally use @code{=}, not @code{eq}.  There can be many distinct floating point number objects with the same numeric value.  If you use @code{eq} to compare them, then you test whether two values are the same @emph{object}.  By contrast, @code{=} compares only the numeric values of the objects.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Pour tester l'égalité numérique des nombres, vous devriez normalement
employer @code{=}, pas @code{eq}. Il peut y avoir beaucoup d'objets
distincts de nombre à virgule flottante avec la même valeur
numérique. Si vous employez @code{eq} pour les comparer, vous testez
si deux valeurs sont des @emph{objets} identiques. En revanche,
@code{=} compare seulement les valeurs numériques des objets.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>To test whether a floating point value is a NaN, compare it with itself using @code{=}.  That returns @code{nil} for a NaN, and @code{t} for any other floating point value.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Pour examiner si une valeur à virgule flottante est NaN, le comparer à
lui-même en employant @code{=}. Il renvoie @code{nil} pour NaN, et
@code{t} pour n'importe quelle autre valeur à virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>To understand how various functions work on integers, especially the bitwise operators (@pxref{Bitwise Operations}), it is often helpful to view the numbers in their binary form.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Pour comprendre comment les diverses fonctions travaillent sur des
nombres entiers, particulièrement au niveau du bit des opérateurs
(@pxref{Opérations de bits}), il est souvent utile de regarder les
nombres sous leur forme binaire.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Tools and tips for debugging Lisp programs.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Outils et astuces pour le débogage de programmes Lisp.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Top</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Top</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Trig, exponential and logarithmic functions.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Fonctions trigonométrique, exponentielle et logarithmique.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Type Predicates for Numbers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Type d'attributs des nombres</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Unlike @code{%}, @code{mod} returns a well-defined result for negative arguments.  It also permits floating point arguments; it rounds the quotient downward (towards minus infinity) to an integer, and uses that quotient to compute the remainder.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032125Z">
        <seg>À la différence de @code{%}, @code{mod} renvoie un résultat bien
défini pour les arguments négatifs. Il permet également des arguments
à virgule flottante ; il arrondit le quotient à un nombre entier vers
le bas (vers moins l'infini), et utilise ce quotient pour calculer le
reste.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>User option descriptions have the same format, but `Variable' is replaced by `User Option'.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les descriptions d'option d'utilisateur ont le même format, mais le
mot `Variable' est remplacée par `User Option'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Using symbols in programs to stand for values.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Utilisation de symboles dans des programmes à la place de valeurs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Using the minibuffer to read input.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Utilisation du minibuffer pour la lecture de l'entrée.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Value</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Valeur</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Variables</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Variables</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Version 1.2, November 2002</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Version 1.2, novembre 2002</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Version Info</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Information de version</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Version Information</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Information de version</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>We let mail to this list accumulate unread until someone decides to apply the corrections.  Months, and sometimes years, go by between updates.  So please attach no significance to the lack of a reply---your mail @emph{will} be acted on in due time.  If you want to contact the Emacs maintainers more quickly, send mail to @code{bug-gnu-emacs@@gnu.org}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Nous laissons le courrier non lu de cette liste s'accumuler
jusqu'à ce que quelqu'un décide d'appliquer les corrections. Les mois,
et parfois les années, s'écoulent entre les mises à jour. Veuillez ne
pas attacher de signification au manque d'une réponse---votre courrier
@emph{devrait} être pris en compte en temps voulu. Si vous voulez
contacter la maintenance d'Emacs plus rapidement, envoyer le courrier
à @code{bug-gnu-emacs@@gnu.org}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>When a form is a macro call, it expands into a new form for Lisp to evaluate.  We show the result of the expansion with @samp{@expansion{}}.  We may or may not show the result of the evaluation of the expanded form.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Quand un formulaire est appellé par une macro, il augmente d'un
nouveau formulaire pour que le Lisp l'évalue. Nous montrons le
résultat de l'expansion avec @samp{@expansion{}}. Nous pouvons ou non
montrer le résultat de l'évaluation du formulaire augmenté.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Which Emacs version is running?</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Quelle version d'Emacs fonctionne?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Windows</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Windows</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Writing and using documentation strings.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025452Z" creationid="jchelary" creationdate="20140131T025452Z">
        <seg>Écriture et utiliser des chaînes de documentation.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Writing customization declarations.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Écriture de déclarations de personnalisation.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>You can read this as ``@code{(car '(1 2))} evaluates to 1.''</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Vous pouvez lire ceci en tant que ``@code{(car '(1 2))} est évalué à
1.''</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>You can test whether an arbitrary Lisp object is a symbol with @code{symbolp}:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Vous pouvez tester si n'importe quel objet Lisp est un symbole avec @code{symbolp} :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>You can use @code{logb} to extract the binary exponent of a floating point number (or estimate the logarithm of an integer):</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Vous pouvez employer @code{logb} pour extraire l'exposant binaire d'un
nombre à virgule flottante (ou estimer le logarithme d'un nombre
entier):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>[ @dots{} ]</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>[ @dots{} ]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>[^ @dots{} ]</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>[^ @dots{} ]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\&amp;</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\&amp;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\@var{n}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\@var{n}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\\</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\\</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\a</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\b</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\e</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\e</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\f</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\f</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\n</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\n</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\r</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\r</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\s</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\s</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\t</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\t</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\v</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\v</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>^</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>^</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>`</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>abbrev</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>abbrev</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>abbrev-all-caps</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>abbrev-all-caps</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>abbrev-file-name</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>abbrev-file-name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>abbrev-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>abbrev-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>abbrev-start-location</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>abbrev-start-location</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>abbrev-start-location-buffer</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>abbrev-start-location-buffer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>abbrev-table-name-list</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>abbrev-table-name-list</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>abbrevs-changed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>abbrevs-changed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>ad-default-compilation-action</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>ad-default-compilation-action</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>adaptive-fill-first-line-regexp</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>adaptive-fill-first-line-regexp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>adaptive-fill-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>adaptive-fill-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>adaptive-fill-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>adaptive-fill-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>adaptive-fill-regexp</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>adaptive-fill-regexp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>after-revert-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>after-revert-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>after-save-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>after-save-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>always equals @var{dividend}, subject to rounding error if either argument is floating point.  For @code{floor}, see @ref{Numeric Conversions}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>est toujours égale à @var{dividend}, sauf si l'un ou l'autre
argument est un nombre à virgule flottante, une erreur sera
générée. Pour @code{floor}, voir les @ref{Conversions numériques}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>always equals @var{dividend}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>est toujours égale à @var{dividend}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>and</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>et</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>and how you can call its subroutines.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025436Z" creationid="jchelary" creationdate="20140131T025436Z">
        <seg>et comment vous pouvez appeler ses sous-programmes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>and property lists.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>et des listes de propriétés.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 02d65d63-3b64-49bc-a5c0-bfd5eabb6c98</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 02d65d63-3b64-49bc-a5c0-bfd5eabb6c98</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 07636b8c-c4e3-4735-9e06-2e864320b434</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 07636b8c-c4e3-4735-9e06-2e864320b434</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 141f74ce-6ae3-40dc-a6c4-ef83fc4ec35c</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 141f74ce-6ae3-40dc-a6c4-ef83fc4ec35c</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 295a6321-e5ab-46d5-aef5-0bb4f447a67f</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 295a6321-e5ab-46d5-aef5-0bb4f447a67f</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 2e53cfab-5691-41f6-b5a8-9c6a3462399c</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 2e53cfab-5691-41f6-b5a8-9c6a3462399c</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 31fb8a4e-4aa8-4a74-a206-aa00451394d4</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 31fb8a4e-4aa8-4a74-a206-aa00451394d4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 39100cdf-8a55-4898-acba-595db619e8e2</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 39100cdf-8a55-4898-acba-595db619e8e2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 3b5107f9-d2f0-47d5-ad61-3498496bea0e</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 3b5107f9-d2f0-47d5-ad61-3498496bea0e</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 4466c7ca-e549-4119-948c-6eed34e1ff87</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 4466c7ca-e549-4119-948c-6eed34e1ff87</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 4b2c33bc-d7e4-43f5-bc20-27c0db52a53e</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 4b2c33bc-d7e4-43f5-bc20-27c0db52a53e</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 4c7bff41-36e6-4da6-9e7f-9b9289e27c8e</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 4c7bff41-36e6-4da6-9e7f-9b9289e27c8e</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 5182b306-c403-4e4f-ba24-e1911bc6da9d</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 5182b306-c403-4e4f-ba24-e1911bc6da9d</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 55fd0296-d906-4551-b300-979d3846aa88</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 55fd0296-d906-4551-b300-979d3846aa88</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 56e8ff26-4ffe-4832-a141-7e991a2d0f87</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 56e8ff26-4ffe-4832-a141-7e991a2d0f87</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 574e8dd2-d513-4616-9844-c9a27869782e</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 574e8dd2-d513-4616-9844-c9a27869782e</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 5ffdbe08-2cd4-48ec-a5a8-080f95756eec</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 5ffdbe08-2cd4-48ec-a5a8-080f95756eec</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 6baae835-b667-4447-91e2-9829ae1cf543</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 6baae835-b667-4447-91e2-9829ae1cf543</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 700b8e95-7aa5-4b52-9eb3-8f2e1ea152b4</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 700b8e95-7aa5-4b52-9eb3-8f2e1ea152b4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 717c6048-5d9d-4c7d-9a62-df57390b6f19</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 717c6048-5d9d-4c7d-9a62-df57390b6f19</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 74842db8-019f-4818-b5a4-b2de878e57fd</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 74842db8-019f-4818-b5a4-b2de878e57fd</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 8378814a-30d7-467c-9615-74a80b9988a7</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 8378814a-30d7-467c-9615-74a80b9988a7</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 8750b7d2-de4c-4923-809a-d35fc39fd8ce</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 8750b7d2-de4c-4923-809a-d35fc39fd8ce</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 8abc30d4-4d3a-47f9-b908-e9e971c18c6d</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 8abc30d4-4d3a-47f9-b908-e9e971c18c6d</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 9014cf6e-f3c4-401d-b8da-4fe52723984c</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 9014cf6e-f3c4-401d-b8da-4fe52723984c</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 94977df6-3dca-4730-b57b-c6329e9282ba</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 94977df6-3dca-4730-b57b-c6329e9282ba</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 9711a66e-4749-4265-9e8c-972d55b67096</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 9711a66e-4749-4265-9e8c-972d55b67096</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 9e03a1c7-6f62-4346-85d9-ed5b79386e07</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 9e03a1c7-6f62-4346-85d9-ed5b79386e07</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: ac7694c8-1f02-4b42-9531-33ba13b179e1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: ac7694c8-1f02-4b42-9531-33ba13b179e1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: b1ba2e7a-a0f3-4c5e-875c-7d8e22d73299</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: b1ba2e7a-a0f3-4c5e-875c-7d8e22d73299</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: b741253c-7e23-4a02-b3fa-cffd9e4d72b9</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: b741253c-7e23-4a02-b3fa-cffd9e4d72b9</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: ba36b4c2-e60f-49e2-bc25-61158fdcd815</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: ba36b4c2-e60f-49e2-bc25-61158fdcd815</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: ba9da253-e65f-4e7f-b727-08fba0a1df7a</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: ba9da253-e65f-4e7f-b727-08fba0a1df7a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: bba7f945-9078-477f-a2ce-18818a6e1218</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: bba7f945-9078-477f-a2ce-18818a6e1218</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: be705bf8-941b-4c35-84fc-ad7d20ddb7cb</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: be705bf8-941b-4c35-84fc-ad7d20ddb7cb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: c2573ca2-18aa-4839-93b8-924043ef831f</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: c2573ca2-18aa-4839-93b8-924043ef831f</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: cfb87287-9364-4e46-9e93-6c2f7f6ae794</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: cfb87287-9364-4e46-9e93-6c2f7f6ae794</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: d00ac830-e120-41fb-bbc5-7ca3eeaa227f</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: d00ac830-e120-41fb-bbc5-7ca3eeaa227f</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: d156593f-82f8-4708-a844-204e48f7f2aa</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: d156593f-82f8-4708-a844-204e48f7f2aa</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: d1b8fad3-f48c-4ce4-a402-f73b5ef19bd2</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: d1b8fad3-f48c-4ce4-a402-f73b5ef19bd2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: d4cce66d-1047-45c3-bfde-db6719d6e82b</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: d4cce66d-1047-45c3-bfde-db6719d6e82b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: ddc57378-b0e6-4195-b7b6-43f8777395a7</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: ddc57378-b0e6-4195-b7b6-43f8777395a7</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: df731f89-0900-4389-a436-9105241b6f7a</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: df731f89-0900-4389-a436-9105241b6f7a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: e34944ad-7d5c-4980-be00-36a5fe54d4b1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: e34944ad-7d5c-4980-be00-36a5fe54d4b1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: f723a4e0-31b3-453f-8afc-0bf8fd276d57</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: f723a4e0-31b3-453f-8afc-0bf8fd276d57</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: f78e3050-2f0a-4dee-be27-d9979a0a2289</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: f78e3050-2f0a-4dee-be27-d9979a0a2289</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: f7e9a219-a0e1-4776-b631-08eaa1d49b34</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: f7e9a219-a0e1-4776-b631-08eaa1d49b34</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: fcf1084a-cd29-4adc-9f16-68586935b386</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: fcf1084a-cd29-4adc-9f16-68586935b386</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: ffdf5714-7ecf-415b-9023-fbc6b409c2c6</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: ffdf5714-7ecf-415b-9023-fbc6b409c2c6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arithmetic shift</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arithmetic shift</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>ash integer1 count</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>ash integer1 count</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>asin arg</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>asin arg</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>auto-fill-chars</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>auto-fill-chars</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>auto-save-default</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>auto-save-default</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>auto-save-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>auto-save-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>auto-save-interval</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>auto-save-interval</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>auto-save-list-file-name</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>auto-save-list-file-name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>auto-save-list-file-prefix</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>auto-save-list-file-prefix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>auto-save-timeout</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>auto-save-timeout</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>auto-save-visited-file-name</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>auto-save-visited-file-name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>backup-by-copying</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>backup-by-copying</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>backup-by-copying-when-linked</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>backup-by-copying-when-linked</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>backup-by-copying-when-mismatch</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>backup-by-copying-when-mismatch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>backup-by-copying-when-privileged-mismatch</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>backup-by-copying-when-privileged-mismatch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>backup-directory-alist</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>backup-directory-alist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>backup-enable-predicate</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>backup-enable-predicate</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>backup-inhibited</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>backup-inhibited</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>backward-delete-char-untabify-method</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>backward-delete-char-untabify-method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>before-revert-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>before-revert-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>before-save-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>before-save-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>beginning-of-defun-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>beginning-of-defun-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>blink-matching-delay</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>blink-matching-delay</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>blink-matching-paren</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>blink-matching-paren</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>blink-matching-paren-distance</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>blink-matching-paren-distance</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>boolean</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>booléen</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>buffer-invisibility-spec</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>buffer-invisibility-spec</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>buffer-saved-size</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>buffer-saved-size</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>bug-lisp-manual@@gnu.org</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>bug-lisp-manual@@gnu.org</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>bugs</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025954Z" creationid="jchelary" creationdate="20140131T025954Z">
        <seg>erreurs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>bugs in this manual</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025755Z" creationid="jchelary" creationdate="20140131T025755Z">
        <seg>erreurs dans ce manuel</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>but some machines may provide a wider range.  Many examples in this chapter assume an integer has 29 bits.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mais quelques machines peuvent définir un autre champ. Beaucoup
d'exemples en ce chapitre supposent qu'un nombre entier a 29 bits.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>cache-long-line-scans</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>cache-long-line-scans</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>case-fold-search</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>case-fold-search</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>case-replace</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>case-replace</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>char-syntax character</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>char-syntax caractère</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>checkdoc-minor-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>checkdoc-minor-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>cl</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030012Z" creationid="jchelary" creationdate="20140131T030012Z">
        <seg>cl</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>clear-abbrev-table table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>clear-abbrev-table table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>color</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>couleur</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>command-line-args</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>command-line-args</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>command-line-processed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>command-line-processed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>command-switch-alist</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>command-switch-alist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>comment-column</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>comment-column</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>completion-auto-help</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>completion-auto-help</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>completion-ignored-extensions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>completion-ignored-extensions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>conditional evaluation</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>évaluation d'une condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>cons-cells-consed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>cons-cells-consed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>convert-standard-filename filename</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>convert-standard-filename fichier</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>copy-abbrev-table table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>copy-abbrev-table table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>cos arg</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>cos arg</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>ctl-x-4-map</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>ctl-x-4-map</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>ctl-x-5-map</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>ctl-x-5-map</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>ctl-x-map</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>ctl-x-map</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>current-fill-column</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>current-fill-column</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>current-input-method</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>current-input-method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>current-justification</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>current-justification</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>current-left-margin</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>current-left-margin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>cursor-in-echo-area</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>cursor-in-echo-area</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>cursor-in-non-selected-windows</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>cursor-in-non-selected-windows</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>deactivate-mark</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>deactivate-mark</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>debug-ignored-errors</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>debug-ignored-errors</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>debug-on-error</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>debug-on-error</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>debug-on-next-call</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>debug-on-next-call</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>debug-on-quit</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>debug-on-quit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>debug-on-signal</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>debug-on-signal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>defadvice</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>defadvice</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>default-abbrev-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>default-abbrev-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>default-buffer-file-type</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>default-buffer-file-type</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>default-case-fold-search</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>default-case-fold-search</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>default-fill-column</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>default-fill-column</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>default-input-method</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>default-input-method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>default-justification</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>default-justification</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>default-major-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>default-major-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>default-truncate-lines</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>default-truncate-lines</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>define-abbrev table name expansion &amp;optional hook count system-flag</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>define-abbrev table name expansion &amp;optional hook count system-flag</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>define-abbrev-table tabname definitions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>define-abbrev-table tabname definitions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>definitions of symbols</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>définitions de symboles</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>defsubst</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>defsubst</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>defun-prompt-regexp</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>defun-prompt-regexp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>delete-auto-save-files</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>delete-auto-save-files</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>delete-exited-processes</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>delete-exited-processes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>delete-old-versions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>delete-old-versions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>desktop-save-buffer</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>desktop-save-buffer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>direction-reversed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>direction-reversed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>directory-oriented functions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>directory-oriented fonctions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>dired-kept-versions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>dired-kept-versions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>display-buffer-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>display-buffer-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>display-buffer-reuse-frames</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>display-buffer-reuse-frames</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>double-click-fuzz</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>double-click-fuzz</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>double-click-time</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>double-click-time</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>easy-mmode-define-minor-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>easy-mmode-define-minor-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>echo-area-clear-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>echo-area-clear-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>echo-keystrokes</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>echo-keystrokes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-all-defs</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-all-defs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-all-forms</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-all-forms</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-continue-kbd-macro</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-continue-kbd-macro</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-eval-top-level-form</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-eval-top-level-form</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-global-break-condition</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-global-break-condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-initial-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-initial-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-on-error</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-on-error</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-on-quit</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-on-quit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-print-circle</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-print-circle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-print-length</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-print-length</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-print-level</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-print-level</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-print-trace-after</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-print-trace-after</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-print-trace-before</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-print-trace-before</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-save-displayed-buffer-points</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-save-displayed-buffer-points</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-save-windows</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-save-windows</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-set-global-break-condition</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-set-global-break-condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-setup-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-setup-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-sit-for-seconds</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-sit-for-seconds</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-temp-display-freq-count</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-temp-display-freq-count</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-test-coverage</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-test-coverage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-trace</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-trace</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-unwrap</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-unwrap</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>enable-local-eval</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>enable-local-eval</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>enable-local-variables</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>enable-local-variables</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>enable-multibyte-characters</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>enable-multibyte-characters</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>enable-recursive-minibuffers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>enable-recursive-minibuffers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>end-of-defun-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>end-of-defun-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>esc-map</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>esc-map</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>eval-buffer @r{(Edebug)}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>eval-buffer @r{(Edebug)}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>eval-current-buffer</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>eval-current-buffer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>eval-current-buffer @r{(Edebug)}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>eval-current-buffer @r{(Edebug)}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>eval-defun (Edebug)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>eval-defun (Edebug)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>eval-expression @r{(Edebug)}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>eval-expression @r{(Edebug)}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>eval-expression-debug-on-error</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>eval-expression-debug-on-error</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>eval-expression-print-length</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>eval-expression-print-length</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>eval-expression-print-level</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>eval-expression-print-level</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>eval-region @r{(Edebug)}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>eval-region @r{(Edebug)}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>even-window-heights</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>even-window-heights</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>exec-path</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>exec-path</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>facemenu-keymap</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>facemenu-keymap</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>false</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030100Z" creationid="jchelary" creationdate="20140131T030100Z">
        <seg>faux</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>file-name-buffer-file-type-alist</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>file-name-buffer-file-type-alist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>file-precious-flag</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>file-precious-flag</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>fill-column</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>fill-column</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>fill-context-prefix from to</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>fill-context-prefix de à</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>fill-individual-varying-indent</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>fill-individual-varying-indent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>fill-nobreak-predicate</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>fill-nobreak-predicate</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>fill-paragraph-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>fill-paragraph-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>fill-prefix</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>fill-prefix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>find-file-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>find-file-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>find-file-wildcards</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>find-file-wildcards</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>float-output-format</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>float-output-format</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>floatp object</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>floatp object</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>floats-consed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>floats-consed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>focus-follows-mouse</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>focus-follows-mouse</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>font-lock-defaults</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>font-lock-defaults</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>fonts in this manual</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030020Z" creationid="jchelary" creationdate="20140131T030020Z">
        <seg>polices dans ce manuel</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>foo
     @result{} 4</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>foo
     @result{} 4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>for</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>for</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>for recording miscellaneous information.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>pour l'enregistrement d'informations diverses.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>frame-background-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>frame-background-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>ftp-login</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>ftp-login</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>fonction</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>function, @code{foo}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>fonction, @code{foo}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>fundamental-mode-abbrev-table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>fundamental-mode-abbrev-table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>garbage-collection-messages</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>garbage-collection-messages</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>gc-cons-percentage</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>gc-cons-percentage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>gc-cons-threshold</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>gc-cons-threshold</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>gc-elapsed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>gc-elapsed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>gcs-done</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>gcs-done</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>get symbol property</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>get symbole propriété</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>global-abbrev-table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>global-abbrev-table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>goal-column</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>goal-column</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>h</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>h</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>header-line-format</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>header-line-format</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>image-type-available-p</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>image-type-available-p</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>image-type-available-p type</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>image-type-available-p type</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>inc</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>inc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>indent-line-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>indent-line-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>indent-region-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>indent-region-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>indent-tabs-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>indent-tabs-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>inhibit-default-init</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>inhibit-default-init</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>inhibit-startup-echo-area-message</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>inhibit-startup-echo-area-message</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>inhibit-startup-message</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>inhibit-startup-message</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>initial-major-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>initial-major-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>input-method-alist</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>input-method-alist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>insert-abbrev-table-description name &amp;optional human</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>insert-abbrev-table-description name &amp;optional human</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>insert-default-directory</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>insert-default-directory</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>integerp object</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>integerp object</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>integers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>entiers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>interpreter-mode-alist</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>interpreter-mode-alist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>intervals-consed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>intervals-consed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>is a fundamental mathematical constant also called the base of natural logarithms.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>est une constante mathématique fondamentale également appelée base des
logarithmes naturels.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>is entirely equivalent to</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>est rigoureusement équivalent à :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>is used.  If @var{arg} is negative, it signals a @code{domain-error} error.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>est employée. Si @var{arg} est négatif, il signale une erreur
@code{domain-error}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>kept-new-versions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>kept-new-versions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>kept-old-versions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>kept-old-versions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>kill-read-only-ok</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>kill-read-only-ok</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>kill-ring-max</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>kill-ring-max</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>last-abbrev</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>last-abbrev</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>last-abbrev-location</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>last-abbrev-location</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>last-abbrev-text</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>last-abbrev-text</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>left-margin</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>left-margin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lisp-mode-abbrev-table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>lisp-mode-abbrev-table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>load-path</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>load-path</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>local-abbrev-table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>local-abbrev-table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>locale-coding-system</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>locale-coding-system</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>logb number</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>logb number</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lsh integer1 count</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>lsh integer1 count</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mac</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mac</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>major-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>major-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>make-abbrev-table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>make-abbrev-table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>make-backup-file-name-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>make-backup-file-name-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>make-backup-files</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>make-backup-files</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>make-symbol name</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>make-symbol nom</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mark-active</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mark-active</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mark-even-if-inactive</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mark-even-if-inactive</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mark-ring</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mark-ring</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mark-ring-max</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mark-ring-max</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>max number-or-marker &amp;rest numbers-or-markers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>max number-or-marker &amp;rest numbers-or-markers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>max-mini-window-height</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>max-mini-window-height</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>memory-full</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>memory-full</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>memory-limit</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>memory-limit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>memory-use-counts</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>memory-use-counts</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>message-log-max</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>message-log-max</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>message-truncate-lines</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>message-truncate-lines</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>min number-or-marker &amp;rest numbers-or-markers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>min number-or-marker &amp;rest numbers-or-markers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>minibuffer-auto-raise</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>minibuffer-auto-raise</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>minibuffer-help-form</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>minibuffer-help-form</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>minibuffer-message string</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>minibuffer-message chaîne</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>minibuffer-scroll-window</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>minibuffer-scroll-window</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>minibuffer-selected-window</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>minibuffer-selected-window</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>misc-objects-consed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>misc-objects-consed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mod dividend divisor</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mod dividend divisor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mode-line-buffer-identification</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mode-line-buffer-identification</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mode-line-format</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mode-line-format</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mode-line-modified</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mode-line-modified</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mode-line-process</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mode-line-process</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mode-name</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mode-name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mode-specific-map</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mode-specific-map</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>modulus</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>modulo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mule-keymap</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mule-keymap</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>natnump</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>natnump</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>natural numbers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>nombres naturels</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>next-screen-context-lines</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>next-screen-context-lines</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>nil</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>nil</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>nil and t</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>nil et t</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>normal-auto-fill-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>normal-auto-fill-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>normal-backup-enable-predicate</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>normal-backup-enable-predicate</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>numberp object</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>numberp object</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>numbers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>nombres</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>o</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>o</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>only-global-abbrevs</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>only-global-abbrevs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>open-paren-in-column-0-is-defun-start</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>open-paren-in-column-0-is-defun-start</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>overflow</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>débordement</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>parse-sexp-ignore-comments</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>parse-sexp-ignore-comments</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>pc</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>pc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>pi</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>pi</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>pi/2</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>pi/2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>plist</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>plist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>point-before-scroll</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>point-before-scroll</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>pop-up-frame-alist</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>pop-up-frame-alist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>pop-up-frame-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>pop-up-frame-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>pop-up-frames</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>pop-up-frames</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>pop-up-windows</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>pop-up-windows</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>post-gc-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>post-gc-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>pre-abbrev-expand-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>pre-abbrev-expand-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>predicates for numbers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>attributs des nombres</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>print-circle</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>print-circle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>print-continuous-numbering</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>print-continuous-numbering</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>print-gensym</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>print-gensym</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>print-number-table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>print-number-table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>put symbol property value</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>put symbole propriété valeur</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>re-builder</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>re-builder</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>reading symbols</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Lecture de symboles</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>recent-auto-save-p</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>recent-auto-save-p</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>region-beginning</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>region-beginning</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>region-end</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>region-end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>rename-auto-save-file</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>rename-auto-save-file</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>require-final-newline</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>require-final-newline</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>revert-buffer-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>revert-buffer-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>revert-buffer-insert-file-contents-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>revert-buffer-insert-file-contents-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>revert-without-query</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>revert-without-query</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>ring-bell-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>ring-bell-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>rplaca</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>rplaca</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>rplacd</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>rplacd</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>safe-local-eval-forms</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>safe-local-eval-forms</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>same-window-buffer-names</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>same-window-buffer-names</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>same-window-regexps</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>same-window-regexps</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>save-abbrevs</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>save-abbrevs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>save-buffer-coding-system</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>save-buffer-coding-system</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>scroll-conservatively</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>scroll-conservatively</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>scroll-down-aggressively</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>scroll-down-aggressively</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>scroll-margin</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>scroll-margin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>scroll-preserve-screen-position</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>scroll-preserve-screen-position</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>scroll-step</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>scroll-step</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>scroll-up-aggressively</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>scroll-up-aggressively</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>sentence-end-double-space</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>sentence-end-double-space</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>sentence-end-without-period</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>sentence-end-without-period</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>sentence-end-without-space</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>sentence-end-without-space</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>set-buffer-auto-saved</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>set-buffer-auto-saved</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>set-screen-height</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>set-screen-height</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>set-screen-width</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>set-screen-width</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>set-syntax-table table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>set-syntax-table table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>sin arg</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>sin arg</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>sort-fold-case</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>sort-fold-case</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>sort-numeric-base</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>sort-numeric-base</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>special-display-buffer-names</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>special-display-buffer-names</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>special-display-frame-alist</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>special-display-frame-alist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>special-display-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>special-display-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>special-display-regexps</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>special-display-regexps</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>split-height-threshold</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>split-height-threshold</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>split-window-keep-point</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>split-window-keep-point</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>stack-trace-on-error</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>stack-trace-on-error</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>store-match-data</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>store-match-data</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>string-chars-consed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>string-chars-consed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>string-to-int</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>string-to-int</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>strings-consed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>strings-consed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>suggestions</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025957Z" creationid="jchelary" creationdate="20140131T025957Z">
        <seg>suggestions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>symbol</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>symbole</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>symbol-name symbol</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>symbol-name symbole</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>symbol-plist symbol</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>symbol-plist symbole</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>symbolp object</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>symbolp objet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>symbols-consed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>symbols-consed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>syntax-table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>syntax-table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>system-messages-locale</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>system-messages-locale</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>system-time-locale</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>system-time-locale</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>tab-stop-list</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>tab-stop-list</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>tan arg</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>tan arg</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>term-file-prefix</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>term-file-prefix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>testcover-mark-all</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>testcover-mark-all</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>testcover-next-mark</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>testcover-next-mark</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>testcover-start</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>testcover-start</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>text-mode-abbrev-table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>text-mode-abbrev-table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>that can be invoked from other functions.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>qui peut être appelée depuis d'autres fonctions.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>three-step-help</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>three-step-help</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>to</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>à</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>to the power @var{arg}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>à la puissance @var{arg}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>transient-mark-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>transient-mark-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>true</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030132Z" creationid="jchelary" creationdate="20140131T030132Z">
        <seg>vrai</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>truncate-lines</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>truncate-lines</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>truncate-partial-width-windows</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>truncate-partial-width-windows</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>truth value</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030033Z" creationid="jchelary" creationdate="20140131T030033Z">
        <seg>valeur de vérité</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>two's complement</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031421Z" creationid="jchelary" creationdate="20140131T031421Z">
        <seg>complément à deux</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>undo-ask-before-discard</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>undo-ask-before-discard</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>undo-limit</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>undo-limit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>undo-outer-limit</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>undo-outer-limit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>undo-strong-limit</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>undo-strong-limit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>update-directory-autoloads</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>update-directory-autoloads</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>update-file-autoloads</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>update-file-autoloads</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>use-hard-newlines</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>use-hard-newlines</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>user-init-file</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>user-init-file</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>variable</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>variable</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>variable,</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>variable,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>vc-prefix-map</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>vc-prefix-map</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>vector-cells-consed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>vector-cells-consed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>version-control</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>version-control</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>visible-bell</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>visible-bell</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>w32</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>w32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>warning-minimum-level</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>warning-minimum-level</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>warning-minimum-log-level</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>warning-minimum-log-level</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>warning-suppress-log-types</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>warning-suppress-log-types</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>warning-suppress-types</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>warning-suppress-types</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>which becomes the following when left shifted:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>ce qui devient, lorsqu'on décale à gauche:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>wholenump object</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>wholenump object</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>window-min-height</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>window-min-height</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>window-min-width</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>window-min-width</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>window-setup-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>window-setup-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>window-size-fixed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>window-size-fixed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>window-system</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>window-system</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>with-syntax-table @var{table} @var{body}@dots{}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>with-syntax-table @var{table} @var{corps}@dots{}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>write-contents-functions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>write-contents-functions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>write-file-functions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>write-file-functions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>x @var{condition} @key{RET}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>x @var{condition} @key{RET}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>x-color-defined-p</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>x-color-defined-p</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>x-color-values</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>x-color-values</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>x-defined-colors</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>x-defined-colors</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>x-display-color-p</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>x-display-color-p</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>x-select-enable-clipboard</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>x-select-enable-clipboard</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>x1:
 --------------       --------------       --------------
| car   | cdr  |     | car   | cdr  |     | car   | cdr  |
|   a   |   o-------&gt;|   b   |   o-------&gt;|   c   |  nil |
|       |      |  --&gt;|       |      |     |       |      |
 --------------  |    --------------       --------------
                 |
x2:              |
 --------------  |
| car   | cdr  | |
|   z   |   o----
|       |      |
 --------------</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030540Z" creationid="jchelary" creationdate="20140131T030540Z">
        <seg>x1:
 --------------       --------------       --------------
| car   | cdr  |     | car   | cdr  |     | car   | cdr  |
|   a   |   o-------&gt;|   b   |   o-------&gt;|   c   |  nil |
|       |      |  --&gt;|       |      |     |       |      |
 --------------  |    --------------       --------------
                 |
x2:              |
 --------------  |
| car   | cdr  | |
|   z   |   o----
|       |      |
 --------------</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
    <tu>
      <prop type="file">fr.po</prop>
      <prop type="path"></prop>
      <tuv lang="en-us">
        <seg>Format of Descriptions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Format des descriptions</seg>
      </tuv>
    </tu>
  </body>
</tmx>
