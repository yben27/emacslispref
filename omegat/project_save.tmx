<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="2.6.3_9" segtype="paragraph" srclang="en-us"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="en-us">
        <seg>#$</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>#$</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>#b101100 @result{} 44
#o54 @result{} 44
#x2c @result{} 44
#24r1k @result{} 44</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>#b101100 @result{} 44
#o54 @result{} 44
#x2c @result{} 44
#24r1k @result{} 44</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>$</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>$</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>% dividend divisor</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>% dividend divisor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(% 9 4)
     @result{} 1
(% -9 4)
     @result{} -1
(% 9 -4)
     @result{} 1
(% -9 -4)
     @result{} -1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(% 9 4)
     @result{} 1
(% -9 4)
     @result{} -1
(% 9 -4)
     @result{} 1
(% -9 -4)
     @result{} -1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(*)
     @result{} 1
(* 1)
     @result{} 1
(* 1 2 3 4)
     @result{} 24</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(*)
     @result{} 1
(* 1)
     @result{} 1
(* 1 2 3 4)
     @result{} 24</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(+ (% @var{dividend} @var{divisor})
   (* (/ @var{dividend} @var{divisor}) @var{divisor}))</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(+ (% @var{dividend} @var{divisor})
   (* (/ @var{dividend} @var{divisor}) @var{divisor}))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(+ (mod @var{dividend} @var{divisor})
   (* (floor @var{dividend} @var{divisor}) @var{divisor}))</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(+ (mod @var{dividend} @var{divisor})
   (* (floor @var{dividend} @var{divisor}) @var{divisor}))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(+ 1 268435455)
     @result{} -268435456
     @result{} 1 0000  0000 0000  0000 0000  0000 0000</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(+ 1 268435455)
     @result{} -268435456
     @result{} 1 0000  0000 0000  0000 0000  0000 0000</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(+)
     @result{} 0
(+ 1)
     @result{} 1
(+ 1 2 3 4)
     @result{} 10</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(+)
     @result{} 0
(+ 1)
     @result{} 1
(+ 1 2 3 4)
     @result{} 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(- 10 1 2 3 4)
     @result{} 0
(- 10)
     @result{} -10
(-)
     @result{} 0</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(- 10 1 2 3 4)
     @result{} 0
(- 10)
     @result{} -10
(-)
     @result{} 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(/ -17 6)
     @result{} -2   @r{(could in theory be @minus{}3 on some machines)}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(/ -17 6)
     @result{} -2   @r{(pourrait être @minus{}3 sur certaines machines)}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(/ 5 2)
     @result{} 2
(/ 5.0 2)
     @result{} 2.5
(/ 5 2.0)
     @result{} 2.5
(/ 5.0 2.0)
     @result{} 2.5
(/ 25 3 2)
     @result{} 4</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(/ 5 2)
     @result{} 2
(/ 5.0 2)
     @result{} 2.5
(/ 5 2.0)
     @result{} 2.5
(/ 5.0 2.0)
     @result{} 2.5
(/ 25 3 2)
     @result{} 4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(/ 6 2)
     @result{} 3</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(/ 6 2)
     @result{} 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(@var{condition})</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(@var{condition})</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(The term ``hash notation'' refers to the initial @samp{#} character---@pxref{Printed Representation}---and has nothing to do with the term ``hash table.'')</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T213207Z">
        <seg>(Le terme ``notation de hachage'' correspond au caractère @samp{#} --- @pxref{Printed Representation} --- et n'a rien à voir avec le terme ``table de hachage''.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(We have inserted spaces between groups of 4 bits, and two spaces between groups of 8 bits, to make the binary integer easier to read.)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(Nous avons inséré un espace entre les groupes de 4 bits, et deux
espaces entre les groupes de 8 bits, pour faciliter la lecture du
nombre entier binaire.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(aref "abcdefg" 1)
     @result{} 98           ; @r{@samp{b} is @acronym{ASCII} code 98.}</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T180824Z">
        <seg>(aref "abcdefg" 1)
     @result{} 98           ; @r{@samp{b} correspond à 98 en code @acronym{ASCII}.}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(arrayp [a])
     @result{} t
(arrayp "asdf")
     @result{} t
(arrayp (syntax-table))    ;; @r{A char-table.}
     @result{} t</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T180612Z">
        <seg>(arrayp [a])
     @result{} t
(arrayp "asdf")
     @result{} t
(arrayp (syntax-table))    ;; @r{Une table de caractères.}
     @result{} t</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(ash -5 -2)        ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}
     @result{} -2         ;      =  @r{1 1111  1111 1111  1111 1111  1111 1110}</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T121426Z">
        <seg>(ash -5 -2)        ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}
     @result{} -2         ;      =  @r{1 1111  1111 1111  1111 1111  1111 1110}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(ash -6 -1) @result{} -3
;; @r{Decimal @minus{}6 becomes decimal @minus{}3.}
1 1111  1111 1111  1111 1111  1111 1010
     @result{}
1 1111  1111 1111  1111 1111  1111 1101</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(ash -6 -1)
@result{} -3
;; @r{La décimale @minus{}6 devient la décimale @minus{}3.}
1 1111  1111 1111  1111 1111  1111 1010
     @result{}
1 1111  1111 1111  1111 1111  1111 1101</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(ash 5 -2)
     @result{} 1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(ash 5 -2)
     @result{} 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(ash 5 2)
     @result{} 20
(lsh -5 2)         ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}
     @result{} -20        ;      =  @r{1 1111  1111 1111  1111 1111  1110 1100}
(ash -5 2)
     @result{} -20</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T121426Z">
        <seg>(ash 5 2)
     @result{} 20
(lsh -5 2)         ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}
     @result{} -20        ;      =  @r{1 1111  1111 1111  1111 1111  1110 1100}
(ash -5 2)
     @result{} -20</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(capitalize "THE 77TH-HATTED CAT")
     @result{} "The 77th-Hatted Cat"</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T202815Z">
        <seg>(capitalize "LE 77EME CHAT BOTTE")
     @result{} "Le 77eme Chat Botte"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(capitalize "The cat in the hat")
     @result{} "The Cat In The Hat"</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T202713Z">
        <seg>(capitalize "Le chat dans le chapeau")
     @result{} "Le Chat Dans Le Chapeau"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(ceiling 1.2)
     @result{} 2
(ceiling 1.7)
     @result{} 2
(ceiling -1.2)
     @result{} -1
(ceiling -1.7)
     @result{} -1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(ceiling 1.2)
     @result{} 2
(ceiling 1.7)
     @result{} 2
(ceiling -1.2)
     @result{} -1
(ceiling -1.7)
     @result{} -1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(concat "abc" "-def")
     @result{} "abc-def"
(concat "abc" (list 120 121) [122])
     @result{} "abcxyz"
;; @r{@code{nil} is an empty sequence.}
(concat "abc" nil "-def")
     @result{} "abc-def"
(concat "The " "quick brown " "fox.")
     @result{} "The quick brown fox."
(concat)
     @result{} ""</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T103233Z">
        <seg>(concat "abc" "-def")
     @result{} "abc-def"
(concat "abc" (list 120 121) [122])
     @result{} "abcxyz"
;; @r{@code{nil} est une suite vide.}
(concat "abc" nil "-def")
     @result{} "abc-def"
(concat "Le " "juge blond " "qui fume.")
     @result{} "Le juge blond qui fume."
(concat)
     @result{} ""</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(count-loop (done)
  (if (pending)
      (fixit)
    (setq done t)))</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030317Z">
        <seg>(count-loop (done)
  (if (pending)
      (fixit)
    (setq done t)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(count-loop (i 0 10)
  (prin1 i) (princ " ")
  (prin1 (aref vector i))
  (terpri))</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030313Z">
        <seg>(count-loop (i 0 10)
  (prin1 i) (princ " ")
  (prin1 (aref vector i))
  (terpri))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(defvar fuzz-factor 1.0e-6)
(defun approx-equal (x y)
  (or (and (= x 0) (= y 0))
      (&lt; (/ (abs (- x y))
            (max (abs x) (abs y)))
         fuzz-factor)))</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(defvar fuzz-factor 1.0e-6)
(defun approx-equal (x y)
  (or (and (= x 0) (= y 0))
      (&lt; (/ (abs (- x y))
            (max (abs x) (abs y)))
         fuzz-factor)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(dir)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(dir)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(downcase "The cat in the hat")
     @result{} "the cat in the hat"</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T200956Z">
        <seg>(downcase "Le chat dans le chapeau")
     @result{} "le chapeau dans le chapeau"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(emacs-version)
  @result{} "GNU Emacs 20.3.5 (i486-pc-linux-gnulibc1, X toolkit)
 of Sat Feb 14 1998 on psilocin.gnu.org"</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(emacs-version)
  @result{} "GNU Emacs 20.3.5 (i486-pc-linux-gnulibc1, X toolkit)
 of Sat Feb 14 1998 on psilocin.gnu.org"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(exclusive) whose tangent is @var{y}.  If the optional second argument @var{x} is given, the value of @code{(atan y x)} is the angle in radians between the vector @code{[@var{x}, @var{y}]} and the @code{X} axis.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(exclusif) dont la tangente est @var{y}. Si le deuxième argument
facultatif @var{x} est donné, la valeur de @code{(atan y x)} est
pêcher en radians entre le vecteur @code{[@var{x}, @var{y}]} et l'axis
@code{X}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(floor 1.2)
     @result{} 1
(floor 1.7)
     @result{} 1
(floor -1.2)
     @result{} -2
(floor -1.7)
     @result{} -2
(floor 5.99 3)
     @result{} 1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(floor 1.2)
     @result{} 1
(floor 1.7)
     @result{} 1
(floor -1.2)
     @result{} -2
(floor -1.7)
     @result{} -2
(floor 5.99 3)
     @result{} 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(format "%-6d is padded on the right" 123)
     @result{} "123    is padded on the right"</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T163325Z">
        <seg>(format "%-6d est bourré à droite" 123)
     @result{} "123    est bourré à droite"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(format "%06d is padded on the left with zeros" 123)
     @result{} "000123 is padded on the left with zeros"</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T163244Z">
        <seg>(format "%06d est bourré à gauche avec des zéros" 123)
     @result{} "000123 est bourré à gauche avec des zéros"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(format "The buffer object prints as %s." (current-buffer))
     @result{} "The buffer object prints as strings.texi."</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212148Z">
        <seg>(format "L'objet buffer imprime en %s." (current-buffer))
     @result{} "L'objet mémoire tampon imprime en strings.texi."</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(format "The name of this buffer is %s." (buffer-name))
     @result{} "The name of this buffer is strings.texi."</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212123Z">
        <seg>(format "Le nom de ce buffer est %s." (buffer-name))
     @result{} "Le nom de cette mémoire tampon est strings.texi."</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(format "The octal value of %d is %o,
         and the hex value is %x." 18 18 18)
     @result{} "The octal value of 18 is 22,
         and the hex value is 12."</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T161851Z">
        <seg>(format "La valeur octale de %d est %o,
         et la valeur hexadécimale est %x." 18 18 18)
     @result{} "La valeur octale de 18 est 22,
         et la valeur hexadécimale est 12."</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(format "The value of fill-column is %d." fill-column)
     @result{} "The value of fill-column is 72."</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T152008Z">
        <seg>(format "La valeur de fill-column est %d." fill-column)
     @result{} "La valeur de fill-column est 72."</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(format "The word `%-7s' actually has %d letters in it."
        "foo" (length "foo"))
     @result{} "The word `foo    ' actually has 3 letters in it."</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T164151Z">
        <seg>(format "Le mot `%-7s' a effectivement %d lettres en lui."
        "foo" (length "foo"))
     @result{} "Le mot `foo    ' a effectivement 3 lettres en lui."</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(format "The word `%7s' actually has %d letters in it."
        "foo" (length "foo"))
     @result{} "The word `    foo' actually has 3 letters in it."</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T163954Z">
        <seg>(format "Le mot `%7s' a effectivement %d lettres en lui."
        "foo" (length "foo"))
     @result{} "Le mot `    foo' a effectivement 3 lettres en lui."</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(format "The word `%7s' actually has %d letters in it."
        "specification" (length "specification"))
     @result{} "The word `specification' actually has 13 letters in it."</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T164058Z">
        <seg>(format "Le mot `%7s' a effectivement %d lettres en lui."
        "spécification" (length "spécification"))
     @result{} "Le mot `spécification' a effectivement 13 lettres en lui."</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(if @var{condition} (progn @var{a} @var{b} @var{c}) nil)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(if @var{condition} (progn @var{a} @var{b} @var{c}) nil)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(inclusive) whose cosine is @var{arg}; if, however, @var{arg} is out of range (outside [@minus{}1, 1]), it signals a @code{domain-error} error.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032424Z">
        <seg>(inclus) dont le cosinus est @var{arg} ; si, cependant, @var{arg} est
hors de portée (en dehors de [@minus{} 1, 1]), il signale une erreur
@code{domaine-error}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(inclusive) whose sine is @var{arg}; if, however, @var{arg} is out of range (outside [@minus{}1, 1]), it signals a @code{domain-error} error.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032419Z">
        <seg>(inclus) dont le sinus est @var{arg} ; si, cependant, @var{arg} est
hors de portée (en dehors de [@minus{} 1, 1]), il signale une erreur
@code{domaine-error}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(logand 13 12)
     @result{} 12</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(logand 13 12)
     @result{} 12</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(logand 14 13 4)   ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}
                   ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}
                   ;  4  =  @r{0 0000  0000 0000  0000 0000  0000 0100}
     @result{} 4          ;  4  =  @r{0 0000  0000 0000  0000 0000  0000 0100}</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T121426Z">
        <seg>(logand 14 13 4)   ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}
                   ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}
                   ;  4  =  @r{0 0000  0000 0000  0000 0000  0000 0100}
     @result{} 4          ;  4  =  @r{0 0000  0000 0000  0000 0000  0000 0100}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(logand 14 13)     ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}
                   ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}
     @result{} 12         ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T121426Z">
        <seg>(logand 14 13)     ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}
                   ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}
     @result{} 12         ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(logand)
     @result{} -1         ; -1  =  @r{1 1111  1111 1111  1111 1111  1111 1111}</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T121426Z">
        <seg>(logand)
     @result{} -1         ; -1  =  @r{1 1111  1111 1111  1111 1111  1111 1111}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(logior 12 5 7)    ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
                   ;  7  =  @r{0 0000  0000 0000  0000 0000  0000 0111}
     @result{} 15         ; 15  =  @r{0 0000  0000 0000  0000 0000  0000 1111}</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T121426Z">
        <seg>(logior 12 5 7)    ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
                   ;  7  =  @r{0 0000  0000 0000  0000 0000  0000 0111}
     @result{} 15         ; 15  =  @r{0 0000  0000 0000  0000 0000  0000 1111}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(logior 12 5)      ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 13         ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T121426Z">
        <seg>(logior 12 5)      ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 13         ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(lognot 5)
     @result{} -6
;;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
;; @r{becomes}
;; -6  =  @r{1 1111  1111 1111  1111 1111  1111 1010}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lognot 5)
     @result{} -6
;;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
;; @r{devient}
;; -6  =  @r{1 1111  1111 1111  1111 1111  1111 1010}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(logxor 12 5 7)    ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
                   ;  7  =  @r{0 0000  0000 0000  0000 0000  0000 0111}
     @result{} 14         ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T121426Z">
        <seg>(logxor 12 5 7)    ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
                   ;  7  =  @r{0 0000  0000 0000  0000 0000  0000 0111}
     @result{} 14         ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(logxor 12 5)      ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 9          ;  9  =  @r{0 0000  0000 0000  0000 0000  0000 1001}</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T121426Z">
        <seg>(logxor 12 5)      ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 9          ;  9  =  @r{0 0000  0000 0000  0000 0000  0000 1001}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(lsh -5 -2)        ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}
     @result{} 134217726  ;      =  @r{0 0111  1111 1111  1111 1111  1111 1110}</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T121426Z">
        <seg>(lsh -5 -2)        ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}
     @result{} 134217726  ;      =  @r{0 0111  1111 1111  1111 1111  1111 1110}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(lsh -6 -1) @result{} 268435453
;; @r{Decimal @minus{}6 becomes decimal 268,435,453.}
1 1111  1111 1111  1111 1111  1111 1010
     @result{}
0 1111  1111 1111  1111 1111  1111 1101</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh -6 -1)
@result{} 268435453
;; @r{La décimale @minus{}6 devient la décimale 268 435 453.}
1 1111  1111 1111  1111 1111  1111 1010
     @result{}
0 1111  1111 1111  1111 1111  1111 1101</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(lsh 3 2)
     @result{} 12
;; @r{Decimal 3 becomes decimal 12.}
00000011 @result{} 00001100</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh 3 2)
     @result{} 12
;; @r{La décimale 3 devient décimale 12.}
00000011 @result{} 00001100</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(lsh 5 -1)
     @result{} 2
;; @r{Decimal 5 becomes decimal 2.}
00000101 @result{} 00000010</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh 5 -1)
     @result{} 2
;; @r{La décimale 5 devient décimale 2.}
00000101 @result{} 00000010</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(lsh 5 -2)         ;   5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 1          ;      =  @r{0 0000  0000 0000  0000 0000  0000 0001}</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T121426Z">
        <seg>(lsh 5 -2)         ;   5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 1          ;      =  @r{0 0000  0000 0000  0000 0000  0000 0001}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(lsh 5 1)
     @result{} 10
;; @r{Decimal 5 becomes decimal 10.}
00000101 @result{} 00001010</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh 5 1)
     @result{} 10
;; @r{Decimal 5 becomes decimal 10.}
00000101 @result{} 00001010</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(lsh 5 2)          ;   5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 20         ;      =  @r{0 0000  0000 0000  0000 0000  0001 0100}</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T121426Z">
        <seg>(lsh 5 2)          ;   5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 20         ;      =  @r{0 0000  0000 0000  0000 0000  0001 0100}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(lsh 6 -1)
     @result{} 3
;; @r{Decimal 6 becomes decimal 3.}
00000110 @result{} 00000011</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh 6 -1)
     @result{} 3
;; @r{La décimale 6 devient décimale 3.}
00000110 @result{} 00000011</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(lsh 7 1)
     @result{} 14
;; @r{Decimal 7 becomes decimal 14.}
00000111 @result{} 00001110</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh 7 1)
     @result{} 14
;; @r{La décimale 7 devient la décimale 14.}
00000111 @result{} 00001110</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(min -4 1)
     @result{} -4</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(min -4 1)
     @result{} -4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(mod -9 -4)
     @result{} -1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(mod -9 -4)
     @result{} -1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(mod -9 4)
     @result{} 3</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(mod -9 4)
     @result{} 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(mod 5.5 2.5)
     @result{} .5</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(mod 5.5 2.5)
     @result{} .5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(mod 9 -4)
     @result{} -3</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(mod 9 -4)
     @result{} -3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(mod 9 4)
     @result{} 1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(mod 9 4)
     @result{} 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(round 1.2)
     @result{} 1
(round 1.7)
     @result{} 2
(round -1.2)
     @result{} -1
(round -1.7)
     @result{} -2</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(round 1.2)
     @result{} 1
(round 1.7)
     @result{} 2
(round -1.2)
     @result{} -1
(round -1.7)
     @result{} -2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(setq foo (1+ foo))
     @result{} 5</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(setq foo (1+ foo))
     @result{} 5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(setq foo 4)
     @result{} 4
(1+ foo)
     @result{} 5</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(setq foo 4)
     @result{} 4
(1+ foo)
     @result{} 5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(setq x1 '(a b c))
     @result{} (a b c)
(setcdr x1 (cons 'd (cdr x1)))
     @result{} (d b c)
x1
     @result{} (a d b c)</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030553Z">
        <seg>(setq x1 '(a b c))
     @result{} (a b c)
(setcdr x1 (cons 'd (cdr x1)))
     @result{} (d b c)
x1
     @result{} (a d b c)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(split-string "  two words "
              split-string-default-separators)
     @result{} ("" "two" "words" "")</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T133521Z">
        <seg>(split-string "  deux mots "
              split-string-default-separators)
     @result{} ("" "deux" "mots" "")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(split-string "  two words ")
     @result{} ("two" "words")</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T133457Z">
        <seg>(split-string "  deux mots ")
     @result{} ("deux" "mots")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(string-to-number "256")
     @result{} 256
(string-to-number "25 is a perfect square.")
     @result{} 25
(string-to-number "X256")
     @result{} 0
(string-to-number "-4.5")
     @result{} -4.5
(string-to-number "1e5")
     @result{} 100000.0</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T211000Z">
        <seg>(string-to-number "256")
     @result{} 256
(string-to-number "25 est un carrée parfait.")
     @result{} 25
(string-to-number "X256")
     @result{} 0
(string-to-number "-4.5")
     @result{} -4.5
(string-to-number "1e5")
     @result{} 100000.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(symbol-name 'foo)
     @result{} "foo"</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(symbol-name 'toto)
     @result{} "toto"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(third '(a b c))
     @expansion{} (car (cdr (cdr '(a b c))))
     @result{} c</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030203Z">
        <seg>(third '(a b c))
     @expansion{} (car (cdr (cdr '(a b c))))
     @result{} c</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(truncate 1.2)
     @result{} 1
(truncate 1.7)
     @result{} 1
(truncate -1.2)
     @result{} -1
(truncate -1.7)
     @result{} -1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(truncate 1.2)
     @result{} 1
(truncate 1.7)
     @result{} 1
(truncate -1.2)
     @result{} -1
(truncate -1.7)
     @result{} -1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(upcase "The cat in the hat")
     @result{} "THE CAT IN THE HAT"</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T201449Z">
        <seg>(upcase "Le chat dans le chapeau")
     @result{} "LE CHAT DANS LE CHAPEAU"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(upcase-initials "The CAT in the hAt")
     @result{} "The CAT In The HAt"</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T203411Z">
        <seg>(upcase-initials "Le CHAT dans le cHapeau")
     @result{} "Le CHAT Dans Le CHapeau"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>(when @var{condition} @var{a} @var{b} @var{c})</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(when @var{condition} @var{a} @var{b} @var{c})</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>*</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>* A Sample Function Description::  A description of an imaginary
                                     function, @code{foo}.
* A Sample Variable Description::  A description of an imaginary
                                     variable, @code{electric-future-map}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>* Un exemple d'une description de fonction::  Une description d'une imaginaire
                                     fonction, @code{foo}.
* Un exemple d'une description de variable::  Une description d'une imaginaire
                                     variable, @code{electric-future-map}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>* Abbrev Mode::             Setting up Emacs for abbreviation.
* Abbrev Tables::           Creating and working with abbrev tables.
* Defining Abbrevs::        Specifying abbreviations and their expansions.
* Abbrev Files::            Saving abbrevs in files.
* Abbrev Expansion::        Controlling expansion; expansion subroutines.
* Standard Abbrev Tables::  Abbrev tables used by various major modes.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T121426Z">
        <seg>* Mode abbrev::                 Configuration d'Emacs pour l'abréviation.
* Tables d'abréviations::       Créer et travailler avec des tables d'abréviations.
* Définir des abréviations::    Spécifier des abréviations et leurs expansions.
* Fichiers d'abréviations::     Sauver des abréviations dans les fichiers.
* Expansions d'abréviations::    Contrôler l'expansion ; sous-programmes d'expansions.
* Tables standard d'abréviations:: Tables d'abréviations employées par divers modes majeurs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>* Caveats::                 Flaws and a request for help.
* Lisp History::            Emacs Lisp is descended from Maclisp.
* Conventions::             How the manual is formatted.
* Version Info::            Which Emacs version is running?
* Acknowledgements::        The authors, editors, and sponsors of this manual.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025531Z">
        <seg>* Avertissements::              Erreurs et demande d'aide.
* L'histoire de Lisp::          Emacs Lisp descend de Maclisp.
* Conventions::                 Comment le manuel est composé.
* Information de version::      Quelle version d'Emacs fonctionne ?
* Remerciements::               Les auteurs, les rédacteurs, et les commanditaires de ce manuel.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>* Integer Basics::          Representation and range of integers.
* Float Basics::	    Representation and range of floating point.
* Predicates on Numbers::   Testing for numbers.
* Comparison of Numbers::   Equality and inequality predicates.
* Numeric Conversions::	    Converting float to integer and vice versa.
* Arithmetic Operations::   How to add, subtract, multiply and divide.
* Rounding Operations::     Explicitly rounding floating point numbers.
* Bitwise Operations::      Logical and, or, not, shifting.
* Math Functions::          Trig, exponential and logarithmic functions.
* Random Numbers::          Obtaining random integers, predictable or not.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031015Z">
        <seg>* Entiers basiques::                     Représentation et champ des nombres entiers.
* Nombres à virgule flottante basiques:: Représentation et champ des nombres à virgule flottante.
* Attributs des nombres::                Tester les nombres.
* Comparaison des nombres::              Attributs d'égalité et d'inégalité.
* Conversions numériques::               Convertir des nombres à virgule flottante en nombres entiers et vice-versa.
* Opérations arithmétiques::             Comment additionner, soustraire, multiplier et diviser.
* Opérations d'arrondissage::            Arrondir explicitement les nombres à virgule flottante.
* Opérations de bits::                   and, or, not logique et décalage.
* Fonctions mathématiques::              Fonctions trigonométrique, exponentielle et logarithmique.
* Nombres aléatoires::                   Obtention des nombres entiers aléatoires, prévisibles ou pas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>* Some Terms::              Explanation of terms we use in this manual.
* nil and t::               How the symbols @code{nil} and @code{t} are used.
* Evaluation Notation::     The format we use for examples of evaluation.
* Printing Notation::       The format we use for examples that print output.
* Error Messages::          The format we use for examples of errors.
* Buffer Text Notation::    The format we use for buffer contents in examples.
* Format of Descriptions::  Notation for describing functions, variables, etc.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>* Quelques termes::             Explication des termes que nous employons en ce manuel.
* nil et t::                    Comment les symboles @code{nil} et @code{t} sont employés.
* Notation d'évaluation::       Le format que nous employons pour des exemples de l'évaluation.
* Notation d'affichage::        Le format que nous employons quand les exemples affichent du texte.
* Messages d'erreur::           Le format que nous employons pour des exemples d'erreurs.
* Notation des textes de tampon:: Le format que nous employons pour le contenu de tampons dans les exemples.
* Format des descriptions::     Notation pour décrire des fonctions, des variables, etc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>*/</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>*/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>+</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>+</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>--- ---        --- ---      --- ---
x1---&gt; |   |   |----&gt; |   |   |--&gt; |   |   |--&gt; nil
        --- ---        --- ---      --- ---
         |        --&gt;   |            |
         |       |      |            |
          --&gt; a  |       --&gt; b        --&gt; c
                 |
       --- ---   |
x2--&gt; |   |   |--
       --- ---
        |
        |
         --&gt; z</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030536Z">
        <seg>--- ---        --- ---      --- ---
x1---&gt; |   |   |----&gt; |   |   |--&gt; |   |   |--&gt; nil
        --- ---        --- ---      --- ---
         |        --&gt;   |            |
         |       |      |            |
          --&gt; a  |       --&gt; b        --&gt; c
                 |
       --- ---   |
x2--&gt; |   |   |--
       --- ---
        |
        |
         --&gt; z</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>--------------        -------------       -------------
| car  | cdr   |      | car  | cdr  |     | car  | cdr  |
|   a  |   o   |   --&gt;|   b  |   o-------&gt;|   c  |  nil |
|      |   |   |  |   |      |      |     |      |      |
 --------- | --   |    -------------       -------------
           |      |
     -----         --------
    |                      |
    |    ---------------   |
    |   | car   | cdr   |  |
     --&gt;|   d   |   o------
        |       |       |
         ---------------</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030556Z">
        <seg>--------------        -------------       -------------
| car  | cdr   |      | car  | cdr  |     | car  | cdr  |
|   a  |   o   |   --&gt;|   b  |   o-------&gt;|   c  |  nil |
|      |   |   |  |   |      |      |     |      |      |
 --------- | --   |    -------------       -------------
           |      |
     -----         --------
    |                      |
    |    ---------------   |
    |   | car   | cdr   |  |
     --&gt;|   d   |   o------
        |       |       |
         ---------------</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>--------------------
                  |                    |
 --------------   |   --------------   |    --------------
| car   | cdr  |  |  | car   | cdr  |   --&gt;| car   | cdr  |
|   a   |   o-----   |   b   |   o--------&gt;|   c   |  nil |
|       |      |     |       |      |      |       |      |
 --------------       --------------        --------------</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030549Z">
        <seg>--------------------
                  |                    |
 --------------   |   --------------   |    --------------
| car   | cdr  |  |  | car   | cdr  |   --&gt;| car   | cdr  |
|   a   |   o-----   |   b   |   o--------&gt;|   c   |  nil |
|       |      |     |       |      |      |       |      |
 --------------       --------------        --------------</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>-1.0e+INF</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>-1.0e+INF</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>-2**28</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>-2**28</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>/</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>/ dividend divisor &amp;rest divisors</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>/ dividend divisor &amp;rest divisors</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>/*</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>/*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>//</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>//</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>0 0000  0000 0000  0000 0000  0000 0101</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>0 0000  0000 0000  0000 0000  0000 0101</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>0 1111  1111 1111  1111 1111  1111 1111</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>0 1111  1111 1111  1111 1111  1111 1111</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>1               ; @r{The integer 1.}
 1.              ; @r{The integer 1.}
+1               ; @r{Also the integer 1.}
-1               ; @r{The integer @minus{}1.}
 536870913       ; @r{Also the integer 1, due to overflow.}
 0               ; @r{The integer 0.}
-0               ; @r{The integer 0.}</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T121426Z">
        <seg>1               ; @r{L'entier 1.}
 1.              ; @r{L'entier 1.}
+1               ; @r{Encore l'entier 1.}
-1               ; @r{L'entier @minus{}1.}
 536870913       ; @r{Encore l'entier 1, dû au débordement.}
 0               ; @r{L'entier 0.}
-0               ; @r{L'entier 0.}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>1 1111  1111 1111  1111 1111  1111 1011</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>1 1111  1111 1111  1111 1111  1111 1011</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>1 1111  1111 1111  1111 1111  1111 1111</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>1 1111  1111 1111  1111 1111  1111 1111</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>1.0e+INF</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>1.0e+INF</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>124b</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>124b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>2**28 - 1),</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>2**28 - 1),</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>23</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>23</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>2C-mode-map</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>2C-mode-map</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>:all</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>:all</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>:safe</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>:safe</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>;; @r{Decimal 268,435,455}
0 1111  1111 1111  1111 1111  1111 1111</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>;; @r{La décimale 268 435 455}
0 1111  1111 1111  1111 1111  1111 1111</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>;; @r{Decimal @minus{}2}
1 1111  1111 1111  1111 1111  1111 1110</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>;; @r{La décimale @minus{}2}
1 1111  1111 1111  1111 1111  1111 1110</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>;; @r{Modifying the inside of a shared element.}
(setcar (aref x 1) 69)
x @result{} [quux (69 2)]
y @result{} [foo (69 2)]</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T180305Z">
        <seg>;; @r{Modification du contenu d'un élément partagé.}
(setcar (aref x 1) 69)
x @result{} [quux (69 2)]
y @result{} [foo (69 2)]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>;; @r{Replacing an element of one sequence.}
(aset x 0 'quux)
x @result{} [quux (1 2)]
y @result{} [foo (1 2)]</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T180248Z">
        <seg>;; @r{Remplacement d'un élément d'une séquence.}
(aset x 0 'quux)
x @result{} [quux (1 2)]
y @result{} [foo (1 2)]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>;; @r{We use @code{string} to show clearly which character @code{elt} returns.}
(string (elt "1234" 2))
     @result{} "3"</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T173324Z">
        <seg>;; On utilise les chaînes de caractères pour montrer quel caractère @code{elt} retourne.
(string (elt "1234" 2))
     @result{} "3"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>&gt;b</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>&gt;b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>?</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@b{Common Lisp note:} Comparing numbers in Common Lisp always requires @code{=} because Common Lisp implements multi-word integers, and two distinct integer objects can have the same numeric value.  Emacs Lisp can have just one integer object for any given value because it has a limited range of integer values.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031730Z">
        <seg>@b{Common Lisp note:} Comparer des nombres en Common Lisp exige
toujours @code{=} parce que le Common Lisp met en application des
nombres entiers pluritermes, et deux objets distincts de nombre entier
peuvent avoir la même valeur numérique. Emacs Lisp peut avoir juste
un objet de nombre entier pour n'importe quelle valeur donnée parce
qu'il a un champ limité des valeurs de nombre entier.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@b{Common Lisp note:} In Common Lisp, @code{clrhash} returns the empty @var{table}.  In Emacs Lisp, it returns @code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T215554Z">
        <seg>@b{Common Lisp note :} En Common Lisp, @code{clrhash} retourne la table vide @var{table}. En Lisp Emacs, elle retourne @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@b{Common Lisp note:} In Common Lisp, @code{remhash} returns non-@code{nil} if it actually removed an association and @code{nil} otherwise.  In Emacs Lisp, @code{remhash} always returns @code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T143620Z">
        <seg>@b{Common Lisp note :} En Common Lisp, @code{remhash} retourne non-@code{nil} s'il se trouve qu'elle a retiré une association et sinon @code{nil}. Dans Lisp Emacs, @code{remhash} retourne toujours @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{"Symbol's value as variable is void"}@* @xref{Accessing Variables}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{"La valeur du symbole comme variable est vide"}@* @xref{Accès aux variables}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{(zerop x)} is equivalent to @code{(= x 0)}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{(zerop x)} est équivalent à @code{(= x 0)}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{EMACSLOADPATH} environment variable</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>variable d'environnement @code{EMACSLOADPATH}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{and}, @code{or}, @code{not}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{and}, @code{or}, @code{not}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{append} can convert a string into a list.  @xref{Building Lists}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T145640Z">
        <seg>@code{append} peut convertir une chaîne en une liste.  @xref{Building Lists}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{ash} (@dfn{arithmetic shift}) shifts the bits in @var{integer1} to the left @var{count} places, or to the right if @var{count} is negative.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{ash} (@dfn{arithmetic shift}) décale les bits dans
@var{integer1} de @var{count} places vers la gauche, ou vers la droite
si @var{count} est négatif.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{ash} gives the same results as @code{lsh} except when @var{integer1} and @var{count} are both negative.  In that case, @code{ash} puts ones in the empty bit positions on the left, while @code{lsh} puts zeros in those bit positions.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{ash} donne les mêmes résultats que @code{lsh} excepté quand
@var{integer1} et @var{count} sont tous les deux négatifs. Dans ce
cas, @code{ash} met des 1 dans les positions de bit vide du côté
gauche, alors que @code{lsh} met des 0 dans ces positions de bit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{composition} property, and point display</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140216T051551Z">
        <seg>Propriété @code{composition} et affichage du point</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{concat} can convert a vector or a list into a string.  @xref{Creating Strings}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T145537Z">
        <seg>@code{concat} peut convertir un vecteur ou une liste en une chaîne.  @xref{Creating Strings}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{define-abbrev} is the low-level basic function for defining an abbrev in a specified abbrev table.  When major modes predefine standard abbrevs, they should call @code{define-abbrev} and specify @code{t} for @var{system-flag}.  Be aware that any saved non-``system'' abbrevs are restored at startup, i.e. before some major modes are loaded.  Major modes should therefore not assume that when they are first loaded their abbrev tables are empty.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140424T015013Z">
        <seg>@code{define-abbrev} est la fonction de base de bas niveau pour
définir les abréviations dans une table d'abréviations indiquée. Si
les modes majeurs prédéfinissent la norme des abréviations, ils
devraient appeler @code{define-abbrev} et indiquer @code{t} pour
@var{system-flag}. Faites attention, les abréviations non sauvés du
non-« système » sont restaurées au démarrage, c.-à-d. avant que les
modes majeurs sont chargés. C'est pourquoi les modes majeurs ne
devraient pas assumer que, quand ils sont d'abord chargés, leurs
tables d'abréviations soient vides.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{display} property, and point display</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140216T051527Z">
        <seg>Propriété @code{display} et affichage du point</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{electric-future-map}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{electric-future-map}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{floatp} does not exist in Emacs versions 18 and earlier.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{floatp} n'existe pas dans les versions 18 et précédentes
d'Emacs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{format}: Emacs's analogue of @code{printf}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T102827Z">
        <seg>@code{format}: equivalent Emacs du @code{printf}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{if}, @code{cond}, @code{when}, @code{unless}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{if}, @code{cond}, @code{when}, @code{unless}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{int-to-string} is a semi-obsolete alias for this function.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T210919Z">
        <seg>@code{int-to-string} est un alias semi-obsolète de cette fonction.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{lsh}, which is an abbreviation for @dfn{logical shift}, shifts the bits in @var{integer1} to the left @var{count} places, or to the right if @var{count} is negative, bringing zeros into the vacated bits.  If @var{count} is negative, @code{lsh} shifts zeros into the leftmost (most-significant) bit, producing a positive result even if @var{integer1} is negative.  Contrast this with @code{ash}, below.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{lsh}, qui est une abréviation de @dfn{logical shift}, décale les
bits dans @var{integer1} de @var{count} places à gauche, ou vers la
droite si @var{count} est négatif, introduisant des zéros dans les
places vacantes des bits. Si @var{count} est négatif, @code{lsh}
décale les zéros dans l'extrême gauche du bit (plus fort), produisant
un résultat positif même si @var{integer1} est négatif. Contrairement
à @code{ash}, ci-dessous.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{nil} and @code{t}</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030031Z">
        <seg>@code{nil} et @code{t}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{no-self-insert} property</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140216T051506Z">
        <seg>Propriété @code{no-self-insert}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{string-equal} is another name for @code{string=}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T135842Z">
        <seg>@code{string-equal} est un autre nom pour @code{string=}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{string-lessp} is another name for @code{string&lt;}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T140329Z">
        <seg>@code{string-lessp} est un autre nom pour @code{string&lt;}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{string-to-int} is an obsolete alias for this function.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T211014Z">
        <seg>@code{string-to-int} est un alias obsolète de cette fonction.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{substring} also accepts a vector for the first argument.  For example:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T122758Z">
        <seg>@code{substring} accepte aussi un vecteur comme premier argument. Par exemple :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{vconcat} can convert a string into a vector.  @xref{Vector Functions}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T145556Z">
        <seg>@code{vconcat} peut convertir une chaîne en un vecteur.  @xref{Vector Functions}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@code{while} loops.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>boucles @code{while}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@dfn{Formatting} means constructing a string by substitution of computed values at various places in a constant string.  This constant string controls how the other values are printed, as well as where they appear; it is called a @dfn{format string}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T211118Z">
        <seg>@dfn{Formatting} signifie construire une chaîne par la substitution, à différents endroits dans une chaîne constante, de valeurs calculées. Cette chaîne constante règle la façon dont les autres valeurs sont affichées, ainsi que là où elles apparaissent; elle s'appelle une @dfn{format string}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@hfil</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T024906Z">
        <seg>@hfil</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@minus{}1 is represented as 29 ones.  (This is called @dfn{two's complement} notation.)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@minus{}1 est représenté en tant que 29 unités. (Ceci s'appelle la
notation @dfn{two's complement}.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@minus{}pi/2</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@minus{}pi/2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@result{} for</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@result{} for</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@r{Original list head:}                       @r{Reversed list:}
 -------------        -------------        ------------
| car  | cdr  |      | car  | cdr  |      | car | cdr  |
|   a  |  nil |&lt;--   |   b  |   o  |&lt;--   |   c |   o  |
|      |      |   |  |      |   |  |   |  |     |   |  |
 -------------    |   --------- | -    |   -------- | -
                  |             |      |            |
                   -------------        ------------</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030650Z">
        <seg>@r{Original list head:}                       @r{Reversed list:}
 -------------        -------------        ------------
| car  | cdr  |      | car  | cdr  |      | car | cdr  |
|   a  |  nil |&lt;--   |   b  |   o  |&lt;--   |   c |   o  |
|      |      |   |  |      |   |  |   |  |     |   |  |
 -------------    |   --------- | -    |   -------- | -
                  |             |      |            |
                   -------------        ------------</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@samp{%} in format</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T151430Z">
        <seg>@samp{%} en format</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@samp{*?}, @samp{+?}, @samp{??}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@samp{*?}, @samp{+?}, @samp{??}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@samp{+} as a flag inserts a plus sign before a positive number, so that it always has a sign.  A space character as flag inserts a space before a positive number.  (Otherwise, positive numbers start with the first digit.)  Either of these two flags ensures that positive numbers and negative numbers use the same number of columns.  These flags are ignored except for @samp{%d}, @samp{%e}, @samp{%f}, @samp{%g}, and if both flags are used, the @samp{+} takes precedence.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212407Z">
        <seg>@samp{+} comme indicateur insère un signe plus devant un nombre positif, de sorte qu'il a toujours un signe. Un caractère espace comme indicateur insère un espace devant un nombre positif.  (Sinon, les nombres positifs commencent avec le premier chiffre.)  L'un ou l'autre de ces indicateurs fait en sorte que les nombres positifs et les nombres négatifs utilisent le même nombre de colonnes. Ces indicateurs sont ignorés sauf pour @samp{%d}, @samp{%e}, @samp{%f}, @samp{%g}, et si les deux indicateurs sont utilisés, le @samp{+} a la priorité.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@samp{0.0e+NaN} or @samp{-0.0e+NaN}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@samp{0.0e+NaN} ou @samp{-0.0e+NaN}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@smallbook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@smallbook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@xref{Definition of safe-length}, for the related function @code{safe-length}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T185251Z">
        <seg>@xref{Definition of safe-length}, pour la fonction apparentée @code{safe-length}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@xref{Documentation}, for functions that produce textual descriptions of text characters and general input events (@code{single-key-description} and @code{text-char-description}).  These are used primarily for making help messages.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T210650Z">
        <seg>@xref{Documentation}, pour ce qui concerne les fonctions qui  génèrent les descriptions textuelles des caractères textuels et des évènements généraux d'entrée (@code{single-key-description} et @code{text-char-description}). Ils sont principalement utilisés pour la fabrication de messages d'aide.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@xref{Lambda Expressions}, for a more complete description of optional and rest arguments.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@xref{Lambda Expressions}, pour une description plus complète des
arguments optionnels et restants.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@xref{Strings of Events}, for special considerations for strings of keyboard character events.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T101505Z">
        <seg>@xref{Strings of Events}, pour des informations particulières sur les chaînes des événements liés aux caractères clavier.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@xref{Text Comparison}, for functions that compare strings; some of them ignore case differences, or can optionally ignore case differences.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T203504Z">
        <seg>@xref{Text Comparison},  pour les fonctions qui comparent des chaînes; certains d'entre eux ignorent les différences de casse, ou peut éventuellement ignorer les différences de casse.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>@xref{Text}, for information about functions that display strings or copy them into buffers.  @xref{Character Type}, and @ref{String Type}, for information about the syntax of characters and strings.  @xref{Non-ASCII Characters}, for functions to convert between text representations and to encode and decode character codes.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T105145Z">
        <seg>&gt;@xref{Text}, pour plus d’informations sur les fonctions qui affichent des chaînes ou les copient dans une mémoire tampon. Voir la section @xref{Character Type}, et @xref{String Type}, pour plus d’informations sur la syntaxe des chaînes et des caractères. @xref{Non-ASCII Characters}, les fonctions pour faire des conversions entre des représentations textuelles et pour coder et décoder des codes caractères.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A @code{wrong-type-argument} error is signaled if @var{start} is not an integer or if @var{end} is neither an integer nor @code{nil}.  An @code{args-out-of-range} error is signaled if @var{start} indicates a character following @var{end}, or if either integer is out of range for @var{string}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T102446Z">
        <seg>Une erreur de type @code{wrong-type-argument} est soulevée si @var{start} n'est pas un entier ou si @var{end} n'en est pas un non plus ou ne vaut pas @code{nil}. Une erreur de type @code{args-out-of-range} est signalée si @var{start} indique un caractère qui suit un caractère à l'indice @var{end}, ou si l'un ou l'autre des entiers est hors de la @var{string}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A @dfn{symbol} is an object with a unique name.  This chapter describes symbols, their components, their property lists, and how they are created and interned.  Separate chapters describe the use of symbols as variables and as function names; see @ref{Variables}, and @ref{Functions}.  For the precise read syntax for symbols, see @ref{Symbol Type}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Un @dfn{symbole} est un objet avec un nom unique. Ce chapitre décrit les symboles, leurs composants, leurs listes de propriétés et comment ils sont créés et conservés. L'utilisation de symboles comme noms de variables ou de fonctions est décrit dans d'autres chapitres ; consultez @ref{Variables} et @ref{Functions}. Pour la syntaxe exacte des symboles, consultez @ref{Le type symbole}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A @dfn{variable} is a name that can hold a value.  Although nearly all variables can be set by the user, certain variables exist specifically so that users can change them; these are called @dfn{user options}.  Ordinary variables and user options are described using a format like that for functions except that there are no arguments.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030406Z">
        <seg>Une @dfn{variable} est un nom qui peut contenir une valeur. Bien que
presque toutes les variables puissent être initialisées par
l'utilisateur, certaines variables existent spécifiquement de sorte
que les utilisateurs puissent les changer ; celles-ci s'appellent
@dfn{users options}. Des variables ordinaires et les options
d'utilisateur sont décrites en utilisant un format comme pour des
fonctions sauf qu'il n'y a aucun argument.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A Lisp @dfn{object} is a piece of data used and manipulated by Lisp programs.  For our purposes, a @dfn{type} or @dfn{data type} is a set of possible objects.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Un @dfn{object} List est un morceau de données employées et manipulées
par les programmes Lisp. Pour nous, un @dfn{type} ou un @dfn{data
type} est un ensemble d'objets possibles.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A Lisp expression that you can evaluate is called a @dfn{form}.  Evaluating a form always produces a result, which is a Lisp object.  In the examples in this manual, this is indicated with @samp{@result{}}:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032755Z">
        <seg>Une expression de Lisp que vous pouvez évaluer s'appelle une
@dfn{form}. L'évaluation d'un formulaire produit toujours un résultat,
qui est un objet de Lisp. Dans les exemples en ce manuel, ceci est
indiqué avec @samp{@result{}} :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A Sample Function Description</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Un exemple d'une description de fonction</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A Sample Variable Description</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Un exemple d'une description de variable</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A bool-vector is much like a vector, except that it stores only the values @code{t} and @code{nil}.  If you try to store any non-@code{nil} value into an element of the bool-vector, the effect is to store @code{t} there.  As with all arrays, bool-vector indices start from 0, and the length cannot be changed once the bool-vector is created.  Bool-vectors are constants when evaluated.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Nicolas Lecompte" changedate="20140430T201756Z">
        <seg>Un vecteur-booléen est presque comme un vecteur sauf qu'il stocke seulement des valeurs de type @code{t} et la valeur @code{nil}. Si on essaie de stocker une valeur qui n'est pas @code{nil} dans un élément du vecteur-booléen, c'est @code{t} qui s'y trouvera stocké. Comme avec tous les tableaux, les indices du vecteur-booléen commencent à 0 et la longueur ne peut pas être changée une fois que le vecteur-booléen est créé. Les vecteurs-booléen sont des constantes quand ils sont évalués.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A case table is a char-table (@pxref{Char-Tables}) whose subtype is @code{case-table}.  This char-table maps each character into the corresponding lower case character.  It has three extra slots, which hold related tables:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T213010Z">
        <seg>Une table de casse est un char-table (@pxref{Char-Tables}) dont le sous-type est @code{case-table}. Cette char-table associe à chaque caractère son caractère minuscule correspondant. Il dispose de trois emplacements supplémentaires, qui contiennent les ttables en rapport les unes avec des tableaux connexes:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A certain amount of Common Lisp emulation is available via the @file{cl} library.  @inforef{Top, Overview, cl}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Une certaine quantité de programmes Lisp Common est disponible par
l'intermédiaire de la @file{cl} bibliothèque. @inforef{Top, Overview,
cl}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A char-table can also have a @dfn{default value}.  If so, then @code{(aref @var{char-table} @var{c})} returns the default value whenever the char-table does not specify any other non-@code{nil} value.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T191048Z">
        <seg>Une char-table peut aussi avoir une valeur par défaut. Dans ce cas, @code{(aref @var{char-table} @var{c})} retourne la valeur par défaut quand la char-table ne spécifie pas une valeur autre que @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A char-table can have a @dfn{parent}, which is another char-table.  If it does, then whenever the char-table specifies @code{nil} for a particular character @var{c}, it inherits the value specified in the parent.  In other words, @code{(aref @var{char-table} @var{c})} returns the value from the parent of @var{char-table} if @var{char-table} itself specifies @code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T175529Z">
        <seg>Une char-table peut avoir un @dfn{parent} qui est une autre char-table. Si elle en a un, alors quand la char-table spécifie @code{nil} pour un caractère particulier @var{c}, elle hérite de la valeur spécifiée dans la char-table parente. Autrement dit, @code{(aref char-table c)} retourne la valeur de la char-table parente si @var{char-table}spécifie @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A char-table can specify an element value for a single character code; it can also specify a value for an entire character set.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Nicolas Lecompte" changedate="20140428T192346Z">
        <seg>Une char-table peut définir la valeur d'un élément pour un seul code de caractère ; il peut aussi définir la valeur pour tout un ensemble de caractères.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A char-table is much like a vector, except that it is indexed by character codes.  Any valid character code, without modifiers, can be used as an index in a char-table.  You can access a char-table's elements with @code{aref} and @code{aset}, as with any array.  In addition, a char-table can have @dfn{extra slots} to hold additional data not associated with particular character codes.  Char-tables are constants when evaluated.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T105016Z">
        <seg>Une char-table ressemble à un vecteur mais elle est indexée par les codes de caractères. Tout code de caractère valide, sans modificateurs, peut être utilisé comme indice dans une char-table. On peut accéder aux éléments d'une char-table avec @code{aref} et @code{aset}, comme avec n'importe quel tableau. De plus, une char-table peut avoir des cases supplémentaires (@dfn{extra slots}) pour contenir des données supplémentaires qui ne sont pas associées à des codes de caractères particuliers. Les char-tables sont des constantes quand elles sont évaluées.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A definition says how a symbol will be used.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Une définition indique comment un symbole sera utilisé.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A description of an imaginary</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Une description d'une imaginaire</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A deterministic computer program cannot generate true random numbers.  For most purposes, @dfn{pseudo-random numbers} suffice.  A series of pseudo-random numbers is generated in a deterministic fashion.  The numbers are not truly random, but they have certain properties that mimic a random series.  For example, all possible values occur equally often in a pseudo-random series.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Un programme machine déterministe ne peut pas produire de véritables
nombres aléatoires. Dans la plupart des cas, @dfn{pseudo-randam
numbers} suffit. Une série de nombres pseudo-aléatoires est produite
d'une façon déterminée. Les nombres ne sont pas vraiment aléatoires,
mais ils ont certaines propriétés à imiter une série aléatoire. Par
exemple, toutes les valeurs possibles se produisent également souvent
dans une série pseudo-aléatoire.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A format specification is a sequence of characters beginning with a @samp{%}.  Thus, if there is a @samp{%d} in @var{string}, the @code{format} function replaces it with the printed representation of one of the values to be formatted (one of the arguments @var{objects}).  For example:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T211725Z">
        <seg>Une spécification de format est une suite de caractères commençant par un @samp{%}.  Ainsi, s'il existe un @samp{%d} dans @var{string}, la fonction @code{format} le remplace par la représentation affichée d'une des valeurs à formater (un des arguments de @var{objects}). Par exemple :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A function is a Lisp program</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Une fonction est un programme Lisp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A generic character stands for a character set, or a row of a character set; specifying the generic character as argument is equivalent to specifying the character set name.  @xref{Splitting Characters}, for a description of generic characters.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T105700Z">
        <seg>Un caractère générique représente un ensemble de caractères ou une rangée d'un ensemble de caractères ; spécifier le caractère générique comme argument est équivalent à spécifier le nom de l'ensemble de caractères. Pour une description des caractères génériques, @xref{Splitting Characters}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A generic character stands for a character set; specifying the generic character as argument is equivalent to specifying the character set name.  @xref{Splitting Characters}, for a description of generic characters.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T110359Z">
        <seg>Un caractère générique représente un ensemble de caractères ; spécifier le caractère générique comme argument est équivalent à spécifier le nom de l'ensemble de caractères. @xref{Splitting Characters} pour une description des caractères génériques.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A hash table is a very fast kind of lookup table, somewhat like an alist (@pxref{Association Lists}) in that it maps keys to corresponding values.  It differs from an alist in these ways:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T192005Z">
        <seg>Une table de hachage est une sorte de table de correspondance très rapide, un peu comme une liste d'association [alist] (@pxref{Association Lists}) du fait qu'elle lie les clés aux valeurs correspondantes. Elle diffère d'une liste d'associations sur les points suivants :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A list is a sequence of elements, but it is not a single primitive object; it is made of cons cells, one cell per element.  Finding the @var{n}th element requires looking through @var{n} cons cells, so elements farther from the beginning of the list take longer to access.  But it is possible to add elements to the list, or remove elements.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T100141Z">
        <seg>Une liste est une suite d'éléments mais n'est pas un objet primitif unique. La liste est constituée de cellules cons avec une seule cellule par élément. Pour trouver l'élément @var{n}, il faut passer les @var{n} cellules avant. Donc plus un élément est loin du début de la liste, plus on mettra de temps à y accéder. Toutefois, il est possible d'ajouter ou d'enlever des éléments à la liste.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A more powerful function is @code{store-substring}:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T134420Z">
        <seg>Il existe une fonction plus puissante : @code{store-substring}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A negative number counts from the end of the string, so that @minus{}1 signifies the index of the last character of the string.  For example:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T121743Z">
        <seg>Un nombre négatif compte à partir de la fin de la chaîne, de telle sorte que -1 représente l'indice du dernier caractère de la chaîne. Par exemple:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A non-@code{nil} value of this variable turns on the automatic expansion of abbrevs when their abbreviations are inserted into a buffer.  If the value is @code{nil}, abbrevs may be defined, but they are not expanded automatically.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicoals" changedate="20140308T061305Z">
        <seg>Une valeur non-@code{nil} de cette variable active l'expansion
automatique des abréviations quand elles sont insérées dans un
tampon. Si la valeur est @code{nil}, des abréviations peuvent être
définies, mais elles ne sont pas développées automatiquement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A specification can have a @dfn{width}, which is a signed decimal number between the @samp{%} and the specification character.  If the printed representation of the object contains fewer characters than this width, @code{format} extends it with padding.  The padding goes on the left if the width is positive (or starts with zero) and on the right if the width is negative.  The padding character is normally a space, but it's @samp{0} if the width starts with a zero.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212202Z">
        <seg>Une spécification peut avoir une @dfn{largeur}, qui est un nombre décimal précisé entre @samp{%} et le caractère de spécification.  Si la représentation affichée de l'objet contient moins de caractères que cette largeur, @code{format} la rallonge en faisant du bourrage. Le bourrage va à gauche si la largeur est positive (ou commence par zéro) et à droite si la largeur est négative. Le caractère de bourrage est normalement un espace, mais ce sera @samp{0} si la largeur commence par un zéro.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A string in Emacs Lisp is an array that contains an ordered sequence of characters.  Strings are used as names of symbols, buffers, and files; to send messages to users; to hold text being copied between buffers; and for many other purposes.  Because strings are so important, Emacs Lisp has many functions expressly for manipulating them.  Emacs Lisp programs use strings more often than individual characters.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T202803Z">
        <seg>Une chaîne en Lisp Emacs est un tableau qui contient une suite ordonnée de caractères. Les chaînes sont utilisées comme noms de symboles, de mémoires tampons et de fichiers ; pour envoyer des messages aux utilisateurs ; pour contenir le texte copié entre les mémoires tampons ; et pour beaucoup d’autres choses. Puisque les chaînes sont si importantes, Lisp Emacs possède de nombreuses fonctions permettant de les manipuler. Les programmes Lisp Emacs utilisent  plus souvent les chaînes que les caractères individuels.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>A vector, like a string or a number, is considered a constant for evaluation: the result of evaluating it is the same vector.  This does not evaluate or even examine the elements of the vector.  @xref{Self-Evaluating Forms}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T103718Z">
        <seg>Un vecteur, comme une chaîne de caractères ou un nombre, est considéré constant pour l'évaluation : le résultat de l'évaluation est le même vecteur. Les éléments du vecteur ne sont pas évalués, ni même examinés. @xref{Self-Evaluating Forms}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Abbrev Expansion</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Expansions d'abréviations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Abbrev Files</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Fichiers d'abréviations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Abbrev Mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Mode abbrev</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Abbrev Tables</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Tables d'abréviations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Abbrev mode is a minor mode controlled by the value of the variable @code{abbrev-mode}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le mode abbrev est un mode mineur contrôlé par la valeur de la
variable @code{abbrev-mode}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Abbrev tables used by various major modes.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Tables d'abréviations employées par divers modes majeurs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Abbrevs</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Abbrevs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Abbrevs And Abbrev Expansion</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Abréviations et abréviations expansions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Abbrevs and Abbrev Expansion</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Abbrevs et expansion d'abbrev</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Accessing files.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025458Z">
        <seg>Accès aux fichiers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Acknowledgements</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Remerciements</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Adding to the definition of a function.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025358Z">
        <seg>Ajout à la définition d'une fonction.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Advice and coding conventions for Emacs Lisp.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Conseils et règles de codage pour le Lisp d'Emacs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>After Emacs reads your init file, it initializes @code{auto-save-list-file-name} (if you have not already set it non-@code{nil}) based on this prefix, adding the host name and process ID.  If you set this to @code{nil} in your init file, then Emacs does not initialize @code{auto-save-list-file-name}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicoals" changedate="20140307T211732Z">
        <seg>Après qu'Emacs ait lu votre fichier de configuration, il initialise @code{auto-save-list-file-name} (si vous ne l'avez pas déjà réglé en non-@code{nil}) sur la base de ce préfixe, en ajoutant le nom d'hôte et l'ID de processus. Si vous réglez cette option en @code{nil} dans votre fichier de configuration, Emacs n'initialisera pas @code{auto-save-list-file-name}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>After defining @var{name} in this way, you can use it as the @var{test} argument in @code{make-hash-table}.  When you do that, the hash table will use @var{test-fn} to compare key values, and @var{hash-fn} to compute a ``hash code'' from a key value.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T144015Z">
        <seg>Après avoir défini @var{name} de cette façon, on peut l'utiliser en argument @var{test} dans @code{make-hash-table}. Quand on fait cela, la table de hachage utilise @var{test-fn} pour comparer les valeurs des clés, et @var{hash-fn} pour calculer un``code de hachage'' à partir d'une valeur de clé.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>All four kinds of array share these characteristics:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T152437Z">
        <seg>Ces quatre types de tableaux partagent les caractéristiques suivantes :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>All of these functions except @code{%} return a floating point value if any argument is floating.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Toutes ces fonctions, à part @code{%}, retourne une valeur à virgule
flottante si au moins un argument est une valeur à virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>All the specification characters allow an optional @dfn{precision} before the character (after the width, if present).  The precision is a decimal-point @samp{.} followed by a digit-string.  For the floating-point specifications (@samp{%e}, @samp{%f}, @samp{%g}), the precision specifies how many decimal places to show; if zero, the decimal-point itself is also omitted.  For @samp{%s} and @samp{%S}, the precision truncates the string to the given width, so @samp{%.3s} shows only the first three characters of the representation for @var{object}.  Precision has no effect for other specification characters.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212339Z">
        <seg>Tous les caractères de spécification permettent une option @dfn{precision} avant le caractère (après la largeur, s'il y en a une). La précision est un  point décimal @samp{.} suivi par digit-string. Pour les spécifications à virgule flottante (@samp{%e}, @samp{%f}, @samp{%g}), la précision spécifie le nombre de décimales à afficher; si c'est zéro, le point décimal est lui aussi supprimé. Pour @samp{%s} et @samp{%S}, la précision tronque la chaîne à la largeur donnée, donc @samp{%.3s} affiche seulement les trois premiers caractères de la représentation de @var{object}.  L'option précision n'a pas d'effet sur les autres caractères de spécification.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Altering the contents of an existing string.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T102330Z">
        <seg>Changer le contenu d'une chaîne existante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>An @code{arith-error} results if @var{divisor} is 0.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Un @code{arith-error} est généré quand @var{divisor} est 0.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>An @dfn{array} is a single primitive object that has a slot for each of its elements.  All the elements are accessible in constant time, but the length of an existing array cannot be changed.  Strings, vectors, char-tables and bool-vectors are the four types of arrays.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T095758Z">
        <seg>Un tableau @dfn{array} est un objet primitif unique qui dispose d'une case pour chacun de ses éléments. Tous les éléments sont accessibles tout le temps mais la longueur d'un tableau existant peut être changée. Les chaînes de caractères, les vecteurs, les tables de caractères et les vecteurs-booléens représentent les quatre types de tableaux.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>An @dfn{array} object has slots that hold a number of other Lisp objects, called the elements of the array.  Any element of an array may be accessed in constant time.  In contrast, an element of a list requires access time that is proportional to the position of the element in the list.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T152424Z">
        <seg>Un objet @dfn{array} possède des cases qui contiennent un certain nombre d'autres objets Lisp, appelés les éléments du tableau. Tout élément d'un tableau a le même temps d'accès. En revanche, un élément d'une liste nécessite un temps d'accès proportionnel à la position de l'élément dans la liste.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>An abbrev table is represented as an obarray containing a symbol for each abbreviation.  The symbol's name is the abbreviation; its value is the expansion; its function definition is the hook function to do the expansion (@pxref{Defining Abbrevs}); its property list cell typically contains the use count, the number of times the abbreviation has been expanded.  Alternatively, the use count is on the @code{count} property and the system-abbrev flag is on the @code{system-type} property.  Abbrevs with a non-@code{nil} @code{system-type} property are called ``system'' abbrevs.  They are usually defined by modes or packages, instead of by the user, and are treated specially in certain respects.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140424T015013Z">
        <seg>Une table d'abréviation est représentée par une liste contenant
un symbole pour chaque abréviation. Le nom du symbole est
l'abréviation ; sa valeur est l'expansion ; sa définition de fonction
est la fonction hook devant faire l'expansion (@pxref{Defining
Abbrevs}) ; sa cellule de liste de propriété contient typiquement le
compteur d'utilisation, le nombre de fois que l'abréviation a été
développée. Alternativement, le compteur d'utilisation pointe vers la
propriété @code{count} et le drapeau de system-abbrev pointe vers la
propriété @code{system-type}. Les abréviations avec la propriété
non-@code{nil} @code{system-type} s'appellent les abréviations de
« système ». Elles sont habituellement définies par des modes ou des
paquets, non par l'utilisateur, et traitées spécialement à certains
égards.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>An abbreviation or @dfn{abbrev} is a string of characters that may be expanded to a longer string.  The user can insert the abbrev string and find it replaced automatically with the expansion of the abbrev.  This saves typing.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Une abréviation ou @dfn{abbrev} est une chaîne de caractères qui peut
être développée dans une chaîne plus longue. L'utilisateur peut
insérer la chaîne d'abréviation et se rendre compte qu'elle a été
remplacée automatiquement avec l'expansion de l'abréviation. Ceci
améliore la dactylographie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Any argument whose name contains the name of a type (e.g., @var{integer}, @var{integer1} or @var{buffer}) is expected to be of that type.  A plural of a type (such as @var{buffers}) often means a list of objects of that type.  Arguments named @var{object} may be of any type.  (@xref{Lisp Data Types}, for a list of Emacs object types.)  Arguments with other sorts of names (e.g., @var{new-file}) are discussed specifically in the description of the function.  In some sections, features common to the arguments of several functions are described at the beginning.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Tout argument dont le nom contient le nom d'un type (par exemple,
@var{integer}, @var{integer1} ou @var{buffer}) est prévu pour être de
ce type. Un pluriel d'un type (tel que @var{buffers}) signifie souvent
une liste d'objets de ce type. Les arguments appelés @var{object}
peuvent être de n'importe quel type. (@xref{Lisp Data Types}, pour une
liste des types d'objet d'Emacs.) Des arguments avec d'autres sortes
de noms (par exemple, @var{new-file}) sont discutés spécialement dans
la description de la fonction. Dans quelques sections, des dispositifs
communs aux arguments de plusieurs fonctions sont décrits du
commencement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Any other format character results in an @samp{Invalid format operation} error.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212109Z">
        <seg>Tous les autres caractères de format provoquent une erreur @samp{Invalid format operation}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Any two distinct Lisp objects are ``different'' as keys.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T141304Z">
        <seg>Deux objets Lisp distincts, quels qu'ils soient, sont ``différents'' en tant que clés.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Appendices</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Annexes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Arithmetic Operations</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Opérations arithmétiques</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Array Functions</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T174203Z">
        <seg>Fonctions pour les tableaux</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Arrays</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T174113Z">
        <seg>Tableaux</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Arrays in Lisp, like arrays in most languages, are blocks of memory whose elements can be accessed in constant time.  A @dfn{vector} is a general-purpose array of specified length; its elements can be any Lisp objects.  (By contrast, a string can hold only characters as elements.)  Vectors in Emacs are used for obarrays (vectors of symbols), and as part of keymaps (vectors of commands).  They are also used internally as part of the representation of a byte-compiled function; if you print such a function, you will see a vector in it.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T174442Z">
        <seg>Les tableaux en Lisp, comme dans la majorité des langages, sont des blocs de mémoire dont les éléments ont tous le même temps d'accès. Un @dfn{vector} est un tableau universel d'une longueur donnée ; ses éléments peuvent être n'importe quel objet Lisp. (Par opposition, une chaîne de caractères peut seulement contenir des éléments de type caractère.) Dans Emacs, les vecteurs  sont utilisés pour  les obarrays (vecteurs de symboles), et comme partie de mappages claviers (vecteurs de commandes). Ils sont aussi utilisés en interne comme une partie de la représentation en octet de code ; si vous affichez une telle fonction, vous verrez un vecteur à l'intérieur.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>As a special case, when @var{separators} is @code{nil} (or omitted), null strings are always omitted from the result.  Thus:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T133322Z">
        <seg>Un cas particulier, quand @var{separators} est @code{nil} (ou non renseigné), les chaînes vides sont toujours omises du résultat. Par conséquent :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>As far as the Lisp reader is concerned, @samp{()} and @samp{nil} are identical: they stand for the same object, the symbol @code{nil}.  The different ways of writing the symbol are intended entirely for human readers.  After the Lisp reader has read either @samp{()} or @samp{nil}, there is no way to determine which representation was actually written by the programmer.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030122Z">
        <seg>En ce qui concerne le lecteur Lisp, @samp{()} et @samp{nil} sont
identiques : ils représentent le même objet, le symbole
@code{nil}. Les différentes manières d'écrire le symbole sont prévues
entièrement pour les lecteurs humains. Après que le lecteur Lisp ait
lu l'un ou l'autre, @samp{()} ou @samp{nil}, il n'y a aucune manière
de déterminer quelle représentation a été écrite réellement par le
programmeur.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>As the example illustrates, shifting one place to the right divides the value of a positive integer by two, rounding downward.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Comme l'exemple le montre, le décalage d'une place vers la droite
divise la valeur d'un nombre entier positif par deux, arrondissant
vers le bas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>As the examples illustrate, shifting the pattern of bits one place to the left produces a number that is twice the value of the previous number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Comme ces exemples le montrent, lorsqu'on décale la combinaison de
chiffres binaires d'une place vers la gauche, on produit un nombre qui
est le double de la valeur du précédent nombre.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>As you use this manual, we ask that you mark pages with corrections so you can later look them up and send them to us.  If you think of a simple, real-life example for a function or group of functions, please make an effort to write it up and send it in.  Please reference any comments to the chapter name, section name, and function name, as appropriate, since page numbers and chapter and section numbers will change and we may have trouble finding the text you are talking about.  Also state the number of the edition you are criticizing.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Quand vous employez ce manuel, nous vous demandons de marquer
les pages avec les corrections ainsi vous pouvez plus tard les
rechercher et nous les envoyer. Si vous pensez à un exemple simple et
réel pour une fonction ou au groupe de fonctions, merci de faire
l'effort de l'écrire et de l'envoyer. Veuillez mettre en référence
tous les commentaires au nom de chapitre, nom de section, et le nom de
fonction, comme approprié, puisque les numéros de page et les nombres
de chapitre et de section changeront et nous aurions des problèmes
pour trouver le texte dont vous parlez. Énoncer en outre le numéro de
l'édition que vous critiquez.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>As you use this manual, we ask that you send corrections as soon as you find them.  If you think of a simple, real life example for a function or group of functions, please make an effort to write it up and send it in.  Please reference any comments to the node name and function or variable name, as appropriate.  Also state the number of the edition you are criticizing.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025951Z">
        <seg>Quand vous vous servez de ce manuel, nous vous demandons d'envoyer les
corrections dès que vous en trouverez. Si vous pensez à un exemple
simple et réel pour une fonction ou au groupe de fonctions, merci de
faire l'effort de l'écrire et de l'envoyer. Veuillez mettre en
référence tous les commentaires du nom du nœud et la fonction ou le
nom de la variable, comme approprié. Énoncer en outre le numéro de
l'édition que vous critiquez.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>At present, each integer value has a unique Lisp object in Emacs Lisp.  Therefore, @code{eq} is equivalent to @code{=} where integers are concerned.  It is sometimes convenient to use @code{eq} for comparing an unknown value with an integer, because @code{eq} does not report an error if the unknown value is not a number---it accepts arguments of any type.  By contrast, @code{=} signals an error if the arguments are not numbers or markers.  However, it is a good idea to use @code{=} if you can, even for comparing integers, just in case we change the representation of integers in a future Emacs version.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Actuellement, chaque valeur de nombre entier a un objet unique de Lisp
dans Emacs Lisp. Par conséquent, @code{eq} est équivalent au @code{=}
quand des nombres entiers sont concernés. Il est parfois commode
d'employer @code{eq} pour comparer une valeur inconnue à un nombre
entier, parce que @code{eq} ne rapporte pas d'erreur si la valeur
inconnue n'est pas un nombre---il accepte des arguments de n'importe
quel type---. En revanche, @code{=} signale une erreur si les
arguments ne sont pas des nombres ou des marqueurs. Cependant, c'est
une bonne idée d'employer @code{=} si vous le pouvez, même pour
comparer des nombres entiers, juste au cas où nous changerions la
représentation des nombres entiers dans une future version d'Emacs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Basic properties of strings and characters.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T202818Z">
        <seg>Propriétés fondamentales des chaînes et des caractères.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Basics: String Basics</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T101600Z">
        <seg>Notions de base sur les chaînes et les caractères</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Because Emacs Lisp is designed for use in an editor, it has special features for scanning and parsing text as well as features for handling files, buffers, displays, subprocesses, and so on.  Emacs Lisp is closely integrated with the editing facilities; thus, editing commands are functions that can also conveniently be called from Lisp programs, and parameters for customization are ordinary Lisp variables.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicoals" changedate="20140307T213234Z">
        <seg>Puisque Emacs Lisp est conçu pour l'utilisation dans un éditeur, il dispose
de caractéristiques spécifiques pour le balayage et l'analyse de texte aussi bien
que des dispositifs pour manipuler des fichiers, des tampons, des affichages,
des sous-processus, et ainsi de suite. Emacs Lisp est intégré avec
de nombreuses fonctions d'édition ; ainsi, les commandes d'édition sont
des fonctions qui peuvent également être commodément appelées par des programmes
Lisp, et les paramètres de configuration sont des variables Lisp
ordinaires.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Because the symbols used for abbrevs are not interned in the usual obarray, they will never appear as the result of reading a Lisp expression; in fact, normally they are never used except by the code that handles abbrevs.  Therefore, it is safe to use them in an extremely nonstandard way.  @xref{Creating Symbols}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T121426Z">
        <seg>Puisque les symboles utilisés pour les abréviations ne sont pas
compris dans la liste habituelle, ils n'apparaîtront jamais comme le
résultat de lecture d'une expression Lisp ; en fait, normalement ils
ne sont jamais utilisés excepté par le code qui traite ces
abréviations. Par conséquent, il est prudent de les utiliser d'une
manière extrêmement non-standard. @xref{Création de symboles}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Because this symbol is the variable which holds the name of the file being visited in the current buffer, the value cell contents we see are the name of the source file of this chapter of the Emacs Lisp Manual.  The property list cell contains the list @code{(variable-documentation 29529)} which tells the documentation functions where to find the documentation string for the variable @code{buffer-file-name} in the @file{DOC-@var{version}} file.  (29529 is the offset from the beginning of the @file{DOC-@var{version}} file to where that documentation string begins---see @ref{Documentation Basics}.)  The function cell contains the function for returning the name of the file.  @code{buffer-file-name} names a primitive function, which has no read syntax and prints in hash notation (@pxref{Primitive Function Type}).  A symbol naming a function written in Lisp would have a lambda expression (or a byte-code object) in this cell.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T150130Z">
        <seg>Comme le symbole est la variable qui contient le nom du fichier passé dans le tampon courant, les contenus de la cellule de valeur que l'on voit sont le nom du fichier source de ce chapitre du manuel Lisp Emacs. La cellule de liste de propriétés contient la liste @code{(variable-documentation 29529)} qui indique aux fonctions de documentation où trouver la chaîne de caractères de documentation pour la variable @code{buffer-file-name} dans le fichier @file{DOC-@var{version}}. (29529 est l'écart entre le début du fichier @file{DOC-@var{version}} et où la chaîne de caractères de documentation de la fonction commence --- voir @ref{Documentation Basics}.) La cellule de fonction contient la fonction qui va retourner le nom du fichier. @code{buffer-file-name} appelle une fonction primitive qui n'a pas de syntaxe de lecture et qui s'affiche en notation de hachage (@pxref{Primitive Function Type}). Un symbole appelant une fonction écrite en Lisp aurait une expression lambda (ou un objet octet-compilé) dans cette cellule.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Bil Lewis,</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Bil Lewis,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Bitwise Operations</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Opérations de bits</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Bitwise Operations on Integers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Opérations de bits sur les entiers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Bool-Vectors</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T174505Z">
        <seg>Vecteurs-booléens</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Bool-vectors</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Nicolas Lecompte" changedate="20140430T201618Z">
        <seg>Vecteurs-booléens</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Buffer Text Notation</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Notation des textes de tampon</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>But we recommend @code{copy-sequence} for this purpose (@pxref{Sequence Functions}).</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T122616Z">
        <seg>Mais on recommande @code{copy-sequence} pour faire cela (voir la section @pxref{Fonctions sur les suites}).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>By contrast, for an array of keyboard input characters (such as a key sequence), a vector may be necessary, because many keyboard input characters are outside the range that will fit in a string.  @xref{Key Sequence Input}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T152857Z">
        <seg>En revanche, pour un tableau de caractères d'entrée clavier (comme une séquence de clés), un vecteur peut être nécessaire car beaucoup de caractères d'entrée clavier sont en dehors de la plage de ceux qui peuvent rentrer dans un tableau de type string. @xref{Key Sequence Input}. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>C-]</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C-]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>C-c</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C-c</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>C-h</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C-h</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>C-x</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C-x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>C-x 4</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C-x 4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>C-x 5</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C-x 5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>C-x 6</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C-x 6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>C-x @key{RET}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C-x @key{RET}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>C-x v</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C-x v</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Case Conversion</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T102858Z">
        <seg>Conversion de casse</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Case Conversion in Lisp</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T193411Z">
        <seg>Conversion de la casse en Lisp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Case Tables</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T204347Z">
        <seg>Le tableau de casse</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Case conversion functions.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T102922Z">
        <seg>Fonctions de conversion de casse.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Caveats</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Avertissements</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Certain format specifications require values of particular types.  If you supply a value that doesn't fit the requirements, an error is signaled.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T154434Z">
        <seg>Certaines spécifications de format requièrent des valeurs de types particuliers. Si vous fournissez une valeur qui ne correspond pas aux exigences, une erreur est signalée.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Characteristics of arrays in Emacs Lisp.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T174136Z">
        <seg>Caractéristiques des tableaux en Emacs Lisp.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Characters are represented in Emacs Lisp as integers; whether an integer is a character or not is determined only by how it is used.  Thus, strings really contain integers.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T103253Z">
        <seg>Les caractères sont représentés par des entiers dans Emacs Lisp ; un entier peut être un caractère ou pas, cela dépend seulement de la façon dont il est utilisé. Par conséquent, les chaînes de caractères sont vraiment constituées d’entiers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Command, macro, and special form descriptions have the same format, but the word `Function' is replaced by `Command', `Macro', or `Special Form', respectively.  Commands are simply functions that may be called interactively; macros process their arguments differently from functions (the arguments are not evaluated), but are presented the same way.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Commande, macro, et descriptions de formulaire spécial ont le même
format, mais le mot `Function' est remplacé par `Command', `Macro', ou
`Special Form', respectivement. Les commandes sont simplement des
fonctions qui peuvent s'appeler interactivement; les macros traitent
leurs arguments différemment des fonctions (les arguments ne sont pas
évalués), mais sont présentés la même manière.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Common Lisp</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Common Lisp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Comparing characters or strings.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T102455Z">
        <seg>Comparer des caractères ou des chaînes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Comparison of Characters and Strings</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T135248Z">
        <seg>Comparaison des caractères et des chaînes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Comparison of Numbers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Comparaison des nombres</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Compilation makes programs run faster.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La compilation rend les programmes plus rapides.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Conditionals</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Conditions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Conditionals, loops, nonlocal exits.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Conditions, boucles et sorties non locales.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Contrast this function with @code{buffer-substring} (@pxref{Buffer Contents}), which returns a string containing a portion of the text in the current buffer.  The beginning of a string is at index 0, but the beginning of a buffer is at index 1.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T210352Z">
        <seg>Comparez cette fonction avec @code{buffer-substring} (voir la section @pxref{Examining Buffer Contents}), qui retourne une chaîne contenant une partie du texte de la mémoire tampon en cours. Le début d'une chaîne est à l'indice 0, mais le début d'une mémoire tampon est à l'indice 1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Control-X-prefix</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Control-X-prefix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Controlling expansion; expansion subroutines.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T121426Z">
        <seg>Contrôler l'expansion ; sous-programmes d'expansions.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Conventions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Conventions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Conversion of Characters and Strings</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T140927Z">
        <seg>Conversion des caractères et des chaînes de caractères</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Converting Lisp objects to text and back.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Convertir des objets Lisp en texte et inversement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Converting float to integer and vice versa.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Convertir des nombres à virgule flottante en nombres entiers et vice-versa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Converting to and from characters and strings.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T102702Z">
        <seg>Convertir en caractères et en chaînes et inversement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Copyright (C) 2000,2001,2002  Free Software Foundation, Inc.
51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Copyright (C) 2000,2001,2002  Free Software Foundation, Inc.
51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Corrections were supplied by Karl Berry, Jim Blandy, Bard Bloom, Stephane Boucher, David Boyes, Alan Carroll, Richard Davis, Lawrence R. Dodd, Peter Doornbosch, David A. Duff, Chris Eich, Beverly Erlebacher, David Eckelkamp, Ralf Fassel, Eirik Fuller, Stephen Gildea, Bob Glickstein, Eric Hanchrow, George Hartzell, Nathan Hess, Masayuki Ida, Dan Jacobson, Jak Kirman, Bob Knighten, Frederick M. Korz, Joe Lammens, Glenn M. Lewis, K. Richard Magill, Brian Marick, Roland McGrath, Skip Montanaro, John Gardiner Myers, Thomas A. Peterson, Francesco Potorti, Friedrich Pukelsheim, Arnold D. Robbins, Raul Rockwell, Per Starb@"ack, Shinichirou Sugou, Kimmo Suominen, Edward Tharp, Bill Trost, Rickard Westman, Jean White, Matthew Wilding, Carl Witty, Dale Worley, Rusty Wright, and David D. Zuhn.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les corrections ont été fournies par Karl Berry, Jim Blandy, Bard
Bloom, Stephane Boucher, David Boyes, Alan Carroll, Richard Davis,
Lawrence R. Dodd, Peter Doornbosch, David A. Duff, Chris Eich, Beverly
Erlebacher, David Eckelkamp, Ralf Fassel, Eirik Fuller, Stephen
Gildea, Bob Glickstein, Eric Hanchrow, George Hartzell, Nathan Hess,
Masayuki Ida, Dan Jacobson, Jak Kirman, Bob Knighten, Frederick
M. Korz, Joe Lammens, Glenn M. Lewis, K. Richard Magill, Brian Marick,
Roland McGrath, Skip Montanaro, John Gardiner Myers, Thomas
A. Peterson, Francesco Potorti, Friedrich Pukelsheim, Arnold
D. Robbins, Raul Rockwell, Per Starbäck, Shinichirou Sugou, Kimmo
Suominen, Edward Tharp, Bill Trost, Rickard Westman, Jean White,
Matthew Wilding, Carl Witty, Dale Worley, Rusty Wright, et David
D. Zuhn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Creating Hash Tables</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T213427Z">
        <seg>Création de tables de hachage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Creating Strings</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T102149Z">
        <seg>Créer des chaînes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Creating Symbols</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Créer des symboles</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Creating and working with abbrev tables.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Créer et travailler avec des tables d'abréviations.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Customizing case conversion.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T103013Z">
        <seg>Personnalisation de la conversion de casse.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Dan LaLiberte,</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Dan LaLiberte,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Data types of objects in Emacs Lisp.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Types de données des objets dans Emacs Lisp.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Defining Abbrevs</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Définir des abréviations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Defining Hash Comparisons</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140505T194248Z">
        <seg>Définition des comparaisons de hachage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Defining Symbols</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Définir des symboles</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Defining major and minor modes.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Définition de modes majeurs et mineurs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Defining the bindings from keys to commands.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Définition de l'association des touches à des commandes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Definition of mapatoms</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Définition de mapatoms</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Definition of sentence-end-double-space</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Définition de sentence-end-double-space</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Definitions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Definitions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Display</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140216T051604Z">
        <seg>Affichage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Documentation</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Documentation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Dozens of Lisp implementations have been built over the years, each with its own idiosyncrasies.  Many of them were inspired by Maclisp, which was written in the 1960s at MIT's Project MAC.  Eventually the implementors of the descendants of Maclisp came together and developed a standard for Lisp systems, called Common Lisp.  In the meantime, Gerry Sussman and Guy Steele at MIT developed a simplified but very powerful dialect of Lisp, called Scheme.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Des douzaines de réalisations de Lisp ont été établies au cours des
années, chacune avec ses propres particularités. Bon nombre d'entre
elles ont été inspirées par Maclisp, qui a été écrit dans les années
60 au MIT's Project MAC. Par la suite les programmeurs des descendants
de Maclisp se sont réunis et ont développé une norme pour des systèmes
Lisp, appelée Common Lisp. En attendant, Gerry Sussman et Guy Steele
au MIT ont développé un dialecte simplifié mais très puissant de Lisp,
appelé Scheme.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>ESC-prefix</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>ESC-prefix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Each char-table has a @dfn{subtype} which is a symbol.  The subtype has two purposes: to distinguish char-tables meant for different uses, and to control the number of extra slots.  For example, display tables are char-tables with @code{display-table} as the subtype, and syntax tables are char-tables with @code{syntax-table} as the subtype.  A valid subtype must have a @code{char-table-extra-slots} property which is an integer between 0 and 10.  This integer specifies the number of @dfn{extra slots} in the char-table.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T190601Z">
        <seg>Chaque char-table possède un sous-type (@dfn{subtype}) qui est un symbole. Le sous-type a deux buts : différencier les char-tables créées pour des usages différents et vérifier le nombre de cases supplémentaires. Par exemple, les tables d'affichage sont des char-tables avec @code{display-table} comme sous-type. Et les tables de syntaxe sont des char-tables avec @code{syntax-table} comme sous-type. Pour être valide, un sous-type doit avoir une propriété @code{char-table-extra-slots} qui soit un entier compris entre 0 et 10. Cet entier spécifie le nombre de cases supplémentaires (@dfn{extra slots} dans la char-table.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Each symbol has a property list</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Chaque symbole a une liste de propriétés</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Each symbol has four components (or ``cells''), each of which references another object:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T205512Z">
        <seg>Chaque symbole a quatre composants (ou ``cellules''), chacun référençant un autre objet :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Elisp: (elisp)</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T120726Z">
        <seg>Elisp : (elisp)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Emacs</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Emacs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Emacs Display</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140216T051610Z">
        <seg>Affichage Emacs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Emacs Lisp is descended from Maclisp.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Emacs Lisp descend de Maclisp.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Emacs Lisp is not at all influenced by Scheme; but the GNU project has an implementation of Scheme, called Guile.  We use Guile in all new GNU software that calls for extensibility.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Emacs Lisp n'est pas du tout influencé par Scheme; mais le projet GNU
a une implémentation, appelée Guile. Nous employons Guile dans tout
nouveau logiciel de GNU qui réclame l'extensibilité.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Emacs Lisp provides a general-purpose hash table data type, along with a series of functions for operating on them.  Hash tables have no read syntax, and print in hash notation, like this:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T212830Z">
        <seg>Lisp Emacs fournit un type de données universel de table de hachage avec une série de fonctions pour les manipuler. Les tables de hachage n'ont pas de syntaxe de lecture, et l'affichage d'une notation de hachage est le suivant :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Emacs Lisp provides the traditional four arithmetic operations: addition, subtraction, multiplication, and division.  Remainder and modulus functions supplement the division functions.  The functions to add or subtract 1 are provided because they are traditional in Lisp and commonly used.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031949Z">
        <seg>Emacs Lisp fournit les quatre opérations arithmétiques
traditionnelles : addition, soustraction, multiplication et division.
Les fonctions de reste et de modulo complètent les fonctions de
division. Les fonctions additionner ou soustraire 1 sont fournies parce
qu'elles sont traditionnelles en Lisp et utilisées généralement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Emacs defines four types of array, all one-dimensional: @dfn{strings}, @dfn{vectors}, @dfn{bool-vectors} and @dfn{char-tables}.  A vector is a general array; its elements can be any Lisp objects.  A string is a specialized array; its elements must be characters.  Each type of array has its own read syntax.  @xref{String Type}, and @ref{Vector Type}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140505T200453Z">
        <seg>Emacs définit quatre types de tableaux, tous à une dimension : @dfn{strings}, @dfn{vectors}, @dfn{bool-vectors} et @dfn{char-tables}. Un vecteur est un tableau général ; ses éléments peuvent être n'importe quels objets Lisp. Un tableau de type string est un tableau particulier ; ses éléments doivent être des caractères. Chaque type de tableau a sa propre syntaxe de lecture. @xref{String Type} et @ref{Vector Type}. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Empty matches do count, except that @code{split-string} will not look for a final empty match when it already reached the end of the string using a non-empty match or when @var{string} is empty:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T133849Z">
        <seg>Les correspondances vides comptent bien, sauf que @code{split-string} ne cherchera pas une correspondance vide lorsqu'elle a déjà atteint la fin de la chaîne en utilisant un correspondance non vide ou lorsque @var{string} est vide:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Equality and inequality predicates.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Attributs d'égalité et d'inégalité.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Error Messages</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Messages d'erreur</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Evaluation</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T024956Z">
        <seg>Évaluation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Evaluation Notation</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Notation d'évaluation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Examples in this manual indicate printed text with @samp{@print{}}, irrespective of where that text goes.  The value returned by evaluating the form (here @code{bar}) follows on a separate line with @samp{@result{}}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les exemples de ce manuel indiquent le texte affiché avec
@samp{@print{}}, indépendamment de la destination du texte. La valeur
retournée par l'évaluation du formulaire (ici @code{bar}) suit sur une
ligne séparée avec @samp{@result{}}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Examples of Lisp code are formatted like this: @code{(list 1 2 3)}.  Names that represent metasyntactic variables, or arguments to a function being described, are formatted like this: @var{first-number}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T120331Z">
        <seg>Des exemples du code de Lisp sont composés comme ceci : @code{(list 1
2 3)}. Des noms qui représentent des variables, ou des arguments à une
fonction décrite, sont composés comme ceci : @var{first-number}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Expansion: Abbrev Expansion</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T120331Z">
        <seg>Expansion : Expansions d'abréviations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Explanation of terms we use in this manual.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Explication des termes que nous employons en ce manuel.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Explicitly rounding floating point numbers.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Arrondir explicitement les nombres à virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Files: Abbrev Files</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T120331Z">
        <seg>Fichiers : Fichiers d'abréviations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Flaws and a request for help.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Erreurs et demande d'aide.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Float Basics</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031545Z">
        <seg>Introduction aux nombres à virgule flottante</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Floating Point Basics</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031611Z">
        <seg>Introduction aux nombres à virgule flottante</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Floating point numbers are useful for representing numbers that are not integral.  The precise range of floating point numbers is machine-specific; it is the same as the range of the C data type @code{double} on the machine you are using.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031637Z">
        <seg>Les nombres à virgule flottante sont utiles pour la représentation des
nombres qui ne sont pas intégraux. Le champ précis des nombres à
virgule flottante est propre à la machine ; c'est identique au champ
du type de données de C @code{double} sur la machine que vous
employée.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>For any two integers @var{dividend} and @var{divisor},</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Pour deux nombres entiers quelconques @var{dividend} et @var{divisor},</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>For any two numbers @var{dividend} and @var{divisor},</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Pour deux nombres quelconques @var{dividend} et @var{divisor},</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>For example, using 4-bit binary numbers, the ``logical and'' of 13 and 12 is 12: 1101 combined with 1100 produces 1100.  In both the binary numbers, the leftmost two bits are set (i.e., they are 1's), so the leftmost two bits of the returned value are set.  However, for the rightmost two bits, each is zero in at least one of the arguments, so the rightmost two bits of the returned value are 0's.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140424T015013Z">
        <seg>Par exemple, en utilisant des nombres binaires de 4 bits, le « et
logique » de 13 et 12 est 12 : 1101 combiné avec 1100 produit 1100.
Dans les deux nombres binaires, les deux bits à l'extrême gauche sont
placés (c.-à-d., ils sont à 1), ainsi les deux bits à l'extrême gauche
de la valeur retournée sont placés. Cependant, pour les deux bits à
l'extrême droite, chacun est à zéro dans au moins un des arguments,
ainsi les deux bits à l'extrême droite de la valeur retournée sont 0.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>For information about other concatenation functions, see the description of @code{mapconcat} in @ref{Mapping Functions}, @code{vconcat} in @ref{Vector Functions}, and @code{append} in @ref{Building Lists}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T104212Z">
        <seg>Pour plus d'information sur les autres fonctions de concaténation, regarder les descriptions de @code{mapconcat} dans @ref{Mapping Functions}, @code{vconcat} dans @ref{Functions for Vectors}, et @code{append} dans @ref{Building Cons Cells and Lists}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>For more information about general sequence and array predicates, see @ref{Sequences Arrays Vectors}, and @ref{Arrays}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T105331Z">
        <seg>Pour plus d’informations sur les prédicats généraux des suites et des tableaux, voir @xref{Sequences, Arrays, and Vectors}, et @xref{Arrays}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>For negative arguments, the remainder is in principle machine-dependent since the quotient is; but in practice, all known machines behave alike.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032056Z">
        <seg>Pour des arguments négatifs, le reste est en principe dépendant de la
machine puisque le quotient est variable ; mais dans la pratique,
toutes les machines connues se comportent de la même façon.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>For other concatenation functions, see @code{mapconcat} in @ref{Mapping Functions}, @code{concat} in @ref{Creating Strings}, and @code{append} in @ref{Building Lists}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T185351Z">
        <seg>Pour d'autres fonctions de concaténation, voir @code{mapconcat} dans @ref{Mapping Functions}, @code{concat} dans @ref{Creating Strings}, et @code{append} dans @ref{Building Lists}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>For purposes of evaluation, the array is a constant---in other words, it evaluates to itself.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T152551Z">
        <seg>Pour les besoins d'évaluation, le tableau est une constante, c'est-à-dire qu'il s'évalue lui-même.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>For some languages, upper and lower case letters are not in one-to-one correspondence.  There may be two different lower case letters with the same upper case equivalent.  In these cases, you need to specify the maps for both lower case and upper case.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T213117Z">
        <seg>Pour certaines langues, les lettres minuscules et majuscules ne sont pas en correspondance une-à-une. Il peut y avoir deux différentes lettres minuscules avec le même équivalent en majuscule. Dans ce cas, on doit spécifier le mappage à la fois pour les minuscules et pour les majuscules.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>For technical reasons, a unibyte and a multibyte string are @code{equal} if and only if they contain the same sequence of character codes and all these codes are either in the range 0 through 127 (@acronym{ASCII}) or 160 through 255 (@code{eight-bit-graphic}).  However, when a unibyte string gets converted to a multibyte string, all characters with codes in the range 160 through 255 get converted to characters with higher codes, whereas @acronym{ASCII} characters remain unchanged.  Thus, a unibyte string and its conversion to multibyte are only @code{equal} if the string is all @acronym{ASCII}.  Character codes 160 through 255 are not entirely proper in multibyte text, even though they can occur.  As a consequence, the situation where a unibyte and a multibyte string are @code{equal} without both being all @acronym{ASCII} is a technical oddity that very few Emacs Lisp programmers ever get confronted with.  @xref{Text Representations}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T135759Z">
        <seg>Pour des raisons techniques, une chaîne uni-octet et une chaîne multi-octet sont @code{equal} si et seulement si elles contiennent la même suite de codes de caractère et si tous ces codes sont soit dans la plage de 0 à 127 (@acronym{ASCII}) ou dans la plage de 160 à 255 (@code{eight-bit-graphic}). Cependant, quand une chaîne de caractères uni-octet est convertie en une chaîne multi-octets, tous les caractères avec des codes dans la plage de 160 à 255 sont convertis en caractères avec des codes plus grands, alors que les caractères @acronym{ASCII} restent inchangés. Donc, une chaîne uni-octet et sa conversion en multi-octet sont seulement @code{equal} si la chaîne est entièrement en @acronym{ASCII}. Les codes de caractères de 160 à 255 ne sont pas tout à fait appropriés dans le texte multi-octets, même s'il arrive qu'on les y rencontre. En conséquence, la situation où une chaîne uni-octet et une chaîne multi-octet sont @code{equal} sans être toutes deux entièrement @acronym{ASCII} est une curiosité technique à laquelle très peu de programmeurs Emacs Lisp se trouvent confrontés. Voir la section @xref{Text Representations}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>For the user-level commands for abbrevs, see @ref{Abbrevs,, Abbrev Mode, emacs, The GNU Emacs Manual}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Pour les commandes du niveau utilisateur des abréviations, voir
@ref{Abbrevs,, Abbrev Mode, emacs, The GNU Emacs Manual}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Format of Descriptions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Format de descriptions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Formatting Strings</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T102756Z">
        <seg>Formatter les chaînes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Formatting is often useful for computing messages to be displayed.  In fact, the functions @code{message} and @code{error} provide the same formatting feature described here; they differ from @code{format} only in how they use the result of formatting.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T211624Z">
        <seg>Le formatage est souvent utile pour le calcul de messages à afficher. En fait, les fonctions @code{message} et @code{error} fournissent la même fonctionnalité de formatage décrite ici; elles diffèrent de @code{format} seulement dans la façon dont elles utilisent le résultat de la mise en forme.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Free Software Foundation</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Free Software Foundation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Fonction</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Functions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Fonctions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Functions for Vectors</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T184202Z">
        <seg>Fonctions pour les vecteurs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Functions specifically for arrays.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T174219Z">
        <seg>Fonctions spécifiques aux tableaux.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Functions specifically for vectors.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T174313Z">
        <seg>Fonctions spécifiques aux vecteurs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Functions that Operate on Arrays</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T180406Z">
        <seg>Fonctions qui manipulent des tableaux</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Functions that accept any kind of sequence.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T174108Z">
        <seg>Des fonctions qui acceptent n'importe quel type de suite.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Functions to allocate new strings.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T202859Z">
        <seg>Fonctions pour allouer de nouvelles chaînes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Functions, variables, macros, commands, user options, and special forms are described in this manual in a uniform format.  The first line of a description contains the name of the item followed by its arguments, if any.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Des fonctions, les variables, les macros, les commandes, les options
d'utilisateur, et les formulaires spéciaux sont décrits dans ce manuel
dans un format uniforme. La première ligne de la description contient
le nom de l'article suivi de ses arguments, s'il y a.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>GNU</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>GNU</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>GNU Emacs Internals</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Fonctionnement interne de GNU Emacs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>GNU Emacs Lisp is largely inspired by Maclisp, and a little by Common Lisp.  If you know Common Lisp, you will notice many similarities.  However, many features of Common Lisp have been omitted or simplified in order to reduce the memory requirements of GNU Emacs.  Sometimes the simplifications are so drastic that a Common Lisp user might be very confused.  We will occasionally point out how GNU Emacs Lisp differs from Common Lisp.  If you don't know Common Lisp, don't worry about it; this manual is self-contained.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>GNU Emacs Lisp est en grande partie inspiré par Maclisp, et par Common
Lisp. Si vous connaissez le Common Lisp, vous noterez beaucoup de
similitudes. Cependant, beaucoup de dispositifs de Common Lisp ont été
omis ou simplifié afin de réduire les conditions de mémoire de GNU
Emacs. Parfois les simplifications sont si importantes qu'un
utilisateur Lisp Common pourrait être très dérouté. Nous préciserons
de temps en temps comment le GNU Emacs Lisp diffère du Common Lisp. Si
vous ne connaissez pas le Common Lisp, ne vous inquiétez à son sujet;
ce manuel est indépendant.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>GNU Emacs supports two numeric data types: @dfn{integers} and @dfn{floating point numbers}.  Integers are whole numbers such as @minus{}3, 0, 7, 13, and 511.  Their values are exact.  Floating point numbers are numbers with fractional parts, such as @minus{}4.5, 0.0, or 2.71828.  They can also be expressed in exponential notation: 1.5e2 equals 150; in this example, @samp{e2} stands for ten to the second power, and that is multiplied by 1.5.  Floating point values are not exact; they have a fixed, limited amount of precision.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030712Z">
        <seg>GNU Emacs supporte deux types de données numériques : @dfn{entiers} et
@dfn{nombres à virgule flottante}. Les nombres entiers sont des
nombres entiers tels que @minus{}3, 0, 7, 13, et 511. Leurs valeurs
sont exactes. Les nombres à virgule flottante sont des nombres avec
les parties partielles, telles que le @minus{}4.5, 0.0, ou
2.71828. Ils peuvent également être exprimés en notation
exponentielle : 1.5e2 est égal à 150 ; dans cet exemple, le @samp{e2}
représente dix à la puissance deux, le tout est multiplié par 1.5. Les
valeurs à virgule flottante ne sont pas exactes ; elles sont fixes et
limitées en précision.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>GPL</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>GPL</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Generally speaking, the earlier chapters describe features of Emacs Lisp that have counterparts in many programming languages, and later chapters describe features that are peculiar to Emacs Lisp or relate specifically to editing.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>D'une manière générale, les premiers chapitres décrivent les
caractéristiques d'Emacs Lisp qui ont des équivalences dans beaucoup
de langages de programmation, et les chapitres postérieurs décrivent
les caractéristiques qui sont particulières au Emacs Lisp ou se
relient spécifiquement à l'édition.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Hash Table Access</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T215000Z">
        <seg>Accès à une table de hachage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Hash Tables</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Tables de hachage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Here are examples illustrating these principles:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T184140Z">
        <seg>Voici quelques exemples illustrant ces principes :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Here are other examples:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Voici d'autres exemples:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Here are several examples:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T161445Z">
        <seg>Voici quelques exemples :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Here are some functions that relate to vectors:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T184211Z">
        <seg>Voici quelques fonctions relatives aux vecteurs :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Here are some other functions for working with hash tables.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140505T195438Z">
        <seg>Voici d'autres fonctions pour travailler avec les tables de hachage.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Here are some other functions that can convert to or from a string:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T211027Z">
        <seg>@code{string-to-int} est un alias obsolète de cette fonction :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Here are the functions for working with case tables:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140502T102127Z">
        <seg>Voici les fonctions pour travailler avec les tableaux de casse :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Here are two examples of @code{lsh}, shifting a pattern of bits one place to the left.  We show only the low-order eight bits of the binary pattern; the rest are all zero.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032313Z">
        <seg>Voici deux exemples de @code{lsh}, décalant une combinaison de
chiffres binaires d'une place vers la gauche. Nous montrons seulement
les huit bits faibles du binaire modèle ; le reste est fait de zéro.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Here is a description of an imaginary function @code{foo}:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Voici une description de fonction imaginaire @code{foo}:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Here is a table of valid format specifications:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T154517Z">
        <seg>Voici un tableau des spécifications de format valides :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Here is an example of creating, examining, and updating a bool-vector.  Note that the printed form represents up to 8 boolean values as a single character.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Nicolas Lecompte" changedate="20140430T202130Z">
        <seg>Voici un exemple de création, d'examen et de mise-à-jour d'un vecteur-booléen. Il faut noter que la forme affichée représente jusqu'à 8 valeurs booléennes comme un seul caractère.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Here is how you could define a hash table test equivalent to the predefined test value @code{equal}.  The keys can be any Lisp object, and equal-looking objects are considered the same key.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T144206Z">
        <seg>Voici comment on peut définir une table de hachage de test équivalente à la valeur de test prédéfinie @code{equal}. Les clés peuvent être n'importe quel objet Lisp, et des objets apparemment égaux sont considérés comme la même clé.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Here the index for @samp{a} is 0, the index for @samp{b} is 1, and the index for @samp{c} is 2.  Thus, three letters, @samp{abc}, are copied from the string @code{"abcdefg"}.  The index 3 marks the character position up to which the substring is copied.  The character whose index is 3 is actually the fourth character in the string.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T121655Z">
        <seg>Soit l’indice de @samp{a} égale à 0, l’indice de @samp{b} égale à 1, et l’indice de @samp{c} égale à 2.  Ainsi, les trois lettres, @samp{abc}, sont copiées depuis la chaîne @code{"abcdefg"}.  L'indice 3 marque la position de caractère à laquelle la sous-chaîne est copiée. Le caractère dont l'indice est 3 est en fait le quatrième caractère de la chaîne.
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>How Lisp expressions are evaluated.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Comment les expressions Lisp sont évaluées.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>How symbols are kept unique.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Comment les symboles sont gardés uniques.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>How the editor command loop works,</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025421Z">
        <seg>Comment fonctionne la boucle de commande de l'éditeur,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>How the manual is formatted.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Comment le manuel est composé.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>How the symbols @code{nil} and @code{t} are used.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Comment les symboles @code{nil} et @code{t} sont employés.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>How to add, subtract, multiply and divide.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Comment additionner, soustraire, multiplier et diviser.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>How to work with bool-vectors.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T174517Z">
        <seg>Comment travailler avec les vecteurs-booléens.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>How to work with char-tables.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T174446Z">
        <seg>Comment travailler avec les char-tables.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>However, when @var{separators} can match the empty string, @var{omit-nulls} is usually @code{t}, so that the subtleties in the three previous examples are rarely relevant:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T134018Z">
        <seg>Cependant, quand les @var{separators} arrivent à correspondre à une chaîne vide, @var{omit-nulls} est souvent @code{t}, de sorte que les subtilités constatées dans les trois exemples précédents sont rarement pertinentes:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @code{logand} is not passed any argument, it returns a value of @minus{}1.  This number is an identity element for @code{logand} because its binary representation consists entirely of ones.  If @code{logand} is passed just one argument, it returns that argument.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si @code{logand} est passé sans argument, il renvoie une valeur
@minus{}1. Ce nombre est un élément d'identité pour @code{logand}
parce que sa représentation binaire consiste entièrement de 1. Si
@code{logand} est passé à juste un argument, il renvoie cet argument.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{array} is a string and @var{object} is not a character, a @code{wrong-type-argument} error results.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T182931Z">
        <seg>Si @var{array} est une chaîne de caractères et que @var{object} n'est pas un caractère, il en résultera une erreur @code{wrong-type-argument}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{array} is a string and @var{object} is not a character, a @code{wrong-type-argument} error results.  The function converts a unibyte string to multibyte if necessary to insert a character.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T102851Z">
        <seg>Si @var{array} est une chaîne de caractères et @var{object} n'est pas un caractère, il en résultera une erreur @code{wrong-type-argument}. La fonction convertit une chaîne de caractères unioctet en multioctet si nécessaire pour insérer un caractère.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{divisor} is specified, this uses the kind of division operation that corresponds to @code{mod}, rounding downward.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si @var{divisor} est indiqué, ceci utilise le genre d'opération de
division qui correspond à @code{mod}, arrondissant en bas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{from} and @var{to} are omitted, @var{var} is bound to @code{nil} before the loop begins, and the loop exits if @var{var} is non-@code{nil} at the beginning of an iteration.  Here is an example:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T120331Z">
        <seg>Si @var{from} et @var{to} sont omis, @var{var} est lié à @code{nil}
avant que la boucle commence, et la boucle est arrêtée si @var{var}
est non-@code{nil} au début d'une itération. Voici un exemple :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{here} is non-@code{nil}, it inserts the text in the buffer before point, and returns @code{nil}.  Called interactively, the function prints the same information in the echo area, but giving a prefix argument makes @var{here} non-@code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si @var{here} est non-@code{nil}, ça insère le texte dans le tampon
avant le point, et renvoie le @code{nil}. Appelée interactivement, la
fonction affiche la même information dans le secteur d'écho, mais en
donnant un argument de préfixe rend @var{here} non-@code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{hook} is a non-@code{nil} symbol whose @code{no-self-insert} property is non-@code{nil}, @var{hook} can explicitly control whether to insert the self-inserting input character that triggered the expansion.  If @var{hook} returns non-@code{nil} in this case, that inhibits insertion of the character.  By contrast, if @var{hook} returns @code{nil}, @code{expand-abbrev} also returns @code{nil}, as if expansion had not really occurred.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolasfloquet59@gmail.com" changedate="20140418T141940Z">
        <seg>Si @var{hook} is a non-@code{nil} symbol whose @code{no-self-insert} property is non-@code{nil}, @var{hook} can explicitly control whether to insert the self-inserting input character that triggered the expansion.  If @var{hook} returns non-@code{nil} in this case, that inhibits insertion of the character.  By contrast, if @var{hook} returns @code{nil}, @code{expand-abbrev} also returns @code{nil}, as if expansion had not really occurred.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{human} is non-@code{nil}, the description is human-oriented.  System abbrevs are listed and identified as such.  Otherwise the description is a Lisp expression---a call to @code{define-abbrev-table} that would define @var{name} as it is currently defined, but without the system abbrevs.  (The mode or package using @var{name} is supposed to add these to @var{name} separately.)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si @var{human} est non-@code{nil}, la description est orientée pour
l'humain. Des abréviations de système sont énumérées et identifiées en
tant que telles. Autrement la description est une expression de
Lisp---un appel à @code{define-abbrev-table} définirait @var{name}
comme il l'est actuellement, mais en dehors des abréviations de
système---. (Le mode ou le paquet employant @var{name} est supposé
ajouter ces derniers à @var{name} séparément.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{limit} is @code{t}, it means to choose a new seed based on the current time of day and on Emacs's process @acronym{ID} number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si @var{limit} est @code{t}, cela signifie de choisir une nouvelle
graine basée sur heure courante et sur le numéro de processus
@acronym{ID} d'Emacs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{limit} is a positive integer, the value is chosen to be nonnegative and less than @var{limit}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si @var{limit} est un nombre entier positif, la valeur est choisie
pour être non négative et inférieure à @var{limit}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{omit-nulls} is @code{nil}, the result contains null strings whenever there are two consecutive matches for @var{separators}, or a match is adjacent to the beginning or end of @var{string}.  If @var{omit-nulls} is @code{t}, these null strings are omitted from the result.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T133206Z">
        <seg>Si @var{omit-nulls} est @code{nil}, le résultat contient des chaînes vides chaque fois qu'il y a deux correspondances consécutives pour les @var{separators}, ou si la correspondance est adjacente au début ou à la fin de la @var{string}. Si @var{omit-nulls} est @code{t}, ces chaînes vides ne sont pas prises en compte dans le résultat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{rehash-size} is an integer, it should be positive, and the hash table grows by adding that much to the nominal size.  If @var{rehash-size} is a floating point number, it had better be greater than 1, and the hash table grows by multiplying the old size by that number.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T142458Z">
        <seg>Si @var{rehash-size} est un entier, il doit être positif, et la table de hachage s'agrandira en partant de sa valeur nominale et en y ajoutant cet entier positif. Si @var{rehash-size} est un nombre à virgule flottante, il vaut mieux qu'il soit supérieur à 1 et la table de hachage s'agrandira en multipliant l'ancienne taille par ce nombre.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{separators} is @code{nil} (or omitted), the default is the value of @code{split-string-default-separators}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T133249Z">
        <seg>Si @var{separators} est @code{nil} (ou non renseigné), la valeur par défaut est la valeur de @code{split-string-default-separators}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{string-or-char} is a string, this function capitalizes the initials of the words in @var{string-or-char}, without altering any letters other than the initials.  It returns a new string whose contents are a copy of @var{string-or-char}, in which each word has had its initial letter converted to upper case.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212851Z">
        <seg>Si @var{string-or-char} est une chaîne, cette fonction met en majuscule les initiales des mots dans @var{string-or-char}, sans modifier les autres lettres que les initiales. Elle retourne une nouvelle chaîne dont le contenu est une copie de @var{string-or-char}, dans laquelle chaque mot a sa lettre initiale convertie en majuscule.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{string} contains more than one format specification, the format specifications correspond to successive values from @var{objects}.  Thus, the first format specification in @var{string} uses the first such value, the second format specification uses the second such value, and so on.  Any extra format specifications (those for which there are no corresponding values) cause an error.  Any extra values to be formatted are ignored.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T211757Z">
        <seg>Si @var{string} contient plus d'une spécification de format, les spécifications de format correspondent aux valeurs successives de @var{objects}. Ainsi, la première spécification de format de @var{string} utilise la première de ces valeurs, la deuxième spécification de format utilise la deuxième de ces valeurs, et ainsi de suite. Toutes les spécifications de format supplémentaires (celles pour lesquelles il n'y pas pas de valeur correspondante) provoquent une erreur. Toutes les valeurs supplémentaires à formater sont ignorées.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{weak} is @code{key-and-value} or @code{t}, both the key and the value must be live in order to preserve the association.  Thus, the hash table does not protect either keys or values from garbage collection; if either one is collected as garbage, that removes the association.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T182009Z">
        <seg>Si @var{weak} vaut @code{key-and-value} ou @code{t}, la clé et la valeur doivent absolument être référencées pour préserver l'association. Ainsi donc, la table de hachage ne préserve ni les clés ni les valeurs d'une récupération par le ramasse-miettes ; si l'une des deux est ramassée, l'association est supprimée.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{weak} is @code{key-or-value}, either the key or the value can preserve the association.  Thus, associations are removed from the hash table when both their key and value would be collected as garbage (if not for references from weak hash tables).</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T142108Z">
        <seg>Si @var{weak} vaut @code{key-or-value}, ni la clé ni la valeur ne peuvent conserver l'association. Ainsi donc, les associations sont retirées de la table de hachage quand la clé ainsi que la valeur sont récupérées par le ramasse-miettes (si elles ne sont pas référencées dans des tables de hachage faibles).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If @var{weak} is @code{value}, then the hash table does not prevent values from being collected as garbage (if they are not referenced anywhere else); if a particular value does get collected, the corresponding association is removed from the hash table.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T141615Z">
        <seg>Si @var{weak} vaut @code{value}, alors la table de hachage n'empêche pas les valeurs d'être détruites par le ramasse-miettes (si elles ne sont référencées nulle part ailleurs) ; si une valeur particulière se fait ramasser, l'association correspondante est retirée de la table de hachage.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If all the arguments are integers, then the result is an integer too.  This means the result has to be rounded.  On most machines, the result is rounded towards zero after each division, but some machines may round differently with negative arguments.  This is because the Lisp function @code{/} is implemented using the C division operator, which also permits machine-dependent rounding.  As a practical matter, all known machines round in the standard fashion.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si tous les arguments sont des nombres entiers, alors le résultat est
aussi un nombre entier. Ceci signifie que le résultat doit être
arrondi. Sur la plupart des machines, le résultat est arrondi vers le
zéro après chaque division, mais quelques machines peuvent arrondir
différemment les arguments négatifs. C'est parce que la fonction de
Lisp @code{/} est implémentée en utilisant l'opérateur de division de
C qui permet l'arrondi en fonction de la machine. Du côté pratique,
toutes les machines connues arrondissent en mode standard.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If the characters copied from @var{string} have text properties, the properties are copied into the new string also.  @xref{Text Properties}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T122731Z">
        <seg>Si les caractères copiés depuis @var{string} possèdent des propriétés textuelles, les propriétés sont également copiées dans la nouvelle chaîne.  Voir la section @xref{Text Properties}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If the object is a string, its text properties are copied into the output.  The text properties of the @samp{%s} itself are also copied, but those of the object take priority.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T211859Z">
        <seg>Si l'objet est une chaîne, ces propriétés textuelles sont copiées dans la sortie. Les propriétés textuelles des @samp{%s} eux-mêmes sont aussi copiées, mais celles de l'objet sont prioritaires.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If the sequence is a string with text properties, the property list in the copy is itself a copy, not shared with the original's property list.  However, the actual values of the properties are shared.  @xref{Text Properties}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T185155Z">
        <seg>Si la suite est une chaîne de caractères avec des propriétés, alors la liste de propriétés de la suite copiée est elle-même une copie. Elle n'est pas partagée avec la liste de propriétés de la suite d'origine. Cependant, les valeurs des propriétés, quant à elles, sont partagées entre les deux listes de propriétés. @xref{Text Properties}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If the specified portions of the two strings match, the value is @code{t}.  Otherwise, the value is an integer which indicates how many leading characters agree, and which string is less.  Its absolute value is one plus the number of characters that agree at the beginning of the two strings.  The sign is negative if @var{string1} (or its specified portion) is less.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T140620Z">
        <seg>Si les parties spécifiées des deux chaînes correspondent, la valeur est @code{t}. Sinon, la valeur est un entier qui indique combien de caractères prépondérants sont en accord, et quelle chaîne est moindre. Sa valeur absolue est un à quoi on ajoute le nombre de caractères qui correspondent au début des deux chaînes. Le signe est négatif si @var{string1} (ou sa partie spécifique) est moindre.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If the two objects are not equal, the values returned by @code{sxhash} are usually different, but not always; once in a rare while, by luck, you will encounter two distinct-looking objects that give the same result from @code{sxhash}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T194926Z">
        <seg>Si les deux objets ne sont pas égaux, d'habitude les valeurs retournées par @code{sxhash} sont différentes, mais pas toujours. Parfois, mais très rarement, par chance, vous rencontrerez deux objets apparemment distincts mais dont le résultat de @code{sxhash} est identique.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If the width is too small, @code{format} does not truncate the object's printed representation.  Thus, you can use a width to specify a minimum spacing between columns with no risk of losing information.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212252Z">
        <seg>Si la largeur est trop petite, @code{format} ne tronque pas la représentation affichée de l'objet . Ainsi donc, on peut utiliser une largeur pour spécifier un espace minimum entre les colonnes sans risque de perdre d'information.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If this function is called more than once for the same @var{tabname}, subsequent calls add the definitions in @var{definitions} to @var{tabname}, rather than overriding the entire original contents.  (A subsequent call only overrides abbrevs explicitly redefined or undefined in @var{definitions}.)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si cette fonction est appelée plus d'une fois pour le même
@var{tabname}, les appels suivants ajoutent les définitions dans
@var{definitions} à @var{tabname}, plutôt que de modifier en entier le
contenu original. (Un appel suivant modifie seulement des abréviations
explicitement redéfinies ou éliminées dans @var{definitions}.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If two objects @var{obj1} and @var{obj2} are equal, then @code{(sxhash @var{obj1})} and @code{(sxhash @var{obj2})} are the same integer.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T144145Z">
        <seg>Si deux objets @var{obj1} et @var{obj2} sont égaux, alors @code{(sxhash @var{obj1})} et @code{(sxhash @var{obj2})} sont le même entier relatif.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If you divide an integer by 0, an @code{arith-error} error is signaled.  (@xref{Errors}.)  Floating point division by zero returns either infinity or a NaN if your machine supports @acronym{IEEE} floating point; otherwise, it signals an @code{arith-error} error.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si vous divisez un nombre entier par 0, une erreur @code{arith-error}
est signalée. (@xref{Errors}.) La division d'un nombre à virgule
flottante par zéro renvoie l'un ou l'autre infini ou NaN si votre
machine supporte les nombres à virgule flottante @acronym{IEEE};
autrement, elle signale une erreur @code{arith-error}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If you want random numbers that don't always come out the same, execute @code{(random t)}.  This chooses a new seed based on the current time of day and on Emacs's process @acronym{ID} number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si vous voulez des nombres aléatoires qui ne sont pas toujours
pareils, exécuter @code{(random t)}. Ceci choisit une nouvelle graine
basée sur l'heure courante du jour et sur le numéro du processus
@acronym{ID} d'Emacs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>If you want to increment the variable, you must use @code{setq}, like this:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032010Z">
        <seg>Si vous voulez incrémenter la variable, vous devez employer
@code{setq}, comme ceci :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Immediately after the @samp{%} and before the optional width and precision, you can put certain ``flag'' characters.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212351Z">
        <seg>Immédiatement après le @samp{%} et avant les largeur et précision optionnelles, on peut utiliser mettre un caractère "indicateur''.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In 29-bit binary, the decimal integer 5 looks like this:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>En 29-bit binaire, le nombre entier décimal 5 ressemble à ceci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In Emacs Lisp, @code{nil} and @code{t} are special symbols that always evaluate to themselves.  This is so that you do not need to quote them to use them as constants in a program.  An attempt to change their values results in a @code{setting-constant} error.  @xref{Constant Variables}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>En Emacs Lisp, @code{nil} et @code{t} sont des symboles spéciaux qui
s'évaluent toujours eux-mêmes. De sorte que vous n'avez pas besoin de
les citer pour les employer comme constantes dans un programme. Une
tentative de changer leurs valeurs a comme conséquence une erreur
@code{setting-constant}. @xref{Constant Variables}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In Emacs Lisp, a @dfn{sequence} is either a list or an array.  The common property of all sequences is that they are ordered collections of elements.  This section describes functions that accept any kind of sequence.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T100345Z">
        <seg>.En Lisp Emacs, une suite (@dfn{sequence}) est soit une liste, soit un tableau. La propriété commune de toutes les suites est qu'elles sont des ensembles ordonnés d'éléments. Dans cette partie, on décrit des fonctions qui acceptent tout type de suite.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In Emacs Lisp, the indices of the elements of a vector start from zero and count up from there.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T183924Z">
        <seg>Dans Lisp Emacs, les indices des éléments d'un vecteur commencent à zéro et le comptage se fait à partir de là.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In Emacs versions before 21, the @code{vconcat} function allowed integers as arguments, converting them to strings of digits, but that feature has been eliminated.  The proper way to convert an integer to a decimal number in this way is with @code{format} (@pxref{Formatting Strings}) or @code{number-to-string} (@pxref{String Conversion}).</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T104212Z">
        <seg>Dans les versions d'Emacs antérieures à la 21, la fonction @code{vconcat} autorisait des arguments de type entiers en les convertissant en chaîne de caractères contenant des chiffres. Cependant, cette fonctionnalité a été retirée. La méthode correcte pour convertir un nombre entier en nombre décimal de cette façon est d'utiliser la fonction @code{format} (@pxref{Formatting Strings}) or @code{number-to-string} (@pxref{String Conversion}). </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In Emacs versions before 21, when an argument was an integer (not a sequence of integers), it was converted to a string of digits making up the decimal printed representation of the integer.  This obsolete usage no longer works.  The proper way to convert an integer to its decimal printed form is with @code{format} (@pxref{Formatting Strings}) or @code{number-to-string} (@pxref{String Conversion}).</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T103424Z">
        <seg>Dans les versions inférieures à 21 d'Emacs, quand un argument était un entier (pas une suite d'entiers), il était converti en une chaîne de chiffres qui composaient le nombre décimal s'affichant pour représenter l'entier. Cette pratique obsolète ne fonctionne plus. La bonne façon de convertir un nombre entier dans sa forme décimale affichée est de le faire avec @code{format} (voir la section @pxref{Formatting Strings}) ou avec @code{number-to-string} (voir la section @pxref{Conversion of Characters and Strings}).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In Emacs, pseudo-random numbers are generated from a ``seed'' number.  Starting from any given seed, the @code{random} function always generates the same sequence of numbers.  Emacs always starts with the same seed value, so the sequence of values of @code{random} is actually the same in each Emacs run! For example, in one operating system, the first call to @code{(random)} after you start Emacs always returns @minus{}1457731, and the second one always returns @minus{}7692030.  This repeatability is helpful for debugging.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140424T015013Z">
        <seg>Dans Emacs, des nombres pseudo-aléatoires sont produits à partir de
« graine » de nombre. À partir de n'importe quelle graine donnée, la
fonction @code{random} produit toujours le même ordre de
nombres. Emacs démarre toujours par la même valeur de graine, ainsi la
séquence des valeurs de @code{random} est réellement les mêmes dans
chaque passe d'Emacs ! Par exemple, dans un logiciel d'exploitation,
le premier appel à @code{(random)}, après que vous démarriez Emacs,
retourne toujours @minus{}1457731, et le second renvoie toujours
@minus{}7692030. Cette répétition est utile pour la correction.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In Lisp, the symbol @code{nil} has three separate meanings: it is a symbol with the name @samp{nil}; it is the logical truth value @var{false}; and it is the empty list---the list of zero elements.  When used as a variable, @code{nil} always has the value @code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030113Z">
        <seg>En Lisp, le symbole @code{nil} a trois significations distinctes : il
est un symbole nommé @samp{nil} ; c'est la vraie valeur logique
@var{false} ; et c'est la liste vide---la liste de zéro élément. Une
fois utilisé comme variable, @code{nil} a toujours la valeur
@code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In a computer, an integer is represented as a binary number, a sequence of @dfn{bits} (digits which are either zero or one).  A bitwise operation acts on the individual bits of such a sequence.  For example, @dfn{shifting} moves the whole sequence left or right one or more places, reproducing the same pattern ``moved over.''</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140424T015013Z">
        <seg>Dans un ordinateur, un nombre entier est représenté comme nombre
binaire, une séquence de @dfn{bits} (des chiffres qui sont zéro ou
un). Une opération de bits agit sur les bits individuels d'une telle
séquence. Par exemple, le @dfn{shifting} déplace l'ordre entier à
gauche ou à droite d'une ou plusieures places, pour reproduire le même
modèle « moved over. »</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In a function description, the name of the function being described appears first.  It is followed on the same line by a list of argument names.  These names are also used in the body of the description, to stand for the values of the arguments.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Dans une description de fonction, le nom de la fonction étant décrite
apparaît d'abord. Il est suivi sur la même ligne d'une liste de noms
d'argument. Ces noms sont également employés dans le corps de la
description, pour représenter les valeurs des arguments.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In binary, in the 29-bit implementation, the argument looks like this:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032337Z">
        <seg>En binaire, dans l'exécution de 29 bits, l'argument ressemble à ceci :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In contexts where a truth value is expected, any non-@code{nil} value is considered to be @var{true}.  However, @code{t} is the preferred way to represent the truth value @var{true}.  When you need to choose a value which represents @var{true}, and there is no other basis for choosing, use @code{t}.  The symbol @code{t} always has the value @code{t}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Dans les contextes où une vraie valeur est prévue, n'importe quelle
valeur non-@code{nil} est considérée comme @var{true}. Cependant,
@code{t} est la manière préférée de représenter la vraie valeur
@var{true}. Quand vous devez choisir une valeur qui représente
@var{true}, et que vous n'avez aucun autre choix, employer
@code{t}. Le symbole @code{t} a toujours la valeur @code{t}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In contrast, shifting the pattern of bits one place to the right with @code{lsh} looks like this:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>En revanche, décaler la combinaison de chiffres binaires d'une place
vers la droite avec @code{lsh} ressemble à ceci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In principle, if you want an array of text characters, you could use either a string or a vector.  In practice, we always choose strings for such applications, for four reasons:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T102144Z">
        <seg>En théorie, si on veut un tableau de caractères de texte, on peut utiliser un tableau type string ou un tableau type vector. En pratique, on choisit toujours des tableaux type string pour de telles applications, pour quatre raisons :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In simple cases, all you need to specify is the mapping to lower-case; the three related tables will be calculated automatically from that one.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T213106Z">
        <seg>Dans les cas simples, tout ce qu'on doit spécifier est le mappage pour les minuscules; ces trois tables liées seront calculés automatiquement à partir de ce dernier.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In the following three examples, @samp{%7s} specifies a minimum width of 7.  In the first case, the string inserted in place of @samp{%7s} has only 3 letters, it needs 4 blank spaces as padding.  In the second case, the string @code{"specification"} is 13 letters wide but is not truncated.  In the third case, the padding is on the right.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212322Z">
        <seg>Dans les trois exemples suivants, @samp{%7s} spécifie une largeur minimum de 7. Dans le premier cas, la chaîne insérée à la place de @samp{%7s} a seulement 3 lettres, elle a besoin de 4 espaces vides pour le bourrage. Dans le second cas, la chaîne @code{"specification"} contient 13 lettres mais n'est pas tronquée. Dans le troisième cas, le bourrage est à droite.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In this example, the index for @samp{e} is @minus{}3, the index for @samp{f} is @minus{}2, and the index for @samp{g} is @minus{}1.  Therefore, @samp{e} and @samp{f} are included, and @samp{g} is excluded.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T121951Z">
        <seg>Dans cet exemple, l’indice de @samp{e} est @minus{}3, l’indice de @samp{f} est @minus{}2, et l’indice de @samp{g} est @minus{}1.  Donc, @samp{e} et @samp{f} sont inclus, et @samp{g} est exlcu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In this implementation, the largest 29-bit binary integer value is 268,435,455 in decimal.  In binary, it looks like this:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031444Z">
        <seg>Dans cet exemple, la plus grande valeur de nombre entier binaire de
29 bits est 268 435 455 en décimale. En binaire, elle ressemble à
ceci :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In this manual, we write @code{()} when we wish to emphasize that it means the empty list, and we write @code{nil} when we wish to emphasize that it means the truth value @var{false}.  That is a good convention to use in Lisp programs also.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Dans ce manuel, nous écrivons @code{()} quand nous souhaitons
souligner qu'il signifie la liste vide, et nous écrivons @code{nil}
quand nous souhaitons souligner qu'il signifie la vraie valeur
@var{false}. C'est une bonne convention à employer dans des programmes
de Lisp également.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In this section, we describe the functions that accept all types of arrays.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T180424Z">
        <seg>Dans cette partie, nous allons décrire les fonctions qui acceptent tout type de tableaux.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>In this special form, the arguments @var{from} and @var{to} are optional, but must both be present or both absent.  If they are present, @var{inc} may optionally be specified as well.  These arguments are grouped with the argument @var{var} into a list, to distinguish them from @var{body}, which includes all remaining elements of the form.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030353Z">
        <seg>Sous ce formulaire spécial, les arguments @var{from} et @var{to} sont
facultatif, mais il faut qu'ils soient tous deux présents ou tous deux
absents. S'ils sont présents, @var{inc} peut aussi bien être indiqué
de manière optionnelle. Ces arguments sont groupés avec l'argument @var{var}
dans une liste, pour les distinguer de @var{body}, qui inclut tous les
éléments restants de la forme.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Integer Basics</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031533Z">
        <seg>Introduction aux entiers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Introduction</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Introduction</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Introduction and conventions used.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Introduction et conventions utilisées.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>It is important to note that in Emacs Lisp, arithmetic functions do not check for overflow.  Thus @code{(1+ 268435455)} may evaluate to @minus{}268435456, depending on your hardware.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031958Z">
        <seg>Il est important de noter qu'en Emacs Lisp, les fonctions
arithmétiques ne vérifient pas le débordement. Ainsi @code{(1+
268435455)} peut être évalué à @minus{}268435456, selon votre
matériel.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Iteration</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025015Z">
        <seg>Itération</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Keys which are numbers are ``the same'' if they are @code{equal}, that is, if they are equal in value and either both are integers or both are floating point numbers; otherwise, two distinct objects are never ``the same.''</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T141247Z">
        <seg>Les clés qui sont des nombres sont ``les mêmes'' si elles sont @code{equal}, c'est-à-dire si elles sont égales par leurs valeurs et si elles sont l'une et l'autre des entiers (@code{integers}) ou bien des nombres à virgule flottante ; sinon deux objets distincts ne sont jamais ``les mêmes''.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Like a buffer, a string can contain text properties for the characters in it, as well as the characters themselves.  @xref{Text Properties}.  All the Lisp primitives that copy text from strings to buffers or other strings also copy the properties of the characters being copied.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T105043Z">
        <seg>Comme une mémoire tampon, une chaîne peut contenir des propriétés de texte pour les caractères qui s'y trouvent, ainsi que les caractères eux-mêmes. Voir la section @xref{Text Properties}. Toutes les primitives Lips qui copient le texte à partir de chaînes vers la mémoire tampon ou vers d’autres chaînes copient également les propriétés des caractères copiés. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Lisp (LISt Processing language) was first developed in the late 1950s at the Massachusetts Institute of Technology for research in artificial intelligence.  The great power of the Lisp language makes it ideal for other purposes as well, such as writing editing commands.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Lisp (LISt Processing language) a été développé la première fois vers
la fin des années 50 au Massachusetts Institute of Technology pour la
recherche en intelligence artificielle. La grande puissance du langage
Lisp le rend idéal pour d'autres buts aussi bien, comme l'écriture de
commandes d'édition.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Lisp Data Types</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Types de données Lisp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Lisp History</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>L'histoire de Lisp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Lisp history</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030008Z">
        <seg>L'histoire de Lisp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>List of all error symbols.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Liste de tous les symboles d'erreur</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Logical and, or, not, shifting.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>and, or, not logique et décalage.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Lookup in a hash table is extremely fast for large tables---in fact, the time required is essentially @emph{independent} of how many elements are stored in the table.  For smaller tables (a few tens of elements)  alists may still be faster because hash tables have a more-or-less constant overhead.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T192449Z">
        <seg>Une recherche dans une table de hachage est extrêmement rapide pour les grandes tables. En fait, le temps nécessaire est, avant tout, @emph{indépendant} du nombre d'éléments contenus dans la table. Pour les plus petites tables (quelques dizaines d'éléments), les listes d'association peuvent quand même être plus rapides parce que les tables de hachage ont un temps système plus-ou-moins constant.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>M-o</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>M-o</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Maclisp</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Maclisp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Macros are a way to extend the Lisp language.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les macros sont un moyen d'étendre le langage Lisp.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Many of the examples in this manual print text when they are evaluated.  If you execute example code in a Lisp Interaction buffer (such as the buffer @samp{*scratch*}), the printed text is inserted into the buffer.  If you execute the example by other means (such as by evaluating the function @code{eval-region}), the printed text is displayed in the echo area.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Plusieurs des exemples de ce manuel affichent du texte quand ils sont
évalués. Si vous exécutez le code d'exemple dans un tampon
d'interaction de Lisp (tel que le tampon @samp{*scratch*}), le texte
affiché est inséré dans le tampon. Si vous exécutez l'exemple par
d'autres moyens (comme pour évaluer la fonction @code{eval-région}),
le texte affiché est montré dans le secteur d'écho.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Many of the functions described in this chapter accept markers for arguments in place of numbers.  (@xref{Markers}.)  Since the actual arguments to such functions may be either numbers or markers, we often give these arguments the name @var{number-or-marker}.  When the argument value is a marker, its position value is used and its buffer is ignored.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031454Z">
        <seg>Plusieurs des fonctions décrites dans ce chapitre acceptent des
marqueurs comme arguments au lieu des nombres. (@xref{Markers}.)
Puisque les arguments réels à de telles fonctions peuvent être des
nombres ou des marqueurs, nous donnons souvent à ces arguments le nom
de @var{number-or-marker}. Quand la valeur d'argument est un marqueur,
sa valeur de position est employée et son tampon est ignoré.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Many of the specialized editing and I/O facilities of Emacs accept only strings.  For example, you cannot insert a vector of characters into a buffer the way you can insert a string.  @xref{Strings and Characters}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T173833Z">
        <seg>Beaucoup d'équipements d'édition spécialisée et d'entrée-sortie d'Emacs acceptent seulement des chaînes de caractères. Par exemple, vous ne pouvez pas insérer un vecteur de caractères dans une mémoire tampon de la même façon qu'une chaîne de caractères peut l'être. @xref{Strings and Characters}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Markers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Marqueurs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Math Functions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Fonctions mathématiques</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Modes</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Modes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Modifying Strings</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T102252Z">
        <seg>Modifier des chaînes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>More examples:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T133558Z">
        <seg>Autres exemples:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Most modern computers support the @acronym{IEEE} floating point standard, which provides for positive infinity and negative infinity as floating point values.  It also provides for a class of values called NaN or ``not-a-number''; numerical functions return such values in cases where there is no correct answer.  For example, @code{(/ 0.0 0.0)} returns a NaN.  For practical purposes, there's no significant difference between different NaN values in Emacs Lisp, and there's no rule for precisely which NaN value should be used in a particular case, so Emacs Lisp doesn't try to distinguish them (but it does report the sign, if you print it).  Here are the read syntaxes for these special floating point values:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140424T015013Z">
        <seg>La plupart des ordinateurs modernes soutiennent la norme à virgule
flottante @acronym{IEEE}, qui prévoit plus l'infini et moins l'infini
comme valeurs à virgule flottante. Elle prévoit également une classe
de valeurs appelées NaN ou « not-a-number »; les fonctions numériques
renvoient de telles valeurs dans les cas où il n'y a aucune réponse
correcte. Par exemple, @code{(/ 0.0 0.0)} renvoie NaN. Pour des buts
pratiques, il n'y a aucune différence significative entre différentes
valeurs de NaN en Emacs Lisp, et il n'y a aucune règle pour la valeur
NaN à utiliser dans un cas particulier, ainsi Emacs Lisp n'essaye pas
de les distinguer (mais rapporte le signal, si vous l'affichez). Voici
les syntaxes lues pour ces valeurs à virgule flottante spéciales :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Most of the GNU Emacs text editor is written in the programming language called Emacs Lisp.  You can write new code in Emacs Lisp and install it as an extension to the editor.  However, Emacs Lisp is more than a mere ``extension language''; it is a full computer programming language in its own right.  You can use it as you would any other programming language.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140424T015013Z">
        <seg>La majeure partie de l'éditeur de texte GNU Emacs est écrite dans
le langage de programmation appelé Emacs Lisp. Vous pouvez écrire du
code en Emacs Lisp et l'installer comme extension de l'éditeur.
Cependant, Emacs Lisp est plus qu'un simple « langage d'extension » ;
c'est un langage de programmation d'ordinateur complet et autonome.
Vous pouvez l'employer comme n'importe quel autre langage de programmation.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>New Symbols</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Nouveaux symboles</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Non-ASCII Characters</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030951Z">
        <seg>Caractères non-ASCII</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Normally the function @code{define-abbrev} sets the variable @code{abbrevs-changed} to @code{t}, if it actually changes the abbrev.  (This is so that some commands will offer to save the abbrevs.)  It does not do this for a ``system'' abbrev, since those won't be saved anyway.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolasfloquet59@gmail.com" changedate="20140424T083659Z">
        <seg>Habituellement, la fonction @code{define-abbrev} définit la variable @code{abbrevs-changed} en @code{t}, si elle change effectivement l'abréviation.  (C'est un fait que certaines commandes demandent d'enregistrer les abbrevs.)  Il ne l'effectue pas pour un ``system'' abbrev, puisque ceux-ci ne seront pas enregistrer de toute façon.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Notation for describing functions, variables, etc.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Notation pour décrire des fonctions, des variables, etc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Numbers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Nombres</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Numbers and arithmetic functions.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Nombres et fonctions arithmétiques.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Numeric Conversions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Conversions numériques</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Obarrays are also a kind of hash table, but they are a different type of object and are used only for recording interned symbols (@pxref{Creating Symbols}).</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T213226Z">
        <seg>Les obarrays sont aussi une sorte de table de hachage mais ils sont un type d'objet différent et sont seulement utilisés pour enregistrer des symboles internes (@pxref{Creating Symbols}).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Obtaining random integers, predictable or not.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Obtention des nombres entiers aléatoires, prévisibles ou pas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Omitting the argument @var{end} is equivalent to specifying @code{nil}.  It follows that @code{(substring @var{string} 0)} returns a copy of all of @var{string}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T122445Z">
        <seg>Omettre l’argument @var{end} équivaut à indiquer @code{nil}.  Il en va que @code{(substring @var{string} 0)} retourne une copie entière de @var{string}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>On some machines, any integer representable in Lisp may be the result of @code{random}.  On other machines, the result can never be larger than a certain maximum or less than a certain (negative) minimum.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Sur quelques machines, n'importe quel nombre entier représentable en
Lisp peut être le résultat de @code{random}. Sur d'autres machines, le
résultat peut ne jamais être plus grand qu'un certain maximum ou moins
qu'un certain minimum (négatif).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>On the other hand, shifting one place to the right looks like this:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032323Z">
        <seg>D'autre part, le décalage d'une place vers la droite ressemble à ceci :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Other Hash Table Functions</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140505T195434Z">
        <seg>Autres fonctions pour les tables de hachage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Other functions to compare with this one include @code{char-to-string} (@pxref{String Conversion}), @code{make-vector} (@pxref{Vectors}), and @code{make-list} (@pxref{Building Lists}).</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T110514Z">
        <seg>Les autres fonctions à comparer avec celle-ci comprennent @code{char-to-string} (voir la section @xref{Conversion des caractères et des chaînes}), @code{make-vector} (voir la section @xref{Vecteurs}), et @code{make-list} (voir la section @xref{Building Cons Cells and Lists}).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Overall, the key-value pairs passed to @var{function} describe all the values stored in @var{char-table}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Nicolas Lecompte" changedate="20140428T193020Z">
        <seg>En général, les paires clé-valeur passées à la fonction @var{function} décrivent toutes les valeurs stockées dans @var{char-table}.
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Pairs of characters are compared according to their character codes.  Keep in mind that lower case letters have higher numeric values in the @acronym{ASCII} character set than their upper case counterparts; digits and many punctuation characters have a lower numeric value than upper case letters.  An @acronym{ASCII} character is less than any non-@acronym{ASCII} character; a unibyte non-@acronym{ASCII} character is always less than any multibyte non-@acronym{ASCII} character (@pxref{Text Representations}).</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T140130Z">
        <seg>Les pairs de caractères sont comparées selon leurs codes de caractère. Garder en tête que les lettres minuscules ont des valeurs numériques supérieures en @acronym{ASCII} que leurs homologues majuscules; les chiffres et beaucoup de caractères de ponctuation ont une valeur numérique inférieure à celle des lettres majuscules. Un caractère @acronym{ASCII} est inférieur à tout caractère non @acronym{ASCII}; un caractère uni-octet non @acronym{ASCII} est toujours inférieur à tout caractère multi-octet non @acronym{ASCII} (voir la section @pxref{Text Representations}).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Please mail comments and corrections to</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Merci d'envoyer vos commentaires et corrections à</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Positions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Positions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Predicates for Strings</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T202824Z">
        <seg>Prédicats pour les chaînes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Predicates on Numbers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Attributs des nombres</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Print name</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T205519Z">
        <seg>Nom d'affichage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Printing Notation</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Notation d'affichage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Processes</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Processus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Property Lists</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Listes de propriétés</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Property list</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T205853Z">
        <seg>Liste de propriétés</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Q</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Q</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Random Numbers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Nombres aléatoires</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Reading files of Lisp code into Lisp.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Lire des fichiers de code Lisp depuis Lisp.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Recall that the @dfn{sequence} type is the union of two other Lisp types: lists and arrays.  In other words, any list is a sequence, and any array is a sequence.  The common property that all sequences have is that each is an ordered collection of elements.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140528T112521Z">
        <seg>Il faut se rappeler que le type @dfn{sequence} est l'union de deux autres types Lisp : les listes et les tableaux. Autrement dit, toute liste est une suite et tout tableau est une suite. La propriété commune à toutes les suites est que chacune est un ensemble ordonné d'éléments.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Refers to the default value.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T175926Z">
        <seg>Renvoie à la valeur par défaut.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Refers to the element for character @var{char} (supposing @var{char} is a valid character code).</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T175937Z">
        <seg>Renvoie à l'élément pour le caractère @var{char} (en supposant que @var{char} est un code caractère valide).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Refers to the value specified for the whole character set @var{charset} (@pxref{Character Sets}).</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T175944Z">
        <seg>Renvoie à la valeur spécifiée pour tout l'ensemble de caractères @var{charset} (@pxref{Character Sets}).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Refers to the whole range of character codes.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T180150Z">
        <seg>Renvoie à tout l'ensemble des codes de caractère.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Refresh Screen</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140216T092419Z">
        <seg>Rafraîchissement de l'écran</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Replace the specification with a single @samp{%}.  This format specification is unusual in that it does not use a value.  For example, @code{(format "%% %d" 30)} returns @code{"% 30"}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212049Z">
        <seg>Remplace la spécification par un simple @samp{%}.  Cette spécification de format est inhabituelle du fait qu'elle n'utilise pas de valeur. Par exemple, @code{(format "%% %d" 30)} retourne @code{"% 30"}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Replace the specification with notation for a floating point number, using either exponential notation or decimal-point notation, whichever is shorter.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212037Z">
        <seg>Remplace la spécification par la notation pour un nombre à virgule flottante, en utilisant la notation exponentielle ou la notation point décimal, celle qui est la plus courte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Replace the specification with the base-eight representation of an integer.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T155841Z">
        <seg>Remplace la spécification par la représentation en base huit d'un entier</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Replace the specification with the base-sixteen representation of an integer.  @samp{%x} uses lower case and @samp{%X} uses upper case.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T160350Z">
        <seg>Remplace la spécification par la représentation en base seize d'un entier.  @samp{%x} utilise les minuscules et @samp{%X} utilise les majuscules.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Replace the specification with the base-ten representation of an integer.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140502T104914Z">
        <seg>Remplace la spécification par la représentation en base dix d'un entier</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Replace the specification with the character which is the value given.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T160505Z">
        <seg>Remplace la spécification par le caractère qui est la valeur donnée.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Replace the specification with the decimal-point notation for a floating point number.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T165056Z">
        <seg>Remplace la spécification par la notation point décimal pour un nombre à virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Replace the specification with the exponential notation for a floating point number.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212028Z">
        <seg>Remplace la spécification par la notation exponentielle pour un nombre à virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Replace the specification with the printed representation of the object, made with quoting (that is, using @code{prin1}---@pxref{Output Functions}).  Thus, strings are enclosed in @samp{"} characters, and @samp{\} characters appear where necessary before special characters.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T155814Z">
        <seg>Remplace la spécification par la représentation affichée de l'objet, en utilisant les guillemets (c'est-à-dire, en utilisant @code{prin1}---@pxref{Output Functions}). Ainsi, les chaînes sont placées entres les caractères @samp{"}, et les caractères @samp{\} apparaissent si nécessaire devant les caractères spéciaux.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Replace the specification with the printed representation of the object, made without quoting (that is, using @code{princ}, not @code{prin1}---@pxref{Output Functions}).  Thus, strings are represented by their contents alone, with no @samp{"} characters, and symbols appear without @samp{\} characters.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T211828Z">
        <seg>Remplace la spécification par les représentations affichées de l'objet, sans utiliser les guillemets (c'est-à-dire, en utilisant @code{princ}, non pas @code{prin1}---@pxref{Output Functions}).  Ainsi, les chaînes sont représentées par leurs contenus seuls, sans les caractères @samp{"}, et les symboles apparaissent sans les caractères @samp{\}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Representation and range of floating point.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030742Z">
        <seg>Représentation et champ des nombres à virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Representation and range of integers.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Représentation et champ des nombres entiers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Return a new bool-vector of @var{length} elements, each one initialized to @var{initial}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Nicolas Lecompte" changedate="20140430T201921Z">
        <seg>Retourne un nouveau vecteur-booléen contenant un nombre @var{length} d'éléments, chacun initialisé à la valeur de l'argument @var{initial}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Return a newly created char-table, with subtype @var{subtype}.  Each element is initialized to @var{init}, which defaults to @code{nil}.  You cannot alter the subtype of a char-table after the char-table is created.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T191143Z">
        <seg>Retourne une char-table nouvellement créée avec le sous-type @var{subtype}. Chaque élément est initialisé à la valeur @var{init}, qui par défaut est @code{nil}. On ne peut pas changer le sous-type d'une char-table une fois qu'elle est créée.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Return non-nil iff @var{object} is one of the two canonical boolean values: @code{t} or @code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032750Z">
        <seg>Retourne non-nil si @var{objet} est une des deux valeurs booléennes
canoniques : @code{t} ou @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Returns @code{t} if @var{object} is a list, vector, string, bool-vector, or char-table, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T182458Z">
        <seg>Retourne @code{t} si @var{object} est une liste, un vecteur, une chaîne de caractères, un vecteur-booléen ou une table de chaînes de caractères ; sinon @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Returns a copy of @var{sequence}.  The copy is the same type of object as the original sequence, and it has the same elements in the same order.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T182323Z">
        <seg>Cette fonction retourne une copie de la suite @var{sequence}. Cette copie a le même type que l'objet de la suite d'origine. Elle a également les mêmes éléments dans le même ordre.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Rounding Operations</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Opérations d'arrondissage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Saving Abbrevs in Files</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T024608Z">
        <seg>Enregistrer des abréviations dans les fichiers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Saving abbrevs in files.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicoals" changedate="20140308T061234Z">
        <seg>Enregistre des abréviations dans les fichiers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Searching and Matching</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Recherches et correspondances</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Searching buffers for strings or regexps.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Rechercher une chaîne ou expression rationnelle dans un buffer.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>See @code{put} for an example.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Consultez @code{put} pour un exemple.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>See also @code{append} in @ref{Building Lists}, @code{concat} in @ref{Creating Strings}, and @code{vconcat} in @ref{Vector Functions}, for other ways to copy sequences.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T101728Z">
        <seg>Pour d'autres méthodes de copie de listes, voir également @code{append} dans @ref{Building Lists, @code{concat} dans @ref{Creating Strings}, et @code{vconcat} dans @ref{Vector Functions}. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>See also @code{string-bytes}, in @ref{Text Representations}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T175335Z">
        <seg>Voir aussi @code{string-bytes}, dans @ref{Text Representations}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>See also the @code{compare-buffer-substrings} function in @ref{Comparing Text}, for a way to compare text in buffers.  The function @code{string-match}, which matches a regular expression against a string, can be used for a kind of string comparison; see @ref{Regexp Search}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T210500Z">
        <seg>Voir aussi la fonction @code{compare-buffer-substrings}  dans @ref{Comparing Text}, pour la comparaison de texte dans les mémoires tampons. La fonction @code{string-match}, qui compare une expression régulière à une chaîne, peut être utilisée pour un type de comparaison de chaînes; voir @ref{Regular Expression Searching}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>See also the function @code{elt}, in @ref{Sequence Functions}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T173953Z">
        <seg>Voir aussi la fonction @code{elt}, dans la partie @ref{Sequence Functions}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>See also the function @code{format} in @ref{Formatting Strings}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T143203Z">
        <seg>Voir aussi la fonction @code{format} dans @ref{Formatting Strings}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Sequence Functions</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T174040Z">
        <seg>Fonctions pour les suites</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Sequences</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T174522Z">
        <seg>Suites</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Sequences, Arrays, and Vectors</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140413T231459Z">
        <seg>Suites, Tableaux et vecteurs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Setting Up Abbrev Mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Démarrer le mode abbrev</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Setting up Emacs for abbreviation.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Configuration d'Emacs pour l'abréviation.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Several keywords make sense in @code{make-hash-table}, but the only two that you really need to know about are @code{:test} and @code{:weakness}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T160933Z">
        <seg>Plusieurs mots-clés ont une signification pour la fonction @code{make-hash-table} mais les deux seuls qu'il faut vraiment connaître sont @code{:test} et @code{:weakness}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Shifting a pattern of bits two places to the left produces results like this (with 8-bit binary numbers):</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032319Z">
        <seg>Lorsqu'on décale de deux places une combinaison de chiffres binaires
vers la gauche, on produit les résultats suivants (avec des nombres
binaires de 8 bits) :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Since @code{format} interprets @samp{%} characters as format specifications, you should @emph{never} pass an arbitrary string as the first argument.  This is particularly true when the string is generated by some Lisp code.  Unless the string is @emph{known} to never include any @samp{%} characters, pass @code{"%s"}, described below, as the first argument, and the string as the second, like this:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T211738Z">
        <seg>Puisque @code{format} interprète les caractères @samp{%} comme des spécifications de format, vous ne devez @emph{jamais} passer une chaîne arbitraire comme premier argument. Cela est particulièrement vrai lorsque la chaîne est générée par du code Lisp. Si la chaîne n'est pas @emph{connue} pour ne jamais inclure aucun caractère @samp{%}, passez @code{"%s"}, décrit ci-dessous, comme premier argument, et la chaîne comme deuxième, comme ceci :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Since it is impossible to change the length of an existing string, it is an error if @var{obj} doesn't fit within @var{string}'s actual length, or if any new character requires a different number of bytes from the character currently present at that point in @var{string}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T134621Z">
        <seg>Puisqu'il est impossible de changer la longueur d'unechaîne existante, on a une erreur s'il se trouve que @var{obj} ne rentre pas dans la longueur de @var{string}, ou si un nouveau caractère nécessite un nombre d'octets différent de celui du caractère actuellement présent à cet indice dans @var{string}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Since strings are arrays, and therefore sequences as well, you can operate on them with the general array and sequence functions.  (@xref{Sequences Arrays Vectors}.)  For example, you can access or change individual characters in a string using the functions @code{aref} and @code{aset} (@pxref{Array Functions}).</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T102253Z">
        <seg>Puisque les chaînes de caractères sont des tableaux, et par conséquent des suites aussi, vous pouvez les traiter avec les fonctions générales des tableaux et des suites. (Voir la section @xref{Sequences, Arrays, and Vectors}.) Par exemple, on peut accéder aux caractères individuels d'une chaîne, ou les modifier, à l’aide des fonctions @code{aref} et @code{aset} (voir la section @xref{Functions that Operate on Arrays}).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Since the arithmetic functions do not check whether integers go outside their range, when you add 1 to 268,435,455, the value is the negative integer @minus{}268,435,456:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Puisque les fonctions arithmétiques ne vérifient pas si les nombres
entiers ne sont pas à l'extérieur de leur champ, quand vous
additionnez 1 à 268 435 455, la valeur est le nombre entier négatif
@minus{}268 435 456:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Some Terms</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Quelques termes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Some examples describe modifications to the contents of a buffer, by showing the ``before'' and ``after'' versions of the text.  These examples show the contents of the buffer in question between two lines of dashes containing the buffer name.  In addition, @samp{@point{}} indicates the location of point.  (The symbol for point, of course, is not part of the text in the buffer; it indicates the place @emph{between} two characters where point is currently located.)</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140424T015013Z">
        <seg>Quelques exemples décrivent des modifications du contenu d'un tampon,
en montrant « l'avant » et « l'après » des versions du texte. Ces
exemples montrent le contenu du tampon en question entre deux lignes
de tirets contenant le nom du tampon. En outre, le @samp{@point{}}
indique l'endroit du point. (Le symbole pour le point, naturellement,
n'est pas une partie du texte dans le tampon ; il indique l'endroit
@emph{entre} deux caractères où le point est actuellement localisé.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Some examples signal errors.  This normally displays an error message in the echo area.  We show the error message on a line starting with @samp{@error{}}.  Note that @samp{@error{}} itself does not appear in the echo area.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Quelques exemples de signal d'erreurs. Ceci montre normalement un
message d'erreur dans le secteur d'écho. Nous montrons le message
d'erreur sur une ligne commençant par @samp{@error{}}. Noter que
@samp{@error{}} lui-même n'apparaît pas dans le secteur d'écho.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Some language environments may modify the case conversions of @acronym{ASCII} characters; for example, in the Turkish language environment, the @acronym{ASCII} character @samp{I} is downcased into a Turkish ``dotless i''.  This can interfere with code that requires ordinary ASCII case conversion, such as implementations of @acronym{ASCII}-based network protocols.  In that case, use the @code{with-case-table} macro with the variable @var{ascii-case-table}, which stores the unmodified case table for the @acronym{ASCII} character set.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T201152Z">
        <seg>Certains environnements linguistiques peuvent modifier les conversions de casse des caractères @acronym{ASCII} ; par exemple, dans l'environnement de langue turc, le caractère @acronym{ASCII} @samp{I} se transforme en bas de casse et devient le ``i sans point'' turc. Cela peut interférer avec du code qui nécessite une conversion de casse @acronym{ASCII} ordinaire, comme les implémentations des protocoles de réseau basés sur @acronym{ASCII}. Dans ce cas, il faut utiliser la macro @code{with-case-table} avec la variable @var{ascii-case-table} qui stocke le tableau de casse non modifié pour l'ensemble de caractères @acronym{ASCII}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Some of these conventions are ignored for specification characters for which they do not make sense.  That is, @samp{%s}, @samp{%S} and @samp{%c} accept a width starting with 0, but still pad with @emph{spaces} on the left.  Also, @samp{%%} accepts a width, but ignores it.  Here are some examples of padding:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212227Z">
        <seg>Certaines de ces conventions sont ignorées par les caractères de spécification pour lesquels elles n'ont pas de sens.  Autrement dit, @samp{%s}, @samp{%S} et @samp{%c} acceptent une largeur commençant par zéro, mais ils font quand même du remplissage avec @emph{espaces} à gauche.  En outre, @samp{%%} accepte une largeur, mais l'ignore. Voici quelques exemples de bourrage :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Sometimes it is useful to compare numbers with @code{equal}; it treats two numbers as equal if they have the same data type (both integers, or both floating point) and the same value.  By contrast, @code{=} can treat an integer and a floating point number as equal.  @xref{Equality Predicates}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Parfois il est utile de comparer des nombres avec @code{equal}; les
deux nombres sont traités comme égaux s'ils ont le même type de
données (les deux sont des nombres entiers, ou à virgule flottante) et
la même valeur. En revanche, @code{=} peut traiter un nombre entier et
un nombre à virgule flottante en tant qu'égaux. @xref{Equality
Predicates}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Sometimes key sequences are represented as strings.  When a string is a key sequence, string elements in the range 128 to 255 represent meta characters (which are large integers) rather than character codes in the range 128 to 255.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T104949Z">
        <seg>Parfois, les séquences de touches sont représentées sous forme de chaînes de caractères.  Quand une chaîne est une suite de touche, les éléments de la chaîne dans la gamme de 128 à 255 représentent les meta-caractères (qui sont de large integers) plutôt que des codes de caractères dans la gamme de 128 à 255.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Sometimes to help describe one form we show another form that produces identical results.  The exact equivalence of two forms is indicated with @samp{@equiv{}}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Parfois pour aider à décrire un formulaire, nous montrons un autre
formulaire qui produit des résultats identiques. L'équivalence exacte
de deux formulaires est indiquée avec le @samp{@equiv{}}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Somewhat odd, but predictable, behavior can occur for certain ``non-greedy'' values of @var{separators} that can prefer empty matches over non-empty matches.  Again, such values rarely occur in practice:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T134048Z">
        <seg>Un comportement un peu bizarre mais prévisible peut se produire pour certaines valeurs de @var{separators} " peu gourmandes" qui peuvent préférer des correspondances vides à des correspondances non vides. Encore une fois, on rencontre ces valeurs rarement dans la pratique:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Special characteristics of Emacs Lisp vectors.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T174247Z">
        <seg>Caractéristiques particulières aux vecteurs Emacs Lisp.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Special form descriptions use a more complex notation to specify optional and repeated arguments because they can break the argument list down into separate arguments in more complicated ways.  @samp{@r{[}@var{optional-arg}@r{]}} means that @var{optional-arg} is optional and @samp{@var{repeated-args}@dots{}} stands for zero or more arguments.  Parentheses are used when several arguments are grouped into additional levels of list structure.  Here is an example:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T120331Z">
        <seg>Les descriptions de formulaire spécial emploient une notation plus
complexe pour indiquer des arguments facultatifs et répétés parce
qu'elles peuvent démonter la liste d'argument en arguments séparés de
manières plus compliquées. @samp{@r{[}@var{optional-arg}@r{]}}
signifie que @var{optional-arg} est facultatif et
@samp{@var{reapeated-args}@dots{}} représente zéro arguments ou
plus. Des parenthèses sont employées quand plusieurs arguments sont
groupés dans les niveaux additionnels de la structure de liste. Voici
un exemple :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Specifying abbreviations and their expansions.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Spécifier des abréviations et leurs expansions.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Standard Abbrev Tables</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Tables standard d'abréviations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Standard Errors</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Erreurs standard</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Standard Mathematical Functions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Fonctions mathématiques standards</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Storing a new element into the copy does not affect the original @var{sequence}, and vice versa.  However, the elements of the new sequence are not copies; they are identical (@code{eq}) to the elements of the original.  Therefore, changes made within these elements, as found via the copied sequence, are also visible in the original sequence.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T101223Z">
        <seg>Stocker un nouvel élément dans la copie ne change rien à la @var{sequence} d'origine, et vice versa. Cependant, les éléments de la nouvelle suite ne sont pas des copies ; ce sont les mêmes (@code{eq}) que ceux de la suite d'origine. Ainsi, les changements effectués sur ces éléments sont visibles dans les deux suites, celle d'origine et celle copiée.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>String Basics</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T103141Z">
        <seg>Notions de base sur les chaînes et les caractères</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>String Conversion</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T102628Z">
        <seg>Conversion des caractères et des chaînes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>String and Character Basics</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T103230Z">
        <seg>Chaînes de caractères et caractères : les bases</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Strings and Characters</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Chaînes et caractères</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Strings are printed in a way that shows the contents more clearly as text.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T152758Z">
        <seg>Les tableaux type @code{strings} s'affichent d'une façon qui montre plus clairement le contenu car il s'agit de texte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Strings are useful for holding regular expressions.  You can also match regular expressions against strings with @code{string-match} (@pxref{Regexp Search}).  The functions @code{match-string} (@pxref{Simple Match Data}) and @code{replace-match} (@pxref{Replacing Match}) are useful for decomposing and modifying strings after matching regular expressions against them.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T104540Z">
        <seg>Les chaînes de caractères sont utiles pour contenir les expressions régulières. On peut également faire correspondre les expressions régulières et les chaînes avec @code{string-match} (voir la section @xref{Regular Expression Searching}). Les fonctions @code{match-string} (voir la section @xref{Simple Match Data Access}) et @code{replace-match} (voir la section @xref{Replacing the Text that Matched}) sont utiles pour la décomposition et la modification des chaînes après les avoir transtypées en expressions régulières.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Strings can hold text properties.  @xref{Text Properties}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T152805Z">
        <seg>Les tableaux type @code{strings} peuvent contenir des propriétés textuelles. @xref{Text Properties}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Strings cannot hold characters that have the hyper, super or alt modifiers; they can hold @acronym{ASCII} control characters, but no other control characters.  They do not distinguish case in @acronym{ASCII} control characters.  If you want to store such characters in a sequence, such as a key sequence, you must use a vector instead of a string.  @xref{Character Type}, for more information about the representation of meta and other modifiers for keyboard input characters.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T104328Z">
        <seg>Les chaînes de caractères ne peuvent pas contenir de caractères qui sont la combinaison entre un caractère quelconque et la touche hyper, super ou atl ; elles peuvent contenir des caractères de contrôle @acronym{ASCII}, mais pas d'autres caractères de contrôle. Elles ne distinguent pas la casse sur les caractères de contrôles @acronym{ASCII}. Si vous souhaitez stocker ces caractères sous la forme d’une suite, comme une suite de touches, vous devez utiliser un vecteur plutôt qu’une chaîne. Voir la section @xref{Character Type}, pour plus d’informations sur la représentation des modificateurs meta et autres pour les caractères saisis au clavier.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Strings, and functions that work on them.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Chaînes et fonctions qui sont basés sur elles.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Symbol Components</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Composants des symboles</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Symbol Type</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le type symbole</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Symbols</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Symboles</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Symbols are also allowed as arguments, in which case their print names are used.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T140253Z">
        <seg>Les symboles sont aussi autorisés comme arguments, auquel cas c'est leurs noms qui sont utilisés.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Symbols have names, values, function definitions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les symboles ont des noms, des valeurs, des définitions de fonction</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Symbols represent names, uniquely.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les symboles représentent des noms, de façon unique.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Syntax Tables</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Tables de syntaxe</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Tables: Abbrev Tables</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T120331Z">
        <seg>Tables : Tables d'abréviations</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Testing for numbers.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Tester les nombres.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Testing whether an object is a string or char.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T102134Z">
        <seg>Test pour voir si un objet est une chaîne ou un caractères.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Text</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Texte</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Text Comparison</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T102417Z">
        <seg>Comparaison des caractères et des chaînes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The @code{-} function serves two purposes: negation and subtraction.  When @code{-} has a single argument, the value is the negative of the argument.  When there are multiple arguments, @code{-} subtracts each of the @var{more-numbers-or-markers} from @var{number-or-marker}, cumulatively.  If there are no arguments, the result is 0.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032036Z">
        <seg>La fonction @code{-} atteint deux objectifs : négation et soustraction.
Quand @code{-} a un argument simple, la valeur est le négatif de
l'argument. Quand il y a des arguments multiples, @code{-} soustrait
chacun des @var{more-numbers-or-markers} de @var{number-or-marker}, de
manière cumulée. S'il n'y a aucun argument, le résultat est 0.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The @code{append} function also provides a way to convert a vector into a list with the same elements:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T104241Z">
        <seg>La fonction @code{append} permet aussi la conversion d'un vecteur en une liste contenant les mêmes éléments :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The @code{concat} function always constructs a new string that is not @code{eq} to any existing string.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T103321Z">
        <seg>La fonction @code{concat} construit toujours une nouvelle chaîne qui n'est @code{eq} à aucune chaîne existante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The @code{vconcat} function also allows byte-code function objects as arguments.  This is a special feature to make it easy to access the entire contents of a byte-code function object.  @xref{Byte-Code Objects}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T104132Z">
        <seg>La fonction @code{vconcat} prend aussi comme arguments des objets de fonctions en code octet. C'est une caractéristique particulière pour faciliter l'accès à tout le contenu d'un objet d'une fonction en code octet. @xref{Byte-Code Objects}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The @code{wholenump} predicate (whose name comes from the phrase ``whole-number-p'') tests to see whether its argument is a nonnegative integer, and returns @code{t} if so, @code{nil} otherwise.  0 is considered non-negative.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140424T015013Z">
        <seg>L'attribut @code{wholenump} (dont le nom vient de l'expression
« whole-number-p ») teste pour voir si son argument est un nombre
entier non négatif, et renvoie le @code{t} si oui, @code{nil}
autrement. 0 est considéré non négatif.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The @code{with-case-table} macro saves the current case table, makes @var{table} the current case table, evaluates the @var{body} forms, and finally restores the case table.  The return value is the value of the last form in @var{body}.  The case table is restored even in case of an abnormal exit via @code{throw} or error (@pxref{Nonlocal Exits}).</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T201049Z">
        <seg>La macro @code{with-case-table} enregistre le tableau de casse courant, le définit à la valeur du paramètre @var{table}, évalue la forme du paramètre @var{body}, et enfin restaure le tableau de casse. La valeur de retour est la valeur de la dernière forme de @var{body}. Le tableau de casse est restauré même dans le cas où il y a une sortie anormale par le déclenchement d'une exception (@code{throw}) ou par une erreur (@pxref{Nonlocal Exits})</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The @dfn{function cell} holds the function definition of the symbol.  When a symbol is used as a function, its function definition is used in its place.  This cell is also used to make a symbol stand for a keymap or a keyboard macro, for editor command execution.  Because each symbol has separate value and function cells, variables names and function names do not conflict.  See @code{symbol-function} in @ref{Function Cells}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T195558Z">
        <seg>La @dfn{cellule de fonction} contient la définition de la fonction du symbole. Quand un symbole est utilisé comme fonction, sa définition de fonction est utilisée à la place. Cette cellule est aussi utilisée pour qu'un symbole représente une touche de clavier ou une combinaison de touches pour que l'éditeur commande l'exécution. Comme chaque symbole a des valeurs et des cellules de fonction séparées, les noms de variables et les noms de fonctions ne rentrent pas en conflit. Voir @code{symbol-function} dans @ref{Function Cells}. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The @dfn{print name cell} holds a string that names the symbol for reading and printing.  See @code{symbol-name} in @ref{Creating Symbols}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T205635Z">
        <seg>La @dfn{cellule de nom d'affichage} contient une chaîne de caractère qui nomme le symbole pour la lecture et l'affichage. Voir @code{symbol-name} dans @ref{Creating Symbols}. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The @dfn{property list cell} holds the property list of the symbol.  See @code{symbol-plist} in @ref{Property Lists}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T195721Z">
        <seg>La @dfn{cellule de liste de propriétés} contient la liste de propriétés du symbole. Voir @code{symbol-plist} dans @ref{Property Lists}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The @dfn{value cell} holds the current value of the symbol as a variable.  When a symbol is used as a form, the value of the form is the contents of the symbol's value cell.  See @code{symbol-value} in @ref{Accessing Variables}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T195455Z">
        <seg>La @dfn{cellule de valeur} contient la valeur actuelle du symbole comme variable. Quand un symbole est utilisé comme forme, la valeur de la forme est le contenu de la cellule de valeur du symbole. Voir @code{symbol-value} dans @ref{Accessing Variable Values}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The Case Table</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212920Z">
        <seg>La table de casse</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The Lisp reader reads an integer as a sequence of digits with optional initial sign and optional final period.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le lecteur de Lisp lit un nombre entier comme une séquence de chiffres
avec le signe initial et le point final facultatifs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The Predicates for Strings</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T105242Z">
        <seg>Les prédicats pour les chaînes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The appearance of the keyword @code{&amp;optional} in the argument list indicates that the subsequent arguments may be omitted (omitted arguments default to @code{nil}).  Do not write @code{&amp;optional} when you call the function.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>L'apparition du mot-clé @code{&amp;optional} dans la liste d'argument
indique que les arguments suivants peuvent être omis (les arguments
omis se transfèrent comme @code{nil}). Ne pas écrire @code{&amp;optional}
quand vous appelez la fonction.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The argument @var{hook} is a function or @code{nil}.  If @var{hook} is non-@code{nil}, then it is called with no arguments after the abbrev is replaced with @var{expansion}; point is located at the end of @var{expansion} when @var{hook} is called.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140216T051432Z">
        <seg>L'argument @var{hook} est une fonction ou @code{nil}. Si @var{hook} n'est pas @code{nil} alors il est appelé sans arguments après que l'abbréviation soit remplacée par @var{expansion}. Le point est situé à la fin de @var{expansion} quand @var{hook} est appelée.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The argument @var{name} should be a string.  The argument @var{expansion} is normally the desired expansion (a string), or @code{nil} to undefine the abbrev.  If it is anything but a string or @code{nil}, then the abbreviation ``expands'' solely by running @var{hook}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140216T051209Z">
        <seg>L'argument @var{name} doit être une chaîne de caractères. L'argument @var{expansion} est normalement l'expansion souhaitée (une chaîne de caractères), or @code{nil} pour éliminer une abréviation. S'il n'est ni une chaîne de caractères ni @code{nil} alors l'abréviation se "développe" exclusivement en exécutant @var{hook}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The authors, editors, and sponsors of this manual.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les auteurs, les rédacteurs, et les commanditaires de ce manuel.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The bitwise operations in Emacs Lisp apply only to integers.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les opérations de bits en Emacs Lisp s'appliquent seulement aux
nombres entiers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The canonicalize table maps all of a set of case-related characters into a particular member of that set.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T213042Z">
        <seg>La table "canonicalize" associe l'ensemble entier d'un jeu de caractères liés à la casse à un membre particulier de ce jeu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The case table for the @acronym{ASCII} character set.  This should not be modified by any language environment settings.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140502T102351Z">
        <seg>Le tableau de casse pour l'ensemble de caractères @acronym{ASCII}. Il ne faut pas que les paramètres d'environnement de langue modifient cela.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The category---function, variable, or whatever---appears at the beginning of the line.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La catégorie---fonction, variable, ou quoi que soit---est
imprimé à côté de la marge.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The category---function, variable, or whatever---is printed next to the right margin.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La catégorie---fonction, variable, ou quoi que soit---est
imprimé à côté de la marge.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The character case functions change the case of single characters or of the contents of strings.  The functions normally convert only alphabetic characters (the letters @samp{A} through @samp{Z} and @samp{a} through @samp{z}, as well as non-@acronym{ASCII} letters); other characters are not altered.  You can specify a different case conversion mapping by specifying a case table (@pxref{Case Tables}).</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212441Z">
        <seg>Les fonctions de casse de caractère changent la casse de caractères simples ou du contenu des chaînes. Normalement, les fonctions convertissent seulement les caractères alphabétiques (les lettres de @samp{A} à @samp{Z} et de @samp{a} à @samp{z}, ainsi que les lettres non @acronym{ASCII}); les autres caractères ne sont pas modifiés. On peut spécifier un mappage différent de conversion de casse en spécifiant un tableau de casse (@pxref{Case Tables}).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The characters in @var{string}, other than the format specifications, are copied directly into the output, including their text properties, if any.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140502T104531Z">
        <seg>Les caractères dans @var{string}, autres que les spécifications de format, sont directement copiés dans la sortie, y compris leurs propriétés textuelles, s'ils en possèdent.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The correspondences in a hash table are in no particular order.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T212653Z">
        <seg>Les correspondances dans une table de hachage n'ont pas d'ordre particulier.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The default for @var{weak} is @code{nil}, so that all keys and values referenced in the hash table are preserved from garbage collection.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T214429Z">
        <seg>La valeur par défaut pour @var{weak} est @code{nil}. Ainsi toutes les clés et toutes les valeurs référencées dans la table de hachage sont protégées du ramasse-miettes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The default size is 65.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T214452Z">
        <seg>La valeur par défaut est 65.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The default value is 1.5.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T214717Z">
        <seg>La valeur par défaut est 1.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The default value of @var{separators} for @code{split-string}.  Its usual value is @w{@code{"[ \f\t\n\r\v]+"}}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T134150Z">
        <seg>La valeur par défaut de @var{separators} pour @code{split-string}. La valeur habituelle est @w{@code{"[ \f\t\n\r\v]+"}}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The definition of a word is any sequence of consecutive characters that are assigned to the word constituent syntax class in the current syntax table (@pxref{Syntax Class Table}).</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212811Z">
        <seg>On définit un mot comme étant toute suite de caractères consécutifs qui sont attribués à la classe de syntaxe d'un composant de mot dans la syntaxe en cours (@pxref{Syntax Class Table}).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The description follows on succeeding lines, sometimes with examples.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La description suit les lignes réussies, parfois avec des exemples.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The elements of an array may be referenced or changed with the functions @code{aref} and @code{aset}, respectively (@pxref{Array Functions}).</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140505T200638Z">
        <seg>Les éléments d'un tableau peuvent être référencés ou changés, respectivement avec les fonctions @code{aref} et @code{aset}, (@pxref{Array Functions}).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The elements of vectors and lists may be any Lisp objects.  The elements of strings are all characters.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T173858Z">
        <seg>Les éléments contenus dans les vecteurs ou les listes peuvent être n'importe quel objet Lisp. Les éléments contenus dans les chaînes de caractères sont tous des caractères.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The equivalences table maps each one of a set of case-related characters into the next character in that set.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T213056Z">
        <seg>La table "equivalences" associe chacun des jeux de caractères liés à la casse à au  caractère suivant dans ce jeu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The examples below use the characters @samp{X} and @samp{x} which have @acronym{ASCII} codes 88 and 120 respectively.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T200306Z">
        <seg>Les exemples ci-dessous utilisent les caractères @samp{X} et @samp{x} qui ont respectivement pour code @acronym{ASCII} 88 et 120.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The extra table @var{canonicalize} maps each character to a canonical equivalent; any two characters that are related by case-conversion have the same canonical equivalent character.  For example, since @samp{a} and @samp{A} are related by case-conversion, they should have the same canonical equivalent character (which should be either @samp{a} for both of them, or @samp{A} for both of them).</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T213127Z">
        <seg>La table supplémentaire @var{canonicalize} associe chaque caractère à un équivalent canonique; deux caractères qui sont liés par la conversion de casse ont le même caractère équivalent canonique. Par exemple, puisque @samp{a} et @samp{A} sont liés par la conversion de casse, ils devraient avoir le même caractère équivalent canonique (qui devrait être soit @samp{a} pour les deux, ou @samp{A} pour les deux).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The extra table @var{equivalences} is a map that cyclically permutes each equivalence class (of characters with the same canonical equivalent).  (For ordinary @acronym{ASCII}, this would map @samp{a} into @samp{A} and @samp{A} into @samp{a}, and likewise for each set of equivalent characters.)</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T213140Z">
        <seg>La table supplémentaire @var{equivalences} est une mappe qui permute cycliquement chaque classe d'équivalence (de caractères avec le même équivalent canonique).  (Pour le banal @acronym{ASCII}, on aurait l'association de @samp{a} à @samp{A} et de @samp{A} à @samp{a}, et de même pour chaque ensemble de caractères équivalents.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The first element of an array has index zero, the second element has index 1, and so on.  This is called @dfn{zero-origin} indexing.  For example, an array of four elements has indices 0, 1, 2, @w{and 3}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T173705Z">
        <seg>Le premier élément d'un tableau a comme indice zéro, le second élément l'indice 1, et ainsi de suite. On appelle cela l'indexation @dfn{origine-zéro}. Par exemple, un tableau de quatre éléments a les indices 0, 1, 2 et 3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The flag @samp{#} specifies an ``alternate form'' which depends on the format in use.  For @samp{%o} it ensures that the result begins with a @samp{0}.  For @samp{%x} and @samp{%X}, it prefixes the result with @samp{0x} or @samp{0X}.  For @samp{%e}, @samp{%f}, and @samp{%g}, the @samp{#} flag means include a decimal point even if the precision is zero.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212429Z">
        <seg>L’indicateur @samp{#} spécifie une "forme secondaire " qui dépend du format utilisé.  Pour @samp{%o} il fait en sorte/garantit que le résultat commence par @samp{0}.  Pour @samp{%x} et @samp{%X}, il place devant le résultat/il met en préfixe devant le résultat @samp{0x} ou @samp{0X}.  Pour @samp{%e}, @samp{%f}, et @samp{%g}, le indicateur @samp{#} signifie l'inclusion d'un point décimal même si la précision est égale à zéro.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The following diagram shows the relationship between these types:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T173810Z">
        <seg>Le schéma suivant montre les relations entre ces types :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The following functions create strings, either from scratch, or by putting strings together, or by taking them apart.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T110030Z">
        <seg>Les fonctions suivantes permettent de créer des chaînes, soit en partant de zéro, soit en réunissant des chaînes, ou en les désassemblant.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The following three functions are convenient subroutines for packages that define non-@acronym{ASCII} character sets.  They modify the specified case table @var{case-table}; they also modify the standard syntax table.  @xref{Syntax Tables}.  Normally you would use these functions to change the standard case table.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T152323Z">
        <seg>Les trois fonctions suivantes sont des sous-routines pratiques pour les paquetages qui définissent des ensembles de caractères non @acronym{ASCII}. Elles modifient le tableau de casse spécifié @var{case-table} ; elles modifient également le tableau de syntaxe standard. @xref{Syntax Tables}. Normalement, il faut utiliser ces fonctions pour changer le tableau de casse standard.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The following two variables have existed since Emacs version 19.23:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030441Z">
        <seg>Les deux variables suivantes existent depuis la version 19.23 d'Emacs :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The format we use for buffer contents in examples.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le format que nous employons pour le contenu de tampons dans les exemples.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The format we use for examples of errors.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le format que nous employons pour des exemples d'erreurs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The format we use for examples of evaluation.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le format que nous employons pour des exemples de l'évaluation.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The format we use when examples print text.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le format que nous employons quand les exemples affichent du texte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The four functions @code{symbol-name}, @code{symbol-value}, @code{symbol-plist}, and @code{symbol-function} return the contents of the four cells of a symbol.  Here as an example we show the contents of the four cells of the symbol @code{buffer-file-name}:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T145446Z">
        <seg>Les quatre fonctions @code{symbol-name}, @code{symbol-value}, @code{symbol-plist} et @code{symbol-function} retournent les contenus des quatre cellules d'un symbole. Ici par exemple, on montre les contenus des quatre cellules du symbole @code{butter-file-name} :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The function @code{foo} subtracts @var{integer1} from @var{integer2}, then adds all the rest of the arguments to the result.  If @var{integer2} is not supplied, then the number 19 is used by default.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La fonction @code{foo} soustrait @var{integer1} de @var{integer2},
puis ajoute tout reste des arguments au résultat. Si @var{integer2}
n'est pas fourni, alors le numéro 19 est appliqué par défaut.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The function @code{lsh}, like all Emacs Lisp arithmetic functions, does not check for overflow, so shifting left can discard significant bits and change the sign of the number.  For example, left shifting 268,435,455 produces @minus{}2 on a 29-bit machine:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032334Z">
        <seg>La fonction @code{lsh}, comme toutes les fonctions arithmétiques
d'Emacs Lisp, ne vérifie pas le débordement, ainsi de décalage à
gauche peut changer le bit fort et changer le signe du nombre. Par
exemple, le décalage à gauche de 268.435.455 produit @minus{}2 sur une
machine de 29 bits :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The function @code{string=} ignores the text properties of the two strings.  When @code{equal} (@pxref{Equality Predicates}) compares two strings, it uses @code{string=}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T135545Z">
        <seg>La fonction @code{string=} ignore les propriétés textuelles des deux chaînes. Quand @code{equal} (voir la section @pxref{Equality Predicates}) compare deux chaînes, il utilise @code{string=}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The function @var{hash-fn} should accept one argument, a key, and return an integer that is the ``hash code'' of that key.  For good results, the function should use the whole range of integer values for hash codes, including negative integers.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T144108Z">
        <seg>La fonction @var{hash-fn} doit prendre un argument, une clé, et elle retourne un entier relatif qui est le ``code de hachage'' de cette clé. Pour obtenir de bons résultats, la fonction doit utiliser tout l'ensemble des entiers relatifs pour les valeurs des codes de hachage, y compris les entiers négatifs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The function @var{test-fn} should accept two arguments, two keys, and return non-@code{nil} if they are considered ``the same.''</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T144031Z">
        <seg>La fonction @var{test-fn} doit prendre deux arguments, deux clés, et elle retourne non-@code{nil} s'ils sont considérés comme ``identiques''.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The function cell or the value cell may be @dfn{void}, which means that the cell does not reference any object.  (This is not the same thing as holding the symbol @code{void}, nor the same as holding the symbol @code{nil}.)  Examining a function or value cell that is void results in an error, such as @samp{Symbol's value as variable is void}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T200728Z">
        <seg>La cellule de fonction ou cellule de valeur peut être @dfn{void}, ce qui signifie que la cellule ne référence aucun objet. (Cela n'est pas comme contenir le symbole @code{void} ou le symbole @code{nil}.) Interroger une cellule de fonction ou de valeur qui est void résulte en une erreur, comme @samp{Symbol's value as variable is void}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The functions @code{ffloor}, @code{fceiling}, @code{fround}, and @code{ftruncate} take a floating point argument and return a floating point result whose value is a nearby integer.  @code{ffloor} returns the nearest integer below; @code{fceiling}, the nearest integer above; @code{ftruncate}, the nearest integer in the direction towards zero; @code{fround}, the nearest integer.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032308Z">
        <seg>Les fonctions @code{ffloor}, @code{fceiling}, @code{fround}, et
@code{ftruncate} prennent un argument à virgule flottante et renvoient
un monbre à virgule flottante représentant la valeur d'un nombre
entier voisin. @code{ffloor} renvoie le nombre entier le plus proche
inférieur ; @code{fceiling}, le nombre entier le plus proche supérieur ;
@code{ftruncate}, le nombre entier le plus proche de zéro ;
@code{fround}, le nombre entier le plus proche.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The functions in this section test for numbers, or for a specific type of number.  The functions @code{integerp} and @code{floatp} can take any type of Lisp object as argument (they would not be of much use otherwise), but the @code{zerop} predicate requires a number as its argument.  See also @code{integer-or-marker-p} and @code{number-or-marker-p}, in @ref{Predicates on Markers}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les fonctions dans cette section testent les nombres, ou un type
spécifique de nombre. Les fonctions @code{integerp} et @code{floatp}
peuvent prendre n'importe quel type d'objet de Lisp comme argument
(ils ne seraient pas utiles autrement), mais l'attribut @code{zerop}
exige un nombre en tant qu'argument. Voir également
@code{integer-or-marker-p} et @code{number-ou-marker-p}, dans le
@ref{Predicates on Markers}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The general sequence functions @code{copy-sequence} and @code{length} are often useful for objects known to be arrays.  @xref{Sequence Functions}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T185149Z">
        <seg>Les fonctions générales sur les suites, @code{copy-sequence} et @code{length}, sont souvent utiles pour les objets de type tableaux. @xref{Sequence Functions}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The integer @minus{}1 looks like this:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le nombre entier @minus{}1 ressemble à ceci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The keyword @code{&amp;rest} (which must be followed by a single argument name) indicates that any number of arguments can follow.  The single argument name following @code{&amp;rest} will receive, as its value, a list of all the remaining arguments passed to the function.  Do not write @code{&amp;rest} when you call the function.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le mot-clé @code{&amp;rest} (qui doit être suivi d'un nom d'argument
simple) indique qu'un certain nombre d'arguments va suivre. Le nom
d'argument simple suivant @code{&amp;rest} recevra, comme valeur, une
liste de tous arguments restants à passer à la fonction. Ne pas écrire
@code{&amp;rest} quand vous appelez la fonction.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The length of a string (like any array) is fixed, and cannot be altered once the string exists.  Strings in Lisp are @emph{not} terminated by a distinguished character code.  (By contrast, strings in C are terminated by a character with @acronym{ASCII} code 0.)</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T103413Z">
        <seg>La longueur d’une chaîne de caractères (comme tout tableau) est fixe et ne peut pas être modifiée une fois la chaîne créée. Dans le langage Lisp, les chaînes @emph{ne} se terminent @emph{pas} par un code de caractère distinctif. (Contrairement aux chaînes de caractères en C qui se terminent par un caractère de code @acronym{ASCII} 0.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The length of the array is fixed once you create it; you cannot change the length of an existing array.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T173716Z">
        <seg>La longueur d'un tableau est fixe une fois qu'il a été créé. On ne peut pas changer la longueur d'un tableau existant.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The major version number of Emacs, as an integer.  For Emacs version 20.3, the value is 20.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le numéro principal de version d'Emacs, comme nombre entier. Pour la
version 20.3 d'Emacs, la valeur est 20.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The manual should be fully correct in what it does cover, and it is therefore open to criticism on anything it says---from specific examples and descriptive text, to the ordering of chapters and sections.  If something is confusing, or you find that you have to look at the sources or experiment to learn something not covered in the manual, then perhaps the manual should be fixed.  Please let us know.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025900Z">
        <seg>Le manuel devrait être entièrement correct dans ce qu'il couvre, et il
est donc soumis à la critique sur tout ce qu'il indique---des exemples
spécifiques et du texte descriptif, à l'ordre des chapitres et des
sections---. Si quelque chose est peu clair, ou si vous constatez que
vous devez regarder les sources ou expérimenter pour apprendre quelque
chose non couvert dans le manuel, alors peut-être faudrait-il
l'inclure dans le manuel. Merci de nous faire le savoir.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The minor version number of Emacs, as an integer.  For Emacs version 20.3, the value is 3.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le numéro de version mineur d'Emacs, comme nombre entier. Pour la
version 20.3 d'Emacs, la valeur est 3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The most basic way to alter the contents of an existing string is with @code{aset} (@pxref{Array Functions}).  @code{(aset @var{string} @var{idx} @var{char})} stores @var{char} into @var{string} at index @var{idx}.  Each character occupies one or more bytes, and if @var{char} needs a different number of bytes from the character already present at that index, @code{aset} signals an error.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T134357Z">
        <seg>Le moyen le plus simple pour modifier le contenu d'une chaîne existante est d'utiliser @code{aset} (voir la section @pxref{Functions that Operate on Arrays}). @code{(aset @var{string} @var{idx} @var{char}) stocke @var{char} dans @var{string} à l'indice @var{idx}. Chaque caractère occupe un ou plusieurs octets, et si @var{char} a besoin d'un nombre d'octets différent de celui du caractère déjà présent à cet indice, @code{aset} soulève une erreur.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The negative integer, @minus{}5, is creating by subtracting 4 from @minus{}1.  In binary, the decimal integer 4 is 100.  Consequently, @minus{}5 looks like this:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le nombre entier négatif, @minus{}5, est créé en soustrayant 4 de
@minus{}1. Dans la base binaire, le nombre entier décimal 4 est
100. En conséquence, @minus{}5 ressemble à ceci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The parsing skips spaces and tabs at the beginning of @var{string}, then reads as much of @var{string} as it can interpret as a number in the given base.  (On some systems it ignores other whitespace at the beginning, not just spaces and tabs.)  If the first character after the ignored whitespace is neither a digit in the given base, nor a plus or minus sign, nor the leading dot of a floating point number, this function returns 0.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T210935Z">
        <seg>L'analyse syntaxique ignore les espaces et les tabulations au début de @var{string}, puis lit @var{string} tant que elle peut l'interpréter comme un nombre dans la base donnée.  (Sur certains systèmes, elle ignore les autres blancs au début, pas seulement les espaces et les tabulations.)  Si le premier caractère après le "whitespace" ignoré n'est ni un chiffre dans la base donnée, ni un signe plus ou moins, ni le premier point d'un "float", cette fonction retourne 0.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The principal function for creating a hash table is @code{make-hash-table}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T213456Z">
        <seg>La fonction principale pour créer une table de hachage est @code{make-hash-table}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The print name cell always holds a string, and cannot be changed.  The other three cells can be set individually to any specified Lisp object.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T210025Z">
        <seg>La cellule du nom d'affichage contient toujours une chaîne de caractères et ne peut pas être changée. Les trois autres cellules peuvent être assignées individuellement à n'importe quel objet Lisp.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The print name cell holds the string that is the name of the symbol.  Since symbols are represented textually by their names, it is important not to have two symbols with the same name.  The Lisp reader ensures this: every time it reads a symbol, it looks for an existing symbol with the specified name before it creates a new one.  (In GNU Emacs Lisp, this lookup uses a hashing algorithm and an obarray; see @ref{Creating Symbols}.)</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T182923Z">
        <seg>La cellule du nom d'affichage contient la chaîne de caractère qui est le nom du symbole. Comme les symboles sont représentés textuellement par leurs noms, il est important de ne pas avoir deux symboles avec le même nom. Le lecteur Lisp s'assure de ceci : à chaque fois qu'il lit un symbole, il regarde s'il existe déjà un symbole avec le même nom avant de créer le nouveau. (Dans GNU Emacs Lisp, cette recherche utilise un algorithme de hachage et un obarray ; voir @ref{Creating Symbols}.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The property list cell normally should hold a correctly formatted property list (@pxref{Property Lists}), as a number of functions expect to see a property list there.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T145312Z">
        <seg>Normalement, il faut que la cellule de liste de propriétés contienne une liste de propriétés correctement formatée (@pxref{Property Lists}) vu qu'un certain nombre de fonctions s'attendent à voir une liste de propriétés à cet endroit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The range of values for an integer depends on the machine.  The minimum range is @minus{}268435456 to 268435455 (29 bits; i.e.,</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le champ des valeurs pour un nombre entier dépend de la machine. Le
champ minimum est @minus{}268435456 à 268435455 (29 bits; c.-à-d.,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The read-syntax for floating point numbers requires either a decimal point (with at least one digit following), an exponent, or both.  For example, @samp{1500.0}, @samp{15e2}, @samp{15.0e2}, @samp{1.5e3}, and @samp{.15e4} are five ways of writing a floating point number whose value is 1500.  They are all equivalent.  You can also use a minus sign to write negative floating point numbers, as in @samp{-1.0}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La syntaxe de lecture pour des nombres à virgule flottante exige une
virgule décimale (avec au moins un chiffre suivant), un exposant, ou
les deux. Par exemple, @samp{1500.0}, @samp{15e2}, @samp{15.0e2},
@samp{1.5e3}, et @samp{.15e4} sont cinq manières d'écrire le nombre à
virgule flottante dont la valeur est 1500. Ils sont tous
équivalents. Vous pouvez également employer un signe moins pour écrire
des nombres négatifs à virgule flottante, comme dans @samp{- 1.0}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The result is not @code{("" "two" "words" "")}, which would rarely be useful.  If you need such a result, use an explicit value for @var{separators}:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T133435Z">
        <seg>Le résultat n'est pas @code{("" "deux" "mots" "")}, qui serait rarement utile. Si vous voulez un tel résultat, utilisez une valeur explicite pour @var{separators} :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The return value is always @code{nil}; to make this function useful, @var{function} should have side effects.  For example, here is how to examine each element of the syntax table:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Nicolas Lecompte" changedate="20140428T193115Z">
        <seg>La valeur en retour est toujours @code{nil} ; pour rendre cette fonction utile, @var{function} devrait avoir des effets secondaires. Par exemple, voici comment examiner chaque élément de la table de syntaxe :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The set of abbrevs currently in effect is recorded in an @dfn{abbrev table}.  Each buffer has a local abbrev table, but normally all buffers in the same major mode share one abbrev table.  There is also a global abbrev table.  Normally both are used.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicoals" changedate="20140307T210642Z">
        <seg>Actuellement, l'ensemble des abréviations est enregistré dans un
@dfn{abbrev table}. Chaque tampon a une table locale d'abréviations,
mais normalement tous les tampons dans le même mode majeur partage une
table principale d'abréviations. Il y a donc une table d'abréviation
globale. Normalement toutes les deux sont employées.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The specified functions are stored in the property list of @var{name} under the property @code{hash-table-test}; the property value's form is @code{(@var{test-fn} @var{hash-fn})}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140505T195018Z">
        <seg>Les fonctions spécifiées sont stockées dans la liste de propriétés de @var{name} sous la propriété @code{hash-table-test} ; la forme de la propriété de la valeur est @code{(@var{test-fn} @var{hash-fn})}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The strings are both converted to multibyte for the comparison (@pxref{Text Representations}) so that a unibyte string and its conversion to multibyte are always regarded as equal.  If @var{ignore-case} is non-@code{nil}, then case is ignored, so that upper case letters can be equal to lower case letters.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T140532Z">
        <seg>Les deux chaînes sont converties en multi-octet pour la comparaison (voir la section @pxref{Text Representations}) de telle sorte qu'une chaîne uni-octet et sa conversion en multi-octet sont toujours considérées comme égales. Si @var{ignore-case} est non @code{nil}, alors la casse est ignorée, de sorte que les lettres majuscules peuvent être égales aux minuscules.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The syntax for integers in bases other than 10 uses @samp{#} followed by a letter that specifies the radix: @samp{b} for binary, @samp{o} for octal, @samp{x} for hex, or @samp{@var{radix}r} to specify radix @var{radix}.  Case is not significant for the letter that specifies the radix.  Thus, @samp{#b@var{integer}} reads @var{integer} in binary, and @samp{#@var{radix}r@var{integer}} reads @var{integer} in radix @var{radix}.  Allowed values of @var{radix} run from 2 to 36.  For example:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T120811Z">
        <seg>La syntaxe pour des nombres entiers dans les bases autres que la base
10 utilise @samp{#} suivi d'une lettre qui indique la base : @samp{b}
pour binaire, @samp{o} pour octal, @samp{x} pour hex, ou
@samp{@var{base}r} pour indiquer la base @var{base}. Le cas n'est pas
significatif pour la lettre qui indique la base. Ainsi, le
@samp{#b@var{integer}} lit @var{integer} en base binaire, et le
@samp{#@var{base}r@var{integer}} lit @var{integer} dans la base
@var{base}. Les valeurs permises de @var{base} vont de 2 à 36. Par
exemple:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The upcase table maps each character into the corresponding upper case character.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T213024Z">
        <seg>La table upcase associe à chaque caractère à son caractère majuscule correspondant.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The value @code{-0.0} is distinguishable from ordinary zero in @acronym{IEEE} floating point, but Emacs Lisp @code{equal} and @code{=} consider them equal values.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031811Z">
        <seg>La valeur @code{-0.0} est distinguable de l'ordinaire zéro dans la
virgule flottante de @acronym{IEEE}, mais en Emacs Lisp @code{equal} et
@code{=} sont considérés comme valeurs égales.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The value cell holds the symbol's value as a variable (@pxref{Variables}).  That is what you get if you evaluate the symbol as a Lisp expression (@pxref{Evaluation}).  Any Lisp object is a legitimate value.  Certain symbols have values that cannot be changed; these include @code{nil} and @code{t}, and any symbol whose name starts with @samp{:} (those are called @dfn{keywords}).  @xref{Constant Variables}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T195915Z">
        <seg>La cellule de valeur contient la valeur du symbole sous forme d'une variable (@pxref{Variables}). C'est ce qu'on obtient si on évalue le symbole comme expression Lisp (@pxref{Evaluation}). Tout objet Lisp est une valeur autorisée. Certains symboles ont des valeurs qui ne peuvent pas être changées parmi lesquelles se trouvent @code{nil}, @code{t} et tout autre symbole dont le nom commence par @samp{:} (on appelle ces derniers @dfn{mot-clés}). @xref{Constant Variables}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The value is a newly constructed vector that is not @code{eq} to any existing vector.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T184659Z">
        <seg>La valeur est un vecteur nouvellement construit qui n'est @code{eq} à aucun vecteur existant.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The value of @code{(acos @var{arg})} is a number between 0 and</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur de @code{(acos @var{arg})} est un nombre entre 0 et</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The value of @code{(asin @var{arg})} is a number between</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur de @code{(asin @var{arg})} est un nombre entre</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The value of @code{(atan @var{y})} is a number between</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur de @code{(acos @var{arg})} est un nombre entre</seg>
      </tuv>
    </tu>
    <tu>
      <note>use count =	usage du compteur ?
		compteur d'usage ?</note>
      <tuv lang="en-us">
        <seg>The value of @var{count}, if specified, initializes the abbrev's usage-count.  If @var{count} is not specified or @code{nil}, the use count is initialized to zero.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur @var{count}, si indiquée, initialise les abréviations
usage-compter. Si @var{count} n'est pas indiqué ou est @code{nil},
l'usage du compteur est initialisée à zéro.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The value of this variable indicates the time at which Emacs was built at the local site.  It is a list of three integers, like the value of @code{current-time} (@pxref{Time of Day}).</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur de cette variable indique le moment où Emacs a été construit
à l'emplacement local. C'est une liste de trois nombres entiers, comme
la valeur de @code{current-time} (@pxref{Time of Day}).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The value of this variable is a full keymap used by Electric Command Future mode.  The functions in this map allow you to edit commands you have not yet thought about executing.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur de cette variable est une keymap employé par le mode
Electric Command Future. Les fonctions dans cette map vous permettent
d'éditer des commandes auxquelles vous n'avez pas avez encore pensé.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The value of this variable is the largest integer that Emacs Lisp can handle.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur de cette variable est le plus grand nombre entier que Emacs
Lisp peut manipuler.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The value of this variable is the smallest integer that Emacs Lisp can handle.  It is negative.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur de cette variable est le plus petit nombre entier que Emacs
Lisp peut manipuler. Elle est négative.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The value of this variable is the version of Emacs being run.  It is a string such as @code{"20.3.1"}.  The last number in this string is not really part of the Emacs release version number; it is incremented each time you build Emacs in any given directory.  A value with four numeric components, such as @code{"20.3.9.1"}, indicates an unreleased test version.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030435Z">
        <seg>La valeur de cette variable est la version d'Emacs en cours. C'est une
chaine telle que @code{"20.3.1"}. Le dernier nombre dans cette chaine
n'est pas vraiment une partie du nombre de version de sortie d'Emacs ;
il est incrémenté chaque fois que vous construisez Emacs dans
n'importe quel répertoire donné. Une valeur avec quatre composants
numériques, tels que @code{"20.3.9.1"}, indique une version d'essai
non sortie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The value, @var{weak}, must be one of @code{nil}, @code{key}, @code{value}, @code{key-or-value}, @code{key-and-value}, or @code{t} which is an alias for @code{key-and-value}.  If @var{weak} is @code{key} then the hash table does not prevent its keys from being collected as garbage (if they are not referenced anywhere else); if a particular key does get collected, the corresponding association is removed from the hash table.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T141540Z">
        <seg>La valeur de @var{weak} doit prendre une des valeurs suivantes @code{nil}, @code{key}, @code{value}, @code{key-or-value}, @code{key-and-value} ou @code{t} qui est un alias pour @code{key-and-value}. Si @var{weak} a pour valeur @var{key} alors la table de hachage n'empêche pas ses clés d'être détruites par le ramasse-miettes (si elles ne sont référencées nulle part ailleurs) ; si une clé particulière se fait ramasser, l'association correspondante est retirée de la table de hachage.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>The weakness of a hash table specifies whether the presence of a key or value in the hash table preserves it from garbage collection.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T141505Z">
        <seg>La valeur de faiblesse d'une table de hachage spécifie si la présence d'une clé ou d'une valeur dans la table de hachage la préserve de la récupération par le ramasse-miettes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>There are four functions to convert floating point numbers to integers; they differ in how they round.  All accept an argument @var{number} and an optional argument @var{divisor}.  Both arguments may be integers or floating point numbers.  @var{divisor} may also be @code{nil}.  If @var{divisor} is @code{nil} or omitted, these functions convert @var{number} to an integer, or return it unchanged if it already is an integer.  If @var{divisor} is non-@code{nil}, they divide @var{number} by @var{divisor} and convert the result to an integer.  An @code{arith-error} results if @var{divisor} is 0.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031902Z">
        <seg>Il y a quatre fonctions pour convertir des nombres à virgule flottante
en nombres entiers ; ils diffèrent dans la façon dont ils
arrondissent. Tous acceptent un argument @var{number} et un argument
facultatif @var{divisor}. Les deux arguments peuvent être des nombres
entiers ou des nombres à virgule flottante. @var{divisor} peut
également être @code{nil}. Si @var{divisor} est @code{nil} ou omis,
ces fonctions convertissent @var{number} en nombre entier, ou le
renvoient sans changement si c'est déjà un nombre entier. Si
@var{divisor} est non-@code{nil}, elles divisent @var{number} par
@var{divisor} et convertissent le résultat en nombre entier. Un
@code{arith-error} en résulte si @var{divisor} est 0.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>There are two special functions for working with bool-vectors; aside from that, you manipulate them with same functions used for other kinds of arrays.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Nicolas Lecompte" changedate="20140430T201903Z">
        <seg>Il y a deux fonctions particulières pour le travail avec les vecteurs-booléen ; à part cela, on les manipule avec les mêmes fonctions que pour les autres types de tableaux.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>There are two text representations for non-@acronym{ASCII} characters in Emacs strings (and in buffers): unibyte and multibyte (@pxref{Text Representations}).  An @acronym{ASCII} character always occupies one byte in a string; in fact, when a string is all @acronym{ASCII}, there is no real difference between the unibyte and multibyte representations.  For most Lisp programming, you don't need to be concerned with these two representations.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T104153Z">
        <seg>Il y a deux façons de représenter le texte pour les caractères non-@acronym{ASCII} dans les chaînes d’Emacs (et dans les mémoires tampons) : l'uni- octet et le multi-octet (voir la section @xref{Text Representations}).  Un caractère @acronym{ASCII} occupe toujours un octet dans une chaîne ; en fait, quand une chaîne est entièrement en @acronym{ASCII}, il n’y a pas de réelle différence entre les représentations uni-octet etmulti-octet . Pour la plupart des programmes Lisp, vous n’avez pas besoin de vous préoccuper de ces deux représentations.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>There is another wrinkle: because floating point arithmetic is not exact, it is often a bad idea to check for equality of two floating point values.  Usually it is better to test for approximate equality.  Here's a function to do this:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031702Z">
        <seg>Il y a un autre problème : parce que l'arithmétique de virgule
flottante n'est pas exacte, c'est souvent une mauvaise idée de
vérifier l'égalité de deux valeurs à virgule flottante. Habituellement
il vaut mieux déterminer l'égalité approximative. Voici une fonction
pour faire ceci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>There is no argument to specify the length of the char-table, because all char-tables have room for any valid character code as an index.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T105157Z">
        <seg>Il n'existe pas d'argument pour spécifier la longueur d'une char-table parce que toutes les char-table ont de la place pour tout code de caractère valide comme indice.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>There is no special function to access default values in a char-table.  To do that, use @code{char-table-range} (see below).</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T175645Z">
        <seg>Il n'y a pas de fonction particulière pour accéder aux valeurs par défaut d'une char-table. Pour cela, il faut utiliser @code{char-table-range} (voir ci-dessous).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>There is no way to share structure between two hash tables, the way two alists can share a common tail.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T212724Z">
        <seg>Il n'est pas possible de partager une structure entre deux tables de hachage, contrairement à deux listes d'association dont la queue de liste peut être commune.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Therefore,</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Par conséquent,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>These are the ordinary trigonometric functions, with argument measured in radians.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ce sont les fonctions trigonométriques ordinaires, avec l'argument mesuré
en radians.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>These facilities provide information about which version of Emacs is in use.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ces fonctions fournissent les informations au sujet de la version
d'Emacs en service.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>These functions do not modify the strings that are passed to them as arguments.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T200153Z">
        <seg>Ces fonctions ne modifient pas les chaînes qui leur sont passées en arguments.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>These mathematical functions allow integers as well as floating point numbers as arguments.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ces fonctions mathématiques autorisent des nombres entiers aussi bien
que des nombres à virgule flottante comme arguments.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>These results make sense because the binary codes for control-_ and control-W are 11111 and 10111, respectively.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Nicolas Lecompte" changedate="20140430T202137Z">
        <seg>Ces résultats ont un sens parce que les codes binaires pour control-_ et control-W sont respectivement 11111 et 10111.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>They occupy one-fourth the space of a vector of the same elements.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140505T200716Z">
        <seg>Ils occupent un quart de l'espace d'un tableau type @code{vector} contenant les mêmes éléments.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This Info file contains edition @value{VERSION} of the GNU Emacs Lisp Reference Manual, corresponding to GNU Emacs version @value{EMACSVER}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ce dossier d'information contient l'édition @value{VERSION} du Manuel
de référence GNU Emacs Lisp, correspondant à la version
@value{EMACSVER} de GNU Emacs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This chapter describes a number of features related to the display that Emacs presents to the user.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140216T051644Z">
        <seg>Ce chapitre décrit des fonctions en rapport avec l'affichage qu'Emacs présente à l'utilisateur.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This command displays a description of the contents of the current buffer's case table.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T201410Z">
        <seg>Cette commande affiche une description du contenu du tableau de casse du tampon courant.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This example creates a hash table whose keys are strings that are compared case-insensitively.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140505T195306Z">
        <seg>Cet exemple crée une table de hachage dont les clés sont des chaînes de caractères qui sont comparées sans tenir compte de la casse.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function acts like @code{eq} except when both arguments are numbers.  It compares numbers by type and numeric value, so that @code{(eql 1.0 1)} returns @code{nil}, but @code{(eql 1.0 1.0)} and @code{(eql 1 1)} both return @code{t}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction agit comme @code{eq} sauf quand les deux arguments sont
des nombres. Elle compare des nombres par le type et la valeur
numérique, de sorte que @code{(eql 1.0 1)} renvoie le @code{nil}, mais
@code{(eql 1.0 1.0)} et @code{(eql 1 1)} renvoient tous les deux le
@code{t}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function adds its arguments together.  When given no arguments, @code{+} returns 0.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction fait la somme de ses arguments. Si aucun argument n'est
donné, @code{+} retourne 0.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function alters part of the contents of the string @var{string}, by storing @var{obj} starting at index @var{idx}.  The argument @var{obj} may be either a character or a (smaller) string.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T134516Z">
        <seg>Cette fonction modifie une partie du contenu de la chaîne @var{string}: elle stocke @var{obj} en commençant à l'indice @var{idx}. L'argument @var{obj} peut être soit un caractère soit une (plus petite) chaîne.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function calls @var{function} for each element of @var{char-table}.  @var{function} is called with two arguments, a key and a value.  The key is a possible @var{range} argument for @code{char-table-range}---either a valid character or a generic character---and the value is @code{(char-table-range @var{char-table} @var{key})}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Nicolas Lecompte" changedate="20140428T192904Z">
        <seg>Cette fonction appelle @var{function} pour chaque élément de la @var{char-table}. On appelle @var{function} et on lui passe deux arguments, une clé et une valeur. La clé est une valeur possible pour l'argument @var{range} de la fonction @code{char-table-range} --- soit un caractère valide, soit un caractère générique --- et la valeur est @code{(char-table-range @var{char-table} @var{key})}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function calls @var{function} once for each of the associations in @var{table}.  The function @var{function} should accept two arguments---a @var{key} listed in @var{table}, and its associated @var{value}.  @code{maphash} returns @code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T215759Z">
        <seg>Cette fonction appelle une fois @var{function} pour chacune des associations de @var{table}. Il faut que @var{function} prenne deux arguments --- une clé @var{key} présente dans @var{table} et sa valeur associée @var{value}. @var{maphash} retourne @var{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function capitalizes strings or characters.  If @var{string-or-char} is a string, the function creates and returns a new string, whose contents are a copy of @var{string-or-char} in which each word has been capitalized.  This means that the first character of each word is converted to upper case, and the rest are converted to lower case.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212757Z">
        <seg>Cette fonction met en majuscules les chaînes ou les caractères. Si @var{string-or-char} est une chaîne, la fonction crée et retourne une nouvelle chaîne, dont le contenu est une copie de @var{string-or-char} dans laquelle chaque mot a été mis en majuscule. Cela signifie que le premier caractère de chaque mot est converti en majuscule, et que le reste est converti en minuscule.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function compares the specified part of @var{string1} with the specified part of @var{string2}.  The specified part of @var{string1} runs from index @var{start1} up to index @var{end1} (@code{nil} means the end of the string).  The specified part of @var{string2} runs from index @var{start2} up to index @var{end2} (@code{nil} means the end of the string).</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T140446Z">
        <seg>Cette fonction compare la partie spécifiée de @var{string1} avec la partie spécifiée de @var{string2}. La partie spécifiée de @var{string1} va de l'indice @var{start1} jusqu'à l'indice @var{end1} (@code{nil} signifie la fin de la chaîne). La partie spécifiée de @var{string2} va de l'indice @var{start2} jusqu'à l'indice @var{end2} (@code{nil} signifie la fin de la chaîne).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function compares two strings a character at a time.  It scans both the strings at the same time to find the first pair of corresponding characters that do not match.  If the lesser character of these two is the character from @var{string1}, then @var{string1} is less, and this function returns @code{t}.  If the lesser character is the one from @var{string2}, then @var{string1} is greater, and this function returns @code{nil}.  If the two strings match entirely, the value is @code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T140015Z">
        <seg>Cette fonction compare deux chaînes de caractères à la fois. Elle scanne les deux chaînes en même temps pour trouver la première paire de caractères correspondants qui ne sont pas les mêmes. Si le moindre caractère de ces deux est le caractère de @var{string1}, alors @var{string1} est moindre, et cette fonction retourne @code{t}. Si le moindre caractère est celui de @var{string2}, alors @var{string1} est plus grand, et cette fonction retourne @code{nil}. Si les deux chaînes correspondent entièrement, la valeur est @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function converts a character or a string to lower case.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140502T105658Z">
        <seg>Cette fonction convertit un caractère ou une chaîne en minuscules</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function converts a character or a string to upper case.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140502T105745Z">
        <seg>Cette fonction convertit un caractère ou une chaîne en majuscules.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function creates a new hash table according to the specified arguments.  The arguments should consist of alternating keywords (particular symbols recognized specially) and values corresponding to them.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T192847Z">
        <seg>Cette fonction crée une nouvelle table de hachage selon les arguments spécifiés. Les arguments doivent être une alternance de mots-clés différents (surtout des symboles particulièrement reconnus) et des valeurs qui leur correspondent.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function creates and returns a copy of @var{table}.  Only the table itself is copied---the keys and values are shared.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T195233Z">
        <seg>Cette fonction crée et retourne une copie de @var{table}. Seule la table elle-même est copiée ; les clés et les valeurs sont partagées.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function creates and returns a new, empty abbrev table---an obarray containing no symbols.  It is a vector filled with zeros.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction crée et renvoie une nouvelle table vide
d'abréviations---une liste ne contient aucun symbole---. C'est un
vecteur rempli de zéros.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function creates and returns a vector whose elements are the arguments, @var{objects}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T184311Z">
        <seg>Cette fonction crée et retourne un vecteur dont les éléments sont les arguments @var{objects}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function defines @var{tabname} (a symbol) as an abbrev table name, i.e., as a variable whose value is an abbrev table.  It defines abbrevs in the table according to @var{definitions}, a list of elements of the form @code{(@var{abbrevname} @var{expansion} @var{hook} @var{usecount} @var{system-flag})}.  If an element of @var{definitions} has length less than five, omitted elements default to @code{nil}.  A value of @code{nil} for @var{usecount} is equivalent to zero.  The return value is always @code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction définit @var{tabname} (un symbole) comme le nom d'une
table d'abréviations, c.-à-d., comme variable dont la valeur est une
table d'abréviations. Elle définit les abréviations dans la table
selon @var{definitions}, une liste d'éléments de forme
@code{(@var{abbrevname} @var{expansion} @var{hook} @var{usecount}
@var{system-flag})}. Si un élément de @var{definitions} a la longueur
inférieure à cinq, les éléments omis par défaut sont @code{nil}. Une
valeur de @code{nil} pour @var{usecount} est équivalente à zéro. La
valeur de retour est toujours @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function defines a new hash table test, named @var{name}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T182537Z">
        <seg>Cette fonction définit un nouveau test de table de hachage, appelée @var{name}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function defines an abbrev named @var{name}, in @var{table}, to expand to @var{expansion} and call @var{hook}.  The return value is @var{name}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction définit une abréviation appelée @var{name}, dans
@var{table}, à développer @var{expansion} et appeler @var{hook}. La
valeur de retour est @var{name}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function divides @var{dividend} by @var{divisor} and returns the quotient.  If there are additional arguments @var{divisors}, then it divides @var{dividend} by each divisor in turn.  Each argument may be a number or a marker.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction divise @var{dividend} par @var{divisor} et retourne le
quotient. S'il y a des arguments additionnels @var{divisors}, il
divise @var{dividend} par chaque diviseur alternativement. Chaque
argument peut être un nombre ou un marqueur.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function does not work for dotted lists.  Trying to copy a circular list may cause an infinite loop.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T180051Z">
        <seg>Cette fonction ne marche pas pour les listes pointées. Copier une liste circulaire risque d'entraîner une boucle infinie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function enters an association for @var{key} in @var{table}, with value @var{value}.  If @var{key} already has an association in @var{table}, @var{value} replaces the old associated value.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T215212Z">
        <seg>Cette fonction insère une association avec pour clé @var{key} et pour valeur @var{value} dans la table de hachage @code{table}. Si @var{key} a déjà une association dans @var{table}, @var{value} remplace l'ancienne valeur associée.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function fills the array @var{array} with @var{object}, so that each element of @var{array} is @var{object}.  It returns @var{array}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T182855Z">
        <seg>Cette fonction remplit le tableau @var{array} avec @var{object}, de telle façon que chaque élément du tableau @var{array} soit de type @var{object}. Elle renvoie un tableau de type @var{array}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function generalizes @code{aref} (@pxref{Array Functions}) and @code{nth} (@pxref{Definition of nth}).</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T175831Z">
        <seg>Cette fonction généralise @code{aref} (@pxref{Array Functions}) et@code{nth} (@pxref{Definition of nth})</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function inserts before point a description of the abbrev table named @var{name}.  The argument @var{name} is a symbol whose value is an abbrev table.  The return value is always @code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction insère avant le point une description de la table
d'abréviations avant nommé @var{name}. L'argument @var{name} est un
symbole dont la valeur est la table d'abréviations. La valeur de
retour est toujours @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function is not analogous to the C operator @code{++}---it does not increment a variable.  It just computes a sum.  Thus, if we continue,</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction n'est pas analogue à l'opérateur C @code{++} ---elle
n'incrémente pas une variable---. Elle calcule juste la somme. Ainsi,
si nous continuons,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function is obsolete. Use @code{make-hash-table} instead.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T214901Z">
        <seg>Cette fonction est obsolète. Utilisez @code{make-hash-table} à la place.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function looks up @var{key} in @var{table}, and returns its associated @var{value}---or @var{default}, if @var{key} has no association in @var{table}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T215106Z">
        <seg>Cette fonction recherche la valeur @var{key} dans la table @var{table}, et retourne sa valeur associée @var{value} --- ou la valeur @var{default} si @var{key} n'a pas d'association dans la table @var{table}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function makes @var{char} case-invariant, with syntax @var{syntax}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T204600Z">
        <seg>Cette fonction rend @var{char} invariant à la casse, avec la syntaxe @var{syntax}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function makes @var{table} the standard case table, so that it will be used in any buffers created subsequently.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T183435Z">
        <seg>Cette fonction transforme @var{table} en un tableau de casse normale pour qu'il puisse être utilisé par n'importe quel tampon créé par la suite.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function makes characters @var{l} and @var{r} a matching pair of case-invariant delimiters.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T204535Z">
        <seg>Cette fonction crée une paire correspondante de délimiteurs invariants à la casse avec les caractères @var{l} et @var{r}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function may be eliminated in the future if it does not seem useful enough to retain.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T210844Z">
        <seg>Cette fonction peut être éliminée à l'avenir si elle ne semble pas être assez utile pour être conservée.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function multiplies its arguments together, and returns the product.  When given no arguments, @code{*} returns 1.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction multiplie ses arguments entre elles, et renvoie le
produit. Si aucun argument n'est donné, @code{*} retourne 1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function removes all the associations from hash table @var{table}, so that it becomes empty.  This is also called @dfn{clearing} the hash table.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T143708Z">
        <seg>Cette fonction retire toutes les associations de la table de hachage @var{table}, de sorte qu'elle devienne vide. Cela s'appelle aussi @dfn{nettoyer} la table de hachage.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function removes the association for @var{key} from @var{table}, if there is one.  If @var{key} has no association, @code{remhash} does nothing.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T143549Z">
        <seg>Cette fonction retire de la table @var{table} l'association ayant comme clé @var{key}, s'il y en a une. Si @var{key} n'a pas d'association, @code{remhash} ne fait rien.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns @code{t} if @var{object} is a char-table, otherwise @code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T191311Z">
        <seg>Cette fonction retourne @code{t} si @var{object} est une char-table, sinon @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns @code{t} if @var{object} is a string or a character (i.e., an integer), @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T105947Z">
        <seg>Cette function retourne @code{t} si @var{objet} est une chaîne ou un caractère (c-à-d un entier), sinon @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns @code{t} if @var{object} is a string or nil, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T105739Z">
        <seg>Cette fonction retourne @code{t} si @var{objet} est une chaîne ou nil, sinon @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns @code{t} if @var{object} is a string, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T105501Z">
        <seg>Cette fonction retourne @code{t} si @var{objet} est une chaîne, sinon @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns @code{t} if @var{object} is a symbol, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie @code{t} si l'@var{objet} est un symbole et autrement @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns @code{t} if @var{object} is a vector.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T184254Z">
        <seg>Cette fonction retourne @code{t} si @var{object} est un vecteur.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns @code{t} if @var{object} is an array (i.e., a vector, a string, a bool-vector or a char-table).</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T182307Z">
        <seg>Cette fonction retourne @code{t} si @var{object} est un tableau (c'est-à-dire un vecteur, une chaîne de caractères, un booléen-vecteur ou une table de caractères).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns @code{t} if the arguments represent the same character, @code{nil} otherwise.  This function ignores differences in case if @code{case-fold-search} is non-@code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T135417Z">
        <seg>Cette fonction retourne @code{t} si les arguments représentent les mêmes caractères, sinon @code{nil}. Cette fonction ignore la casse si case-fold-search est non @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns @code{t} if the characters of the two strings match exactly.  Symbols are also allowed as arguments, in which case their print names are used.  Case is always significant, regardless of @code{case-fold-search}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T135500Z">
        <seg>Cette fonction retourne @code{t} si les caractères de deux chaînes correspondent exactement. Les symboles sont également autorisés comme arguments, dans ce cas leurs noms sont utilisés. La casse a toujours de l'importance, quel que soit @code{case-fold-search}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns @var{number-or-marker} minus 1.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie @var{number-or-marker} moins 1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns @var{number-or-marker} plus 1.  For example,</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie @var{number-or-marker} plus 1. Par exemple,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns @var{x} raised to power @var{y}.  If both arguments are integers and @var{y} is positive, the result is an integer; in this case, overflow causes truncation, so watch out.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032439Z">
        <seg>Cette fonction renvoie @var{x} à la puissance @var{y}. Si tout les
deux les arguments sont des nombres entiers et @var{y} est positif, le
résultat est nombre entier ; dans ce cas, le débordement cause
l'abréviation, alors attention.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns a copy of abbrev table @var{table}---a new abbrev table that contains the same abbrev definitions.  The only difference between @var{table} and the returned copy is that this function sets the property lists of all copied abbrevs to 0.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie une copie de table d'abréviations
@var{table}---une nouvelle table d'abréviations qui contient les mêmes
définitions d'abréviations---. La seule différence entre @var{table}
et la copie retournée est que la fonction place les listes de
propriétés de toutes les abréviations copiées à 0.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns a hash code for Lisp object @var{obj}.  This is an integer which reflects the contents of @var{obj} and the other Lisp objects it points to.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140505T195137Z">
        <seg>La fonction retourne un code de hachage pour l'objet Lisp @var{obj}. C'est un entier relatif qui donne une image des contenus de l'objet @var{obj} et des autres objets Lisp vers lesquels il pointe.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns a new string consisting of the characters in the arguments passed to it (along with their text properties, if any).  The arguments may be strings, lists of numbers, or vectors of numbers; they are not themselves changed.  If @code{concat} receives no arguments, it returns an empty string.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T103134Z">
        <seg>Cette fonction retourne une nouvelle chaîne constituée des caractères des arguments qui lui sont passés (ainsi que leurs propriétés textuelles, s'ils en ont). Les arguments peuvent être des chaînes de caractères, des listes de nombres, ou des vecteurs de nombres; ils ne sont pas eux-mêmes modifiés. Si @code{concat} ne reçoit aucun argument, elle retourne une chaîne vide.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns a new string containing one character, @var{character}.  This function is semi-obsolete because the function @code{string} is more general.  @xref{Creating Strings}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T142028Z">
        <seg>Cette fonction retourne une nouvelle chaîne contenant un caractère, @var{character}.  Cette fonction est semi-obsolète puisque la fonction @code{string} est plus générale.  @xref{Creating Strings}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns a new string that is made by copying @var{string} and then replacing any format specification in the copy with encodings of the corresponding @var{objects}.  The arguments @var{objects} are the computed values to be formatted.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T211640Z">
        <seg>Cette fonction retourne une nouvelle chaîne qui est faite en copiant @var{string} puis en remplaçant toute spécification de format de la copie par les codages des @var{objects} correspondants.  Les arguments @var{objects} sont les valeurs calculées qui sont à formater.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns a new string which consists of those characters from @var{string} in the range from (and including) the character at the index @var{start} up to (but excluding) the character at the index @var{end}.  The first character is at index zero.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T121434Z">
        <seg>Cette fonction retourne une nouvelle chaîne qui se compose des caractères de @var{chaine} dans l'intervalle à partir du caractère (et y compris celui-ci) à l’indice @var{debut} jusqu'au caractère (celui-ci non compris) à l’indice @var{fin}. Le premier caractère est à l’indice zéro.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns a new vector consisting of @var{length} elements, each initialized to @var{object}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T184419Z">
        <seg>Cette fonction retourne un nouveau vecteur contenant un nombre @var{length} d'éléments, chacun étant initialisé comme un @var{object}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns a new vector containing all the elements of the @var{sequences}.  The arguments @var{sequences} may be true lists, vectors, strings or bool-vectors.  If no @var{sequences} are given, an empty vector is returned.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T104015Z">
        <seg>Cette fonction retourne un nouveau vecteur contenant tous les éléments des arguments @var{sequences}. Ces arguments @var{sequences} peuvent être des listes, des vecteurs, des chaînes de caractères ou des vecteurs-booléens. Si aucune @var{sequence} n'est donnée alors un vecteur vide est retourné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns a pseudo-random integer.  Repeated calls return a series of pseudo-random integers.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie un nombre entier pseudo-aléatoire. Les appels
répétés renvoient a une série de nombres entiers pseudo-aléatoires.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns a string consisting of the printed base-ten representation of @var{number}, which may be an integer or a floating point number.  The returned value starts with a minus sign if the argument is negative.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T210904Z">
        <seg>Cette fonction retourne une chaîne constituée de la représentation en base dix de @var{number}, qui peut être un entier ou un nombre à virgule flottante.  La valeur retournée commence par le signe moins si l'argument est négatif.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns a string describing the version of Emacs that is running.  It is useful to include this string in bug reports.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie une chaine décrivant la version d'Emacs qui est
en fonction. Il est utile d'inclure cette chaine dans des rapports de
bogue.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns a string made up of @var{count} repetitions of @var{character}.  If @var{count} is negative, an error is signaled.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T110243Z">
        <seg>Cette fonction retourne une chaîne faite de @var{n} répétitions de @var{caractere}.  Si @var{n} est négatif, une erreur est soulevée.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the @var{index}th element of @var{array}.  The first element is at index zero.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T182240Z">
        <seg>Cette fonction retourne l'élément du tableau se situant à l'indice @var{index}. Le premier élément se trouve à l'indice zéro.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the @var{weak} value that was specified for hash table @var{table}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140505T195810Z">
        <seg>Cette fonction retourne la valeur de @var{weak} qui a été spécifiée pour la table de hachage @var{table}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the ``exclusive or'' of its arguments: the @var{n}th bit is set in the result if, and only if, the @var{n}th bit is set in an odd number of the arguments.  If there are no arguments, the result is 0, which is an identity element for this operation.  If @code{logxor} is passed just one argument, it returns that argument.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T120909Z">
        <seg>Cette fonction renvoie le « ou exclusif » de ses arguments : le
@var{n}ième bit est placé dans le résultat si, et seulement si, le bit
@var{n}ième bit est placé dans un nombre impair des arguments. S'il
n'y a aucun argument, le résultat est 0, qui est un élément d'identité
pour cette opération. Si @code{logxor} est passé juste à un argument,
il renvoie cet argument.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the ``inclusive or'' of its arguments: the @var{n}th bit is set in the result if, and only if, the @var{n}th bit is set in at least one of the arguments.  If there are no arguments, the result is zero, which is an identity element for this operation.  If @code{logior} is passed just one argument, it returns that argument.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T120854Z">
        <seg>Cette fonction renvoie le « ou inclus » de ses arguments : le
@var{n}ième bit est placé dans le résultat si, et seulement si, le
@var{n}ième bit est placé dans au moins un des arguments. S'il n'y a
aucun argument, le résultat est 0, ce qui est un élément d'identité
pour cette opération. Si @code{logior} est passé à juste un argument,
il renvoie cet argument.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the ``logical and'' of the arguments: the @var{n}th bit is set in the result if, and only if, the @var{n}th bit is set in all the arguments.  (``Set'' means that the value of the bit is 1 rather than 0.)</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140424T015013Z">
        <seg>Cette fonction renvoie le « et logique » des arguments : le @var{n}th
bit est placé dans le résultat si, et seulement si, le @var{n}th bit
est placer dans tous arguments. (« Placer » veut dire que la valeur du
bit est 1 plutôt que 0.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the absolute value of @var{number}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie la valeur absolue de @var{number}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the actual number of entries in @var{table}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T144441Z">
        <seg>Cette fonction retourne le nombre effectif d'entrées contenues dans @var{table}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the binary exponent of @var{number}.  More precisely, the value is the logarithm of @var{number} base 2, rounded down to an integer.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie l'exposant binaire de @var{number}. Plus
précisément, la valeur est le logarithme de @var{number} en base 2,
arrondie vers le bas à un nombre entier.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the contents of extra slot @var{n} of @var{char-table}.  The number of extra slots in a char-table is determined by its subtype.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T105405Z">
        <seg>Cette fonction retourne le contenu de la case supplémentaire numéro @var{n} de @var{char-table}. Le nombre de cases supplémentaires dans une char-table est déterminé par son sous-type.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the current buffer's case table.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T183448Z">
        <seg>Cette fonction retourne le tableau de casse courante du tampon.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the element of @var{sequence} indexed by @var{index}.  Legitimate values of @var{index} are integers ranging from 0 up to one less than the length of @var{sequence}.  If @var{sequence} is a list, out-of-range values behave as for @code{nth}.  @xref{Definition of nth}.  Otherwise, out-of-range values trigger an @code{args-out-of-range} error.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T185211Z">
        <seg>La fonction retourne l'élément d'une suite @var{sequence} ordonnée selon les indices @var{index}. Les indices doivent être des entiers allant de 0 jusqu'à la longueur de la suite moins un. Si @var{sequence} est une liste, les valeurs hors-intervalle donneront le même résultat que la n-ième valeur. @xref{Definition of nth}. Dans les autres cas, les valeurs hors-intervalle lanceront une erreur @code{args-out-of-range} (argument-hors-intervalle).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the first character in @var{string}.  If the string is empty, the function returns 0.  The value is also 0 when the first character of @var{string} is the null character, @acronym{ASCII} code 0.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T142235Z">
        <seg>Cette fonction retourne le premier caractère de @var{string}.  Si la chaîne est vide, la fonction retourne 0.  La valeur retournée est aussi  0 lorsque le premier caractère de @var{string} est un caractère nul, code @acronym{ASCII} 0.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the integer remainder after division of @var{dividend} by @var{divisor}.  The arguments must be integers or markers.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le reste en nombre entier après la division de
@var{dividend} par @var{divisor}. Les arguments doivent être des
nombres entiers ou des marqueurs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the largest of its arguments.  If any of the arguments is floating-point, the value is returned as floating point, even if it was given as an integer.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le plus grand de ses arguments. Si l'un des
arguments est à virgule flottante, la valeur est retournée à virgule
flottante, même si elle était donnée comme nombre entier.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the logarithm of @var{arg}, with base 10.  If @var{arg} is negative, it signals a @code{domain-error} error.  @code{(log10 @var{x})} @equiv{} @code{(log @var{x} 10)}, at least approximately.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le logarithme de @var{arg}, en base 10. Si
@var{arg} est négatif, il signale une erreur @code{domain-error}.
@code{(log10 @var{x})} @equiv{} @code{(log @var{x} 10)}, au moins
approximativement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the logarithm of @var{arg}, with base @var{base}.  If you don't specify @var{base}, the base</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le logarithme de @var{arg}, en base @var{base}.
Si vous n'indiquez pas @var{base}, la base</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the logical complement of its argument: the @var{n}th bit is one in the result if, and only if, the @var{n}th bit is zero in @var{integer}, and vice-versa.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T120915Z">
        <seg>Cette fonction renvoie le complément logique de son argument : le
@var{n}ième bit est 1 dans le résultat si, et seulement si, le
@var{n}ième bit est 0 dans @var{integer}, et vice-versa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the number of elements in @var{sequence}.  If @var{sequence} is a dotted list, a @code{wrong-type-argument} error is signaled.  Circular lists may cause an infinite loop.  For a char-table, the value returned is always one more than the maximum Emacs character code.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T100806Z">
        <seg>Cette fonction retourne le nombre d'éléments dans une suite @var{sequence}. Si une suite @var{sequence} est une liste pointée, une erreur @code{wrong-type-argument} (mauvais-type-d-argument) est signalée. Les listes circulaires peuvent entraîner une boucle infinie. Pour une table de chaînes de caractères, la valeur retournée est toujours supérieure de un au code caractère maximum d'Emacs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the numeric value of the characters in @var{string}.  If @var{base} is non-@code{nil}, it must be an integer between 2 and 16 (inclusive), and integers are converted in that base.  If @var{base} is @code{nil}, then base ten is used.  Floating point conversion only works in base ten; we have not implemented other radices for floating point numbers, because that would be much more work and does not seem useful.  If @var{string} looks like an integer but its value is too large to fit into a Lisp integer, @code{string-to-number} returns a floating point result.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T210930Z">
        <seg>Cette fonction retourne la valeur numérique des caractères de @var{string}.  Si @var{base} est non @code{nil}, elle doit être un entier compris entre 2 et 16 (inclus), et les entiers sont convertis dans cette base.  Si @var{base} est @code{nil}, alors la base dix est utilisée. La conversion de la virgule flottante ne fonctionne qu'en base dix; nous n'avons pas implanté d'autres bases de numération pour les nombres à virgule, parce que cela donnerait  beaucoup plus de travail et que cela ne semble pas utile. Si @var{string} ressemble à un entier mais que sa valeur est trop grande pour tenir dans un entier Lisp, @code{string-to-number} retourne un résultat de type "float".</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the parent of @var{char-table}.  The parent is always either @code{nil} or another char-table.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Nicolas Lecompte" changedate="20140428T192059Z">
        <seg>Cette fonction retourne le parent de @var{char-table}. Le parent est toujours soit @code{nil}, soit une autre char-table.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the smallest of its arguments.  If any of the arguments is floating-point, the value is returned as floating point, even if it was given as an integer.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le plus petit de ses arguments. Si l'un des
arguments est à virgule flottante, la valeur est retournée à virgule
flottante, même si elle était donnée comme nombre entier.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the string that is @var{symbol}'s name.  For example:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie la chaîne correspondant au nom du symbole. Par exemple :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the subtype symbol of @var{char-table}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T191344Z">
        <seg>Cette fonction retourne le symbole du sous-type de @var{char-table}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function returns the value of @var{dividend} modulo @var{divisor}; in other words, the remainder after division of @var{dividend} by @var{divisor}, but with the same sign as @var{divisor}.  The arguments must be numbers or markers.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie la valeur de @var{dividend} modulo
@var{divisor}; en d'autres termes, le reste après la division de
@var{dividend} par @var{divisor}, mais avec le même signe que
@var{divisor}. Les arguments doivent être des nombres ou des
marqueurs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function rounds @var{float} to the nearest integral value, and returns that value as a floating point number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction arrondit @var{float} à la valeur intégrale la plus
proche, et renvoie cette valeur comme nombre de virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function rounds @var{float} to the next higher integral value, and returns that value as a floating point number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction arrondit @var{float} à la prochaine valeur intégrale
supérieure, et renvoie cette valeur comme nombre à virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function rounds @var{float} to the next lower integral value, and returns that value as a floating point number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction arrondit @var{float} à la prochaine valeur intégrale
inférieure, et renvoie cette valeur comme nombre à virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function rounds @var{float} towards zero to an integral value, and returns that value as a floating point number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction arrondit @var{float} à la valeur intégrale proche de
zéro, et renvoie cette valeur comme nombre à virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function sets the @var{index}th element of @var{array} to be @var{object}.  It returns @var{object}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T174101Z">
        <seg>Cette fonction définit le @var{n}-ième élément du tableau @var{array} comme un @var{object}. Elle retourne @var{object}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function sets the default value of generic character @var{char} in @var{char-table} to @var{new-default}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Nicolas Lecompte" changedate="20140428T191947Z">
        <seg>Cette fonction définit @var{new-default} comme la valeur par défaut du caractère générique @var{char} d'une char-table.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function sets the parent of @var{char-table} to @var{new-parent}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Nicolas Lecompte" changedate="20140428T192137Z">
        <seg>Cette fonction définit @var{new-parent} comme parent de @var{char-table}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function sets the value in @var{char-table} for a range of characters @var{range}.  Here are the possibilities for @var{range}:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T110004Z">
        <seg>Cette fonction définit la valeur dans @var{char-table} pour la gamme de caractères @var{range}.  Voici les valeurs possibles de @var{range}:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function specifies a pair of corresponding letters, one upper case and one lower case.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T204515Z">
        <seg>Cette fonction spécifie une paire de lettres correspondantes, une en capitale et l'autre en bas de casse.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function splits @var{string} into substrings at matches for the regular expression @var{separators}.  Each match for @var{separators} defines a splitting point; the substrings between the splitting points are made into a list, which is the value returned by @code{split-string}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T133013Z">
        <seg>Cette fonction sépare @var{string} en sous-chaînes à chaque correspondance avec  les expressions régulières @var{separators}. Chaque fois qu'il y a correspondance avec @var{separators}, un point de séparation est défini; les sous-chaînes entre les points de séparation sont mises dans une liste, qui est la valeur retournée par @code{split-string}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function stores @var{value} in extra slot @var{n} of @var{char-table}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Nicolas Lecompte" changedate="20140428T192335Z">
        <seg>Cette fonction stocke @var{value} dans la case supplémentaire numéro @var{n} de @var{char-table}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function tests whether its arguments are numerically equal, and returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction teste si ses arguments sont numériquement égaux, et
renvoie le @code{t} si oui, @code{nil} autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function tests whether its arguments are numerically equal, and returns @code{t} if they are not, and @code{nil} if they are.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction teste si ses arguments sont numériquement égaux, et
renvoie @code{t} s'ils ne sont pas égaux, et @code{nil} s'ils sont
égaux.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function tests whether its first argument is greater than or equal to its second argument.  It returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction teste si son premier argument est supérieur ou égal à
son deuxième argument. Il renvoie @code{t} si oui, @code{nil}
autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function tests whether its first argument is less than or equal to its second argument.  It returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction teste si son premier argument est inférieur ou égal à
son deuxième argument. Elle renvoie @code{t} si oui, @code{nil}
autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function tests whether its first argument is strictly greater than its second argument.  It returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction teste si son premier argument est strictement plus
grand que son deuxième argument. Elle renvoie @code{t} si oui,
@code{nil} autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function tests whether its first argument is strictly less than its second argument.  It returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction teste si son premier argument est strictement moins
grand que son deuxième argument. Elle renvoie @code{t} si oui,
@code{nil} autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function undefines all the abbrevs in abbrev table @var{table}, leaving it empty.  It always returns @code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T111933Z">
        <seg>Cette fonction élimine toutes les abréviations dans la table
d'abréviations @var{table}, la laissant vide. Elle renvoie toujours
@code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This function works like @code{assoc}, except that @var{key} must be a string or symbol, and comparison is done using @code{compare-strings}.  Symbols are converted to strings before testing.  If @var{case-fold} is non-@code{nil}, it ignores case differences.  Unlike @code{assoc}, this function can also match elements of the alist that are strings or symbols rather than conses.  In particular, @var{alist} can be a list of strings or symbols rather than an actual alist.  @xref{Association Lists}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T140749Z">
        <seg>Cette fonction se comporte comme @code{assoc}, sauf que @var{key} doit être une chaîne ou un symbole, et la comparaison se fait en utilisant @code{compare-strings}. Les symboles sont convertis en chaîne avant le test. Si @var{case-fold} est non @code{nil}, il ignore la différence de casse. Contrairement à @code{assoc}, cette fonction peut aussi faire correspondre des éléments de la "alist" qui sont des chaînes ou des symboles plutôt que des cellules cons. En particulier, @var{alist} peut être une liste de chaînes ou de symboles plutôt qu'une "alist" réelle. Voir la section @xref{Association Lists}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This imaginary special form implements a loop that executes the @var{body} forms and then increments the variable @var{var} on each iteration.  On the first iteration, the variable has the value @var{from}; on subsequent iterations, it is incremented by one (or by @var{inc} if that is given).  The loop exits before executing @var{body} if @var{var} equals @var{to}.  Here is an example:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T121426Z">
        <seg>Ce formulaire spécial imaginaire met en application une boucle qui
exécute la forme @var{body} et qui ensuite incrémente la variable
@var{var} à chaque itération. Sur la première itération, la variable
a la valeur @var{from} ; sur des itérations suivantes, elle est
incrémentée de un (ou par @var{inc} si elle est donnée). La boucle est
arrêtée avant l'exécution de @var{body} si @var{var} est égale à
@var{to}. Voici un exemple :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This is a list of symbols whose values are abbrev tables.  @code{define-abbrev-table} adds the new abbrev table name to this list.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C'est une liste de symboles dont les valeurs sont des tables
d'abréviations. @code{define-abbrev-table} ajoute le nouveau nom de
table d'abréviations à cette liste.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This is edition @value{VERSION} of the GNU Emacs Lisp Reference Manual, corresponding to Emacs version @value{EMACSVER}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025745Z">
        <seg>Ceci est l'édition @value{VERSION} du manuel de référence de GNU Emacs
Lisp, correspondant à la version d'Emacs @value{EMACSVER}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This is equivalent to @code{make-hash-table}, but with a different style argument list.  The argument @var{test} specifies the method of key lookup.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T143253Z">
        <seg>Équivaut à @code{make-hash-table}, mais avec un agencement différent de la liste d'arguments. L'argument @var{test} spécifie la méthode de recherche de clé.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This is the exponential function; it returns</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032429Z">
        <seg>C'est la fonction exponentielle ; elle retourne</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This is the value of @code{abbrev-mode} for buffers that do not override it.  This is the same as @code{(default-value 'abbrev-mode)}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C'est la valeur de @code{abbrev-mode} pour les tampons qui ne la
modifient pas. C'est identique à @code{(default-value 'abbrev-mode)}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This makes @var{string} a unibyte string and clears its contents to zeros.  It may also change @var{string}'s length.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T135236Z">
        <seg>Cela fait de @var{string} une chaîne uni-octet et efface le contenu en l'amenant à 0. Cela peut aussi changer la longueur de @var{string}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This manual attempts to be a full description of Emacs Lisp.  For a beginner's introduction to Emacs Lisp, see @cite{An Introduction to Emacs Lisp Programming}, by Bob Chassell, also published by the Free Software Foundation.  This manual presumes considerable familiarity with the use of Emacs for editing; see @cite{The GNU Emacs Manual} for this basic information.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T121426Z">
        <seg>Ce manuel essaye d'être une description complète d'Emacs Lisp. Pour la
présentation à un débutant d'Emacs Lisp, voir @cite{An Introduction to
Emacs Lisp Programming}, par Bob Chassell, également édité par la Free
Software Foundation. Ce manuel suppose la connaissance parfaite de
l'utilisation d'Emacs pour l'édition ; voir @cite{The GNU Emacs
Manual} pour cette information de base.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This manual describes Emacs Lisp.  Generally speaking, the earlier chapters describe features of Emacs Lisp that have counterparts in many programming languages, and later chapters describe features that are peculiar to Emacs Lisp or relate specifically to editing.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicoals" changedate="20140307T213517Z">
        <seg>Ce manuel traite d'Emacs Lisp. D'une manière générale, les premiers chapitres décrivent les
caractéristiques d'Emacs Lisp communes de nombreux langages de programmation, tandis que les chapitres suivants décrivent
les caractéristiques particulières d'Emacs Lisp ou encore celles qui se
réfèrent spécifiquement à l'édition.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This manual has gone through numerous drafts.  It is nearly complete but not flawless.  There are a few topics that are not covered, either because we consider them secondary (such as most of the individual modes) or because they are yet to be written.  Because we are not able to deal with them completely, we have left out several parts intentionally.  This includes most information about usage on VMS.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025835Z">
        <seg>Ce manuel est passé par de nombreuses ébauches. Il est presque complet
mais non impeccable. Il y a quelques sujets qui ne sont pas
couverts parce que nous les considérons secondaires (comme la plupart
des différents modes) ou parce qu'ils doivent encore être
écrits. Puisque nous ne pouvons pas les traiter complètement, nous
avons omis plusieurs parties intentionnellement. Ceci inclut la
plupart des informations sur l'utilisation de VMS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This manual was written by Robert Krawitz, Bil Lewis, Dan LaLiberte, Richard@tie{}M. Stallman and Chris Welty, the volunteers of the GNU manual group, in an effort extending over several years.  Robert@tie{}J. Chassell helped to review and edit the manual, with the support of the Defense Advanced Research Projects Agency, ARPA Order 6082, arranged by Warren@tie{}A. Hunt, Jr.@: of Computational Logic, Inc.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ce manuel a été écrit par Robert Krawitz, Bil Lewis, Dan LaLiberte,
Richard M. Stallman and Chris Welty, les volontaires du groupe GNU
manual, dans un effort se prolongeant sur plusieurs années. Robert
J. Chassell a aidé à passer en revue et éditer le manuel, avec l'appui
de la Defense Advanced Research Projects Agency, ARPA Ordre 6082, avec
l'accord de Warren A. Hunt, Jr.@: de Computational Logic, Inc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This predicate returns non-@code{nil} if @var{object} is a valid case table.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140502T102132Z">
        <seg>Ce prédicat retourne non-@code{nil} si @var{object} est une tableau de casse valide.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This predicate tests whether its argument is a floating point number and returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cet attribut examine si son argument est un nombre à virgule flottante
et renvoie @code{t} si oui, @code{nil} autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This predicate tests whether its argument is a number (either integer or floating point), and returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cet attribut examine si son argument est un nombre (nombre entier ou
virgule flottante), et renvoie le @code{t} si oui, @code{nil}
autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This predicate tests whether its argument is an integer, and returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cet attribut examine si son argument est un nombre entier, et renvoie
le @code{t} si oui, @code{nil} autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This predicate tests whether its argument is zero, and returns @code{t} if so, @code{nil} otherwise.  The argument must be a number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cet attribut examine si son argument est zéro, et renvoie @code{t} si
oui, @code{nil} autrement. L'argument doit être un nombre.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This returns @code{t} if @var{object} is a bool-vector, and @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Nicolas Lecompte" changedate="20140430T202023Z">
        <seg>Retourne @code{t} si @var{object} est un vecteur-booléen, et sinon @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This returns @var{number} converted to floating point.  If @var{number} is already a floating point number, @code{float} returns it unchanged.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ceci renvoie @var{number} converti en un nombre à virgule
flottante. Si @var{number} est déjà un nombre à virgule flottante,
@code{float} le renvoie sans changement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This returns @var{number}, converted to an integer by rounding downward (towards negative infinity).</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ceci renvoie @var{number}, converti en nombre entier en arrondissant
en bas (vers moins l'infini).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This returns @var{number}, converted to an integer by rounding towards the nearest integer.  Rounding a value equidistant between two integers may choose the integer closer to zero, or it may prefer an even integer, depending on your machine.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ceci renvoie @var{number}, converti en nombre entier arrondi vers le
nombre entier le plus proche. L'arrondi d'une valeur équidistante
entre deux nombres entiers peut choisir le nombre entier plus près de
zéro, ou il peut préférer un nombre entier équivalent, selon votre
machine.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This returns @var{number}, converted to an integer by rounding towards zero.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ceci renvoie @var{number}, converti en nombre entier arrondis vers zéro.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This returns @var{number}, converted to an integer by rounding upward (towards positive infinity).</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ceci renvoie @var{number}, converti en nombre entier en arrondissant
vers le haut (vers plus l'infini).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This returns a string containing the characters @var{characters}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T110554Z">
        <seg>Cette fonction retourne une chaîne contenant les caractères @var{caracteres}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This returns non-@code{nil} if @var{table} is a hash table object.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140505T195459Z">
        <seg>Cette fonction retourne non-@code{nil} si @var{table} est un objet de type table de hachage.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This returns the @var{test} value that was given when @var{table} was created, to specify how to hash and compare keys.  See @code{make-hash-table} (@pxref{Creating Hash}).</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140505T195751Z">
        <seg>Cette fonction retourne la valeur @var{test} qui a été donnée quand @var{table} fut créée pour spécifier comment hacher et comparer les clés. Voir @code{make-hash-table} (@pxref{Creating Hash}).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This returns the current nominal size of @var{table}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140505T195940Z">
        <seg>Cette fonction retourne la valeur nominale actuelle de @var{table}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This returns the rehash size of @var{table}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140505T195844Z">
        <seg>Cette fonction retourne la valeur de la taille d'agrandissement (@code{rehash-size}) de @var{table}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This returns the rehash threshold of @var{table}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140505T195923Z">
        <seg>Cette fonction retourne la valeur seuil de re-hachage (@code{rehash threshold}) de @var{table}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This returns the square root of @var{arg}.  If @var{arg} is negative, it signals a @code{domain-error} error.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ceci renvoie la racine carrée de @var{arg}. Si @var{arg} est négatif,
il signale une erreur @code{domain-error}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This returns the standard case table.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140502T102158Z">
        <seg>Cette fonction retourne le tableau de casse normale.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This returns the value specified in @var{char-table} for a range of characters @var{range}.  Here are the possibilities for @var{range}:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Nicolas Lecompte" changedate="20140428T192437Z">
        <seg>Cette fonction retourne la valeur spécifiée dans @var{char-table} pour la gamme de caractères @var{range}. Voici les valeurs possibles de @var{range} :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This section describes functions for conversions between characters, strings and integers.  @code{format} (@pxref{Formatting Strings})  and @code{prin1-to-string} (@pxref{Output Functions}) can also convert Lisp objects into strings.  @code{read-from-string} (@pxref{Input Functions}) can ``convert'' a string representation of a Lisp object into an object.  The functions @code{string-make-multibyte} and @code{string-make-unibyte} convert the text representation of a string (@pxref{Converting Representations}).</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T210623Z">
        <seg>Cette section décrit les fonctions de conversions entre les caractères, les chaînes et les entiers.  @code{format} (@pxref{Formatting Strings})  et @code{prin1-to-string} (@pxref{Output Functions}) peuvent également convertir les objets Lisp en chaînes.  @code{read-from-string} (@pxref{Input Functions}) peut "convertir" en un objet la représentation sous forme de chaîne d'un objet List.  Les fonctions @code{string-make-multibyte} et @code{string-make-unibyte} convertissent la représentation textuelle d'une chaîne (@pxref{Converting Representations}).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This section describes how to create and manipulate abbrev tables.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette section décrit comment créer et manipuler des tables
d'abréviations.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This section describes the functions for accessing and storing associations in a hash table.  In general, any Lisp object can be used as a hash key, unless the comparison method imposes limits.  Any Lisp object can also be used as the value.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T143450Z">
        <seg>Cette section décrit les fonctions pour accéder et stocker des associations dans une table de hachage. En général, tout objet Lisp peut être utilisé en tant que clé de hachage, sauf si la méthode de comparaison impose des limites. Tout objet Lisp peut aussi être utilisé comme valeur.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This section explains the notational conventions that are used in this manual.  You may want to skip this section and refer back to it later.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette section explique les conventions d'écriture qui sont employées
dans ce manuel. Vous pouvez sauter cette section et vous y référer
plus tard.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This sets the current buffer's case table to @var{table}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T183502Z">
        <seg>Cette fonction définit le tableau de casse courante du tampon à la valeur @var{table}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This specifies a hint for how many associations you plan to store in the hash table.  If you know the approximate number, you can make things a little more efficient by specifying it this way.  If you specify too small a size, the hash table will grow automatically when necessary, but doing that takes some extra time.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T182121Z">
        <seg>C'est une astuce qui permet de spécifier le nombre d'associations que vous prévoyez de stocker dans la table de hachage. Si vous connaissez le nombre approximatif, vous pouvez rendre les choses un peu plus efficaces en le spécificant de cette façon. Si vous spécifiez une taille trop petite, la table de hachage s'agrandira automatiquement quand ce sera nécessaire mais cela prendra du temps supplémentaire.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This specifies the criterion for when the hash table is ``full'' (so it should be made larger).  The value, @var{threshold}, should be a positive floating point number, no greater than 1.  The hash table is ``full'' whenever the actual number of entries exceeds this fraction of the nominal size.  The default for @var{threshold} is 0.8.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T143234Z">
        <seg>Spécifie le critère pour qu'une table de hachage soit ``pleine'' (Il faut donc qu'il soit défini comme plus grand). La valeur @var{threshold} doit être soit un nombre positif à virgule flottante et inférieur ou égal à 1. La table de hachage est ``pleine'' dès que le nombre d'entrées dépasse cette fraction de la taille nominale. La valeur par défaut pour @var{threshold} est 0.8.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This specifies the method of key lookup for this hash table.  The default is @code{eql}; @code{eq} and @code{equal} are other alternatives:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T141140Z">
        <seg>Spécifie la méthode de recherche de la clé pour cette table de hachage. La valeur par défaut est @code{eql} ; @code{eq} et @code{equal} sont également possibles :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This variable automatically becomes buffer-local when set in any fashion.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette variable devient automatiquement locale au tampon quand elle est
activée dans n'importe quelle mode.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>This works like @code{substring} but discards all text properties from the value.  Also, @var{start} may be omitted or @code{nil}, which is equivalent to 0.  Thus, @w{@code{(substring-no-properties @var{string})}} returns a copy of @var{string}, with all text properties removed.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T133039Z">
        <seg>Cela fonctionne comme @code{substring} mais rejette toutes les propriétés du texte en valeur. De même, @var{start} peut être omis ou @code{nil}, qui est équivalent à 0. Donc, @w{@code{(substring-no-properties @var{string})}} retourne une copie de @var{string}, en enlevant toutes les propriétés textuelles.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Throughout this manual, the phrases ``the Lisp reader'' and ``the Lisp printer'' refer to those routines in Lisp that convert textual representations of Lisp objects into actual Lisp objects, and vice versa.  @xref{Printed Representation}, for more details.  You, the person reading this manual, are thought of as ``the programmer'' and are addressed as ``you.'' ``The user'' is the person who uses Lisp programs, including those you write.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140424T015013Z">
        <seg>Dans tout ce manuel, les expressions « le lecteur de Lisp » et
« l'afficheur de Lisp » se rapportent à ces routines en Lisp qui
convertissent les représentations textuelles du Lisp object en objets
réels de Lisp, et vice-versa. @xref{Printed Representation}, pour plus
de détails. Vous, la personne lisant ce manuel, êtes considérée comme
« programmeur » et êtes nommée en tant que « vous ».
« L'utilisateur » est la personne qui emploie le Lisp des programmes,
y compris ceux que vous écrivez.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Thus, to define a new method of key lookup, you need to specify both a function to compute the hash code from a key, and a function to compare two keys directly.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T143903Z">
        <seg>Ainsi donc, pour définir une nouvelle méthode de recherche de clé, il faut spécifier à la fois une fonction pour calculer le code de hachage à partir d'une clé et la fonction pour comparer directement deux clés.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Thus, with @code{ash}, shifting the pattern of bits one place to the right looks like this:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ainsi, @code{ash}, décalant la combinaison de chiffres binaires d'une
place vers la droite ressemble à ceci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Tips</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Astuces</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>To clear out a string that contained a password, use @code{clear-string}:</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T135155Z">
        <seg>Pour effacer une chaîne qui contient un mot de passe, utilisez @code{clear-string} :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>To convert an integer to floating point, use the function @code{float}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Pour convertir un nombre entier en un nombre à virgule flottante,
employez la fonction @code{float}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>To test numbers for numerical equality, you should normally use @code{=}, not @code{eq}.  There can be many distinct floating point number objects with the same numeric value.  If you use @code{eq} to compare them, then you test whether two values are the same @emph{object}.  By contrast, @code{=} compares only the numeric values of the objects.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Pour tester l'égalité numérique des nombres, vous devriez normalement
employer @code{=}, pas @code{eq}. Il peut y avoir beaucoup d'objets
distincts de nombre à virgule flottante avec la même valeur
numérique. Si vous employez @code{eq} pour les comparer, vous testez
si deux valeurs sont des @emph{objets} identiques. En revanche,
@code{=} compare seulement les valeurs numériques des objets.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>To test whether a floating point value is a NaN, compare it with itself using @code{=}.  That returns @code{nil} for a NaN, and @code{t} for any other floating point value.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Pour examiner si une valeur à virgule flottante est NaN, le comparer à
lui-même en employant @code{=}. Il renvoie @code{nil} pour NaN, et
@code{t} pour n'importe quelle autre valeur à virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>To understand how various functions work on integers, especially the bitwise operators (@pxref{Bitwise Operations}), it is often helpful to view the numbers in their binary form.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Pour comprendre comment les diverses fonctions travaillent sur des
nombres entiers, particulièrement au niveau du bit des opérateurs
(@pxref{Opérations de bits}), il est souvent utile de regarder les
nombres sous leur forme binaire.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Tools and tips for debugging Lisp programs.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Outils et astuces pour le débogage de programmes Lisp.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Top</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Top</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Trig, exponential and logarithmic functions.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Fonctions trigonométrique, exponentielle et logarithmique.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Two Lisp objects are ``the same,'' as keys, if they are equal according to @code{equal}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T213856Z">
        <seg>Deux objets Lisp sont ``les mêmes'', en tant que clés, s'ils sont égaux d'après la fonction @code{equal}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Type Predicates for Numbers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Type d'attributs des nombres</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Unlike @code{%}, @code{mod} returns a well-defined result for negative arguments.  It also permits floating point arguments; it rounds the quotient downward (towards minus infinity) to an integer, and uses that quotient to compute the remainder.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T032125Z">
        <seg>À la différence de @code{%}, @code{mod} renvoie un résultat bien
défini pour les arguments négatifs. Il permet également des arguments
à virgule flottante ; il arrondit le quotient à un nombre entier vers
le bas (vers moins l'infini), et utilise ce quotient pour calculer le
reste.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>User option descriptions have the same format, but `Variable' is replaced by `User Option'.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les descriptions d'option d'utilisateur ont le même format, mais le
mot `Variable' est remplacée par `User Option'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Using symbols in programs to stand for values.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Utilisation de symboles dans des programmes à la place de valeurs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Using the minibuffer to read input.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Utilisation du minibuffer pour la lecture de l'entrée.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Value</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Valeur</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Variables</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Variables</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Vector Functions</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T174301Z">
        <seg>Fonctions pour les vecteurs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Vectors</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T174225Z">
        <seg>Vecteurs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Vectors are printed with square brackets surrounding the elements.  Thus, a vector whose elements are the symbols @code{a}, @code{b} and @code{a} is printed as @code{[a b a]}.  You can write vectors in the same way in Lisp input.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T103344Z">
        <seg>Les vecteurs s'affichent avec les éléments entre crochets. Ainsi, un vecteur dont les éléments sont les symboles @code{a}, @code{b} et @code{a} s'affiche de la façon suivante @code{[a b a]}. On peut écrire des vecteurs de la même façon en saisie Lisp.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Version 1.2, November 2002</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Version 1.2, novembre 2002</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Version Info</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Information de version</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Version Information</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Information de version</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>We let mail to this list accumulate unread until someone decides to apply the corrections.  Months, and sometimes years, go by between updates.  So please attach no significance to the lack of a reply---your mail @emph{will} be acted on in due time.  If you want to contact the Emacs maintainers more quickly, send mail to @code{bug-gnu-emacs@@gnu.org}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Nous laissons le courrier non lu de cette liste s'accumuler
jusqu'à ce que quelqu'un décide d'appliquer les corrections. Les mois,
et parfois les années, s'écoulent entre les mises à jour. Veuillez ne
pas attacher de signification au manque d'une réponse---votre courrier
@emph{devrait} être pris en compte en temps voulu. Si vous voulez
contacter la maintenance d'Emacs plus rapidement, envoyer le courrier
à @code{bug-gnu-emacs@@gnu.org}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>We often refer to ``the function @code{foo}'' when we really mean the function stored in the function cell of the symbol @code{foo}.  We make the distinction explicit only when necessary.  In normal usage, the function cell usually contains a function (@pxref{Functions}) or a macro (@pxref{Macros}), as that is what the Lisp interpreter expects to see there (@pxref{Evaluation}).  Keyboard macros (@pxref{Keyboard Macros}), keymaps (@pxref{Keymaps}) and autoload objects (@pxref{Autoloading}) are also sometimes stored in the function cells of symbols.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T200122Z">
        <seg>On fait souvent référence à ``la fonction @code{foo}'' alors qu'en réalité il s'agit de la fonction stockée dans la cellule de fonction du symbole @code{foo}. On fait la distinction explicitement seulement quand c'est nécessaire. Dans une utilisation normale, en général la cellule de fonction contient une fonction (@pxref{Functions}) ou une macro (@pxref{Macros}), conformément à ce que l'interpréteur Lisp s'attend à voir là (@pxref{Evaluation}). Les macros de clavier (@pxref{Keyboard Macros}), les mappages claviers (@pxref{Keymaps}) et les objets auto-chargeables (@pxref{Autoloading}) sont aussi parfois stockés dans les cellules de fonction des symboles.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>When @code{nil} is used for @var{end}, it stands for the length of the string.  Thus,</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T122214Z">
        <seg>Lorsque @code{nil} est utilisé pour @var{end}, il correspond à la longueur de la chaîne.  Donc,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>When a form is a macro call, it expands into a new form for Lisp to evaluate.  We show the result of the expansion with @samp{@expansion{}}.  We may or may not show the result of the evaluation of the expanded form.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Quand un formulaire est appellé par une macro, il augmente d'un
nouveau formulaire pour que le Lisp l'évalue. Nous montrons le
résultat de l'expansion avec @samp{@expansion{}}. Nous pouvons ou non
montrer le résultat de l'évaluation du formulaire augmenté.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>When the argument to @code{capitalize} is a character, @code{capitalize} has the same result as @code{upcase}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212835Z">
        <seg>Quand l'argument pour @code{capitalize} est un caractère, @code{capitalize} a le même résultat que @code{upcase}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>When the argument to @code{downcase} is a string, the function creates and returns a new string in which each letter in the argument that is upper case is converted to lower case.  When the argument to @code{downcase} is a character, @code{downcase} returns the corresponding lower case character.  This value is an integer.  If the original character is lower case, or is not a letter, then the value equals the original character.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212656Z">
        <seg>Quand l'argument pour @code{downcase} est une chaîne, la fonction crée et retourne une nouvelle chaîne dans laquelle chaque lettre de l'argument qui est en majuscule est convertie en minuscule. Quand l'argument pour @code{downcase} est un caractère, @code{downcase} retourne le caractère minuscule correspondant. Cette valeur est un entier. Si le caractère d'origine est en minuscule, ou s'il n'est pas une lettre, alors la valeur est égale au caractère d’origine.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>When the argument to @code{upcase-initials} is a character, @code{upcase-initials} has the same result as @code{upcase}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212911Z">
        <seg>Quand l'argument pour @code{upcase-initials} est un caractère, @code{upcase-initials} a le même résultat que @code{upcase}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>When the argument to @code{upcase} is a character, @code{upcase} returns the corresponding upper case character.  This value is an integer.  If the original character is upper case, or is not a letter, then the value returned equals the original character.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212743Z">
        <seg>Quand l'argument pour @code{upcase} est un caractère, @code{upcase} retourne la caractère majuscule correspondant. Cette valeur est un entier. Si le caractère d’origine est en majuscule, ou si n'est pas une lettre, alors la valeur est égale au caractère d’origine.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>When the argument to @code{upcase} is a string, the function creates and returns a new string in which each letter in the argument that is lower case is converted to upper case.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212707Z">
        <seg>Quand l'argument pour @code{upcase} est une chaîne, la fonction crée et retourne une nouvelle chaîne dans laquelle chaque lettre de l'argument qui est en minuscule est convertie en majuscule.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>When the strings have different lengths, and they match up to the length of @var{string1}, then the result is @code{t}.  If they match up to the length of @var{string2}, the result is @code{nil}.  A string of no characters is less than any other string.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T140237Z">
        <seg>Quand les chaînes sont de longueurs différentes, et qu'elles correspondent à la longueur de @var{string1}, alors le résultat est @code{t}. Si elles correspondent à la longueur de @var{string2}, le résultat est @code{nil}. Une chaîne sans aucun caractère est moindre que toute autre chaîne.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>When you add an association to a hash table and the table is ``full,'' it grows automatically.  This value specifies how to make the hash table larger, at that time.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T142422Z">
        <seg>Quand on ajoute une association à une table de hachage et que la table est ``pleine'', elle s'agrandit automatiquement. Cette valeur spécifie comment agrandir la table de hachage à ce moment-là.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>When you construct a case table, you can provide @code{nil} for @var{canonicalize}; then Emacs fills in this slot from the lower case and upper case mappings.  You can also provide @code{nil} for @var{equivalences}; then Emacs fills in this slot from @var{canonicalize}.  In a case table that is actually in use, those components are non-@code{nil}.  Do not try to specify @var{equivalences} without also specifying @var{canonicalize}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T213152Z">
        <seg>Quand on construit une table de casse, on peut mettre @code{nil} pour @var{canonicalize}; dans ce cas Emacs remplit cet emplacement avec les mappages minuscule et majuscule. On peut mettre @code{nil} également pour @var{equivalences}; alors Emacs remplit cet emplacement avec @var{canonicalize}. Dans une table de casse qui se trouve être en cours d' utilisation, ces composant sont non @code{nil}.  N'essayez pas de préciser @var{equivalences} sans préciser également @var{canonicalize}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>When you create an array, other than a char-table, you must specify its length.  You cannot specify the length of a char-table, because that is determined by the range of character codes.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T152616Z">
        <seg>Quand on crée un tableau, qui n'est pas un char-table, on doit obligatoirement spécifier sa longueur. On ne peut pas spécifier la longueur d'un char-table car elle est déterminée par la plage des codes de caractères.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Which Emacs version is running?</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Quelle version d'Emacs fonctionne?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Windows</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Windows</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Writing and using documentation strings.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025452Z">
        <seg>Écriture et utiliser des chaînes de documentation.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>Writing customization declarations.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Écriture de déclarations de personnalisation.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>You can customize case conversion by installing a special @dfn{case table}.  A case table specifies the mapping between upper case and lower case letters.  It affects both the case conversion functions for Lisp objects (see the previous section) and those that apply to text in the buffer (@pxref{Case Changes}).  Each buffer has a case table; there is also a standard case table which is used to initialize the case table of new buffers.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140526T212937Z">
        <seg>On peut personnaliser la conversion de casse en installant une @dfn{table de casse} spécial. Une table de casse spécifie le mappage entre les majuscules et les minuscules. Elle agit à la fois sur les fonctions de conversion de casse pour les objets Lisp (voir la section précédente) et celles qui s'appliquent au texte dans les mémoires tampons (@pxref{Case Changes}). Chaque mémoire tampon a une table de casse; il y a aussi une table de casse standard qui est utilisée pour initialiser la table de casse des nouvelles mémoires tampons.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>You can define new methods of key lookup by means of @code{define-hash-table-test}.  In order to use this feature, you need to understand how hash tables work, and what a @dfn{hash code} means.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T143806Z">
        <seg>On peut définir de nouvelles méthodes de recherche de clé grâce à la fonction @code{define-hash-table-test}. Pour utiliser cette fonctionnalité, il faut comprendre comment les tables de hachages fonctionnent et ce qu'est un @dfn{code de hachage}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>You can read this as ``@code{(car '(1 2))} evaluates to 1.''</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140424T015013Z">
        <seg>Vous pouvez lire ceci en tant que « @code{(car '(1 2))} est évalué à
1. »</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>You can test whether an arbitrary Lisp object is a symbol with @code{symbolp}:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Vous pouvez tester si n'importe quel objet Lisp est un symbole avec @code{symbolp} :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>You can think of a hash table conceptually as a large array of many slots, each capable of holding one association.  To look up a key, @code{gethash} first computes an integer, the hash code, from the key.  It reduces this integer modulo the length of the array, to produce an index in the array.  Then it looks in that slot, and if necessary in other nearby slots, to see if it has found the key being sought.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T143849Z">
        <seg>On peut concevoir une table de hachage comme étant un grand tableau composé de beaucoup de cases, chacune capable de contenir une association. Pour rechercher une clé, @code{gethash} calcule d'abord un entier, le code de hachage, à partir de la clé. Il réduit l'entier modulo la longueur du tableau pour produire un indice du tableau. Ensuite, il regarde dans cette case et si nécessaire dans d'autres cases voisines pour voir s'il trouve la clé qu'il recherche.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>You can use @code{define-hash-table-test} (@pxref{Defining Hash}) to define additional possibilities for @var{test}.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T141329Z">
        <seg>On peut utiliser @code{define-hash-table-test} (@pxref{Defining Hash}) pour définir des possibilités supplémentaires pour la fonction @var{test}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>You can use @code{logb} to extract the binary exponent of a floating point number (or estimate the logarithm of an integer):</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Vous pouvez employer @code{logb} pour extraire l'exposant binaire d'un
nombre à virgule flottante (ou estimer le logarithme d'un nombre
entier):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>[ @dots{} ]</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>[ @dots{} ]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>[^ @dots{} ]</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>[^ @dots{} ]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\&amp;</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\&amp;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\@var{n}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\@var{n}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\\</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\\</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\a</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\b</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\e</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\e</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\f</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\f</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\n</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\n</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\r</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\r</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\s</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\s</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\t</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\t</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>\v</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>\v</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>^</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>^</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>_____________________________________________
         |                                             |
         |          Sequence                           |
         |  ______   ________________________________  |
         | |      | |                                | |
         | | List | |             Array              | |
         | |      | |    ________       ________     | |
         | |______| |   |        |     |        |    | |
         |          |   | Vector |     | String |    | |
         |          |   |________|     |________|    | |
         |          |  ____________   _____________  | |
         |          | |            | |             | | |
         |          | | Char-table | | Bool-vector | | |
         |          | |____________| |_____________| | |
         |          |________________________________| |
         |_____________________________________________|</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T173828Z">
        <seg>          _____________________________________________
         |                                             |
         |             Suite                           |
         |  ______   ________________________________  |
         | |      | |                                | |
         | |Liste | |            Tableau             | |
         | |      | |    ________       __________   | |
         | |______| |   |        |     |  Chaîne  |  | |
         |          |   |Vecteur |     |   de     |  | |
         |          |   |        |     |caractères|  | |
         |          |   |________|     |__________|  | |
         |          |  ____________   _____________  | |
         |          | |  Table de  | |   Vecteur   | | |
         |          | | chaînes de | |   Booléen   | | |
         |          | | caractères | |             | | |
         |          | |____________| |_____________| | |
         |          |________________________________| |
         |_____________________________________________|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>`</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>abbrev</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>abbrev</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>abbrev-all-caps</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>abbrev-all-caps</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>abbrev-file-name</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>abbrev-file-name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>abbrev-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>abbrev-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>abbrev-start-location</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>abbrev-start-location</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>abbrev-start-location-buffer</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>abbrev-start-location-buffer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>abbrev-table-name-list</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>abbrev-table-name-list</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>abbrevs-changed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>abbrevs-changed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>ad-default-compilation-action</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>ad-default-compilation-action</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>adaptive-fill-first-line-regexp</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>adaptive-fill-first-line-regexp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>adaptive-fill-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>adaptive-fill-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>adaptive-fill-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>adaptive-fill-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>adaptive-fill-regexp</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>adaptive-fill-regexp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>after-revert-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>after-revert-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>after-save-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>after-save-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>always equals @var{dividend}, subject to rounding error if either argument is floating point.  For @code{floor}, see @ref{Numeric Conversions}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>est toujours égale à @var{dividend}, sauf si l'un ou l'autre
argument est un nombre à virgule flottante, une erreur sera
générée. Pour @code{floor}, voir les @ref{Conversions numériques}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>always equals @var{dividend}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>est toujours égale à @var{dividend}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>and</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>et</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>and how you can call its subroutines.</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025436Z">
        <seg>et comment vous pouvez appeler ses sous-programmes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>and property lists.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>et des listes de propriétés.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 02d65d63-3b64-49bc-a5c0-bfd5eabb6c98</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 02d65d63-3b64-49bc-a5c0-bfd5eabb6c98</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 07636b8c-c4e3-4735-9e06-2e864320b434</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 07636b8c-c4e3-4735-9e06-2e864320b434</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 141f74ce-6ae3-40dc-a6c4-ef83fc4ec35c</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 141f74ce-6ae3-40dc-a6c4-ef83fc4ec35c</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 295a6321-e5ab-46d5-aef5-0bb4f447a67f</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 295a6321-e5ab-46d5-aef5-0bb4f447a67f</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 2e53cfab-5691-41f6-b5a8-9c6a3462399c</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 2e53cfab-5691-41f6-b5a8-9c6a3462399c</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 31fb8a4e-4aa8-4a74-a206-aa00451394d4</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 31fb8a4e-4aa8-4a74-a206-aa00451394d4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 39100cdf-8a55-4898-acba-595db619e8e2</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 39100cdf-8a55-4898-acba-595db619e8e2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 4466c7ca-e549-4119-948c-6eed34e1ff87</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 4466c7ca-e549-4119-948c-6eed34e1ff87</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 4b2c33bc-d7e4-43f5-bc20-27c0db52a53e</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 4b2c33bc-d7e4-43f5-bc20-27c0db52a53e</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 4c7bff41-36e6-4da6-9e7f-9b9289e27c8e</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 4c7bff41-36e6-4da6-9e7f-9b9289e27c8e</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 5182b306-c403-4e4f-ba24-e1911bc6da9d</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 5182b306-c403-4e4f-ba24-e1911bc6da9d</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 55fd0296-d906-4551-b300-979d3846aa88</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 55fd0296-d906-4551-b300-979d3846aa88</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 56e8ff26-4ffe-4832-a141-7e991a2d0f87</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 56e8ff26-4ffe-4832-a141-7e991a2d0f87</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 574e8dd2-d513-4616-9844-c9a27869782e</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 574e8dd2-d513-4616-9844-c9a27869782e</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 5ffdbe08-2cd4-48ec-a5a8-080f95756eec</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 5ffdbe08-2cd4-48ec-a5a8-080f95756eec</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 6baae835-b667-4447-91e2-9829ae1cf543</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 6baae835-b667-4447-91e2-9829ae1cf543</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 717c6048-5d9d-4c7d-9a62-df57390b6f19</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 717c6048-5d9d-4c7d-9a62-df57390b6f19</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 74842db8-019f-4818-b5a4-b2de878e57fd</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 74842db8-019f-4818-b5a4-b2de878e57fd</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 8378814a-30d7-467c-9615-74a80b9988a7</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 8378814a-30d7-467c-9615-74a80b9988a7</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 8750b7d2-de4c-4923-809a-d35fc39fd8ce</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 8750b7d2-de4c-4923-809a-d35fc39fd8ce</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 8abc30d4-4d3a-47f9-b908-e9e971c18c6d</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 8abc30d4-4d3a-47f9-b908-e9e971c18c6d</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 9014cf6e-f3c4-401d-b8da-4fe52723984c</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 9014cf6e-f3c4-401d-b8da-4fe52723984c</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 94977df6-3dca-4730-b57b-c6329e9282ba</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 94977df6-3dca-4730-b57b-c6329e9282ba</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 9711a66e-4749-4265-9e8c-972d55b67096</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 9711a66e-4749-4265-9e8c-972d55b67096</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: 9e03a1c7-6f62-4346-85d9-ed5b79386e07</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: 9e03a1c7-6f62-4346-85d9-ed5b79386e07</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: ac7694c8-1f02-4b42-9531-33ba13b179e1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: ac7694c8-1f02-4b42-9531-33ba13b179e1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: b1ba2e7a-a0f3-4c5e-875c-7d8e22d73299</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: b1ba2e7a-a0f3-4c5e-875c-7d8e22d73299</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: b741253c-7e23-4a02-b3fa-cffd9e4d72b9</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: b741253c-7e23-4a02-b3fa-cffd9e4d72b9</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: ba36b4c2-e60f-49e2-bc25-61158fdcd815</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: ba36b4c2-e60f-49e2-bc25-61158fdcd815</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: ba9da253-e65f-4e7f-b727-08fba0a1df7a</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: ba9da253-e65f-4e7f-b727-08fba0a1df7a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: bba7f945-9078-477f-a2ce-18818a6e1218</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: bba7f945-9078-477f-a2ce-18818a6e1218</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: be705bf8-941b-4c35-84fc-ad7d20ddb7cb</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: be705bf8-941b-4c35-84fc-ad7d20ddb7cb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: c2573ca2-18aa-4839-93b8-924043ef831f</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: c2573ca2-18aa-4839-93b8-924043ef831f</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: cfb87287-9364-4e46-9e93-6c2f7f6ae794</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: cfb87287-9364-4e46-9e93-6c2f7f6ae794</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: d00ac830-e120-41fb-bbc5-7ca3eeaa227f</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: d00ac830-e120-41fb-bbc5-7ca3eeaa227f</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: d156593f-82f8-4708-a844-204e48f7f2aa</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: d156593f-82f8-4708-a844-204e48f7f2aa</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: d1b8fad3-f48c-4ce4-a402-f73b5ef19bd2</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: d1b8fad3-f48c-4ce4-a402-f73b5ef19bd2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: d4cce66d-1047-45c3-bfde-db6719d6e82b</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: d4cce66d-1047-45c3-bfde-db6719d6e82b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: ddc57378-b0e6-4195-b7b6-43f8777395a7</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: ddc57378-b0e6-4195-b7b6-43f8777395a7</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: df731f89-0900-4389-a436-9105241b6f7a</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: df731f89-0900-4389-a436-9105241b6f7a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: e34944ad-7d5c-4980-be00-36a5fe54d4b1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: e34944ad-7d5c-4980-be00-36a5fe54d4b1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: f723a4e0-31b3-453f-8afc-0bf8fd276d57</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: f723a4e0-31b3-453f-8afc-0bf8fd276d57</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: f78e3050-2f0a-4dee-be27-d9979a0a2289</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: f78e3050-2f0a-4dee-be27-d9979a0a2289</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: f7e9a219-a0e1-4776-b631-08eaa1d49b34</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: f7e9a219-a0e1-4776-b631-08eaa1d49b34</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arch-tag: ffdf5714-7ecf-415b-9023-fbc6b409c2c6</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arch-tag: ffdf5714-7ecf-415b-9023-fbc6b409c2c6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>arithmetic shift</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>arithmetic shift</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>aset array index object</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140527T174027Z">
        <seg>aset array n object</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>ash integer1 count</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>ash integer1 count</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>asin arg</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>asin arg</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>auto-fill-chars</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>auto-fill-chars</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>auto-save-default</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>auto-save-default</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>auto-save-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>auto-save-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>auto-save-interval</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>auto-save-interval</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>auto-save-list-file-name</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>auto-save-list-file-name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>auto-save-list-file-prefix</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>auto-save-list-file-prefix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>auto-save-timeout</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>auto-save-timeout</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>auto-save-visited-file-name</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>auto-save-visited-file-name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>backup-by-copying</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>backup-by-copying</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>backup-by-copying-when-linked</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>backup-by-copying-when-linked</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>backup-by-copying-when-mismatch</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>backup-by-copying-when-mismatch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>backup-by-copying-when-privileged-mismatch</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>backup-by-copying-when-privileged-mismatch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>backup-directory-alist</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>backup-directory-alist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>backup-enable-predicate</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>backup-enable-predicate</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>backup-inhibited</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>backup-inhibited</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>backward-delete-char-untabify-method</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>backward-delete-char-untabify-method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>before-revert-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>before-revert-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>before-save-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>before-save-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>beginning-of-defun-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>beginning-of-defun-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>blink-matching-delay</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>blink-matching-delay</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>blink-matching-paren</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>blink-matching-paren</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>blink-matching-paren-distance</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>blink-matching-paren-distance</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>boolean</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>booléen</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>buffer-invisibility-spec</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>buffer-invisibility-spec</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>buffer-saved-size</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>buffer-saved-size</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>bug-lisp-manual@@gnu.org</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>bug-lisp-manual@@gnu.org</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>bugs</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025954Z">
        <seg>erreurs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>bugs in this manual</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025755Z">
        <seg>erreurs dans ce manuel</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>but some machines may provide a wider range.  Many examples in this chapter assume an integer has 29 bits.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mais quelques machines peuvent définir un autre champ. Beaucoup
d'exemples en ce chapitre supposent qu'un nombre entier a 29 bits.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>bytes</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T202649Z">
        <seg>Octets</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>cache-long-line-scans</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>cache-long-line-scans</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>capitalization</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140502T105916Z">
        <seg>capitalisation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>case conversion in Lisp</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T193513Z">
        <seg>Conversion de la casse en Lisp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>case-fold-search</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>case-fold-search</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>case-replace</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>case-replace</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>char-or-string-p object</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T105743Z">
        <seg>char-or-string-p objet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>char-syntax character</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>char-syntax caractère</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>char-table length</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T174954Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>character arrays</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T202440Z">
        <seg>Tableaux de caractères</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>character case</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T193450Z">
        <seg>La casse du caractère</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>character to string</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T141911Z">
        <seg>De caractère à chaîne</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>characters</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T202448Z">
        <seg>Caractères</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>checkdoc-minor-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>checkdoc-minor-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>cl</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030012Z">
        <seg>cl</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>clear-abbrev-table table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>clear-abbrev-table table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>color</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>couleur</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>command-line-args</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>command-line-args</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>command-line-processed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>command-line-processed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>command-switch-alist</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>command-switch-alist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>comment-column</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>comment-column</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>completion-auto-help</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>completion-auto-help</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>completion-ignored-extensions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>completion-ignored-extensions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>concatenating strings</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T103040Z">
        <seg>Concaténation des chaînes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>conditional evaluation</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>évaluation d'une condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>cons-cells-consed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>cons-cells-consed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>conversion of strings</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T140942Z">
        <seg>Conversion des chaînes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>convert-standard-filename filename</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>convert-standard-filename fichier</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>copy-abbrev-table table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>copy-abbrev-table table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>copying strings</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T103006Z">
        <seg>Copie des chaînes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>cos arg</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>cos arg</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>creating hash tables</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T213441Z">
        <seg>création de tables de hachage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>ctl-x-4-map</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>ctl-x-4-map</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>ctl-x-5-map</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>ctl-x-5-map</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>ctl-x-map</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>ctl-x-map</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>current-fill-column</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>current-fill-column</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>current-input-method</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>current-input-method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>current-justification</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>current-justification</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>current-left-margin</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>current-left-margin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>cursor-in-echo-area</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>cursor-in-echo-area</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>cursor-in-non-selected-windows</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>cursor-in-non-selected-windows</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>deactivate-mark</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>deactivate-mark</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>debug-ignored-errors</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>debug-ignored-errors</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>debug-on-error</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>debug-on-error</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>debug-on-next-call</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>debug-on-next-call</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>debug-on-quit</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>debug-on-quit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>debug-on-signal</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>debug-on-signal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>defadvice</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>defadvice</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>default-abbrev-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>default-abbrev-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>default-buffer-file-type</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>default-buffer-file-type</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>default-case-fold-search</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>default-case-fold-search</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>default-fill-column</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>default-fill-column</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>default-input-method</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>default-input-method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>default-justification</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>default-justification</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>default-major-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>default-major-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>default-truncate-lines</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>default-truncate-lines</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>define-abbrev table name expansion &amp;optional hook count system-flag</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>define-abbrev table name expansion &amp;optional hook count system-flag</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>define-abbrev-table tabname definitions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>define-abbrev-table tabname definitions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>definitions of symbols</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>définitions de symboles</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>defsubst</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>defsubst</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>defun-prompt-regexp</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>defun-prompt-regexp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>delete-auto-save-files</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>delete-auto-save-files</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>delete-exited-processes</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>delete-exited-processes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>delete-old-versions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>delete-old-versions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>desktop-save-buffer</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>desktop-save-buffer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>direction-reversed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>direction-reversed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>directory-oriented functions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>directory-oriented fonctions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>dired-kept-versions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>dired-kept-versions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>display-buffer-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>display-buffer-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>display-buffer-reuse-frames</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>display-buffer-reuse-frames</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>double-click-fuzz</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>double-click-fuzz</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>double-click-time</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>double-click-time</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>easy-mmode-define-minor-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>easy-mmode-define-minor-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>echo-area-clear-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>echo-area-clear-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>echo-keystrokes</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>echo-keystrokes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-all-defs</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-all-defs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-all-forms</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-all-forms</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-continue-kbd-macro</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-continue-kbd-macro</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-eval-top-level-form</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-eval-top-level-form</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-global-break-condition</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-global-break-condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-initial-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-initial-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-on-error</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-on-error</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-on-quit</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-on-quit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-print-circle</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-print-circle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-print-length</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-print-length</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-print-level</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-print-level</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-print-trace-after</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-print-trace-after</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-print-trace-before</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-print-trace-before</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-save-displayed-buffer-points</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-save-displayed-buffer-points</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-save-windows</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-save-windows</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-set-global-break-condition</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-set-global-break-condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-setup-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-setup-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-sit-for-seconds</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-sit-for-seconds</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-temp-display-freq-count</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-temp-display-freq-count</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-test-coverage</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-test-coverage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-trace</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-trace</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>edebug-unwrap</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>edebug-unwrap</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>enable-local-eval</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>enable-local-eval</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>enable-local-variables</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>enable-local-variables</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>enable-multibyte-characters</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>enable-multibyte-characters</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>enable-recursive-minibuffers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>enable-recursive-minibuffers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>end-of-defun-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>end-of-defun-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>esc-map</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>esc-map</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>eval-buffer @r{(Edebug)}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>eval-buffer @r{(Edebug)}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>eval-current-buffer</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>eval-current-buffer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>eval-current-buffer @r{(Edebug)}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>eval-current-buffer @r{(Edebug)}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>eval-defun (Edebug)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>eval-defun (Edebug)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>eval-expression @r{(Edebug)}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>eval-expression @r{(Edebug)}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>eval-expression-debug-on-error</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>eval-expression-debug-on-error</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>eval-expression-print-length</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>eval-expression-print-length</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>eval-expression-print-level</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>eval-expression-print-level</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>eval-region @r{(Edebug)}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>eval-region @r{(Edebug)}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>even-window-heights</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>even-window-heights</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>exec-path</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>exec-path</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>facemenu-keymap</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>facemenu-keymap</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>false</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030100Z">
        <seg>faux</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>field width</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T161939Z">
        <seg>Largeur du champ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>file-name-buffer-file-type-alist</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>file-name-buffer-file-type-alist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>file-precious-flag</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>file-precious-flag</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>fill-column</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>fill-column</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>fill-context-prefix from to</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>fill-context-prefix de à</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>fill-individual-varying-indent</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>fill-individual-varying-indent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>fill-nobreak-predicate</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>fill-nobreak-predicate</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>fill-paragraph-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>fill-paragraph-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>fill-prefix</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>fill-prefix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>find-file-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>find-file-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>find-file-wildcards</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>find-file-wildcards</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>float-output-format</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>float-output-format</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>floatp object</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>floatp object</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>floats-consed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>floats-consed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>focus-follows-mouse</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>focus-follows-mouse</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>font-lock-defaults</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>font-lock-defaults</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>fonts in this manual</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030020Z">
        <seg>polices dans ce manuel</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>foo
     @result{} 4</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>foo
     @result{} 4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>for</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>for</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>for recording miscellaneous information.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>pour l'enregistrement d'informations diverses.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>format specification</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T151501Z">
        <seg>La spécification du format</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>formatting strings</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T145700Z">
        <seg>Formatage des chaînes de caractères</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>frame-background-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>frame-background-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>ftp-login</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>ftp-login</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>fonction</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>function cell</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T205927Z">
        <seg>cellule de fonction</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>function, @code{foo}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>fonction, @code{foo}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>fundamental-mode-abbrev-table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>fundamental-mode-abbrev-table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>garbage-collection-messages</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>garbage-collection-messages</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>gc-cons-percentage</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>gc-cons-percentage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>gc-cons-threshold</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>gc-cons-threshold</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>gc-elapsed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>gc-elapsed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>gcs-done</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>gcs-done</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>get symbol property</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>get symbole propriété</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>global-abbrev-table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>global-abbrev-table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>goal-column</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>goal-column</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>h</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>h</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>hash code</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140505T194343Z">
        <seg>valeur de hachage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>hash tables</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T212325Z">
        <seg>Tables de hachages</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>header-line-format</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>header-line-format</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>image-type-available-p</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>image-type-available-p</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>image-type-available-p type</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>image-type-available-p type</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>inc</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>inc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>indent-line-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>indent-line-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>indent-region-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>indent-region-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>indent-tabs-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>indent-tabs-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>inhibit-default-init</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>inhibit-default-init</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>inhibit-startup-echo-area-message</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>inhibit-startup-echo-area-message</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>inhibit-startup-message</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>inhibit-startup-message</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>initial-major-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>initial-major-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>input-method-alist</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>input-method-alist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>insert-abbrev-table-description name &amp;optional human</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>insert-abbrev-table-description name &amp;optional human</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>insert-default-directory</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>insert-default-directory</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>integer to decimal</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T142632Z">
        <seg>D'entier à décimal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>integer to hexadecimal</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140502T104926Z">
        <seg>D'entier à hexadécimal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>integer to octal</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T155730Z">
        <seg>D'entier à octal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>integer to string</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T142602Z">
        <seg>D'entier à chaîne</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>integerp object</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>integerp object</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>integers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>entiers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>interpreter-mode-alist</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>interpreter-mode-alist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>intervals-consed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>intervals-consed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>is a fundamental mathematical constant also called the base of natural logarithms.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>est une constante mathématique fondamentale également appelée base des
logarithmes naturels.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>is entirely equivalent to</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>est rigoureusement équivalent à :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>is used.  If @var{arg} is negative, it signals a @code{domain-error} error.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>est employée. Si @var{arg} est négatif, il signale une erreur
@code{domain-error}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>kept-new-versions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>kept-new-versions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>kept-old-versions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>kept-old-versions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>kill-read-only-ok</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>kill-read-only-ok</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>kill-ring-max</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>kill-ring-max</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>last-abbrev</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>last-abbrev</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>last-abbrev-location</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>last-abbrev-location</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>last-abbrev-text</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>last-abbrev-text</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>left-margin</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>left-margin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>length sequence</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T175008Z">
        <seg>length sequence </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lexical comparison</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T135904Z">
        <seg>Comparaison lexicale</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lisp-mode-abbrev-table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>lisp-mode-abbrev-table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/abbrevs.texi:104
This function defines @var{tabname} (a symbol) as an abbrev table name, i.e., as a variable whose value is an abbrev table.  It defines abbrevs in the table according to @var{definitions}, a list of elements of the form @code{(@var{abbrevname} @var{expansion} @var{hook} @var{usecount} @var{system-flag})}.  If an element of @var{definitions} has length less than five, omitted elements default to @code{nil}.  A value of @code{nil} for @var{usecount} is equivalent to zero.  The return value is always @code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction définit @var{tabname} (un symbole) comme le nom d'une
table d'abréviations, c.-à-d., comme variable dont la valeur est une
table d'abréviations. Elle définit les abréviations dans la table
selon @var{definitions}, une liste d'éléments de forme
@code{(@var{abbrevname} @var{expansion} @var{hook} @var{usecount}
@var{system-flag})}. Si un élément de @var{definitions} a la longueur
inférieure à cinq, les éléments omis par défaut sont @code{nil}. Une
valeur de @code{nil} pour @var{usecount} est équivalente à zéro. La
valeur de retour est toujours @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/abbrevs.texi:110
If this function is called more than once for the same @var{tabname}, subsequent calls add the definitions in @var{definitions} to @var{tabname}, rather than overriding the entire original contents.  (A subsequent call only overrides abbrevs explicitly redefined or undefined in @var{definitions}.)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si cette fonction est appelée plus d'une fois pour le même
@var{tabname}, les appels suivants ajoutent les définitions dans
@var{definitions} à @var{tabname}, plutôt que de modifier en entier le
contenu original. (Un appel suivant modifie seulement des abréviations
explicitement redéfinies ou éliminées dans @var{definitions}.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/abbrevs.texi:115
This is a list of symbols whose values are abbrev tables.  @code{define-abbrev-table} adds the new abbrev table name to this list.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C'est une liste de symboles dont les valeurs sont des tables
d'abréviations. @code{define-abbrev-table} ajoute le nouveau nom de
table d'abréviations à cette liste.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/abbrevs.texi:121
This function inserts before point a description of the abbrev table named @var{name}.  The argument @var{name} is a symbol whose value is an abbrev table.  The return value is always @code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction insère avant le point une description de la table
d'abréviations avant nommé @var{name}. L'argument @var{name} est un
symbole dont la valeur est la table d'abréviations. La valeur de
retour est toujours @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/abbrevs.texi:128
If @var{human} is non-@code{nil}, the description is human-oriented.  System abbrevs are listed and identified as such.  Otherwise the description is a Lisp expression---a call to @code{define-abbrev-table} that would define @var{name} as it is currently defined, but without the system abbrevs.  (The mode or package using @var{name} is supposed to add these to @var{name} separately.)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si @var{human} est non-@code{nil}, la description est orientée pour
l'humain. Des abréviations de système sont énumérées et identifiées en
tant que telles. Autrement la description est une expression de
Lisp---un appel à @code{define-abbrev-table} définirait @var{name}
comme il l'est actuellement, mais en dehors des abréviations de
système---. (Le mode ou le paquet employant @var{name} est supposé
ajouter ces derniers à @var{name} séparément.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/abbrevs.texi:140
@code{define-abbrev} is the low-level basic function for defining an abbrev in a specified abbrev table.  When major modes predefine standard abbrevs, they should call @code{define-abbrev} and specify @code{t} for @var{system-flag}.  Be aware that any saved non-``system'' abbrevs are restored at startup, i.e. before some major modes are loaded.  Major modes should therefore not assume that when they are first loaded their abbrev tables are empty.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{define-abbrev} est la fonction de base de bas niveau pour
définir les abréviations dans une table d'abréviations indiquée. Si
les modes majeurs prédéfinissent la norme des abréviations, ils
devraient appeler @code{define-abbrev} et indiquer @code{t} pour
@var{system-flag}. Faites attention, les abréviations non sauvés du
non-``système'' sont restaurées au démarrage, c.-à-d. avant que les
modes majeurs sont chargés. C'est pourquoi les modes majeurs ne
devraient pas assumer que, quand ils sont d'abord chargés, leurs
tables d'abbréviations soient vides.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/abbrevs.texi:145
This function defines an abbrev named @var{name}, in @var{table}, to expand to @var{expansion} and call @var{hook}.  The return value is @var{name}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction définit une abréviation appelée @var{name}, dans
@var{table}, à développer @var{expansion} et appeler @var{hook}. La
valeur de retour est @var{name}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/abbrevs.texi:149
The value of @var{count}, if specified, initializes the abbrev's usage-count.  If @var{count} is not specified or @code{nil}, the use count is initialized to zero.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur @var{count}, si indiquée, initialise les abréviations
usage-compter. Si @var{count} n'est pas indiqué ou est @code{nil},
l'usage du compteur est initialisée à zéro.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/abbrevs.texi:16
An abbreviation or @dfn{abbrev} is a string of characters that may be expanded to a longer string.  The user can insert the abbrev string and find it replaced automatically with the expansion of the abbrev.  This saves typing.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Une abréviation ou @dfn{abbrev} est une chaîne de caractères qui peut
être développée dans une chaîne plus longue. L'utilisateur peut
insérer la chaîne d'abréviation et se rendre compte qu'elle a été
remplacée automatiquement avec l'expansion de l'abréviation. Ceci
améliore la dactylographie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/abbrevs.texi:21
The set of abbrevs currently in effect is recorded in an @dfn{abbrev table}.  Each buffer has a local abbrev table, but normally all buffers in the same major mode share one abbrev table.  There is also a global abbrev table.  Normally both are used.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Actuellement, l'ensemble des abréviations est enregistré dans un
@dfn{abbrev table}. Chaque tampon a une table locale d'abréviations,
mais normalement tous les tampons dans le même mode majeur partage une
table principale d'abréviations. Il y a donc une table d'abréviation
global. Normalement tous les deux sont employés.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/abbrevs.texi:33
An abbrev table is represented as an obarray containing a symbol for each abbreviation.  The symbol's name is the abbreviation; its value is the expansion; its function definition is the hook function to do the expansion (@pxref{Defining Abbrevs}); its property list cell typically contains the use count, the number of times the abbreviation has been expanded.  Alternatively, the use count is on the @code{count} property and the system-abbrev flag is on the @code{system-type} property.  Abbrevs with a non-@code{nil} @code{system-type} property are called ``system'' abbrevs.  They are usually defined by modes or packages, instead of by the user, and are treated specially in certain respects.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Une table d'abréviation est représentée en tant qu'une liste contenant
un symbole pour chaque abréviation. Le nom du symbole est
l'abréviation ; sa valeur est l'expansion ; sa définition de fonction
est la fonction hook devant faire l'expansion (@pxref{Defining
Abbrevs}) ; sa cellule de liste de propriété contient typiquement le
compteur d'utilisation, le nombre de fois que l'abréviation a été
développée. Alternativement, le compteur d'utilisation pointe vers la
propriété @code{count} et le drapeau de system-abbrev pointe vers la
propriété @code{system-type}. Les abréviations avec la propriété
non-@code{nil} @code{system-type} s'appellent les abréviations de
``système''. Elles sont habituellement définies par des modes ou des
paquets, non par l'utilisateur, et traitées spécialement à certains
égards.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/abbrevs.texi:39
Because the symbols used for abbrevs are not interned in the usual obarray, they will never appear as the result of reading a Lisp expression; in fact, normally they are never used except by the code that handles abbrevs.  Therefore, it is safe to use them in an extremely nonstandard way.  @xref{Creating Symbols}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Puisque les symboles utilisés pour les abréviations ne sont pas
compris dans la liste habituel, ils n'apparaîtront jamais comme le
résultat de lecture d'une expression Lisp ; en fait, normalement ils
ne sont jamais utilisés excepté par le code qui traite ces
abréviations. Par conséquent, il est prudent de les utiliser d'une
manière extrêmement non-standard. @xref{Création de symboles}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/abbrevs.texi:42
For the user-level commands for abbrevs, see @ref{Abbrevs,, Abbrev Mode, emacs, The GNU Emacs Manual}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Pour les commandes du niveau utilisateur des abréviations, voir
@ref{Abbrevs,, Abbrev Mode, emacs, The GNU Emacs Manual}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/abbrevs.texi:58
Abbrev mode is a minor mode controlled by the value of the variable @code{abbrev-mode}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le mode abbrev est un mode mineur contrôlé par la valeur de la
variable @code{abbrev-mode}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/abbrevs.texi:64
A non-@code{nil} value of this variable turns on the automatic expansion of abbrevs when their abbreviations are inserted into a buffer.  If the value is @code{nil}, abbrevs may be defined, but they are not expanded automatically.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Une valeur non-@code{nil} de cette variable active l'expansion
automatique des abréviations quand elles sont insérées dans un
tampon. Si la valeur est @code{nil}, des abréviations peuvent être
définis, mais elles ne sont pas développées automatiquement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/abbrevs.texi:66
This variable automatically becomes buffer-local when set in any fashion.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette variable devient automatiquement locale au tampon quand elle est
activée dans n'importe quelle mode.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/abbrevs.texi:71
This is the value of @code{abbrev-mode} for buffers that do not override it.  This is the same as @code{(default-value 'abbrev-mode)}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C'est la valeur de @code{abbrev-mode} pour les tampons qui ne la
modifient pas. C'est identique à @code{(default-value 'abbrev-mode)}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/abbrevs.texi:81
This function creates and returns a new, empty abbrev table---an obarray containing no symbols.  It is a vector filled with zeros.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction crée et renvoie une nouvelle table vide
d'abréviations---une liste ne contient aucun symbole---. C'est un
vecteur rempli de zéros.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/abbrevs.texi:86
This function undefines all the abbrevs in abbrev table @var{table}, leaving it empty.  It always returns @code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction élimine toutes les abréviations dans la table
d'abrévations @var{table}, la laissant vide. Elle renvoie toujours
@code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/abbrevs.texi:93
This function returns a copy of abbrev table @var{table}---a new abbrev table that contains the same abbrev definitions.  The only difference between @var{table} and the returned copy is that this function sets the property lists of all copied abbrevs to 0.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie une copie de table d'abréviations
@var{table}---une nouvelle table d'abréviations qui contient les mêmes
définitions d'abréviations---. La seule différence entre @var{table}
et la copie retournée est que la fonction place les listes de
propriétés de toutes les abréviations copiées à 0.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/back.texi:23 lispref/intro.texi:18
Most of the GNU Emacs text editor is written in the programming language called Emacs Lisp.  You can write new code in Emacs Lisp and install it as an extension to the editor.  However, Emacs Lisp is more than a mere ``extension language''; it is a full computer programming language in its own right.  You can use it as you would any other programming language.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La majeure partie de l'éditeur de texte GNU Emacs est écrite dans
le langage de programmation appelé Emacs Lisp. Vous pouvez écrire le
nouveau code en Emacs Lisp et l'installer comme extension de l'éditeur.
Cependant, Emacs Lisp est plus qu'un simple ``langage d'extension'' ;
c'est un langage de programmation complet et autonome d'ordinateur.
Vous pouvez l'employer comme n'importe quel autre langage de programmation.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/back.texi:30 lispref/intro.texi:25
Because Emacs Lisp is designed for use in an editor, it has special features for scanning and parsing text as well as features for handling files, buffers, displays, subprocesses, and so on.  Emacs Lisp is closely integrated with the editing facilities; thus, editing commands are functions that can also conveniently be called from Lisp programs, and parameters for customization are ordinary Lisp variables.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Puisque Emacs Lisp est conçu pour l'utilisation dans un éditeur, il a
des usages spéciaux pour le balayage et l'analyse de texte aussi bien
que des dispositifs pour manipuler des fichiers, tampons, affichages,
sous-processus, et ainsi de suite. L'Emacs Lisp est intégré avec
beaucoup des facilités d'édition ; ainsi, les commandes d'édition sont
des fonctions qui peuvent commodément appeler également des programmes
de Lisp, et les paramètres pour la personnalisation sont des variables
ordinaires de Lisp.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/doclicense.texi:10
Copyright (C) 2000,2001,2002  Free Software Foundation, Inc.
51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Copyright (C) 2000,2001,2002  Free Software Foundation, Inc.
51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/elisp.texi:104
This Info file contains edition @value{VERSION} of the GNU Emacs Lisp Reference Manual, corresponding to GNU Emacs version @value{EMACSVER}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ce dossier d'information contient l'édition @value{VERSION} du Manuel
de référence GNU Emacs Lisp, correspondant à la version
@value{EMACSVER} de GNU Emacs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/elisp.texi:1170
Abbrevs And Abbrev Expansion</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Abréviations et abréviations expansions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/elisp.texi:1177
* Abbrev Mode::             Setting up Emacs for abbreviation.
* Abbrev Tables::           Creating and working with abbrev tables.
* Defining Abbrevs::        Specifying abbreviations and their expansions.
* Abbrev Files::            Saving abbrevs in files.
* Abbrev Expansion::        Controlling expansion; expansion subroutines.
* Standard Abbrev Tables::  Abbrev tables used by various major modes.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>* Mode abbrev::                 Configuration d'Emacs pour l'abréviation.
* Tables d'abréviations::       Créer et travailler avec des tables d'abréviations.
* Définir des abréviations::    Spécifier des abréviations et leurs expansions.
* Fichiers d'abréviations::     Sauver des abréviations dans les fichiers.
* Expansions d'abréviations::    Contrôler l'expansion ; sous-programmes d'expansions.
* Tables standard d'abréviations:: Tables d'abréviations employées par divers modes majeurs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/elisp.texi:195
Introduction</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Introduction</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/elisp.texi:201
* Caveats::                 Flaws and a request for help.
* Lisp History::            Emacs Lisp is descended from Maclisp.
* Conventions::             How the manual is formatted.
* Version Info::            Which Emacs version is running?
* Acknowledgements::        The authors, editors, and sponsors of this manual.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>* Avertissements::              Erreurs et demande d'aide.
* L'histoire de Lisp::          Emacs Lisp descend de Maclisp.
* Conventions::                 Comment le manuel est composé.
* Information de version::      Quelle version d'Emacs fonctionne?
* Remerciements::               Les auteurs, les rédacteurs, et les commanditaires de ce manuel.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/elisp.texi:203
Conventions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Conventions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/elisp.texi:211
* Some Terms::              Explanation of terms we use in this manual.
* nil and t::               How the symbols @code{nil} and @code{t} are used.
* Evaluation Notation::     The format we use for examples of evaluation.
* Printing Notation::       The format we use for examples that print output.
* Error Messages::          The format we use for examples of errors.
* Buffer Text Notation::    The format we use for buffer contents in examples.
* Format of Descriptions::  Notation for describing functions, variables, etc.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>* Quelques termes::             Explication des termes que nous employons en ce manuel.
* nil et t::                    Comment les symboles @code{nil} et @code{t} sont employés.
* Notation d'évaluation::       Le format que nous employons pour des exemples de l'évaluation.
* Notation d'affichage::        Le format que nous employons quand les exemples affichent du texte.
* Messages d'erreur::           Le format que nous employons pour des exemples d'erreurs.
* Notation des textes de tampon:: Le format que nous employons pour le contenu de tampons dans les exemples.
* Format des descriptions::     Notation pour décrire des fonctions, des variables, etc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/elisp.texi:213
Format of Descriptions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Format de descriptions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/elisp.texi:218
* A Sample Function Description::  A description of an imaginary
                                     function, @code{foo}.
* A Sample Variable Description::  A description of an imaginary
                                     variable, @code{electric-future-map}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>* Un exemple d'une description de fonction::  Une description d'une imaginaire
                                     fonction, @code{foo}.
* Un exemple d'une description de variable::  Une description d'une imaginaire
                                     variable, @code{electric-future-map}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/elisp.texi:299
* Integer Basics::          Representation and range of integers.
* Float Basics::	    Representation and range of floating point.
* Predicates on Numbers::   Testing for numbers.
* Comparison of Numbers::   Equality and inequality predicates.
* Numeric Conversions::	    Converting float to integer and vice versa.
* Arithmetic Operations::   How to add, subtract, multiply and divide.
* Rounding Operations::     Explicitly rounding floating point numbers.
* Bitwise Operations::      Logical and, or, not, shifting.
* Math Functions::          Trig, exponential and logarithmic functions.
* Random Numbers::          Obtaining random integers, predictable or not.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>* Entiers basiques::                     Représentation et champ des nombres entiers.
* Nombres à virgule flottante basiques:: Représentation et champ des monbres à virgule flottante.
* Attributs des nombres::                Tester les nombres.
* Comparaison des nombres::              Attributs d'égalité et d'inégalité.
* Conversions numériques::               Convertir des nombres à virgule flottante en nombres entiers et vice-versa.
* Opérations arithmétiques::             Comment additionner, soustraire, multiplier et diviser.
* Opérations d'arrondissage::            Arrondir explicitement les nombres à virgule flottante.
* Opérations de bits::                   and, or, not logique et décalage.
* Fonctions mathématiques::              Fonctions trigonométrique, exponentielle et logarithmique.
* Nombres aléatoires::                   Obtention des nombres entiers aléatoires, prévisibles ou pas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/errors.texi:168
@code{"Symbol's value as variable is void"}@* @xref{Accessing Variables}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{"La valeur du symbole comme variable est vide"}@* @xref{Accès aux variables}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:102
We let mail to this list accumulate unread until someone decides to apply the corrections.  Months, and sometimes years, go by between updates.  So please attach no significance to the lack of a reply---your mail @emph{will} be acted on in due time.  If you want to contact the Emacs maintainers more quickly, send mail to @code{bug-gnu-emacs@@gnu.org}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Nous laissons le courrier non lu de cette liste s'accumuler
jusqu'à ce que quelqu'un décide d'appliquer les corrections. Les mois,
et parfois les années, s'écoulent entre les mises à jour. Veuillez ne
pas attacher de signification au manque d'une réponse---votre courrier
@emph{devrait} être pris en compte en temps voulu. Si vous voulez
contacter la maintenance d'Emacs plus rapidement, envoyer le courrier
à @code{bug-gnu-emacs@@gnu.org}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:111
Lisp (LISt Processing language) was first developed in the late 1950s at the Massachusetts Institute of Technology for research in artificial intelligence.  The great power of the Lisp language makes it ideal for other purposes as well, such as writing editing commands.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Lisp (LISt Processing language) a été développé la première fois vers
la fin des années 50 au Massachusetts Institute of Technology pour la
recherche en intelligence artificielle. La grande puissance du langage
Lisp le rend idéal pour d'autres buts aussi bien, comme l'écriture de
commandes d'édition.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:121
Dozens of Lisp implementations have been built over the years, each with its own idiosyncrasies.  Many of them were inspired by Maclisp, which was written in the 1960s at MIT's Project MAC.  Eventually the implementors of the descendants of Maclisp came together and developed a standard for Lisp systems, called Common Lisp.  In the meantime, Gerry Sussman and Guy Steele at MIT developed a simplified but very powerful dialect of Lisp, called Scheme.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Des douzaines de réalisations de Lisp ont été établies au cours des
années, chacune avec ses propres particularités. Bon nombre d'entre
elles ont été inspirées par Maclisp, qui a été écrit dans les années
60 au MIT's Project MAC. Par la suite les programmeurs des descendants
de Maclisp se sont réunis et ont développé une norme pour des systèmes
Lisp, appelée Common Lisp. En attendant, Gerry Sussman et Guy Steele
au MIT ont développé un dialecte simplifié mais très puissant de Lisp,
appelé Scheme.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:130
GNU Emacs Lisp is largely inspired by Maclisp, and a little by Common Lisp.  If you know Common Lisp, you will notice many similarities.  However, many features of Common Lisp have been omitted or simplified in order to reduce the memory requirements of GNU Emacs.  Sometimes the simplifications are so drastic that a Common Lisp user might be very confused.  We will occasionally point out how GNU Emacs Lisp differs from Common Lisp.  If you don't know Common Lisp, don't worry about it; this manual is self-contained.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>GNU Emacs Lisp est en grande partie inspiré par Maclisp, et par Common
Lisp. Si vous connaissez le Common Lisp, vous noterez beaucoup de
similitudes. Cependant, beaucoup de dispositifs de Common Lisp ont été
omis ou simplifié afin de réduire les conditions de mémoire de GNU
Emacs. Parfois les simplifications sont si importantes qu'un
utilisateur Lisp Common pourrait être très dérouté. Nous préciserons
de temps en temps comment le GNU Emacs Lisp diffère du Common Lisp. Si
vous ne connaissez pas le Common Lisp, ne vous inquiétez à son sujet;
ce manuel est indépendant.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:134
A certain amount of Common Lisp emulation is available via the @file{cl} library.  @inforef{Top, Overview, cl}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Une certaine quantité de programmes Lisp Common est disponible par
l'intermédiaire de la @file{cl} bibliothèque. @inforef{Top, Overview,
cl}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:138
Emacs Lisp is not at all influenced by Scheme; but the GNU project has an implementation of Scheme, called Guile.  We use Guile in all new GNU software that calls for extensibility.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Emacs Lisp n'est pas du tout influencé par Scheme; mais le projet GNU
a une implémentation, appelée Guile. Nous employons Guile dans tout
nouveau logiciel de GNU qui réclame l'extensibilité.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:144
This section explains the notational conventions that are used in this manual.  You may want to skip this section and refer back to it later.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette section explique les conventions d'écriture qui sont employées
dans ce manuel. Vous pouvez sauter cette section et vous y référer
plus tard.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:165
Throughout this manual, the phrases ``the Lisp reader'' and ``the Lisp printer'' refer to those routines in Lisp that convert textual representations of Lisp objects into actual Lisp objects, and vice versa.  @xref{Printed Representation}, for more details.  You, the person reading this manual, are thought of as ``the programmer'' and are addressed as ``you.'' ``The user'' is the person who uses Lisp programs, including those you write.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Dans tout ce manuel, les expressions ``le lecteur de Lisp'' et
``l'afficheur de Lisp'' se rapportent à ces routines en Lisp qui
convertissent les représentations textuelles du Lisp object en objets
réels de Lisp, et vice-versa. @xref{Printed Representation}, pour plus
de détails. Vous, la personne lisant ce manuel, êtes considérée comme
``programmeur'' et êtes nommée en tant que ``vous''.
``L'utilisateur'' est la personne qui emploie le Lisp des programmes,
y compris ceux que vous écrivez.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:170
Examples of Lisp code are formatted like this: @code{(list 1 2 3)}.  Names that represent metasyntactic variables, or arguments to a function being described, are formatted like this: @var{first-number}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Des exemples du code de Lisp sont composés comme ceci : @code{(list 1
2 3)}. Des noms qui représentent des variables, ou des arguments à une
fonction décrite, sont composés comme ceci : @var{first-number}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:182
In Lisp, the symbol @code{nil} has three separate meanings: it is a symbol with the name @samp{nil}; it is the logical truth value @var{false}; and it is the empty list---the list of zero elements.  When used as a variable, @code{nil} always has the value @code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>En Lisp, le symbole @code{nil} a trois significations distinctes: il
est un symbole nommé @samp{nil} ; c'est la vraie valeur logique
@var{false} ; et c'est la liste vide---la liste de zéro élément. Une
fois utilisé comme variable, @code{nil} a toujours la valeur
@code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:189
As far as the Lisp reader is concerned, @samp{()} and @samp{nil} are identical: they stand for the same object, the symbol @code{nil}.  The different ways of writing the symbol are intended entirely for human readers.  After the Lisp reader has read either @samp{()} or @samp{nil}, there is no way to determine which representation was actually written by the programmer.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>En ce qui concerne le lecteur Lisp, @samp{()} et @samp{nil} sont
identiques : ils représentent le même objet, le symbole
@code{nil}. Les différentes manières d'écrire le symbole sont prévues
entièrement pour les lecteurs humains. Après que le lecteur Lisp ait
lu l'un ou l'autre, @samp{()} ou @samp{nil}, il n'y a aucune manière
de déterminer quelle représentation a été écrite réellement par le
programmeur.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:194
In this manual, we write @code{()} when we wish to emphasize that it means the empty list, and we write @code{nil} when we wish to emphasize that it means the truth value @var{false}.  That is a good convention to use in Lisp programs also.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Dans ce manuel, nous écrivons @code{()} quand nous souhaitons
souligner qu'il signifie la liste vide, et nous écrivons @code{nil}
quand nous souhaitons souligner qu'il signifie la vraie valeur
@var{false}. C'est une bonne convention à employer dans des programmes
de Lisp également.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:208
In contexts where a truth value is expected, any non-@code{nil} value is considered to be @var{true}.  However, @code{t} is the preferred way to represent the truth value @var{true}.  When you need to choose a value which represents @var{true}, and there is no other basis for choosing, use @code{t}.  The symbol @code{t} always has the value @code{t}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Dans les contextes où une vraie valeur est prévue, n'importe quelle
valeur non-@code{nil} est considérée comme @var{true}. Cependant,
@code{t} est la manière préférée de représenter la vraie valeur
@var{true}. Quand vous devez choisir une valeur qui représente
@var{true}, et que vous n'avez aucun autre choix, employer
@code{t}. Le symbole @code{t} a toujours la valeur @code{t}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:214
In Emacs Lisp, @code{nil} and @code{t} are special symbols that always evaluate to themselves.  This is so that you do not need to quote them to use them as constants in a program.  An attempt to change their values results in a @code{setting-constant} error.  @xref{Constant Variables}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>En Emacs Lisp, @code{nil} et @code{t} sont des symboles spéciaux qui
s'évaluent toujours eux-mêmes. De sorte que vous n'avez pas besoin de
les citer pour les employer comme constantes dans un programme. Une
tentative de changer leurs valeurs a comme conséquence une erreur
@code{setting-constant}. @xref{Constant Variables}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:218
Return non-nil iff @var{object} is one of the two canonical boolean values: @code{t} or @code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Retourne non-nil si @var{objet} est une des deux valeurs booléennes
canoniques : @code{t} ou @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:229
A Lisp expression that you can evaluate is called a @dfn{form}.  Evaluating a form always produces a result, which is a Lisp object.  In the examples in this manual, this is indicated with @samp{@result{}}:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Une expression de Lisp que vous pouvez évaluer s'appelle une
@dfn{form}. L'évaluation d'un formulaire produit toujours un résultat,
qui est un objet de Lisp. Dans les exemples en ce manuel, ceci est
indiqué avec @samp{@result{}} :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:242
When a form is a macro call, it expands into a new form for Lisp to evaluate.  We show the result of the expansion with @samp{@expansion{}}.  We may or may not show the result of the evaluation of the expanded form.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Quand un formulaire est appellé par une macro, il augmente d'un
nouveau formulaire pour que le Lisp l'évalue. Nous montrons le
résultat de l'expansion avec @samp{@expansion{}}. Nous pouvons ou non
montrer le résultat de l'évaluation du formulaire augmenté.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:252
Sometimes to help describe one form we show another form that produces identical results.  The exact equivalence of two forms is indicated with @samp{@equiv{}}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Parfois pour aider à décrire un formulaire, nous montrons un autre
formulaire qui produit des résultats identiques. L'équivalence exacte
de deux formulaires est indiquée avec le @samp{@equiv{}}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:267
Many of the examples in this manual print text when they are evaluated.  If you execute example code in a Lisp Interaction buffer (such as the buffer @samp{*scratch*}), the printed text is inserted into the buffer.  If you execute the example by other means (such as by evaluating the function @code{eval-region}), the printed text is displayed in the echo area.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Plusieurs des exemples de ce manuel affichent du texte quand ils sont
évalués. Si vous exécutez le code d'exemple dans un tampon
d'interaction de Lisp (tel que le tampon @samp{*scratch*}), le texte
affiché est inséré dans le tampon. Si vous exécutez l'exemple par
d'autres moyens (comme pour évaluer la fonction @code{eval-région}),
le texte affiché est montré dans le secteur d'écho.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:272
Examples in this manual indicate printed text with @samp{@print{}}, irrespective of where that text goes.  The value returned by evaluating the form (here @code{bar}) follows on a separate line with @samp{@result{}}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les exemples de ce manuel indiquent le texte affiché avec
@samp{@print{}}, indépendamment de la destination du texte. La valeur
retournée par l'évaluation du formulaire (ici @code{bar}) suit sur une
ligne séparée avec @samp{@result{}}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:290
Some examples signal errors.  This normally displays an error message in the echo area.  We show the error message on a line starting with @samp{@error{}}.  Note that @samp{@error{}} itself does not appear in the echo area.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Quelques exemples de signal d'erreurs. Ceci montre normalement un
message d'erreur dans le secteur d'écho. Nous montrons le message
d'erreur sur une ligne commençant par @samp{@error{}}. Noter que
@samp{@error{}} lui-même n'apparaît pas dans le secteur d'écho.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:307
Some examples describe modifications to the contents of a buffer, by showing the ``before'' and ``after'' versions of the text.  These examples show the contents of the buffer in question between two lines of dashes containing the buffer name.  In addition, @samp{@point{}} indicates the location of point.  (The symbol for point, of course, is not part of the text in the buffer; it indicates the place @emph{between} two characters where point is currently located.)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Quelques exemples décrivent des modifications du contenu d'un tampon,
en montrant ``l'avant'' et ``l'après'' des versions du texte. Ces
exemples montrent le contenu du tampon en question entre deux lignes
de tirets contenant le nom du tampon. En outre, le @samp{@point{}}
indique l'endroit du point. (Le symbole pour le point, naturellement,
n'est pas une partie du texte dans le tampon ; il indique l'endroit
@emph{entre} deux caractères où le point est actuellement localisé.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:32
This manual attempts to be a full description of Emacs Lisp.  For a beginner's introduction to Emacs Lisp, see @cite{An Introduction to Emacs Lisp Programming}, by Bob Chassell, also published by the Free Software Foundation.  This manual presumes considerable familiarity with the use of Emacs for editing; see @cite{The GNU Emacs Manual} for this basic information.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ce manuel essaye d'être une description complète d'Emacs Lisp. Pour la
présentation à un débutant d'Emacs Lisp, voir @cite{An Introduction to
Emacs Lisp Programming}, par Bob Chassell, également édité par la Free
Software Foundation. Ce manuel suppose la connaissance parfaite de
l'utilisation d'Emacs pour l'édition ; voir @cite{The GNU Emacs
Manual} pour cette information de base.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:328
Functions, variables, macros, commands, user options, and special forms are described in this manual in a uniform format.  The first line of a description contains the name of the item followed by its arguments, if any.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Des fonctions, les variables, les macros, les commandes, les options
d'utilisateur, et les formulaires spéciaux sont décrits dans ce manuel
dans un format uniforme. La première ligne de la description contient
le nom de l'article suivi de ses arguments, s'il y a.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:331
The category---function, variable, or whatever---appears at the beginning of the line.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La catégorie---fonction, variable, ou quoi que soit---est
imprimé à côté de la marge.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:335
The category---function, variable, or whatever---is printed next to the right margin.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La catégorie---fonction, variable, ou quoi que soit---est
imprimé à côté de la marge.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:357
In a function description, the name of the function being described appears first.  It is followed on the same line by a list of argument names.  These names are also used in the body of the description, to stand for the values of the arguments.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Dans une description de fonction, le nom de la fonction étant décrite
apparaît d'abord. Il est suivi sur la même ligne d'une liste de noms
d'argument. Ces noms sont également employés dans le corps de la
description, pour représenter les valeurs des arguments.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:362
The appearance of the keyword @code{&amp;optional} in the argument list indicates that the subsequent arguments may be omitted (omitted arguments default to @code{nil}).  Do not write @code{&amp;optional} when you call the function.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>L'apparition du mot-clé @code{&amp;optional} dans la liste d'argument
indique que les arguments suivants peuvent être omis (les arguments
omis se transfèrent comme @code{nil}). Ne pas écrire @code{&amp;optional}
quand vous appelez la fonction.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:368
The keyword @code{&amp;rest} (which must be followed by a single argument name) indicates that any number of arguments can follow.  The single argument name following @code{&amp;rest} will receive, as its value, a list of all the remaining arguments passed to the function.  Do not write @code{&amp;rest} when you call the function.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le mot-clé @code{&amp;rest} (qui doit être suivi d'un nom d'argument
simple) indique qu'un certain nombre d'arguments va suivre. Le nom
d'argument simple suivant @code{&amp;rest} recevra, comme valeur, une
liste de tous arguments restants à passer à la fonction. Ne pas écrire
@code{&amp;rest} quand vous appelez la fonction.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:37
Generally speaking, the earlier chapters describe features of Emacs Lisp that have counterparts in many programming languages, and later chapters describe features that are peculiar to Emacs Lisp or relate specifically to editing.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>D'une manière générale, les premiers chapitres décrivent les
caractéristiques d'Emacs Lisp qui ont des équivalences dans beaucoup
de langages de programmation, et les chapitres postérieurs décrivent
les caractéristiques qui sont particulières au Emacs Lisp ou se
relient spécifiquement à l'édition.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:375
The function @code{foo} subtracts @var{integer1} from @var{integer2}, then adds all the rest of the arguments to the result.  If @var{integer2} is not supplied, then the number 19 is used by default.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La fonction @code{foo} soustrait @var{integer1} de @var{integer2},
puis ajoute tout reste des arguments au résultat. Si @var{integer2}
n'est pas fourni, alors le numéro 19 est appliqué par défaut.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:40
This is edition @value{VERSION} of the GNU Emacs Lisp Reference Manual, corresponding to Emacs version @value{EMACSVER}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>C'est l'édition @value{VERSION} du manuel de référence de GNU Emacs
Lisp, correspondant à la version d'Emacs @value{EMACSVER}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:402
Any argument whose name contains the name of a type (e.g., @var{integer}, @var{integer1} or @var{buffer}) is expected to be of that type.  A plural of a type (such as @var{buffers}) often means a list of objects of that type.  Arguments named @var{object} may be of any type.  (@xref{Lisp Data Types}, for a list of Emacs object types.)  Arguments with other sorts of names (e.g., @var{new-file}) are discussed specifically in the description of the function.  In some sections, features common to the arguments of several functions are described at the beginning.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Tout argument dont le nom contient le nom d'un type (par exemple,
@var{integer}, @var{integer1} ou @var{buffer}) est prévu pour être de
ce type. Un pluriel d'un type (tel que @var{buffers}) signifie souvent
une liste d'objets de ce type. Les arguments appelés @var{object}
peuvent être de n'importe quel type. (@xref{Lisp Data Types}, pour une
liste des types d'objet d'Emacs.) Des arguments avec d'autres sortes
de noms (par exemple, @var{new-file}) sont discutés spécialement dans
la description de la fonction. Dans quelques sections, des dispositifs
communs aux arguments de plusieurs fonctions sont décrits du
commencement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:405
@xref{Lambda Expressions}, for a more complete description of optional and rest arguments.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@xref{Lambda Expressions}, pour une description plus complète des
arguments optionnels et restants.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:411
Command, macro, and special form descriptions have the same format, but the word `Function' is replaced by `Command', `Macro', or `Special Form', respectively.  Commands are simply functions that may be called interactively; macros process their arguments differently from functions (the arguments are not evaluated), but are presented the same way.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Commande, macro, et descriptions de formulaire spécial ont le même
format, mais le mot `Function' est remplacé par `Command', `Macro', ou
`Special Form', respectivement. Les commandes sont simplement des
fonctions qui peuvent s'appeler interactivement; les macros traitent
leurs arguments différemment des fonctions (les arguments ne sont pas
évalués), mais sont présentés la même manière.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:419
Special form descriptions use a more complex notation to specify optional and repeated arguments because they can break the argument list down into separate arguments in more complicated ways.  @samp{@r{[}@var{optional-arg}@r{]}} means that @var{optional-arg} is optional and @samp{@var{repeated-args}@dots{}} stands for zero or more arguments.  Parentheses are used when several arguments are grouped into additional levels of list structure.  Here is an example:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les descriptions de formulaire spécial emploient une notation plus
complexe pour indiquer des arguments facultatifs et répétés parce
qu'elles peuvent démonter la liste d'argument en arguments séparés de
manières plus compliquées. @samp{@r{[}@var{optional-arg}@r{]}}
signifie que @var{optional-arg} est facultatif et
@samp{@var{reapeated-args}@dots{}} représente zéro arguments ou
plus. Des parenthèses sont employées quand plusieurs arguments sont
groupés dans les niveaux additionnels de la structure de liste. Voici
un exemple :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:427
This imaginary special form implements a loop that executes the @var{body} forms and then increments the variable @var{var} on each iteration.  On the first iteration, the variable has the value @var{from}; on subsequent iterations, it is incremented by one (or by @var{inc} if that is given).  The loop exits before executing @var{body} if @var{var} equals @var{to}.  Here is an example:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ce formulaire spécial imaginaire met en application une boucle qui
exécute la forme @var{body} et qui ensuite incrémente la variable
@var{var} à chacun itération. Sur la première itération, la variable
a la valeur @var{from} ; sur des itérations suivantes, elle est
incrémentée de un (ou par @var{inc} si elle est donnée). La boucle est
arrêtée avant l'exécution de @var{body} si @var{var} est égale à
@var{to}. Voici un exemple :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:438
If @var{from} and @var{to} are omitted, @var{var} is bound to @code{nil} before the loop begins, and the loop exits if @var{var} is non-@code{nil} at the beginning of an iteration.  Here is an example:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si @var{from} et @var{to} sont omis, @var{var} est lié à @code{nil}
avant que la boucle commence, et la boucle est arrêtée si @var{var}
est non-@code{nil} au début d'une itération. Voici un exemple :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:451
In this special form, the arguments @var{from} and @var{to} are optional, but must both be present or both absent.  If they are present, @var{inc} may optionally be specified as well.  These arguments are grouped with the argument @var{var} into a list, to distinguish them from @var{body}, which includes all remaining elements of the form.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Sous ce formulaire spécial, les arguments @var{from} et @var{to} sont
facultatif, mais il faut qu'ils soient tous deux présents ou tous deux
absents. S'ils sont présents, @var{inc} peut aussi bien être indiqué
optionnellement. Ces arguments sont groupés avec l'argument @var{var}
dans une liste, pour les distinguer de @var{body}, qui inclut tous les
éléments restants de la forme.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:463
A @dfn{variable} is a name that can hold a value.  Although nearly all variables can be set by the user, certain variables exist specifically so that users can change them; these are called @dfn{user options}.  Ordinary variables and user options are described using a format like that for functions except that there are no arguments.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Une @dfn{variable} est un nom qui peut contenir une valeur. Bien que
presque toutes les variables puissent être initialisées par
l'utilisateur, certaines variables existent spécifiquement de sorte
que les utilisateurs puissent les changer ; celles-ci s'appellent
@dfn{users options}. Des variables ordinaires et les options
d'utilisateur sont décrites en utilisant un format comme pour des
fonctions sauf qu'il n'y a aucun argument.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:471
The value of this variable is a full keymap used by Electric Command Future mode.  The functions in this map allow you to edit commands you have not yet thought about executing.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur de cette variable est une keymap employé par le mode
Electric Command Future. Les fonctions dans cette map vous permettent
d'éditer des commandes auxquelles vous n'avez pas avez encore pensé.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:475
User option descriptions have the same format, but `Variable' is replaced by `User Option'.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les descriptions d'option d'utilisateur ont le même format, mais le
mot `Variable' est remplacée par `User Option'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:481
These facilities provide information about which version of Emacs is in use.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ces fonctions fournissent les informations au sujet de la version
d'Emacs en service.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:485
This function returns a string describing the version of Emacs that is running.  It is useful to include this string in bug reports.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie une chaine décrivant la version d'Emacs qui est
en fonction. Il est utile d'inclure cette chaine dans des rapports de
bogue.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:491
(emacs-version)
  @result{} "GNU Emacs 20.3.5 (i486-pc-linux-gnulibc1, X toolkit)
 of Sat Feb 14 1998 on psilocin.gnu.org"</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(emacs-version)
  @result{} "GNU Emacs 20.3.5 (i486-pc-linux-gnulibc1, X toolkit)
 of Sat Feb 14 1998 on psilocin.gnu.org"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:498
If @var{here} is non-@code{nil}, it inserts the text in the buffer before point, and returns @code{nil}.  Called interactively, the function prints the same information in the echo area, but giving a prefix argument makes @var{here} non-@code{nil}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si @var{here} est non-@code{nil}, ça insère le texte dans le tampon
avant le point, et renvoie le @code{nil}. Appelée interactivement, la
fonction affiche la même information dans le secteur d'écho, mais en
donnant un argument de préfixe rend @var{here} non-@code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:504
The value of this variable indicates the time at which Emacs was built at the local site.  It is a list of three integers, like the value of @code{current-time} (@pxref{Time of Day}).</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur de cette variable indique le moment où Emacs a été construit
à l'emplacement local. C'est une liste de trois nombres entiers, comme
la valeur de @code{current-time} (@pxref{Time of Day}).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:520
The value of this variable is the version of Emacs being run.  It is a string such as @code{"20.3.1"}.  The last number in this string is not really part of the Emacs release version number; it is incremented each time you build Emacs in any given directory.  A value with four numeric components, such as @code{"20.3.9.1"}, indicates an unreleased test version.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur de cette variable est la version d'Emacs en cours. C'est une
chaine telle que @code{"20.3.1"}. Le dernier nombre dans cette chaine
n'est pas vraiment une partie du nombre de version de sortie d'Emacs;
il est incrémenté chaque fois que vous construisez Emacs dans
n'importe quel répertoire donné. Une valeur avec quatre composants
numériques, tels que @code{"20.3.9.1"}, indique une version d'essai
non sortie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:527
The major version number of Emacs, as an integer.  For Emacs version 20.3, the value is 20.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le numéro principal de version d'Emacs, comme nombre entier. Pour la
version 20.3 d'Emacs, la valeur est 20.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:532
The minor version number of Emacs, as an integer.  For Emacs version 20.3, the value is 3.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le numéro de version mineur d'Emacs, comme nombre entier. Pour la
version 20.3 d'Emacs, la valeur est 3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:544
This manual was written by Robert Krawitz, Bil Lewis, Dan LaLiberte, Richard@tie{}M. Stallman and Chris Welty, the volunteers of the GNU manual group, in an effort extending over several years.  Robert@tie{}J. Chassell helped to review and edit the manual, with the support of the Defense Advanced Research Projects Agency, ARPA Order 6082, arranged by Warren@tie{}A. Hunt, Jr.@: of Computational Logic, Inc.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ce manuel a été écrit par Robert Krawitz, Bil Lewis, Dan LaLiberte,
Richard M. Stallman and Chris Welty, les volontaires du groupe GNU
manual, dans un effort se prolongeant sur plusieurs années. Robert
J. Chassell a aidé à passer en revue et éditer le manuel, avec l'appui
de la Defense Advanced Research Projects Agency, ARPA Ordre 6082, avec
l'accord de Warren A. Hunt, Jr.@: de Computational Logic, Inc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:557
Corrections were supplied by Karl Berry, Jim Blandy, Bard Bloom, Stephane Boucher, David Boyes, Alan Carroll, Richard Davis, Lawrence R. Dodd, Peter Doornbosch, David A. Duff, Chris Eich, Beverly Erlebacher, David Eckelkamp, Ralf Fassel, Eirik Fuller, Stephen Gildea, Bob Glickstein, Eric Hanchrow, George Hartzell, Nathan Hess, Masayuki Ida, Dan Jacobson, Jak Kirman, Bob Knighten, Frederick M. Korz, Joe Lammens, Glenn M. Lewis, K. Richard Magill, Brian Marick, Roland McGrath, Skip Montanaro, John Gardiner Myers, Thomas A. Peterson, Francesco Potorti, Friedrich Pukelsheim, Arnold D. Robbins, Raul Rockwell, Per Starb@"ack, Shinichirou Sugou, Kimmo Suominen, Edward Tharp, Bill Trost, Rickard Westman, Jean White, Matthew Wilding, Carl Witty, Dale Worley, Rusty Wright, and David D. Zuhn.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les corrections ont été fournies par Karl Berry, Jim Blandy, Bard
Bloom, Stephane Boucher, David Boyes, Alan Carroll, Richard Davis,
Lawrence R. Dodd, Peter Doornbosch, David A. Duff, Chris Eich, Beverly
Erlebacher, David Eckelkamp, Ralf Fassel, Eirik Fuller, Stephen
Gildea, Bob Glickstein, Eric Hanchrow, George Hartzell, Nathan Hess,
Masayuki Ida, Dan Jacobson, Jak Kirman, Bob Knighten, Frederick
M. Korz, Joe Lammens, Glenn M. Lewis, K. Richard Magill, Brian Marick,
Roland McGrath, Skip Montanaro, John Gardiner Myers, Thomas
A. Peterson, Francesco Potorti, Friedrich Pukelsheim, Arnold
D. Robbins, Raul Rockwell, Per Starbäck, Shinichirou Sugou, Kimmo
Suominen, Edward Tharp, Bill Trost, Rickard Westman, Jean White,
Matthew Wilding, Carl Witty, Dale Worley, Rusty Wright, et David
D. Zuhn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:59
This manual has gone through numerous drafts.  It is nearly complete but not flawless.  There are a few topics that are not covered, either because we consider them secondary (such as most of the individual modes) or because they are yet to be written.  Because we are not able to deal with them completely, we have left out several parts intentionally.  This includes most information about usage on VMS.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ce manuel est passé par de nombreuses ébauches. Il est presque complet
mais non impeccable. Il y a quelques matières qui ne sont pas
couvertes parce que nous les considérons secondaires (comme la plupart
des différents modes) ou parce qu'elles doivent encore être
écrites. Puisque nous ne pouvons pas les traiter complètement, nous
avons omis plusieurs parties intentionnellement. Ceci inclut la
plupart des informations sur l'utilisation de VMS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:66
The manual should be fully correct in what it does cover, and it is therefore open to criticism on anything it says---from specific examples and descriptive text, to the ordering of chapters and sections.  If something is confusing, or you find that you have to look at the sources or experiment to learn something not covered in the manual, then perhaps the manual should be fixed.  Please let us know.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le manuel devrait être entièrement correct dans ce qu'il couvre, et il
est donc soumis à la critique sur tout ce qu'il indique---des exemples
spécifiques et du texte descriptif, à l'ordre des chapitres et des
sections---. Si quelque chose est embrouillé, ou si vous constatez que
vous devez regarder les sources ou expérimenter pour apprendre quelque
chose non couvert dans le manuel, alors peut-être faudrait-il
l'inclure dans le manuel. Merci de nous faire le savoir.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:76
As you use this manual, we ask that you mark pages with corrections so you can later look them up and send them to us.  If you think of a simple, real-life example for a function or group of functions, please make an effort to write it up and send it in.  Please reference any comments to the chapter name, section name, and function name, as appropriate, since page numbers and chapter and section numbers will change and we may have trouble finding the text you are talking about.  Also state the number of the edition you are criticizing.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Quand vous employez ce manuel, nous vous demandons de marquer
les pages avec les corrections ainsi vous pouvez plus tard les
rechercher et nous les envoyer. Si vous pensez à un exemple simple et
réel pour une fonction ou au groupe de fonctions, merci de faire
l'effort de l'écrire et de l'envoyer. Veuillez mettre en référence
tous les commentaires au nom de chapitre, nom de section, et le nom de
fonction, comme approprié, puisque les numéros de page et les nombres
de chapitre et de section changeront et nous aurions des problèmes
pour trouver le texte dont vous parlez. Énoncer en outre le numéro de
l'édition que vous critiquez.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/intro.texi:85
As you use this manual, we ask that you send corrections as soon as you find them.  If you think of a simple, real life example for a function or group of functions, please make an effort to write it up and send it in.  Please reference any comments to the node name and function or variable name, as appropriate.  Also state the number of the edition you are criticizing.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Quand vous vous servez de ce manuel, nous vous demandons d'envoyez les
corrections dès que vous en trouverez. Si vous pensez à un exemple
simple et réel pour une fonction ou au groupe de fonctions, merci de
faire l'effort de l'écrire et de l'envoyer. Veuillez mettre en
référence tous les commentaires du nom du noeud et la fonction ou le
nom de la variable, comme approprié. Énoncer en outre le numéro de
l'édition que vous critiquez.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/macros.texi:437
@result{} for</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@result{} for</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1004
This function returns the ``exclusive or'' of its arguments: the @var{n}th bit is set in the result if, and only if, the @var{n}th bit is set in an odd number of the arguments.  If there are no arguments, the result is 0, which is an identity element for this operation.  If @code{logxor} is passed just one argument, it returns that argument.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le ``ou exclusif'' de ses arguments: le
@var{n}ième bit est placé dans le résultat si, et seulement si, le bit
@var{n}ième bit est placé dans un nombre impair des arguments. S'il
n'y a aucun argument, le résultat est 0, qui est un élément d'identité
pour cette opération. Si @code{logxor} est passé juste à un argument,
il renvoie cet argument.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1012
(logxor 12 5)      ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 9          ;  9  =  @r{0 0000  0000 0000  0000 0000  0000 1001}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(logxor 12 5)      ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 9          ;  9  =  @r{0 0000  0000 0000  0000 0000  0000 1001}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1019
(logxor 12 5 7)    ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
                   ;  7  =  @r{0 0000  0000 0000  0000 0000  0000 0111}
     @result{} 14         ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(logxor 12 5 7)    ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
                   ;  7  =  @r{0 0000  0000 0000  0000 0000  0000 0111}
     @result{} 14         ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1027
This function returns the logical complement of its argument: the @var{n}th bit is one in the result if, and only if, the @var{n}th bit is zero in @var{integer}, and vice-versa.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le complément logique de son argument: le
@var{n}ième bit est 1 dans le résultat si, et seulement si, le
@var{n}ième bit est 0 dans @var{integer}, et vice-versa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1034
(lognot 5)
     @result{} -6
;;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
;; @r{becomes}
;; -6  =  @r{1 1111  1111 1111  1111 1111  1111 1010}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lognot 5)
     @result{} -6
;;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
;; @r{devient}
;; -6  =  @r{1 1111  1111 1111  1111 1111  1111 1010}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1045
These mathematical functions allow integers as well as floating point numbers as arguments.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ces fonctions mathématiques autorisent des nombres entiers aussi bien
que des nombres à virgule flottante comme arguments.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:105
(We have inserted spaces between groups of 4 bits, and two spaces between groups of 8 bits, to make the binary integer easier to read.)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(Nous avons inséré un espace entre les groupes de 4 bits, et deux
espaces entre les groupes de 8 bits, pour faciliter la lecture du
nombre entier binaire.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1051
These are the ordinary trigonometric functions, with argument measured in radians.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ce sont les fonctions trigonométriques ordinaires, avec l'argument mesuré
en radians.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1070
(inclusive) whose sine is @var{arg}; if, however, @var{arg} is out of range (outside [@minus{}1, 1]), it signals a @code{domain-error} error.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(inclus) dont le sinus est @var{arg} ; si, cependant, @var{arg} est
hors de portée (en dehors de [@minus{} 1, 1]), il signale une erreur
@code{domaine-error}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1082
(inclusive) whose cosine is @var{arg}; if, however, @var{arg} is out of range (outside [@minus{}1, 1]), it signals a @code{domain-error} error.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(inclus) dont le cosinus est @var{arg} ; si, cependant, @var{arg} est
hors de portée (en dehors de [@minus{} 1, 1]), il signale une erreur
@code{domaine-error}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1103
(exclusive) whose tangent is @var{y}.  If the optional second argument @var{x} is given, the value of @code{(atan y x)} is the angle in radians between the vector @code{[@var{x}, @var{y}]} and the @code{X} axis.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(exclusif) dont la tangente est @var{y}. Si le deuxième argument
facultatif @var{x} est donné, la valeur de @code{(atan y x)} est
pêcher en radians entre le vecteur @code{[@var{x}, @var{y}]} et l'axis
@code{X}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1122
is a fundamental mathematical constant also called the base of natural logarithms.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>est une constante mathématique fondamentale également appelée base des
logarithmes naturels.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1127
This function returns the logarithm of @var{arg}, with base @var{base}.  If you don't specify @var{base}, the base</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le logarithme de @var{arg}, en base @var{base}.
Si vous n'indiquez pas @var{base}, la base</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1135
is used.  If @var{arg} is negative, it signals a @code{domain-error} error.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>est employée. Si @var{arg} est négatif, il signale une erreur
@code{domain-error}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1156
This function returns the logarithm of @var{arg}, with base 10.  If @var{arg} is negative, it signals a @code{domain-error} error.  @code{(log10 @var{x})} @equiv{} @code{(log @var{x} 10)}, at least approximately.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le logarithme de @var{arg}, en base 10. Si
@var{arg} est négatif, il signale une erreur @code{domain-error}.
@code{(log10 @var{x})} @equiv{} @code{(log @var{x} 10)}, au moins
approximativement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:116
@minus{}1 is represented as 29 ones.  (This is called @dfn{two's complement} notation.)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@minus{}1 est représenté en tant que 29 unités. (Ceci s'appelle la
notation @dfn{two's complement}.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1162
This function returns @var{x} raised to power @var{y}.  If both arguments are integers and @var{y} is positive, the result is an integer; in this case, overflow causes truncation, so watch out.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie @var{x} à la puissance @var{y}. Si tout les
deux les arguments sont des nombres entiers et @var{y} est positif, le
résultat est nombre entier ; dans ce cas, le débordement cause
l'abrèviation, alors attention.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1167
This returns the square root of @var{arg}.  If @var{arg} is negative, it signals a @code{domain-error} error.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ceci renvoie la racine carrée de @var{arg}. Si @var{arg} est négatif,
il signale une erreur @code{domain-error}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1179
A deterministic computer program cannot generate true random numbers.  For most purposes, @dfn{pseudo-random numbers} suffice.  A series of pseudo-random numbers is generated in a deterministic fashion.  The numbers are not truly random, but they have certain properties that mimic a random series.  For example, all possible values occur equally often in a pseudo-random series.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Un programme machine déterministe ne peut pas produire de véritables
nombres aléatoires. Dans la plupart des cas, @dfn{pseudo-randam
numbers} suffit. Une série de nombres pseudo-aléatoires est produite
d'une façon déterminée. Les nombres ne sont pas vraiment aléatoires,
mais ils ont certaines propriétés à imiter une série aléatoire. Par
exemple, toutes les valeurs possibles se produisent également souvent
dans une série pseudo-aléatoire.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1188
In Emacs, pseudo-random numbers are generated from a ``seed'' number.  Starting from any given seed, the @code{random} function always generates the same sequence of numbers.  Emacs always starts with the same seed value, so the sequence of values of @code{random} is actually the same in each Emacs run! For example, in one operating system, the first call to @code{(random)} after you start Emacs always returns @minus{}1457731, and the second one always returns @minus{}7692030.  This repeatability is helpful for debugging.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Dans Emacs, des nombres pseudo-aléatoires sont produits à partir de
``graine'' de nombre.  À partir de n'importe quelle graine donnée, la
fonction @code{random} produit toujours le même ordre de
nombres. Emacs démarre toujours par la même valeur de graine, ainsi la
séquence des valeurs de @code{random} est réellement les mêmes dans
chaque passe d'Emacs ! Par exemple, dans un logiciel d'exploitation,
le premier appel à @code{(random)}, après que vous démarriez Emacs,
retourne toujours @minus{}1457731, et le second renvoie toujours
@minus{}7692030. Cette répétition est utile pour la correction.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1192
If you want random numbers that don't always come out the same, execute @code{(random t)}.  This chooses a new seed based on the current time of day and on Emacs's process @acronym{ID} number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si vous voulez des nombres aléatoires qui ne sont pas toujours
pareils, exécuter @code{(random t)}. Ceci choisit une nouvelle graine
basée sur l'heure courante du jour et sur le numéro du processus
@acronym{ID} d'Emacs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1196
This function returns a pseudo-random integer.  Repeated calls return a series of pseudo-random integers.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie un nombre entier pseudo-aléatoire. Les appels
répétés renvoient a une série de nombres entiers pseudo-aléatoires.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1199
If @var{limit} is a positive integer, the value is chosen to be nonnegative and less than @var{limit}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si @var{limit} est un nombre entier positif, la valeur est choisie
pour être non négative et inférieure à @var{limit}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:120
The negative integer, @minus{}5, is creating by subtracting 4 from @minus{}1.  In binary, the decimal integer 4 is 100.  Consequently, @minus{}5 looks like this:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le nombre entier négatif, @minus{}5, est créé en soustrayant 4 de
@minus{}1. Dans la base binaire, le nombre entier décimal 4 est
100. En conséquence, @minus{}5 ressemble à ceci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1203
If @var{limit} is @code{t}, it means to choose a new seed based on the current time of day and on Emacs's process @acronym{ID} number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si @var{limit} est @code{t}, cela signifie de choisir une nouvelle
graine basée sur heure courante et sur le numéro de processus
@acronym{ID} d'Emacs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:1207
On some machines, any integer representable in Lisp may be the result of @code{random}.  On other machines, the result can never be larger than a certain maximum or less than a certain (negative) minimum.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Sur quelques machines, n'importe quel nombre entier représentable en
Lisp peut être le résultat de @code{random}. Sur d'autres machines, le
résultat peut ne jamais être plus grand qu'un certain maximum ou moins
qu'un certain minimum (négatif).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:127
In this implementation, the largest 29-bit binary integer value is 268,435,455 in decimal.  In binary, it looks like this:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Dans cette exemple, la plus grande valeur de nombre entier binaire de
29 bits est 268 435 455 en décimale. En binaire, elle ressemble à
ceci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:135
Since the arithmetic functions do not check whether integers go outside their range, when you add 1 to 268,435,455, the value is the negative integer @minus{}268,435,456:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Puisque les fonctions arithmétiques ne vérifient pas si les nombres
entiers ne sont pas à l'extérieur de leur champ, quand vous
additionnez 1 à 268 435 455, la valeur est le nombre entier négatif
@minus{}268 435 456:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:140
(+ 1 268435455)
     @result{} -268435456
     @result{} 1 0000  0000 0000  0000 0000  0000 0000</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(+ 1 268435455)
     @result{} -268435456
     @result{} 1 0000  0000 0000  0000 0000  0000 0000</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:147
Many of the functions described in this chapter accept markers for arguments in place of numbers.  (@xref{Markers}.)  Since the actual arguments to such functions may be either numbers or markers, we often give these arguments the name @var{number-or-marker}.  When the argument value is a marker, its position value is used and its buffer is ignored.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Plusieurs des fonctions décrites dans ce chapitre acceptent des
marqueurs commes arguments au lieu des nombres. (@xref{Markers}.)
Puisque les arguments réels à de telles fonctions peuvent être des
nombres ou des marqueurs, nous donnons souvent à ces arguments le nom
de @var{number-or-marker}. Quand la valeur d'argument est un marqueur,
sa valeur de position est employée et son tampon est ignoré.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:151
The value of this variable is the largest integer that Emacs Lisp can handle.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur de cette variable est le plus grand nombre entier que Emacs
Lisp peut manipuler.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:156
The value of this variable is the smallest integer that Emacs Lisp can handle.  It is negative.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur de cette variable est le plus petit nombre entier que Emacs
Lisp peut manipuler. Elle est négative.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:165
Floating point numbers are useful for representing numbers that are not integral.  The precise range of floating point numbers is machine-specific; it is the same as the range of the C data type @code{double} on the machine you are using.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les nombres à virgule flottante sont utiles pour la représentation des
nombres qui ne sont pas intégraux. Le champ précis des nombres à
virgule flottante est propre à la machine; c'est pareil que le champ
du type de données de C @code{double} sur la machine que vous
employée.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:172
The read-syntax for floating point numbers requires either a decimal point (with at least one digit following), an exponent, or both.  For example, @samp{1500.0}, @samp{15e2}, @samp{15.0e2}, @samp{1.5e3}, and @samp{.15e4} are five ways of writing a floating point number whose value is 1500.  They are all equivalent.  You can also use a minus sign to write negative floating point numbers, as in @samp{-1.0}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La syntaxe de lecture pour des nombres à virgule flottante exige une
virgule décimale (avec au moins un chiffre suivant), un exposant, ou
les deux. Par exemple, @samp{1500.0}, @samp{15e2}, @samp{15.0e2},
@samp{1.5e3}, et @samp{.15e4} sont cinq manières d'écrire le nombre à
virgule flottante dont la valeur est 1500. Ils sont tous
équivalents. Vous pouvez également employer un signe moins pour écrire
des nombres négatifs à virgule flottante, comme dans @samp{- 1.0}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:189
Most modern computers support the @acronym{IEEE} floating point standard, which provides for positive infinity and negative infinity as floating point values.  It also provides for a class of values called NaN or ``not-a-number''; numerical functions return such values in cases where there is no correct answer.  For example, @code{(/ 0.0 0.0)} returns a NaN.  For practical purposes, there's no significant difference between different NaN values in Emacs Lisp, and there's no rule for precisely which NaN value should be used in a particular case, so Emacs Lisp doesn't try to distinguish them (but it does report the sign, if you print it).  Here are the read syntaxes for these special floating point values:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La plupart des ordinateurs modernes soutiennent la norme à virgule
flottante @acronym{IEEE}, qui prévoit plus l'infini et moins l'infini
comme valeurs à virgule flottante. Elle prévoit également une classe
de valeurs appelées NaN ou ``not-a-number''; les fonctions numériques
renvoient de telles valeurs dans les cas où il n'y a aucune réponse
correcte. Par exemple, @code{(/ 0.0 0.0)} renvoie NaN. Pour des buts
pratiques, il n'y a aucune différence significative entre différentes
valeurs de NaN en Emacs Lisp, et il n'y a aucune règle pour la valeur
NaN à utiliser dans un cas particulier, ainsi Emacs Lisp n'essaye pas
de les distinguer (mais rapporte le signal, si vous l'affichez). Voici
les syntaxes lues pour ces valeurs à virgule flottante spéciales:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:20
GNU Emacs supports two numeric data types: @dfn{integers} and @dfn{floating point numbers}.  Integers are whole numbers such as @minus{}3, 0, 7, 13, and 511.  Their values are exact.  Floating point numbers are numbers with fractional parts, such as @minus{}4.5, 0.0, or 2.71828.  They can also be expressed in exponential notation: 1.5e2 equals 150; in this example, @samp{e2} stands for ten to the second power, and that is multiplied by 1.5.  Floating point values are not exact; they have a fixed, limited amount of precision.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>GNU Emacs supporte deux types de données numériques: @dfn{entiers} et
@dfn{nombres à virgule flottante}. Les nombres entiers sont des
nombres entiers tels que @minus{}3, 0, 7, 13, et 511. Leurs valeurs
sont exactes. Les nombres à virgule flottante sont des nombres avec
les parties partielles, telles que le @minus{}4.5, 0.0, ou
2.71828. Ils peuvent également être exprimés en notation
exponentielle: 1.5e2 est égal à 150; dans cet exemple, le @samp{e2}
représente dix à la puissance deux, le tout est multiplié par 1.5. Les
valeurs à virgule flottante ne sont pas exactes; elles sont fixe et
limitée en précision.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:202
To test whether a floating point value is a NaN, compare it with itself using @code{=}.  That returns @code{nil} for a NaN, and @code{t} for any other floating point value.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Pour examiner si une valeur à virgule flottante est NaN, le comparer à
lui-même en employant @code{=}. Il renvoie @code{nil} pour NaN, et
@code{t} pour n'importe quelle autre valeur à virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:206
The value @code{-0.0} is distinguishable from ordinary zero in @acronym{IEEE} floating point, but Emacs Lisp @code{equal} and @code{=} consider them equal values.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La valeur @code{-0.0} est distinguable de l'ordinaire zéro dans la
virgule flottante de @acronym{IEEE}, mais l'Emacs Lisp @code{equal} et
@code{=} les considèrent comme valeurs égales.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:209
You can use @code{logb} to extract the binary exponent of a floating point number (or estimate the logarithm of an integer):</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Vous pouvez employer @code{logb} pour extraire l'exposant binaire d'un
nombre à virgule flottante (ou estimer le logarithme d'un nombre
entier):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:214
This function returns the binary exponent of @var{number}.  More precisely, the value is the logarithm of @var{number} base 2, rounded down to an integer.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie l'exposant binaire de @var{number}. Plus
précisément, la valeur est le logarithme de @var{number} en base 2,
arrondie vers le bas à un nombre entier.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:233
The functions in this section test for numbers, or for a specific type of number.  The functions @code{integerp} and @code{floatp} can take any type of Lisp object as argument (they would not be of much use otherwise), but the @code{zerop} predicate requires a number as its argument.  See also @code{integer-or-marker-p} and @code{number-or-marker-p}, in @ref{Predicates on Markers}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les fonctions dans cette section testent les nombres, ou un type
spécifique de nombre. Les fonctions @code{integerp} et @code{floatp}
peuvent prendre n'importe quel type d'objet de Lisp comme argument
(ils ne seraient pas utiles autrement), mais l'attribut @code{zerop}
exige un nombre en tant qu'argument. Voir également
@code{integer-or-marker-p} et @code{number-ou-marker-p}, dans le
@ref{Predicates on Markers}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:237
This predicate tests whether its argument is a floating point number and returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cet attribut examine si son argument est un nombre à virgule flottante
et renvoie @code{t} si oui, @code{nil} autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:244
This predicate tests whether its argument is an integer, and returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cet attribut examine si son argument est un nombre entier, et renvoie
le @code{t} si oui, @code{nil} autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:249
This predicate tests whether its argument is a number (either integer or floating point), and returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cet attribut examine si son argument est un nombre (nombre entier ou
virgule flottante), et renvoie le @code{t} si oui, @code{nil}
autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:257
The @code{wholenump} predicate (whose name comes from the phrase ``whole-number-p'') tests to see whether its argument is a nonnegative integer, and returns @code{t} if so, @code{nil} otherwise.  0 is considered non-negative.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>L'attribut @code{wholenump} (dont le nom vient de l'expression
``whole-number-p'') teste pour voir si son argument est un nombre
entier non négatif, et renvoie le @code{t} si oui, @code{nil}
autrement. 0 est considéré non négatif.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:265
This predicate tests whether its argument is zero, and returns @code{t} if so, @code{nil} otherwise.  The argument must be a number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cet attribut examine si son argument est zéro, et renvoie @code{t} si
oui, @code{nil} autrement. L'argument doit être un nombre.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:280
To test numbers for numerical equality, you should normally use @code{=}, not @code{eq}.  There can be many distinct floating point number objects with the same numeric value.  If you use @code{eq} to compare them, then you test whether two values are the same @emph{object}.  By contrast, @code{=} compares only the numeric values of the objects.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Pour tester l'égalité numérique des nombres, vous devriez normalement
employer @code{=}, pas @code{eq}. Il peut y avoir beaucoup d'objets
distincts de nombre à virgule flottante avec la même valeur
numérique. Si vous employez @code{eq} pour les comparer, vous testez
si deux valeurs sont des @emph{objets} identiques. En revanche,
@code{=} compare seulement les valeurs numériques des objets.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:290
At present, each integer value has a unique Lisp object in Emacs Lisp.  Therefore, @code{eq} is equivalent to @code{=} where integers are concerned.  It is sometimes convenient to use @code{eq} for comparing an unknown value with an integer, because @code{eq} does not report an error if the unknown value is not a number---it accepts arguments of any type.  By contrast, @code{=} signals an error if the arguments are not numbers or markers.  However, it is a good idea to use @code{=} if you can, even for comparing integers, just in case we change the representation of integers in a future Emacs version.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Actuellement, chaque valeur de nombre entier a un objet unique de Lisp
dans Emacs Lisp. Par conséquent, @code{eq} est équivalent au @code{=}
quand des nombres entiers sont concernés. Il est parfois commode
d'employer @code{eq} pour comparer une valeur inconnue à un nombre
entier, parce que @code{eq} ne rapporte pas d'erreur si la valeur
inconnue n'est pas un nombre---il accepte des arguments de n'importe
quel type---. En revanche, @code{=} signale une erreur si les
arguments ne sont pas des nombres ou des marqueurs. Cependant, c'est
une bonne idée d'employer @code{=} si vous le pouvez, même pour
comparer des nombres entiers, juste au cas où nous changerions la
représentation des nombres entiers dans une future version d'Emacs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:296
Sometimes it is useful to compare numbers with @code{equal}; it treats two numbers as equal if they have the same data type (both integers, or both floating point) and the same value.  By contrast, @code{=} can treat an integer and a floating point number as equal.  @xref{Equality Predicates}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Parfois il est utile de comparer des nombres avec @code{equal}; les
deux nombres sont traités comme égaux s'ils ont le même type de
données (les deux sont des nombres entiers, ou à virgule flottante) et
la même valeur. En revanche, @code{=} peut traiter un nombre entier et
un nombre à virgule flottante en tant qu'égaux. @xref{Equality
Predicates}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:301
There is another wrinkle: because floating point arithmetic is not exact, it is often a bad idea to check for equality of two floating point values.  Usually it is better to test for approximate equality.  Here's a function to do this:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Il y a un autre problème: parce que l'arithmétique de virgule
flottante n'est pas exacte, c'est souvent une mauvaise idée de
vérifier l'égalité de deux valeurs à virgule flottante. Habituellement
il vaut mieux déterminer l'égalité approximative. Voici une fonction
pour faire ceci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:309
(defvar fuzz-factor 1.0e-6)
(defun approx-equal (x y)
  (or (and (= x 0) (= y 0))
      (&lt; (/ (abs (- x y))
            (max (abs x) (abs y)))
         fuzz-factor)))</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(defvar fuzz-factor 1.0e-6)
(defun approx-equal (x y)
  (or (and (= x 0) (= y 0))
      (&lt; (/ (abs (- x y))
            (max (abs x) (abs y)))
         fuzz-factor)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:318
@b{Common Lisp note:} Comparing numbers in Common Lisp always requires @code{=} because Common Lisp implements multi-word integers, and two distinct integer objects can have the same numeric value.  Emacs Lisp can have just one integer object for any given value because it has a limited range of integer values.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@b{Common Lisp note:} Comparer des nombres en Common Lisp exige
toujours @code{=} parce que le Common Lisp met en application des
nombres entiers pluritermes, et deux objets distincts de nombre entier
peuvent avoir la même valeur numérique. L'Emacs Lisp peut avoir juste
un objet de nombre entier pour n'importe quelle valeur donnée parce
qu'il a un champ limité des valeurs de nombre entier.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:323
This function tests whether its arguments are numerically equal, and returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction teste si ses arguments sont numériquement égaux, et
renvoie le @code{t} si oui, @code{nil} autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:330
This function acts like @code{eq} except when both arguments are numbers.  It compares numbers by type and numeric value, so that @code{(eql 1.0 1)} returns @code{nil}, but @code{(eql 1.0 1.0)} and @code{(eql 1 1)} both return @code{t}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction agit comme @code{eq} sauf quand les deux arguments sont
des nombres. Elle compare des nombres par le type et la valeur
numérique, de sorte que @code{(eql 1.0 1)} renvoie le @code{nil}, mais
@code{(eql 1.0 1.0)} et @code{(eql 1 1)} renvoient tous les deux le
@code{t}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:335
This function tests whether its arguments are numerically equal, and returns @code{t} if they are not, and @code{nil} if they are.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction teste si ses arguments sont numériquement égaux, et
renvoie @code{t} s'ils ne sont pas égaux, et @code{nil} s'ils sont
égaux.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:340
This function tests whether its first argument is strictly less than its second argument.  It returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction teste si son premier argument est strictement moins
grand que son deuxième argument. Elle renvoie @code{t} si oui,
@code{nil} autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:346
This function tests whether its first argument is less than or equal to its second argument.  It returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction teste si son premier argument est inférieur ou égal à
son deuxième argument. Elle renvoie @code{t} si oui, @code{nil}
autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:352
This function tests whether its first argument is strictly greater than its second argument.  It returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction teste si son premier argument est strictement plus
grand que son deuxième argument. Elle renvoie @code{t} si oui,
@code{nil} autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:358
This function tests whether its first argument is greater than or equal to its second argument.  It returns @code{t} if so, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction teste si son premier argument est supérieur ou égal à
son deuxième argument. Il renvoie @code{t} si oui, @code{nil}
autrement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:364
This function returns the largest of its arguments.  If any of the arguments is floating-point, the value is returned as floating point, even if it was given as an integer.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le plus grand de ses arguments. Si l'un des
arguments est à virgule flottante, la valeur est retournée à virgule
flottante, même si elle était donnée comme nombre entier.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:379
This function returns the smallest of its arguments.  If any of the arguments is floating-point, the value is returned as floating point, even if it was given as an integer.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le plus petit de ses arguments. Si l'un des
arguments est à virgule flottante, la valeur est retournée à virgule
flottante, même si elle était donnée comme nombre entier.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:383
(min -4 1)
     @result{} -4</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(min -4 1)
     @result{} -4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:40
The range of values for an integer depends on the machine.  The minimum range is @minus{}268435456 to 268435455 (29 bits; i.e.,</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le champ des valeurs pour un nombre entier dépend de la machine. Le
champ minimum est @minus{}268435456 à 268435455 (29 bits; c.-à-d.,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:402
This returns @var{number} converted to floating point.  If @var{number} is already a floating point number, @code{float} returns it unchanged.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ceci renvoie @var{number} converti en un nombre à virgule
flottante. Si @var{number} est déjà un nombre à virgule flottante,
@code{float} le renvoie sans changement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:413
There are four functions to convert floating point numbers to integers; they differ in how they round.  All accept an argument @var{number} and an optional argument @var{divisor}.  Both arguments may be integers or floating point numbers.  @var{divisor} may also be @code{nil}.  If @var{divisor} is @code{nil} or omitted, these functions convert @var{number} to an integer, or return it unchanged if it already is an integer.  If @var{divisor} is non-@code{nil}, they divide @var{number} by @var{divisor} and convert the result to an integer.  An @code{arith-error} results if @var{divisor} is 0.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Il y a quatre fonctions pour convertir des nombres à virgule flottante
en nombres entiers; ils diffèrent dans la façon dont ils
arrondissent. Tous acceptent un argument @var{number} et un argument
facultatif @var{divisor}. Les deux arguments peuvent être des nombres
entiers ou des nombres à virgule flottante. @var{divisor} peut
également être @code{nil}. Si @var{divisor} est @code{nil} ou omis,
ces fonctions convertissent @var{number} en nombre entier, ou le
renvoient sans changement si c'est déjà un nombre entier. Si
@var{divisor} est non-@code{nil}, elles divisent @var{number} par
@var{divisor} et convertissent le résultat en nombre entier. Un
@code{arith-error} en résulte si @var{divisor} est 0.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:417
This returns @var{number}, converted to an integer by rounding towards zero.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ceci renvoie @var{number}, converti en nombre entier arrondis vers zéro.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:427
(truncate 1.2)
     @result{} 1
(truncate 1.7)
     @result{} 1
(truncate -1.2)
     @result{} -1
(truncate -1.7)
     @result{} -1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(truncate 1.2)
     @result{} 1
(truncate 1.7)
     @result{} 1
(truncate -1.2)
     @result{} -1
(truncate -1.7)
     @result{} -1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:433
This returns @var{number}, converted to an integer by rounding downward (towards negative infinity).</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ceci renvoie @var{number}, converti en nombre entier en arrondissant
en bas (vers moins l'infini).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:436
If @var{divisor} is specified, this uses the kind of division operation that corresponds to @code{mod}, rounding downward.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si @var{divisor} est indiqué, ceci utilise le genre d'opération de
division qui correspond à @code{mod}, arrondissant en bas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:448
(floor 1.2)
     @result{} 1
(floor 1.7)
     @result{} 1
(floor -1.2)
     @result{} -2
(floor -1.7)
     @result{} -2
(floor 5.99 3)
     @result{} 1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(floor 1.2)
     @result{} 1
(floor 1.7)
     @result{} 1
(floor -1.2)
     @result{} -2
(floor -1.7)
     @result{} -2
(floor 5.99 3)
     @result{} 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:454
This returns @var{number}, converted to an integer by rounding upward (towards positive infinity).</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ceci renvoie @var{number}, converti en nombre entier en arrondissant
vers le haut (vers plus l'infini).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:464
(ceiling 1.2)
     @result{} 2
(ceiling 1.7)
     @result{} 2
(ceiling -1.2)
     @result{} -1
(ceiling -1.7)
     @result{} -1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(ceiling 1.2)
     @result{} 2
(ceiling 1.7)
     @result{} 2
(ceiling -1.2)
     @result{} -1
(ceiling -1.7)
     @result{} -1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:472
This returns @var{number}, converted to an integer by rounding towards the nearest integer.  Rounding a value equidistant between two integers may choose the integer closer to zero, or it may prefer an even integer, depending on your machine.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ceci renvoie @var{number}, converti en nombre entier arrondi vers le
nombre entier le plus proche. L'arrondi d'une valeur équidistante
entre deux nombres entiers peut choisir le nombre entier plus près de
zéro, ou il peut préférer un nombre entier équivalent, selon votre
machine.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:482
(round 1.2)
     @result{} 1
(round 1.7)
     @result{} 2
(round -1.2)
     @result{} -1
(round -1.7)
     @result{} -2</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(round 1.2)
     @result{} 1
(round 1.7)
     @result{} 2
(round -1.2)
     @result{} -1
(round -1.7)
     @result{} -2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:494
Emacs Lisp provides the traditional four arithmetic operations: addition, subtraction, multiplication, and division.  Remainder and modulus functions supplement the division functions.  The functions to add or subtract 1 are provided because they are traditional in Lisp and commonly used.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le Emacs Lisp fournit les quatre opérations arithmétiques
traditionnelles: addition, soustraction, multiplication et division.
Les fonctions de reste et de modulo complètent les fonctions de
division. Les fonctions additionner ou soustraire 1 sont fournis parce
qu'elles sont traditionnelles en Lisp et utilisées généralement.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:497
All of these functions except @code{%} return a floating point value if any argument is floating.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Toutes ces fonctions, à part @code{%}, retourne une valeur à virgule
flottante si au moins un argument est une valeur à virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:501
It is important to note that in Emacs Lisp, arithmetic functions do not check for overflow.  Thus @code{(1+ 268435455)} may evaluate to @minus{}268435456, depending on your hardware.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Il est important de noter qu'en Emacs Lisp, les fonctions
arithmétiques ne vérifient pas le débordement. Ainsi @code{(1+
268435455)} peut être évaluer à @minus{}268435456, selon votre
matériel.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:511
(setq foo 4)
     @result{} 4
(1+ foo)
     @result{} 5</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(setq foo 4)
     @result{} 4
(1+ foo)
     @result{} 5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:515
This function is not analogous to the C operator @code{++}---it does not increment a variable.  It just computes a sum.  Thus, if we continue,</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction n'est pas analogue à l'opérateur C @code{++} ---elle
n'incrémente pas une variable---. Elle calcule juste la somme. Ainsi,
si nous continuons,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:519
foo
     @result{} 4</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>foo
     @result{} 4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:523
If you want to increment the variable, you must use @code{setq}, like this:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si vous voulez incrémenter la variable, vous devez employer
@code{setq}, comme ceci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:527
(setq foo (1+ foo))
     @result{} 5</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(setq foo (1+ foo))
     @result{} 5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:537
This function adds its arguments together.  When given no arguments, @code{+} returns 0.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction fait la somme de ses arguments. Si aucun argument n'est
donné, @code{+} retourne 0.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:545
(+)
     @result{} 0
(+ 1)
     @result{} 1
(+ 1 2 3 4)
     @result{} 10</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(+)
     @result{} 0
(+ 1)
     @result{} 1
(+ 1 2 3 4)
     @result{} 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:55
but some machines may provide a wider range.  Many examples in this chapter assume an integer has 29 bits.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mais quelques machines peuvent définir un autre champ. Beaucoup
d'exemples en ce chapitre supposent qu'un nombre entier a 29 bits.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:554
The @code{-} function serves two purposes: negation and subtraction.  When @code{-} has a single argument, the value is the negative of the argument.  When there are multiple arguments, @code{-} subtracts each of the @var{more-numbers-or-markers} from @var{number-or-marker}, cumulatively.  If there are no arguments, the result is 0.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La fonction @code{-} atteint deux objectifs: négation et soustraction.
Quand @code{-} a un argument simple, la valeur est le négatif de
l'argument. Quand il y a des arguments multiples, @code{-} soustrait
chacun des @var{more-numbers-or-markers} de @var{number-or-marker}, de
manière cumulée. S'il n'y a aucun argument, le résultat est 0.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:562
(- 10 1 2 3 4)
     @result{} 0
(- 10)
     @result{} -10
(-)
     @result{} 0</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(- 10 1 2 3 4)
     @result{} 0
(- 10)
     @result{} -10
(-)
     @result{} 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:568
This function multiplies its arguments together, and returns the product.  When given no arguments, @code{*} returns 1.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction multiplie ses arguments entre elles, et renvoie le
produit. Si aucun argument n'est donné, @code{*} retourne 1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:576
(*)
     @result{} 1
(* 1)
     @result{} 1
(* 1 2 3 4)
     @result{} 24</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(*)
     @result{} 1
(* 1)
     @result{} 1
(* 1 2 3 4)
     @result{} 24</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:584
This function divides @var{dividend} by @var{divisor} and returns the quotient.  If there are additional arguments @var{divisors}, then it divides @var{dividend} by each divisor in turn.  Each argument may be a number or a marker.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction divise @var{dividend} par @var{divisor} et retourne le
quotient. S'il y a des arguments additionnels @var{divisors}, il
divise @var{dividend} par chaque diviseur alternativement. Chaque
argument peut être un nombre ou un marqueur.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:59
The Lisp reader reads an integer as a sequence of digits with optional initial sign and optional final period.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Le lecteur de Lisp lit un nombre entier comme une séquence de chiffres
avec le signe initial et le point final facultatifs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:592
If all the arguments are integers, then the result is an integer too.  This means the result has to be rounded.  On most machines, the result is rounded towards zero after each division, but some machines may round differently with negative arguments.  This is because the Lisp function @code{/} is implemented using the C division operator, which also permits machine-dependent rounding.  As a practical matter, all known machines round in the standard fashion.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si tous les arguments sont des nombres entiers, alors le résultat est
aussi un nombre entier. Ceci signifie que le résultat doit être
arrondi. Sur la plupart des machines, le résultat est arrondi vers le
zéro après chaque division, mais quelques machines peuvent arrondir
différemment les arguments négatifs. C'est parce que la fonction de
Lisp @code{/} est implémentée en utilisant l'opérateur de division de
C qui permet l'arrondi en fonction de la machine. Du côté pratique,
toutes les machines connues arrondissent en mode standard.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:598
If you divide an integer by 0, an @code{arith-error} error is signaled.  (@xref{Errors}.)  Floating point division by zero returns either infinity or a NaN if your machine supports @acronym{IEEE} floating point; otherwise, it signals an @code{arith-error} error.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si vous divisez un nombre entier par 0, une erreur @code{arith-error}
est signalée. (@xref{Errors}.) La division d'un nombre à virgule
flottante par zéro renvoie l'un ou l'autre infini ou NaN si votre
machine supporte les nombres à virgule flottante @acronym{IEEE};
autrement, elle signale une erreur @code{arith-error}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:603
(/ 6 2)
     @result{} 3</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(/ 6 2)
     @result{} 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:614
(/ 5 2)
     @result{} 2
(/ 5.0 2)
     @result{} 2.5
(/ 5 2.0)
     @result{} 2.5
(/ 5.0 2.0)
     @result{} 2.5
(/ 25 3 2)
     @result{} 4</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(/ 5 2)
     @result{} 2
(/ 5.0 2)
     @result{} 2.5
(/ 5 2.0)
     @result{} 2.5
(/ 5.0 2.0)
     @result{} 2.5
(/ 25 3 2)
     @result{} 4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:617
(/ -17 6)
     @result{} -2   @r{(could in theory be @minus{}3 on some machines)}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(/ -17 6)
     @result{} -2   @r{(pourrait être @minus{}3 sur certaines machines)}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:625
This function returns the integer remainder after division of @var{dividend} by @var{divisor}.  The arguments must be integers or markers.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le reste en nombre entier après la division de
@var{dividend} par @var{divisor}. Les arguments doivent être des
nombres entiers ou des marqueurs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:628
For negative arguments, the remainder is in principle machine-dependent since the quotient is; but in practice, all known machines behave alike.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Pour des arguments négatifs, le reste est en principe dépendant de la
machine puisque le quotient est variable; mais dans la pratique,
toutes les machines connues se comportent de la même façon.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:640
(% 9 4)
     @result{} 1
(% -9 4)
     @result{} -1
(% 9 -4)
     @result{} 1
(% -9 -4)
     @result{} -1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(% 9 4)
     @result{} 1
(% -9 4)
     @result{} -1
(% 9 -4)
     @result{} 1
(% -9 -4)
     @result{} -1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:648
(+ (% @var{dividend} @var{divisor})
   (* (/ @var{dividend} @var{divisor}) @var{divisor}))</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(+ (% @var{dividend} @var{divisor})
   (* (/ @var{dividend} @var{divisor}) @var{divisor}))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:661
This function returns the value of @var{dividend} modulo @var{divisor}; in other words, the remainder after division of @var{dividend} by @var{divisor}, but with the same sign as @var{divisor}.  The arguments must be numbers or markers.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie la valeur de @var{dividend} modulo
@var{divisor}; en d'autres termes, le reste après la division de
@var{dividend} par @var{divisor}, mais avec le même signe que
@var{divisor}. Les arguments doivent être des nombres ou des
marqueurs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:666
Unlike @code{%}, @code{mod} returns a well-defined result for negative arguments.  It also permits floating point arguments; it rounds the quotient downward (towards minus infinity) to an integer, and uses that quotient to compute the remainder.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>À la différence de @code{%}, @code{mod} renvoie un résultat bien
défini pour les arguments négatifs. Il permet également des arguments
à virgule flottante; il arrondit le quotient à un nombre entier vers
le bas (vers moins l'infini), et utilise ce quotient pour calculer le
reste.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:673
(mod 9 4)
     @result{} 1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(mod 9 4)
     @result{} 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:677
(mod -9 4)
     @result{} 3</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(mod -9 4)
     @result{} 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:68
 1               ; @r{The integer 1.}
 1.              ; @r{The integer 1.}
+1               ; @r{Also the integer 1.}
-1               ; @r{The integer @minus{}1.}
 536870913       ; @r{Also the integer 1, due to overflow.}
 0               ; @r{The integer 0.}
-0               ; @r{The integer 0.}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>1               ; @r{L'entier 1.}
 1.              ; @r{L'entier 1.}
+1               ; @r{Encore l'entier 1.}
-1               ; @r{L'entier @minus{}1.}
 536870913       ; @r{Encore l'entier 1, dû au débordement.}
 0               ; @r{L'entier 0.}
-0               ; @r{L'entier 0.}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:681
(mod 9 -4)
     @result{} -3</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(mod 9 -4)
     @result{} -3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:685
(mod -9 -4)
     @result{} -1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(mod -9 -4)
     @result{} -1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:689
(mod 5.5 2.5)
     @result{} .5</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(mod 5.5 2.5)
     @result{} .5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:698
(+ (mod @var{dividend} @var{divisor})
   (* (floor @var{dividend} @var{divisor}) @var{divisor}))</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(+ (mod @var{dividend} @var{divisor})
   (* (floor @var{dividend} @var{divisor}) @var{divisor}))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:705
always equals @var{dividend}, subject to rounding error if either argument is floating point.  For @code{floor}, see @ref{Numeric Conversions}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>est toujours égale à @var{dividend}, sauf si l'un ou l'autre
argument est un nombre à virgule flottante, une erreur sera
générée. Pour @code{floor}, voir les @ref{Conversions numériques}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:717
The functions @code{ffloor}, @code{fceiling}, @code{fround}, and @code{ftruncate} take a floating point argument and return a floating point result whose value is a nearby integer.  @code{ffloor} returns the nearest integer below; @code{fceiling}, the nearest integer above; @code{ftruncate}, the nearest integer in the direction towards zero; @code{fround}, the nearest integer.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Les fonctions @code{ffloor}, @code{fceiling}, @code{fround}, et
@code{ftruncate} prennent un argument à virgule flottante et renvoient
un monbre à virgule flottante représentant la valeur d'un nombre
entier voisin. @code{ffloor} renvoie le nombre entier le plus proche
inférieur; @code{fceiling}, le nombre entier le plus proche supérieur;
@code{ftruncate}, le nombre entier le plus proche de zéro;
@code{fround}, le nombre entier le plus proche.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:721
This function rounds @var{float} to the next lower integral value, and returns that value as a floating point number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction arrondit @var{float} à la prochaine valeur intégrale
inférieure, et renvoie cette valeur comme nombre à virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:726
This function rounds @var{float} to the next higher integral value, and returns that value as a floating point number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction arrondit @var{float} à la prochaine valeur intégrale
supérieure, et renvoie cette valeur comme nombre à virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:731
This function rounds @var{float} towards zero to an integral value, and returns that value as a floating point number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction arrondit @var{float} à la valeur intégrale proche de
zéro, et renvoie cette valeur comme nombre à virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:736
This function rounds @var{float} to the nearest integral value, and returns that value as a floating point number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction arrondit @var{float} à la valeur intégrale la plus
proche, et renvoie cette valeur comme nombre de virgule flottante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:748
In a computer, an integer is represented as a binary number, a sequence of @dfn{bits} (digits which are either zero or one).  A bitwise operation acts on the individual bits of such a sequence.  For example, @dfn{shifting} moves the whole sequence left or right one or more places, reproducing the same pattern ``moved over.''</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Dans un ordinateur, un nombre entier est représenté comme nombre
binaire, une séquence de @dfn{bits} (des chiffres qui sont zéro ou
un). Une opération de bits agit sur les bits individuels d'une telle
séquence. Par exemple, le @dfn{shifting} déplace l'ordre entier à
gauche ou à droite d'une ou plusieures places, pour reproduire le même
modèle ``moved over.''</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:759
@code{lsh}, which is an abbreviation for @dfn{logical shift}, shifts the bits in @var{integer1} to the left @var{count} places, or to the right if @var{count} is negative, bringing zeros into the vacated bits.  If @var{count} is negative, @code{lsh} shifts zeros into the leftmost (most-significant) bit, producing a positive result even if @var{integer1} is negative.  Contrast this with @code{ash}, below.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{lsh}, qui est une abréviation de @dfn{logical shift}, décale les
bits dans @var{integer1} de @var{count} places à gauche, ou vers la
droite si @var{count} est négatif, introduisant des zéros dans les
places vacantes des bits. Si @var{count} est négatif, @code{lsh}
décale les zéros dans l'extrême gauche du bit (plus fort), produisant
un résultat positif même si @var{integer1} est négatif. Contrairement
à @code{ash}, ci-dessous.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:763
Here are two examples of @code{lsh}, shifting a pattern of bits one place to the left.  We show only the low-order eight bits of the binary pattern; the rest are all zero.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Voici deux exemples de @code{lsh}, décalant une combinaison de
chiffres binaires d'une place vers la gauche. Nous montrons seulement
les huit bits faibles du binaire modèle; le reste est fait de zéro.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:770
(lsh 5 1)
     @result{} 10
;; @r{Decimal 5 becomes decimal 10.}
00000101 @result{} 00001010</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh 5 1)
     @result{} 10
;; @r{Decimal 5 becomes decimal 10.}
00000101 @result{} 00001010</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:775
(lsh 7 1)
     @result{} 14
;; @r{Decimal 7 becomes decimal 14.}
00000111 @result{} 00001110</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh 7 1)
     @result{} 14
;; @r{La décimale 7 devient la décimale 14.}
00000111 @result{} 00001110</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:782
As the examples illustrate, shifting the pattern of bits one place to the left produces a number that is twice the value of the previous number.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Comme ces exemples le montrent, lorsqu'on décale la combinaison de
chiffres binaires d'une place vers la gauche, on produit un nombre qui
est le double de la valeur du précédent nombre.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:785
Shifting a pattern of bits two places to the left produces results like this (with 8-bit binary numbers):</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Lorsqu'on décale de deux places une combinaison de chiffres binaires
vers la gauche, on produit les résultats suivants (avec des nombres
binaires de 8 bits):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:792
(lsh 3 2)
     @result{} 12
;; @r{Decimal 3 becomes decimal 12.}
00000011 @result{} 00001100</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh 3 2)
     @result{} 12
;; @r{La décimale 3 devient décimale 12.}
00000011 @result{} 00001100</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:803
(lsh 6 -1)
     @result{} 3
;; @r{Decimal 6 becomes decimal 3.}
00000110 @result{} 00000011</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh 6 -1)
     @result{} 3
;; @r{La décimale 6 devient décimale 3.}
00000110 @result{} 00000011</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:810
(lsh 5 -1)
     @result{} 2
;; @r{Decimal 5 becomes decimal 2.}
00000101 @result{} 00000010</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh 5 -1)
     @result{} 2
;; @r{La décimale 5 devient décimale 2.}
00000101 @result{} 00000010</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:816
As the example illustrates, shifting one place to the right divides the value of a positive integer by two, rounding downward.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Comme l'exemple le montre, le décalage d'une place vers la droite
divise la valeur d'un nombre entier positif par deux, arrondissant
vers le bas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:821
The function @code{lsh}, like all Emacs Lisp arithmetic functions, does not check for overflow, so shifting left can discard significant bits and change the sign of the number.  For example, left shifting 268,435,455 produces @minus{}2 on a 29-bit machine:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La fonction @code{lsh}, comme toutes les fonctions arithmétiques
d'Emacs Lisp, ne vérifie pas le débordement, ainsi de décalage à
gauche peut changer le bit fort et changer le signe du nombre. Par
exemple, le décalage à gauche de 268.435.455 produit @minus{}2 sur une
machine de 29 bits :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:833
;; @r{Decimal 268,435,455}
0 1111  1111 1111  1111 1111  1111 1111</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>;; @r{La décimale 268 435 455}
0 1111  1111 1111  1111 1111  1111 1111</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:84
The syntax for integers in bases other than 10 uses @samp{#} followed by a letter that specifies the radix: @samp{b} for binary, @samp{o} for octal, @samp{x} for hex, or @samp{@var{radix}r} to specify radix @var{radix}.  Case is not significant for the letter that specifies the radix.  Thus, @samp{#b@var{integer}} reads @var{integer} in binary, and @samp{#@var{radix}r@var{integer}} reads @var{integer} in radix @var{radix}.  Allowed values of @var{radix} run from 2 to 36.  For example:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>La syntaxe pour des nombres entiers dans les bases autres que la base
10 utilise @samp{#} suivi d'une lettre qui indique la base: @samp{b}
pour binaire, @samp{o} pour octal, @samp{x} pour hex, ou
@samp{@var{base}r} pour indiquer la base @var{base}. Le cas n'est pas
significatif pour la lettre qui indique la base. Ainsi, le
@samp{#b@var{integer}} lit @var{integer} en base binaire, et le
@samp{#@var{base}r@var{integer}} lit @var{integer} dans la base
@var{base}. Les valeurs permises de @var{base} vont de 2 à 36. Par
exemple:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:843
;; @r{Decimal @minus{}2}
1 1111  1111 1111  1111 1111  1111 1110</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>;; @r{La décimale @minus{}2}
1 1111  1111 1111  1111 1111  1111 1110</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:852
@code{ash} (@dfn{arithmetic shift}) shifts the bits in @var{integer1} to the left @var{count} places, or to the right if @var{count} is negative.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{ash} (@dfn{arithmetic shift}) décale les bits dans
@var{integer1} de @var{count} places vers la gauche, ou vers la droite
si @var{count} est négatif.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:857
@code{ash} gives the same results as @code{lsh} except when @var{integer1} and @var{count} are both negative.  In that case, @code{ash} puts ones in the empty bit positions on the left, while @code{lsh} puts zeros in those bit positions.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>@code{ash} donne les mêmes résultats que @code{lsh} excepté quand
@var{integer1} et @var{count} sont tous les deux négatifs. Dans ce
cas, @code{ash} met des 1 dans les positions de bit vide du côté
gauche, alors que @code{lsh} met des 0 dans ces positions de bit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:860
Thus, with @code{ash}, shifting the pattern of bits one place to the right looks like this:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Ainsi, @code{ash}, décalant la combinaison de chiffres binaires d'une
place vers la droite ressemble à ceci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:868
(ash -6 -1) @result{} -3
;; @r{Decimal @minus{}6 becomes decimal @minus{}3.}
1 1111  1111 1111  1111 1111  1111 1010
     @result{}
1 1111  1111 1111  1111 1111  1111 1101</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(ash -6 -1)
@result{} -3
;; @r{La décimale @minus{}6 devient la décimale @minus{}3.}
1 1111  1111 1111  1111 1111  1111 1010
     @result{}
1 1111  1111 1111  1111 1111  1111 1101</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:873
In contrast, shifting the pattern of bits one place to the right with @code{lsh} looks like this:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>En revanche, décaler la combinaison de chiffres binaires d'une place
vers la droite avec @code{lsh} ressemble à ceci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:881
(lsh -6 -1) @result{} 268435453
;; @r{Decimal @minus{}6 becomes decimal 268,435,453.}
1 1111  1111 1111  1111 1111  1111 1010
     @result{}
0 1111  1111 1111  1111 1111  1111 1101</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh -6 -1)
@result{} 268435453
;; @r{La décimale @minus{}6 devient la décimale 268 435 453.}
1 1111  1111 1111  1111 1111  1111 1010
     @result{}
0 1111  1111 1111  1111 1111  1111 1101</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:894
(lsh 5 2)          ;   5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 20         ;      =  @r{0 0000  0000 0000  0000 0000  0001 0100}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh 5 2)          ;   5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 20         ;      =  @r{0 0000  0000 0000  0000 0000  0001 0100}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:90
#b101100 @result{} 44
#o54 @result{} 44
#x2c @result{} 44
#24r1k @result{} 44</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>#b101100 @result{} 44
#o54 @result{} 44
#x2c @result{} 44
#24r1k @result{} 44</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:902
(ash 5 2)
     @result{} 20
(lsh -5 2)         ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}
     @result{} -20        ;      =  @r{1 1111  1111 1111  1111 1111  1110 1100}
(ash -5 2)
     @result{} -20</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(ash 5 2)
     @result{} 20
(lsh -5 2)         ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}
     @result{} -20        ;      =  @r{1 1111  1111 1111  1111 1111  1110 1100}
(ash -5 2)
     @result{} -20</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:906
(lsh 5 -2)         ;   5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 1          ;      =  @r{0 0000  0000 0000  0000 0000  0000 0001}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh 5 -2)         ;   5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 1          ;      =  @r{0 0000  0000 0000  0000 0000  0000 0001}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:910
(ash 5 -2)
     @result{} 1</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(ash 5 -2)
     @result{} 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:914
(lsh -5 -2)        ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}
     @result{} 134217726  ;      =  @r{0 0111  1111 1111  1111 1111  1111 1110}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(lsh -5 -2)        ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}
     @result{} 134217726  ;      =  @r{0 0111  1111 1111  1111 1111  1111 1110}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:918
(ash -5 -2)        ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}
     @result{} -2         ;      =  @r{1 1111  1111 1111  1111 1111  1111 1110}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(ash -5 -2)        ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}
     @result{} -2         ;      =  @r{1 1111  1111 1111  1111 1111  1111 1110}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:927
This function returns the ``logical and'' of the arguments: the @var{n}th bit is set in the result if, and only if, the @var{n}th bit is set in all the arguments.  (``Set'' means that the value of the bit is 1 rather than 0.)</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le ``et logique'' des arguments: le @var{n}th
bit est placé dans le résultat si, et seulement si, le @var{n}th bit
est placer dans tous arguments. (``Placer'' veut dire que la valeur du
bit est 1 plutôt que 0.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:934
For example, using 4-bit binary numbers, the ``logical and'' of 13 and 12 is 12: 1101 combined with 1100 produces 1100.  In both the binary numbers, the leftmost two bits are set (i.e., they are 1's), so the leftmost two bits of the returned value are set.  However, for the rightmost two bits, each is zero in at least one of the arguments, so the rightmost two bits of the returned value are 0's.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Par exemple, en utilisant des nombres binaires de 4 bits, le ``et
logique'' de 13 et 12 est 12: 1101 combiné avec 1100 produit 1100.
Dans les deux nombres binaires, les deux bits à l'extrême gauche sont
placés (c.-à-d., ils sont à 1), ainsi les deux bits à l'extrême gauche
de la valeur retournée sont placés. Cependant, pour les deux bits à
l'extrême droite, chacun est à zéro dans au moins un des arguments,
ainsi les deux bits à l'extrême droite de la valeur retournée sont 0.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:942
(logand 13 12)
     @result{} 12</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(logand 13 12)
     @result{} 12</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:949
If @code{logand} is not passed any argument, it returns a value of @minus{}1.  This number is an identity element for @code{logand} because its binary representation consists entirely of ones.  If @code{logand} is passed just one argument, it returns that argument.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Si @code{logand} est passé sans argument, il renvoie une valeur
@minus{}1. Ce nombre est un élément d'identité pour @code{logand}
parce que sa représentation binaire consiste entièrement de 1. Si
@code{logand} est passé à juste un argument, il renvoie cet argument.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:95
To understand how various functions work on integers, especially the bitwise operators (@pxref{Bitwise Operations}), it is often helpful to view the numbers in their binary form.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Pour comprendre comment les diverses fonctions travaillent sur des
nombres entiers, particulièrement au niveau du bit des opérateurs
(@pxref{Opérations de bits}), il est souvent utile de regarder les
nombres sous leur forme binaire.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:957
(logand 14 13)     ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}
                   ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}
     @result{} 12         ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(logand 14 13)     ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}
                   ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}
     @result{} 12         ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:964
(logand 14 13 4)   ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}
                   ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}
                   ;  4  =  @r{0 0000  0000 0000  0000 0000  0000 0100}
     @result{} 4          ;  4  =  @r{0 0000  0000 0000  0000 0000  0000 0100}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(logand 14 13 4)   ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}
                   ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}
                   ;  4  =  @r{0 0000  0000 0000  0000 0000  0000 0100}
     @result{} 4          ;  4  =  @r{0 0000  0000 0000  0000 0000  0000 0100}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:969
(logand)
     @result{} -1         ; -1  =  @r{1 1111  1111 1111  1111 1111  1111 1111}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(logand)
     @result{} -1         ; -1  =  @r{1 1111  1111 1111  1111 1111  1111 1111}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:979
This function returns the ``inclusive or'' of its arguments: the @var{n}th bit is set in the result if, and only if, the @var{n}th bit is set in at least one of the arguments.  If there are no arguments, the result is zero, which is an identity element for this operation.  If @code{logior} is passed just one argument, it returns that argument.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie le ``ou inclus'' de ses arguments: le
@var{n}ième bit est placé dans le résultat si, et seulement si, le
@var{n}ième bit est placé dans au moins un des arguments. S'il n'y a
aucun argument, le résultat est 0, ce qui est un élément d'identité
pour cette opération. Si @code{logior} est passé à juste un argument,
il renvoie cet argument.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:987
(logior 12 5)      ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 13         ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(logior 12 5)      ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
     @result{} 13         ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/numbers.texi:994
(logior 12 5 7)    ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
                   ;  7  =  @r{0 0000  0000 0000  0000 0000  0000 0111}
     @result{} 15         ; 15  =  @r{0 0000  0000 0000  0000 0000  0000 1111}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(logior 12 5 7)    ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}
                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}
                   ;  7  =  @r{0 0000  0000 0000  0000 0000  0000 0111}
     @result{} 15         ; 15  =  @r{0 0000  0000 0000  0000 0000  0000 1111}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/objects.texi:17
A Lisp @dfn{object} is a piece of data used and manipulated by Lisp programs.  For our purposes, a @dfn{type} or @dfn{data type} is a set of possible objects.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Un @dfn{object} List est un morceau de données employées et manipulées
par les programmes Lisp. Pour nous, un @dfn{type} ou un @dfn{data
type} est un ensemble d'objets possibles.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/symbols.texi:17
A @dfn{symbol} is an object with a unique name.  This chapter describes symbols, their components, their property lists, and how they are created and interned.  Separate chapters describe the use of symbols as variables and as function names; see @ref{Variables}, and @ref{Functions}.  For the precise read syntax for symbols, see @ref{Symbol Type}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Un @dfn{symbole} est un objet avec un nom unique. Ce chapitre décrit les symboles, leurs composants, leurs listes de propriétés et comment ils sont créés et conservés. L'utilisation de symboles comme noms de variables ou de fonctions est décrit dans d'autres chapitres ; consultez @ref{Variables} et @ref{Functions}. Pour la syntaxe exacte des symboles, consultez @ref{Le type symbole}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/symbols.texi:20
You can test whether an arbitrary Lisp object is a symbol with @code{symbolp}:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Vous pouvez tester si n'importe quel objet Lisp est un symbole avec @code{symbolp} :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/symbols.texi:24
This function returns @code{t} if @var{object} is a symbol, @code{nil} otherwise.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie @code{t} si l'@var{objet} est un symbole et autrement @code{nil}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/symbols.texi:268
This function returns the string that is @var{symbol}'s name.  For example:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Cette fonction renvoie la chaîne correspondant au nom du symbole. Par exemple :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lispref/symbols.texi:273
(symbol-name 'foo)
     @result{} "foo"</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>(symbol-name 'toto)
     @result{} "toto"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>list length</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T174943Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>load-path</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>load-path</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>local-abbrev-table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>local-abbrev-table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>locale-coding-system</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>locale-coding-system</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>logb number</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>logb number</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lookup tables</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T212337Z">
        <seg>tables de recherche</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lower case</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140502T105645Z">
        <seg>Minuscule</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>lsh integer1 count</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>lsh integer1 count</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mac</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mac</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>major-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>major-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>make-abbrev-table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>make-abbrev-table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>make-backup-file-name-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>make-backup-file-name-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>make-backup-files</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>make-backup-files</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>make-string count character</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T110054Z">
        <seg>make-string n caractere</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>make-symbol name</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>make-symbol nom</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mark-active</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mark-active</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mark-even-if-inactive</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mark-even-if-inactive</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mark-ring</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mark-ring</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mark-ring-max</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mark-ring-max</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>max number-or-marker &amp;rest numbers-or-markers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>max number-or-marker &amp;rest numbers-or-markers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>max-mini-window-height</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>max-mini-window-height</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>memory-full</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>memory-full</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>memory-limit</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>memory-limit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>memory-use-counts</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>memory-use-counts</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>message-log-max</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>message-log-max</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>message-truncate-lines</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>message-truncate-lines</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>min number-or-marker &amp;rest numbers-or-markers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>min number-or-marker &amp;rest numbers-or-markers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>minibuffer-auto-raise</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>minibuffer-auto-raise</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>minibuffer-help-form</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>minibuffer-help-form</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>minibuffer-message string</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>minibuffer-message chaîne</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>minibuffer-scroll-window</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>minibuffer-scroll-window</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>minibuffer-selected-window</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>minibuffer-selected-window</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>misc-objects-consed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>misc-objects-consed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mod dividend divisor</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mod dividend divisor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mode-line-buffer-identification</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mode-line-buffer-identification</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mode-line-format</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mode-line-format</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mode-line-modified</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mode-line-modified</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mode-line-process</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mode-line-process</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mode-name</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mode-name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mode-specific-map</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mode-specific-map</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>modulus</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>modulo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>mule-keymap</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>mule-keymap</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>natnump</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>natnump</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>natural numbers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>nombres naturels</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>next-screen-context-lines</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>next-screen-context-lines</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>nil</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>nil</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>nil and t</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>nil et t</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>normal-auto-fill-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>normal-auto-fill-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>normal-backup-enable-predicate</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>normal-backup-enable-predicate</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>numberp object</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>numberp object</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>numbers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>nombres</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>o</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>o</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>only-global-abbrevs</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>only-global-abbrevs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>open-paren-in-column-0-is-defun-start</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>open-paren-in-column-0-is-defun-start</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>overflow</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>débordement</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>padding</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T162000Z">
        <seg>bourrage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>parse-sexp-ignore-comments</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>parse-sexp-ignore-comments</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>pc</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>pc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>pi</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>pi</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>pi/2</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>pi/2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>plist</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>plist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>point-before-scroll</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>point-before-scroll</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>pop-up-frame-alist</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>pop-up-frame-alist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>pop-up-frame-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>pop-up-frame-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>pop-up-frames</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>pop-up-frames</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>pop-up-windows</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>pop-up-windows</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>post-gc-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>post-gc-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>pre-abbrev-expand-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>pre-abbrev-expand-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>precision in format specifications</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140502T105340Z">
        <seg>Des précisions dans les spécifications de format</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>predicates for numbers</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>attributs des nombres</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>print name cell</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T205932Z">
        <seg>cellule de nom d'affichage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>print-circle</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>print-circle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>print-continuous-numbering</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>print-continuous-numbering</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>print-gensym</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>print-gensym</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>print-number-table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>print-number-table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>property list cell</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T205922Z">
        <seg>cellule de liste de propriétés</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>put symbol property value</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>put symbole propriété valeur</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>re-builder</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>re-builder</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>reading symbols</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Lecture de symboles</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>recent-auto-save-p</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>recent-auto-save-p</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>region-beginning</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>region-beginning</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>region-end</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>region-end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>rename-auto-save-file</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>rename-auto-save-file</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>require-final-newline</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>require-final-newline</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>revert-buffer-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>revert-buffer-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>revert-buffer-insert-file-contents-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>revert-buffer-insert-file-contents-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>revert-without-query</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>revert-without-query</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>ring-bell-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>ring-bell-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>rplaca</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>rplaca</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>rplacd</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>rplacd</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>safe-local-eval-forms</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>safe-local-eval-forms</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>same-window-buffer-names</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>same-window-buffer-names</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>same-window-regexps</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>same-window-regexps</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>save-abbrevs</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>save-abbrevs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>save-buffer-coding-system</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>save-buffer-coding-system</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>scroll-conservatively</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>scroll-conservatively</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>scroll-down-aggressively</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>scroll-down-aggressively</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>scroll-margin</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>scroll-margin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>scroll-preserve-screen-position</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>scroll-preserve-screen-position</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>scroll-step</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>scroll-step</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>scroll-up-aggressively</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>scroll-up-aggressively</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>sentence-end-double-space</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>sentence-end-double-space</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>sentence-end-without-period</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>sentence-end-without-period</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>sentence-end-without-space</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>sentence-end-without-space</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>sequence</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140413T231520Z">
        <seg>Les suites</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>sequence length</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T174951Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>set-buffer-auto-saved</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>set-buffer-auto-saved</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>set-screen-height</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>set-screen-height</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>set-screen-width</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>set-screen-width</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>set-syntax-table table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>set-syntax-table table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>sin arg</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>sin arg</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>sort-fold-case</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>sort-fold-case</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>sort-numeric-base</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>sort-numeric-base</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>special-display-buffer-names</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>special-display-buffer-names</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>special-display-frame-alist</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>special-display-frame-alist</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>special-display-function</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>special-display-function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>special-display-regexps</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>special-display-regexps</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>split-height-threshold</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>split-height-threshold</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>split-string string &amp;optional separators omit-nulls</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T132823Z">
        <seg>split-string string &amp;optionnel separators omit-nulls</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>split-window-keep-point</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>split-window-keep-point</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>stack-trace-on-error</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>stack-trace-on-error</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>store-match-data</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>store-match-data</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>string &amp;rest characters</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T110534Z">
        <seg>string &amp;rest caracteres</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>string equality</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T135326Z">
        <seg>Egalité de chaîne</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>string length</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T174940Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>string to character</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T142044Z">
        <seg>De chaîne à caractère</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>string to number</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T143216Z">
        <seg>De chaîne à nombre</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>string-chars-consed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>string-chars-consed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>string-or-null-p object</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T105511Z">
        <seg>string-or-null-p objet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>string-to-int</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>string-to-int</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>stringp object</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T105346Z">
        <seg>stringp objet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>strings</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="Monique" changedate="20140528T202432Z">
        <seg>Chaînes de caractères</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>strings, formatting them</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T145806Z">
        <seg>Les chaînes et leur formatage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>strings-consed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>strings-consed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>substring string start &amp;optional end</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140429T121225Z">
        <seg>substring string debut &amp;fin optionnelle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>substring-no-properties string &amp;optional start end</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T133023Z">
        <seg>substring-no-properties string &amp;optionnel fin debut</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>suggestions</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T025957Z">
        <seg>suggestions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>symbol</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>symbole</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>symbol components</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T205941Z">
        <seg>composants des symboles</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>symbol-name symbol</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>symbol-name symbole</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>symbol-plist symbol</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>symbol-plist symbole</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>symbolp object</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>symbolp objet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>symbols-consed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>symbols-consed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>syntax-table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>syntax-table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>system-messages-locale</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>system-messages-locale</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>system-time-locale</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>system-time-locale</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>tab-stop-list</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>tab-stop-list</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>tan arg</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>tan arg</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>term-file-prefix</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>term-file-prefix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>testcover-mark-all</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>testcover-mark-all</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>testcover-next-mark</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>testcover-next-mark</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>testcover-start</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>testcover-start</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>text-mode-abbrev-table</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>text-mode-abbrev-table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>that can be invoked from other functions.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>qui peut être appelée depuis d'autres fonctions.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>three-step-help</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>three-step-help</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>to</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>à</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>to the power @var{arg}.</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>à la puissance @var{arg}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>transient-mark-mode</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>transient-mark-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>true</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030132Z">
        <seg>vrai</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>truncate-lines</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>truncate-lines</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>truncate-partial-width-windows</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>truncate-partial-width-windows</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>truth value</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T030033Z">
        <seg>valeur de vérité</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>two's complement</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140131T031421Z">
        <seg>complément à deux</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>undo-ask-before-discard</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>undo-ask-before-discard</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>undo-limit</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>undo-limit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>undo-outer-limit</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>undo-outer-limit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>undo-strong-limit</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>undo-strong-limit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>update-directory-autoloads</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>update-directory-autoloads</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>update-file-autoloads</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>update-file-autoloads</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>upper case</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="babac_000" changedate="20140501T193419Z">
        <seg>Majuscule</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>use-hard-newlines</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>use-hard-newlines</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>user-init-file</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>user-init-file</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>value cell</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nlecompte" changedate="20140430T205930Z">
        <seg>cellule de valeur</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>variable</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>variable</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>variable,</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>variable,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>vc-prefix-map</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>vc-prefix-map</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>vector (type)</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T183057Z">
        <seg>Le type vector</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>vector length</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="nicolas" changedate="20140428T174946Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>vector-cells-consed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>vector-cells-consed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>version-control</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>version-control</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>visible-bell</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>visible-bell</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>w32</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>w32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>warning-minimum-level</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>warning-minimum-level</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>warning-minimum-log-level</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>warning-minimum-log-level</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>warning-suppress-log-types</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>warning-suppress-log-types</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>warning-suppress-types</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>warning-suppress-types</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>which becomes the following when left shifted:</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>ce qui devient, lorsqu'on décale à gauche:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>wholenump object</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>wholenump object</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>window-min-height</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>window-min-height</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>window-min-width</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>window-min-width</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>window-setup-hook</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>window-setup-hook</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>window-size-fixed</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>window-size-fixed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>window-system</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>window-system</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>with-syntax-table @var{table} @var{body}@dots{}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>with-syntax-table @var{table} @var{corps}@dots{}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>write-contents-functions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>write-contents-functions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>write-file-functions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>write-file-functions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>x @var{condition} @key{RET}</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>x @var{condition} @key{RET}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>x-color-defined-p</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>x-color-defined-p</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>x-color-values</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>x-color-values</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>x-defined-colors</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>x-defined-colors</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>x-display-color-p</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>x-display-color-p</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>x-select-enable-clipboard</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>x-select-enable-clipboard</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="en-us">
        <seg>x1:
 --------------       --------------       --------------
| car   | cdr  |     | car   | cdr  |     | car   | cdr  |
|   a   |   o-------&gt;|   b   |   o-------&gt;|   c   |  nil |
|       |      |  --&gt;|       |      |     |       |      |
 --------------  |    --------------       --------------
                 |
x2:              |
 --------------  |
| car   | cdr  | |
|   z   |   o----
|       |      |
 --------------</seg>
      </tuv>
      <tuv lang="fr-fr" changeid="jchelary" changedate="20140423T120743Z">
        <seg>x1 :
 --------------       --------------       --------------
| car   | cdr  |     | car   | cdr  |     | car   | cdr  |
|   a   |   o-------&gt;|   b   |   o-------&gt;|   c   |  nil |
|       |      |  --&gt;|       |      |     |       |      |
 --------------  |    --------------       --------------
                 |
x2 :              |
 --------------  |
| car   | cdr  | |
|   z   |   o----
|       |      |
 --------------</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
    <tu>
      <prop type="file">fr.po</prop>
      <prop type="path"></prop>
      <tuv lang="en-us">
        <seg>Format of Descriptions</seg>
      </tuv>
      <tuv lang="fr-fr">
        <seg>Format des descriptions</seg>
      </tuv>
    </tu>
  </body>
</tmx>
