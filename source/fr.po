# #-#-#-#-#  fr.po (PACKAGE VERSION)  #-#-#-#-#
# French translations for PACKAGE package
# Copyright (C) 2007 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2007.
# 
# #-#-#-#-#  intro.fr.po (PACKAGE VERSION)  #-#-#-#-#
# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# #-#-#-#-#  numbers.fr.po (PACKAGE VERSION)  #-#-#-#-#
# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# #-#-#-#-#  fr.po (PACKAGE VERSION)  #-#-#-#-#
# French translations for PACKAGE package
# Copyright (C) 2007 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2007.
# 
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2007-09-09 21:24+0200\n"
"PO-Revision-Date: 2007-09-14 10:08+0200\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=ISO-8859-1\n"
"Content-Transfer-Encoding: 8bit\n"
"#-#-#-#-#  fr.po (PACKAGE VERSION)  #-#-#-#-#\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"#-#-#-#-#  intro.fr.po (PACKAGE VERSION)  #-#-#-#-#\n"
"X-Generator: Emacs 22.1.1, po-mode 2.02+0.4\n"
"#-#-#-#-#  numbers.fr.po (PACKAGE VERSION)  #-#-#-#-#\n"
"X-Generator: Emacs 22.1.1, po-mode 2.02+0.4\n"
"#-#-#-#-#  fr.po (PACKAGE VERSION)  #-#-#-#-#\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

# type: menu
#: lispref/abbrevs.texi:7 lispref/abbrevs.texi:52 lispref/abbrevs.texi:73
#: lispref/abbrevs.texi:130 lispref/abbrevs.texi:191 lispref/abbrevs.texi:240
#: lispref/abbrevs.texi:377 lispref/elisp.texi:155 lispref/processes.texi:7
#: lispref/syntax.texi:7 lispref/vol1.texi:255 lispref/vol2.texi:256
#, no-wrap
msgid "Abbrevs"
msgstr "Abbrevs"

# type: menu
#: lispref/abbrevs.texi:7 lispref/display.texi:7 lispref/elisp.texi:160
#: lispref/processes.texi:7 lispref/processes.texi:8 lispref/vol1.texi:261
#: lispref/vol1.texi:873 lispref/vol2.texi:262 lispref/vol2.texi:874
#, no-wrap
msgid "Processes"
msgstr "Processus"

# type: menu
#: lispref/abbrevs.texi:7 lispref/elisp.texi:155 lispref/searching.texi:7
#: lispref/syntax.texi:7 lispref/syntax.texi:8 lispref/vol1.texi:255
#: lispref/vol1.texi:850 lispref/vol2.texi:256 lispref/vol2.texi:851
#, no-wrap
msgid "Syntax Tables"
msgstr "Tables de syntaxe"

# type: node
#: lispref/abbrevs.texi:7 lispref/advice.texi:7 lispref/anti.texi:9
#: lispref/backups.texi:7 lispref/buffers.texi:7 lispref/commands.texi:7
#: lispref/compile.texi:7 lispref/control.texi:7 lispref/customize.texi:7
#: lispref/debugging.texi:7 lispref/display.texi:7 lispref/doclicense.texi:2
#: lispref/elisp.texi:99 lispref/elisp.texi:1472 lispref/errors.texi:7
#: lispref/eval.texi:7 lispref/files.texi:7 lispref/frames.texi:7
#: lispref/functions.texi:7 lispref/gpl.texi:4 lispref/hash.texi:7
#: lispref/help.texi:7 lispref/hooks.texi:7 lispref/index.texi:22
#: lispref/internals.texi:7 lispref/intro.texi:8 lispref/keymaps.texi:7
#: lispref/lists.texi:7 lispref/loading.texi:7 lispref/locals.texi:7
#: lispref/macros.texi:7 lispref/maps.texi:7 lispref/markers.texi:7
#: lispref/minibuf.texi:7 lispref/modes.texi:7 lispref/nonascii.texi:7
#: lispref/numbers.texi:7 lispref/objects.texi:7 lispref/os.texi:7
#: lispref/positions.texi:7 lispref/processes.texi:7 lispref/searching.texi:7
#: lispref/sequences.texi:7 lispref/streams.texi:7 lispref/strings.texi:7
#: lispref/symbols.texi:7 lispref/syntax.texi:7 lispref/text.texi:7
#: lispref/tips.texi:7 lispref/variables.texi:7 lispref/vol1.texi:202
#: lispref/vol2.texi:203 lispref/windows.texi:7
#, no-wrap
msgid "Top"
msgstr "Top"

# type: chapter
#: lispref/abbrevs.texi:8
#, no-wrap
msgid "Abbrevs and Abbrev Expansion"
msgstr "Abbrevs et expansion d'abbrev"

# type: cindex
#: lispref/abbrevs.texi:9
#, no-wrap
msgid "abbrev"
msgstr "abbrev"

# type: Plain text
#: lispref/abbrevs.texi:16
msgid ""
"An abbreviation or @dfn{abbrev} is a string of characters that may be "
"expanded to a longer string.  The user can insert the abbrev string and find "
"it replaced automatically with the expansion of the abbrev.  This saves "
"typing."
msgstr ""
"Une abréviation ou @dfn{abbrev} est une chaîne de caractères qui peut\n"
"être développée dans une chaîne plus longue. L'utilisateur peut\n"
"insérer la chaîne d'abréviation et se rendre compte qu'elle a été\n"
"remplacée automatiquement avec l'expansion de l'abréviation. Ceci\n"
"améliore la dactylographie."

# type: Plain text
#: lispref/abbrevs.texi:21
msgid ""
"The set of abbrevs currently in effect is recorded in an @dfn{abbrev "
"table}.  Each buffer has a local abbrev table, but normally all buffers in "
"the same major mode share one abbrev table.  There is also a global abbrev "
"table.  Normally both are used."
msgstr ""
"Actuellement, l'ensemble des abréviations est enregistré dans un\n"
"@dfn{abbrev table}. Chaque tampon a une table locale d'abréviations,\n"
"mais normalement tous les tampons dans le même mode majeur partage une\n"
"table principale d'abréviations. Il y a donc une table d'abréviation\n"
"global. Normalement tous les deux sont employés."

# type: Plain text
#: lispref/abbrevs.texi:33
msgid ""
"An abbrev table is represented as an obarray containing a symbol for each "
"abbreviation.  The symbol's name is the abbreviation; its value is the "
"expansion; its function definition is the hook function to do the expansion "
"(@pxref{Defining Abbrevs}); its property list cell typically contains the "
"use count, the number of times the abbreviation has been expanded.  "
"Alternatively, the use count is on the @code{count} property and the system-"
"abbrev flag is on the @code{system-type} property.  Abbrevs with a non-@code"
"{nil} @code{system-type} property are called ``system'' abbrevs.  They are "
"usually defined by modes or packages, instead of by the user, and are "
"treated specially in certain respects."
msgstr ""
"Une table d'abréviation est représentée en tant qu'une liste contenant\n"
"un symbole pour chaque abréviation. Le nom du symbole est\n"
"l'abréviation ; sa valeur est l'expansion ; sa définition de fonction\n"
"est la fonction hook devant faire l'expansion (@pxref{Defining\n"
"Abbrevs}) ; sa cellule de liste de propriété contient typiquement le\n"
"compteur d'utilisation, le nombre de fois que l'abréviation a été\n"
"développée. Alternativement, le compteur d'utilisation pointe vers la\n"
"propriété @code{count} et le drapeau de system-abbrev pointe vers la\n"
"propriété @code{system-type}. Les abréviations avec la propriété\n"
"non-@code{nil} @code{system-type} s'appellent les abréviations de\n"
"``système''. Elles sont habituellement définies par des modes ou des\n"
"paquets, non par l'utilisateur, et traitées spécialement à certains\n"
"égards."

# type: Plain text
#: lispref/abbrevs.texi:39
msgid ""
"Because the symbols used for abbrevs are not interned in the usual obarray, "
"they will never appear as the result of reading a Lisp expression; in fact, "
"normally they are never used except by the code that handles abbrevs.  "
"Therefore, it is safe to use them in an extremely nonstandard way.  @xref"
"{Creating Symbols}."
msgstr ""
"Puisque les symboles utilisés pour les abréviations ne sont pas\n"
"compris dans la liste habituel, ils n'apparaîtront jamais comme le\n"
"résultat de lecture d'une expression Lisp ; en fait, normalement ils\n"
"ne sont jamais utilisés excepté par le code qui traite ces\n"
"abréviations. Par conséquent, il est prudent de les utiliser d'une\n"
"manière extrêmement non-standard. @xref{Création de symboles}."

# type: Plain text
#: lispref/abbrevs.texi:42
msgid ""
"For the user-level commands for abbrevs, see @ref{Abbrevs,, Abbrev Mode, "
"emacs, The GNU Emacs Manual}."
msgstr ""
"Pour les commandes du niveau utilisateur des abréviations, voir\n"
"@ref{Abbrevs,, Abbrev Mode, emacs, The GNU Emacs Manual}."

# type: menu
#: lispref/abbrevs.texi:50 lispref/abbrevs.texi:52 lispref/abbrevs.texi:73
#: lispref/vol1.texi:871 lispref/vol2.texi:872
#, no-wrap
msgid "Abbrev Mode"
msgstr "Mode abbrev"

# type: menu
#: lispref/abbrevs.texi:50 lispref/vol1.texi:871 lispref/vol2.texi:872
msgid "Setting up Emacs for abbreviation."
msgstr "Configuration d'Emacs pour l'abréviation."

# type: menu
#: lispref/abbrevs.texi:50 lispref/vol1.texi:871 lispref/vol2.texi:872
msgid "Tables: Abbrev Tables"
msgstr "Tables : Tables d'abréviations"

# type: menu
#: lispref/abbrevs.texi:50 lispref/vol1.texi:871 lispref/vol2.texi:872
msgid "Creating and working with abbrev tables."
msgstr "Créer et travailler avec des tables d'abréviations."

# type: menu
#: lispref/abbrevs.texi:50 lispref/abbrevs.texi:73 lispref/abbrevs.texi:130
#: lispref/abbrevs.texi:132 lispref/abbrevs.texi:191 lispref/vol1.texi:871
#: lispref/vol2.texi:872
#, no-wrap
msgid "Defining Abbrevs"
msgstr "Définir des abréviations"

# type: menu
#: lispref/abbrevs.texi:50 lispref/vol1.texi:871 lispref/vol2.texi:872
msgid "Specifying abbreviations and their expansions."
msgstr "Spécifier des abréviations et leurs expansions."

# type: menu
#: lispref/abbrevs.texi:50 lispref/vol1.texi:871 lispref/vol2.texi:872
msgid "Files: Abbrev Files"
msgstr "Fichiers : Fichiers d'abréviations"

# type: menu
#: lispref/abbrevs.texi:50 lispref/vol1.texi:871 lispref/vol2.texi:872
msgid "Saving abbrevs in files."
msgstr "Sauver des abréviations dans les fichiers."

# type: menu
#: lispref/abbrevs.texi:50 lispref/vol1.texi:871 lispref/vol2.texi:872
msgid "Expansion: Abbrev Expansion"
msgstr "Expansion : Expansions d'abréviations"

# type: menu
#: lispref/abbrevs.texi:50 lispref/vol1.texi:871 lispref/vol2.texi:872
msgid "Controlling expansion; expansion subroutines."
msgstr "Contrôler l'expansion ; sous-programmes d'expansions."

# type: menu
#: lispref/abbrevs.texi:50 lispref/abbrevs.texi:240 lispref/abbrevs.texi:377
#: lispref/abbrevs.texi:379 lispref/vol1.texi:871 lispref/vol2.texi:872
#, no-wrap
msgid "Standard Abbrev Tables"
msgstr "Tables standard d'abréviations"

# type: menu
#: lispref/abbrevs.texi:50 lispref/vol1.texi:871 lispref/vol2.texi:872
msgid "Abbrev tables used by various major modes."
msgstr "Tables d'abréviations employées par divers modes majeurs."

# type: node
#: lispref/abbrevs.texi:52 lispref/abbrevs.texi:73 lispref/abbrevs.texi:74
#: lispref/abbrevs.texi:130
#, no-wrap
msgid "Abbrev Tables"
msgstr "Tables d'abréviations"

# type: section
#: lispref/abbrevs.texi:54
#, no-wrap
msgid "Setting Up Abbrev Mode"
msgstr "Démarrer le mode abbrev"

# type: Plain text
#: lispref/abbrevs.texi:58
msgid ""
"Abbrev mode is a minor mode controlled by the value of the variable @code"
"{abbrev-mode}."
msgstr ""
"Le mode abbrev est un mode mineur contrôlé par la valeur de la\n"
"variable @code{abbrev-mode}."

# type: defvar
#: lispref/abbrevs.texi:59
#, no-wrap
msgid "abbrev-mode"
msgstr "abbrev-mode"

# type: defvar
#: lispref/abbrevs.texi:64
msgid ""
"A non-@code{nil} value of this variable turns on the automatic expansion of "
"abbrevs when their abbreviations are inserted into a buffer.  If the value "
"is @code{nil}, abbrevs may be defined, but they are not expanded "
"automatically."
msgstr ""
"Une valeur non-@code{nil} de cette variable active l'expansion\n"
"automatique des abréviations quand elles sont insérées dans un\n"
"tampon. Si la valeur est @code{nil}, des abréviations peuvent être\n"
"définis, mais elles ne sont pas développées automatiquement."

# type: defvar
#: lispref/abbrevs.texi:66
msgid ""
"This variable automatically becomes buffer-local when set in any fashion."
msgstr ""
"Cette variable devient automatiquement locale au tampon quand elle est\n"
"activée dans n'importe quelle mode."

# type: defvar
#: lispref/abbrevs.texi:68
#, no-wrap
msgid "default-abbrev-mode"
msgstr "default-abbrev-mode"

# type: defvar
#: lispref/abbrevs.texi:71
msgid ""
"This is the value of @code{abbrev-mode} for buffers that do not override "
"it.  This is the same as @code{(default-value 'abbrev-mode)}."
msgstr ""
"C'est la valeur de @code{abbrev-mode} pour les tampons qui ne la\n"
"modifient pas. C'est identique à @code{(default-value 'abbrev-mode)}."

# type: Plain text
#: lispref/abbrevs.texi:77
msgid "This section describes how to create and manipulate abbrev tables."
msgstr ""
"Cette section décrit comment créer et manipuler des tables\n"
"d'abréviations."

# type: defun
#: lispref/abbrevs.texi:78
#, no-wrap
msgid "make-abbrev-table"
msgstr "make-abbrev-table"

# type: defun
#: lispref/abbrevs.texi:81
msgid ""
"This function creates and returns a new, empty abbrev table---an obarray "
"containing no symbols.  It is a vector filled with zeros."
msgstr ""
"Cette fonction crée et renvoie une nouvelle table vide\n"
"d'abréviations---une liste ne contient aucun symbole---. C'est un\n"
"vecteur rempli de zéros."

# type: defun
#: lispref/abbrevs.texi:83
#, no-wrap
msgid "clear-abbrev-table table"
msgstr "clear-abbrev-table table"

# type: defun
#: lispref/abbrevs.texi:86
msgid ""
"This function undefines all the abbrevs in abbrev table @var{table}, leaving "
"it empty.  It always returns @code{nil}."
msgstr ""
"Cette fonction élimine toutes les abréviations dans la table\n"
"d'abrévations @var{table}, la laissant vide. Elle renvoie toujours\n"
"@code{nil}."

# type: defun
#: lispref/abbrevs.texi:88
#, no-wrap
msgid "copy-abbrev-table table"
msgstr "copy-abbrev-table table"

# type: defun
#: lispref/abbrevs.texi:93
msgid ""
"This function returns a copy of abbrev table @var{table}---a new abbrev "
"table that contains the same abbrev definitions.  The only difference "
"between @var{table} and the returned copy is that this function sets the "
"property lists of all copied abbrevs to 0."
msgstr ""
"Cette fonction renvoie une copie de table d'abréviations\n"
"@var{table}---une nouvelle table d'abréviations qui contient les mêmes\n"
"définitions d'abréviations---. La seule différence entre @var{table}\n"
"et la copie retournée est que la fonction place les listes de\n"
"propriétés de toutes les abréviations copiées à 0."

# type: defun
#: lispref/abbrevs.texi:95
#, no-wrap
msgid "define-abbrev-table tabname definitions"
msgstr "define-abbrev-table tabname definitions"

# type: defun
#: lispref/abbrevs.texi:104
msgid ""
"This function defines @var{tabname} (a symbol) as an abbrev table name, i."
"e., as a variable whose value is an abbrev table.  It defines abbrevs in the "
"table according to @var{definitions}, a list of elements of the form @code"
"{(@var{abbrevname} @var{expansion} @var{hook} @var{usecount} @var{system-"
"flag})}.  If an element of @var{definitions} has length less than five, "
"omitted elements default to @code{nil}.  A value of @code{nil} for @var"
"{usecount} is equivalent to zero.  The return value is always @code{nil}."
msgstr ""
"Cette fonction définit @var{tabname} (un symbole) comme le nom d'une\n"
"table d'abréviations, c.-à-d., comme variable dont la valeur est une\n"
"table d'abréviations. Elle définit les abréviations dans la table\n"
"selon @var{definitions}, une liste d'éléments de forme\n"
"@code{(@var{abbrevname} @var{expansion} @var{hook} @var{usecount}\n"
"@var{system-flag})}. Si un élément de @var{definitions} a la longueur\n"
"inférieure à cinq, les éléments omis par défaut sont @code{nil}. Une\n"
"valeur de @code{nil} pour @var{usecount} est équivalente à zéro. La\n"
"valeur de retour est toujours @code{nil}."

# type: defun
#: lispref/abbrevs.texi:110
msgid ""
"If this function is called more than once for the same @var{tabname}, "
"subsequent calls add the definitions in @var{definitions} to @var{tabname}, "
"rather than overriding the entire original contents.  (A subsequent call "
"only overrides abbrevs explicitly redefined or undefined in @var"
"{definitions}.)"
msgstr ""
"Si cette fonction est appelée plus d'une fois pour le même\n"
"@var{tabname}, les appels suivants ajoutent les définitions dans\n"
"@var{definitions} à @var{tabname}, plutôt que de modifier en entier le\n"
"contenu original. (Un appel suivant modifie seulement des abréviations\n"
"explicitement redéfinies ou éliminées dans @var{definitions}.)"

# type: defvar
#: lispref/abbrevs.texi:112
#, no-wrap
msgid "abbrev-table-name-list"
msgstr "abbrev-table-name-list"

# type: defvar
#: lispref/abbrevs.texi:115
msgid ""
"This is a list of symbols whose values are abbrev tables.  @code{define-"
"abbrev-table} adds the new abbrev table name to this list."
msgstr ""
"C'est une liste de symboles dont les valeurs sont des tables\n"
"d'abréviations. @code{define-abbrev-table} ajoute le nouveau nom de\n"
"table d'abréviations à cette liste."

# type: defun
#: lispref/abbrevs.texi:117
#, no-wrap
msgid "insert-abbrev-table-description name &optional human"
msgstr "insert-abbrev-table-description name &optional human"

# type: defun
#: lispref/abbrevs.texi:121
msgid ""
"This function inserts before point a description of the abbrev table named "
"@var{name}.  The argument @var{name} is a symbol whose value is an abbrev "
"table.  The return value is always @code{nil}."
msgstr ""
"Cette fonction insère avant le point une description de la table\n"
"d'abréviations avant nommé @var{name}. L'argument @var{name} est un\n"
"symbole dont la valeur est la table d'abréviations. La valeur de\n"
"retour est toujours @code{nil}."

# type: defun
#: lispref/abbrevs.texi:128
msgid ""
"If @var{human} is non-@code{nil}, the description is human-oriented.  System "
"abbrevs are listed and identified as such.  Otherwise the description is a "
"Lisp expression---a call to @code{define-abbrev-table} that would define @var"
"{name} as it is currently defined, but without the system abbrevs.  (The "
"mode or package using @var{name} is supposed to add these to @var{name} "
"separately.)"
msgstr ""
"Si @var{human} est non-@code{nil}, la description est orientée pour\n"
"l'humain. Des abréviations de système sont énumérées et identifiées en\n"
"tant que telles. Autrement la description est une expression de\n"
"Lisp---un appel à @code{define-abbrev-table} définirait @var{name}\n"
"comme il l'est actuellement, mais en dehors des abréviations de\n"
"système---. (Le mode ou le paquet employant @var{name} est supposé\n"
"ajouter ces derniers à @var{name} séparément.)"

# type: node
#: lispref/abbrevs.texi:130 lispref/abbrevs.texi:191 lispref/abbrevs.texi:240
#, no-wrap
msgid "Abbrev Files"
msgstr "Fichiers d'abréviations"

# type: Plain text
#: lispref/abbrevs.texi:140
msgid ""
"@code{define-abbrev} is the low-level basic function for defining an abbrev "
"in a specified abbrev table.  When major modes predefine standard abbrevs, "
"they should call @code{define-abbrev} and specify @code{t} for @var{system-"
"flag}.  Be aware that any saved non-``system'' abbrevs are restored at "
"startup, i.e. before some major modes are loaded.  Major modes should "
"therefore not assume that when they are first loaded their abbrev tables are "
"empty."
msgstr ""
"@code{define-abbrev} est la fonction de base de bas niveau pour\n"
"définir les abréviations dans une table d'abréviations indiquée. Si\n"
"les modes majeurs prédéfinissent la norme des abréviations, ils\n"
"devraient appeler @code{define-abbrev} et indiquer @code{t} pour\n"
"@var{system-flag}. Faites attention, les abréviations non sauvés du\n"
"non-``système'' sont restaurées au démarrage, c.-à-d. avant que les\n"
"modes majeurs sont chargés. C'est pourquoi les modes majeurs ne\n"
"devraient pas assumer que, quand ils sont d'abord chargés, leurs\n"
"tables d'abbréviations soient vides."

# type: defun
#: lispref/abbrevs.texi:141
#, no-wrap
msgid "define-abbrev table name expansion &optional hook count system-flag"
msgstr "define-abbrev table name expansion &optional hook count system-flag"

# type: defun
#: lispref/abbrevs.texi:145
msgid ""
"This function defines an abbrev named @var{name}, in @var{table}, to expand "
"to @var{expansion} and call @var{hook}.  The return value is @var{name}."
msgstr ""
"Cette fonction définit une abréviation appelée @var{name}, dans\n"
"@var{table}, à développer @var{expansion} et appeler @var{hook}. La\n"
"valeur de retour est @var{name}."

# type: defun
#: lispref/abbrevs.texi:149
msgid ""
"The value of @var{count}, if specified, initializes the abbrev's usage-"
"count.  If @var{count} is not specified or @code{nil}, the use count is "
"initialized to zero."
msgstr ""
"La valeur @var{count}, si indiquée, initialise les abréviations\n"
"usage-compter. Si @var{count} n'est pas indiqué ou est @code{nil},\n"
"l'usage du compteur est initialisée à zéro."

# type: defun
#: lispref/abbrevs.texi:155
msgid ""
"The argument @var{name} should be a string.  The argument @var{expansion} is "
"normally the desired expansion (a string), or @code{nil} to undefine the "
"abbrev.  If it is anything but a string or @code{nil}, then the abbreviation "
"``expands'' solely by running @var{hook}."
msgstr ""

# type: defun
#: lispref/abbrevs.texi:160
msgid ""
"The argument @var{hook} is a function or @code{nil}.  If @var{hook} is non-"
"@code{nil}, then it is called with no arguments after the abbrev is replaced "
"with @var{expansion}; point is located at the end of @var{expansion} when "
"@var{hook} is called."
msgstr ""

# type: cindex
#: lispref/abbrevs.texi:161
#, no-wrap
msgid "@code{no-self-insert} property"
msgstr ""

# type: defun
#: lispref/abbrevs.texi:169
msgid ""
"If @var{hook} is a non-@code{nil} symbol whose @code{no-self-insert} "
"property is non-@code{nil}, @var{hook} can explicitly control whether to "
"insert the self-inserting input character that triggered the expansion.  If "
"@var{hook} returns non-@code{nil} in this case, that inhibits insertion of "
"the character.  By contrast, if @var{hook} returns @code{nil}, @code{expand-"
"abbrev} also returns @code{nil}, as if expansion had not really occurred."
msgstr ""

# type: defun
#: lispref/abbrevs.texi:175
msgid ""
"If @var{system-flag} is non-@code{nil}, that marks the abbrev as a "
"``system'' abbrev with the @code{system-type} property.  Unless @var{system-"
"flag} has the value @code{force}, a ``system'' abbrev will not overwrite an "
"existing definition for a non-``system'' abbrev of the same name."
msgstr ""

# type: defun
#: lispref/abbrevs.texi:181
msgid ""
"Normally the function @code{define-abbrev} sets the variable @code{abbrevs-"
"changed} to @code{t}, if it actually changes the abbrev.  (This is so that "
"some commands will offer to save the abbrevs.)  It does not do this for a "
"``system'' abbrev, since those won't be saved anyway."
msgstr ""

# type: defopt
#: lispref/abbrevs.texi:183
#, no-wrap
msgid "only-global-abbrevs"
msgstr "only-global-abbrevs"

# type: defopt
#: lispref/abbrevs.texi:189
msgid ""
"If this variable is non-@code{nil}, it means that the user plans to use "
"global abbrevs only.  This tells the commands that define mode-specific "
"abbrevs to define global ones instead.  This variable does not alter the "
"behavior of the functions in this section; it is examined by their callers."
msgstr ""

# type: node
#: lispref/abbrevs.texi:191 lispref/abbrevs.texi:240 lispref/abbrevs.texi:377
#, no-wrap
msgid "Abbrev Expansion"
msgstr "Expansions d'abréviations"

# type: section
#: lispref/abbrevs.texi:192
#, no-wrap
msgid "Saving Abbrevs in Files"
msgstr ""

# type: Plain text
#: lispref/abbrevs.texi:200
msgid ""
"A file of saved abbrev definitions is actually a file of Lisp code.  The "
"abbrevs are saved in the form of a Lisp program to define the same abbrev "
"tables with the same contents.  Therefore, you can load the file with @code"
"{load} (@pxref{How Programs Do Loading}).  However, the function @code"
"{quietly-read-abbrev-file} is provided as a more convenient interface."
msgstr ""

# type: Plain text
#: lispref/abbrevs.texi:204
msgid ""
"User-level facilities such as @code{save-some-buffers} can save abbrevs in a "
"file automatically, under the control of variables described here."
msgstr ""

# type: defopt
#: lispref/abbrevs.texi:205
#, no-wrap
msgid "abbrev-file-name"
msgstr "abbrev-file-name"

# type: defopt
#: lispref/abbrevs.texi:207
msgid "This is the default file name for reading and saving abbrevs."
msgstr ""

# type: defun
#: lispref/abbrevs.texi:209
#, no-wrap
msgid "quietly-read-abbrev-file &optional filename"
msgstr ""

# type: defun
#: lispref/abbrevs.texi:215
msgid ""
"This function reads abbrev definitions from a file named @var{filename}, "
"previously written with @code{write-abbrev-file}.  If @var{filename} is "
"omitted or @code{nil}, the file specified in @code{abbrev-file-name} is "
"used.  @code{save-abbrevs} is set to @code{t} so that changes will be saved."
msgstr ""

# type: defun
#: lispref/abbrevs.texi:217
msgid "This function does not display any messages.  It returns @code{nil}."
msgstr ""

# type: defopt
#: lispref/abbrevs.texi:219
#, no-wrap
msgid "save-abbrevs"
msgstr "save-abbrevs"

# type: defopt
#: lispref/abbrevs.texi:224
msgid ""
"A non-@code{nil} value for @code{save-abbrevs} means that Emacs should offer "
"the user to save abbrevs when files are saved.  If the value is @code"
"{silently}, Emacs saves the abbrevs without asking the user.  @code{abbrev-"
"file-name} specifies the file to save the abbrevs in."
msgstr ""

# type: defvar
#: lispref/abbrevs.texi:226
#, no-wrap
msgid "abbrevs-changed"
msgstr "abbrevs-changed"

# type: defvar
#: lispref/abbrevs.texi:230
msgid ""
"This variable is set non-@code{nil} by defining or altering any abbrevs "
"(except ``system'' abbrevs).  This serves as a flag for various Emacs "
"commands to offer to save your abbrevs."
msgstr ""

# type: deffn
#: lispref/abbrevs.texi:232
#, no-wrap
msgid "Command write-abbrev-file &optional filename"
msgstr ""

# type: deffn
#: lispref/abbrevs.texi:238
msgid ""
"Save all abbrev definitions (except ``system'' abbrevs), for all abbrev "
"tables listed in @code{abbrev-table-name-list}, in the file @var{filename}, "
"in the form of a Lisp program that when loaded will define the same "
"abbrevs.  If @var{filename} is @code{nil} or omitted, @code{abbrev-file-"
"name} is used.  This function returns @code{nil}."
msgstr ""

# type: section
#: lispref/abbrevs.texi:242
#, no-wrap
msgid "Looking Up and Expanding Abbreviations"
msgstr ""

# type: Plain text
#: lispref/abbrevs.texi:248
msgid ""
"Abbrevs are usually expanded by certain interactive commands, including @code"
"{self-insert-command}.  This section describes the subroutines used in "
"writing such commands, as well as the variables they use for communication."
msgstr ""

# type: defun
#: lispref/abbrevs.texi:249
#, no-wrap
msgid "abbrev-symbol abbrev &optional table"
msgstr ""

# type: defun
#: lispref/abbrevs.texi:256
msgid ""
"This function returns the symbol representing the abbrev named @var"
"{abbrev}.  The value returned is @code{nil} if that abbrev is not defined.  "
"The optional second argument @var{table} is the abbrev table to look it up "
"in.  If @var{table} is @code{nil}, this function tries first the current "
"buffer's local abbrev table, and second the global abbrev table."
msgstr ""

# type: defun
#: lispref/abbrevs.texi:258
#, no-wrap
msgid "abbrev-expansion abbrev &optional table"
msgstr ""

# type: defun
#: lispref/abbrevs.texi:264
msgid ""
"This function returns the string that @var{abbrev} would expand into (as "
"defined by the abbrev tables used for the current buffer).  If @var{abbrev} "
"is not a valid abbrev, the function returns @code{nil}.  The optional "
"argument @var{table} specifies the abbrev table to use, as in @code{abbrev-"
"symbol}."
msgstr ""

# type: deffn
#: lispref/abbrevs.texi:266
#, no-wrap
msgid "Command expand-abbrev"
msgstr ""

# type: deffn
#: lispref/abbrevs.texi:270
msgid ""
"This command expands the abbrev before point, if any.  If point does not "
"follow an abbrev, this command does nothing.  The command returns the abbrev "
"symbol if it did expansion, @code{nil} otherwise."
msgstr ""

# type: deffn
#: lispref/abbrevs.texi:275
msgid ""
"If the abbrev symbol has a hook function which is a symbol whose @code{no-"
"self-insert} property is non-@code{nil}, and if the hook function returns "
"@code{nil} as its value, then @code{expand-abbrev} returns @code{nil} even "
"though expansion did occur."
msgstr ""

# type: deffn
#: lispref/abbrevs.texi:277
#, no-wrap
msgid "Command abbrev-prefix-mark &optional arg"
msgstr ""

# type: deffn
#: lispref/abbrevs.texi:282
msgid ""
"This command marks the current location of point as the beginning of an "
"abbrev.  The next call to @code{expand-abbrev} will use the text from here "
"to point (where it is then) as the abbrev to expand, rather than using the "
"previous word as usual."
msgstr ""

# type: deffn
#: lispref/abbrevs.texi:287
msgid ""
"First, this command expands any abbrev before point, unless @var{arg} is non-"
"@code{nil}.  (Interactively, @var{arg} is the prefix argument.)  Then it "
"inserts a hyphen before point, to indicate the start of the next abbrev to "
"be expanded.  The actual expansion removes the hyphen."
msgstr ""

# type: defopt
#: lispref/abbrevs.texi:289
#, no-wrap
msgid "abbrev-all-caps"
msgstr "abbrev-all-caps"

# type: defopt
#: lispref/abbrevs.texi:294
msgid ""
"When this is set non-@code{nil}, an abbrev entered entirely in upper case is "
"expanded using all upper case.  Otherwise, an abbrev entered entirely in "
"upper case is expanded by capitalizing each word of the expansion."
msgstr ""

# type: defvar
#: lispref/abbrevs.texi:296
#, no-wrap
msgid "abbrev-start-location"
msgstr "abbrev-start-location"

# type: defvar
#: lispref/abbrevs.texi:303
msgid ""
"The value of this variable is a buffer position (an integer or a marker)  "
"for @code{expand-abbrev} to use as the start of the next abbrev to be "
"expanded.  The value can also be @code{nil}, which means to use the word "
"before point instead.  @code{abbrev-start-location} is set to @code{nil} "
"each time @code{expand-abbrev} is called.  This variable is also set by @code"
"{abbrev-prefix-mark}."
msgstr ""

# type: defvar
#: lispref/abbrevs.texi:305
#, no-wrap
msgid "abbrev-start-location-buffer"
msgstr "abbrev-start-location-buffer"

# type: defvar
#: lispref/abbrevs.texi:310
msgid ""
"The value of this variable is the buffer for which @code{abbrev-start-"
"location} has been set.  Trying to expand an abbrev in any other buffer "
"clears @code{abbrev-start-location}.  This variable is set by @code{abbrev-"
"prefix-mark}."
msgstr ""

# type: defvar
#: lispref/abbrevs.texi:312
#, no-wrap
msgid "last-abbrev"
msgstr "last-abbrev"

# type: defvar
#: lispref/abbrevs.texi:317
msgid ""
"This is the @code{abbrev-symbol} of the most recent abbrev expanded.  This "
"information is left by @code{expand-abbrev} for the sake of the @code"
"{unexpand-abbrev} command (@pxref{Expanding Abbrevs,, Expanding Abbrevs, "
"emacs, The GNU Emacs Manual})."
msgstr ""

# type: defvar
#: lispref/abbrevs.texi:319
#, no-wrap
msgid "last-abbrev-location"
msgstr "last-abbrev-location"

# type: defvar
#: lispref/abbrevs.texi:323
msgid ""
"This is the location of the most recent abbrev expanded.  This contains "
"information left by @code{expand-abbrev} for the sake of the @code{unexpand-"
"abbrev} command."
msgstr ""

# type: defvar
#: lispref/abbrevs.texi:325
#, no-wrap
msgid "last-abbrev-text"
msgstr "last-abbrev-text"

# type: defvar
#: lispref/abbrevs.texi:330
msgid ""
"This is the exact expansion text of the most recent abbrev expanded, after "
"case conversion (if any).  Its value is @code{nil} if the abbrev has already "
"been unexpanded.  This contains information left by @code{expand-abbrev} for "
"the sake of the @code{unexpand-abbrev} command."
msgstr ""

# type: item
#: lispref/abbrevs.texi:333 lispref/hooks.texi:261
#, no-wrap
msgid "pre-abbrev-expand-hook"
msgstr "pre-abbrev-expand-hook"

# type: defvar
#: lispref/abbrevs.texi:342
msgid ""
"This is a normal hook whose functions are executed, in sequence, just before "
"any expansion of an abbrev.  @xref{Hooks}.  Since it is a normal hook, the "
"hook functions receive no arguments.  However, they can find the abbrev to "
"be expanded by looking in the buffer before point.  Running the hook is the "
"first thing that @code{expand-abbrev} does, and so a hook function can be "
"used to change the current abbrev table before abbrev lookup happens.  "
"(Although you have to do this carefully.  See the example below.)"
msgstr ""

# type: Plain text
#: lispref/abbrevs.texi:352
msgid ""
"The following sample code shows a simple use of @code{pre-abbrev-expand-"
"hook}.  It assumes that @code{foo-mode} is a mode for editing certain files "
"in which lines that start with @samp{#} are comments.  You want to use Text "
"mode abbrevs for those lines.  The regular local abbrev table, @code{foo-"
"mode-abbrev-table} is appropriate for all other lines.  Then you can put the "
"following code in your @file{.emacs} file.  @xref{Standard Abbrev Tables}, "
"for the definitions of @code{local-abbrev-table} and @code{text-mode-abbrev-"
"table}."
msgstr ""

# type: smallexample
#: lispref/abbrevs.texi:364
#, no-wrap
msgid ""
"(defun foo-mode-pre-abbrev-expand ()\n"
"  (when (save-excursion (forward-line 0) (eq (char-after) ?#))\n"
"    (let ((local-abbrev-table text-mode-abbrev-table)\n"
"\t  ;; Avoid infinite loop.\n"
"\t  (pre-abbrev-expand-hook nil))\n"
"      (expand-abbrev))\n"
"    ;; We have already called `expand-abbrev' in this hook.\n"
"    ;; Hence we want the \"actual\" call following this hook to be a no-op.\n"
"    (setq abbrev-start-location (point-max)\n"
"\t  abbrev-start-location-buffer (current-buffer))))\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/abbrevs.texi:370
#, no-wrap
msgid ""
"(add-hook 'foo-mode-hook\n"
"\t  #'(lambda ()\n"
"\t      (add-hook 'pre-abbrev-expand-hook\n"
"\t\t\t'foo-mode-pre-abbrev-expand\n"
"\t\t\tnil t)))\n"
msgstr ""

# type: Plain text
#: lispref/abbrevs.texi:376
msgid ""
"Note that @code{foo-mode-pre-abbrev-expand} just returns @code{nil} without "
"doing anything for lines not starting with @samp{#}.  Hence abbrevs expand "
"normally using @code{foo-mode-abbrev-table} as local abbrev table for such "
"lines."
msgstr ""

# type: Plain text
#: lispref/abbrevs.texi:383
msgid ""
"Here we list the variables that hold the abbrev tables for the preloaded "
"major modes of Emacs."
msgstr ""

# type: defvar
#: lispref/abbrevs.texi:384
#, no-wrap
msgid "global-abbrev-table"
msgstr "global-abbrev-table"

# type: defvar
#: lispref/abbrevs.texi:389
msgid ""
"This is the abbrev table for mode-independent abbrevs.  The abbrevs defined "
"in it apply to all buffers.  Each buffer may also have a local abbrev table, "
"whose abbrev definitions take precedence over those in the global table."
msgstr ""

# type: item
#: lispref/abbrevs.texi:391 lispref/locals.texi:159
#, no-wrap
msgid "local-abbrev-table"
msgstr "local-abbrev-table"

# type: defvar
#: lispref/abbrevs.texi:394
msgid ""
"The value of this buffer-local variable is the (mode-specific)  abbreviation "
"table of the current buffer."
msgstr ""

# type: defvar
#: lispref/abbrevs.texi:396
#, no-wrap
msgid "fundamental-mode-abbrev-table"
msgstr "fundamental-mode-abbrev-table"

# type: defvar
#: lispref/abbrevs.texi:399
msgid ""
"This is the local abbrev table used in Fundamental mode; in other words, it "
"is the local abbrev table in all buffers in Fundamental mode."
msgstr ""

# type: defvar
#: lispref/abbrevs.texi:401
#, no-wrap
msgid "text-mode-abbrev-table"
msgstr "text-mode-abbrev-table"

# type: defvar
#: lispref/abbrevs.texi:403
msgid "This is the local abbrev table used in Text mode."
msgstr ""

# type: defvar
#: lispref/abbrevs.texi:405
#, no-wrap
msgid "lisp-mode-abbrev-table"
msgstr "lisp-mode-abbrev-table"

# type: defvar
#: lispref/abbrevs.texi:407
msgid "This is the local abbrev table used in Lisp mode and Emacs Lisp mode."
msgstr ""

# type: ignore
#: lispref/abbrevs.texi:411
#, no-wrap
msgid "   arch-tag: 5ffdbe08-2cd4-48ec-a5a8-080f95756eec\n"
msgstr "   arch-tag: 5ffdbe08-2cd4-48ec-a5a8-080f95756eec\n"

# type: menu
#: lispref/advice.texi:7 lispref/compile.texi:7 lispref/debugging.texi:7
#: lispref/elisp.texi:131
#, no-wrap
msgid "Advising Functions"
msgstr ""

# type: menu
#: lispref/advice.texi:7 lispref/debugging.texi:7 lispref/edebug.texi:13
#: lispref/elisp.texi:131 lispref/streams.texi:7 lispref/vol1.texi:232
#: lispref/vol2.texi:233
#, no-wrap
msgid "Debugging"
msgstr ""

# type: menu
#: lispref/advice.texi:7 lispref/compile.texi:7 lispref/compile.texi:8
#: lispref/elisp.texi:131 lispref/loading.texi:7 lispref/vol1.texi:232
#: lispref/vol1.texi:516 lispref/vol2.texi:233 lispref/vol2.texi:517
#, no-wrap
msgid "Byte Compilation"
msgstr ""

# type: chapter
#: lispref/advice.texi:8
#, no-wrap
msgid "Advising Emacs Lisp Functions"
msgstr ""

# type: cindex
#: lispref/advice.texi:9
#, no-wrap
msgid "advising functions"
msgstr ""

# type: Plain text
#: lispref/advice.texi:15
msgid ""
"The @dfn{advice} feature lets you add to the existing definition of a "
"function, by @dfn{advising the function}.  This is a cleaner method for a "
"library to customize functions defined within Emacs---cleaner than "
"redefining the whole function."
msgstr ""

# type: cindex
#: lispref/advice.texi:16
#, no-wrap
msgid "piece of advice"
msgstr ""

# type: Plain text
#: lispref/advice.texi:24
msgid ""
"Each function can have multiple @dfn{pieces of advice}, separately defined.  "
"Each defined piece of advice can be @dfn{enabled} or @dfn{disabled} "
"explicitly.  All the enabled pieces of advice for any given function "
"actually take effect when you @dfn{activate} advice for that function, or "
"when you define or redefine the function.  Note that enabling a piece of "
"advice and activating advice for a function are not the same thing."
msgstr ""

# type: Plain text
#: lispref/advice.texi:29
msgid ""
"@strong{Usage Note:} Advice is useful for altering the behavior of existing "
"calls to an existing function.  If you want the new behavior for new calls, "
"or for key bindings, you should define a new function (or a new command) "
"which uses the existing function."
msgstr ""

# type: Plain text
#: lispref/advice.texi:37
msgid ""
"@strong{Usage note:} Advising a function can cause confusion in debugging, "
"since people who debug calls to the original function may not notice that it "
"has been modified with advice.  Therefore, if you have the possibility to "
"change the code of that function (or ask someone to do so) to run a hook, "
"please solve the problem that way.  Advice should be reserved for the cases "
"where you cannot get the function changed."
msgstr ""

# type: Plain text
#: lispref/advice.texi:41
msgid ""
"In particular, this means that a file in Emacs should not put advice on a "
"function in Emacs.  There are currently a few exceptions to this convention, "
"but we aim to correct them."
msgstr ""

# type: node
#: lispref/advice.texi:54 lispref/advice.texi:56
#, no-wrap
msgid "Simple Advice"
msgstr ""

# type: menu
#: lispref/advice.texi:54
msgid "A simple example to explain the basics of advice."
msgstr ""

# type: section
#: lispref/advice.texi:54 lispref/advice.texi:121 lispref/advice.texi:122
#, no-wrap
msgid "Defining Advice"
msgstr ""

# type: menu
#: lispref/advice.texi:54
msgid "Detailed description of @code{defadvice}."
msgstr ""

# type: section
#: lispref/advice.texi:54 lispref/advice.texi:269 lispref/advice.texi:270
#, no-wrap
msgid "Around-Advice"
msgstr ""

# type: menu
#: lispref/advice.texi:54
msgid "Wrapping advice around a function's definition."
msgstr ""

# type: section
#: lispref/advice.texi:54 lispref/advice.texi:307 lispref/advice.texi:308
#, no-wrap
msgid "Computed Advice"
msgstr ""

# type: menu
#: lispref/advice.texi:54
msgid "...is to @code{defadvice} as @code{fset} is to @code{defun}."
msgstr ""

# type: section
#: lispref/advice.texi:54 lispref/advice.texi:343 lispref/advice.texi:344
#, no-wrap
msgid "Activation of Advice"
msgstr ""

# type: menu
#: lispref/advice.texi:54
msgid "Advice doesn't do anything until you activate it."
msgstr ""

# type: node
#: lispref/advice.texi:54 lispref/advice.texi:466
#, no-wrap
msgid "Enabling Advice"
msgstr ""

# type: menu
#: lispref/advice.texi:54
msgid "You can enable or disable each piece of advice."
msgstr ""

# type: section
#: lispref/advice.texi:54 lispref/advice.texi:515 lispref/advice.texi:516
#, no-wrap
msgid "Preactivation"
msgstr ""

# type: menu
#: lispref/advice.texi:54
msgid "Preactivation is a way of speeding up the"
msgstr ""

# type: menu
#: lispref/advice.texi:54
msgid "loading of compiled advice."
msgstr ""

# type: section
#: lispref/advice.texi:54 lispref/advice.texi:574 lispref/advice.texi:575
#, no-wrap
msgid "Argument Access in Advice"
msgstr ""

# type: menu
#: lispref/advice.texi:54
msgid "How advice can access the function's arguments."
msgstr ""

# type: section
#: lispref/advice.texi:54 lispref/advice.texi:674 lispref/advice.texi:675
#, no-wrap
msgid "Advising Primitives"
msgstr ""

# type: menu
#: lispref/advice.texi:54
msgid "Accessing arguments when advising a primitive."
msgstr ""

# type: node
#: lispref/advice.texi:54 lispref/advice.texi:707
#, no-wrap
msgid "Combined Definition"
msgstr ""

# type: menu
#: lispref/advice.texi:54
msgid "How advice is implemented."
msgstr ""

# type: section
#: lispref/advice.texi:57
#, no-wrap
msgid "A Simple Advice Example"
msgstr ""

# type: Plain text
#: lispref/advice.texi:64
msgid ""
"The command @code{next-line} moves point down vertically one or more lines; "
"it is the standard binding of @kbd{C-n}.  When used on the last line of the "
"buffer, this command inserts a newline to create a line to move to if @code"
"{next-line-add-newlines} is non-@code{nil} (its default is @code{nil}.)"
msgstr ""

# type: Plain text
#: lispref/advice.texi:69
msgid ""
"Suppose you wanted to add a similar feature to @code{previous-line}, which "
"would insert a new line at the beginning of the buffer for the command to "
"move to (when @code{next-line-add-newlines} is non-@code{nil}).  How could "
"you do this?"
msgstr ""

# type: Plain text
#: lispref/advice.texi:75
msgid ""
"You could do it by redefining the whole function, but that is not modular.  "
"The advice feature provides a cleaner alternative: you can effectively add "
"your code to the existing function definition, without actually changing or "
"even seeing that definition.  Here is how to do this:"
msgstr ""

# type: example
#: lispref/advice.texi:85
#, no-wrap
msgid ""
"(defadvice previous-line (before next-line-at-end\n"
"                                 (&optional arg try-vscroll))\n"
"  \"Insert an empty line when moving up from the top line.\"\n"
"  (if (and next-line-add-newlines (= arg 1)\n"
"           (save-excursion (beginning-of-line) (bobp)))\n"
"      (progn\n"
"        (beginning-of-line)\n"
"        (newline))))\n"
msgstr ""

# type: Plain text
#: lispref/advice.texi:93
msgid ""
"This expression defines a @dfn{piece of advice} for the function @code"
"{previous-line}.  This piece of advice is named @code{next-line-at-end}, and "
"the symbol @code{before} says that it is @dfn{before-advice} which should "
"run before the regular definition of @code{previous-line}.  @code{(&optional "
"arg try-vscroll)} specifies how the advice code can refer to the function's "
"arguments."
msgstr ""

# type: Plain text
#: lispref/advice.texi:99
msgid ""
"When this piece of advice runs, it creates an additional line, in the "
"situation where that is appropriate, but does not move point to that line.  "
"This is the correct way to write the advice, because the normal definition "
"will run afterward and will move back to the newly inserted line."
msgstr ""

# type: Plain text
#: lispref/advice.texi:103
msgid ""
"Defining the advice doesn't immediately change the function @code{previous-"
"line}.  That happens when you @dfn{activate} the advice, like this:"
msgstr ""

# type: example
#: lispref/advice.texi:106
#, no-wrap
msgid "(ad-activate 'previous-line)\n"
msgstr ""

# type: Plain text
#: lispref/advice.texi:114
msgid ""
"This is what actually begins to use the advice that has been defined so far "
"for the function @code{previous-line}.  Henceforth, whenever that function "
"is run, whether invoked by the user with @kbd{C-p} or @kbd{M-x}, or called "
"from Lisp, it runs the advice first, and its regular definition second."
msgstr ""

# type: Plain text
#: lispref/advice.texi:120
msgid ""
"This example illustrates before-advice, which is one @dfn{class} of advice: "
"it runs before the function's base definition.  There are two other advice "
"classes: @dfn{after-advice}, which runs after the base definition, and @dfn"
"{around-advice}, which lets you specify an expression to wrap around the "
"invocation of the base definition."
msgstr ""

# type: cindex
#: lispref/advice.texi:123
#, no-wrap
msgid "defining advice"
msgstr ""

# type: cindex
#: lispref/advice.texi:124
#, no-wrap
msgid "advice, defining"
msgstr ""

# type: Plain text
#: lispref/advice.texi:129
msgid ""
"To define a piece of advice, use the macro @code{defadvice}.  A call to @code"
"{defadvice} has the following syntax, which is based on the syntax of @code"
"{defun} and @code{defmacro}, but adds more:"
msgstr ""

# type: findex
#: lispref/advice.texi:130
#, no-wrap
msgid "defadvice"
msgstr "defadvice"

# type: example
#: lispref/advice.texi:138
#, no-wrap
msgid ""
"(defadvice @var{function} (@var{class} @var{name}\n"
"                         @r{[}@var{position}@r{]} @r{[}@var{arglist}@r{]}\n"
"                         @var{flags}...)\n"
"  @r{[}@var{documentation-string}@r{]}\n"
"  @r{[}@var{interactive-form}@r{]}\n"
"  @var{body-forms}...)\n"
msgstr ""

# type: Plain text
#: lispref/advice.texi:145
msgid ""
"Here, @var{function} is the name of the function (or macro or special form) "
"to be advised.  From now on, we will write just ``function'' when describing "
"the entity being advised, but this always includes macros and special forms."
msgstr ""

# type: Plain text
#: lispref/advice.texi:148
msgid ""
"In place of the argument list in an ordinary definition, an advice "
"definition calls for several different pieces of information."
msgstr ""

# type: cindex
#: lispref/advice.texi:149
#, no-wrap
msgid "class of advice"
msgstr ""

# type: cindex
#: lispref/advice.texi:150
#, no-wrap
msgid "before-advice"
msgstr ""

# type: cindex
#: lispref/advice.texi:151
#, no-wrap
msgid "after-advice"
msgstr ""

# type: cindex
#: lispref/advice.texi:152
#, no-wrap
msgid "around-advice"
msgstr ""

# type: Plain text
#: lispref/advice.texi:159
msgid ""
"@var{class} specifies the @dfn{class} of the advice---one of @code{before}, "
"@code{after}, or @code{around}.  Before-advice runs before the function "
"itself; after-advice runs after the function itself; around-advice is "
"wrapped around the execution of the function itself.  After-advice and "
"around-advice can override the return value by setting @code{ad-return-"
"value}."
msgstr ""

# type: defvar
#: lispref/advice.texi:160
#, no-wrap
msgid "ad-return-value"
msgstr ""

# type: defvar
#: lispref/advice.texi:166
msgid ""
"While advice is executing, after the function's original definition has been "
"executed, this variable holds its return value, which will ultimately be "
"returned to the caller after finishing all the advice.  After-advice and "
"around-advice can arrange to return some other value by storing it in this "
"variable."
msgstr ""

# type: Plain text
#: lispref/advice.texi:173
msgid ""
"The argument @var{name} is the name of the advice, a non-@code{nil} symbol.  "
"The advice name uniquely identifies one piece of advice, within all the "
"pieces of advice in a particular class for a particular @var{function}.  The "
"name allows you to refer to the piece of advice---to redefine it, or to "
"enable or disable it."
msgstr ""

# type: Plain text
#: lispref/advice.texi:182
msgid ""
"The optional @var{position} specifies where, in the current list of advice "
"of the specified @var{class}, this new advice should be placed.  It should "
"be either @code{first}, @code{last} or a number that specifies a zero-based "
"position (@code{first} is equivalent to 0).  If no position is specified, "
"the default is @code{first}.  Position values outside the range of existing "
"positions in this class are mapped to the beginning or the end of the range, "
"whichever is closer.  The @var{position} value is ignored when redefining an "
"existing piece of advice."
msgstr ""

# type: Plain text
#: lispref/advice.texi:188
msgid ""
"The optional @var{arglist} can be used to define the argument list for the "
"sake of advice.  This becomes the argument list of the combined definition "
"that is generated in order to run the advice (@pxref{Combined Definition}).  "
"Therefore, the advice expressions can use the argument variables in this "
"list to access argument values."
msgstr ""

# type: Plain text
#: lispref/advice.texi:194
msgid ""
"The argument list used in advice need not be the same as the argument list "
"used in the original function, but must be compatible with it, so that it "
"can handle the ways the function is actually called.  If two pieces of "
"advice for a function both specify an argument list, they must specify the "
"same argument list."
msgstr ""

# type: Plain text
#: lispref/advice.texi:198
msgid ""
"@xref{Argument Access in Advice}, for more information about argument lists "
"and advice, and a more flexible way for advice to access the arguments."
msgstr ""

# type: Plain text
#: lispref/advice.texi:202
msgid ""
"The remaining elements, @var{flags}, are symbols that specify further "
"information about how to use this piece of advice.  Here are the valid "
"symbols and their meanings:"
msgstr ""

# type: item
#: lispref/advice.texi:204
#, no-wrap
msgid "activate"
msgstr ""

# type: table
#: lispref/advice.texi:209
msgid ""
"Activate the advice for @var{function} now.  Changes in a function's advice "
"always take effect the next time you activate advice for the function; this "
"flag says to do so, for @var{function}, immediately after defining this "
"piece of advice."
msgstr ""

# type: cindex
#: lispref/advice.texi:210
#, no-wrap
msgid "forward advice"
msgstr ""

# type: table
#: lispref/advice.texi:215
msgid ""
"This flag has no immediate effect if @var{function} itself is not defined "
"yet (a situation known as @dfn{forward advice}), because it is impossible to "
"activate an undefined function's advice.  However, defining @var{function} "
"will automatically activate its advice."
msgstr ""

# type: item
#: lispref/advice.texi:216
#, no-wrap
msgid "protect"
msgstr ""

# type: table
#: lispref/advice.texi:221
msgid ""
"Protect this piece of advice against non-local exits and errors in preceding "
"code and advice.  Protecting advice places it as a cleanup in an @code"
"{unwind-protect} form, so that it will execute even if the previous code "
"gets an error or uses @code{throw}.  @xref{Cleanups}."
msgstr ""

# type: item
#: lispref/advice.texi:222
#, no-wrap
msgid "compile"
msgstr ""

# type: table
#: lispref/advice.texi:226
msgid ""
"Compile the combined definition that is used to run the advice.  This flag "
"is ignored unless @code{activate} is also specified.  @xref{Combined "
"Definition}."
msgstr ""

# type: item
#: lispref/advice.texi:227
#, no-wrap
msgid "disable"
msgstr ""

# type: table
#: lispref/advice.texi:230
msgid ""
"Initially disable this piece of advice, so that it will not be used unless "
"subsequently explicitly enabled.  @xref{Enabling Advice}."
msgstr ""

# type: item
#: lispref/advice.texi:231
#, no-wrap
msgid "preactivate"
msgstr ""

# type: table
#: lispref/advice.texi:236
msgid ""
"Activate advice for @var{function} when this @code{defadvice} is compiled or "
"macroexpanded.  This generates a compiled advised definition according to "
"the current advice state, which will be used during activation if "
"appropriate.  @xref{Preactivation}."
msgstr ""

# type: table
#: lispref/advice.texi:238
msgid "This is useful only if this @code{defadvice} is byte-compiled."
msgstr ""

# type: Plain text
#: lispref/advice.texi:245
msgid ""
"The optional @var{documentation-string} serves to document this piece of "
"advice.  When advice is active for @var{function}, the documentation for @var"
"{function} (as returned by @code{documentation}) combines the documentation "
"strings of all the advice for @var{function} with the documentation string "
"of its original function definition."
msgstr ""

# type: Plain text
#: lispref/advice.texi:250
msgid ""
"The optional @var{interactive-form} form can be supplied to change the "
"interactive behavior of the original function.  If more than one piece of "
"advice has an @var{interactive-form}, then the first one (the one with the "
"smallest position) found among all the advice takes precedence."
msgstr ""

# type: Plain text
#: lispref/advice.texi:255
msgid ""
"The possibly empty list of @var{body-forms} specifies the body of the "
"advice.  The body of an advice can access or change the arguments, the "
"return value, the binding environment, and perform any other kind of side "
"effect."
msgstr ""

# type: Plain text
#: lispref/advice.texi:260
msgid ""
"@strong{Warning:} When you advise a macro, keep in mind that macros are "
"expanded when a program is compiled, not when a compiled program is run.  "
"All subroutines used by the advice need to be available when the byte "
"compiler expands the macro."
msgstr ""

# type: deffn
#: lispref/advice.texi:261
#, no-wrap
msgid "Command ad-unadvise function"
msgstr ""

# type: deffn
#: lispref/advice.texi:263
msgid "This command deletes the advice from @var{function}."
msgstr ""

# type: deffn
#: lispref/advice.texi:265
#, no-wrap
msgid "Command ad-unadvise-all"
msgstr ""

# type: deffn
#: lispref/advice.texi:267
msgid "This command deletes all pieces of advice from all functions."
msgstr ""

# type: Plain text
#: lispref/advice.texi:278
msgid ""
"Around-advice lets you ``wrap'' a Lisp expression ``around'' the original "
"function definition.  You specify where the original function definition "
"should go by means of the special symbol @code{ad-do-it}.  Where this symbol "
"occurs inside the around-advice body, it is replaced with a @code{progn} "
"containing the forms of the surrounded code.  Here is an example:"
msgstr ""

# type: example
#: lispref/advice.texi:284
#, no-wrap
msgid ""
"(defadvice foo (around foo-around)\n"
"  \"Ignore case in `foo'.\"\n"
"  (let ((case-fold-search t))\n"
"    ad-do-it))\n"
msgstr ""

# type: Plain text
#: lispref/advice.texi:289
msgid ""
"Its effect is to make sure that case is ignored in searches when the "
"original definition of @code{foo} is run."
msgstr ""

# type: defvar
#: lispref/advice.texi:290
#, no-wrap
msgid "ad-do-it"
msgstr ""

# type: defvar
#: lispref/advice.texi:294
msgid ""
"This is not really a variable, rather a place-holder that looks like a "
"variable.  You use it in around-advice to specify the place to run the "
"function's original definition and other ``earlier'' around-advice."
msgstr ""

# type: Plain text
#: lispref/advice.texi:300
msgid ""
"If the around-advice does not use @code{ad-do-it}, then it does not run the "
"original function definition.  This provides a way to override the original "
"definition completely.  (It also overrides lower-positioned pieces of around-"
"advice)."
msgstr ""

# type: Plain text
#: lispref/advice.texi:306
msgid ""
"If the around-advice uses @code{ad-do-it} more than once, the original "
"definition is run at each place.  In this way, around-advice can execute the "
"original definition (and lower-positioned pieces of around-advice)  several "
"times.  Another way to do that is by using @code{ad-do-it} inside of a loop."
msgstr ""

# type: Plain text
#: lispref/advice.texi:314
msgid ""
"The macro @code{defadvice} resembles @code{defun} in that the code for the "
"advice, and all other information about it, are explicitly stated in the "
"source code.  You can also create advice whose details are computed, using "
"the function @code{ad-add-advice}."
msgstr ""

# type: defun
#: lispref/advice.texi:315
#, no-wrap
msgid "ad-add-advice function advice class position"
msgstr ""

# type: defun
#: lispref/advice.texi:319
msgid ""
"Calling @code{ad-add-advice} adds @var{advice} as a piece of advice to @var"
"{function} in class @var{class}.  The argument @var{advice} has this form:"
msgstr ""

# type: example
#: lispref/advice.texi:322
#, no-wrap
msgid "(@var{name} @var{protected} @var{enabled} @var{definition})\n"
msgstr ""

# type: defun
#: lispref/advice.texi:328
msgid ""
"Here @var{protected} and @var{enabled} are flags, and @var{definition} is "
"the expression that says what the advice should do.  If @var{enabled} is "
"@code{nil}, this piece of advice is initially disabled (@pxref{Enabling "
"Advice})."
msgstr ""

# type: defun
#: lispref/advice.texi:337
msgid ""
"If @var{function} already has one or more pieces of advice in the specified "
"@var{class}, then @var{position} specifies where in the list to put the new "
"piece of advice.  The value of @var{position} can either be @code{first}, "
"@code{last}, or a number (counting from 0 at the beginning of the list).  "
"Numbers outside the range are mapped to the beginning or the end of the "
"range, whichever is closer.  The @var{position} value is ignored when "
"redefining an existing piece of advice."
msgstr ""

# type: defun
#: lispref/advice.texi:341
msgid ""
"If @var{function} already has a piece of @var{advice} with the same name, "
"then the position argument is ignored and the old advice is replaced with "
"the new one."
msgstr ""

# type: cindex
#: lispref/advice.texi:345
#, no-wrap
msgid "activating advice"
msgstr ""

# type: cindex
#: lispref/advice.texi:346
#, no-wrap
msgid "advice, activating"
msgstr ""

# type: Plain text
#: lispref/advice.texi:356
msgid ""
"By default, advice does not take effect when you define it---only when you "
"@dfn{activate} advice for the function that was advised.  However, the "
"advice will be activated automatically if you define or redefine the "
"function later.  You can request the activation of advice for a function "
"when you define the advice, by specifying the @code{activate} flag in the "
"@code{defadvice}.  But normally you activate the advice for a function by "
"calling the function @code{ad-activate} or one of the other activation "
"commands listed below."
msgstr ""

# type: Plain text
#: lispref/advice.texi:362
msgid ""
"Separating the activation of advice from the act of defining it permits you "
"to add several pieces of advice to one function efficiently, without "
"redefining the function over and over as each advice is added.  More "
"importantly, it permits defining advice for a function before that function "
"is actually defined."
msgstr ""

# type: Plain text
#: lispref/advice.texi:369
msgid ""
"When a function's advice is first activated, the function's original "
"definition is saved, and all enabled pieces of advice for that function are "
"combined with the original definition to make a new definition.  (Pieces of "
"advice that are currently disabled are not used; see @ref{Enabling "
"Advice}.)  This definition is installed, and optionally byte-compiled as "
"well, depending on conditions described below."
msgstr ""

# type: Plain text
#: lispref/advice.texi:375
msgid ""
"In all of the commands to activate advice, if @var{compile} is @code{t} (or "
"anything but @code{nil} or a negative number), the command also compiles the "
"combined definition which implements the advice.  If it is @code{nil} or a "
"negative number, what happens depends on @code{ad-default-compilation-"
"action} as described below."
msgstr ""

# type: deffn
#: lispref/advice.texi:376
#, no-wrap
msgid "Command ad-activate function &optional compile"
msgstr ""

# type: deffn
#: lispref/advice.texi:378
msgid "This command activates all the advice defined for @var{function}."
msgstr ""

# type: Plain text
#: lispref/advice.texi:383
msgid ""
"Activating advice does nothing if @var{function}'s advice is already "
"active.  But if there is new advice, added since the previous time you "
"activated advice for @var{function}, it activates the new advice."
msgstr ""

# type: deffn
#: lispref/advice.texi:384
#, no-wrap
msgid "Command ad-deactivate function"
msgstr ""

# type: deffn
#: lispref/advice.texi:386
msgid "This command deactivates the advice for @var{function}."
msgstr ""

# type: cindex
#: lispref/advice.texi:386
#, no-wrap
msgid "deactivating advice"
msgstr ""

# type: deffn
#: lispref/advice.texi:390
#, no-wrap
msgid "Command ad-update function &optional compile"
msgstr ""

# type: deffn
#: lispref/advice.texi:394
msgid ""
"This command activates the advice for @var{function} if its advice is "
"already activated.  This is useful if you change the advice."
msgstr ""

# type: deffn
#: lispref/advice.texi:396
#, no-wrap
msgid "Command ad-activate-all &optional compile"
msgstr ""

# type: deffn
#: lispref/advice.texi:398
msgid "This command activates the advice for all functions."
msgstr ""

# type: deffn
#: lispref/advice.texi:400
#, no-wrap
msgid "Command ad-deactivate-all"
msgstr ""

# type: deffn
#: lispref/advice.texi:402
msgid "This command deactivates the advice for all functions."
msgstr ""

# type: deffn
#: lispref/advice.texi:404
#, no-wrap
msgid "Command ad-update-all &optional compile"
msgstr ""

# type: deffn
#: lispref/advice.texi:408
msgid ""
"This command activates the advice for all functions whose advice is already "
"activated.  This is useful if you change the advice of some functions."
msgstr ""

# type: deffn
#: lispref/advice.texi:410
#, no-wrap
msgid "Command ad-activate-regexp regexp &optional compile"
msgstr ""

# type: deffn
#: lispref/advice.texi:414
msgid ""
"This command activates all pieces of advice whose names match @var{regexp}.  "
"More precisely, it activates all advice for any function which has at least "
"one piece of advice that matches @var{regexp}."
msgstr ""

# type: deffn
#: lispref/advice.texi:416
#, no-wrap
msgid "Command ad-deactivate-regexp regexp"
msgstr ""

# type: deffn
#: lispref/advice.texi:421
msgid ""
"This command deactivates all pieces of advice whose names match @var"
"{regexp}.  More precisely, it deactivates all advice for any function which "
"has at least one piece of advice that matches @var{regexp}."
msgstr ""

# type: deffn
#: lispref/advice.texi:423
#, no-wrap
msgid "Command ad-update-regexp regexp &optional compile"
msgstr ""

# type: deffn
#: lispref/advice.texi:426
msgid ""
"This command activates pieces of advice whose names match @var{regexp}, but "
"only those for functions whose advice is already activated."
msgstr ""

# type: cindex
#: lispref/advice.texi:426
#, no-wrap
msgid "reactivating advice"
msgstr ""

# type: deffn
#: lispref/advice.texi:432
msgid ""
"Reactivating a function's advice is useful for putting into effect all the "
"changes that have been made in its advice (including enabling and disabling "
"specific pieces of advice; @pxref{Enabling Advice}) since the last time it "
"was activated."
msgstr ""

# type: deffn
#: lispref/advice.texi:434
#, no-wrap
msgid "Command ad-start-advice"
msgstr ""

# type: deffn
#: lispref/advice.texi:437
msgid ""
"Turn on automatic advice activation when a function is defined or "
"redefined.  This is the default mode."
msgstr ""

# type: deffn
#: lispref/advice.texi:439
#, no-wrap
msgid "Command ad-stop-advice"
msgstr ""

# type: deffn
#: lispref/advice.texi:442
msgid ""
"Turn off automatic advice activation when a function is defined or redefined."
msgstr ""

# type: defopt
#: lispref/advice.texi:444
#, no-wrap
msgid "ad-default-compilation-action"
msgstr "ad-default-compilation-action"

# type: defopt
#: lispref/advice.texi:447
msgid ""
"This variable controls whether to compile the combined definition that "
"results from activating advice for a function."
msgstr ""

# type: defopt
#: lispref/advice.texi:450
msgid ""
"A value of @code{always} specifies to compile unconditionally.  A value of "
"@code{never} specifies never compile the advice."
msgstr ""

# type: defopt
#: lispref/advice.texi:455
msgid ""
"A value of @code{maybe} specifies to compile if the byte-compiler is already "
"loaded.  A value of @code{like-original} specifies to compile the advice if "
"the original definition of the advised function is compiled or a built-in "
"function."
msgstr ""

# type: defopt
#: lispref/advice.texi:459
msgid ""
"This variable takes effect only if the @var{compile} argument of @code{ad-"
"activate} (or any of the above functions) did not force compilation."
msgstr ""

# type: Plain text
#: lispref/advice.texi:465
msgid ""
"If the advised definition was constructed during ``preactivation'' (@pxref"
"{Preactivation}), then that definition must already be compiled, because it "
"was constructed during byte-compilation of the file that contained the @code"
"{defadvice} with the @code{preactivate} flag."
msgstr ""

# type: section
#: lispref/advice.texi:467
#, no-wrap
msgid "Enabling and Disabling Advice"
msgstr ""

# type: cindex
#: lispref/advice.texi:468
#, no-wrap
msgid "enabling advice"
msgstr ""

# type: cindex
#: lispref/advice.texi:469
#, no-wrap
msgid "advice, enabling and disabling"
msgstr ""

# type: cindex
#: lispref/advice.texi:470
#, no-wrap
msgid "disabling advice"
msgstr ""

# type: Plain text
#: lispref/advice.texi:477
msgid ""
"Each piece of advice has a flag that says whether it is enabled or not.  By "
"enabling or disabling a piece of advice, you can turn it on and off without "
"having to undefine and redefine it.  For example, here is how to disable a "
"particular piece of advice named @code{my-advice} for the function @code"
"{foo}:"
msgstr ""

# type: example
#: lispref/advice.texi:480
#, no-wrap
msgid "(ad-disable-advice 'foo 'before 'my-advice)\n"
msgstr ""

# type: Plain text
#: lispref/advice.texi:485
msgid ""
"This function by itself only changes the enable flag for a piece of advice.  "
"To make the change take effect in the advised definition, you must activate "
"the advice for @code{foo} again:"
msgstr ""

# type: example
#: lispref/advice.texi:488
#, no-wrap
msgid "(ad-activate 'foo)\n"
msgstr ""

# type: deffn
#: lispref/advice.texi:490
#, no-wrap
msgid "Command ad-disable-advice function class name"
msgstr ""

# type: deffn
#: lispref/advice.texi:493
msgid ""
"This command disables the piece of advice named @var{name} in class @var"
"{class} on @var{function}."
msgstr ""

# type: deffn
#: lispref/advice.texi:495
#, no-wrap
msgid "Command ad-enable-advice function class name"
msgstr ""

# type: deffn
#: lispref/advice.texi:498
msgid ""
"This command enables the piece of advice named @var{name} in class @var"
"{class} on @var{function}."
msgstr ""

# type: Plain text
#: lispref/advice.texi:504
msgid ""
"You can also disable many pieces of advice at once, for various functions, "
"using a regular expression.  As always, the changes take real effect only "
"when you next reactivate advice for the functions in question."
msgstr ""

# type: deffn
#: lispref/advice.texi:505
#, no-wrap
msgid "Command ad-disable-regexp regexp"
msgstr ""

# type: deffn
#: lispref/advice.texi:508
msgid ""
"This command disables all pieces of advice whose names match @var{regexp}, "
"in all classes, on all functions."
msgstr ""

# type: deffn
#: lispref/advice.texi:510
#, no-wrap
msgid "Command ad-enable-regexp regexp"
msgstr ""

# type: deffn
#: lispref/advice.texi:513
msgid ""
"This command enables all pieces of advice whose names match @var{regexp}, in "
"all classes, on all functions."
msgstr ""

# type: cindex
#: lispref/advice.texi:517
#, no-wrap
msgid "preactivating advice"
msgstr ""

# type: cindex
#: lispref/advice.texi:518
#, no-wrap
msgid "advice, preactivating"
msgstr ""

# type: Plain text
#: lispref/advice.texi:524
msgid ""
"Constructing a combined definition to execute advice is moderately "
"expensive.  When a library advises many functions, this can make loading the "
"library slow.  In that case, you can use @dfn{preactivation} to construct "
"suitable combined definitions in advance."
msgstr ""

# type: Plain text
#: lispref/advice.texi:532
msgid ""
"To use preactivation, specify the @code{preactivate} flag when you define "
"the advice with @code{defadvice}.  This @code{defadvice} call creates a "
"combined definition which embodies this piece of advice (whether enabled or "
"not) plus any other currently enabled advice for the same function, and the "
"function's own definition.  If the @code{defadvice} is compiled, that "
"compiles the combined definition also."
msgstr ""

# type: Plain text
#: lispref/advice.texi:539
msgid ""
"When the function's advice is subsequently activated, if the enabled advice "
"for the function matches what was used to make this combined definition, "
"then the existing combined definition is used, thus avoiding the need to "
"construct one.  Thus, preactivation never causes wrong results---but it may "
"fail to do any good, if the enabled advice at the time of activation doesn't "
"match what was used for preactivation."
msgstr ""

# type: Plain text
#: lispref/advice.texi:542
msgid ""
"Here are some symptoms that can indicate that a preactivation did not work "
"properly, because of a mismatch."
msgstr ""

# type: itemize
#: lispref/advice.texi:547
msgid "Activation of the advised function takes longer than usual."
msgstr ""

# type: itemize
#: lispref/advice.texi:550
msgid "The byte-compiler gets loaded while an advised function gets activated."
msgstr ""

# type: itemize
#: lispref/advice.texi:553
msgid ""
"@code{byte-compile} is included in the value of @code{features} even though "
"you did not ever explicitly use the byte-compiler."
msgstr ""

# type: Plain text
#: lispref/advice.texi:558
msgid ""
"Compiled preactivated advice works properly even if the function itself is "
"not defined until later; however, the function needs to be defined when you "
"@emph{compile} the preactivated advice."
msgstr ""

# type: Plain text
#: lispref/advice.texi:567
msgid ""
"There is no elegant way to find out why preactivated advice is not being "
"used.  What you can do is to trace the function @code{ad-cache-id-"
"verification-code} (with the function @code{trace-function-background}) "
"before the advised function's advice is activated.  After activation, check "
"the value returned by @code{ad-cache-id-verification-code} for that "
"function: @code{verified} means that the preactivated advice was used, while "
"other values give some information about why they were considered "
"inappropriate."
msgstr ""

# type: Plain text
#: lispref/advice.texi:573
msgid ""
"@strong{Warning:} There is one known case that can make preactivation fail, "
"in that a preconstructed combined definition is used even though it fails to "
"match the current state of advice.  This can happen when two packages define "
"different pieces of advice with the same name, in the same class, for the "
"same function.  But you should avoid that anyway."
msgstr ""

# type: Plain text
#: lispref/advice.texi:581
msgid ""
"The simplest way to access the arguments of an advised function in the body "
"of a piece of advice is to use the same names that the function definition "
"uses.  To do this, you need to know the names of the argument variables of "
"the original function."
msgstr ""

# type: Plain text
#: lispref/advice.texi:586
msgid ""
"While this simple method is sufficient in many cases, it has a disadvantage: "
"it is not robust, because it hard-codes the argument names into the advice.  "
"If the definition of the original function changes, the advice might break."
msgstr ""

# type: Plain text
#: lispref/advice.texi:593
msgid ""
"Another method is to specify an argument list in the advice itself.  This "
"avoids the need to know the original function definition's argument names, "
"but it has a limitation: all the advice on any particular function must use "
"the same argument list, because the argument list actually used for all the "
"advice comes from the first piece of advice for that function."
msgstr ""

# type: Plain text
#: lispref/advice.texi:601
msgid ""
"A more robust method is to use macros that are translated into the proper "
"access forms at activation time, i.e., when constructing the advised "
"definition.  Access macros access actual arguments by position regardless of "
"how these actual arguments get distributed onto the argument variables of a "
"function.  This is robust because in Emacs Lisp the meaning of an argument "
"is strictly determined by its position in the argument list."
msgstr ""

# type: defmac
#: lispref/advice.texi:602
#, no-wrap
msgid "ad-get-arg position"
msgstr ""

# type: defmac
#: lispref/advice.texi:604
msgid "This returns the actual argument that was supplied at @var{position}."
msgstr ""

# type: defmac
#: lispref/advice.texi:606
#, no-wrap
msgid "ad-get-args position"
msgstr ""

# type: defmac
#: lispref/advice.texi:609
msgid ""
"This returns the list of actual arguments supplied starting at @var"
"{position}."
msgstr ""

# type: defmac
#: lispref/advice.texi:611
#, no-wrap
msgid "ad-set-arg position value"
msgstr ""

# type: defmac
#: lispref/advice.texi:614
msgid ""
"This sets the value of the actual argument at @var{position} to @var{value}"
msgstr ""

# type: defmac
#: lispref/advice.texi:616
#, no-wrap
msgid "ad-set-args position value-list"
msgstr ""

# type: defmac
#: lispref/advice.texi:619
msgid ""
"This sets the list of actual arguments starting at @var{position} to @var"
"{value-list}."
msgstr ""

# type: Plain text
#: lispref/advice.texi:622
msgid "Now an example.  Suppose the function @code{foo} is defined as"
msgstr ""

# type: example
#: lispref/advice.texi:625
#, no-wrap
msgid "(defun foo (x y &optional z &rest r) ...)\n"
msgstr ""

# type: Plain text
#: lispref/advice.texi:629
msgid "and is then called with"
msgstr ""

# type: example
#: lispref/advice.texi:632
#, no-wrap
msgid "(foo 0 1 2 3 4 5 6)\n"
msgstr ""

# type: Plain text
#: lispref/advice.texi:638
msgid ""
"which means that @var{x} is 0, @var{y} is 1, @var{z} is 2 and @var{r} is "
"@code{(3 4 5 6)} within the body of @code{foo}.  Here is what @code{ad-get-"
"arg} and @code{ad-get-args} return in this case:"
msgstr ""

# type: example
#: lispref/advice.texi:646
#, no-wrap
msgid ""
"(ad-get-arg 0) @result{} 0\n"
"(ad-get-arg 1) @result{} 1\n"
"(ad-get-arg 2) @result{} 2\n"
"(ad-get-arg 3) @result{} 3\n"
"(ad-get-args 2) @result{} (2 3 4 5 6)\n"
"(ad-get-args 4) @result{} (4 5 6)\n"
msgstr ""

# type: Plain text
#: lispref/advice.texi:649
msgid "Setting arguments also makes sense in this example:"
msgstr ""

# type: example
#: lispref/advice.texi:652
#, no-wrap
msgid "(ad-set-arg 5 \"five\")\n"
msgstr ""

# type: Plain text
#: lispref/advice.texi:658
msgid ""
"has the effect of changing the sixth argument to @code{\"five\"}.  If this "
"happens in advice executed before the body of @code{foo} is run, then @var"
"{r} will be @code{(3 4 \"five\" 6)} within that body."
msgstr ""

# type: Plain text
#: lispref/advice.texi:660
msgid "Here is an example of setting a tail of the argument list:"
msgstr ""

# type: example
#: lispref/advice.texi:663
#, no-wrap
msgid "(ad-set-args 0 '(5 4 3 2 1 0))\n"
msgstr ""

# type: Plain text
#: lispref/advice.texi:670
msgid ""
"If this happens in advice executed before the body of @code{foo} is run, "
"then within that body, @var{x} will be 5, @var{y} will be 4, @var{z} will be "
"3, and @var{r} will be @code{(2 1 0)} inside the body of @code{foo}."
msgstr ""

# type: Plain text
#: lispref/advice.texi:673
msgid ""
"These argument constructs are not really implemented as Lisp macros.  "
"Instead they are implemented specially by the advice mechanism."
msgstr ""

# type: cindex
#: lispref/advice.texi:676
#, no-wrap
msgid "advising primitives"
msgstr ""

# type: Plain text
#: lispref/advice.texi:684
msgid ""
"Advising a primitive function (also called a ``subr'') is risky.  Some "
"primitive functions are used by the advice mechanism; advising them could "
"cause an infinite recursion.  Also, many primitive functions are called "
"directly from C code.  Calls to the primitive from Lisp code will take note "
"of the advice, but calls from C code will ignore the advice."
msgstr ""

# type: Plain text
#: lispref/advice.texi:692
msgid ""
"When the advice facility constructs the combined definition, it needs to "
"know the argument list of the original function.  This is not always "
"possible for primitive functions.  When advice cannot determine the argument "
"list, it uses @code{(&rest ad-subr-args)}, which always works but is "
"inefficient because it constructs a list of the argument values.  You can "
"use @code{ad-define-subr-args} to declare the proper argument names for a "
"primitive function:"
msgstr ""

# type: defun
#: lispref/advice.texi:693
#, no-wrap
msgid "ad-define-subr-args function arglist"
msgstr ""

# type: defun
#: lispref/advice.texi:696
msgid ""
"This function specifies that @var{arglist} should be used as the argument "
"list for function @var{function}."
msgstr ""

# type: defun
#: lispref/advice.texi:699 lispref/control.texi:264 lispref/customize.texi:909
#: lispref/display.texi:2130 lispref/loading.texi:463 lispref/modes.texi:632
#: lispref/modes.texi:2634 lispref/modes.texi:2654 lispref/objects.texi:916
#: lispref/searching.texi:1018
msgid "For example,"
msgstr ""

# type: example
#: lispref/advice.texi:702
#, no-wrap
msgid "(ad-define-subr-args 'fset '(sym newdef))\n"
msgstr ""

# type: Plain text
#: lispref/advice.texi:706
msgid "specifies the argument list for the function @code{fset}."
msgstr ""

# type: section
#: lispref/advice.texi:708
#, no-wrap
msgid "The Combined Definition"
msgstr ""

# type: Plain text
#: lispref/advice.texi:715
msgid ""
"Suppose that a function has @var{n} pieces of before-advice (numbered from 0 "
"through @var{n}@minus{}1), @var{m} pieces of around-advice and @var{k} "
"pieces of after-advice.  Assuming no piece of advice is protected, the "
"combined definition produced to implement the advice for a function looks "
"like this:"
msgstr ""

# type: example
#: lispref/advice.texi:737
#, no-wrap
msgid ""
"(lambda @var{arglist}\n"
"  @r{[} @r{[}@var{advised-docstring}@r{]} @r{[}(interactive ...)@r{]} @r{]}\n"
"  (let (ad-return-value)\n"
"    @r{before-0-body-form}...\n"
"         ....\n"
"    @r{before-@var{n}@minus{}1-body-form}...\n"
"    @r{around-0-body-form}...\n"
"       @r{around-1-body-form}...\n"
"             ....\n"
"          @r{around-@var{m}@minus{}1-body-form}...\n"
"             (setq ad-return-value\n"
"                   @r{apply original definition to @var{arglist}})\n"
"          @r{end-of-around-@var{m}@minus{}1-body-form}...\n"
"             ....\n"
"       @r{end-of-around-1-body-form}...\n"
"    @r{end-of-around-0-body-form}...\n"
"    @r{after-0-body-form}...\n"
"          ....\n"
"    @r{after-@var{k}@minus{}1-body-form}...\n"
"    ad-return-value))\n"
msgstr ""

# type: Plain text
#: lispref/advice.texi:741
msgid ""
"Macros are redefined as macros, which means adding @code{macro} to the "
"beginning of the combined definition."
msgstr ""

# type: Plain text
#: lispref/advice.texi:747
msgid ""
"The interactive form is present if the original function or some piece of "
"advice specifies one.  When an interactive primitive function is advised, "
"advice uses a special method: it calls the primitive with @code{call-"
"interactively} so that it will read its own arguments.  In this case, the "
"advice cannot access the arguments."
msgstr ""

# type: Plain text
#: lispref/advice.texi:751
msgid ""
"The body forms of the various advice in each class are assembled according "
"to their specified order.  The forms of around-advice @var{l} are included "
"in one of the forms of around-advice @var{l} @minus{} 1."
msgstr ""

# type: Plain text
#: lispref/advice.texi:753
msgid "The innermost part of the around advice onion is"
msgstr ""

# type: display
#: lispref/advice.texi:756
#, no-wrap
msgid "apply original definition to @var{arglist}\n"
msgstr ""

# type: Plain text
#: lispref/advice.texi:763
msgid ""
"whose form depends on the type of the original function.  The variable @code"
"{ad-return-value} is set to whatever this returns.  The variable is visible "
"to all pieces of advice, which can access and modify it before it is "
"actually returned from the advised function."
msgstr ""

# type: Plain text
#: lispref/advice.texi:770
msgid ""
"The semantic structure of advised functions that contain protected pieces of "
"advice is the same.  The only difference is that @code{unwind-protect} forms "
"ensure that the protected advice gets executed even if some previous piece "
"of advice had an error or a non-local exit.  If any around-advice is "
"protected, then the whole around-advice onion is protected as a result."
msgstr ""

# type: ignore
#: lispref/advice.texi:773
#, no-wrap
msgid "   arch-tag: 80c135c2-f1c3-4f8d-aa85-f8d8770d307f\n"
msgstr ""

# type: node
#: lispref/anti.texi:9 lispref/doclicense.texi:2 lispref/elisp.texi:174
#: lispref/os.texi:7
#, no-wrap
msgid "Antinews"
msgstr ""

# type: node
#: lispref/anti.texi:9 lispref/doclicense.texi:2 lispref/doclicense.texi:4
#: lispref/elisp.texi:174 lispref/gpl.texi:4
#, no-wrap
msgid "GNU Free Documentation License"
msgstr ""

# type: menu
#: lispref/anti.texi:9 lispref/display.texi:7 lispref/elisp.texi:160
#: lispref/os.texi:7 lispref/vol1.texi:261 lispref/vol2.texi:262
#, no-wrap
msgid "System Interface"
msgstr ""

# type: appendix
#: lispref/anti.texi:10
#, no-wrap
msgid "Emacs 21 Antinews"
msgstr ""

# type: Plain text
#: lispref/anti.texi:16
msgid ""
"For those users who live backwards in time, here is information about "
"downgrading to Emacs version 21.4.  We hope you will enjoy the greater "
"simplicity that results from the absence of many Emacs @value{EMACSVER} "
"features."
msgstr ""

# type: section
#: lispref/anti.texi:17
#, no-wrap
msgid "Old Lisp Features in Emacs 21"
msgstr ""

# type: itemize
#: lispref/anti.texi:24
msgid ""
"Many unnecessary features of redisplay have been eliminated.  (The earlier "
"major release, Emacs 20, will have a completely rewritten redisplay engine, "
"which will be even simpler.)"
msgstr ""

# type: itemize
#: lispref/anti.texi:31
msgid ""
"The function @code{redisplay} has been removed.  To update the display "
"without delay, call @code{(sit-for 0)}.  Since it is generally considered "
"wasteful to update the display if there are any pending input events, no "
"replacement for @code{(redisplay t)} is provided."
msgstr ""

# type: itemize
#: lispref/anti.texi:37
msgid ""
"The function @code{force-window-update} has been removed.  It shouldn't be "
"needed, since changes in window contents are detected automatically.  In "
"case they aren't, call @code{redraw-display} to redraw everything."
msgstr ""

# type: itemize
#: lispref/anti.texi:44
msgid ""
"Point no longer moves out from underneath invisible text at the end of each "
"command.  This allows the user to detect invisible text by moving the cursor "
"around---if the cursor gets stuck, there is something invisible in the way.  "
"If you really want cursor motion to ignore the text, try marking it as "
"intangible."
msgstr ""

# type: itemize
#: lispref/anti.texi:48
msgid ""
"Support for image maps and image slices has been removed.  Emacs was always "
"meant for editing text, anyway."
msgstr ""

# type: itemize
#: lispref/anti.texi:53
msgid ""
"The mode line now accepts all text properties, as well as @code{:propertize} "
"and @code{:eval} forms, regardless of the @code{risky-local-variable} "
"property."
msgstr ""

# type: itemize
#: lispref/anti.texi:59
msgid ""
"The @code{line-height} and @code{line-spacing} properties no longer have any "
"meaning for newline characters.  Such properties wouldn't make sense, since "
"newlines are not really characters; they just tell you where to break a line."
msgstr ""

# type: itemize
#: lispref/anti.texi:65
msgid ""
"Considerable simplifications have been made to the display specification "
"@code{(space . @var{props})}, which is used for displaying a space of "
"specified width and height.  Pixel-based specifications and Lisp expressions "
"are no longer accepted."
msgstr ""

# type: itemize
#: lispref/anti.texi:75
msgid ""
"Many features associated with the fringe areas have been removed, to "
"encourage people to concentrate on the main editing area (the fringe will be "
"completely removed in Emacs 20.)  Arbitrary bitmaps can no longer be "
"displayed in the fringe; an overlay arrow can still be displayed, but there "
"can only be one overlay arrow at a time (any more would be confusing.)  The "
"fringe widths cannot be adjusted, and individual windows cannot have their "
"own fringe settings.  A mouse click on the fringe no longer generates a "
"special event."
msgstr ""

# type: itemize
#: lispref/anti.texi:78
msgid "Individual windows cannot have their own scroll-bar settings."
msgstr ""

# type: itemize
#: lispref/anti.texi:82
msgid ""
"You can no longer use @samp{default} in a @code{defface} to specify defaults "
"for subsequent faces."
msgstr ""

# type: itemize
#: lispref/anti.texi:87
msgid ""
"The function @code{display-supports-face-attributes-p} has been removed.  In "
"@code{defface} specifications, the @code{supports} predicate is no longer "
"supported."
msgstr ""

# type: itemize
#: lispref/anti.texi:91
msgid ""
"The functions @code{merge-face-attribute} and @code{face-attribute-relative-"
"p} have been removed."
msgstr ""

# type: itemize
#: lispref/anti.texi:96
msgid ""
"The priority of faces in a list supplied by the @code{:inherit} face "
"attribute has been reversed.  We like to make changes like this once in a "
"while, to keep Emacs Lisp programmers on their toes."
msgstr ""

# type: itemize
#: lispref/anti.texi:101
msgid ""
"The @code{min-colors} face attribute, used for tailoring faces to limited-"
"color displays, does not exist.  If in doubt, use colors like ``white'' and "
"``black,'' which ought to be defined everywhere."
msgstr ""

# type: itemize
#: lispref/anti.texi:105
msgid ""
"The @code{tty-color-mode} frame parameter does not exist.  You should just "
"trust the terminal capabilities database."
msgstr ""

# type: itemize
#: lispref/anti.texi:109
msgid "Several simplifications have been made to mouse support:"
msgstr ""

# type: itemize
#: lispref/anti.texi:116
msgid ""
"Clicking @kbd{mouse-1} won't follow links, as that is alien to the spirit of "
"Emacs.  Therefore, the @code{follow-link} property doesn't has any special "
"meaning, and the function @code{mouse-on-link-p} has been removed."
msgstr ""

# type: itemize
#: lispref/anti.texi:122
msgid ""
"The variable @code{void-text-area-pointer} has been removed, so the mouse "
"pointer shape remains unchanged when moving between valid text areas and "
"void text areas.  The @code{pointer} image and text properties are no longer "
"supported."
msgstr ""

# type: itemize
#: lispref/anti.texi:127
msgid ""
"Mouse events will no longer specify the timestamp, the object clicked, "
"equivalent buffer positions (for marginal or fringe areas), glyph "
"coordinates, or relative pixel coordinates."
msgstr ""

# type: itemize
#: lispref/anti.texi:132
msgid ""
"Simplifications have also been made to the way Emacs handles keymaps and key "
"sequences:"
msgstr ""

# type: itemize
#: lispref/anti.texi:138
msgid ""
"The @code{kbd} macro is now obsolete and is no longer documented.  It isn't "
"that difficult to write key sequences using the string and vector "
"representations, and we want to encourage users to learn."
msgstr ""

# type: itemize
#: lispref/anti.texi:143
msgid ""
"Emacs no longer supports key remapping.  You can do pretty much the same "
"thing with @code{substitute-key-definition}, or by advising the relevant "
"command."
msgstr ""

# type: itemize
#: lispref/anti.texi:148
msgid ""
"The @code{keymap} text and overlay property is now overridden by minor mode "
"keymaps, and will not work at the ends of text properties and overlays."
msgstr ""

# type: itemize
#: lispref/anti.texi:152
msgid ""
"The functions @code{map-keymap}, @code{keymap-prompt}, and @code{current-"
"active-maps} have been removed."
msgstr ""

# type: itemize
#: lispref/anti.texi:162
msgid ""
"Process support has been pared down to a functional minimum.  The functions "
"@code{call-process-shell-command} and @code{process-file} have been "
"deleted.  Processes no longer maintain property lists, and they won't ask "
"any questions when the user tries to exit Emacs (which would simply be "
"rude.)  The function @code{signal-process} won't accept a process object, "
"only the process id; determining the process id from a process object is "
"left as an exercise to the programmer."
msgstr ""

# type: itemize
#: lispref/anti.texi:170
msgid ""
"Networking has also been simplified: @code{make-network-process} and its "
"various associated function have all been replaced with a single easy-to-use "
"function, @code{open-network-stream}, which can't use UDP, can't act as a "
"server, and can't set up non-blocking connections.  Also, deleting a network "
"process with @code{delete-process} won't call the sentinel."
msgstr ""

# type: itemize
#: lispref/anti.texi:178
msgid ""
"Many programming shortcuts have been deleted, to provide you with the "
"enjoyment of ``rolling your own.'' The macros @code{while-no-input}, @code"
"{with-local-quit}, and @code{with-selected-window}, along with @code{dynamic-"
"completion-table} and @code{lazy-completion-table} no longer exist.  Also, "
"there are no built-in progress reporters; with Emacs, you can take progress "
"for granted."
msgstr ""

# type: itemize
#: lispref/anti.texi:182
msgid ""
"Variable aliases are no longer supported.  Aliases are for functions, not "
"for variables."
msgstr ""

# type: itemize
#: lispref/anti.texi:188
msgid ""
"The variables @code{most-positive-fixnum} and @code{most-negative-fixnum} do "
"not exist.  On 32 bit machines, the most positive integer is probably "
"134217727, and the most negative integer is probably -134217728."
msgstr ""

# type: itemize
#: lispref/anti.texi:193
msgid ""
"The functions @code{eql} and @code{macroexpand-all} are no longer "
"available.  However, you can find similar functions in the @code{cl} package."
msgstr ""

# type: itemize
#: lispref/anti.texi:198
msgid ""
"The list returned by @code{split-string} won't include null substrings for "
"separators at the beginning or end of a string.  If you want to check for "
"such separators, do it separately."
msgstr ""

# type: itemize
#: lispref/anti.texi:203
msgid ""
"The function @code{assoc-string} has been removed.  Use @code{assoc-ignore-"
"case} or @code{assoc-ignore-representation} (which are no longer obsolete.)"
msgstr ""

# type: itemize
#: lispref/anti.texi:207
msgid ""
"The escape sequence @samp{\\s} is always interpreted as a super modifier, "
"never a space."
msgstr ""

# type: itemize
#: lispref/anti.texi:213
msgid ""
"The variable @code{buffer-save-without-query} has been removed, to prevent "
"Emacs from sneakily saving buffers.  Also, the hook @code{before-save-hook} "
"has been removed, so if you want something to be done before saving, advise "
"or redefine @code{basic-save-buffer}."
msgstr ""

# type: itemize
#: lispref/anti.texi:217
msgid ""
"The variable @code{buffer-auto-save-file-format} has been renamed to @code"
"{auto-save-file-format}, and is no longer a permanent local."
msgstr ""

# type: itemize
#: lispref/anti.texi:222
msgid ""
"The function @code{visited-file-modtime} now returns a cons, instead of a "
"list of two integers.  The primitive @code{set-file-times} has been "
"eliminated."
msgstr ""

# type: itemize
#: lispref/anti.texi:225
msgid "The function @code{file-remote-p} is no longer available."
msgstr ""

# type: itemize
#: lispref/anti.texi:230
msgid ""
"When determining the filename extension, a leading dot in a filename is no "
"longer ignored.  Thus, @file{.emacs} is considered to have extension @file"
"{emacs}, rather than being extensionless."
msgstr ""

# type: itemize
#: lispref/anti.texi:236
msgid ""
"Emacs looks for special file handlers in a more efficient manner: it will "
"choose the first matching handler in @code{file-name-handler-alist}, rather "
"than trying to figure out which provides the closest match."
msgstr ""

# type: itemize
#: lispref/anti.texi:242
msgid ""
"The @code{predicate} argument for @code{read-file-name} has been removed, "
"and so have the variables @code{read-file-name-function} and @code{read-file-"
"name-completion-ignore-case}.  The function @code{read-directory-name} has "
"also been removed."
msgstr ""

# type: itemize
#: lispref/anti.texi:248
msgid ""
"The functions @code{all-completions} and @code{try-completion} will no "
"longer accept lists of strings or hash tables (it will still accept alists, "
"obarrays, and functions.)  In addition, the function @code{test-completion} "
"is no longer available."
msgstr ""

# type: itemize
#: lispref/anti.texi:252
msgid ""
"The @samp{G} interactive code character is no longer supported.  Use @samp"
"{F} instead."
msgstr ""

# type: itemize
#: lispref/anti.texi:257
msgid ""
"Arbitrary Lisp functions can no longer be recorded into @code{buffer-undo-"
"list}.  As a consequence, @code{yank-undo-function} is obsolete, and has "
"been removed."
msgstr ""

# type: itemize
#: lispref/anti.texi:263
msgid ""
"Emacs will never complain about commands that accumulate too much undo "
"information, so you no longer have to worry about binding @code{buffer-undo-"
"list} to @code{t} for such commands (though you may want to do that anyway, "
"to avoid taking up unnecessary memory space.)"
msgstr ""

# type: itemize
#: lispref/anti.texi:266
msgid "Atomic change groups are no longer supported."
msgstr ""

# type: itemize
#: lispref/anti.texi:270
msgid ""
"The list returned by @code{(match-data t)} no longer records the buffer as a "
"final element."
msgstr ""

# type: itemize
#: lispref/anti.texi:274
msgid ""
"The function @code{looking-back} has been removed, so we no longer have the "
"benefit of hindsight."
msgstr ""

# type: itemize
#: lispref/anti.texi:278
msgid ""
"The variable @code{search-spaces-regexp} does not exist.  Spaces always "
"stand for themselves in regular expression searches."
msgstr ""

# type: itemize
#: lispref/anti.texi:283
msgid ""
"The functions @code{skip-chars-forward} and @code{skip-chars-backward} no "
"longer accepts character classes such as @samp{[:alpha:]}.  All characters "
"are created equal."
msgstr ""

# type: itemize
#: lispref/anti.texi:288
msgid ""
"The @code{yank-handler} text property no longer has any meaning.  Also, @code"
"{yank-excluded-properties}, @code{insert-for-yank}, and @code{insert-buffer-"
"substring-as-yank} have all been removed."
msgstr ""

# type: itemize
#: lispref/anti.texi:292
msgid ""
"The variable @code{char-property-alias-alist} has been deleted.  Aliases are "
"for functions, not for properties."
msgstr ""

# type: itemize
#: lispref/anti.texi:298
msgid ""
"The function @code{get-char-property-and-overlay} has been deleted.  If you "
"want the properties at a point, find the text properties at the point; then, "
"find the overlays at the point, and find the properties on those overlays."
msgstr ""

# type: itemize
#: lispref/anti.texi:304
msgid ""
"Font Lock mode only manages @code{face} properties; you can't use font-lock "
"keywords to specify arbitrary text properties for it to manage.  After all, "
"it is called Font Lock mode, not Arbitrary Properties Lock mode."
msgstr ""

# type: itemize
#: lispref/anti.texi:307
msgid "The arguments to @code{remove-overlays} are no longer optional."
msgstr ""

# type: itemize
#: lispref/anti.texi:311
msgid ""
"In @code{replace-match}, the replacement text now inherits properties from "
"the surrounding text."
msgstr ""

# type: itemize
#: lispref/anti.texi:316
msgid ""
"The variable @code{mode-line-format} no longer supports the @code{:"
"propertize}, @code{%i}, and @code{%I} constructs.  The function @code{format-"
"mode-line} has been removed."
msgstr ""

# type: itemize
#: lispref/anti.texi:321
msgid ""
"The functions @code{window-inside-edges} and @code{window-body-height} have "
"been removed.  You should do the relevant calculations yourself, starting "
"with @code{window-width} and @code{window-height}."
msgstr ""

# type: itemize
#: lispref/anti.texi:332
msgid ""
"The functions @code{window-pixel-edges} and @code{window-inside-pixel-edges} "
"have been removed.  We prefer to think in terms of lines and columns, not "
"pixel coordinates.  (Sometime in the distant past, we will do away with "
"graphical terminals entirely, in favor of text terminals.)  For similar "
"reasons, the functions @code{posn-at-point}, @code{posn-at-x-y}, and @code"
"{window-line-height} have been removed, and @code{pos-visible-in-window-p} "
"no longer worries about partially visible rows."
msgstr ""

# type: itemize
#: lispref/anti.texi:336
msgid ""
"The macro @code{save-selected-window} only saves the selected window of the "
"selected frame, so don't try selecting windows in other frames."
msgstr ""

# type: itemize
#: lispref/anti.texi:339
msgid "The function @code{minibufferp} is no longer available."
msgstr ""

# type: itemize
#: lispref/anti.texi:343
msgid ""
"The function @code{modify-all-frames-parameters} has been removed (we always "
"suspected the name was ungrammatical, anyway.)"
msgstr ""

# type: itemize
#: lispref/anti.texi:346
msgid "The @code{line-spacing} variable no longer accepts float values."
msgstr ""

# type: itemize
#: lispref/anti.texi:352
msgid ""
"The function @code{tool-bar-local-item-from-menu} has been deleted.  If you "
"need to make an entry in the tool bar, you can still use @code{tool-bar-add-"
"item-from-menu}, but that modifies the binding in the source keymap instead "
"of copying it into the local keymap."
msgstr ""

# type: itemize
#: lispref/anti.texi:358
msgid ""
"When determining the major mode, the file name takes precedence over the "
"interpreter magic line.  The variable @code{magic-mode-alist}, which "
"associates certain buffer beginnings with major modes, has been eliminated."
msgstr ""

# type: itemize
#: lispref/anti.texi:362
msgid ""
"The hook @code{after-change-major-mode-hook} is not defined, and neither are "
"@code{run-mode-hooks} and @code{delay-mode-hooks}."
msgstr ""

# type: itemize
#: lispref/anti.texi:365
msgid "The variable @code{minor-mode-list} has been removed."
msgstr ""

# type: itemize
#: lispref/anti.texi:369
msgid ""
"@code{define-derived-mode} will copy abbrevs from the parent mode's abbrev "
"table, instead of creating a new, empty abbrev table."
msgstr ""

# type: itemize
#: lispref/anti.texi:373
msgid ""
"There are no ``system'' abbrevs.  When the user saves into the abbrevs file, "
"all abbrevs are saved."
msgstr ""

# type: itemize
#: lispref/anti.texi:376
msgid "The Warnings facility has been removed.  Just use @code{error}."
msgstr ""

# type: itemize
#: lispref/anti.texi:385
msgid ""
"Several hook variables have been renamed to flout the Emacs naming "
"conventions.  We feel that consistency is boring, and having non-standard "
"hook names encourages users to check the documentation before using a hook.  "
"For instance, the normal hook @code{find-file-hook} has been renamed to @code"
"{find-file-hooks}, and the abnormal hook @code{delete-frame-functions} has "
"been renamed to @code{delete-frame-hook}."
msgstr ""

# type: itemize
#: lispref/anti.texi:389
msgid ""
"The function @code{symbol-file} does not exist.  If you want to know which "
"file defined a function or variable, try grepping for it."
msgstr ""

# type: itemize
#: lispref/anti.texi:394
msgid ""
"The variable @code{load-history} records function definitions just like "
"variable definitions, instead of indicating which functions were previously "
"autoloaded."
msgstr ""

# type: itemize
#: lispref/anti.texi:400
msgid ""
"There is a new variable, @code{recursive-load-depth-limit}, which specifies "
"how many times files can recursively load themselves; it is 50 by default, "
"and @code{nil} means infinity.  Previously, Emacs signaled an error after "
"just 3 recursive loads, which was boring."
msgstr ""

# type: itemize
#: lispref/anti.texi:406
msgid ""
"Byte-compiler warnings and error messages will leave out the line and "
"character positions, in order to exercise your debugging skills.  Also, "
"there is no @code{with-no-warnings} macro---instead of suppressing compiler "
"warnings, fix your code to avoid them!"
msgstr ""

# type: itemize
#: lispref/anti.texi:409
msgid "The function @code{unsafep} has been removed."
msgstr ""

# type: itemize
#: lispref/anti.texi:417
msgid ""
"File local variables can now specify a string with text properties.  Since "
"arbitrary Lisp expressions can be embedded in text properties, this can "
"provide you with a great deal of flexibility and power.  On the other hand, "
"@code{safe-local-eval-forms} and the @code{safe-local-eval-function} "
"function property have no special meaning."
msgstr ""

# type: itemize
#: lispref/anti.texi:421
msgid ""
"You can no longer use @code{char-displayable-p} to test if Emacs can display "
"a certain character."
msgstr ""

# type: itemize
#: lispref/anti.texi:424
msgid "The function @code{string-to-multibyte} is no longer available."
msgstr ""

# type: itemize
#: lispref/anti.texi:430
msgid ""
"The @code{translation-table-for-input} translation table has been removed.  "
"Also, translation hash tables are no longer available, so we don't need the "
"functions @code{lookup-character} and @code{lookup-integer}."
msgstr ""

# type: itemize
#: lispref/anti.texi:434
msgid ""
"The @code{table} argument to @code{translate-region} can no longer be a char-"
"table; it has to be a string."
msgstr ""

# type: itemize
#: lispref/anti.texi:440
msgid ""
"The variable @code{auto-coding-functions} and the two functions @code{merge-"
"coding-systems} and @code{decode-coding-inserted-region} have been deleted.  "
"The coding system property @code{mime-text-unsuitable} no longer has any "
"special meaning."
msgstr ""

# type: itemize
#: lispref/anti.texi:445
msgid ""
"If pure storage overflows while dumping, Emacs won't tell you how much "
"additional pure storage it needs.  Try adding in increments of 20000, until "
"you have enough."
msgstr ""

# type: itemize
#: lispref/anti.texi:449
msgid ""
"The variables @code{gc-elapsed}, @code{gcs-done}, and @code{post-gc-hook} "
"have been garbage-collected."
msgstr ""

# type: ignore
#: lispref/anti.texi:453
#, no-wrap
msgid "   arch-tag: 1d0ef137-2bad-430e-ae8e-d820d569b5a6\n"
msgstr ""

# type: settitle
#: lispref/back.texi:9 lispref/book-spine.texinfo:11
#: lispref/elisp-covers.texi:9 lispref/elisp.texi:4 lispref/elisp.texi:71
#: lispref/front-cover-1.texi:4
#, no-wrap
msgid "GNU Emacs Lisp Reference Manual"
msgstr ""

# type: titlepage
#: lispref/back.texi:12 lispref/book-spine.texinfo:9
#: lispref/front-cover-1.texi:10 lispref/front-cover-1.texi:31
msgid "."
msgstr "."

# type: titlefont{#1}
#: lispref/back.texi:13 lispref/vol1.texi:150 lispref/vol2.texi:151
#, no-wrap
msgid "GNU Emacs Lisp"
msgstr ""

# type: Plain text
#: lispref/back.texi:23 lispref/intro.texi:18
msgid ""
"Most of the GNU Emacs text editor is written in the programming language "
"called Emacs Lisp.  You can write new code in Emacs Lisp and install it as "
"an extension to the editor.  However, Emacs Lisp is more than a mere "
"``extension language''; it is a full computer programming language in its "
"own right.  You can use it as you would any other programming language."
msgstr ""
"La majeure partie de l'éditeur de texte GNU Emacs est écrite dans\n"
"le langage de programmation appelé Emacs Lisp. Vous pouvez écrire le\n"
"nouveau code en Emacs Lisp et l'installer comme extension de l'éditeur.\n"
"Cependant, Emacs Lisp est plus qu'un simple ``langage d'extension'' ;\n"
"c'est un langage de programmation complet et autonome d'ordinateur.\n"
"Vous pouvez l'employer comme n'importe quel autre langage de programmation."

# type: Plain text
#: lispref/back.texi:30 lispref/intro.texi:25
msgid ""
"Because Emacs Lisp is designed for use in an editor, it has special features "
"for scanning and parsing text as well as features for handling files, "
"buffers, displays, subprocesses, and so on.  Emacs Lisp is closely "
"integrated with the editing facilities; thus, editing commands are functions "
"that can also conveniently be called from Lisp programs, and parameters for "
"customization are ordinary Lisp variables."
msgstr ""
"Puisque Emacs Lisp est conçu pour l'utilisation dans un éditeur, il a\n"
"des usages spéciaux pour le balayage et l'analyse de texte aussi bien\n"
"que des dispositifs pour manipuler des fichiers, tampons, affichages,\n"
"sous-processus, et ainsi de suite. L'Emacs Lisp est intégré avec\n"
"beaucoup des facilités d'édition ; ainsi, les commandes d'édition sont\n"
"des fonctions qui peuvent commodément appeler également des programmes\n"
"de Lisp, et les paramètres pour la personnalisation sont des variables\n"
"ordinaires de Lisp."

# type: quotation
#: lispref/back.texi:35
msgid ""
"This manual describes Emacs Lisp.  Generally speaking, the earlier chapters "
"describe features of Emacs Lisp that have counterparts in many programming "
"languages, and later chapters describe features that are peculiar to Emacs "
"Lisp or relate specifically to editing."
msgstr ""

# type: Plain text
#: lispref/back.texi:38
msgid "@hfil"
msgstr ""

# type: ignore
#: lispref/back.texi:42
#, no-wrap
msgid "   arch-tag: ac7694c8-1f02-4b42-9531-33ba13b179e1\n"
msgstr "   arch-tag: ac7694c8-1f02-4b42-9531-33ba13b179e1\n"

# type: menu
#: lispref/backups.texi:7 lispref/backups.texi:8 lispref/buffers.texi:7
#: lispref/elisp.texi:149 lispref/files.texi:7 lispref/vol1.texi:250
#: lispref/vol1.texi:688 lispref/vol2.texi:251 lispref/vol2.texi:689
#, no-wrap
msgid "Backups and Auto-Saving"
msgstr ""

# type: node
#: lispref/backups.texi:7 lispref/buffers.texi:7 lispref/buffers.texi:8
#: lispref/elisp.texi:149 lispref/vol1.texi:250 lispref/vol1.texi:705
#: lispref/vol2.texi:251 lispref/vol2.texi:706 lispref/windows.texi:7
#, no-wrap
msgid "Buffers"
msgstr ""

# type: menu
#: lispref/backups.texi:7 lispref/elisp.texi:149 lispref/files.texi:7
#: lispref/files.texi:9 lispref/help.texi:7 lispref/vol1.texi:250
#: lispref/vol1.texi:653 lispref/vol2.texi:251 lispref/vol2.texi:654
#, no-wrap
msgid "Files"
msgstr ""

# type: cindex
#: lispref/backups.texi:9
#, no-wrap
msgid "backups and auto-saving"
msgstr ""

# type: Plain text
#: lispref/backups.texi:16
msgid ""
"Backup files and auto-save files are two methods by which Emacs tries to "
"protect the user from the consequences of crashes or of the user's own "
"errors.  Auto-saving preserves the text from earlier in the current editing "
"session; backup files preserve file contents prior to the current session."
msgstr ""

# type: menu
#: lispref/backups.texi:21 lispref/backups.texi:23 lispref/backups.texi:24
#: lispref/vol1.texi:695 lispref/vol1.texi:697 lispref/vol2.texi:696
#: lispref/vol2.texi:698
#, no-wrap
msgid "Backup Files"
msgstr ""

# type: menu
#: lispref/backups.texi:21
msgid "How backup files are made; how their names are chosen."
msgstr ""

# type: menu
#: lispref/backups.texi:21 lispref/backups.texi:419 lispref/backups.texi:420
#: lispref/vol1.texi:695 lispref/vol2.texi:696
#, no-wrap
msgid "Auto-Saving"
msgstr ""

# type: menu
#: lispref/backups.texi:21
msgid "How auto-save files are made; how their names are chosen."
msgstr ""

# type: menu
#: lispref/backups.texi:21 lispref/backups.texi:663 lispref/backups.texi:664
#: lispref/vol1.texi:695 lispref/vol2.texi:696
#, no-wrap
msgid "Reverting"
msgstr ""

# type: menu
#: lispref/backups.texi:21
msgid "@code{revert-buffer}, and how to customize what it does."
msgstr ""

# type: cindex
#: lispref/backups.texi:25
#, no-wrap
msgid "backup file"
msgstr ""

# type: Plain text
#: lispref/backups.texi:33
msgid ""
"A @dfn{backup file} is a copy of the old contents of a file you are "
"editing.  Emacs makes a backup file the first time you save a buffer into "
"its visited file.  Thus, normally, the backup file contains the contents of "
"the file as it was before the current editing session.  The contents of the "
"backup file normally remain unchanged once it exists."
msgstr ""

# type: Plain text
#: lispref/backups.texi:39
msgid ""
"Backups are usually made by renaming the visited file to a new name.  "
"Optionally, you can specify that backup files should be made by copying the "
"visited file.  This choice makes a difference for files with multiple names; "
"it also can affect whether the edited file remains owned by the original "
"owner or becomes owned by the user editing it."
msgstr ""

# type: Plain text
#: lispref/backups.texi:44
msgid ""
"By default, Emacs makes a single backup file for each file edited.  You can "
"alternatively request numbered backups; then each new backup file gets a new "
"name.  You can delete old numbered backups when you don't want them any "
"more, or Emacs can delete them automatically."
msgstr ""

# type: menu
#: lispref/backups.texi:50 lispref/backups.texi:52 lispref/vol1.texi:703
#: lispref/vol2.texi:704
#, no-wrap
msgid "Making Backups"
msgstr ""

# type: menu
#: lispref/backups.texi:50 lispref/vol1.texi:703 lispref/vol2.texi:704
msgid "How Emacs makes backup files, and when."
msgstr ""

# type: menu
#: lispref/backups.texi:50 lispref/backups.texi:164 lispref/vol1.texi:703
#: lispref/vol2.texi:704
#, no-wrap
msgid "Rename or Copy"
msgstr ""

# type: menu
#: lispref/backups.texi:50
msgid "Two alternatives: renaming the old file or copying it."
msgstr ""

# type: menu
#: lispref/backups.texi:50 lispref/backups.texi:240 lispref/vol1.texi:703
#: lispref/vol2.texi:704
#, no-wrap
msgid "Numbered Backups"
msgstr ""

# type: menu
#: lispref/backups.texi:50 lispref/vol1.texi:703 lispref/vol2.texi:704
msgid "Keeping multiple backups for each source file."
msgstr ""

# type: menu
#: lispref/backups.texi:50 lispref/backups.texi:301 lispref/vol1.texi:703
#: lispref/vol2.texi:704
#, no-wrap
msgid "Backup Names"
msgstr ""

# type: menu
#: lispref/backups.texi:50 lispref/vol1.texi:703 lispref/vol2.texi:704
msgid "How backup file names are computed; customization."
msgstr ""

# type: subsection
#: lispref/backups.texi:53
#, no-wrap
msgid "Making Backup Files"
msgstr ""

# type: defun
#: lispref/backups.texi:55
#, no-wrap
msgid "backup-buffer"
msgstr ""

# type: defun
#: lispref/backups.texi:59
msgid ""
"This function makes a backup of the file visited by the current buffer, if "
"appropriate.  It is called by @code{save-buffer} before saving the buffer "
"the first time."
msgstr ""

# type: defun
#: lispref/backups.texi:67
msgid ""
"If a backup was made by renaming, the return value is a cons cell of the "
"form (@var{modes} . @var{backupname}), where @var{modes} are the mode bits "
"of the original file, as returned by @code{file-modes} (@pxref{File "
"Attributes,, Other Information about Files}), and @var{backupname} is the "
"name of the backup.  In all other cases, that is, if a backup was made by "
"copying or if no backup was made, this function returns @code{nil}."
msgstr ""

# type: item
#: lispref/backups.texi:69 lispref/locals.texi:34
#, no-wrap
msgid "buffer-backed-up"
msgstr ""

# type: defvar
#: lispref/backups.texi:75
msgid ""
"This buffer-local variable says whether this buffer's file has been backed "
"up on account of this buffer.  If it is non-@code{nil}, the backup file has "
"been written.  Otherwise, the file should be backed up when it is next saved "
"(if backups are enabled).  This is a permanent local; @code{kill-all-local-"
"variables} does not alter@tie{}it."
msgstr ""

# type: defopt
#: lispref/backups.texi:77
#, no-wrap
msgid "make-backup-files"
msgstr "make-backup-files"

# type: defopt
#: lispref/backups.texi:82
msgid ""
"This variable determines whether or not to make backup files.  If it is non-"
"@code{nil}, then Emacs creates a backup of each file when it is saved for "
"the first time---provided that @code{backup-inhibited} is @code{nil} (see "
"below)."
msgstr ""

# type: defopt
#: lispref/backups.texi:87
msgid ""
"The following example shows how to change the @code{make-backup-files} "
"variable only in the Rmail buffers and not elsewhere.  Setting it @code{nil} "
"stops Emacs from making backups of these files, which may save disk space.  "
"(You would put this code in your init file.)"
msgstr ""

# type: group
#: lispref/backups.texi:95
#, no-wrap
msgid ""
"(add-hook 'rmail-mode-hook\n"
"          (function (lambda ()\n"
"                      (make-local-variable\n"
"                       'make-backup-files)\n"
"                      (setq make-backup-files nil))))\n"
msgstr ""

# type: defvar
#: lispref/backups.texi:99
#, no-wrap
msgid "backup-enable-predicate"
msgstr "backup-enable-predicate"

# type: defvar
#: lispref/backups.texi:105
msgid ""
"This variable's value is a function to be called on certain occasions to "
"decide whether a file should have backup files.  The function receives one "
"argument, an absolute file name to consider.  If the function returns @code"
"{nil}, backups are disabled for that file.  Otherwise, the other variables "
"in this section say whether and how to make backups."
msgstr ""

# type: findex
#: lispref/backups.texi:106
#, no-wrap
msgid "normal-backup-enable-predicate"
msgstr "normal-backup-enable-predicate"

# type: defvar
#: lispref/backups.texi:110
msgid ""
"The default value is @code{normal-backup-enable-predicate}, which checks for "
"files in @code{temporary-file-directory} and @code{small-temporary-file-"
"directory}."
msgstr ""

# type: defvar
#: lispref/backups.texi:112
#, no-wrap
msgid "backup-inhibited"
msgstr "backup-inhibited"

# type: defvar
#: lispref/backups.texi:119
msgid ""
"If this variable is non-@code{nil}, backups are inhibited.  It records the "
"result of testing @code{backup-enable-predicate} on the visited file name.  "
"It can also coherently be used by other mechanisms that inhibit backups "
"based on which file is visited.  For example, VC sets this variable non-@code"
"{nil} to prevent making backups for files managed with a version control "
"system."
msgstr ""

# type: defvar
#: lispref/backups.texi:123
msgid ""
"This is a permanent local, so that changing the major mode does not lose its "
"value.  Major modes should not set this variable---they should set @code"
"{make-backup-files} instead."
msgstr ""

# type: defvar
#: lispref/backups.texi:125
#, no-wrap
msgid "backup-directory-alist"
msgstr "backup-directory-alist"

# type: defvar
#: lispref/backups.texi:128
msgid ""
"This variable's value is an alist of filename patterns and backup directory "
"names.  Each element looks like"
msgstr ""

# type: smallexample
#: lispref/backups.texi:130
#, no-wrap
msgid "(@var{regexp} . @var{directory})\n"
msgstr ""

# type: defvar
#: lispref/backups.texi:140
msgid ""
"Backups of files with names matching @var{regexp} will be made in @var"
"{directory}.  @var{directory} may be relative or absolute.  If it is "
"absolute, so that all matching files are backed up into the same directory, "
"the file names in this directory will be the full name of the file backed up "
"with all directory separators changed to @samp{!} to prevent clashes.  This "
"will not work correctly if your filesystem truncates the resulting name."
msgstr ""

# type: defvar
#: lispref/backups.texi:144
msgid ""
"For the common case of all backups going into one directory, the alist "
"should contain a single element pairing @samp{\".\"} with the appropriate "
"directory name."
msgstr ""

# type: defvar
#: lispref/backups.texi:147
msgid ""
"If this variable is @code{nil}, or it fails to match a filename, the backup "
"is made in the original file's directory."
msgstr ""

# type: defvar
#: lispref/backups.texi:150
msgid ""
"On MS-DOS filesystems without long names this variable is always ignored."
msgstr ""

# type: defvar
#: lispref/backups.texi:152
#, no-wrap
msgid "make-backup-file-name-function"
msgstr "make-backup-file-name-function"

# type: defvar
#: lispref/backups.texi:157
msgid ""
"This variable's value is a function to use for making backups instead of the "
"default @code{make-backup-file-name}.  A value of @code{nil} gives the "
"default @code{make-backup-file-name} behavior.  @xref{Backup Names,, Naming "
"Backup Files}."
msgstr ""

# type: defvar
#: lispref/backups.texi:161
msgid ""
"This could be buffer-local to do something special for specific files.  If "
"you define it, you may need to change @code{backup-file-name-p} and @code"
"{file-name-sans-versions} too."
msgstr ""

# type: subsection
#: lispref/backups.texi:165
#, no-wrap
msgid "Backup by Renaming or by Copying?"
msgstr ""

# type: cindex
#: lispref/backups.texi:166
#, no-wrap
msgid "backup files, rename or copy"
msgstr ""

# type: Plain text
#: lispref/backups.texi:169
msgid "There are two ways that Emacs can make a backup file:"
msgstr ""

# type: itemize
#: lispref/backups.texi:178
msgid ""
"Emacs can rename the original file so that it becomes a backup file, and "
"then write the buffer being saved into a new file.  After this procedure, "
"any other names (i.e., hard links) of the original file now refer to the "
"backup file.  The new file is owned by the user doing the editing, and its "
"group is the default for new files written by the user in that directory."
msgstr ""

# type: itemize
#: lispref/backups.texi:185
msgid ""
"Emacs can copy the original file into a backup file, and then overwrite the "
"original file with new contents.  After this procedure, any other names (i."
"e., hard links) of the original file continue to refer to the current "
"(updated) version of the file.  The file's owner and group will be unchanged."
msgstr ""

# type: Plain text
#: lispref/backups.texi:188
msgid "The first method, renaming, is the default."
msgstr ""

# type: Plain text
#: lispref/backups.texi:194
msgid ""
"The variable @code{backup-by-copying}, if non-@code{nil}, says to use the "
"second method, which is to copy the original file and overwrite it with the "
"new buffer contents.  The variable @code{file-precious-flag}, if non-@code"
"{nil}, also has this effect (as a sideline of its main significance).  @xref"
"{Saving Buffers}."
msgstr ""

# type: defopt
#: lispref/backups.texi:195
#, no-wrap
msgid "backup-by-copying"
msgstr "backup-by-copying"

# type: defopt
#: lispref/backups.texi:198
msgid ""
"If this variable is non-@code{nil}, Emacs always makes backup files by "
"copying."
msgstr ""

# type: Plain text
#: lispref/backups.texi:203
msgid ""
"The following three variables, when non-@code{nil}, cause the second method "
"to be used in certain special cases.  They have no effect on the treatment "
"of files that don't fall into the special cases."
msgstr ""

# type: defopt
#: lispref/backups.texi:204
#, no-wrap
msgid "backup-by-copying-when-linked"
msgstr "backup-by-copying-when-linked"

# type: defopt
#: lispref/backups.texi:207
msgid ""
"If this variable is non-@code{nil}, Emacs makes backups by copying for files "
"with multiple names (hard links)."
msgstr ""

# type: defopt
#: lispref/backups.texi:211 lispref/backups.texi:225
msgid ""
"This variable is significant only if @code{backup-by-copying} is @code{nil}, "
"since copying is always used when that variable is non-@code{nil}."
msgstr ""

# type: defopt
#: lispref/backups.texi:213
#, no-wrap
msgid "backup-by-copying-when-mismatch"
msgstr "backup-by-copying-when-mismatch"

# type: defopt
#: lispref/backups.texi:216
msgid ""
"If this variable is non-@code{nil}, Emacs makes backups by copying in cases "
"where renaming would change either the owner or the group of the file."
msgstr ""

# type: defopt
#: lispref/backups.texi:221
msgid ""
"The value has no effect when renaming would not alter the owner or group of "
"the file; that is, for files which are owned by the user and whose group "
"matches the default for a new file created there by the user."
msgstr ""

# type: defopt
#: lispref/backups.texi:227
#, no-wrap
msgid "backup-by-copying-when-privileged-mismatch"
msgstr "backup-by-copying-when-privileged-mismatch"

# type: defopt
#: lispref/backups.texi:232
msgid ""
"This variable, if non-@code{nil}, specifies the same behavior as @code"
"{backup-by-copying-when-mismatch}, but only for certain user-id values: "
"namely, those less than or equal to a certain number.  You set this variable "
"to that number."
msgstr ""

# type: defopt
#: lispref/backups.texi:236
msgid ""
"Thus, if you set @code{backup-by-copying-when-privileged-mismatch} to 0, "
"backup by copying is done for the superuser only, when necessary to prevent "
"a change in the owner of the file."
msgstr ""

# type: defopt
#: lispref/backups.texi:238
msgid "The default is 200."
msgstr ""

# type: subsection
#: lispref/backups.texi:241
#, no-wrap
msgid "Making and Deleting Numbered Backup Files"
msgstr ""

# type: Plain text
#: lispref/backups.texi:247
msgid ""
"If a file's name is @file{foo}, the names of its numbered backup versions "
"are @file{foo.~@var{v}~}, for various integers @var{v}, like this: @file{foo."
"~1~}, @file{foo.~2~}, @file{foo.~3~}, @dots{}, @file{foo.~259~}, and so on."
msgstr ""

# type: defopt
#: lispref/backups.texi:248
#, no-wrap
msgid "version-control"
msgstr "version-control"

# type: defopt
#: lispref/backups.texi:251
msgid ""
"This variable controls whether to make a single non-numbered backup file or "
"multiple numbered backups."
msgstr ""

# type: item
#: lispref/backups.texi:253 lispref/customize.texi:1070
#: lispref/debugging.texi:522 lispref/display.texi:1997
#: lispref/display.texi:2842 lispref/display.texi:5318
#: lispref/display.texi:5386 lispref/edebug.texi:1258 lispref/files.texi:1230
#: lispref/files.texi:1259 lispref/frames.texi:630 lispref/frames.texi:996
#: lispref/intro.texi:176 lispref/keymaps.texi:951 lispref/macros.texi:710
#: lispref/processes.texi:239 lispref/processes.texi:684
#: lispref/searching.texi:958 lispref/sequences.texi:615
#: lispref/sequences.texi:639 lispref/streams.texi:136
#: lispref/streams.texi:380 lispref/syntax.texi:549 lispref/text.texi:1277
#: lispref/variables.texi:1670 lispref/windows.texi:338
#: lispref/windows.texi:598 lispref/windows.texi:2203
#, no-wrap
msgid "nil"
msgstr "nil"

# type: table
#: lispref/backups.texi:256
msgid ""
"Make numbered backups if the visited file already has numbered backups; "
"otherwise, do not.  This is the default."
msgstr ""

# type: code{#1}
#: lispref/backups.texi:257
#, no-wrap
msgid "never"
msgstr ""

# type: table
#: lispref/backups.texi:259
msgid "Do not make numbered backups."
msgstr ""

# type: item
#: lispref/backups.texi:260 lispref/frames.texi:1005 lispref/keymaps.texi:1037
#: lispref/searching.texi:962 lispref/text.texi:3665 lispref/text.texi:3684
#: lispref/variables.texi:1672 lispref/windows.texi:351
#: lispref/windows.texi:617
#, no-wrap
msgid "anything else"
msgstr ""

# type: table
#: lispref/backups.texi:262
msgid "Make numbered backups."
msgstr ""

# type: Plain text
#: lispref/backups.texi:268
msgid ""
"The use of numbered backups ultimately leads to a large number of backup "
"versions, which must then be deleted.  Emacs can do this automatically or it "
"can ask the user whether to delete them."
msgstr ""

# type: defopt
#: lispref/backups.texi:269
#, no-wrap
msgid "kept-new-versions"
msgstr "kept-new-versions"

# type: defopt
#: lispref/backups.texi:273
msgid ""
"The value of this variable is the number of newest versions to keep when a "
"new numbered backup is made.  The newly made backup is included in the "
"count.  The default value is@tie{}2."
msgstr ""

# type: defopt
#: lispref/backups.texi:275
#, no-wrap
msgid "kept-old-versions"
msgstr "kept-old-versions"

# type: defopt
#: lispref/backups.texi:278
msgid ""
"The value of this variable is the number of oldest versions to keep when a "
"new numbered backup is made.  The default value is@tie{}2."
msgstr ""

# type: Plain text
#: lispref/backups.texi:286
msgid ""
"If there are backups numbered 1, 2, 3, 5, and 7, and both of these variables "
"have the value 2, then the backups numbered 1 and 2 are kept as old versions "
"and those numbered 5 and 7 are kept as new versions; backup version 3 is "
"excess.  The function @code{find-backup-file-name} (@pxref{Backup Names}) is "
"responsible for determining which backup versions to delete, but does not "
"delete them itself."
msgstr ""

# type: defopt
#: lispref/backups.texi:287
#, no-wrap
msgid "delete-old-versions"
msgstr "delete-old-versions"

# type: defopt
#: lispref/backups.texi:292
msgid ""
"If this variable is @code{t}, then saving a file deletes excess backup "
"versions silently.  If it is @code{nil}, that means to ask for confirmation "
"before deleting excess backups.  Otherwise, they are not deleted at all."
msgstr ""

# type: defopt
#: lispref/backups.texi:294
#, no-wrap
msgid "dired-kept-versions"
msgstr "dired-kept-versions"

# type: defopt
#: lispref/backups.texi:299
msgid ""
"This variable specifies how many of the newest backup versions to keep in "
"the Dired command @kbd{.} (@code{dired-clean-directory}).  That's the same "
"thing @code{kept-new-versions} specifies when you make a new backup file.  "
"The default is@tie{}2."
msgstr ""

# type: subsection
#: lispref/backups.texi:302
#, no-wrap
msgid "Naming Backup Files"
msgstr ""

# type: Plain text
#: lispref/backups.texi:307
msgid ""
"The functions in this section are documented mainly because you can "
"customize the naming conventions for backup files by redefining them.  If "
"you change one, you probably need to change the rest."
msgstr ""

# type: defun
#: lispref/backups.texi:308
#, no-wrap
msgid "backup-file-name-p filename"
msgstr ""

# type: defun
#: lispref/backups.texi:312
msgid ""
"This function returns a non-@code{nil} value if @var{filename} is a possible "
"name for a backup file.  It just checks the name, not whether a file with "
"the name @var{filename} exists."
msgstr ""

# type: group
#: lispref/backups.texi:317
#, no-wrap
msgid ""
"(backup-file-name-p \"foo\")\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/backups.texi:321
#, no-wrap
msgid ""
"(backup-file-name-p \"foo~\")\n"
"     @result{} 3\n"
msgstr ""

# type: defun
#: lispref/backups.texi:325 lispref/backups.texi:476
msgid "The standard definition of this function is as follows:"
msgstr ""

# type: group
#: lispref/backups.texi:332
#, no-wrap
msgid ""
"(defun backup-file-name-p (file)\n"
"  \"Return non-nil if FILE is a backup file \\\n"
"name (numeric or not)...\"\n"
"  (string-match \"~\\\\'\" file))\n"
msgstr ""

# type: defun
#: lispref/backups.texi:340
msgid ""
"Thus, the function returns a non-@code{nil} value if the file name ends with "
"a @samp{~}.  (We use a backslash to split the documentation string's first "
"line into two lines in the text, but produce just one line in the string "
"itself.)"
msgstr ""

# type: defun
#: lispref/backups.texi:343
msgid ""
"This simple expression is placed in a separate function to make it easy to "
"redefine for customization."
msgstr ""

# type: defun
#: lispref/backups.texi:345
#, no-wrap
msgid "make-backup-file-name filename"
msgstr ""

# type: defun
#: lispref/backups.texi:349
msgid ""
"This function returns a string that is the name to use for a non-numbered "
"backup file for file @var{filename}.  On Unix, this is just @var{filename} "
"with a tilde appended."
msgstr ""

# type: defun
#: lispref/backups.texi:352
msgid ""
"The standard definition of this function, on most operating systems, is as "
"follows:"
msgstr ""

# type: group
#: lispref/backups.texi:358
#, no-wrap
msgid ""
"(defun make-backup-file-name (file)\n"
"  \"Create the non-numeric backup file name for FILE...\"\n"
"  (concat file \"~\"))\n"
msgstr ""

# type: defun
#: lispref/backups.texi:364
msgid ""
"You can change the backup-file naming convention by redefining this "
"function.  The following example redefines @code{make-backup-file-name} to "
"prepend a @samp{.} in addition to appending a tilde:"
msgstr ""

# type: group
#: lispref/backups.texi:371
#, no-wrap
msgid ""
"(defun make-backup-file-name (filename)\n"
"  (expand-file-name\n"
"    (concat \".\" (file-name-nondirectory filename) \"~\")\n"
"    (file-name-directory filename)))\n"
msgstr ""

# type: group
#: lispref/backups.texi:376
#, no-wrap
msgid ""
"(make-backup-file-name \"backups.texi\")\n"
"     @result{} \".backups.texi~\"\n"
msgstr ""

# type: defun
#: lispref/backups.texi:383
msgid ""
"Some parts of Emacs, including some Dired commands, assume that backup file "
"names end with @samp{~}.  If you do not follow that convention, it will not "
"cause serious problems, but these commands may give less-than-desirable "
"results."
msgstr ""

# type: defun
#: lispref/backups.texi:385
#, no-wrap
msgid "find-backup-file-name filename"
msgstr ""

# type: defun
#: lispref/backups.texi:392
msgid ""
"This function computes the file name for a new backup file for @var"
"{filename}.  It may also propose certain existing backup files for "
"deletion.  @code{find-backup-file-name} returns a list whose @sc{car} is the "
"name for the new backup file and whose @sc{cdr} is a list of backup files "
"whose deletion is proposed.  The value can also be @code{nil}, which means "
"not to make a backup."
msgstr ""

# type: defun
#: lispref/backups.texi:397
msgid ""
"Two variables, @code{kept-old-versions} and @code{kept-new-versions}, "
"determine which backup versions should be kept.  This function keeps those "
"versions by excluding them from the @sc{cdr} of the value.  @xref{Numbered "
"Backups}."
msgstr ""

# type: defun
#: lispref/backups.texi:401
msgid ""
"In this example, the value says that @file{~rms/foo.~5~} is the name to use "
"for the new backup file, and @file{~rms/foo.~3~} is an ``excess'' version "
"that the caller should consider deleting now."
msgstr ""

# type: group
#: lispref/backups.texi:406
#, no-wrap
msgid ""
"(find-backup-file-name \"~rms/foo\")\n"
"     @result{} (\"~rms/foo.~5~\" \"~rms/foo.~3~\")\n"
msgstr ""

# type: defun
#: lispref/backups.texi:411
#, no-wrap
msgid "file-newest-backup filename"
msgstr ""

# type: defun
#: lispref/backups.texi:414
msgid ""
"This function returns the name of the most recent backup file for @var"
"{filename}, or @code{nil} if that file has no backup files."
msgstr ""

# type: defun
#: lispref/backups.texi:417
msgid ""
"Some file comparison commands use this function so that they can "
"automatically compare a file with its most recent backup."
msgstr ""

# type: Plain text
#: lispref/backups.texi:431
msgid ""
"Emacs periodically saves all files that you are visiting; this is called @dfn"
"{auto-saving}.  Auto-saving prevents you from losing more than a limited "
"amount of work if the system crashes.  By default, auto-saves happen every "
"300 keystrokes, or after around 30 seconds of idle time.  @xref{Auto Save, "
"Auto Save, Auto-Saving: Protection Against Disasters, emacs, The GNU Emacs "
"Manual}, for information on auto-save for users.  Here we describe the "
"functions used to implement auto-saving and the variables that control them."
msgstr ""

# type: item
#: lispref/backups.texi:432 lispref/locals.texi:31
#, no-wrap
msgid "buffer-auto-save-file-name"
msgstr ""

# type: defvar
#: lispref/backups.texi:436
msgid ""
"This buffer-local variable is the name of the file used for auto-saving the "
"current buffer.  It is @code{nil} if the buffer should not be auto-saved."
msgstr ""

# type: group
#: lispref/backups.texi:441
#, no-wrap
msgid ""
"buffer-auto-save-file-name\n"
"     @result{} \"/xcssun/users/rms/lewis/#backups.texi#\"\n"
msgstr ""

# type: deffn
#: lispref/backups.texi:445
#, no-wrap
msgid "Command auto-save-mode arg"
msgstr ""

# type: deffn
#: lispref/backups.texi:451
msgid ""
"When used interactively without an argument, this command is a toggle "
"switch: it turns on auto-saving of the current buffer if it is off, and vice "
"versa.  With an argument @var{arg}, the command turns auto-saving on if the "
"value of @var{arg} is @code{t}, a nonempty list, or a positive integer.  "
"Otherwise, it turns auto-saving off."
msgstr ""

# type: defun
#: lispref/backups.texi:453
#, no-wrap
msgid "auto-save-file-name-p filename"
msgstr ""

# type: defun
#: lispref/backups.texi:459
msgid ""
"This function returns a non-@code{nil} value if @var{filename} is a string "
"that could be the name of an auto-save file.  It assumes the usual naming "
"convention for auto-save files: a name that begins and ends with hash marks "
"(@samp{#}) is a possible auto-save file name.  The argument @var{filename} "
"should not contain a directory part."
msgstr ""

# type: group
#: lispref/backups.texi:464 lispref/backups.texi:502
#, no-wrap
msgid ""
"(make-auto-save-file-name)\n"
"     @result{} \"/xcssun/users/rms/lewis/#backups.texi#\"\n"
msgstr ""

# type: group
#: lispref/backups.texi:468
#, no-wrap
msgid ""
"(auto-save-file-name-p \"#backups.texi#\")\n"
"     @result{} 0\n"
msgstr ""

# type: group
#: lispref/backups.texi:472
#, no-wrap
msgid ""
"(auto-save-file-name-p \"backups.texi\")\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/backups.texi:482
#, no-wrap
msgid ""
"(defun auto-save-file-name-p (filename)\n"
"  \"Return non-nil if FILENAME can be yielded by...\"\n"
"  (string-match \"^#.*#$\" filename))\n"
msgstr ""

# type: defun
#: lispref/backups.texi:489
msgid ""
"This function exists so that you can customize it if you wish to change the "
"naming convention for auto-save files.  If you redefine it, be sure to "
"redefine the function @code{make-auto-save-file-name} correspondingly."
msgstr ""

# type: defun
#: lispref/backups.texi:491
#, no-wrap
msgid "make-auto-save-file-name"
msgstr ""

# type: defun
#: lispref/backups.texi:497
msgid ""
"This function returns the file name to use for auto-saving the current "
"buffer.  This is just the file name with hash marks (@samp{#}) prepended and "
"appended to it.  This function does not look at the variable @code{auto-save-"
"visited-file-name} (described below); callers of this function should check "
"that variable first."
msgstr ""

# type: defun
#: lispref/backups.texi:507
msgid ""
"Here is a simplified version of the standard definition of this function:"
msgstr ""

# type: group
#: lispref/backups.texi:514
#, no-wrap
msgid ""
"(defun make-auto-save-file-name ()\n"
"  \"Return file name to use for auto-saves \\\n"
"of current buffer..\"\n"
"  (if buffer-file-name\n"
msgstr ""

# type: group
#: lispref/backups.texi:523
#, no-wrap
msgid ""
"      (concat\n"
"       (file-name-directory buffer-file-name)\n"
"       \"#\"\n"
"       (file-name-nondirectory buffer-file-name)\n"
"       \"#\")\n"
"    (expand-file-name\n"
"     (concat \"#%\" (buffer-name) \"#\"))))\n"
msgstr ""

# type: defun
#: lispref/backups.texi:529
msgid ""
"This exists as a separate function so that you can redefine it to customize "
"the naming convention for auto-save files.  Be sure to change @code{auto-"
"save-file-name-p} in a corresponding way."
msgstr ""

# type: defopt
#: lispref/backups.texi:531
#, no-wrap
msgid "auto-save-visited-file-name"
msgstr "auto-save-visited-file-name"

# type: defopt
#: lispref/backups.texi:537
msgid ""
"If this variable is non-@code{nil}, Emacs auto-saves buffers in the files "
"they are visiting.  That is, the auto-save is done in the same file that you "
"are editing.  Normally, this variable is @code{nil}, so auto-save files have "
"distinct names that are created by @code{make-auto-save-file-name}."
msgstr ""

# type: defopt
#: lispref/backups.texi:543
msgid ""
"When you change the value of this variable, the new value does not take "
"effect in an existing buffer until the next time auto-save mode is reenabled "
"in it.  If auto-save mode is already enabled, auto-saves continue to go in "
"the same file name until @code{auto-save-mode} is called again."
msgstr ""

# type: defun
#: lispref/backups.texi:545
#, no-wrap
msgid "recent-auto-save-p"
msgstr "recent-auto-save-p"

# type: defun
#: lispref/backups.texi:548
msgid ""
"This function returns @code{t} if the current buffer has been auto-saved "
"since the last time it was read in or saved."
msgstr ""

# type: defun
#: lispref/backups.texi:550
#, no-wrap
msgid "set-buffer-auto-saved"
msgstr "set-buffer-auto-saved"

# type: defun
#: lispref/backups.texi:554
msgid ""
"This function marks the current buffer as auto-saved.  The buffer will not "
"be auto-saved again until the buffer text is changed again.  The function "
"returns @code{nil}."
msgstr ""

# type: defopt
#: lispref/backups.texi:556
#, no-wrap
msgid "auto-save-interval"
msgstr "auto-save-interval"

# type: defopt
#: lispref/backups.texi:562
msgid ""
"The value of this variable specifies how often to do auto-saving, in terms "
"of number of input events.  Each time this many additional input events are "
"read, Emacs does auto-saving for all buffers in which that is enabled.  "
"Setting this to zero disables autosaving based on the number of characters "
"typed."
msgstr ""

# type: defopt
#: lispref/backups.texi:564
#, no-wrap
msgid "auto-save-timeout"
msgstr "auto-save-timeout"

# type: defopt
#: lispref/backups.texi:571
msgid ""
"The value of this variable is the number of seconds of idle time that should "
"cause auto-saving.  Each time the user pauses for this long, Emacs does auto-"
"saving for all buffers in which that is enabled.  (If the current buffer is "
"large, the specified timeout is multiplied by a factor that increases as the "
"size increases; for a million-byte buffer, the factor is almost 4.)"
msgstr ""

# type: defopt
#: lispref/backups.texi:575
msgid ""
"If the value is zero or @code{nil}, then auto-saving is not done as a result "
"of idleness, only after a certain number of input events as specified by "
"@code{auto-save-interval}."
msgstr ""

# type: item
#: lispref/backups.texi:577 lispref/hooks.texi:65
#, no-wrap
msgid "auto-save-hook"
msgstr "auto-save-hook"

# type: defvar
#: lispref/backups.texi:579
msgid "This normal hook is run whenever an auto-save is about to happen."
msgstr ""

# type: defopt
#: lispref/backups.texi:581
#, no-wrap
msgid "auto-save-default"
msgstr "auto-save-default"

# type: defopt
#: lispref/backups.texi:584
msgid ""
"If this variable is non-@code{nil}, buffers that are visiting files have "
"auto-saving enabled by default.  Otherwise, they do not."
msgstr ""

# type: deffn
#: lispref/backups.texi:586
#, no-wrap
msgid "Command do-auto-save &optional no-message current-only"
msgstr ""

# type: deffn
#: lispref/backups.texi:590
msgid ""
"This function auto-saves all buffers that need to be auto-saved.  It saves "
"all buffers for which auto-saving is enabled and that have been changed "
"since the previous auto-save."
msgstr ""

# type: deffn
#: lispref/backups.texi:595
msgid ""
"If any buffers are auto-saved, @code{do-auto-save} normally displays a "
"message saying @samp{Auto-saving...} in the echo area while auto-saving is "
"going on.  However, if @var{no-message} is non-@code{nil}, the message is "
"inhibited."
msgstr ""

# type: deffn
#: lispref/backups.texi:598
msgid ""
"If @var{current-only} is non-@code{nil}, only the current buffer is auto-"
"saved."
msgstr ""

# type: defun
#: lispref/backups.texi:600
#, no-wrap
msgid "delete-auto-save-file-if-necessary &optional force"
msgstr ""

# type: defun
#: lispref/backups.texi:604
msgid ""
"This function deletes the current buffer's auto-save file if @code{delete-"
"auto-save-files} is non-@code{nil}.  It is called every time a buffer is "
"saved."
msgstr ""

# type: defun
#: lispref/backups.texi:608
msgid ""
"Unless @var{force} is non-@code{nil}, this function only deletes the file if "
"it was written by the current Emacs session since the last true save."
msgstr ""

# type: defopt
#: lispref/backups.texi:610
#, no-wrap
msgid "delete-auto-save-files"
msgstr "delete-auto-save-files"

# type: defopt
#: lispref/backups.texi:615
msgid ""
"This variable is used by the function @code{delete-auto-save-file-if-"
"necessary}.  If it is non-@code{nil}, Emacs deletes auto-save files when a "
"true save is done (in the visited file).  This saves disk space and "
"unclutters your directory."
msgstr ""

# type: defun
#: lispref/backups.texi:617
#, no-wrap
msgid "rename-auto-save-file"
msgstr "rename-auto-save-file"

# type: defun
#: lispref/backups.texi:622
msgid ""
"This function adjusts the current buffer's auto-save file name if the "
"visited file name has changed.  It also renames an existing auto-save file, "
"if it was made in the current Emacs session.  If the visited file name has "
"not changed, this function does nothing."
msgstr ""

# type: item
#: lispref/backups.texi:624 lispref/locals.texi:76
#, no-wrap
msgid "buffer-saved-size"
msgstr "buffer-saved-size"

# type: defvar
#: lispref/backups.texi:629
msgid ""
"The value of this buffer-local variable is the length of the current buffer, "
"when it was last read in, saved, or auto-saved.  This is used to detect a "
"substantial decrease in size, and turn off auto-saving in response."
msgstr ""

# type: defvar
#: lispref/backups.texi:635
msgid ""
"If it is @minus{}1, that means auto-saving is temporarily shut off in this "
"buffer due to a substantial decrease in size.  Explicitly saving the buffer "
"stores a positive value in this variable, thus reenabling auto-saving.  "
"Turning auto-save mode off or on also updates this variable, so that the "
"substantial decrease in size is forgotten."
msgstr ""

# type: defvar
#: lispref/backups.texi:637
#, no-wrap
msgid "auto-save-list-file-name"
msgstr "auto-save-list-file-name"

# type: defvar
#: lispref/backups.texi:644
msgid ""
"This variable (if non-@code{nil}) specifies a file for recording the names "
"of all the auto-save files.  Each time Emacs does auto-saving, it writes two "
"lines into this file for each buffer that has auto-saving enabled.  The "
"first line gives the name of the visited file (it's empty if the buffer has "
"none), and the second gives the name of the auto-save file."
msgstr ""

# type: defvar
#: lispref/backups.texi:649
msgid ""
"When Emacs exits normally, it deletes this file; if Emacs crashes, you can "
"look in the file to find all the auto-save files that might contain work "
"that was otherwise lost.  The @code{recover-session} command uses this file "
"to find them."
msgstr ""

# type: defvar
#: lispref/backups.texi:653
msgid ""
"The default name for this file specifies your home directory and starts with "
"@samp{.saves-}.  It also contains the Emacs process @acronym{ID} and the "
"host name."
msgstr ""

# type: defvar
#: lispref/backups.texi:655
#, no-wrap
msgid "auto-save-list-file-prefix"
msgstr "auto-save-list-file-prefix"

# type: defvar
#: lispref/backups.texi:661
msgid ""
"After Emacs reads your init file, it initializes @code{auto-save-list-file-"
"name} (if you have not already set it non-@code{nil}) based on this prefix, "
"adding the host name and process ID.  If you set this to @code{nil} in your "
"init file, then Emacs does not initialize @code{auto-save-list-file-name}."
msgstr ""

# type: Plain text
#: lispref/backups.texi:670
msgid ""
"If you have made extensive changes to a file and then change your mind about "
"them, you can get rid of them by reading in the previous version of the file "
"with the @code{revert-buffer} command.  @xref{Reverting, , Reverting a "
"Buffer, emacs, The GNU Emacs Manual}."
msgstr ""

# type: deffn
#: lispref/backups.texi:671
#, no-wrap
msgid "Command revert-buffer &optional ignore-auto noconfirm preserve-modes"
msgstr ""

# type: deffn
#: lispref/backups.texi:675
msgid ""
"This command replaces the buffer text with the text of the visited file on "
"disk.  This action undoes all changes since the file was visited or saved."
msgstr ""

# type: deffn
#: lispref/backups.texi:682
msgid ""
"By default, if the latest auto-save file is more recent than the visited "
"file, and the argument @var{ignore-auto} is @code{nil}, @code{revert-buffer} "
"asks the user whether to use that auto-save instead.  When you invoke this "
"command interactively, @var{ignore-auto} is @code{t} if there is no numeric "
"prefix argument; thus, the interactive default is not to check the auto-save "
"file."
msgstr ""

# type: deffn
#: lispref/backups.texi:686
msgid ""
"Normally, @code{revert-buffer} asks for confirmation before it changes the "
"buffer; but if the argument @var{noconfirm} is non-@code{nil}, @code{revert-"
"buffer} does not ask for confirmation."
msgstr ""

# type: deffn
#: lispref/backups.texi:690
msgid ""
"Normally, this command reinitializes the buffer's major and minor modes "
"using @code{normal-mode}.  But if @var{preserve-modes} is non-@code{nil}, "
"the modes remain unchanged."
msgstr ""

# type: deffn
#: lispref/backups.texi:698
msgid ""
"Reverting tries to preserve marker positions in the buffer by using the "
"replacement feature of @code{insert-file-contents}.  If the buffer contents "
"and the file contents are identical before the revert operation, reverting "
"preserves all the markers.  If they are not identical, reverting does change "
"the buffer; in that case, it preserves the markers in the unchanged text (if "
"any) at the beginning and end of the buffer.  Preserving any additional "
"markers would be problematical."
msgstr ""

# type: Plain text
#: lispref/backups.texi:702
msgid ""
"You can customize how @code{revert-buffer} does its work by setting the "
"variables described in the rest of this section."
msgstr ""

# type: defopt
#: lispref/backups.texi:703
#, no-wrap
msgid "revert-without-query"
msgstr "revert-without-query"

# type: defopt
#: lispref/backups.texi:709
msgid ""
"This variable holds a list of files that should be reverted without query.  "
"The value is a list of regular expressions.  If the visited file name "
"matches one of these regular expressions, and the file has changed on disk "
"but the buffer is not modified, then @code{revert-buffer} reverts the file "
"without asking the user for confirmation."
msgstr ""

# type: Plain text
#: lispref/backups.texi:713
msgid ""
"Some major modes customize @code{revert-buffer} by making buffer-local "
"bindings for these variables:"
msgstr ""

# type: defvar
#: lispref/backups.texi:714
#, no-wrap
msgid "revert-buffer-function"
msgstr "revert-buffer-function"

# type: anchor{#1}
#: lispref/backups.texi:722
msgid "Definition of revert-buffer-function"
msgstr ""

# type: defvar
#: lispref/backups.texi:722
msgid ""
"The value of this variable is the function to use to revert this buffer.  If "
"non-@code{nil}, it should be a function with two optional arguments to do "
"the work of reverting.  The two optional arguments, @var{ignore-auto} and "
"@var{noconfirm}, are the arguments that @code{revert-buffer} received.  If "
"the value is @code{nil}, reverting works the usual way."
msgstr ""

# type: defvar
#: lispref/backups.texi:727
msgid ""
"Modes such as Dired mode, in which the text being edited does not consist of "
"a file's contents but can be regenerated in some other fashion, can give "
"this variable a buffer-local value that is a function to regenerate the "
"contents."
msgstr ""

# type: defvar
#: lispref/backups.texi:729
#, no-wrap
msgid "revert-buffer-insert-file-contents-function"
msgstr "revert-buffer-insert-file-contents-function"

# type: defvar
#: lispref/backups.texi:734
msgid ""
"The value of this variable, if non-@code{nil}, specifies the function to use "
"to insert the updated contents when reverting this buffer.  The function "
"receives two arguments: first the file name to use; second, @code{t} if the "
"user has asked to read the auto-save file."
msgstr ""

# type: defvar
#: lispref/backups.texi:740
msgid ""
"The reason for a mode to set this variable instead of @code{revert-buffer-"
"function} is to avoid duplicating or replacing the rest of what @code{revert-"
"buffer} does: asking for confirmation, clearing the undo list, deciding the "
"proper major mode, and running the hooks listed below."
msgstr ""

# type: item
#: lispref/backups.texi:742 lispref/hooks.texi:77
#, no-wrap
msgid "before-revert-hook"
msgstr "before-revert-hook"

# type: defvar
#: lispref/backups.texi:746
msgid ""
"This normal hook is run by @code{revert-buffer} before inserting the "
"modified contents---but only if @code{revert-buffer-function} is @code{nil}."
msgstr ""

# type: item
#: lispref/backups.texi:748 lispref/hooks.texi:56
#, no-wrap
msgid "after-revert-hook"
msgstr "after-revert-hook"

# type: defvar
#: lispref/backups.texi:752
msgid ""
"This normal hook is run by @code{revert-buffer} after inserting the modified "
"contents---but only if @code{revert-buffer-function} is @code{nil}."
msgstr ""

# type: ignore
#: lispref/backups.texi:756
#, no-wrap
msgid "   arch-tag: 295a6321-e5ab-46d5-aef5-0bb4f447a67f\n"
msgstr "   arch-tag: 295a6321-e5ab-46d5-aef5-0bb4f447a67f\n"

# type: settitle
#: lispref/book-spine.texinfo:4
#, no-wrap
msgid "book-spine"
msgstr ""

# type: titlefont{#1}
#: lispref/book-spine.texinfo:13 lispref/elisp-covers.texi:18
#: lispref/elisp-covers.texi:41 lispref/elisp-covers.texi:72
#: lispref/elisp-covers.texi:102 lispref/elisp-covers.texi:137
#: lispref/elisp-covers.texi:167 lispref/elisp-covers.texi:197
#: lispref/front-cover-1.texi:13 lispref/front-cover-1.texi:34
#, no-wrap
msgid "GNU"
msgstr "GNU"

# type: center
#: lispref/book-spine.texinfo:14
#, no-wrap
msgid "Emacs Version 22.1"
msgstr ""

# type: center
#: lispref/book-spine.texinfo:15 lispref/elisp-covers.texi:27
#: lispref/elisp-covers.texi:50 lispref/elisp-covers.texi:81
#: lispref/elisp-covers.texi:115 lispref/elisp-covers.texi:146
#: lispref/elisp-covers.texi:176 lispref/elisp-covers.texi:206
#: lispref/elisp-covers.texi:221 lispref/elisp-covers.texi:240
#: lispref/front-cover-1.texi:22 lispref/front-cover-1.texi:43
#: lispref/vol1.texi:155 lispref/vol2.texi:156
#, no-wrap
msgid "for Unix Users"
msgstr ""

# type: center
#: lispref/book-spine.texinfo:18
#, no-wrap
msgid "by"
msgstr ""

# type: center
#: lispref/book-spine.texinfo:19
#, no-wrap
msgid "Bil Lewis,"
msgstr "Bil Lewis,"

# type: center
#: lispref/book-spine.texinfo:20
#, no-wrap
msgid "Dan LaLiberte,"
msgstr "Dan LaLiberte,"

# type: center
#: lispref/book-spine.texinfo:21
#, no-wrap
msgid "and the"
msgstr ""

# type: center
#: lispref/book-spine.texinfo:22
#, no-wrap
msgid "GNU Manual Group"
msgstr ""

# type: center
#: lispref/book-spine.texinfo:24
#, no-wrap
msgid "Free Software Foundation"
msgstr "Free Software Foundation"

# type: ignore
#: lispref/book-spine.texinfo:29
#, no-wrap
msgid "   arch-tag: 4466c7ca-e549-4119-948c-6eed34e1ff87\n"
msgstr "   arch-tag: 4466c7ca-e549-4119-948c-6eed34e1ff87\n"

# type: chapter
#: lispref/buffers.texi:7 lispref/elisp.texi:149 lispref/frames.texi:7
#: lispref/vol1.texi:250 lispref/vol1.texi:722 lispref/vol2.texi:251
#: lispref/vol2.texi:723 lispref/windows.texi:7 lispref/windows.texi:8
#, no-wrap
msgid "Windows"
msgstr "Windows"

# type: var{#1}
#: lispref/buffers.texi:9 lispref/internals.texi:1254
#: lispref/internals.texi:1445 lispref/streams.texi:88
#: lispref/streams.texi:354
#, no-wrap
msgid "buffer"
msgstr ""

# type: Plain text
#: lispref/buffers.texi:18
msgid ""
"A @dfn{buffer} is a Lisp object containing text to be edited.  Buffers are "
"used to hold the contents of files that are being visited; there may also be "
"buffers that are not visiting files.  While several buffers may exist at one "
"time, only one buffer is designated the @dfn{current buffer} at any time.  "
"Most editing commands act on the contents of the current buffer.  Each "
"buffer, including the current buffer, may or may not be displayed in any "
"windows."
msgstr ""

# type: menu
#: lispref/buffers.texi:34 lispref/buffers.texi:36 lispref/buffers.texi:38
#: lispref/vol1.texi:720 lispref/vol2.texi:721
#, no-wrap
msgid "Buffer Basics"
msgstr ""

# type: menu
#: lispref/buffers.texi:34 lispref/vol1.texi:720 lispref/vol2.texi:721
msgid "What is a buffer?"
msgstr ""

# type: menu
#: lispref/buffers.texi:34 lispref/buffers.texi:81 lispref/eval.texi:478
#: lispref/vol1.texi:720 lispref/vol2.texi:721
#, no-wrap
msgid "Current Buffer"
msgstr ""

# type: menu
#: lispref/buffers.texi:34 lispref/vol1.texi:720 lispref/vol2.texi:721
msgid "Designating a buffer as current"
msgstr ""

# type: menu
#: lispref/buffers.texi:34
msgid "so that primitives will access its contents."
msgstr ""

# type: menu
#: lispref/buffers.texi:34 lispref/buffers.texi:251 lispref/buffers.texi:252
#: lispref/vol1.texi:720 lispref/vol2.texi:721
#, no-wrap
msgid "Buffer Names"
msgstr ""

# type: menu
#: lispref/buffers.texi:34 lispref/vol1.texi:720 lispref/vol2.texi:721
msgid "Accessing and changing buffer names."
msgstr ""

# type: menu
#: lispref/buffers.texi:34 lispref/buffers.texi:370 lispref/buffers.texi:371
#: lispref/vol1.texi:720 lispref/vol2.texi:721
#, no-wrap
msgid "Buffer File Name"
msgstr ""

# type: menu
#: lispref/buffers.texi:34
msgid "The buffer file name indicates which file is visited."
msgstr ""

# type: menu
#: lispref/buffers.texi:34 lispref/buffers.texi:518 lispref/buffers.texi:519
#: lispref/vol1.texi:720 lispref/vol2.texi:721
#, no-wrap
msgid "Buffer Modification"
msgstr ""

# type: menu
#: lispref/buffers.texi:34 lispref/vol1.texi:720 lispref/vol2.texi:721
msgid "A buffer is @dfn{modified} if it needs to be saved."
msgstr ""

# type: menu
#: lispref/buffers.texi:34 lispref/buffers.texi:594 lispref/vol1.texi:720
#: lispref/vol2.texi:721
#, no-wrap
msgid "Modification Time"
msgstr ""

# type: menu
#: lispref/buffers.texi:34 lispref/vol1.texi:720 lispref/vol2.texi:721
msgid "Determining whether the visited file was changed"
msgstr ""

# type: menu
#: lispref/buffers.texi:34
msgid "``behind Emacs's back''."
msgstr ""

# type: menu
#: lispref/buffers.texi:34 lispref/buffers.texi:702 lispref/vol1.texi:720
#: lispref/vol2.texi:721
#, no-wrap
msgid "Read Only Buffers"
msgstr ""

# type: menu
#: lispref/buffers.texi:34
msgid "Modifying text is not allowed in a read-only buffer."
msgstr ""

# type: menu
#: lispref/buffers.texi:34 lispref/buffers.texi:770 lispref/buffers.texi:771
#: lispref/vol1.texi:720 lispref/vol2.texi:721
#, no-wrap
msgid "The Buffer List"
msgstr ""

# type: menu
#: lispref/buffers.texi:34 lispref/vol1.texi:720 lispref/vol2.texi:721
msgid "How to look at all the existing buffers."
msgstr ""

# type: menu
#: lispref/buffers.texi:34 lispref/buffers.texi:892 lispref/buffers.texi:893
#: lispref/vol1.texi:720 lispref/vol2.texi:721
#, no-wrap
msgid "Creating Buffers"
msgstr ""

# type: menu
#: lispref/buffers.texi:34 lispref/vol1.texi:720 lispref/vol2.texi:721
msgid "Functions that create buffers."
msgstr ""

# type: menu
#: lispref/buffers.texi:34 lispref/buffers.texi:963 lispref/buffers.texi:964
#: lispref/vol1.texi:720 lispref/vol2.texi:721
#, no-wrap
msgid "Killing Buffers"
msgstr ""

# type: menu
#: lispref/buffers.texi:34 lispref/vol1.texi:720 lispref/vol2.texi:721
msgid "Buffers exist until explicitly killed."
msgstr ""

# type: section
#: lispref/buffers.texi:34 lispref/buffers.texi:1072 lispref/buffers.texi:1073
#, no-wrap
msgid "Indirect Buffers"
msgstr ""

# type: menu
#: lispref/buffers.texi:34
msgid "An indirect buffer shares text with some other buffer."
msgstr ""

# type: node
#: lispref/buffers.texi:34 lispref/buffers.texi:1139
#, no-wrap
msgid "Buffer Gap"
msgstr ""

# type: menu
#: lispref/buffers.texi:34
msgid "The gap in the buffer."
msgstr ""

# type: ifnottex
#: lispref/buffers.texi:48
msgid ""
"A @dfn{buffer} is a Lisp object containing text to be edited.  Buffers are "
"used to hold the contents of files that are being visited; there may also be "
"buffers that are not visiting files.  Although several buffers normally "
"exist, only one buffer is designated the @dfn{current buffer} at any time.  "
"Most editing commands act on the contents of the current buffer.  Each "
"buffer, including the current buffer, may or may not be displayed in any "
"windows."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:55
msgid ""
"Buffers in Emacs editing are objects that have distinct names and hold text "
"that can be edited.  Buffers appear to Lisp programs as a special data "
"type.  You can think of the contents of a buffer as a string that you can "
"extend; insertions and deletions may occur in any part of the buffer.  @xref"
"{Text}."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:62
msgid ""
"A Lisp buffer object contains numerous pieces of information.  Some of this "
"information is directly accessible to the programmer through variables, "
"while other information is accessible only through special-purpose "
"functions.  For example, the visited file name is directly accessible "
"through a variable, while the value of point is accessible only through a "
"primitive function."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:70
msgid ""
"Buffer-specific information that is directly accessible is stored in @dfn"
"{buffer-local} variable bindings, which are variable values that are "
"effective only in a particular buffer.  This feature allows each buffer to "
"override the values of certain variables.  Most major modes override "
"variables such as @code{fill-column} or @code{comment-column} in this way.  "
"For more information about buffer-local variables and functions related to "
"them, see @ref{Buffer-Local Variables}."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:75
msgid ""
"For functions and variables related to visiting files in buffers, see @ref"
"{Visiting Files} and @ref{Saving Buffers}.  For functions and variables "
"related to the display of buffers in windows, see @ref{Buffers and Windows}."
msgstr ""

# type: defun
#: lispref/buffers.texi:76
#, no-wrap
msgid "bufferp object"
msgstr ""

# type: defun
#: lispref/buffers.texi:79
msgid ""
"This function returns @code{t} if @var{object} is a buffer, @code{nil} "
"otherwise."
msgstr ""

# type: section
#: lispref/buffers.texi:82
#, no-wrap
msgid "The Current Buffer"
msgstr ""

# type: cindex
#: lispref/buffers.texi:83
#, no-wrap
msgid "selecting a buffer"
msgstr ""

# type: cindex
#: lispref/buffers.texi:84
#, no-wrap
msgid "changing to another buffer"
msgstr ""

# type: cindex
#: lispref/buffers.texi:85
#, no-wrap
msgid "current buffer"
msgstr ""

# type: Plain text
#: lispref/buffers.texi:96
msgid ""
"There are, in general, many buffers in an Emacs session.  At any time, one "
"of them is designated as the @dfn{current buffer}.  This is the buffer in "
"which most editing takes place, because most of the primitives for examining "
"or changing text in a buffer operate implicitly on the current buffer (@pxref"
"{Text}).  Normally the buffer that is displayed on the screen in the "
"selected window is the current buffer, but this is not always so: a Lisp "
"program can temporarily designate any buffer as current in order to operate "
"on its contents, without changing what is displayed on the screen."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:100
msgid ""
"The way to designate a current buffer in a Lisp program is by calling @code"
"{set-buffer}.  The specified buffer remains current until a new one is "
"designated."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:108
msgid ""
"When an editing command returns to the editor command loop, the command loop "
"designates the buffer displayed in the selected window as current, to "
"prevent confusion: the buffer that the cursor is in when Emacs reads a "
"command is the buffer that the command will apply to.  (@xref{Command "
"Loop}.)  Therefore, @code{set-buffer} is not the way to switch visibly to a "
"different buffer so that the user can edit it.  For that, you must use the "
"functions described in @ref{Displaying Buffers}."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:120
msgid ""
"@strong{Warning:} Lisp functions that change to a different current buffer "
"should not depend on the command loop to set it back afterwards.  Editing "
"commands written in Emacs Lisp can be called from other programs as well as "
"from the command loop; it is convenient for the caller if the subroutine "
"does not change which buffer is current (unless, of course, that is the "
"subroutine's purpose).  Therefore, you should normally use @code{set-buffer} "
"within a @code{save-current-buffer} or @code{save-excursion} (@pxref"
"{Excursions}) form that will restore the current buffer when your function "
"is done.  Here is an example, the code for the command @code{append-to-"
"buffer} (with the documentation string abridged):"
msgstr ""

# type: group
#: lispref/buffers.texi:131
#, no-wrap
msgid ""
"(defun append-to-buffer (buffer start end)\n"
"  \"Append to specified buffer the text of the region.\n"
"@dots{}\"\n"
"  (interactive \"BAppend to buffer: \\nr\")\n"
"  (let ((oldbuf (current-buffer)))\n"
"    (save-current-buffer\n"
"      (set-buffer (get-buffer-create buffer))\n"
"      (insert-buffer-substring oldbuf start end))))\n"
msgstr ""

# type: Plain text
#: lispref/buffers.texi:140
msgid ""
"This function binds a local variable to record the current buffer, and then "
"@code{save-current-buffer} arranges to make it current again.  Next, @code"
"{set-buffer} makes the specified buffer current.  Finally, @code{insert-"
"buffer-substring} copies the string from the original current buffer to the "
"specified (and now current) buffer."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:146
msgid ""
"If the buffer appended to happens to be displayed in some window, the next "
"redisplay will show how its text has changed.  Otherwise, you will not see "
"the change immediately on the screen.  The buffer becomes current "
"temporarily during the execution of the command, but this does not cause it "
"to be displayed."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:156
msgid ""
"If you make local bindings (with @code{let} or function arguments) for a "
"variable that may also have buffer-local bindings, make sure that the same "
"buffer is current at the beginning and at the end of the local binding's "
"scope.  Otherwise you might bind it in one buffer and unbind it in another! "
"There are two ways to do this.  In simple cases, you may see that nothing "
"ever changes the current buffer within the scope of the binding.  Otherwise, "
"use @code{save-current-buffer} or @code{save-excursion} to make sure that "
"the buffer current at the beginning is current again whenever the variable "
"is unbound."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:160
msgid ""
"Do not rely on using @code{set-buffer} to change the current buffer back, "
"because that won't do the job if a quit happens while the wrong buffer is "
"current.  Here is what @emph{not} to do:"
msgstr ""

# type: group
#: lispref/buffers.texi:168
#, no-wrap
msgid ""
"(let (buffer-read-only\n"
"      (obuf (current-buffer)))\n"
"  (set-buffer @dots{})\n"
"  @dots{}\n"
"  (set-buffer obuf))\n"
msgstr ""

# type: Plain text
#: lispref/buffers.texi:174
msgid ""
"Using @code{save-current-buffer}, as shown here, handles quitting, errors, "
"and @code{throw}, as well as ordinary evaluation."
msgstr ""

# type: group
#: lispref/buffers.texi:181
#, no-wrap
msgid ""
"(let (buffer-read-only)\n"
"  (save-current-buffer\n"
"    (set-buffer @dots{})\n"
"    @dots{}))\n"
msgstr ""

# type: defun
#: lispref/buffers.texi:184
#, no-wrap
msgid "current-buffer"
msgstr ""

# type: defun
#: lispref/buffers.texi:186
msgid "This function returns the current buffer."
msgstr ""

# type: group
#: lispref/buffers.texi:191
#, no-wrap
msgid ""
"(current-buffer)\n"
"     @result{} #<buffer buffers.texi>\n"
msgstr ""

# type: defun
#: lispref/buffers.texi:195
#, no-wrap
msgid "set-buffer buffer-or-name"
msgstr ""

# type: defun
#: lispref/buffers.texi:199
msgid ""
"This function makes @var{buffer-or-name} the current buffer.  This does not "
"display the buffer in any window, so the user cannot necessarily see the "
"buffer.  But Lisp programs will now operate on it."
msgstr ""

# type: defun
#: lispref/buffers.texi:203
msgid ""
"This function returns the buffer identified by @var{buffer-or-name}.  An "
"error is signaled if @var{buffer-or-name} does not identify an existing "
"buffer."
msgstr ""

# type: defspec
#: lispref/buffers.texi:205
#, no-wrap
msgid "save-current-buffer body@dots{}"
msgstr ""

# type: defspec
#: lispref/buffers.texi:211
msgid ""
"The @code{save-current-buffer} special form saves the identity of the "
"current buffer, evaluates the @var{body} forms, and finally restores that "
"buffer as current.  The return value is the value of the last form in @var"
"{body}.  The current buffer is restored even in case of an abnormal exit via "
"@code{throw} or error (@pxref{Nonlocal Exits})."
msgstr ""

# type: defspec
#: lispref/buffers.texi:216
msgid ""
"If the buffer that used to be current has been killed by the time of exit "
"from @code{save-current-buffer}, then it is not made current again, of "
"course.  Instead, whichever buffer was current just before exit remains "
"current."
msgstr ""

# type: defmac
#: lispref/buffers.texi:218
#, no-wrap
msgid "with-current-buffer buffer-or-name body@dots{}"
msgstr ""

# type: defmac
#: lispref/buffers.texi:225
msgid ""
"The @code{with-current-buffer} macro saves the identity of the current "
"buffer, makes @var{buffer-or-name} current, evaluates the @var{body} forms, "
"and finally restores the buffer.  The return value is the value of the last "
"form in @var{body}.  The current buffer is restored even in case of an "
"abnormal exit via @code{throw} or error (@pxref{Nonlocal Exits})."
msgstr ""

# type: defmac
#: lispref/buffers.texi:228
msgid ""
"An error is signaled if @var{buffer-or-name} does not identify an existing "
"buffer."
msgstr ""

# type: defmac
#: lispref/buffers.texi:230
#, no-wrap
msgid "with-temp-buffer body@dots{}"
msgstr ""

# type: anchor{#1}
#: lispref/buffers.texi:239
msgid "Definition of with-temp-buffer"
msgstr ""

# type: defmac
#: lispref/buffers.texi:239
msgid ""
"The @code{with-temp-buffer} macro evaluates the @var{body} forms with a "
"temporary buffer as the current buffer.  It saves the identity of the "
"current buffer, creates a temporary buffer and makes it current, evaluates "
"the @var{body} forms, and finally restores the previous current buffer while "
"killing the temporary buffer.  By default, undo information (@pxref{Undo}) "
"is not recorded in the buffer created by this macro (but @var{body} can "
"enable that, if needed)."
msgstr ""

# type: defmac
#: lispref/buffers.texi:243
msgid ""
"The return value is the value of the last form in @var{body}.  You can "
"return the contents of the temporary buffer by using @code{(buffer-string)} "
"as the last form."
msgstr ""

# type: defmac
#: lispref/buffers.texi:246 lispref/files.texi:645
msgid ""
"The current buffer is restored even in case of an abnormal exit via @code"
"{throw} or error (@pxref{Nonlocal Exits})."
msgstr ""

# type: defmac
#: lispref/buffers.texi:249
msgid ""
"See also @code{with-temp-file} in @ref{Definition of with-temp-file,, "
"Writing to Files}."
msgstr ""

# type: cindex
#: lispref/buffers.texi:253
#, no-wrap
msgid "buffer names"
msgstr ""

# type: Plain text
#: lispref/buffers.texi:261
msgid ""
"Each buffer has a unique name, which is a string.  Many of the functions "
"that work on buffers accept either a buffer or a buffer name as an "
"argument.  Any argument called @var{buffer-or-name} is of this sort, and an "
"error is signaled if it is neither a string nor a buffer.  Any argument "
"called @var{buffer} must be an actual buffer object, not a name."
msgstr ""

# type: cindex
#: lispref/buffers.texi:262
#, no-wrap
msgid "hidden buffers"
msgstr ""

# type: cindex
#: lispref/buffers.texi:263
#, no-wrap
msgid "buffers without undo information"
msgstr ""

# type: Plain text
#: lispref/buffers.texi:270
msgid ""
"Buffers that are ephemeral and generally uninteresting to the user have "
"names starting with a space, so that the @code{list-buffers} and @code"
"{buffer-menu} commands don't mention them (but if such a buffer visits a "
"file, it @strong{is} mentioned).  A name starting with space also initially "
"disables recording undo information; see @ref{Undo}."
msgstr ""

# type: defun
#: lispref/buffers.texi:271
#, no-wrap
msgid "buffer-name &optional buffer"
msgstr ""

# type: defun
#: lispref/buffers.texi:274
msgid ""
"This function returns the name of @var{buffer} as a string.  If @var{buffer} "
"is not supplied, it defaults to the current buffer."
msgstr ""

# type: defun
#: lispref/buffers.texi:277
msgid ""
"If @code{buffer-name} returns @code{nil}, it means that @var{buffer} has "
"been killed.  @xref{Killing Buffers}."
msgstr ""

# type: group
#: lispref/buffers.texi:282
#, no-wrap
msgid ""
"(buffer-name)\n"
"     @result{} \"buffers.texi\"\n"
msgstr ""

# type: group
#: lispref/buffers.texi:287
#, no-wrap
msgid ""
"(setq foo (get-buffer \"temp\"))\n"
"     @result{} #<buffer temp>\n"
msgstr ""

# type: group
#: lispref/buffers.texi:291
#, no-wrap
msgid ""
"(kill-buffer foo)\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/buffers.texi:295
#, no-wrap
msgid ""
"(buffer-name foo)\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/buffers.texi:299
#, no-wrap
msgid ""
"foo\n"
"     @result{} #<killed buffer>\n"
msgstr ""

# type: deffn
#: lispref/buffers.texi:303
#, no-wrap
msgid "Command rename-buffer newname &optional unique"
msgstr ""

# type: deffn
#: lispref/buffers.texi:306
msgid ""
"This function renames the current buffer to @var{newname}.  An error is "
"signaled if @var{newname} is not a string."
msgstr ""

# type: deffn
#: lispref/buffers.texi:313
msgid ""
"Ordinarily, @code{rename-buffer} signals an error if @var{newname} is "
"already in use.  However, if @var{unique} is non-@code{nil}, it modifies @var"
"{newname} to make a name that is not in use.  Interactively, you can make "
"@var{unique} non-@code{nil} with a numeric prefix argument.  (This is how "
"the command @code{rename-uniquely} is implemented.)"
msgstr ""

# type: deffn
#: lispref/buffers.texi:315
msgid "This function returns the name actually given to the buffer."
msgstr ""

# type: defun
#: lispref/buffers.texi:317
#, no-wrap
msgid "get-buffer buffer-or-name"
msgstr ""

# type: defun
#: lispref/buffers.texi:323
msgid ""
"This function returns the buffer specified by @var{buffer-or-name}.  If @var"
"{buffer-or-name} is a string and there is no buffer with that name, the "
"value is @code{nil}.  If @var{buffer-or-name} is a buffer, it is returned as "
"given; that is not very useful, so the argument is usually a name.  For "
"example:"
msgstr ""

# type: group
#: lispref/buffers.texi:328
#, no-wrap
msgid ""
"(setq b (get-buffer \"lewis\"))\n"
"     @result{} #<buffer lewis>\n"
msgstr ""

# type: group
#: lispref/buffers.texi:332
#, no-wrap
msgid ""
"(get-buffer b)\n"
"     @result{} #<buffer lewis>\n"
msgstr ""

# type: group
#: lispref/buffers.texi:336
#, no-wrap
msgid ""
"(get-buffer \"Frazzle-nots\")\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/buffers.texi:340
msgid ""
"See also the function @code{get-buffer-create} in @ref{Creating Buffers}."
msgstr ""

# type: defun
#: lispref/buffers.texi:343
#, no-wrap
msgid "generate-new-buffer-name starting-name &optional ignore"
msgstr ""

# type: defun
#: lispref/buffers.texi:349
msgid ""
"This function returns a name that would be unique for a new buffer---but "
"does not create the buffer.  It starts with @var{starting-name}, and "
"produces a name not currently in use for any buffer by appending a number "
"inside of @samp{<@dots{}>}.  It starts at 2 and keeps incrementing the "
"number until it is not the name of an existing buffer."
msgstr ""

# type: defun
#: lispref/buffers.texi:356
msgid ""
"If the optional second argument @var{ignore} is non-@code{nil}, it should be "
"a string, a potential buffer name.  It means to consider that potential "
"buffer acceptable, if it is tried, even it is the name of an existing buffer "
"(which would normally be rejected).  Thus, if buffers named @samp{foo}, @samp"
"{foo<2>}, @samp{foo<3>} and @samp{foo<4>} exist,"
msgstr ""

# type: example
#: lispref/buffers.texi:364
#, no-wrap
msgid ""
"(generate-new-buffer-name \"foo\")\n"
"     @result{} \"foo<5>\"\n"
"(generate-new-buffer-name \"foo\" \"foo<3>\")\n"
"     @result{} \"foo<3>\"\n"
"(generate-new-buffer-name \"foo\" \"foo<6>\")\n"
"     @result{} \"foo<5>\"\n"
msgstr ""

# type: defun
#: lispref/buffers.texi:368
msgid ""
"See the related function @code{generate-new-buffer} in @ref{Creating "
"Buffers}."
msgstr ""

# type: cindex
#: lispref/buffers.texi:372
#, no-wrap
msgid "visited file"
msgstr ""

# type: cindex
#: lispref/buffers.texi:373
#, no-wrap
msgid "buffer file name"
msgstr ""

# type: cindex
#: lispref/buffers.texi:374
#, no-wrap
msgid "file name of buffer"
msgstr ""

# type: Plain text
#: lispref/buffers.texi:382
msgid ""
"The @dfn{buffer file name} is the name of the file that is visited in that "
"buffer.  When a buffer is not visiting a file, its buffer file name is @code"
"{nil}.  Most of the time, the buffer name is the same as the nondirectory "
"part of the buffer file name, but the buffer file name and the buffer name "
"are distinct and can be set independently.  @xref{Visiting Files}."
msgstr ""

# type: defun
#: lispref/buffers.texi:383
#, no-wrap
msgid "buffer-file-name &optional buffer"
msgstr ""

# type: defun
#: lispref/buffers.texi:388
msgid ""
"This function returns the absolute file name of the file that @var{buffer} "
"is visiting.  If @var{buffer} is not visiting any file, @code{buffer-file-"
"name} returns @code{nil}.  If @var{buffer} is not supplied, it defaults to "
"the current buffer."
msgstr ""

# type: group
#: lispref/buffers.texi:393
#, no-wrap
msgid ""
"(buffer-file-name (other-buffer))\n"
"     @result{} \"/usr/user/lewis/manual/files.texi\"\n"
msgstr ""

# type: item
#: lispref/buffers.texi:397 lispref/locals.texi:52
#, no-wrap
msgid "buffer-file-name"
msgstr ""

# type: defvar
#: lispref/buffers.texi:402
msgid ""
"This buffer-local variable contains the name of the file being visited in "
"the current buffer, or @code{nil} if it is not visiting a file.  It is a "
"permanent local variable, unaffected by @code{kill-all-local-variables}."
msgstr ""

# type: group
#: lispref/buffers.texi:407
#, no-wrap
msgid ""
"buffer-file-name\n"
"     @result{} \"/usr/user/lewis/manual/buffers.texi\"\n"
msgstr ""

# type: defvar
#: lispref/buffers.texi:415
msgid ""
"It is risky to change this variable's value without doing various other "
"things.  Normally it is better to use @code{set-visited-file-name} (see "
"below); some of the things done there, such as changing the buffer name, are "
"not strictly necessary, but others are essential to avoid confusing Emacs."
msgstr ""

# type: item
#: lispref/buffers.texi:417 lispref/locals.texi:58
#, no-wrap
msgid "buffer-file-truename"
msgstr ""

# type: defvar
#: lispref/buffers.texi:423
msgid ""
"This buffer-local variable holds the abbreviated truename of the file "
"visited in the current buffer, or @code{nil} if no file is visited.  It is a "
"permanent local, unaffected by @code{kill-all-local-variables}.  @xref"
"{Truenames}, and @ref{Definition of abbreviate-file-name}."
msgstr ""

# type: item
#: lispref/buffers.texi:425 lispref/locals.texi:55
#, no-wrap
msgid "buffer-file-number"
msgstr ""

# type: defvar
#: lispref/buffers.texi:430
msgid ""
"This buffer-local variable holds the file number and directory device number "
"of the file visited in the current buffer, or @code{nil} if no file or a "
"nonexistent file is visited.  It is a permanent local, unaffected by @code"
"{kill-all-local-variables}."
msgstr ""

# type: defvar
#: lispref/buffers.texi:436
msgid ""
"The value is normally a list of the form @code{(@var{filenum} @var"
"{devnum})}.  This pair of numbers uniquely identifies the file among all "
"files accessible on the system.  See the function @code{file-attributes}, in "
"@ref{File Attributes}, for more information about them."
msgstr ""

# type: defvar
#: lispref/buffers.texi:439
msgid ""
"If @code{buffer-file-name} is the name of a symbolic link, then both numbers "
"refer to the recursive target."
msgstr ""

# type: defun
#: lispref/buffers.texi:441
#, no-wrap
msgid "get-file-buffer filename"
msgstr ""

# type: defun
#: lispref/buffers.texi:449
msgid ""
"This function returns the buffer visiting file @var{filename}.  If there is "
"no such buffer, it returns @code{nil}.  The argument @var{filename}, which "
"must be a string, is expanded (@pxref{File Name Expansion}), then compared "
"against the visited file names of all live buffers.  Note that the buffer's "
"@code{buffer-file-name} must match the expansion of @var{filename} exactly.  "
"This function will not recognize other names for the same file."
msgstr ""

# type: group
#: lispref/buffers.texi:454
#, no-wrap
msgid ""
"(get-file-buffer \"buffers.texi\")\n"
"    @result{} #<buffer buffers.texi>\n"
msgstr ""

# type: defun
#: lispref/buffers.texi:460
msgid ""
"In unusual circumstances, there can be more than one buffer visiting the "
"same file name.  In such cases, this function returns the first such buffer "
"in the buffer list."
msgstr ""

# type: defun
#: lispref/buffers.texi:462
#, no-wrap
msgid "find-buffer-visiting filename &optional predicate"
msgstr ""

# type: defun
#: lispref/buffers.texi:472
msgid ""
"This is like @code{get-file-buffer}, except that it can return any buffer "
"visiting the file @emph{possibly under a different name}.  That is, the "
"buffer's @code{buffer-file-name} does not need to match the expansion of @var"
"{filename} exactly, it only needs to refer to the same file.  If @var"
"{predicate} is non-@code{nil}, it should be a function of one argument, a "
"buffer visiting @var{filename}.  The buffer is only considered a suitable "
"return value if @var{predicate} returns non-@code{nil}.  If it can not find "
"a suitable buffer to return, @code{find-buffer-visiting} returns @code{nil}."
msgstr ""

# type: deffn
#: lispref/buffers.texi:474
#, no-wrap
msgid "Command set-visited-file-name filename &optional no-query along-with-file"
msgstr ""

# type: deffn
#: lispref/buffers.texi:479
msgid ""
"If @var{filename} is a non-empty string, this function changes the name of "
"the file visited in the current buffer to @var{filename}.  (If the buffer "
"had no visited file, this gives it one.)  The @emph{next time} the buffer is "
"saved it will go in the newly-specified file."
msgstr ""

# type: deffn
#: lispref/buffers.texi:485
msgid ""
"This command marks the buffer as modified, since it does not (as far as "
"Emacs knows) match the contents of @var{filename}, even if it matched the "
"former visited file.  It also renames the buffer to correspond to the new "
"file name, unless the new name is already in use."
msgstr ""

# type: deffn
#: lispref/buffers.texi:490
msgid ""
"If @var{filename} is @code{nil} or the empty string, that stands for ``no "
"visited file.'' In this case, @code{set-visited-file-name} marks the buffer "
"as having no visited file, without changing the buffer's modified flag."
msgstr ""

# type: deffn
#: lispref/buffers.texi:497
msgid ""
"Normally, this function asks the user for confirmation if there already is a "
"buffer visiting @var{filename}.  If @var{no-query} is non-@code{nil}, that "
"prevents asking this question.  If there already is a buffer visiting @var"
"{filename}, and the user confirms or @var{query} is non-@code{nil}, this "
"function makes the new buffer name unique by appending a number inside of "
"@samp{<@dots{}>} to @var{filename}."
msgstr ""

# type: deffn
#: lispref/buffers.texi:506
msgid ""
"If @var{along-with-file} is non-@code{nil}, that means to assume that the "
"former visited file has been renamed to @var{filename}.  In this case, the "
"command does not change the buffer's modified flag, nor the buffer's "
"recorded last file modification time as reported by @code{visited-file-"
"modtime} (@pxref{Modification Time}).  If @var{along-with-file} is @code"
"{nil}, this function clears the recorded last file modification time, after "
"which @code{visited-file-modtime} returns zero."
msgstr ""

# type: deffn
#: lispref/buffers.texi:510
msgid ""
"When the function @code{set-visited-file-name} is called interactively, it "
"prompts for @var{filename} in the minibuffer."
msgstr ""

# type: defvar
#: lispref/buffers.texi:512
#, no-wrap
msgid "list-buffers-directory"
msgstr ""

# type: defvar
#: lispref/buffers.texi:516
msgid ""
"This buffer-local variable specifies a string to display in a buffer listing "
"where the visited file name would go, for buffers that don't have a visited "
"file name.  Dired buffers use this variable."
msgstr ""

# type: cindex
#: lispref/buffers.texi:520
#, no-wrap
msgid "buffer modification"
msgstr ""

# type: cindex
#: lispref/buffers.texi:521
#, no-wrap
msgid "modification flag (of buffer)"
msgstr ""

# type: Plain text
#: lispref/buffers.texi:530
msgid ""
"Emacs keeps a flag called the @dfn{modified flag} for each buffer, to record "
"whether you have changed the text of the buffer.  This flag is set to @code"
"{t} whenever you alter the contents of the buffer, and cleared to @code{nil} "
"when you save it.  Thus, the flag shows whether there are unsaved changes.  "
"The flag value is normally shown in the mode line (@pxref{Mode Line "
"Variables}), and controls saving (@pxref{Saving Buffers}) and auto-saving "
"(@pxref{Auto-Saving})."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:535
msgid ""
"Some Lisp programs set the flag explicitly.  For example, the function @code"
"{set-visited-file-name} sets the flag to @code{t}, because the text does not "
"match the newly-visited file, even if it is unchanged from the file formerly "
"visited."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:538
msgid ""
"The functions that modify the contents of buffers are described in @ref"
"{Text}."
msgstr ""

# type: defun
#: lispref/buffers.texi:539
#, no-wrap
msgid "buffer-modified-p &optional buffer"
msgstr ""

# type: defun
#: lispref/buffers.texi:544
msgid ""
"This function returns @code{t} if the buffer @var{buffer} has been modified "
"since it was last read in from a file or saved, or @code{nil} otherwise.  If "
"@var{buffer} is not supplied, the current buffer is tested."
msgstr ""

# type: defun
#: lispref/buffers.texi:546
#, no-wrap
msgid "set-buffer-modified-p flag"
msgstr ""

# type: defun
#: lispref/buffers.texi:549
msgid ""
"This function marks the current buffer as modified if @var{flag} is non-@code"
"{nil}, or as unmodified if the flag is @code{nil}."
msgstr ""

# type: defun
#: lispref/buffers.texi:553
msgid ""
"Another effect of calling this function is to cause unconditional redisplay "
"of the mode line for the current buffer.  In fact, the function @code{force-"
"mode-line-update} works by doing this:"
msgstr ""

# type: group
#: lispref/buffers.texi:557
#, no-wrap
msgid "(set-buffer-modified-p (buffer-modified-p))\n"
msgstr ""

# type: defun
#: lispref/buffers.texi:561
#, no-wrap
msgid "restore-buffer-modified-p flag"
msgstr ""

# type: defun
#: lispref/buffers.texi:564
msgid ""
"Like @code{set-buffer-modified-p}, but does not force redisplay of mode "
"lines."
msgstr ""

# type: deffn
#: lispref/buffers.texi:566
#, no-wrap
msgid "Command not-modified &optional arg"
msgstr ""

# type: deffn
#: lispref/buffers.texi:571
msgid ""
"This command marks the current buffer as unmodified, and not needing to be "
"saved.  If @var{arg} is non-@code{nil}, it marks the buffer as modified, so "
"that it will be saved at the next suitable occasion.  Interactively, @var"
"{arg} is the prefix argument."
msgstr ""

# type: deffn
#: lispref/buffers.texi:574
msgid ""
"Don't use this function in programs, since it prints a message in the echo "
"area; use @code{set-buffer-modified-p} (above) instead."
msgstr ""

# type: defun
#: lispref/buffers.texi:576
#, no-wrap
msgid "buffer-modified-tick &optional buffer"
msgstr ""

# type: defun
#: lispref/buffers.texi:581
msgid ""
"This function returns @var{buffer}'s modification-count.  This is a counter "
"that increments every time the buffer is modified.  If @var{buffer} is @code"
"{nil} (or omitted), the current buffer is used.  The counter can wrap around "
"occasionally."
msgstr ""

# type: defun
#: lispref/buffers.texi:583
#, no-wrap
msgid "buffer-chars-modified-tick &optional buffer"
msgstr ""

# type: defun
#: lispref/buffers.texi:592
msgid ""
"This function returns @var{buffer}'s character-change modification-count.  "
"Changes to text properties leave this counter unchanged; however, each time "
"text is inserted or removed from the buffer, the counter is reset to the "
"value that would be returned @code{buffer-modified-tick}.  By comparing the "
"values returned by two @code{buffer-chars-modified-tick} calls, you can tell "
"whether a character change occurred in that buffer in between the calls.  If "
"@var{buffer} is @code{nil} (or omitted), the current buffer is used."
msgstr ""

# type: section
#: lispref/buffers.texi:596
#, no-wrap
msgid "Buffer Modification Time"
msgstr ""

# type: cindex
#: lispref/buffers.texi:597
#, no-wrap
msgid "comparing file modification time"
msgstr ""

# type: cindex
#: lispref/buffers.texi:598
#, no-wrap
msgid "modification time of buffer"
msgstr ""

# type: Plain text
#: lispref/buffers.texi:607
msgid ""
"Suppose that you visit a file and make changes in its buffer, and meanwhile "
"the file itself is changed on disk.  At this point, saving the buffer would "
"overwrite the changes in the file.  Occasionally this may be what you want, "
"but usually it would lose valuable information.  Emacs therefore checks the "
"file's modification time using the functions described below before saving "
"the file.  (@xref{File Attributes}, for how to examine a file's modification "
"time.)"
msgstr ""

# type: defun
#: lispref/buffers.texi:608
#, no-wrap
msgid "verify-visited-file-modtime buffer"
msgstr ""

# type: defun
#: lispref/buffers.texi:614
msgid ""
"This function compares what @var{buffer} has recorded for the modification "
"time of its visited file against the actual modification time of the file as "
"recorded by the operating system.  The two should be the same unless some "
"other process has written the file since Emacs visited or saved it."
msgstr ""

# type: defun
#: lispref/buffers.texi:620
msgid ""
"The function returns @code{t} if the last actual modification time and "
"Emacs's recorded modification time are the same, @code{nil} otherwise.  It "
"also returns @code{t} if the buffer has no recorded last modification time, "
"that is if @code{visited-file-modtime} would return zero."
msgstr ""

# type: defun
#: lispref/buffers.texi:627
msgid ""
"It always returns @code{t} for buffers that are not visiting a file, even if "
"@code{visited-file-modtime} returns a non-zero value.  For instance, it "
"always returns @code{t} for dired buffers.  It returns @code{t} for buffers "
"that are visiting a file that does not exist and never existed, but @code"
"{nil} for file-visiting buffers whose file has been deleted."
msgstr ""

# type: defun
#: lispref/buffers.texi:629
#, no-wrap
msgid "clear-visited-file-modtime"
msgstr ""

# type: defun
#: lispref/buffers.texi:634
msgid ""
"This function clears out the record of the last modification time of the "
"file being visited by the current buffer.  As a result, the next attempt to "
"save this buffer will not complain of a discrepancy in file modification "
"times."
msgstr ""

# type: defun
#: lispref/buffers.texi:638
msgid ""
"This function is called in @code{set-visited-file-name} and other "
"exceptional places where the usual test to avoid overwriting a changed file "
"should not be done."
msgstr ""

# type: defun
#: lispref/buffers.texi:641
#, no-wrap
msgid "visited-file-modtime"
msgstr ""

# type: defun
#: lispref/buffers.texi:646
msgid ""
"This function returns the current buffer's recorded last file modification "
"time, as a list of the form @code{(@var{high} @var{low})}.  (This is the "
"same format that @code{file-attributes} uses to return time values; see @ref"
"{File Attributes}.)"
msgstr ""

# type: defun
#: lispref/buffers.texi:654
msgid ""
"If the buffer has no recorded last modification time, this function returns "
"zero.  This case occurs, for instance, if the buffer is not visiting a file "
"or if the time has been explicitly cleared by @code{clear-visited-file-"
"modtime}.  Note, however, that @code{visited-file-modtime} returns a list "
"for some non-file buffers too.  For instance, in a Dired buffer listing a "
"directory, it returns the last modification time of that directory, as "
"recorded by Dired."
msgstr ""

# type: defun
#: lispref/buffers.texi:657
msgid ""
"For a new buffer visiting a not yet existing file, @var{high} is @minus{}1 "
"and @var{low} is 65535, that is,"
msgstr ""

# type: w{#1}
#: lispref/buffers.texi:659
msgid "2**16 - 1."
msgstr ""

# type: tex
#: lispref/buffers.texi:662
#, no-wrap
msgid "@math{2^{16}-1}.\n"
msgstr ""

# type: defun
#: lispref/buffers.texi:666
#, no-wrap
msgid "set-visited-file-modtime &optional time"
msgstr ""

# type: defun
#: lispref/buffers.texi:671
msgid ""
"This function updates the buffer's record of the last modification time of "
"the visited file, to the value specified by @var{time} if @var{time} is not "
"@code{nil}, and otherwise to the last modification time of the visited file."
msgstr ""

# type: defun
#: lispref/buffers.texi:676
msgid ""
"If @var{time} is neither @code{nil} nor zero, it should have the form @code"
"{(@var{high} . @var{low})} or @code{(@var{high} @var{low})}, in either case "
"containing two integers, each of which holds 16 bits of the time."
msgstr ""

# type: defun
#: lispref/buffers.texi:680
msgid ""
"This function is useful if the buffer was not read from the file normally, "
"or if the file itself has been changed for some known benign reason."
msgstr ""

# type: defun
#: lispref/buffers.texi:682
#, no-wrap
msgid "ask-user-about-supersession-threat filename"
msgstr ""

# type: defun
#: lispref/buffers.texi:688
msgid ""
"This function is used to ask a user how to proceed after an attempt to "
"modify an buffer visiting file @var{filename} when the file is newer than "
"the buffer text.  Emacs detects this because the modification time of the "
"file on disk is newer than the last save-time of the buffer.  This means "
"some other program has probably altered the file."
msgstr ""

# type: item
#: lispref/buffers.texi:689 lispref/errors.texi:106
#, no-wrap
msgid "file-supersession"
msgstr ""

# type: defun
#: lispref/buffers.texi:694
msgid ""
"Depending on the user's answer, the function may return normally, in which "
"case the modification of the buffer proceeds, or it may signal a @code{file-"
"supersession} error with data @code{(@var{filename})}, in which case the "
"proposed buffer modification is not allowed."
msgstr ""

# type: defun
#: lispref/buffers.texi:698
msgid ""
"This function is called automatically by Emacs on the proper occasions.  It "
"exists so you can customize Emacs by redefining it.  See the file @file"
"{userlock.el} for the standard definition."
msgstr ""

# type: defun
#: lispref/buffers.texi:700
msgid "See also the file locking mechanism in @ref{File Locks}."
msgstr ""

# type: section
#: lispref/buffers.texi:703
#, no-wrap
msgid "Read-Only Buffers"
msgstr ""

# type: cindex
#: lispref/buffers.texi:704
#, no-wrap
msgid "read-only buffer"
msgstr ""

# type: cindex
#: lispref/buffers.texi:705
#, no-wrap
msgid "buffer, read-only"
msgstr ""

# type: Plain text
#: lispref/buffers.texi:710
msgid ""
"If a buffer is @dfn{read-only}, then you cannot change its contents, "
"although you may change your view of the contents by scrolling and narrowing."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:712
msgid "Read-only buffers are used in two kinds of situations:"
msgstr ""

# type: itemize
#: lispref/buffers.texi:716
msgid "A buffer visiting a write-protected file is normally read-only."
msgstr ""

# type: itemize
#: lispref/buffers.texi:721
msgid ""
"Here, the purpose is to inform the user that editing the buffer with the aim "
"of saving it in the file may be futile or undesirable.  The user who wants "
"to change the buffer text despite this can do so after clearing the read-"
"only flag with @kbd{C-x C-q}."
msgstr ""

# type: itemize
#: lispref/buffers.texi:725
msgid ""
"Modes such as Dired and Rmail make buffers read-only when altering the "
"contents with the usual editing commands would probably be a mistake."
msgstr ""

# type: itemize
#: lispref/buffers.texi:729
msgid ""
"The special commands of these modes bind @code{buffer-read-only} to @code"
"{nil} (with @code{let}) or bind @code{inhibit-read-only} to @code{t} around "
"the places where they themselves change the text."
msgstr ""

# type: item
#: lispref/buffers.texi:731 lispref/errors.texi:57 lispref/locals.texi:73
#, no-wrap
msgid "buffer-read-only"
msgstr ""

# type: defvar
#: lispref/buffers.texi:734
msgid ""
"This buffer-local variable specifies whether the buffer is read-only.  The "
"buffer is read-only if this variable is non-@code{nil}."
msgstr ""

# type: defvar
#: lispref/buffers.texi:736
#, no-wrap
msgid "inhibit-read-only"
msgstr ""

# type: defvar
#: lispref/buffers.texi:744
msgid ""
"If this variable is non-@code{nil}, then read-only buffers and, depending on "
"the actual value, some or all read-only characters may be modified.  Read-"
"only characters in a buffer are those that have non-@code{nil} @code{read-"
"only} properties (either text properties or overlay properties).  @xref"
"{Special Properties}, for more information about text properties.  @xref"
"{Overlays}, for more information about overlays and their properties."
msgstr ""

# type: defvar
#: lispref/buffers.texi:749
msgid ""
"If @code{inhibit-read-only} is @code{t}, all @code{read-only} character "
"properties have no effect.  If @code{inhibit-read-only} is a list, then @code"
"{read-only} character properties have no effect if they are members of the "
"list (comparison is done with @code{eq})."
msgstr ""

# type: deffn
#: lispref/buffers.texi:751
#, no-wrap
msgid "Command toggle-read-only &optional arg"
msgstr ""

# type: deffn
#: lispref/buffers.texi:757
msgid ""
"This command toggles whether the current buffer is read-only.  It is "
"intended for interactive use; do not use it in programs.  At any given point "
"in a program, you should know whether you want the read-only flag on or off; "
"so you can set @code{buffer-read-only} explicitly to the proper value, @code"
"{t} or @code{nil}."
msgstr ""

# type: deffn
#: lispref/buffers.texi:762
msgid ""
"If @var{arg} is non-@code{nil}, it should be a raw prefix argument.  @code"
"{toggle-read-only} sets @code{buffer-read-only} to @code{t} if the numeric "
"value of that prefix argument is positive and to @code{nil} otherwise.  @xref"
"{Prefix Command Arguments}."
msgstr ""

# type: defun
#: lispref/buffers.texi:764
#, no-wrap
msgid "barf-if-buffer-read-only"
msgstr ""

# type: defun
#: lispref/buffers.texi:768
msgid ""
"This function signals a @code{buffer-read-only} error if the current buffer "
"is read-only.  @xref{Using Interactive}, for another way to signal an error "
"if the current buffer is read-only."
msgstr ""

# type: cindex
#: lispref/buffers.texi:772
#, no-wrap
msgid "buffer list"
msgstr ""

# type: Plain text
#: lispref/buffers.texi:779
msgid ""
"The @dfn{buffer list} is a list of all live buffers.  The order of the "
"buffers in the list is based primarily on how recently each buffer has been "
"displayed in a window.  Several functions, notably @code{other-buffer}, use "
"this ordering.  A buffer list displayed for the user also follows this order."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:786
msgid ""
"Creating a buffer adds it to the end of the buffer list, and killing a "
"buffer removes it.  Buffers move to the front of the list when they are "
"selected for display in a window (@pxref{Displaying Buffers}), and to the "
"end when they are buried (see @code{bury-buffer}, below).  There are no "
"functions available to the Lisp programmer which directly manipulate the "
"buffer list."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:794
msgid ""
"In addition to the fundamental Emacs buffer list, each frame has its own "
"version of the buffer list, in which the buffers that have been selected in "
"that frame come first, starting with the buffers most recently selected @emph"
"{in that frame}.  (This order is recorded in @var{frame}'s @code{buffer-"
"list} frame parameter; see @ref{Buffer Parameters}.)  The buffers that were "
"never selected in @var{frame} come afterward, ordered according to the "
"fundamental Emacs buffer list."
msgstr ""

# type: defun
#: lispref/buffers.texi:795
#, no-wrap
msgid "buffer-list &optional frame"
msgstr ""

# type: defun
#: lispref/buffers.texi:799
msgid ""
"This function returns the buffer list, including all buffers, even those "
"whose names begin with a space.  The elements are actual buffers, not their "
"names."
msgstr ""

# type: defun
#: lispref/buffers.texi:804
msgid ""
"If @var{frame} is a frame, this returns @var{frame}'s buffer list.  If @var"
"{frame} is @code{nil}, the fundamental Emacs buffer list is used: all the "
"buffers appear in order of most recent selection, regardless of which frames "
"they were selected in."
msgstr ""

# type: group
#: lispref/buffers.texi:811
#, no-wrap
msgid ""
"(buffer-list)\n"
"     @result{} (#<buffer buffers.texi>\n"
"         #<buffer  *Minibuf-1*> #<buffer buffer.c>\n"
"         #<buffer *Help*> #<buffer TAGS>)\n"
msgstr ""

# type: group
#: lispref/buffers.texi:819
#, no-wrap
msgid ""
";; @r{Note that the name of the minibuffer}\n"
";;   @r{begins with a space!}\n"
"(mapcar (function buffer-name) (buffer-list))\n"
"    @result{} (\"buffers.texi\" \" *Minibuf-1*\"\n"
"        \"buffer.c\" \"*Help*\" \"TAGS\")\n"
msgstr ""

# type: Plain text
#: lispref/buffers.texi:828
msgid ""
"The list that @code{buffer-list} returns is constructed specifically by @code"
"{buffer-list}; it is not an internal Emacs data structure, and modifying it "
"has no effect on the order of buffers.  If you want to change the order of "
"buffers in the frame-independent buffer list, here is an easy way:"
msgstr ""

# type: example
#: lispref/buffers.texi:834
#, no-wrap
msgid ""
"(defun reorder-buffer-list (new-list)\n"
"  (while new-list\n"
"    (bury-buffer (car new-list))\n"
"    (setq new-list (cdr new-list))))\n"
msgstr ""

# type: Plain text
#: lispref/buffers.texi:839
msgid ""
"With this method, you can specify any order for the list, but there is no "
"danger of losing a buffer or adding something that is not a valid live "
"buffer."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:843
msgid ""
"To change the order or value of a frame's buffer list, set the frame's @code"
"{buffer-list} frame parameter with @code{modify-frame-parameters} (@pxref"
"{Parameter Access})."
msgstr ""

# type: defun
#: lispref/buffers.texi:844
#, no-wrap
msgid "other-buffer &optional buffer visible-ok frame"
msgstr ""

# type: defun
#: lispref/buffers.texi:850
msgid ""
"This function returns the first buffer in the buffer list other than @var"
"{buffer}.  Usually this is the buffer selected most recently (in frame @var"
"{frame} or else the currently selected frame, @pxref{Input Focus}), aside "
"from @var{buffer}.  Buffers whose names start with a space are not "
"considered at all."
msgstr ""

# type: defun
#: lispref/buffers.texi:854
msgid ""
"If @var{buffer} is not supplied (or if it is not a buffer), then @code{other-"
"buffer} returns the first buffer in the selected frame's buffer list that is "
"not now visible in any window in a visible frame."
msgstr ""

# type: defun
#: lispref/buffers.texi:859
msgid ""
"If @var{frame} has a non-@code{nil} @code{buffer-predicate} parameter, then "
"@code{other-buffer} uses that predicate to decide which buffers to "
"consider.  It calls the predicate once for each buffer, and if the value is "
"@code{nil}, that buffer is ignored.  @xref{Buffer Parameters}."
msgstr ""

# type: defun
#: lispref/buffers.texi:865
msgid ""
"If @var{visible-ok} is @code{nil}, @code{other-buffer} avoids returning a "
"buffer visible in any window on any visible frame, except as a last resort.  "
"If @var{visible-ok} is non-@code{nil}, then it does not matter whether a "
"buffer is displayed somewhere or not."
msgstr ""

# type: defun
#: lispref/buffers.texi:868
msgid ""
"If no suitable buffer exists, the buffer @samp{*scratch*} is returned (and "
"created, if necessary)."
msgstr ""

# type: deffn
#: lispref/buffers.texi:870
#, no-wrap
msgid "Command bury-buffer &optional buffer-or-name"
msgstr ""

# type: deffn
#: lispref/buffers.texi:876
msgid ""
"This function puts @var{buffer-or-name} at the end of the buffer list, "
"without changing the order of any of the other buffers on the list.  This "
"buffer therefore becomes the least desirable candidate for @code{other-"
"buffer} to return.  The argument can be either a buffer itself or the name "
"of one."
msgstr ""

# type: deffn
#: lispref/buffers.texi:881
msgid ""
"@code{bury-buffer} operates on each frame's @code{buffer-list} parameter as "
"well as the frame-independent Emacs buffer list; therefore, the buffer that "
"you bury will come last in the value of @code{(buffer-list @var{frame})} and "
"in the value of @code{(buffer-list nil)}."
msgstr ""

# type: deffn
#: lispref/buffers.texi:887
msgid ""
"If @var{buffer-or-name} is @code{nil} or omitted, this means to bury the "
"current buffer.  In addition, if the buffer is displayed in the selected "
"window, this switches to some other buffer (obtained using @code{other-"
"buffer}) in the selected window.  But if the buffer is displayed in some "
"other window, it remains displayed there."
msgstr ""

# type: deffn
#: lispref/buffers.texi:890
msgid ""
"To replace a buffer in all the windows that display it, use @code{replace-"
"buffer-in-windows}.  @xref{Buffers and Windows}."
msgstr ""

# type: cindex
#: lispref/buffers.texi:894
#, no-wrap
msgid "creating buffers"
msgstr ""

# type: cindex
#: lispref/buffers.texi:895
#, no-wrap
msgid "buffers, creating"
msgstr ""

# type: Plain text
#: lispref/buffers.texi:901
msgid ""
"This section describes the two primitives for creating buffers.  @code{get-"
"buffer-create} creates a buffer if it finds no existing buffer with the "
"specified name; @code{generate-new-buffer} always creates a new buffer and "
"gives it a unique name."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:906
msgid ""
"Other functions you can use to create buffers include @code{with-output-to-"
"temp-buffer} (@pxref{Temporary Displays}) and @code{create-file-buffer} "
"(@pxref{Visiting Files}).  Starting a subprocess can also create a buffer "
"(@pxref{Processes})."
msgstr ""

# type: defun
#: lispref/buffers.texi:907
#, no-wrap
msgid "get-buffer-create name"
msgstr ""

# type: defun
#: lispref/buffers.texi:912
msgid ""
"This function returns a buffer named @var{name}.  It returns a live buffer "
"with that name, if one exists; otherwise, it creates a new buffer.  The "
"buffer does not become the current buffer---this function does not change "
"which buffer is current."
msgstr ""

# type: defun
#: lispref/buffers.texi:916
msgid ""
"If @var{name} is a buffer instead of a string, it is returned, even if it is "
"dead.  An error is signaled if @var{name} is neither a string nor a buffer."
msgstr ""

# type: group
#: lispref/buffers.texi:921
#, no-wrap
msgid ""
"(get-buffer-create \"foo\")\n"
"     @result{} #<buffer foo>\n"
msgstr ""

# type: defun
#: lispref/buffers.texi:928
msgid ""
"The major mode for a newly created buffer is set to Fundamental mode.  (The "
"variable @code{default-major-mode} is handled at a higher level; see @ref"
"{Auto Major Mode}.)  If the name begins with a space, the buffer initially "
"disables undo information recording (@pxref{Undo})."
msgstr ""

# type: defun
#: lispref/buffers.texi:930
#, no-wrap
msgid "generate-new-buffer name"
msgstr ""

# type: defun
#: lispref/buffers.texi:937
msgid ""
"This function returns a newly created, empty buffer, but does not make it "
"current.  If there is no buffer named @var{name}, then that is the name of "
"the new buffer.  If that name is in use, this function adds suffixes of the "
"form @samp{<@var{n}>} to @var{name}, where @var{n} is an integer.  It tries "
"successive integers starting with 2 until it finds an available name."
msgstr ""

# type: defun
#: lispref/buffers.texi:939
msgid "An error is signaled if @var{name} is not a string."
msgstr ""

# type: group
#: lispref/buffers.texi:944
#, no-wrap
msgid ""
"(generate-new-buffer \"bar\")\n"
"     @result{} #<buffer bar>\n"
msgstr ""

# type: group
#: lispref/buffers.texi:948
#, no-wrap
msgid ""
"(generate-new-buffer \"bar\")\n"
"     @result{} #<buffer bar<2>>\n"
msgstr ""

# type: group
#: lispref/buffers.texi:952
#, no-wrap
msgid ""
"(generate-new-buffer \"bar\")\n"
"     @result{} #<buffer bar<3>>\n"
msgstr ""

# type: defun
#: lispref/buffers.texi:958
msgid ""
"The major mode for the new buffer is set to Fundamental mode.  The variable "
"@code{default-major-mode} is handled at a higher level.  @xref{Auto Major "
"Mode}."
msgstr ""

# type: defun
#: lispref/buffers.texi:961
msgid ""
"See the related function @code{generate-new-buffer-name} in @ref{Buffer "
"Names}."
msgstr ""

# type: cindex
#: lispref/buffers.texi:965
#, no-wrap
msgid "killing buffers"
msgstr ""

# type: cindex
#: lispref/buffers.texi:966
#, no-wrap
msgid "buffers, killing"
msgstr ""

# type: Plain text
#: lispref/buffers.texi:970
msgid ""
"@dfn{Killing a buffer} makes its name unknown to Emacs and makes the memory "
"space it occupied available for other use."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:976
msgid ""
"The buffer object for the buffer that has been killed remains in existence "
"as long as anything refers to it, but it is specially marked so that you "
"cannot make it current or display it.  Killed buffers retain their identity, "
"however; if you kill two distinct buffers, they remain distinct according to "
"@code{eq} although both are dead."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:983
msgid ""
"If you kill a buffer that is current or displayed in a window, Emacs "
"automatically selects or displays some other buffer instead.  This means "
"that killing a buffer can in general change the current buffer.  Therefore, "
"when you kill a buffer, you should also take the precautions associated with "
"changing the current buffer (unless you happen to know that the buffer being "
"killed isn't current).  @xref{Current Buffer}."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:986
msgid ""
"If you kill a buffer that is the base buffer of one or more indirect "
"buffers, the indirect buffers are automatically killed as well."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:989
msgid ""
"The @code{buffer-name} of a killed buffer is @code{nil}.  You can use this "
"feature to test whether a buffer has been killed:"
msgstr ""

# type: group
#: lispref/buffers.texi:995
#, no-wrap
msgid ""
"(defun buffer-killed-p (buffer)\n"
"  \"Return t if BUFFER is killed.\"\n"
"  (not (buffer-name buffer)))\n"
msgstr ""

# type: deffn
#: lispref/buffers.texi:998
#, no-wrap
msgid "Command kill-buffer buffer-or-name"
msgstr ""

# type: deffn
#: lispref/buffers.texi:1002
msgid ""
"This function kills the buffer @var{buffer-or-name}, freeing all its memory "
"for other uses or to be returned to the operating system.  If @var{buffer-or-"
"name} is @code{nil}, it kills the current buffer."
msgstr ""

# type: deffn
#: lispref/buffers.texi:1007
msgid ""
"Any processes that have this buffer as the @code{process-buffer} are sent "
"the @code{SIGHUP} signal, which normally causes them to terminate.  (The "
"basic meaning of @code{SIGHUP} is that a dialup line has been "
"disconnected.)  @xref{Signals to Processes}."
msgstr ""

# type: deffn
#: lispref/buffers.texi:1013
msgid ""
"If the buffer is visiting a file and contains unsaved changes, @code{kill-"
"buffer} asks the user to confirm before the buffer is killed.  It does this "
"even if not called interactively.  To prevent the request for confirmation, "
"clear the modified flag before calling @code{kill-buffer}.  @xref{Buffer "
"Modification}."
msgstr ""

# type: deffn
#: lispref/buffers.texi:1015
msgid "Killing a buffer that is already dead has no effect."
msgstr ""

# type: deffn
#: lispref/buffers.texi:1019
msgid ""
"This function returns @code{t} if it actually killed the buffer.  It returns "
"@code{nil} if the user refuses to confirm or if @var{buffer-or-name} was "
"already dead."
msgstr ""

# type: smallexample
#: lispref/buffers.texi:1024
#, no-wrap
msgid ""
"(kill-buffer \"foo.unchanged\")\n"
"     @result{} t\n"
"(kill-buffer \"foo.changed\")\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/buffers.texi:1028
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"Buffer foo.changed modified; kill anyway? (yes or no) @kbd{yes}\n"
"---------- Buffer: Minibuffer ----------\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/buffers.texi:1030
#, no-wrap
msgid "     @result{} t\n"
msgstr ""

# type: item
#: lispref/buffers.texi:1033 lispref/hooks.texi:197
#, no-wrap
msgid "kill-buffer-query-functions"
msgstr ""

# type: defvar
#: lispref/buffers.texi:1040
msgid ""
"After confirming unsaved changes, @code{kill-buffer} calls the functions in "
"the list @code{kill-buffer-query-functions}, in order of appearance, with no "
"arguments.  The buffer being killed is the current buffer when they are "
"called.  The idea of this feature is that these functions will ask for "
"confirmation from the user.  If any of them returns @code{nil}, @code{kill-"
"buffer} spares the buffer's life."
msgstr ""

# type: item
#: lispref/buffers.texi:1042 lispref/hooks.texi:194
#, no-wrap
msgid "kill-buffer-hook"
msgstr ""

# type: defvar
#: lispref/buffers.texi:1048
msgid ""
"This is a normal hook run by @code{kill-buffer} after asking all the "
"questions it is going to ask, just before actually killing the buffer.  The "
"buffer to be killed is current when the hook functions run.  @xref{Hooks}.  "
"This variable is a permanent local, so its local binding is not cleared by "
"changing major modes."
msgstr ""

# type: item
#: lispref/buffers.texi:1050 lispref/locals.texi:67
#, no-wrap
msgid "buffer-offer-save"
msgstr ""

# type: defvar
#: lispref/buffers.texi:1058
msgid ""
"This variable, if non-@code{nil} in a particular buffer, tells @code{save-"
"buffers-kill-emacs} and @code{save-some-buffers} (if the second optional "
"argument to that function is @code{t}) to offer to save that buffer, just as "
"they offer to save file-visiting buffers.  @xref{Definition of save-some-"
"buffers}.  The variable @code{buffer-offer-save} automatically becomes "
"buffer-local when set for any reason.  @xref{Buffer-Local Variables}."
msgstr ""

# type: item
#: lispref/buffers.texi:1060 lispref/locals.texi:70
#, no-wrap
msgid "buffer-save-without-query"
msgstr ""

# type: defvar
#: lispref/buffers.texi:1065
msgid ""
"This variable, if non-@code{nil} in a particular buffer, tells @code{save-"
"buffers-kill-emacs} and @code{save-some-buffers} to save this buffer (if "
"it's modified) without asking the user.  The variable automatically becomes "
"buffer-local when set for any reason."
msgstr ""

# type: defun
#: lispref/buffers.texi:1067
#, no-wrap
msgid "buffer-live-p object"
msgstr ""

# type: defun
#: lispref/buffers.texi:1070
msgid ""
"This function returns @code{t} if @var{object} is a buffer which has not "
"been killed, @code{nil} otherwise."
msgstr ""

# type: cindex
#: lispref/buffers.texi:1074
#, no-wrap
msgid "indirect buffers"
msgstr ""

# type: cindex
#: lispref/buffers.texi:1075
#, no-wrap
msgid "base buffer"
msgstr ""

# type: Plain text
#: lispref/buffers.texi:1081
msgid ""
"An @dfn{indirect buffer} shares the text of some other buffer, which is "
"called the @dfn{base buffer} of the indirect buffer.  In some ways it is the "
"analogue, for buffers, of a symbolic link among files.  The base buffer may "
"not itself be an indirect buffer."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:1086
msgid ""
"The text of the indirect buffer is always identical to the text of its base "
"buffer; changes made by editing either one are visible immediately in the "
"other.  This includes the text properties as well as the characters "
"themselves."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:1093
msgid ""
"In all other respects, the indirect buffer and its base buffer are "
"completely separate.  They have different names, independent values of "
"point, independent narrowing, independent markers and overlays (though "
"inserting or deleting text in either buffer relocates the markers and "
"overlays for both), independent major modes, and independent buffer-local "
"variable bindings."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:1097
msgid ""
"An indirect buffer cannot visit a file, but its base buffer can.  If you try "
"to save the indirect buffer, that actually saves the base buffer."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:1101
msgid ""
"Killing an indirect buffer has no effect on its base buffer.  Killing the "
"base buffer effectively kills the indirect buffer in that it cannot ever "
"again be the current buffer."
msgstr ""

# type: deffn
#: lispref/buffers.texi:1102
#, no-wrap
msgid "Command make-indirect-buffer base-buffer name &optional clone"
msgstr ""

# type: deffn
#: lispref/buffers.texi:1107
msgid ""
"This creates and returns an indirect buffer named @var{name} whose base "
"buffer is @var{base-buffer}.  The argument @var{base-buffer} may be a live "
"buffer or the name (a string) of an existing buffer.  If @var{name} is the "
"name of an existing buffer, an error is signaled."
msgstr ""

# type: deffn
#: lispref/buffers.texi:1113
msgid ""
"If @var{clone} is non-@code{nil}, then the indirect buffer originally shares "
"the ``state'' of @var{base-buffer} such as major mode, minor modes, buffer "
"local variables and so on.  If @var{clone} is omitted or @code{nil} the "
"indirect buffer's state is set to the default state for new buffers."
msgstr ""

# type: deffn
#: lispref/buffers.texi:1118
msgid ""
"If @var{base-buffer} is an indirect buffer, its base buffer is used as the "
"base for the new buffer.  If, in addition, @var{clone} is non-@code{nil}, "
"the initial state is copied from the actual base buffer, not from @var{base-"
"buffer}."
msgstr ""

# type: defun
#: lispref/buffers.texi:1120
#, no-wrap
msgid "clone-indirect-buffer newname display-flag &optional norecord"
msgstr ""

# type: defun
#: lispref/buffers.texi:1125
msgid ""
"This function creates and returns a new indirect buffer that shares the "
"current buffer's base buffer and copies the rest of the current buffer's "
"attributes.  (If the current buffer is not indirect, it is used as the base "
"buffer.)"
msgstr ""

# type: defun
#: lispref/buffers.texi:1130
msgid ""
"If @var{display-flag} is non-@code{nil}, that means to display the new "
"buffer by calling @code{pop-to-buffer}.  If @var{norecord} is non-@code"
"{nil}, that means not to put the new buffer to the front of the buffer list."
msgstr ""

# type: defun
#: lispref/buffers.texi:1132
#, no-wrap
msgid "buffer-base-buffer &optional buffer"
msgstr ""

# type: defun
#: lispref/buffers.texi:1137
msgid ""
"This function returns the base buffer of @var{buffer}, which defaults to the "
"current buffer.  If @var{buffer} is not indirect, the value is @code{nil}.  "
"Otherwise, the value is another buffer, which is never an indirect buffer."
msgstr ""

# type: section
#: lispref/buffers.texi:1140
#, no-wrap
msgid "The Buffer Gap"
msgstr ""

# type: Plain text
#: lispref/buffers.texi:1150
msgid ""
"Emacs buffers are implemented using an invisible @dfn{gap} to make insertion "
"and deletion faster.  Insertion works by filling in part of the gap, and "
"deletion adds to the gap.  Of course, this means that the gap must first be "
"moved to the locus of the insertion or deletion.  Emacs moves the gap only "
"when you try to insert or delete.  This is why your first editing command in "
"one part of a large buffer, after previously editing in another far-away "
"part, sometimes involves a noticeable delay."
msgstr ""

# type: Plain text
#: lispref/buffers.texi:1154
msgid ""
"This mechanism works invisibly, and Lisp code should never be affected by "
"the gap's current location, but these functions are available for getting "
"information about the gap status."
msgstr ""

# type: defun
#: lispref/buffers.texi:1155
#, no-wrap
msgid "gap-position"
msgstr ""

# type: defun
#: lispref/buffers.texi:1157
msgid "This function returns the current gap position in the current buffer."
msgstr ""

# type: defun
#: lispref/buffers.texi:1159
#, no-wrap
msgid "gap-size"
msgstr ""

# type: defun
#: lispref/buffers.texi:1161
msgid "This function returns the current gap size of the current buffer."
msgstr ""

# type: ignore
#: lispref/buffers.texi:1165
#, no-wrap
msgid "   arch-tag: 2e53cfab-5691-41f6-b5a8-9c6a3462399c\n"
msgstr "   arch-tag: 2e53cfab-5691-41f6-b5a8-9c6a3462399c\n"

# type: menu
#: lispref/commands.texi:7 lispref/commands.texi:8 lispref/elisp.texi:139
#: lispref/keymaps.texi:7 lispref/minibuf.texi:7 lispref/vol1.texi:240
#: lispref/vol1.texi:574 lispref/vol2.texi:241 lispref/vol2.texi:575
#, no-wrap
msgid "Command Loop"
msgstr ""

# type: menu
#: lispref/commands.texi:7 lispref/elisp.texi:139 lispref/keymaps.texi:7
#: lispref/keymaps.texi:8 lispref/modes.texi:7 lispref/vol1.texi:240
#: lispref/vol1.texi:598 lispref/vol2.texi:241 lispref/vol2.texi:599
#, no-wrap
msgid "Keymaps"
msgstr ""

# type: menu
#: lispref/commands.texi:7 lispref/elisp.texi:139 lispref/minibuf.texi:7
#: lispref/minibuf.texi:8 lispref/streams.texi:7 lispref/vol1.texi:240
#: lispref/vol1.texi:554 lispref/vol2.texi:241 lispref/vol2.texi:555
#, no-wrap
msgid "Minibuffers"
msgstr ""

# type: cindex
#: lispref/commands.texi:9
#, no-wrap
msgid "editor command loop"
msgstr ""

# type: cindex
#: lispref/commands.texi:10
#, no-wrap
msgid "command loop"
msgstr ""

# type: Plain text
#: lispref/commands.texi:16
msgid ""
"When you run Emacs, it enters the @dfn{editor command loop} almost "
"immediately.  This loop reads key sequences, executes their definitions, and "
"displays the results.  In this chapter, we describe how these things are "
"done, and the subroutines that allow Lisp programs to do them."
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/commands.texi:36 lispref/vol1.texi:589
#: lispref/vol2.texi:590
#, no-wrap
msgid "Command Overview"
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/vol1.texi:589 lispref/vol2.texi:590
msgid "How the command loop reads commands."
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/commands.texi:97 lispref/commands.texi:98
#: lispref/vol1.texi:589 lispref/vol1.texi:591 lispref/vol2.texi:590
#: lispref/vol2.texi:592
#, no-wrap
msgid "Defining Commands"
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/vol1.texi:589 lispref/vol2.texi:590
msgid "Specifying how a function should read arguments."
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/commands.texi:527
#: lispref/commands.texi:528 lispref/eval.texi:460 lispref/vol1.texi:589
#: lispref/vol2.texi:590
#, no-wrap
msgid "Interactive Call"
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/vol1.texi:589 lispref/vol2.texi:590
msgid "Calling a command, so that it will read arguments."
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/commands.texi:714 lispref/vol1.texi:589
#: lispref/vol2.texi:590
#, no-wrap
msgid "Command Loop Info"
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/vol1.texi:589 lispref/vol2.texi:590
msgid "Variables set by the command loop for you to examine."
msgstr ""

# type: node
#: lispref/commands.texi:34 lispref/commands.texi:864
#, no-wrap
msgid "Adjusting Point"
msgstr ""

# type: menu
#: lispref/commands.texi:34
msgid "Adjustment of point after a command."
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/commands.texi:895
#: lispref/commands.texi:896 lispref/vol1.texi:589 lispref/vol2.texi:590
#, no-wrap
msgid "Input Events"
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/vol1.texi:589 lispref/vol2.texi:590
msgid "What input looks like when you read it."
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/commands.texi:2079
#: lispref/commands.texi:2080 lispref/vol1.texi:589 lispref/vol2.texi:590
#, no-wrap
msgid "Reading Input"
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/vol1.texi:589 lispref/vol2.texi:590
msgid "How to read input events from the keyboard or mouse."
msgstr ""

# type: section
#: lispref/commands.texi:34 lispref/commands.texi:2636
#: lispref/commands.texi:2637
#, no-wrap
msgid "Special Events"
msgstr ""

# type: menu
#: lispref/commands.texi:34
msgid "Events processed immediately and individually."
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/commands.texi:2663 lispref/vol1.texi:589
#: lispref/vol1.texi:928 lispref/vol2.texi:590 lispref/vol2.texi:929
#, no-wrap
msgid "Waiting"
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/vol1.texi:589 lispref/vol2.texi:590
msgid "Waiting for user input or elapsed time."
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/commands.texi:2724
#: lispref/commands.texi:2725 lispref/vol1.texi:589 lispref/vol2.texi:590
#, no-wrap
msgid "Quitting"
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/vol1.texi:589 lispref/vol2.texi:590
msgid "How @kbd{C-g} works"
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/vol1.texi:589 lispref/vol2.texi:590
msgid "How to catch or defer quitting."
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/commands.texi:2850
#: lispref/commands.texi:2851 lispref/vol1.texi:589 lispref/vol2.texi:590
#, no-wrap
msgid "Prefix Command Arguments"
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/vol1.texi:589 lispref/vol2.texi:590
msgid "How the commands to set prefix args work."
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/commands.texi:2990
#: lispref/commands.texi:2991 lispref/vol1.texi:589 lispref/vol2.texi:590
#, no-wrap
msgid "Recursive Editing"
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/vol1.texi:589 lispref/vol2.texi:590
msgid "Entering a recursive edit,"
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/vol1.texi:589 lispref/vol2.texi:590
msgid "and why you usually shouldn't."
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/commands.texi:3109
#: lispref/commands.texi:3110 lispref/vol1.texi:589 lispref/vol2.texi:590
#, no-wrap
msgid "Disabling Commands"
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/vol1.texi:589 lispref/vol2.texi:590
msgid "How the command loop handles disabled commands."
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/commands.texi:3170
#: lispref/commands.texi:3171 lispref/vol1.texi:589 lispref/vol2.texi:590
#, no-wrap
msgid "Command History"
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/vol1.texi:589 lispref/vol2.texi:590
msgid "How the command history is set up, and how accessed."
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/commands.texi:3213
#: lispref/commands.texi:3214 lispref/vol1.texi:589 lispref/vol2.texi:590
#, no-wrap
msgid "Keyboard Macros"
msgstr ""

# type: menu
#: lispref/commands.texi:34 lispref/vol1.texi:589 lispref/vol2.texi:590
msgid "How keyboard macros are implemented."
msgstr ""

# type: section
#: lispref/commands.texi:37
#, no-wrap
msgid "Command Loop Overview"
msgstr ""

# type: Plain text
#: lispref/commands.texi:46
msgid ""
"The first thing the command loop must do is read a key sequence, which is a "
"sequence of events that translates into a command.  It does this by calling "
"the function @code{read-key-sequence}.  Your Lisp code can also call this "
"function (@pxref{Key Sequence Input}).  Lisp programs can also do input at a "
"lower level with @code{read-event} (@pxref{Reading One Event}) or discard "
"pending input with @code{discard-input} (@pxref{Event Input Misc})."
msgstr ""

# type: Plain text
#: lispref/commands.texi:53
msgid ""
"The key sequence is translated into a command through the currently active "
"keymaps.  @xref{Key Lookup}, for information on how this is done.  The "
"result should be a keyboard macro or an interactively callable function.  If "
"the key is @kbd{M-x}, then it reads the name of another command, which it "
"then calls.  This is done by the command @code{execute-extended-command} "
"(@pxref{Interactive Call})."
msgstr ""

# type: Plain text
#: lispref/commands.texi:65
msgid ""
"To execute a command requires first reading the arguments for it.  This is "
"done by calling @code{command-execute} (@pxref{Interactive Call}).  For "
"commands written in Lisp, the @code{interactive} specification says how to "
"read the arguments.  This may use the prefix argument (@pxref{Prefix Command "
"Arguments}) or may read with prompting in the minibuffer (@pxref"
"{Minibuffers}).  For example, the command @code{find-file} has an @code"
"{interactive} specification which says to read a file name using the "
"minibuffer.  The command's function body does not use the minibuffer; if you "
"call this command from Lisp code as a function, you must supply the file "
"name string as an ordinary Lisp function argument."
msgstr ""

# type: Plain text
#: lispref/commands.texi:69
msgid ""
"If the command is a string or vector (i.e., a keyboard macro) then @code"
"{execute-kbd-macro} is used to execute it.  You can call this function "
"yourself (@pxref{Keyboard Macros})."
msgstr ""

# type: Plain text
#: lispref/commands.texi:72
msgid ""
"To terminate the execution of a running command, type @kbd{C-g}.  This "
"character causes @dfn{quitting} (@pxref{Quitting})."
msgstr ""

# type: item
#: lispref/commands.texi:73 lispref/hooks.texi:264
#, no-wrap
msgid "pre-command-hook"
msgstr ""

# type: defvar
#: lispref/commands.texi:78
msgid ""
"The editor command loop runs this normal hook before each command.  At that "
"time, @code{this-command} contains the command that is about to run, and "
"@code{last-command} describes the previous command.  @xref{Command Loop "
"Info}."
msgstr ""

# type: item
#: lispref/commands.texi:80 lispref/hooks.texi:258
#, no-wrap
msgid "post-command-hook"
msgstr ""

# type: defvar
#: lispref/commands.texi:86
msgid ""
"The editor command loop runs this normal hook after each command (including "
"commands terminated prematurely by quitting or by errors), and also when the "
"command loop is first entered.  At that time, @code{this-command} refers to "
"the command that just ran, and @code{last-command} refers to the command "
"before that."
msgstr ""

# type: Plain text
#: lispref/commands.texi:92
msgid ""
"Quitting is suppressed while running @code{pre-command-hook} and @code{post-"
"command-hook}.  If an error happens while executing one of these hooks, it "
"terminates execution of the hook, and clears the hook variable to @code{nil} "
"so as to prevent an infinite loop of errors."
msgstr ""

# type: Plain text
#: lispref/commands.texi:96
msgid ""
"A request coming into the Emacs server (@pxref{Emacs Server,,, emacs, The "
"GNU Emacs Manual}) runs these two hooks just as a keyboard command does."
msgstr ""

# type: cindex
#: lispref/commands.texi:99
#, no-wrap
msgid "defining commands"
msgstr ""

# type: cindex
#: lispref/commands.texi:100
#, no-wrap
msgid "commands, defining"
msgstr ""

# type: cindex
#: lispref/commands.texi:101
#, no-wrap
msgid "functions, making them interactive"
msgstr ""

# type: cindex
#: lispref/commands.texi:102
#, no-wrap
msgid "interactive function"
msgstr ""

# type: Plain text
#: lispref/commands.texi:109
msgid ""
"A Lisp function becomes a command when its body contains, at top level, a "
"form that calls the special form @code{interactive}.  This form does nothing "
"when actually executed, but its presence serves as a flag to indicate that "
"interactive calling is permitted.  Its argument controls the reading of "
"arguments for an interactive call."
msgstr ""

# type: menu
#: lispref/commands.texi:115 lispref/commands.texi:117 lispref/vol1.texi:596
#: lispref/vol2.texi:597
#, no-wrap
msgid "Using Interactive"
msgstr ""

# type: menu
#: lispref/commands.texi:115 lispref/vol1.texi:596 lispref/vol2.texi:597
msgid "General rules for @code{interactive}."
msgstr ""

# type: menu
#: lispref/commands.texi:115 lispref/commands.texi:261 lispref/vol1.texi:596
#: lispref/vol2.texi:597
#, no-wrap
msgid "Interactive Codes"
msgstr ""

# type: menu
#: lispref/commands.texi:115 lispref/vol1.texi:596 lispref/vol2.texi:597
msgid "The standard letter-codes for reading arguments"
msgstr ""

# type: menu
#: lispref/commands.texi:115 lispref/vol1.texi:596 lispref/vol2.texi:597
msgid "in various ways."
msgstr ""

# type: menu
#: lispref/commands.texi:115 lispref/commands.texi:476 lispref/vol1.texi:596
#: lispref/vol2.texi:597
#, no-wrap
msgid "Interactive Examples"
msgstr ""

# type: menu
#: lispref/commands.texi:115 lispref/vol1.texi:596 lispref/vol2.texi:597
msgid "Examples of how to read interactive arguments."
msgstr ""

# type: subsection
#: lispref/commands.texi:118
#, no-wrap
msgid "Using @code{interactive}"
msgstr ""

# type: cindex
#: lispref/commands.texi:119
#, no-wrap
msgid "arguments, interactive entry"
msgstr ""

# type: Plain text
#: lispref/commands.texi:124
msgid ""
"This section describes how to write the @code{interactive} form that makes a "
"Lisp function an interactively-callable command, and how to examine a "
"command's @code{interactive} form."
msgstr ""

# type: defspec
#: lispref/commands.texi:125
#, no-wrap
msgid "interactive arg-descriptor"
msgstr ""

# type: defspec
#: lispref/commands.texi:131
msgid ""
"This special form declares that the function in which it appears is a "
"command, and that it may therefore be called interactively (via @kbd{M-x} or "
"by entering a key sequence bound to it).  The argument @var{arg-descriptor} "
"declares how to compute the arguments to the command when the command is "
"called interactively."
msgstr ""

# type: defspec
#: lispref/commands.texi:135
msgid ""
"A command may be called from Lisp programs like any other function, but then "
"the caller supplies the arguments and @var{arg-descriptor} has no effect."
msgstr ""

# type: defspec
#: lispref/commands.texi:143
msgid ""
"The @code{interactive} form has its effect because the command loop "
"(actually, its subroutine @code{call-interactively}) scans through the "
"function definition looking for it, before calling the function.  Once the "
"function is called, all its body forms including the @code{interactive} form "
"are executed, but at this time @code{interactive} simply returns @code{nil} "
"without even evaluating its argument."
msgstr ""

# type: Plain text
#: lispref/commands.texi:146
msgid "There are three possibilities for the argument @var{arg-descriptor}:"
msgstr ""

# type: itemize
#: lispref/commands.texi:152
msgid ""
"It may be omitted or @code{nil}; then the command is called with no "
"arguments.  This leads quickly to an error if the command requires one or "
"more arguments."
msgstr ""

# type: itemize
#: lispref/commands.texi:158
msgid ""
"It may be a string; then its contents should consist of a code character "
"followed by a prompt (which some code characters use and some ignore).  The "
"prompt ends either with the end of the string or with a newline.  Here is a "
"simple example:"
msgstr ""

# type: smallexample
#: lispref/commands.texi:161
#, no-wrap
msgid "(interactive \"bFrobnicate buffer: \")\n"
msgstr ""

# type: itemize
#: lispref/commands.texi:167
msgid ""
"The code letter @samp{b} says to read the name of an existing buffer, with "
"completion.  The buffer name is the sole argument passed to the command.  "
"The rest of the string is a prompt."
msgstr ""

# type: itemize
#: lispref/commands.texi:172
msgid ""
"If there is a newline character in the string, it terminates the prompt.  If "
"the string does not end there, then the rest of the string should contain "
"another code character and prompt, specifying another argument.  You can "
"specify any number of arguments in this way."
msgstr ""

# type: itemize
#: lispref/commands.texi:179
msgid ""
"The prompt string can use @samp{%} to include previous argument values "
"(starting with the first argument) in the prompt.  This is done using @code"
"{format} (@pxref{Formatting Strings}).  For example, here is how you could "
"read the name of an existing buffer followed by a new name to give to that "
"buffer:"
msgstr ""

# type: group
#: lispref/commands.texi:183
#, no-wrap
msgid "(interactive \"bBuffer to rename: \\nsRename buffer %s to: \")\n"
msgstr ""

# type: cindex
#: lispref/commands.texi:186
#, no-wrap
msgid "@samp{*} in @code{interactive}"
msgstr ""

# type: cindex
#: lispref/commands.texi:187
#, no-wrap
msgid "read-only buffers in interactive"
msgstr ""

# type: itemize
#: lispref/commands.texi:190
msgid ""
"If the first character in the string is @samp{*}, then an error is signaled "
"if the buffer is read-only."
msgstr ""

# type: cindex
#: lispref/commands.texi:191
#, no-wrap
msgid "@samp{@@} in @code{interactive}"
msgstr ""

# type: itemize
#: lispref/commands.texi:197
msgid ""
"If the first character in the string is @samp{@@}, and if the key sequence "
"used to invoke the command includes any mouse events, then the window "
"associated with the first of those events is selected before the command is "
"run."
msgstr ""

# type: itemize
#: lispref/commands.texi:202
msgid ""
"You can use @samp{*} and @samp{@@} together; the order does not matter.  "
"Actual reading of arguments is controlled by the rest of the prompt string "
"(starting with the first character that is not @samp{*} or @samp{@@})."
msgstr ""

# type: itemize
#: lispref/commands.texi:209
msgid ""
"It may be a Lisp expression that is not a string; then it should be a form "
"that is evaluated to get a list of arguments to pass to the command.  "
"Usually this form will call various functions to read input from the user, "
"most often through the minibuffer (@pxref{Minibuffers})  or directly from "
"the keyboard (@pxref{Reading Input})."
msgstr ""

# type: itemize
#: lispref/commands.texi:216
msgid ""
"Providing point or the mark as an argument value is also common, but if you "
"do this @emph{and} read input (whether using the minibuffer or not), be sure "
"to get the integer values of point or the mark after reading.  The current "
"buffer may be receiving subprocess output; if subprocess output arrives "
"while the command is waiting for input, it could relocate point and the mark."
msgstr ""

# type: itemize
#: lispref/commands.texi:218
msgid "Here's an example of what @emph{not} to do:"
msgstr ""

# type: smallexample
#: lispref/commands.texi:223
#, no-wrap
msgid ""
"(interactive\n"
" (list (region-beginning) (region-end)\n"
"       (read-string \"Foo: \" nil 'my-history)))\n"
msgstr ""

# type: itemize
#: lispref/commands.texi:228
msgid ""
"Here's how to avoid the problem, by examining point and the mark after "
"reading the keyboard input:"
msgstr ""

# type: smallexample
#: lispref/commands.texi:233
#, no-wrap
msgid ""
"(interactive\n"
" (let ((string (read-string \"Foo: \" nil 'my-history)))\n"
"   (list (region-beginning) (region-end) string)))\n"
msgstr ""

# type: itemize
#: lispref/commands.texi:240
msgid ""
"@strong{Warning:} the argument values should not include any data types that "
"can't be printed and then read.  Some facilities save @code{command-history} "
"in a file to be read in the subsequent sessions; if a command's arguments "
"contain a data type that prints using @samp{#<@dots{}>} syntax, those "
"facilities won't work."
msgstr ""

# type: itemize
#: lispref/commands.texi:248
msgid ""
"There are, however, a few exceptions: it is ok to use a limited set of "
"expressions such as @code{(point)}, @code{(mark)}, @code{(region-"
"beginning)}, and @code{(region-end)}, because Emacs recognizes them "
"specially and puts the expression (rather than its value) into the command "
"history.  To see whether the expression you wrote is one of these "
"exceptions, run the command, then examine @code{(car command-history)}."
msgstr ""

# type: cindex
#: lispref/commands.texi:250
#, no-wrap
msgid "examining the @code{interactive} form"
msgstr ""

# type: defun
#: lispref/commands.texi:251
#, no-wrap
msgid "interactive-form function"
msgstr ""

# type: defun
#: lispref/commands.texi:259
msgid ""
"This function returns the @code{interactive} form of @var{function}.  If @var"
"{function} is an interactively callable function (@pxref{Interactive Call}), "
"the value is the command's @code{interactive} form @code{(interactive @var"
"{spec})}, which specifies how to compute its arguments.  Otherwise, the "
"value is @code{nil}.  If @var{function} is a symbol, its function definition "
"is used."
msgstr ""

# type: subsection
#: lispref/commands.texi:263
#, no-wrap
msgid "Code Characters for @code{interactive}"
msgstr ""

# type: cindex
#: lispref/commands.texi:264
#, no-wrap
msgid "interactive code description"
msgstr ""

# type: cindex
#: lispref/commands.texi:265
#, no-wrap
msgid "description for interactive codes"
msgstr ""

# type: cindex
#: lispref/commands.texi:266
#, no-wrap
msgid "codes, interactive, description of"
msgstr ""

# type: cindex
#: lispref/commands.texi:267
#, no-wrap
msgid "characters for interactive codes"
msgstr ""

# type: Plain text
#: lispref/commands.texi:271
msgid ""
"The code character descriptions below contain a number of key words, defined "
"here as follows:"
msgstr ""

# type: menu
#: lispref/commands.texi:273 lispref/minibuf.texi:37 lispref/minibuf.texi:561
#: lispref/minibuf.texi:562 lispref/vol1.texi:561 lispref/vol1.texi:563
#: lispref/vol2.texi:562 lispref/vol2.texi:564
#, no-wrap
msgid "Completion"
msgstr ""

# type: cindex
#: lispref/commands.texi:274
#, no-wrap
msgid "interactive completion"
msgstr ""

# type: table
#: lispref/commands.texi:278
msgid ""
"Provide completion.  @key{TAB}, @key{SPC}, and @key{RET} perform name "
"completion because the argument is read using @code{completing-read} (@pxref"
"{Completion}).  @kbd{?} displays a list of possible completions."
msgstr ""

# type: item
#: lispref/commands.texi:279
#, no-wrap
msgid "Existing"
msgstr ""

# type: table
#: lispref/commands.texi:283
msgid ""
"Require the name of an existing object.  An invalid name is not accepted; "
"the commands to exit the minibuffer do not exit if the current input is not "
"valid."
msgstr ""

# type: item
#: lispref/commands.texi:284
#, no-wrap
msgid "Default"
msgstr ""

# type: cindex
#: lispref/commands.texi:285
#, no-wrap
msgid "default argument string"
msgstr ""

# type: table
#: lispref/commands.texi:288
msgid ""
"A default value of some sort is used if the user enters no text in the "
"minibuffer.  The default depends on the code character."
msgstr ""

# type: item
#: lispref/commands.texi:289
#, no-wrap
msgid "No I/O"
msgstr ""

# type: table
#: lispref/commands.texi:293
msgid ""
"This code letter computes an argument without reading any input.  Therefore, "
"it does not use a prompt string, and any prompt string you supply is ignored."
msgstr ""

# type: table
#: lispref/commands.texi:296
msgid ""
"Even though the code letter doesn't use a prompt string, you must follow it "
"with a newline if it is not the last code character in the string."
msgstr ""

# type: item
#: lispref/commands.texi:297
#, no-wrap
msgid "Prompt"
msgstr ""

# type: table
#: lispref/commands.texi:300
msgid ""
"A prompt immediately follows the code character.  The prompt ends either "
"with the end of the string or with a newline."
msgstr ""

# type: item
#: lispref/commands.texi:301
#, no-wrap
msgid "Special"
msgstr ""

# type: table
#: lispref/commands.texi:305
msgid ""
"This code character is meaningful only at the beginning of the interactive "
"string, and it does not look for a prompt or a newline.  It is a single, "
"isolated character."
msgstr ""

# type: cindex
#: lispref/commands.texi:307
#, no-wrap
msgid "reading interactive arguments"
msgstr ""

# type: Plain text
#: lispref/commands.texi:309
msgid ""
"Here are the code character descriptions for use with @code{interactive}:"
msgstr ""

# type: samp{#1}
#: lispref/commands.texi:311 lispref/searching.texi:290
#: lispref/syntax.texi:351
#, no-wrap
msgid "*"
msgstr "*"

# type: table
#: lispref/commands.texi:313
msgid "Signal an error if the current buffer is read-only.  Special."
msgstr ""

# type: item
#: lispref/commands.texi:314
#, no-wrap
msgid "@@"
msgstr ""

# type: table
#: lispref/commands.texi:317
msgid ""
"Select the window mentioned in the first mouse event in the key sequence "
"that invoked this command.  Special."
msgstr ""

# type: item
#: lispref/commands.texi:318
#, no-wrap
msgid "a"
msgstr ""

# type: table
#: lispref/commands.texi:321
msgid ""
"A function name (i.e., a symbol satisfying @code{fboundp}).  Existing, "
"Completion, Prompt."
msgstr ""

# type: item
#: lispref/commands.texi:322 lispref/debugging.texi:380
#: lispref/edebug.texi:448
#, no-wrap
msgid "b"
msgstr ""

# type: table
#: lispref/commands.texi:326
msgid ""
"The name of an existing buffer.  By default, uses the name of the current "
"buffer (@pxref{Buffers}).  Existing, Completion, Default, Prompt."
msgstr ""

# type: item
#: lispref/commands.texi:327 lispref/edebug.texi:464
#, no-wrap
msgid "B"
msgstr ""

# type: table
#: lispref/commands.texi:331
msgid ""
"A buffer name.  The buffer need not exist.  By default, uses the name of a "
"recently used buffer other than the current buffer.  Completion, Default, "
"Prompt."
msgstr ""

# type: item
#: lispref/commands.texi:332 lispref/debugging.texi:359
#: lispref/edebug.texi:263
#, no-wrap
msgid "c"
msgstr ""

# type: table
#: lispref/commands.texi:334
msgid "A character.  The cursor does not move into the echo area.  Prompt."
msgstr ""

# type: item
#: lispref/commands.texi:335 lispref/edebug.texi:267
#, no-wrap
msgid "C"
msgstr ""

# type: table
#: lispref/commands.texi:338
msgid ""
"A command name (i.e., a symbol satisfying @code{commandp}).  Existing, "
"Completion, Prompt."
msgstr ""

# type: item
#: lispref/commands.texi:339 lispref/debugging.texi:369
#: lispref/edebug.texi:407
#, no-wrap
msgid "d"
msgstr ""

# type: cindex
#: lispref/commands.texi:340
#, no-wrap
msgid "position argument"
msgstr ""

# type: table
#: lispref/commands.texi:342
msgid "The position of point, as an integer (@pxref{Point}).  No I/O."
msgstr ""

# type: item
#: lispref/commands.texi:343
#, no-wrap
msgid "D"
msgstr ""

# type: table
#: lispref/commands.texi:347
msgid ""
"A directory name.  The default is the current default directory of the "
"current buffer, @code{default-directory} (@pxref{File Name Expansion}).  "
"Existing, Completion, Default, Prompt."
msgstr ""

# type: i{#1}
#: lispref/commands.texi:348 lispref/debugging.texi:395
#: lispref/numbers.texi:1112 lispref/numbers.texi:1119
#: lispref/numbers.texi:1132
#, no-wrap
msgid "e"
msgstr ""

# type: table
#: lispref/commands.texi:352
msgid ""
"The first or next mouse event in the key sequence that invoked the command.  "
"More precisely, @samp{e} gets events that are lists, so you can look at the "
"data in the lists.  @xref{Input Events}.  No I/O."
msgstr ""

# type: table
#: lispref/commands.texi:358
msgid ""
"You can use @samp{e} more than once in a single command's interactive "
"specification.  If the key sequence that invoked the command has @var{n} "
"events that are lists, the @var{n}th @samp{e} provides the @var{n}th such "
"event.  Events that are not lists, such as function keys and @acronym{ASCII} "
"characters, do not count where @samp{e} is concerned."
msgstr ""

# type: item
#: lispref/commands.texi:359 lispref/edebug.texi:327
#, no-wrap
msgid "f"
msgstr ""

# type: table
#: lispref/commands.texi:363
msgid ""
"A file name of an existing file (@pxref{File Names}).  The default directory "
"is @code{default-directory}.  Existing, Completion, Default, Prompt."
msgstr ""

# type: item
#: lispref/commands.texi:364
#, no-wrap
msgid "F"
msgstr ""

# type: table
#: lispref/commands.texi:366
msgid "A file name.  The file need not exist.  Completion, Default, Prompt."
msgstr ""

# type: item
#: lispref/commands.texi:367 lispref/edebug.texi:271
#, no-wrap
msgid "G"
msgstr ""

# type: table
#: lispref/commands.texi:371
msgid ""
"A file name.  The file need not exist.  If the user enters just a directory "
"name, then the value is just that directory name, with no file name within "
"the directory added.  Completion, Default, Prompt."
msgstr ""

# type: item
#: lispref/commands.texi:372 lispref/edebug.texi:334
#, no-wrap
msgid "i"
msgstr ""

# type: table
#: lispref/commands.texi:375
msgid ""
"An irrelevant argument.  This code always supplies @code{nil} as the "
"argument's value.  No I/O."
msgstr ""

# type: item
#: lispref/commands.texi:376
#, no-wrap
msgid "k"
msgstr ""

# type: table
#: lispref/commands.texi:381
msgid ""
"A key sequence (@pxref{Key Sequences}).  This keeps reading events until a "
"command (or undefined command) is found in the current key maps.  The key "
"sequence argument is represented as a string or vector.  The cursor does not "
"move into the echo area.  Prompt."
msgstr ""

# type: table
#: lispref/commands.texi:385
msgid ""
"If @samp{k} reads a key sequence that ends with a down-event, it also reads "
"and discards the following up-event.  You can get access to that up-event "
"with the @samp{U} code character."
msgstr ""

# type: table
#: lispref/commands.texi:388
msgid ""
"This kind of input is used by commands such as @code{describe-key} and @code"
"{global-set-key}."
msgstr ""

# type: item
#: lispref/commands.texi:389
#, no-wrap
msgid "K"
msgstr ""

# type: table
#: lispref/commands.texi:394
msgid ""
"A key sequence, whose definition you intend to change.  This works like @samp"
"{k}, except that it suppresses, for the last input event in the key "
"sequence, the conversions that are normally used (when necessary) to convert "
"an undefined key into a defined one."
msgstr ""

# type: item
#: lispref/commands.texi:395
#, no-wrap
msgid "m"
msgstr ""

# type: cindex
#: lispref/commands.texi:396
#, no-wrap
msgid "marker argument"
msgstr ""

# type: table
#: lispref/commands.texi:398
msgid "The position of the mark, as an integer.  No I/O."
msgstr ""

# type: item
#: lispref/commands.texi:399
#, no-wrap
msgid "M"
msgstr ""

# type: table
#: lispref/commands.texi:403
msgid ""
"Arbitrary text, read in the minibuffer using the current buffer's input "
"method, and returned as a string (@pxref{Input Methods,,, emacs, The GNU "
"Emacs Manual}).  Prompt."
msgstr ""

# type: item
#: lispref/commands.texi:404 lispref/edebug.texi:247
#, no-wrap
msgid "n"
msgstr ""

# type: table
#: lispref/commands.texi:408
msgid ""
"A number, read with the minibuffer.  If the input is not a number, the user "
"has to try again.  @samp{n} never uses the prefix argument.  Prompt."
msgstr ""

# type: item
#: lispref/commands.texi:409
#, no-wrap
msgid "N"
msgstr ""

# type: table
#: lispref/commands.texi:413
msgid ""
"The numeric prefix argument; but if there is no prefix argument, read a "
"number as with @kbd{n}.  The value is always a number.  @xref{Prefix Command "
"Arguments}.  Prompt."
msgstr ""

# type: item
#: lispref/commands.texi:414 lispref/edebug.texi:586
#, no-wrap
msgid "p"
msgstr ""

# type: cindex
#: lispref/commands.texi:415
#, no-wrap
msgid "numeric prefix argument usage"
msgstr ""

# type: table
#: lispref/commands.texi:418
msgid ""
"The numeric prefix argument.  (Note that this @samp{p} is lower case.)  No I/"
"O."
msgstr ""

# type: item
#: lispref/commands.texi:419
#, no-wrap
msgid "P"
msgstr ""

# type: cindex
#: lispref/commands.texi:420
#, no-wrap
msgid "raw prefix argument usage"
msgstr ""

# type: table
#: lispref/commands.texi:423
msgid ""
"The raw prefix argument.  (Note that this @samp{P} is upper case.)  No I/O."
msgstr ""

# type: item
#: lispref/commands.texi:424 lispref/debugging.texi:415
#: lispref/edebug.texi:403
#, no-wrap
msgid "r"
msgstr ""

# type: cindex
#: lispref/commands.texi:425
#, no-wrap
msgid "region argument"
msgstr ""

# type: table
#: lispref/commands.texi:429
msgid ""
"Point and the mark, as two numeric arguments, smallest first.  This is the "
"only code letter that specifies two successive arguments rather than one.  "
"No I/O."
msgstr ""

# type: item
#: lispref/commands.texi:430
#, no-wrap
msgid "s"
msgstr ""

# type: table
#: lispref/commands.texi:435
msgid ""
"Arbitrary text, read in the minibuffer and returned as a string (@pxref{Text "
"from Minibuffer}).  Terminate the input with either @kbd{C-j} or @key{RET}.  "
"(@kbd{C-q} may be used to include either of these characters in the input.)  "
"Prompt."
msgstr ""

# type: item
#: lispref/commands.texi:436 lispref/edebug.texi:240
#, no-wrap
msgid "S"
msgstr ""

# type: table
#: lispref/commands.texi:441
msgid ""
"An interned symbol whose name is read in the minibuffer.  Any whitespace "
"character terminates the input.  (Use @kbd{C-q} to include whitespace in the "
"string.)  Other characters that normally terminate a symbol (e.g., "
"parentheses and brackets) do not do so here.  Prompt."
msgstr ""

# type: item
#: lispref/commands.texi:442
#, no-wrap
msgid "U"
msgstr ""

# type: table
#: lispref/commands.texi:447
msgid ""
"A key sequence or @code{nil}.  Can be used after a @samp{k} or @samp{K} "
"argument to get the up-event that was discarded (if any)  after @samp{k} or "
"@samp{K} read a down-event.  If no up-event has been discarded, @samp{U} "
"provides @code{nil} as the argument.  No I/O."
msgstr ""

# type: item
#: lispref/commands.texi:448 lispref/edebug.texi:582
#, no-wrap
msgid "v"
msgstr ""

# type: table
#: lispref/commands.texi:453
msgid ""
"A variable declared to be a user option (i.e., satisfying the predicate @code"
"{user-variable-p}).  This reads the variable using @code{read-variable}.  "
"@xref{Definition of read-variable}.  Existing, Completion, Prompt."
msgstr ""

# type: item
#: lispref/commands.texi:454 lispref/display.texi:5377 lispref/frames.texi:39
#, no-wrap
msgid "x"
msgstr ""

# type: table
#: lispref/commands.texi:458
msgid ""
"A Lisp object, specified with its read syntax, terminated with a @kbd{C-j} "
"or @key{RET}.  The object is not evaluated.  @xref{Object from Minibuffer}.  "
"Prompt."
msgstr ""

# type: item
#: lispref/commands.texi:459
#, no-wrap
msgid "X"
msgstr ""

# type: cindex
#: lispref/commands.texi:460
#, no-wrap
msgid "evaluated expression argument"
msgstr ""

# type: table
#: lispref/commands.texi:464
msgid ""
"A Lisp form's value.  @samp{X} reads as @samp{x} does, then evaluates the "
"form so that its value becomes the argument for the command.  Prompt."
msgstr ""

# type: item
#: lispref/commands.texi:465 lispref/internals.texi:864
#, no-wrap
msgid "z"
msgstr ""

# type: table
#: lispref/commands.texi:469
msgid ""
"A coding system name (a symbol).  If the user enters null input, the "
"argument value is @code{nil}.  @xref{Coding Systems}.  Completion, Existing, "
"Prompt."
msgstr ""

# type: item
#: lispref/commands.texi:470
#, no-wrap
msgid "Z"
msgstr ""

# type: table
#: lispref/commands.texi:474
msgid ""
"A coding system name (a symbol)---but only if this command has a prefix "
"argument.  With no prefix argument, @samp{Z} provides @code{nil} as the "
"argument value.  Completion, Existing, Prompt."
msgstr ""

# type: subsection
#: lispref/commands.texi:478
#, no-wrap
msgid "Examples of Using @code{interactive}"
msgstr ""

# type: cindex
#: lispref/commands.texi:479
#, no-wrap
msgid "examples of using @code{interactive}"
msgstr ""

# type: cindex
#: lispref/commands.texi:480
#, no-wrap
msgid "@code{interactive}, examples of using"
msgstr ""

# type: Plain text
#: lispref/commands.texi:483
msgid "Here are some examples of @code{interactive}:"
msgstr ""

# type: group
#: lispref/commands.texi:490
#, no-wrap
msgid ""
"(defun foo1 ()              ; @r{@code{foo1} takes no arguments,}\n"
"    (interactive)           ;   @r{just moves forward two words.}\n"
"    (forward-word 2))\n"
"     @result{} foo1\n"
msgstr ""

# type: group
#: lispref/commands.texi:497
#, no-wrap
msgid ""
"(defun foo2 (n)             ; @r{@code{foo2} takes one argument,}\n"
"    (interactive \"p\")       ;   @r{which is the numeric prefix.}\n"
"    (forward-word (* 2 n)))\n"
"     @result{} foo2\n"
msgstr ""

# type: group
#: lispref/commands.texi:504
#, no-wrap
msgid ""
"(defun foo3 (n)             ; @r{@code{foo3} takes one argument,}\n"
"    (interactive \"nCount:\") ;   @r{which is read with the Minibuffer.}\n"
"    (forward-word (* 2 n)))\n"
"     @result{} foo3\n"
msgstr ""

# type: group
#: lispref/commands.texi:510
#, no-wrap
msgid ""
"(defun three-b (b1 b2 b3)\n"
"  \"Select three existing buffers.\n"
"Put them into three windows, selecting the last one.\"\n"
msgstr ""

# type: example
#: lispref/commands.texi:521
#, no-wrap
msgid ""
"    (interactive \"bBuffer1:\\nbBuffer2:\\nbBuffer3:\")\n"
"    (delete-other-windows)\n"
"    (split-window (selected-window) 8)\n"
"    (switch-to-buffer b1)\n"
"    (other-window 1)\n"
"    (split-window (selected-window) 8)\n"
"    (switch-to-buffer b2)\n"
"    (other-window 1)\n"
"    (switch-to-buffer b3))\n"
"     @result{} three-b\n"
msgstr ""

# type: group
#: lispref/commands.texi:524
#, no-wrap
msgid ""
"(three-b \"*scratch*\" \"declarations.texi\" \"*mail*\")\n"
"     @result{} nil\n"
msgstr ""

# type: cindex
#: lispref/commands.texi:529
#, no-wrap
msgid "interactive call"
msgstr ""

# type: Plain text
#: lispref/commands.texi:536
msgid ""
"After the command loop has translated a key sequence into a command it "
"invokes that command using the function @code{command-execute}.  If the "
"command is a function, @code{command-execute} calls @code{call-"
"interactively}, which reads the arguments and calls the command.  You can "
"also call these functions yourself."
msgstr ""

# type: defun
#: lispref/commands.texi:537
#, no-wrap
msgid "commandp object &optional for-call-interactively"
msgstr ""

# type: defun
#: lispref/commands.texi:540
msgid ""
"Returns @code{t} if @var{object} is suitable for calling interactively; that "
"is, if @var{object} is a command.  Otherwise, returns @code{nil}."
msgstr ""

# type: defun
#: lispref/commands.texi:547
msgid ""
"The interactively callable objects include strings and vectors (treated as "
"keyboard macros), lambda expressions that contain a top-level call to @code"
"{interactive}, byte-code function objects made from such lambda expressions, "
"autoload objects that are declared as interactive (non-@code{nil} fourth "
"argument to @code{autoload}), and some of the primitive functions."
msgstr ""

# type: defun
#: lispref/commands.texi:551
msgid ""
"A symbol satisfies @code{commandp} if its function definition satisfies @code"
"{commandp}.  Keys and keymaps are not commands.  Rather, they are used to "
"look up commands (@pxref{Keymaps})."
msgstr ""

# type: defun
#: lispref/commands.texi:555
msgid ""
"If @var{for-call-interactively} is non-@code{nil}, then @code{commandp} "
"returns @code{t} only for objects that @code{call-interactively} could "
"call---thus, not for keyboard macros."
msgstr ""

# type: defun
#: lispref/commands.texi:558
msgid ""
"See @code{documentation} in @ref{Accessing Documentation}, for a realistic "
"example of using @code{commandp}."
msgstr ""

# type: defun
#: lispref/commands.texi:560
#, no-wrap
msgid "call-interactively command &optional record-flag keys"
msgstr ""

# type: defun
#: lispref/commands.texi:569
msgid ""
"This function calls the interactively callable function @var{command}, "
"reading arguments according to its interactive calling specifications.  It "
"returns whatever @var{command} returns.  An error is signaled if @var"
"{command} is not a function or if it cannot be called interactively (i.e., "
"is not a command).  Note that keyboard macros (strings and vectors) are not "
"accepted, even though they are considered commands, because they are not "
"functions.  If @var{command} is a symbol, then @code{call-interactively} "
"uses its function definition."
msgstr ""

# type: cindex
#: lispref/commands.texi:570
#, no-wrap
msgid "record command history"
msgstr ""

# type: defun
#: lispref/commands.texi:575
msgid ""
"If @var{record-flag} is non-@code{nil}, then this command and its arguments "
"are unconditionally added to the list @code{command-history}.  Otherwise, "
"the command is added only if it uses the minibuffer to read an argument.  "
"@xref{Command History}."
msgstr ""

# type: defun
#: lispref/commands.texi:581
msgid ""
"The argument @var{keys}, if given, should be a vector which specifies the "
"sequence of events to supply if the command inquires which events were used "
"to invoke it.  If @var{keys} is omitted or @code{nil}, the default is the "
"return value of @code{this-command-keys-vector}.  @xref{Definition of this-"
"command-keys-vector}."
msgstr ""

# type: defun
#: lispref/commands.texi:583
#, no-wrap
msgid "command-execute command &optional record-flag keys special"
msgstr ""

# type: cindex
#: lispref/commands.texi:584
#, no-wrap
msgid "keyboard macro execution"
msgstr ""

# type: defun
#: lispref/commands.texi:588
msgid ""
"This function executes @var{command}.  The argument @var{command} must "
"satisfy the @code{commandp} predicate; i.e., it must be an interactively "
"callable function or a keyboard macro."
msgstr ""

# type: defun
#: lispref/commands.texi:593
msgid ""
"A string or vector as @var{command} is executed with @code{execute-kbd-"
"macro}.  A function is passed to @code{call-interactively}, along with the "
"optional @var{record-flag} and @var{keys}."
msgstr ""

# type: defun
#: lispref/commands.texi:599
msgid ""
"A symbol is handled by using its function definition in its place.  A symbol "
"with an @code{autoload} definition counts as a command if it was declared to "
"stand for an interactively callable function.  Such a definition is handled "
"by loading the specified library and then rechecking the definition of the "
"symbol."
msgstr ""

# type: defun
#: lispref/commands.texi:603
msgid ""
"The argument @var{special}, if given, means to ignore the prefix argument "
"and not clear it.  This is used for executing special events (@pxref{Special "
"Events})."
msgstr ""

# type: deffn
#: lispref/commands.texi:605
#, no-wrap
msgid "Command execute-extended-command prefix-argument"
msgstr ""

# type: cindex
#: lispref/commands.texi:606
#, no-wrap
msgid "read command name"
msgstr ""

# type: deffn
#: lispref/commands.texi:611
msgid ""
"This function reads a command name from the minibuffer using @code"
"{completing-read} (@pxref{Completion}).  Then it uses @code{command-execute} "
"to call the specified command.  Whatever that command returns becomes the "
"value of @code{execute-extended-command}."
msgstr ""

# type: cindex
#: lispref/commands.texi:612
#, no-wrap
msgid "execute with prefix argument"
msgstr ""

# type: deffn
#: lispref/commands.texi:617
msgid ""
"If the command asks for a prefix argument, it receives the value @var{prefix-"
"argument}.  If @code{execute-extended-command} is called interactively, the "
"current raw prefix argument is used for @var{prefix-argument}, and thus "
"passed on to whatever command is run."
msgstr ""

# type: kbd{#1}
#: lispref/commands.texi:619
#, no-wrap
msgid "M-x"
msgstr ""

# type: deffn
#: lispref/commands.texi:626
msgid ""
"@code{execute-extended-command} is the normal definition of @kbd{M-x}, so it "
"uses the string @w{@samp{M-x }} as a prompt.  (It would be better to take "
"the prompt from the events used to invoke @code{execute-extended-command}, "
"but that is painful to implement.)  A description of the value of the prefix "
"argument, if any, also becomes part of the prompt."
msgstr ""

# type: group
#: lispref/commands.texi:634
#, no-wrap
msgid ""
"(execute-extended-command 3)\n"
"---------- Buffer: Minibuffer ----------\n"
"3 M-x forward-word RET\n"
"---------- Buffer: Minibuffer ----------\n"
"     @result{} t\n"
msgstr ""

# type: item
#: lispref/commands.texi:638 lispref/functions.texi:1353
#, no-wrap
msgid "interactive-p"
msgstr ""

# type: defun
#: lispref/commands.texi:644
msgid ""
"This function returns @code{t} if the containing function (the one whose "
"code includes the call to @code{interactive-p}) was called in direct "
"response to user input.  This means that it was called with the function "
"@code{call-interactively}, and that a keyboard macro is not running, and "
"that Emacs is not running in batch mode."
msgstr ""

# type: defun
#: lispref/commands.texi:647
msgid ""
"If the containing function was called by Lisp evaluation (or with @code"
"{apply} or @code{funcall}), then it was not called interactively."
msgstr ""

# type: Plain text
#: lispref/commands.texi:652
msgid ""
"The most common use of @code{interactive-p} is for deciding whether to give "
"the user additional visual feedback (such as by printing an informative "
"message).  For example:"
msgstr ""

# type: group
#: lispref/commands.texi:661
#, no-wrap
msgid ""
";; @r{Here's the usual way to use @code{interactive-p}.}\n"
"(defun foo ()\n"
"  (interactive)\n"
"  (when (interactive-p)\n"
"    (message \"foo\")))\n"
"     @result{} foo\n"
msgstr ""

# type: group
#: lispref/commands.texi:669
#, no-wrap
msgid ""
";; @r{This function is just to illustrate the behavior.}\n"
"(defun bar ()\n"
"  (interactive)\n"
"  (setq foobar (list (foo) (interactive-p))))\n"
"     @result{} bar\n"
msgstr ""

# type: group
#: lispref/commands.texi:674
#, no-wrap
msgid ""
";; @r{Type @kbd{M-x foo}.}\n"
"     @print{} foo\n"
msgstr ""

# type: group
#: lispref/commands.texi:679
#, no-wrap
msgid ""
";; @r{Type @kbd{M-x bar}.}\n"
";; @r{This does not display a message.}\n"
msgstr ""

# type: group
#: lispref/commands.texi:684
#, no-wrap
msgid ""
"foobar\n"
"     @result{} (nil t)\n"
msgstr ""

# type: Plain text
#: lispref/commands.texi:692
msgid ""
"If you want to test @emph{only} whether the function was called using @code"
"{call-interactively}, add an optional argument @code{print-message} which "
"should be non-@code{nil} in an interactive call, and use the @code"
"{interactive} spec to make sure it is non-@code{nil}.  Here's an example:"
msgstr ""

# type: example
#: lispref/commands.texi:698
#, no-wrap
msgid ""
"(defun foo (&optional print-message)\n"
"  (interactive \"p\")\n"
"  (when print-message\n"
"    (message \"foo\")))\n"
msgstr ""

# type: Plain text
#: lispref/commands.texi:704
msgid ""
"Defined in this way, the function does display the message when called from "
"a keyboard macro.  We use @code{\"p\"} because the numeric prefix argument "
"is never @code{nil}."
msgstr ""

# type: defun
#: lispref/commands.texi:705
#, no-wrap
msgid "called-interactively-p"
msgstr ""

# type: defun
#: lispref/commands.texi:708
msgid ""
"This function returns @code{t} when the calling function was called using "
"@code{call-interactively}."
msgstr ""

# type: defun
#: lispref/commands.texi:712
msgid ""
"When possible, instead of using this function, you should use the method in "
"the example above; that method makes it possible for a caller to ``pretend'' "
"that the function was called interactively."
msgstr ""

# type: section
#: lispref/commands.texi:716
#, no-wrap
msgid "Information from the Command Loop"
msgstr ""

# type: Plain text
#: lispref/commands.texi:720
msgid ""
"The editor command loop sets several Lisp variables to keep status records "
"for itself and for commands that are run."
msgstr ""

# type: defvar
#: lispref/commands.texi:721
#, no-wrap
msgid "last-command"
msgstr ""

# type: defvar
#: lispref/commands.texi:725
msgid ""
"This variable records the name of the previous command executed by the "
"command loop (the one before the current command).  Normally the value is a "
"symbol with a function definition, but this is not guaranteed."
msgstr ""

# type: defvar
#: lispref/commands.texi:729
msgid ""
"The value is copied from @code{this-command} when a command returns to the "
"command loop, except when the command has specified a prefix argument for "
"the following command."
msgstr ""

# type: defvar
#: lispref/commands.texi:732
msgid ""
"This variable is always local to the current terminal and cannot be buffer-"
"local.  @xref{Multiple Displays}."
msgstr ""

# type: defvar
#: lispref/commands.texi:734
#, no-wrap
msgid "real-last-command"
msgstr ""

# type: defvar
#: lispref/commands.texi:737
msgid ""
"This variable is set up by Emacs just like @code{last-command}, but never "
"altered by Lisp programs."
msgstr ""

# type: defvar
#: lispref/commands.texi:739
#, no-wrap
msgid "this-command"
msgstr ""

# type: cindex
#: lispref/commands.texi:740
#, no-wrap
msgid "current command"
msgstr ""

# type: defvar
#: lispref/commands.texi:744
msgid ""
"This variable records the name of the command now being executed by the "
"editor command loop.  Like @code{last-command}, it is normally a symbol with "
"a function definition."
msgstr ""

# type: defvar
#: lispref/commands.texi:749
msgid ""
"The command loop sets this variable just before running a command, and "
"copies its value into @code{last-command} when the command finishes (unless "
"the command specified a prefix argument for the following command)."
msgstr ""

# type: cindex
#: lispref/commands.texi:750
#, no-wrap
msgid "kill command repetition"
msgstr ""

# type: defvar
#: lispref/commands.texi:756
msgid ""
"Some commands set this variable during their execution, as a flag for "
"whatever command runs next.  In particular, the functions for killing text "
"set @code{this-command} to @code{kill-region} so that any kill commands "
"immediately following will know to append the killed text to the previous "
"kill."
msgstr ""

# type: Plain text
#: lispref/commands.texi:763
msgid ""
"If you do not want a particular command to be recognized as the previous "
"command in the case where it got an error, you must code that command to "
"prevent this.  One way is to set @code{this-command} to @code{t} at the "
"beginning of the command, and set @code{this-command} back to its proper "
"value at the end, like this:"
msgstr ""

# type: example
#: lispref/commands.texi:771
#, no-wrap
msgid ""
"(defun foo (args@dots{})\n"
"  (interactive @dots{})\n"
"  (let ((old-this-command this-command))\n"
"    (setq this-command t)\n"
"    @r{@dots{}do the work@dots{}}\n"
"    (setq this-command old-this-command)))\n"
msgstr ""

# type: Plain text
#: lispref/commands.texi:777
msgid ""
"We do not bind @code{this-command} with @code{let} because that would "
"restore the old value in case of error---a feature of @code{let} which in "
"this case does precisely what we want to avoid."
msgstr ""

# type: defvar
#: lispref/commands.texi:778
#, no-wrap
msgid "this-original-command"
msgstr ""

# type: defvar
#: lispref/commands.texi:784
msgid ""
"This has the same value as @code{this-command} except when command remapping "
"occurs (@pxref{Remapping Commands}).  In that case, @code{this-command} "
"gives the command actually run (the result of remapping), and @code{this-"
"original-command} gives the command that was specified to run but remapped "
"into another command."
msgstr ""

# type: defun
#: lispref/commands.texi:786
#, no-wrap
msgid "this-command-keys"
msgstr ""

# type: defun
#: lispref/commands.texi:791
msgid ""
"This function returns a string or vector containing the key sequence that "
"invoked the present command, plus any previous commands that generated the "
"prefix argument for this command.  Any events read by the command using @code"
"{read-event} without a timeout get tacked on to the end."
msgstr ""

# type: defun
#: lispref/commands.texi:796
msgid ""
"However, if the command has called @code{read-key-sequence}, it returns the "
"last read key sequence.  @xref{Key Sequence Input}.  The value is a string "
"if all events in the sequence were characters that fit in a string.  @xref"
"{Input Events}."
msgstr ""

# type: group
#: lispref/commands.texi:802
#, no-wrap
msgid ""
"(this-command-keys)\n"
";; @r{Now use @kbd{C-u C-x C-e} to evaluate that.}\n"
"     @result{} \"^U^X^E\"\n"
msgstr ""

# type: defun
#: lispref/commands.texi:806
#, no-wrap
msgid "this-command-keys-vector"
msgstr ""

# type: anchor{#1}
#: lispref/commands.texi:811
msgid "Definition of this-command-keys-vector"
msgstr ""

# type: defun
#: lispref/commands.texi:811
msgid ""
"Like @code{this-command-keys}, except that it always returns the events in a "
"vector, so you don't need to deal with the complexities of storing input "
"events in a string (@pxref{Strings of Events})."
msgstr ""

# type: defun
#: lispref/commands.texi:813
#, no-wrap
msgid "clear-this-command-keys &optional keep-record"
msgstr ""

# type: defun
#: lispref/commands.texi:820
msgid ""
"This function empties out the table of events for @code{this-command-keys} "
"to return.  Unless @var{keep-record} is non-@code{nil}, it also empties the "
"records that the function @code{recent-keys} (@pxref{Recording Input}) will "
"subsequently return.  This is useful after reading a password, to prevent "
"the password from echoing inadvertently as part of the next command in "
"certain cases."
msgstr ""

# type: defvar
#: lispref/commands.texi:822
#, no-wrap
msgid "last-nonmenu-event"
msgstr ""

# type: defvar
#: lispref/commands.texi:825
msgid ""
"This variable holds the last input event read as part of a key sequence, not "
"counting events resulting from mouse menus."
msgstr ""

# type: defvar
#: lispref/commands.texi:829
msgid ""
"One use of this variable is for telling @code{x-popup-menu} where to pop up "
"a menu.  It is also used internally by @code{y-or-n-p} (@pxref{Yes-or-No "
"Queries})."
msgstr ""

# type: defvar
#: lispref/commands.texi:831
#, no-wrap
msgid "last-command-event"
msgstr ""

# type: defvarx
#: lispref/commands.texi:832
#, no-wrap
msgid "last-command-char"
msgstr ""

# type: defvar
#: lispref/commands.texi:837
msgid ""
"This variable is set to the last input event that was read by the command "
"loop as part of a command.  The principal use of this variable is in @code"
"{self-insert-command}, which uses it to decide which character to insert."
msgstr ""

# type: group
#: lispref/commands.texi:843
#, no-wrap
msgid ""
"last-command-event\n"
";; @r{Now use @kbd{C-u C-x C-e} to evaluate that.}\n"
"     @result{} 5\n"
msgstr ""

# type: defvar
#: lispref/commands.texi:848
msgid "The value is 5 because that is the @acronym{ASCII} code for @kbd{C-e}."
msgstr ""

# type: defvar
#: lispref/commands.texi:851
msgid ""
"The alias @code{last-command-char} exists for compatibility with Emacs "
"version 18."
msgstr ""

# type: defvar
#: lispref/commands.texi:854
#, no-wrap
msgid "last-event-frame"
msgstr ""

# type: defvar
#: lispref/commands.texi:860
msgid ""
"This variable records which frame the last input event was directed to.  "
"Usually this is the frame that was selected when the event was generated, "
"but if that frame has redirected input focus to another frame, the value is "
"the frame to which the event was redirected.  @xref{Input Focus}."
msgstr ""

# type: defvar
#: lispref/commands.texi:862
msgid ""
"If the last event came from a keyboard macro, the value is @code{macro}."
msgstr ""

# type: section
#: lispref/commands.texi:865
#, no-wrap
msgid "Adjusting Point After Commands"
msgstr ""

# type: cindex
#: lispref/commands.texi:866
#, no-wrap
msgid "adjusting point"
msgstr ""

# type: cindex
#: lispref/commands.texi:867
#, no-wrap
msgid "invisible/intangible text, and point"
msgstr ""

# type: cindex
#: lispref/commands.texi:868
#, no-wrap
msgid "@code{display} property, and point display"
msgstr ""

# type: cindex
#: lispref/commands.texi:869
#, no-wrap
msgid "@code{composition} property, and point display"
msgstr ""

# type: Plain text
#: lispref/commands.texi:877
msgid ""
"It is not easy to display a value of point in the middle of a sequence of "
"text that has the @code{display}, @code{composition} or @code{intangible} "
"property, or is invisible.  Therefore, after a command finishes and returns "
"to the command loop, if point is within such a sequence, the command loop "
"normally moves point to the edge of the sequence."
msgstr ""

# type: Plain text
#: lispref/commands.texi:880
msgid ""
"A command can inhibit this feature by setting the variable @code{disable-"
"point-adjustment}:"
msgstr ""

# type: defvar
#: lispref/commands.texi:881
#, no-wrap
msgid "disable-point-adjustment"
msgstr ""

# type: defvar
#: lispref/commands.texi:885
msgid ""
"If this variable is non-@code{nil} when a command returns to the command "
"loop, then the command loop does not check for those text properties, and "
"does not move point out of sequences that have them."
msgstr ""

# type: defvar
#: lispref/commands.texi:888
msgid ""
"The command loop sets this variable to @code{nil} before each command, so if "
"a command sets it, the effect applies only to that command."
msgstr ""

# type: defvar
#: lispref/commands.texi:890
#, no-wrap
msgid "global-disable-point-adjustment"
msgstr ""

# type: defvar
#: lispref/commands.texi:893
msgid ""
"If you set this variable to a non-@code{nil} value, the feature of moving "
"point out of these sequences is completely turned off."
msgstr ""

# type: cindex
#: lispref/commands.texi:897
#, no-wrap
msgid "events"
msgstr ""

# type: cindex
#: lispref/commands.texi:898
#, no-wrap
msgid "input events"
msgstr ""

# type: Plain text
#: lispref/commands.texi:904
msgid ""
"The Emacs command loop reads a sequence of @dfn{input events} that represent "
"keyboard or mouse activity.  The events for keyboard activity are characters "
"or symbols; mouse events are always lists.  This section describes the "
"representation and meaning of input events in detail."
msgstr ""

# type: defun
#: lispref/commands.texi:905
#, no-wrap
msgid "eventp object"
msgstr ""

# type: defun
#: lispref/commands.texi:908
msgid ""
"This function returns non-@code{nil} if @var{object} is an input event or "
"event type."
msgstr ""

# type: defun
#: lispref/commands.texi:915
msgid ""
"Note that any symbol might be used as an event or an event type.  @code"
"{eventp} cannot distinguish whether a symbol is intended by Lisp code to be "
"used as an event.  Instead, it distinguishes whether the symbol has actually "
"been used in an event that has been read as input in the current Emacs "
"session.  If a symbol has not yet been so used, @code{eventp} returns @code"
"{nil}."
msgstr ""

# type: subsection
#: lispref/commands.texi:934 lispref/commands.texi:936
#: lispref/commands.texi:937
#, no-wrap
msgid "Keyboard Events"
msgstr ""

# type: menu
#: lispref/commands.texi:934
msgid "Ordinary characters--keys with symbols on them."
msgstr ""

# type: subsection
#: lispref/commands.texi:934 lispref/commands.texi:1069
#: lispref/commands.texi:1070
#, no-wrap
msgid "Function Keys"
msgstr ""

# type: menu
#: lispref/commands.texi:934
msgid "Function keys--keys with names, not symbols."
msgstr ""

# type: subsection
#: lispref/commands.texi:934 lispref/commands.texi:1146
#: lispref/commands.texi:1147
#, no-wrap
msgid "Mouse Events"
msgstr ""

# type: menu
#: lispref/commands.texi:934
msgid "Overview of mouse events."
msgstr ""

# type: subsection
#: lispref/commands.texi:934 lispref/commands.texi:1168
#: lispref/commands.texi:1169
#, no-wrap
msgid "Click Events"
msgstr ""

# type: menu
#: lispref/commands.texi:934
msgid "Pushing and releasing a mouse button."
msgstr ""

# type: subsection
#: lispref/commands.texi:934 lispref/commands.texi:1307
#: lispref/commands.texi:1308
#, no-wrap
msgid "Drag Events"
msgstr ""

# type: menu
#: lispref/commands.texi:934
msgid "Moving the mouse before releasing the button."
msgstr ""

# type: subsection
#: lispref/commands.texi:934 lispref/commands.texi:1344
#: lispref/commands.texi:1345
#, no-wrap
msgid "Button-Down Events"
msgstr ""

# type: menu
#: lispref/commands.texi:934
msgid "A button was pushed and not yet released."
msgstr ""

# type: subsection
#: lispref/commands.texi:934 lispref/commands.texi:1368
#: lispref/commands.texi:1369
#, no-wrap
msgid "Repeat Events"
msgstr ""

# type: menu
#: lispref/commands.texi:934
msgid "Double and triple click (or drag, or down)."
msgstr ""

# type: subsection
#: lispref/commands.texi:934 lispref/commands.texi:1463
#: lispref/commands.texi:1464
#, no-wrap
msgid "Motion Events"
msgstr ""

# type: menu
#: lispref/commands.texi:934
msgid "Just moving the mouse, not pushing a button."
msgstr ""

# type: subsection
#: lispref/commands.texi:934 lispref/commands.texi:1484
#: lispref/commands.texi:1485
#, no-wrap
msgid "Focus Events"
msgstr ""

# type: menu
#: lispref/commands.texi:934
msgid "Moving the mouse between frames."
msgstr ""

# type: node
#: lispref/commands.texi:934 lispref/commands.texi:1520
#, no-wrap
msgid "Misc Events"
msgstr ""

# type: menu
#: lispref/commands.texi:934
msgid "Other events the system can generate."
msgstr ""

# type: subsection
#: lispref/commands.texi:934 lispref/commands.texi:1626
#: lispref/commands.texi:1627
#, no-wrap
msgid "Event Examples"
msgstr ""

# type: menu
#: lispref/commands.texi:934
msgid "Examples of the lists for mouse events."
msgstr ""

# type: subsection
#: lispref/commands.texi:934 lispref/commands.texi:1668
#: lispref/commands.texi:1669
#, no-wrap
msgid "Classifying Events"
msgstr ""

# type: menu
#: lispref/commands.texi:934
msgid "Finding the modifier keys in an event symbol.  Event types."
msgstr ""

# type: subsection
#: lispref/commands.texi:934 lispref/commands.texi:1780
#: lispref/commands.texi:1781
#, no-wrap
msgid "Accessing Events"
msgstr ""

# type: menu
#: lispref/commands.texi:934
msgid "Functions to extract info from events."
msgstr ""

# type: node
#: lispref/commands.texi:934 lispref/commands.texi:1956
#, no-wrap
msgid "Strings of Events"
msgstr ""

# type: menu
#: lispref/commands.texi:934
msgid "Special considerations for putting"
msgstr ""

# type: menu
#: lispref/commands.texi:934
msgid "keyboard character events in a string."
msgstr ""

# type: cindex
#: lispref/commands.texi:938
#, no-wrap
msgid "keyboard events"
msgstr ""

# type: Plain text
#: lispref/commands.texi:945
msgid ""
"There are two kinds of input you can get from the keyboard: ordinary keys, "
"and function keys.  Ordinary keys correspond to characters; the events they "
"generate are represented in Lisp as characters.  The event type of a "
"character event is the character itself (an integer); see @ref{Classifying "
"Events}."
msgstr ""

# type: cindex
#: lispref/commands.texi:946
#, no-wrap
msgid "modifier bits (of input character)"
msgstr ""

# type: cindex
#: lispref/commands.texi:947
#, no-wrap
msgid "basic code (of input character)"
msgstr ""

# type: Plain text
#: lispref/commands.texi:950
msgid ""
"An input character event consists of a @dfn{basic code} between 0 and "
"524287, plus any or all of these @dfn{modifier bits}:"
msgstr ""

# type: item
#: lispref/commands.texi:952 lispref/os.texi:1685
#, no-wrap
msgid "meta"
msgstr ""

# type: titlefont{#1}
#: lispref/commands.texi:954 lispref/commands.texi:965
#: lispref/commands.texi:992 lispref/commands.texi:1026
#: lispref/commands.texi:1037 lispref/commands.texi:1048
#: lispref/elisp-covers.texi:16 lispref/elisp-covers.texi:39
#: lispref/elisp-covers.texi:70 lispref/elisp-covers.texi:100
#: lispref/elisp-covers.texi:135 lispref/elisp-covers.texi:165
#: lispref/elisp-covers.texi:195 lispref/front-cover-1.texi:11
#: lispref/front-cover-1.texi:32 lispref/vol1.texi:148 lispref/vol2.texi:149
#, no-wrap
msgid "The"
msgstr ""

# type: tex
#: lispref/commands.texi:956 lispref/commands.texi:2009
#: lispref/commands.texi:2029 lispref/commands.texi:2051
#: lispref/objects.texi:457
#, no-wrap
msgid "@math{2^{27}}\n"
msgstr ""

# type: ifnottex
#: lispref/commands.texi:959 lispref/commands.texi:2012
#: lispref/commands.texi:2032 lispref/commands.texi:2054
#: lispref/objects.texi:460
msgid "2**27"
msgstr ""

# type: table
#: lispref/commands.texi:962
msgid ""
"bit in the character code indicates a character typed with the meta key held "
"down."
msgstr ""

# type: item
#: lispref/commands.texi:963
#, no-wrap
msgid "control"
msgstr ""

# type: tex
#: lispref/commands.texi:967 lispref/commands.texi:983
#: lispref/objects.texi:421
#, no-wrap
msgid "@math{2^{26}}\n"
msgstr ""

# type: ifnottex
#: lispref/commands.texi:970 lispref/commands.texi:986
#: lispref/objects.texi:424
msgid "2**26"
msgstr ""

# type: table
#: lispref/commands.texi:973
msgid ""
"bit in the character code indicates a non-@acronym{ASCII} control character."
msgstr ""

# type: table
#: lispref/commands.texi:977
msgid ""
"@sc{ascii} control characters such as @kbd{C-a} have special basic codes of "
"their own, so Emacs needs no special bit to indicate them.  Thus, the code "
"for @kbd{C-a} is just 1."
msgstr ""

# type: table
#: lispref/commands.texi:981
msgid ""
"But if you type a control combination not in @acronym{ASCII}, such as @kbd"
"{%} with the control key, the numeric value you get is the code for @kbd{%} "
"plus"
msgstr ""

# type: table
#: lispref/commands.texi:989
msgid ""
"(assuming the terminal supports non-@acronym{ASCII} control characters)."
msgstr ""

# type: item
#: lispref/commands.texi:990
#, no-wrap
msgid "shift"
msgstr ""

# type: tex
#: lispref/commands.texi:994 lispref/commands.texi:1007
#: lispref/commands.texi:1017 lispref/objects.texi:493
#, no-wrap
msgid "@math{2^{25}}\n"
msgstr ""

# type: ifnottex
#: lispref/commands.texi:997 lispref/commands.texi:1010
#: lispref/commands.texi:1020 lispref/objects.texi:496
msgid "2**25"
msgstr ""

# type: table
#: lispref/commands.texi:1000
msgid ""
"bit in the character code indicates an @acronym{ASCII} control character "
"typed with the shift key held down."
msgstr ""

# type: table
#: lispref/commands.texi:1005
msgid ""
"For letters, the basic code itself indicates upper versus lower case; for "
"digits and punctuation, the shift key selects an entirely different "
"character with a different basic code.  In order to keep within the @acronym"
"{ASCII} character set whenever possible, Emacs avoids using the"
msgstr ""

# type: table
#: lispref/commands.texi:1012
msgid "bit for those characters."
msgstr ""

# type: table
#: lispref/commands.texi:1015
msgid ""
"However, @acronym{ASCII} provides no way to distinguish @kbd{C-A} from @kbd"
"{C-a}, so Emacs uses the"
msgstr ""

# type: table
#: lispref/commands.texi:1023
msgid "bit in @kbd{C-A} and not in @kbd{C-a}."
msgstr ""

# type: item
#: lispref/commands.texi:1024
#, no-wrap
msgid "hyper"
msgstr ""

# type: tex
#: lispref/commands.texi:1028
#, no-wrap
msgid "@math{2^{24}}\n"
msgstr ""

# type: ifnottex
#: lispref/commands.texi:1031
msgid "2**24"
msgstr ""

# type: table
#: lispref/commands.texi:1034
msgid ""
"bit in the character code indicates a character typed with the hyper key "
"held down."
msgstr ""

# type: item
#: lispref/commands.texi:1035
#, no-wrap
msgid "super"
msgstr ""

# type: tex
#: lispref/commands.texi:1039
#, no-wrap
msgid "@math{2^{23}}\n"
msgstr ""

# type: ifnottex
#: lispref/commands.texi:1042
msgid "2**23"
msgstr ""

# type: table
#: lispref/commands.texi:1045
msgid ""
"bit in the character code indicates a character typed with the super key "
"held down."
msgstr ""

# type: item
#: lispref/commands.texi:1046
#, no-wrap
msgid "alt"
msgstr ""

# type: tex
#: lispref/commands.texi:1050
#, no-wrap
msgid "@math{2^{22}}\n"
msgstr ""

# type: ifnottex
#: lispref/commands.texi:1053
msgid "2**22"
msgstr ""

# type: table
#: lispref/commands.texi:1057
msgid ""
"bit in the character code indicates a character typed with the alt key held "
"down.  (On some terminals, the key labeled @key{ALT} is actually the meta "
"key.)"
msgstr ""

# type: Plain text
#: lispref/commands.texi:1068
msgid ""
"It is best to avoid mentioning specific bit numbers in your program.  To "
"test the modifier bits of a character, use the function @code{event-"
"modifiers} (@pxref{Classifying Events}).  When making key bindings, you can "
"use the read syntax for characters with modifier bits (@samp{\\C-}, @samp"
"{\\M-}, and so on).  For making key bindings with @code{define-key}, you can "
"use lists such as @code{(control hyper ?x)} to specify the characters (@pxref"
"{Changing Key Bindings}).  The function @code{event-convert-list} converts "
"such a list into an event type (@pxref{Classifying Events})."
msgstr ""

# type: cindex
#: lispref/commands.texi:1072
#, no-wrap
msgid "function keys"
msgstr ""

# type: Plain text
#: lispref/commands.texi:1078
msgid ""
"Most keyboards also have @dfn{function keys}---keys that have names or "
"symbols that are not characters.  Function keys are represented in Emacs "
"Lisp as symbols; the symbol's name is the function key's label, in lower "
"case.  For example, pressing a key labeled @key{F1} places the symbol @code"
"{f1} in the input stream."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1081
msgid ""
"The event type of a function key event is the event symbol itself.  @xref"
"{Classifying Events}."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1084
msgid ""
"Here are a few special cases in the symbol-naming convention for function "
"keys:"
msgstr ""

# type: item
#: lispref/commands.texi:1086
#, no-wrap
msgid "@code{backspace}, @code{tab}, @code{newline}, @code{return}, @code{delete}"
msgstr ""

# type: table
#: lispref/commands.texi:1089
msgid ""
"These keys correspond to common @acronym{ASCII} control characters that have "
"special keys on most keyboards."
msgstr ""

# type: table
#: lispref/commands.texi:1094
msgid ""
"In @acronym{ASCII}, @kbd{C-i} and @key{TAB} are the same character.  If the "
"terminal can distinguish between them, Emacs conveys the distinction to Lisp "
"programs by representing the former as the integer 9, and the latter as the "
"symbol @code{tab}."
msgstr ""

# type: table
#: lispref/commands.texi:1101
msgid ""
"Most of the time, it's not useful to distinguish the two.  So normally @code"
"{function-key-map} (@pxref{Translation Keymaps}) is set up to map @code{tab} "
"into 9.  Thus, a key binding for character code 9 (the character @kbd{C-i}) "
"also applies to @code{tab}.  Likewise for the other symbols in this group.  "
"The function @code{read-char} likewise converts these events into characters."
msgstr ""

# type: table
#: lispref/commands.texi:1105
msgid ""
"In @acronym{ASCII}, @key{BS} is really @kbd{C-h}.  But @code{backspace} "
"converts into the character code 127 (@key{DEL}), not into code 8 (@key"
"{BS}).  This is what most users prefer."
msgstr ""

# type: item
#: lispref/commands.texi:1106
#, no-wrap
msgid "@code{left}, @code{up}, @code{right}, @code{down}"
msgstr ""

# type: table
#: lispref/commands.texi:1108
msgid "Cursor arrow keys"
msgstr ""

# type: item
#: lispref/commands.texi:1108
#, no-wrap
msgid "@code{kp-add}, @code{kp-decimal}, @code{kp-divide}, @dots{}"
msgstr ""

# type: table
#: lispref/commands.texi:1110
msgid "Keypad keys (to the right of the regular keyboard)."
msgstr ""

# type: item
#: lispref/commands.texi:1110
#, no-wrap
msgid "@code{kp-0}, @code{kp-1}, @dots{}"
msgstr ""

# type: table
#: lispref/commands.texi:1112
msgid "Keypad keys with digits."
msgstr ""

# type: item
#: lispref/commands.texi:1112
#, no-wrap
msgid "@code{kp-f1}, @code{kp-f2}, @code{kp-f3}, @code{kp-f4}"
msgstr ""

# type: table
#: lispref/commands.texi:1114
msgid "Keypad PF keys."
msgstr ""

# type: item
#: lispref/commands.texi:1114
#, no-wrap
msgid "@code{kp-home}, @code{kp-left}, @code{kp-up}, @code{kp-right}, @code{kp-down}"
msgstr ""

# type: table
#: lispref/commands.texi:1117
msgid ""
"Keypad arrow keys.  Emacs normally translates these into the corresponding "
"non-keypad keys @code{home}, @code{left}, @dots{}"
msgstr ""

# type: item
#: lispref/commands.texi:1117
#, no-wrap
msgid "@code{kp-prior}, @code{kp-next}, @code{kp-end}, @code{kp-begin}, @code{kp-insert}, @code{kp-delete}"
msgstr ""

# type: table
#: lispref/commands.texi:1120
msgid ""
"Additional keypad duplicates of keys ordinarily found elsewhere.  Emacs "
"normally translates these into the like-named non-keypad keys."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1125
msgid ""
"You can use the modifier keys @key{ALT}, @key{CTRL}, @key{HYPER}, @key"
"{META}, @key{SHIFT}, and @key{SUPER} with function keys.  The way to "
"represent them is with prefixes in the symbol name:"
msgstr ""

# type: item
#: lispref/commands.texi:1127
#, no-wrap
msgid "A-"
msgstr ""

# type: table
#: lispref/commands.texi:1129
msgid "The alt modifier."
msgstr ""

# type: item
#: lispref/commands.texi:1129
#, no-wrap
msgid "C-"
msgstr ""

# type: table
#: lispref/commands.texi:1131
msgid "The control modifier."
msgstr ""

# type: item
#: lispref/commands.texi:1131
#, no-wrap
msgid "H-"
msgstr ""

# type: table
#: lispref/commands.texi:1133
msgid "The hyper modifier."
msgstr ""

# type: item
#: lispref/commands.texi:1133
#, no-wrap
msgid "M-"
msgstr ""

# type: table
#: lispref/commands.texi:1135
msgid "The meta modifier."
msgstr ""

# type: item
#: lispref/commands.texi:1135
#, no-wrap
msgid "S-"
msgstr ""

# type: table
#: lispref/commands.texi:1137
msgid "The shift modifier."
msgstr ""

# type: item
#: lispref/commands.texi:1137
#, no-wrap
msgid "s-"
msgstr ""

# type: table
#: lispref/commands.texi:1139
msgid "The super modifier."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1145
msgid ""
"Thus, the symbol for the key @key{F3} with @key{META} held down is @code{M-"
"f3}.  When you use more than one prefix, we recommend you write them in "
"alphabetical order; but the order does not matter in arguments to the key-"
"binding lookup and modification functions."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1156
msgid ""
"Emacs supports four kinds of mouse events: click events, drag events, button-"
"down events, and motion events.  All mouse events are represented as lists.  "
"The @sc{car} of the list is the event type; this says which mouse button was "
"involved, and which modifier keys were used with it.  The event type can "
"also distinguish double or triple button presses (@pxref{Repeat Events}).  "
"The rest of the list elements give position and time information."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1161
msgid ""
"For key lookup, only the event type matters: two events of the same type "
"necessarily run the same command.  The command can access the full values of "
"these events using the @samp{e} interactive code.  @xref{Interactive Codes}."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1167
msgid ""
"A key sequence that starts with a mouse event is read using the keymaps of "
"the buffer in the window that the mouse was in, not the current buffer.  "
"This does not imply that clicking in a window selects that window or its "
"buffer---that is entirely under the control of the command binding of the "
"key sequence."
msgstr ""

# type: cindex
#: lispref/commands.texi:1170
#, no-wrap
msgid "click event"
msgstr ""

# type: cindex
#: lispref/commands.texi:1171
#, no-wrap
msgid "mouse click event"
msgstr ""

# type: Plain text
#: lispref/commands.texi:1176
msgid ""
"When the user presses a mouse button and releases it at the same location, "
"that generates a @dfn{click} event.  All mouse click event share the same "
"format:"
msgstr ""

# type: example
#: lispref/commands.texi:1179
#, no-wrap
msgid "(@var{event-type} @var{position} @var{click-count})\n"
msgstr ""

# type: var{#1}
#: lispref/commands.texi:1182
#, no-wrap
msgid "event-type"
msgstr ""

# type: table
#: lispref/commands.texi:1186
msgid ""
"This is a symbol that indicates which mouse button was used.  It is one of "
"the symbols @code{mouse-1}, @code{mouse-2}, @dots{}, where the buttons are "
"numbered left to right."
msgstr ""

# type: table
#: lispref/commands.texi:1190
msgid ""
"You can also use prefixes @samp{A-}, @samp{C-}, @samp{H-}, @samp{M-}, @samp"
"{S-} and @samp{s-} for modifiers alt, control, hyper, meta, shift and super, "
"just as you would with function keys."
msgstr ""

# type: table
#: lispref/commands.texi:1195
msgid ""
"This symbol also serves as the event type of the event.  Key bindings "
"describe events by their types; thus, if there is a key binding for @code"
"{mouse-1}, that binding would apply to all events whose @var{event-type} is "
"@code{mouse-1}."
msgstr ""

# type: var{#1}
#: lispref/commands.texi:1196 lispref/text.texi:1224
#, no-wrap
msgid "position"
msgstr ""

# type: table
#: lispref/commands.texi:1200
msgid ""
"This is the position where the mouse click occurred.  The actual format of "
"@var{position} depends on what part of a window was clicked on.  The various "
"formats are described below."
msgstr ""

# type: var{#1}
#: lispref/commands.texi:1201
#, no-wrap
msgid "click-count"
msgstr ""

# type: table
#: lispref/commands.texi:1204
msgid ""
"This is the number of rapid repeated presses so far of the same mouse "
"button.  @xref{Repeat Events}."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1208
msgid ""
"For mouse click events in the text area, mode line, header line, or in the "
"marginal areas, @var{position} has this form:"
msgstr ""

# type: example
#: lispref/commands.texi:1213 lispref/commands.texi:1794
#, no-wrap
msgid ""
"(@var{window} @var{pos-or-area} (@var{x} . @var{y}) @var{timestamp}\n"
" @var{object} @var{text-pos} (@var{col} . @var{row})\n"
" @var{image} (@var{dx} . @var{dy}) (@var{width} . @var{height}))\n"
msgstr ""

# type: cindex
#: lispref/commands.texi:1216 lispref/commands.texi:1279
#: lispref/display.texi:1336 lispref/windows.texi:42
#, no-wrap
msgid "window"
msgstr ""

# type: table
#: lispref/commands.texi:1218
msgid "This is the window in which the click occurred."
msgstr ""

# type: var{#1}
#: lispref/commands.texi:1219
#, no-wrap
msgid "pos-or-area"
msgstr ""

# type: table
#: lispref/commands.texi:1225
msgid ""
"This is the buffer position of the character clicked on in the text area, or "
"if clicked outside the text area, it is the window area in which the click "
"occurred.  It is one of the symbols @code{mode-line}, @code{header-line}, "
"@code{vertical-line}, @code{left-margin}, @code{right-margin}, @code{left-"
"fringe}, or @code{right-fringe}."
msgstr ""

# type: item
#: lispref/commands.texi:1226
#, no-wrap
msgid "@var{x}, @var{y}"
msgstr ""

# type: table
#: lispref/commands.texi:1231
msgid ""
"These are the pixel-denominated coordinates of the click, relative to the "
"top left corner of @var{window}, which is @code{(0 . 0)}.  For the mode or "
"header line, @var{y} does not have meaningful data.  For the vertical line, "
"@var{x} does not have meaningful data."
msgstr ""

# type: var{#1}
#: lispref/commands.texi:1232 lispref/commands.texi:1293
#, no-wrap
msgid "timestamp"
msgstr ""

# type: table
#: lispref/commands.texi:1234 lispref/commands.texi:1295
msgid "This is the time at which the event occurred, in milliseconds."
msgstr ""

# type: cindex
#: lispref/commands.texi:1235 lispref/objects.texi:9
#, no-wrap
msgid "object"
msgstr ""

# type: table
#: lispref/commands.texi:1240
msgid ""
"This is the object on which the click occurred.  It is either @code{nil} if "
"there is no string property, or it has the form (@var{string} . @var{string-"
"pos}) when there is a string-type text property at the click position."
msgstr ""

# type: var{#1}
#: lispref/commands.texi:1241 lispref/customize.texi:516
#: lispref/display.texi:3435 lispref/display.texi:5309
#: lispref/keymaps.texi:207 lispref/modes.texi:1611 lispref/streams.texi:100
#, no-wrap
msgid "string"
msgstr ""

# type: table
#: lispref/commands.texi:1244
msgid ""
"This is the string on which the click occurred, including any properties."
msgstr ""

# type: var{#1}
#: lispref/commands.texi:1245
#, no-wrap
msgid "string-pos"
msgstr ""

# type: table
#: lispref/commands.texi:1248
msgid ""
"This is the position in the string on which the click occurred, relevant if "
"properties at the click need to be looked up."
msgstr ""

# type: var{#1}
#: lispref/commands.texi:1249
#, no-wrap
msgid "text-pos"
msgstr ""

# type: table
#: lispref/commands.texi:1254
msgid ""
"For clicks on a marginal area or on a fringe, this is the buffer position of "
"the first visible character in the corresponding line in the window.  For "
"other events, it is the current buffer position in the window."
msgstr ""

# type: item
#: lispref/commands.texi:1255
#, no-wrap
msgid "@var{col}, @var{row}"
msgstr ""

# type: table
#: lispref/commands.texi:1259
msgid ""
"These are the actual coordinates of the glyph under the @var{x}, @var{y} "
"position, possibly padded with default character width glyphs if @var{x} is "
"beyond the last glyph on the line."
msgstr ""

# type: var{#1}
#: lispref/commands.texi:1260
#, no-wrap
msgid "image"
msgstr ""

# type: table
#: lispref/commands.texi:1264
msgid ""
"This is the image object on which the click occurred.  It is either @code"
"{nil} if there is no image at the position clicked on, or it is an image "
"object as returned by @code{find-image} if click was in an image."
msgstr ""

# type: item
#: lispref/commands.texi:1265
#, no-wrap
msgid "@var{dx}, @var{dy}"
msgstr ""

# type: table
#: lispref/commands.texi:1270
msgid ""
"These are the pixel-denominated coordinates of the click, relative to the "
"top left corner of @var{object}, which is @code{(0 . 0)}.  If @var{object} "
"is @code{nil}, the coordinates are relative to the top left corner of the "
"character glyph clicked on."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1273
msgid "For mouse clicks on a scroll-bar, @var{position} has this form:"
msgstr ""

# type: example
#: lispref/commands.texi:1276
#, no-wrap
msgid "(@var{window} @var{area} (@var{portion} . @var{whole}) @var{timestamp} @var{part})\n"
msgstr ""

# type: table
#: lispref/commands.texi:1281
msgid "This is the window whose scroll-bar was clicked on."
msgstr ""

# type: var{#1}
#: lispref/commands.texi:1282
#, no-wrap
msgid "area"
msgstr ""

# type: table
#: lispref/commands.texi:1285
msgid ""
"This is the scroll bar where the click occurred.  It is one of the symbols "
"@code{vertical-scroll-bar} or @code{horizontal-scroll-bar}."
msgstr ""

# type: var{#1}
#: lispref/commands.texi:1286
#, no-wrap
msgid "portion"
msgstr ""

# type: table
#: lispref/commands.texi:1289
msgid ""
"This is the distance of the click from the top or left end of the scroll bar."
msgstr ""

# type: var{#1}
#: lispref/commands.texi:1290
#, no-wrap
msgid "whole"
msgstr ""

# type: table
#: lispref/commands.texi:1292
msgid "This is the length of the entire scroll bar."
msgstr ""

# type: var{#1}
#: lispref/commands.texi:1296
#, no-wrap
msgid "part"
msgstr ""

# type: table
#: lispref/commands.texi:1300
msgid ""
"This is the part of the scroll-bar which was clicked on.  It is one of the "
"symbols @code{above-handle}, @code{handle}, @code{below-handle}, @code{up}, "
"@code{down}, @code{top}, @code{bottom}, and @code{end-scroll}."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1306
msgid ""
"In one special case, @var{buffer-pos} is a list containing a symbol (one of "
"the symbols listed above) instead of just the symbol.  This happens after "
"the imaginary prefix keys for the event are inserted into the input stream.  "
"@xref{Key Sequence Input}."
msgstr ""

# type: cindex
#: lispref/commands.texi:1309
#, no-wrap
msgid "drag event"
msgstr ""

# type: cindex
#: lispref/commands.texi:1310
#, no-wrap
msgid "mouse drag event"
msgstr ""

# type: Plain text
#: lispref/commands.texi:1318
msgid ""
"With Emacs, you can have a drag event without even changing your clothes.  A "
"@dfn{drag event} happens every time the user presses a mouse button and then "
"moves the mouse to a different character position before releasing the "
"button.  Like all mouse events, drag events are represented in Lisp as "
"lists.  The lists record both the starting mouse position and the final "
"position, like this:"
msgstr ""

# type: example
#: lispref/commands.texi:1324
#, no-wrap
msgid ""
"(@var{event-type}\n"
" (@var{window1} @var{buffer-pos1} (@var{x1} . @var{y1}) @var{timestamp1})\n"
" (@var{window2} @var{buffer-pos2} (@var{x2} . @var{y2}) @var{timestamp2})\n"
" @var{click-count})\n"
msgstr ""

# type: Plain text
#: lispref/commands.texi:1334
msgid ""
"For a drag event, the name of the symbol @var{event-type} contains the "
"prefix @samp{drag-}.  For example, dragging the mouse with button 2 held "
"down generates a @code{drag-mouse-2} event.  The second and third elements "
"of the event give the starting and ending position of the drag.  Aside from "
"that, the data have the same meanings as in a click event (@pxref{Click "
"Events}).  You can access the second element of any mouse event in the same "
"way, with no need to distinguish drag events from others."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1337
msgid ""
"The @samp{drag-} prefix follows the modifier key prefixes such as @samp{C-} "
"and @samp{M-}."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1343
msgid ""
"If @code{read-key-sequence} receives a drag event that has no key binding, "
"and the corresponding click event does have a binding, it changes the drag "
"event into a click event at the drag's starting position.  This means that "
"you don't have to distinguish between click and drag events unless you want "
"to."
msgstr ""

# type: cindex
#: lispref/commands.texi:1346
#, no-wrap
msgid "button-down event"
msgstr ""

# type: Plain text
#: lispref/commands.texi:1351
msgid ""
"Click and drag events happen when the user releases a mouse button.  They "
"cannot happen earlier, because there is no way to distinguish a click from a "
"drag until the button is released."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1359
msgid ""
"If you want to take action as soon as a button is pressed, you need to "
"handle @dfn{button-down} events.@footnote{Button-down is the conservative "
"antithesis of drag.} These occur as soon as a button is pressed.  They are "
"represented by lists that look exactly like click events (@pxref{Click "
"Events}), except that the @var{event-type} symbol name contains the prefix "
"@samp{down-}.  The @samp{down-} prefix follows modifier key prefixes such as "
"@samp{C-} and @samp{M-}."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1367
msgid ""
"The function @code{read-key-sequence} ignores any button-down events that "
"don't have command bindings; therefore, the Emacs command loop ignores them "
"too.  This means that you need not worry about defining button-down events "
"unless you want them to do something.  The usual reason to define a button-"
"down event is so that you can track mouse motion (by reading motion events) "
"until the button is released.  @xref{Motion Events}."
msgstr ""

# type: cindex
#: lispref/commands.texi:1370
#, no-wrap
msgid "repeat events"
msgstr ""

# type: cindex
#: lispref/commands.texi:1371
#, no-wrap
msgid "double-click events"
msgstr ""

# type: cindex
#: lispref/commands.texi:1372
#, no-wrap
msgid "triple-click events"
msgstr ""

# type: cindex
#: lispref/commands.texi:1373
#, no-wrap
msgid "mouse events, repeated"
msgstr ""

# type: Plain text
#: lispref/commands.texi:1378
msgid ""
"If you press the same mouse button more than once in quick succession "
"without moving the mouse, Emacs generates special @dfn{repeat} mouse events "
"for the second and subsequent presses."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1383
msgid ""
"The most common repeat events are @dfn{double-click} events.  Emacs "
"generates a double-click event when you click a button twice; the event "
"happens when you release the button (as is normal for all click events)."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1391
msgid ""
"The event type of a double-click event contains the prefix @samp{double-}.  "
"Thus, a double click on the second mouse button with @key{meta} held down "
"comes to the Lisp program as @code{M-double-mouse-2}.  If a double-click "
"event has no binding, the binding of the corresponding ordinary click event "
"is used to execute it.  Thus, you need not pay attention to the double click "
"feature unless you really want to."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1397
msgid ""
"When the user performs a double click, Emacs generates first an ordinary "
"click event, and then a double-click event.  Therefore, you must design the "
"command binding of the double click event to assume that the single-click "
"command has already run.  It must produce the desired results of a double "
"click, starting from the results of a single click."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1401
msgid ""
"This is convenient, if the meaning of a double click somehow ``builds on'' "
"the meaning of a single click---which is recommended user interface design "
"practice for double clicks."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1408
msgid ""
"If you click a button, then press it down again and start moving the mouse "
"with the button held down, then you get a @dfn{double-drag} event when you "
"ultimately release the button.  Its event type contains @samp{double-drag} "
"instead of just @samp{drag}.  If a double-drag event has no binding, Emacs "
"looks for an alternate binding as if the event were an ordinary drag."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1416
msgid ""
"Before the double-click or double-drag event, Emacs generates a @dfn{double-"
"down} event when the user presses the button down for the second time.  Its "
"event type contains @samp{double-down} instead of just @samp{down}.  If a "
"double-down event has no binding, Emacs looks for an alternate binding as if "
"the event were an ordinary button-down event.  If it finds no binding that "
"way either, the double-down event is ignored."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1421
msgid ""
"To summarize, when you click a button and then press it again right away, "
"Emacs generates a down event and a click event for the first click, a double-"
"down event when you press the button again, and finally either a double-"
"click or a double-drag event."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1428
msgid ""
"If you click a button twice and then press it again, all in quick "
"succession, Emacs generates a @dfn{triple-down} event, followed by either a "
"@dfn{triple-click} or a @dfn{triple-drag}.  The event types of these events "
"contain @samp{triple} instead of @samp{double}.  If any triple event has no "
"binding, Emacs uses the binding that it would use for the corresponding "
"double event."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1434
msgid ""
"If you click a button three or more times and then press it again, the "
"events for the presses beyond the third are all triple events.  Emacs does "
"not have separate event types for quadruple, quintuple, etc.@: events.  "
"However, you can look at the event list to find out precisely how many times "
"the button was pressed."
msgstr ""

# type: defun
#: lispref/commands.texi:1435
#, no-wrap
msgid "event-click-count event"
msgstr ""

# type: defun
#: lispref/commands.texi:1441
msgid ""
"This function returns the number of consecutive button presses that led up "
"to @var{event}.  If @var{event} is a double-down, double-click or double-"
"drag event, the value is 2.  If @var{event} is a triple event, the value is "
"3 or greater.  If @var{event} is an ordinary mouse event (not a repeat "
"event), the value is 1."
msgstr ""

# type: defopt
#: lispref/commands.texi:1443
#, no-wrap
msgid "double-click-fuzz"
msgstr "double-click-fuzz"

# type: defopt
#: lispref/commands.texi:1449
msgid ""
"To generate repeat events, successive mouse button presses must be at "
"approximately the same screen position.  The value of @code{double-click-"
"fuzz} specifies the maximum number of pixels the mouse may be moved "
"(horizontally or vertically) between two successive clicks to make a double-"
"click."
msgstr ""

# type: defopt
#: lispref/commands.texi:1452
msgid ""
"This variable is also the threshold for motion of the mouse to count as a "
"drag."
msgstr ""

# type: defopt
#: lispref/commands.texi:1454
#, no-wrap
msgid "double-click-time"
msgstr "double-click-time"

# type: defopt
#: lispref/commands.texi:1461
msgid ""
"To generate repeat events, the number of milliseconds between successive "
"button presses must be less than the value of @code{double-click-time}.  "
"Setting @code{double-click-time} to @code{nil} disables multi-click "
"detection entirely.  Setting it to @code{t} removes the time limit; Emacs "
"then detects multi-clicks by position only."
msgstr ""

# type: cindex
#: lispref/commands.texi:1465
#, no-wrap
msgid "motion event"
msgstr ""

# type: cindex
#: lispref/commands.texi:1466
#, no-wrap
msgid "mouse motion events"
msgstr ""

# type: Plain text
#: lispref/commands.texi:1471
msgid ""
"Emacs sometimes generates @dfn{mouse motion} events to describe motion of "
"the mouse without any button activity.  Mouse motion events are represented "
"by lists that look like this:"
msgstr ""

# type: example
#: lispref/commands.texi:1474
#, no-wrap
msgid "(mouse-movement (@var{window} @var{buffer-pos} (@var{x} . @var{y}) @var{timestamp}))\n"
msgstr ""

# type: Plain text
#: lispref/commands.texi:1478
msgid ""
"The second element of the list describes the current position of the mouse, "
"just as in a click event (@pxref{Click Events})."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1483
msgid ""
"The special form @code{track-mouse} enables generation of motion events "
"within its body.  Outside of @code{track-mouse} forms, Emacs does not "
"generate events for mere motion of the mouse, and these events do not "
"appear.  @xref{Mouse Tracking}."
msgstr ""

# type: cindex
#: lispref/commands.texi:1486
#, no-wrap
msgid "focus event"
msgstr ""

# type: Plain text
#: lispref/commands.texi:1494
msgid ""
"Window systems provide general ways for the user to control which window "
"gets keyboard input.  This choice of window is called the @dfn{focus}.  When "
"the user does something to switch between Emacs frames, that generates a @dfn"
"{focus event}.  The normal definition of a focus event, in the global "
"keymap, is to select a new frame within Emacs, as the user would expect.  "
"@xref{Input Focus}."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1496
msgid "Focus events are represented in Lisp as lists that look like this:"
msgstr ""

# type: example
#: lispref/commands.texi:1499
#, no-wrap
msgid "(switch-frame @var{new-frame})\n"
msgstr ""

# type: Plain text
#: lispref/commands.texi:1503
msgid "where @var{new-frame} is the frame switched to."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1512
msgid ""
"Most X window managers are set up so that just moving the mouse into a "
"window is enough to set the focus there.  Emacs appears to do this, because "
"it changes the cursor to solid in the new frame.  However, there is no need "
"for the Lisp program to know about the focus change until some other kind of "
"input arrives.  So Emacs generates a focus event only when the user actually "
"types a keyboard key or presses a mouse button in the new frame; just moving "
"the mouse between frames does not generate a focus event."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1519
msgid ""
"A focus event in the middle of a key sequence would garble the sequence.  So "
"Emacs never generates a focus event in the middle of a key sequence.  If the "
"user changes focus in the middle of a key sequence---that is, after a prefix "
"key---then Emacs reorders the events so that the focus event comes either "
"before or after the multi-event key sequence, and not within it."
msgstr ""

# type: subsection
#: lispref/commands.texi:1521
#, no-wrap
msgid "Miscellaneous System Events"
msgstr ""

# type: Plain text
#: lispref/commands.texi:1524
msgid "A few other event types represent occurrences within the system."
msgstr ""

# type: cindex
#: lispref/commands.texi:1526
#, no-wrap
msgid "@code{delete-frame} event"
msgstr ""

# type: item
#: lispref/commands.texi:1527
#, no-wrap
msgid "(delete-frame (@var{frame}))"
msgstr ""

# type: table
#: lispref/commands.texi:1530
msgid ""
"This kind of event indicates that the user gave the window manager a command "
"to delete a particular window, which happens to be an Emacs frame."
msgstr ""

# type: table
#: lispref/commands.texi:1532
msgid ""
"The standard definition of the @code{delete-frame} event is to delete @var"
"{frame}."
msgstr ""

# type: cindex
#: lispref/commands.texi:1533
#, no-wrap
msgid "@code{iconify-frame} event"
msgstr ""

# type: item
#: lispref/commands.texi:1534
#, no-wrap
msgid "(iconify-frame (@var{frame}))"
msgstr ""

# type: table
#: lispref/commands.texi:1540
msgid ""
"This kind of event indicates that the user iconified @var{frame} using the "
"window manager.  Its standard definition is @code{ignore}; since the frame "
"has already been iconified, Emacs has no work to do.  The purpose of this "
"event type is so that you can keep track of such events if you want to."
msgstr ""

# type: cindex
#: lispref/commands.texi:1541
#, no-wrap
msgid "@code{make-frame-visible} event"
msgstr ""

# type: item
#: lispref/commands.texi:1542
#, no-wrap
msgid "(make-frame-visible (@var{frame}))"
msgstr ""

# type: table
#: lispref/commands.texi:1546
msgid ""
"This kind of event indicates that the user deiconified @var{frame} using the "
"window manager.  Its standard definition is @code{ignore}; since the frame "
"has already been made visible, Emacs has no work to do."
msgstr ""

# type: cindex
#: lispref/commands.texi:1547
#, no-wrap
msgid "@code{wheel-up} event"
msgstr ""

# type: cindex
#: lispref/commands.texi:1548
#, no-wrap
msgid "@code{wheel-down} event"
msgstr ""

# type: item
#: lispref/commands.texi:1549
#, no-wrap
msgid "(wheel-up @var{position})"
msgstr ""

# type: item
#: lispref/commands.texi:1550
#, no-wrap
msgid "(wheel-down @var{position})"
msgstr ""

# type: table
#: lispref/commands.texi:1553
msgid ""
"These kinds of event are generated by moving a mouse wheel.  Their usual "
"meaning is a kind of scroll or zoom."
msgstr ""

# type: table
#: lispref/commands.texi:1556
msgid ""
"The element @var{position} is a list describing the position of the event, "
"in the same format as used in a mouse-click event."
msgstr ""

# type: table
#: lispref/commands.texi:1562
msgid ""
"This kind of event is generated only on some kinds of systems. On some "
"systems, @code{mouse-4} and @code{mouse-5} are used instead.  For portable "
"code, use the variables @code{mouse-wheel-up-event} and @code{mouse-wheel-"
"down-event} defined in @file{mwheel.el} to determine what event types to "
"expect for the mouse wheel."
msgstr ""

# type: cindex
#: lispref/commands.texi:1563
#, no-wrap
msgid "@code{drag-n-drop} event"
msgstr ""

# type: item
#: lispref/commands.texi:1564
#, no-wrap
msgid "(drag-n-drop @var{position} @var{files})"
msgstr ""

# type: table
#: lispref/commands.texi:1568
msgid ""
"This kind of event is generated when a group of files is selected in an "
"application outside of Emacs, and then dragged and dropped onto an Emacs "
"frame."
msgstr ""

# type: table
#: lispref/commands.texi:1573
msgid ""
"The element @var{position} is a list describing the position of the event, "
"in the same format as used in a mouse-click event, and @var{files} is the "
"list of file names that were dragged and dropped.  The usual way to handle "
"this event is by visiting these files."
msgstr ""

# type: table
#: lispref/commands.texi:1576
msgid ""
"This kind of event is generated, at present, only on some kinds of systems."
msgstr ""

# type: cindex
#: lispref/commands.texi:1577
#, no-wrap
msgid "@code{help-echo} event"
msgstr ""

# type: item
#: lispref/commands.texi:1578 lispref/display.texi:1388
#: lispref/display.texi:4386 lispref/text.texi:3041
#, no-wrap
msgid "help-echo"
msgstr ""

# type: table
#: lispref/commands.texi:1582
msgid ""
"This kind of event is generated when a mouse pointer moves onto a portion of "
"buffer text which has a @code{help-echo} text property.  The generated event "
"has this form:"
msgstr ""

# type: example
#: lispref/commands.texi:1585
#, no-wrap
msgid "(help-echo @var{frame} @var{help} @var{window} @var{object} @var{pos})\n"
msgstr ""

# type: table
#: lispref/commands.texi:1591
msgid ""
"The precise meaning of the event parameters and the way these parameters are "
"used to display the help-echo text are described in @ref{Text help-echo}."
msgstr ""

# type: cindex
#: lispref/commands.texi:1592
#, no-wrap
msgid "@code{sigusr1} event"
msgstr ""

# type: cindex
#: lispref/commands.texi:1593
#, no-wrap
msgid "@code{sigusr2} event"
msgstr ""

# type: cindex
#: lispref/commands.texi:1594
#, no-wrap
msgid "user signals"
msgstr ""

# type: item
#: lispref/commands.texi:1595
#, no-wrap
msgid "sigusr1"
msgstr ""

# type: itemx
#: lispref/commands.texi:1596
#, no-wrap
msgid "sigusr2"
msgstr ""

# type: table
#: lispref/commands.texi:1600
msgid ""
"These events are generated when the Emacs process receives the signals @code"
"{SIGUSR1} and @code{SIGUSR2}.  They contain no additional data because "
"signals do not carry additional information."
msgstr ""

# type: table
#: lispref/commands.texi:1605
msgid ""
"To catch a user signal, bind the corresponding event to an interactive "
"command in the @code{special-event-map} (@pxref{Active Keymaps}).  The "
"command is called with no arguments, and the specific signal event is "
"available in @code{last-input-event}.  For example:"
msgstr ""

# type: smallexample
#: lispref/commands.texi:1610
#, no-wrap
msgid ""
"(defun sigusr-handler ()\n"
"  (interactive)\n"
"  (message \"Caught signal %S\" last-input-event))\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/commands.texi:1612
#, no-wrap
msgid "(define-key special-event-map [sigusr1] 'sigusr-handler)\n"
msgstr ""

# type: table
#: lispref/commands.texi:1615
msgid "To test the signal handler, you can make Emacs send a signal to itself:"
msgstr ""

# type: smallexample
#: lispref/commands.texi:1618
#, no-wrap
msgid "(signal-process (emacs-pid) 'sigusr1)\n"
msgstr ""

# type: Plain text
#: lispref/commands.texi:1625
msgid ""
"If one of these events arrives in the middle of a key sequence---that is, "
"after a prefix key---then Emacs reorders the events so that this event comes "
"either before or after the multi-event key sequence, not within it."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1631
msgid ""
"If the user presses and releases the left mouse button over the same "
"location, that generates a sequence of events like this:"
msgstr ""

# type: smallexample
#: lispref/commands.texi:1635
#, no-wrap
msgid ""
"(down-mouse-1 (#<window 18 on NEWS> 2613 (0 . 38) -864320))\n"
"(mouse-1      (#<window 18 on NEWS> 2613 (0 . 38) -864180))\n"
msgstr ""

# type: Plain text
#: lispref/commands.texi:1640
msgid ""
"While holding the control key down, the user might hold down the second "
"mouse button, and drag the mouse from one line to the next.  That produces "
"two events, as shown here:"
msgstr ""

# type: smallexample
#: lispref/commands.texi:1645
#, no-wrap
msgid ""
"(C-down-mouse-2 (#<window 18 on NEWS> 3440 (0 . 27) -731219))\n"
"(C-drag-mouse-2 (#<window 18 on NEWS> 3440 (0 . 27) -731219)\n"
"                (#<window 18 on NEWS> 3510 (0 . 28) -729648))\n"
msgstr ""

# type: Plain text
#: lispref/commands.texi:1650
msgid ""
"While holding down the meta and shift keys, the user might press the second "
"mouse button on the window's mode line, and then drag the mouse into another "
"window.  That produces a pair of events like these:"
msgstr ""

# type: smallexample
#: lispref/commands.texi:1656
#, no-wrap
msgid ""
"(M-S-down-mouse-2 (#<window 18 on NEWS> mode-line (33 . 31) -457844))\n"
"(M-S-drag-mouse-2 (#<window 18 on NEWS> mode-line (33 . 31) -457844)\n"
"                  (#<window 20 on carlton-sanskrit.tex> 161 (33 . 3)\n"
"                   -453816))\n"
msgstr ""

# type: Plain text
#: lispref/commands.texi:1660
msgid ""
"To handle a SIGUSR1 signal, define an interactive function, and bind it to "
"the @code{signal usr1} event sequence:"
msgstr ""

# type: smallexample
#: lispref/commands.texi:1666
#, no-wrap
msgid ""
"(defun usr1-handler ()\n"
"  (interactive)\n"
"  (message \"Got USR1 signal\"))\n"
"(global-set-key [signal usr1] 'usr1-handler)\n"
msgstr ""

# type: cindex
#: lispref/commands.texi:1670
#, no-wrap
msgid "event type"
msgstr ""

# type: Plain text
#: lispref/commands.texi:1678
msgid ""
"Every event has an @dfn{event type}, which classifies the event for key "
"binding purposes.  For a keyboard event, the event type equals the event "
"value; thus, the event type for a character is the character, and the event "
"type for a function key symbol is the symbol itself.  For events that are "
"lists, the event type is the symbol in the @sc{car} of the list.  Thus, the "
"event type is always a symbol or a character."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1684
msgid ""
"Two events of the same type are equivalent where key bindings are concerned; "
"thus, they always run the same command.  That does not necessarily mean they "
"do the same things, however, as some commands look at the whole event to "
"decide what to do.  For example, some commands use the location of a mouse "
"event to decide where in the buffer to act."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1688
msgid ""
"Sometimes broader classifications of events are useful.  For example, you "
"might want to ask whether an event involved the @key{META} key, regardless "
"of which other key or mouse button was used."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1691
msgid ""
"The functions @code{event-modifiers} and @code{event-basic-type} are "
"provided to get such information conveniently."
msgstr ""

# type: defun
#: lispref/commands.texi:1692
#, no-wrap
msgid "event-modifiers event"
msgstr ""

# type: defun
#: lispref/commands.texi:1699
msgid ""
"This function returns a list of the modifiers that @var{event} has.  The "
"modifiers are symbols; they include @code{shift}, @code{control}, @code"
"{meta}, @code{alt}, @code{hyper} and @code{super}.  In addition, the "
"modifiers list of a mouse event symbol always contains one of @code{click}, "
"@code{drag}, and @code{down}.  For double or triple events, it also contains "
"@code{double} or @code{triple}."
msgstr ""

# type: defun
#: lispref/commands.texi:1705
msgid ""
"The argument @var{event} may be an entire event object, or just an event "
"type.  If @var{event} is a symbol that has never been used in an event that "
"has been read as input in the current Emacs session, then @code{event-"
"modifiers} can return @code{nil}, even when @var{event} actually has "
"modifiers."
msgstr ""

# type: defspec
#: lispref/commands.texi:1707 lispref/display.texi:1211
#: lispref/functions.texi:539
msgid "Here are some examples:"
msgstr ""

# type: example
#: lispref/commands.texi:1729
#, no-wrap
msgid ""
"(event-modifiers ?a)\n"
"     @result{} nil\n"
"(event-modifiers ?A)\n"
"     @result{} (shift)\n"
"(event-modifiers ?\\C-a)\n"
"     @result{} (control)\n"
"(event-modifiers ?\\C-%)\n"
"     @result{} (control)\n"
"(event-modifiers ?\\C-\\S-a)\n"
"     @result{} (control shift)\n"
"(event-modifiers 'f5)\n"
"     @result{} nil\n"
"(event-modifiers 's-f5)\n"
"     @result{} (super)\n"
"(event-modifiers 'M-S-f5)\n"
"     @result{} (meta shift)\n"
"(event-modifiers 'mouse-1)\n"
"     @result{} (click)\n"
"(event-modifiers 'down-mouse-1)\n"
"     @result{} (down)\n"
msgstr ""

# type: defun
#: lispref/commands.texi:1733
msgid ""
"The modifiers list for a click event explicitly contains @code{click}, but "
"the event symbol name itself does not contain @samp{click}."
msgstr ""

# type: defun
#: lispref/commands.texi:1735
#, no-wrap
msgid "event-basic-type event"
msgstr ""

# type: defun
#: lispref/commands.texi:1739
msgid ""
"This function returns the key or mouse button that @var{event} describes, "
"with all modifiers removed.  The @var{event} argument is as in @code{event-"
"modifiers}.  For example:"
msgstr ""

# type: example
#: lispref/commands.texi:1757
#, no-wrap
msgid ""
"(event-basic-type ?a)\n"
"     @result{} 97\n"
"(event-basic-type ?A)\n"
"     @result{} 97\n"
"(event-basic-type ?\\C-a)\n"
"     @result{} 97\n"
"(event-basic-type ?\\C-\\S-a)\n"
"     @result{} 97\n"
"(event-basic-type 'f5)\n"
"     @result{} f5\n"
"(event-basic-type 's-f5)\n"
"     @result{} f5\n"
"(event-basic-type 'M-S-f5)\n"
"     @result{} f5\n"
"(event-basic-type 'down-mouse-1)\n"
"     @result{} mouse-1\n"
msgstr ""

# type: defun
#: lispref/commands.texi:1760
#, no-wrap
msgid "mouse-movement-p object"
msgstr ""

# type: defun
#: lispref/commands.texi:1763
msgid ""
"This function returns non-@code{nil} if @var{object} is a mouse movement "
"event."
msgstr ""

# type: defun
#: lispref/commands.texi:1765
#, no-wrap
msgid "event-convert-list list"
msgstr ""

# type: defun
#: lispref/commands.texi:1769
msgid ""
"This function converts a list of modifier names and a basic event type to an "
"event type which specifies all of them.  The basic event type must be the "
"last element of the list.  For example,"
msgstr ""

# type: example
#: lispref/commands.texi:1777
#, no-wrap
msgid ""
"(event-convert-list '(control ?a))\n"
"     @result{} 1\n"
"(event-convert-list '(control meta ?a))\n"
"     @result{} -134217727\n"
"(event-convert-list '(control super f1))\n"
"     @result{} C-s-f1\n"
msgstr ""

# type: cindex
#: lispref/commands.texi:1782
#, no-wrap
msgid "mouse events, data in"
msgstr ""

# type: Plain text
#: lispref/commands.texi:1786
msgid ""
"This section describes convenient functions for accessing the data in a "
"mouse button or motion event."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1789
msgid ""
"These two functions return the starting or ending position of a mouse-button "
"event, as a list of this form:"
msgstr ""

# type: defun
#: lispref/commands.texi:1796
#, no-wrap
msgid "event-start event"
msgstr ""

# type: defun
#: lispref/commands.texi:1798
msgid "This returns the starting position of @var{event}."
msgstr ""

# type: defun
#: lispref/commands.texi:1802
msgid ""
"If @var{event} is a click or button-down event, this returns the location of "
"the event.  If @var{event} is a drag event, this returns the drag's starting "
"position."
msgstr ""

# type: defun
#: lispref/commands.texi:1804
#, no-wrap
msgid "event-end event"
msgstr ""

# type: defun
#: lispref/commands.texi:1806
msgid "This returns the ending position of @var{event}."
msgstr ""

# type: defun
#: lispref/commands.texi:1811
msgid ""
"If @var{event} is a drag event, this returns the position where the user "
"released the mouse button.  If @var{event} is a click or button-down event, "
"the value is actually the starting position, which is the only position such "
"events have."
msgstr ""

# type: cindex
#: lispref/commands.texi:1813
#, no-wrap
msgid "mouse position list, accessing"
msgstr ""

# type: Plain text
#: lispref/commands.texi:1816
msgid ""
"These functions take a position list as described above, and return various "
"parts of it."
msgstr ""

# type: defun
#: lispref/commands.texi:1817
#, no-wrap
msgid "posn-window position"
msgstr ""

# type: defun
#: lispref/commands.texi:1819
msgid "Return the window that @var{position} is in."
msgstr ""

# type: defun
#: lispref/commands.texi:1821
#, no-wrap
msgid "posn-area position"
msgstr ""

# type: defun
#: lispref/commands.texi:1825
msgid ""
"Return the window area recorded in @var{position}.  It returns @code{nil} "
"when the event occurred in the text area of the window; otherwise, it is a "
"symbol identifying the area in which the event occurred."
msgstr ""

# type: defun
#: lispref/commands.texi:1827
#, no-wrap
msgid "posn-point position"
msgstr ""

# type: defun
#: lispref/commands.texi:1832
msgid ""
"Return the buffer position in @var{position}.  When the event occurred in "
"the text area of the window, in a marginal area, or on a fringe, this is an "
"integer specifying a buffer position.  Otherwise, the value is undefined."
msgstr ""

# type: defun
#: lispref/commands.texi:1834
#, no-wrap
msgid "posn-x-y position"
msgstr ""

# type: defun
#: lispref/commands.texi:1838
msgid ""
"Return the pixel-based x and y coordinates in @var{position}, as a cons cell "
"@code{(@var{x} . @var{y})}.  These coordinates are relative to the window "
"given by @code{posn-window}."
msgstr ""

# type: defun
#: lispref/commands.texi:1841
msgid ""
"This example shows how to convert these window-relative coordinates into "
"frame-relative coordinates:"
msgstr ""

# type: example
#: lispref/commands.texi:1850
#, no-wrap
msgid ""
"(defun frame-relative-coordinates (position)\n"
"  \"Return frame-relative coordinates from POSITION.\"\n"
"  (let* ((x-y (posn-x-y position))\n"
"         (window (posn-window position))\n"
"         (edges (window-inside-pixel-edges window)))\n"
"    (cons (+ (car x-y) (car edges))\n"
"          (+ (cdr x-y) (cadr edges)))))\n"
msgstr ""

# type: defun
#: lispref/commands.texi:1853
#, no-wrap
msgid "posn-col-row position"
msgstr ""

# type: defun
#: lispref/commands.texi:1858
msgid ""
"Return the row and column (in units of the frame's default character height "
"and width) of @var{position}, as a cons cell @code{(@var{col} .  @var"
"{row})}.  These are computed from the @var{x} and @var{y} values actually "
"found in @var{position}."
msgstr ""

# type: defun
#: lispref/commands.texi:1860
#, no-wrap
msgid "posn-actual-col-row position"
msgstr ""

# type: defun
#: lispref/commands.texi:1866
msgid ""
"Return the actual row and column in @var{position}, as a cons cell @code"
"{(@var{col} . @var{row})}.  The values are the actual row number in the "
"window, and the actual character number in that row.  It returns @code{nil} "
"if @var{position} does not include actual positions values.  You can use "
"@code{posn-col-row} to get approximate values."
msgstr ""

# type: defun
#: lispref/commands.texi:1868
#, no-wrap
msgid "posn-string position"
msgstr ""

# type: defun
#: lispref/commands.texi:1871
msgid ""
"Return the string object in @var{position}, either @code{nil}, or a cons "
"cell @code{(@var{string} . @var{string-pos})}."
msgstr ""

# type: defun
#: lispref/commands.texi:1873
#, no-wrap
msgid "posn-image position"
msgstr ""

# type: defun
#: lispref/commands.texi:1876
msgid ""
"Return the image object in @var{position}, either @code{nil}, or an image "
"@code{(image ...)}."
msgstr ""

# type: defun
#: lispref/commands.texi:1878
#, no-wrap
msgid "posn-object position"
msgstr ""

# type: defun
#: lispref/commands.texi:1882
msgid ""
"Return the image or string object in @var{position}, either @code{nil}, an "
"image @code{(image ...)}, or a cons cell @code{(@var{string} . @var{string-"
"pos})}."
msgstr ""

# type: defun
#: lispref/commands.texi:1884
#, no-wrap
msgid "posn-object-x-y position"
msgstr ""

# type: defun
#: lispref/commands.texi:1889
msgid ""
"Return the pixel-based x and y coordinates relative to the upper left corner "
"of the object in @var{position} as a cons cell @code{(@var{dx} . @var"
"{dy})}.  If the @var{position} is a buffer position, return the relative "
"position in the character at that position."
msgstr ""

# type: defun
#: lispref/commands.texi:1891
#, no-wrap
msgid "posn-object-width-height position"
msgstr ""

# type: defun
#: lispref/commands.texi:1895
msgid ""
"Return the pixel width and height of the object in @var{position} as a cons "
"cell @code{(@var{width} . @var{height})}.  If the @var{position} is a buffer "
"position, return the size of the character at that position."
msgstr ""

# type: cindex
#: lispref/commands.texi:1897
#, no-wrap
msgid "timestamp of a mouse event"
msgstr ""

# type: defun
#: lispref/commands.texi:1898
#, no-wrap
msgid "posn-timestamp position"
msgstr ""

# type: defun
#: lispref/commands.texi:1901
msgid ""
"Return the timestamp in @var{position}.  This is the time at which the event "
"occurred, in milliseconds."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1906
msgid ""
"These functions compute a position list given particular buffer position or "
"screen position.  You can access the data in this position list with the "
"functions described above."
msgstr ""

# type: defun
#: lispref/commands.texi:1907
#, no-wrap
msgid "posn-at-point &optional pos window"
msgstr ""

# type: defun
#: lispref/commands.texi:1911
msgid ""
"This function returns a position list for position @var{pos} in @var"
"{window}.  @var{pos} defaults to point in @var{window}; @var{window} "
"defaults to the selected window."
msgstr ""

# type: defun
#: lispref/commands.texi:1914
msgid ""
"@code{posn-at-point} returns @code{nil} if @var{pos} is not visible in @var"
"{window}."
msgstr ""

# type: defun
#: lispref/commands.texi:1916
#, no-wrap
msgid "posn-at-x-y x y &optional frame-or-window whole"
msgstr ""

# type: defun
#: lispref/commands.texi:1925
msgid ""
"This function returns position information corresponding to pixel "
"coordinates @var{x} and @var{y} in a specified frame or window, @var{frame-"
"or-window}, which defaults to the selected window.  The coordinates @var{x} "
"and @var{y} are relative to the frame or window used.  If @var{whole} is "
"@code{nil}, the coordinates are relative to the window text area, otherwise "
"they are relative to the entire window area including scroll bars, margins "
"and fringes."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1928
msgid "These functions are useful for decoding scroll bar events."
msgstr ""

# type: defun
#: lispref/commands.texi:1929
#, no-wrap
msgid "scroll-bar-event-ratio event"
msgstr ""

# type: defun
#: lispref/commands.texi:1934
msgid ""
"This function returns the fractional vertical position of a scroll bar event "
"within the scroll bar.  The value is a cons cell @code{(@var{portion} . @var"
"{whole})} containing two integers whose ratio is the fractional position."
msgstr ""

# type: defun
#: lispref/commands.texi:1936
#, no-wrap
msgid "scroll-bar-scale ratio total"
msgstr ""

# type: defun
#: lispref/commands.texi:1941
msgid ""
"This function multiplies (in effect) @var{ratio} by @var{total}, rounding "
"the result to an integer.  The argument @var{ratio} is not a number, but "
"rather a pair @code{(@var{num} . @var{denom})}---typically a value returned "
"by @code{scroll-bar-event-ratio}."
msgstr ""

# type: defun
#: lispref/commands.texi:1944
msgid ""
"This function is handy for scaling a position on a scroll bar into a buffer "
"position.  Here's how to do that:"
msgstr ""

# type: example
#: lispref/commands.texi:1950
#, no-wrap
msgid ""
"(+ (point-min)\n"
"   (scroll-bar-scale\n"
"      (posn-x-y (event-start event))\n"
"      (- (point-max) (point-min))))\n"
msgstr ""

# type: defun
#: lispref/commands.texi:1954
msgid ""
"Recall that scroll bar events have two integers forming a ratio, in place of "
"a pair of x and y coordinates."
msgstr ""

# type: subsection
#: lispref/commands.texi:1957
#, no-wrap
msgid "Putting Keyboard Events in Strings"
msgstr ""

# type: cindex
#: lispref/commands.texi:1958
#, no-wrap
msgid "keyboard events in strings"
msgstr ""

# type: cindex
#: lispref/commands.texi:1959
#, no-wrap
msgid "strings with keyboard events"
msgstr ""

# type: Plain text
#: lispref/commands.texi:1968
msgid ""
"In most of the places where strings are used, we conceptualize the string as "
"containing text characters---the same kind of characters found in buffers or "
"files.  Occasionally Lisp programs use strings that conceptually contain "
"keyboard characters; for example, they may be key sequences or keyboard "
"macro definitions.  However, storing keyboard characters in a string is a "
"complex matter, for reasons of historical compatibility, and it is not "
"always possible."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1971
msgid ""
"We recommend that new programs avoid dealing with these complexities by not "
"storing keyboard events in strings.  Here is how to do that:"
msgstr ""

# type: itemize
#: lispref/commands.texi:1979
msgid ""
"Use vectors instead of strings for key sequences, when you plan to use them "
"for anything other than as arguments to @code{lookup-key} and @code{define-"
"key}.  For example, you can use @code{read-key-sequence-vector} instead of "
"@code{read-key-sequence}, and @code{this-command-keys-vector} instead of "
"@code{this-command-keys}."
msgstr ""

# type: itemize
#: lispref/commands.texi:1983
msgid ""
"Use vectors to write key sequence constants containing meta characters, even "
"when passing them directly to @code{define-key}."
msgstr ""

# type: itemize
#: lispref/commands.texi:1988
msgid ""
"When you have to look at the contents of a key sequence that might be a "
"string, use @code{listify-key-sequence} (@pxref{Event Input Misc})  first, "
"to convert it to a list."
msgstr ""

# type: Plain text
#: lispref/commands.texi:1994
msgid ""
"The complexities stem from the modifier bits that keyboard input characters "
"can include.  Aside from the Meta modifier, none of these modifier bits can "
"be included in a string, and the Meta modifier is allowed only in special "
"cases."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2002
msgid ""
"The earliest GNU Emacs versions represented meta characters as codes in the "
"range of 128 to 255.  At that time, the basic character codes ranged from 0 "
"to 127, so all keyboard character codes did fit in a string.  Many Lisp "
"programs used @samp{\\M-} in string constants to stand for meta characters, "
"especially in arguments to @code{define-key} and similar functions, and key "
"sequences and sequences of events were always represented as strings."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2007
msgid ""
"When we added support for larger basic character codes beyond 127, and "
"additional modifier bits, we had to change the representation of meta "
"characters.  Now the flag that represents the Meta modifier in a character is"
msgstr ""

# type: Plain text
#: lispref/commands.texi:2014
msgid "and such numbers cannot be included in a string."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2019
msgid ""
"To support programs with @samp{\\M-} in string constants, there are special "
"rules for including certain meta characters in a string.  Here are the rules "
"for interpreting a string as a sequence of input characters:"
msgstr ""

# type: itemize
#: lispref/commands.texi:2024
msgid ""
"If the keyboard character value is in the range of 0 to 127, it can go in "
"the string unchanged."
msgstr ""

# type: itemize
#: lispref/commands.texi:2027
msgid "The meta variants of those characters, with codes in the range of"
msgstr ""

# type: Plain text
#: lispref/commands.texi:2034 lispref/numbers.texi:47 lispref/objects.texi:176
msgid "to"
msgstr "à"

# type: tex
#: lispref/commands.texi:2036
#, no-wrap
msgid "@math{2^{27} + 127},\n"
msgstr ""

# type: ifnottex
#: lispref/commands.texi:2039
msgid "2**27+127,"
msgstr ""

# type: itemize
#: lispref/commands.texi:2042
msgid ""
"can also go in the string, but you must change their numeric values.  You "
"must set the"
msgstr ""

# type: tex
#: lispref/commands.texi:2044 lispref/objects.texi:467
#: lispref/objects.texi:1076
#, no-wrap
msgid "@math{2^{7}}\n"
msgstr ""

# type: ifnottex
#: lispref/commands.texi:2047 lispref/objects.texi:470
#: lispref/objects.texi:1079
msgid "2**7"
msgstr ""

# type: itemize
#: lispref/commands.texi:2049
msgid "bit instead of the"
msgstr ""

# type: itemize
#: lispref/commands.texi:2057
msgid ""
"bit, resulting in a value between 128 and 255.  Only a unibyte string can "
"include these codes."
msgstr ""

# type: itemize
#: lispref/commands.texi:2060
msgid ""
"Non-@acronym{ASCII} characters above 256 can be included in a multibyte "
"string."
msgstr ""

# type: itemize
#: lispref/commands.texi:2064
msgid ""
"Other keyboard character events cannot fit in a string.  This includes "
"keyboard events in the range of 128 to 255."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2069
msgid ""
"Functions such as @code{read-key-sequence} that construct strings of "
"keyboard input characters follow these rules: they construct vectors instead "
"of strings, when the events won't fit in a string."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2075
msgid ""
"When you use the read syntax @samp{\\M-} in a string, it produces a code in "
"the range of 128 to 255---the same code that you get if you modify the "
"corresponding keyboard event to put it in the string.  Thus, meta events in "
"strings work consistently regardless of how they get into the strings."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2078
msgid ""
"However, most programs would do well to avoid these issues by following the "
"recommendations at the beginning of this section."
msgstr ""

# type: cindex
#: lispref/commands.texi:2081
#, no-wrap
msgid "read input"
msgstr ""

# type: cindex
#: lispref/commands.texi:2082
#, no-wrap
msgid "keyboard input"
msgstr ""

# type: Plain text
#: lispref/commands.texi:2091
msgid ""
"The editor command loop reads key sequences using the function @code{read-"
"key-sequence}, which uses @code{read-event}.  These and other functions for "
"event input are also available for use in Lisp programs.  See also @code"
"{momentary-string-display} in @ref{Temporary Displays}, and @code{sit-for} "
"in @ref{Waiting}.  @xref{Terminal Input}, for functions and variables for "
"controlling terminal input modes and debugging terminal input."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2093
msgid "For higher-level input facilities, see @ref{Minibuffers}."
msgstr ""

# type: subsection
#: lispref/commands.texi:2101 lispref/commands.texi:2103
#: lispref/commands.texi:2104
#, no-wrap
msgid "Key Sequence Input"
msgstr ""

# type: menu
#: lispref/commands.texi:2101
msgid "How to read one key sequence."
msgstr ""

# type: subsection
#: lispref/commands.texi:2101 lispref/commands.texi:2227
#: lispref/commands.texi:2228
#, no-wrap
msgid "Reading One Event"
msgstr ""

# type: menu
#: lispref/commands.texi:2101
msgid "How to read just one event."
msgstr ""

# type: node
#: lispref/commands.texi:2101 lispref/commands.texi:2337
#, no-wrap
msgid "Event Mod"
msgstr ""

# type: menu
#: lispref/commands.texi:2101
msgid "How Emacs modifies events as they are read."
msgstr ""

# type: subsection
#: lispref/commands.texi:2101 lispref/commands.texi:2418
#: lispref/commands.texi:2419
#, no-wrap
msgid "Invoking the Input Method"
msgstr ""

# type: menu
#: lispref/commands.texi:2101
msgid "How reading an event uses the input method."
msgstr ""

# type: subsection
#: lispref/commands.texi:2101 lispref/commands.texi:2459
#: lispref/commands.texi:2460
#, no-wrap
msgid "Quoted Character Input"
msgstr ""

# type: menu
#: lispref/commands.texi:2101
msgid "Asking the user to specify a character."
msgstr ""

# type: node
#: lispref/commands.texi:2101 lispref/commands.texi:2504
#, no-wrap
msgid "Event Input Misc"
msgstr ""

# type: menu
#: lispref/commands.texi:2101
msgid "How to reread or throw away input events."
msgstr ""

# type: cindex
#: lispref/commands.texi:2105
#, no-wrap
msgid "key sequence input"
msgstr ""

# type: Plain text
#: lispref/commands.texi:2110
msgid ""
"The command loop reads input a key sequence at a time, by calling @code{read-"
"key-sequence}.  Lisp programs can also call this function; for example, @code"
"{describe-key} uses it to read the key to describe."
msgstr ""

# type: defun
#: lispref/commands.texi:2111
#, no-wrap
msgid "read-key-sequence prompt &optional continue-echo dont-downcase-last switch-frame-ok command-loop"
msgstr ""

# type: defun
#: lispref/commands.texi:2118
msgid ""
"This function reads a key sequence and returns it as a string or vector.  It "
"keeps reading events until it has accumulated a complete key sequence; that "
"is, enough to specify a non-prefix command using the currently active "
"keymaps.  (Remember that a key sequence that starts with a mouse event is "
"read using the keymaps of the buffer in the window that the mouse was in, "
"not the current buffer.)"
msgstr ""

# type: defun
#: lispref/commands.texi:2124
msgid ""
"If the events are all characters and all can fit in a string, then @code"
"{read-key-sequence} returns a string (@pxref{Strings of Events}).  "
"Otherwise, it returns a vector, since a vector can hold all kinds of "
"events---characters, symbols, and lists.  The elements of the string or "
"vector are the events in the key sequence."
msgstr ""

# type: defun
#: lispref/commands.texi:2127
msgid ""
"Reading a key sequence includes translating the events in various ways.  "
"@xref{Translation Keymaps}."
msgstr ""

# type: defun
#: lispref/commands.texi:2132
msgid ""
"The argument @var{prompt} is either a string to be displayed in the echo "
"area as a prompt, or @code{nil}, meaning not to display a prompt.  The "
"argument @var{continue-echo}, if non-@code{nil}, means to echo this key as a "
"continuation of the previous key."
msgstr ""

# type: defun
#: lispref/commands.texi:2138
msgid ""
"Normally any upper case event is converted to lower case if the original "
"event is undefined and the lower case equivalent is defined.  The argument "
"@var{dont-downcase-last}, if non-@code{nil}, means do not convert the last "
"event to lower case.  This is appropriate for reading a key sequence to be "
"defined."
msgstr ""

# type: defun
#: lispref/commands.texi:2145
msgid ""
"The argument @var{switch-frame-ok}, if non-@code{nil}, means that this "
"function should process a @code{switch-frame} event if the user switches "
"frames before typing anything.  If the user switches frames in the middle of "
"a key sequence, or at the start of the sequence but @var{switch-frame-ok} is "
"@code{nil}, then the event will be put off until after the current key "
"sequence."
msgstr ""

# type: defun
#: lispref/commands.texi:2150
msgid ""
"The argument @var{command-loop}, if non-@code{nil}, means that this key "
"sequence is being read by something that will read commands one after "
"another.  It should be @code{nil} if the caller will read just one key "
"sequence."
msgstr ""

# type: defun
#: lispref/commands.texi:2153
msgid ""
"In the following example, Emacs displays the prompt @samp{?} in the echo "
"area, and then the user types @kbd{C-x C-f}."
msgstr ""

# type: example
#: lispref/commands.texi:2156
#, no-wrap
msgid ""
"(read-key-sequence \"?\")\n"
"\n"
msgstr ""

# type: group
#: lispref/commands.texi:2161
#, no-wrap
msgid ""
"---------- Echo Area ----------\n"
"?@kbd{C-x C-f}\n"
"---------- Echo Area ----------\n"
"\n"
msgstr ""

# type: group
#: lispref/commands.texi:2163
#, no-wrap
msgid "     @result{} \"^X^F\"\n"
msgstr ""

# type: defun
#: lispref/commands.texi:2169
msgid ""
"The function @code{read-key-sequence} suppresses quitting: @kbd{C-g} typed "
"while reading with this function works like any other character, and does "
"not set @code{quit-flag}.  @xref{Quitting}."
msgstr ""

# type: defun
#: lispref/commands.texi:2171
#, no-wrap
msgid "read-key-sequence-vector prompt &optional continue-echo dont-downcase-last switch-frame-ok command-loop"
msgstr ""

# type: defun
#: lispref/commands.texi:2175
msgid ""
"This is like @code{read-key-sequence} except that it always returns the key "
"sequence as a vector, never as a string.  @xref{Strings of Events}."
msgstr ""

# type: cindex
#: lispref/commands.texi:2177
#, no-wrap
msgid "upper case key sequence"
msgstr ""

# type: cindex
#: lispref/commands.texi:2178
#, no-wrap
msgid "downcasing in @code{lookup-key}"
msgstr ""

# type: Plain text
#: lispref/commands.texi:2183
msgid ""
"If an input character is upper-case (or has the shift modifier) and has no "
"key binding, but its lower-case equivalent has one, then @code{read-key-"
"sequence} converts the character to lower case.  Note that @code{lookup-key} "
"does not perform case conversion in this way."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2189
msgid ""
"The function @code{read-key-sequence} also transforms some mouse events.  It "
"converts unbound drag events into click events, and discards unbound button-"
"down events entirely.  It also reshuffles focus events and miscellaneous "
"window events so that they never appear in a key sequence with any other "
"events."
msgstr ""

# type: cindex
#: lispref/commands.texi:2190
#, no-wrap
msgid "@code{header-line} prefix key"
msgstr ""

# type: cindex
#: lispref/commands.texi:2191
#, no-wrap
msgid "@code{mode-line} prefix key"
msgstr ""

# type: cindex
#: lispref/commands.texi:2192
#, no-wrap
msgid "@code{vertical-line} prefix key"
msgstr ""

# type: cindex
#: lispref/commands.texi:2193
#, no-wrap
msgid "@code{horizontal-scroll-bar} prefix key"
msgstr ""

# type: cindex
#: lispref/commands.texi:2194
#, no-wrap
msgid "@code{vertical-scroll-bar} prefix key"
msgstr ""

# type: cindex
#: lispref/commands.texi:2195
#, no-wrap
msgid "@code{menu-bar} prefix key"
msgstr ""

# type: cindex
#: lispref/commands.texi:2196
#, no-wrap
msgid "mouse events, in special parts of frame"
msgstr ""

# type: Plain text
#: lispref/commands.texi:2208
msgid ""
"When mouse events occur in special parts of a window, such as a mode line or "
"a scroll bar, the event type shows nothing special---it is the same symbol "
"that would normally represent that combination of mouse button and modifier "
"keys.  The information about the window part is kept elsewhere in the "
"event---in the coordinates.  But @code{read-key-sequence} translates this "
"information into imaginary ``prefix keys,'' all of which are symbols: @code"
"{header-line}, @code{horizontal-scroll-bar}, @code{menu-bar}, @code{mode-"
"line}, @code{vertical-line}, and @code{vertical-scroll-bar}.  You can define "
"meanings for mouse clicks in special window parts by defining key sequences "
"using these imaginary prefix keys."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2211
msgid ""
"For example, if you call @code{read-key-sequence} and then click the mouse "
"on the window's mode line, you get two events, like this:"
msgstr ""

# type: example
#: lispref/commands.texi:2218
#, no-wrap
msgid ""
"(read-key-sequence \"Click on the mode line: \")\n"
"     @result{} [mode-line\n"
"         (mouse-1\n"
"          (#<window 6 on NEWS> mode-line\n"
"           (40 . 63) 5959987))]\n"
msgstr ""

# type: defvar
#: lispref/commands.texi:2220
#, no-wrap
msgid "num-input-keys"
msgstr ""

# type: defvar
#: lispref/commands.texi:2225
msgid ""
"This variable's value is the number of key sequences processed so far in "
"this Emacs session.  This includes key sequences read from the terminal and "
"key sequences read from keyboard macros being executed."
msgstr ""

# type: cindex
#: lispref/commands.texi:2229
#, no-wrap
msgid "reading a single event"
msgstr ""

# type: cindex
#: lispref/commands.texi:2230
#, no-wrap
msgid "event, reading only one"
msgstr ""

# type: Plain text
#: lispref/commands.texi:2234
msgid ""
"The lowest level functions for command input are those that read a single "
"event."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2236
msgid "None of the three functions below suppresses quitting."
msgstr ""

# type: defun
#: lispref/commands.texi:2237
#, no-wrap
msgid "read-event &optional prompt inherit-input-method seconds"
msgstr ""

# type: defun
#: lispref/commands.texi:2241
msgid ""
"This function reads and returns the next event of command input, waiting if "
"necessary until an event is available.  Events can come directly from the "
"user or from a keyboard macro."
msgstr ""

# type: defun
#: lispref/commands.texi:2248
msgid ""
"If the optional argument @var{prompt} is non-@code{nil}, it should be a "
"string to display in the echo area as a prompt.  Otherwise, @code{read-"
"event} does not display any message to indicate it is waiting for input; "
"instead, it prompts by echoing: it displays descriptions of the events that "
"led to or were read by the current command.  @xref{The Echo Area}."
msgstr ""

# type: defun
#: lispref/commands.texi:2253
msgid ""
"If @var{inherit-input-method} is non-@code{nil}, then the current input "
"method (if any) is employed to make it possible to enter a non-@acronym"
"{ASCII} character.  Otherwise, input method handling is disabled for reading "
"this event."
msgstr ""

# type: defun
#: lispref/commands.texi:2257
msgid ""
"If @code{cursor-in-echo-area} is non-@code{nil}, then @code{read-event} "
"moves the cursor temporarily to the echo area, to the end of any message "
"displayed there.  Otherwise @code{read-event} does not move the cursor."
msgstr ""

# type: defun
#: lispref/commands.texi:2266
msgid ""
"If @var{seconds} is non-@code{nil}, it should be a number specifying the "
"maximum time to wait for input, in seconds.  If no input arrives within that "
"time, @code{read-event} stops waiting and returns @code{nil}.  A floating-"
"point value for @var{seconds} means to wait for a fractional number of "
"seconds.  Some systems support only a whole number of seconds; on these "
"systems, @var{seconds} is rounded down.  If @var{seconds} is @code{nil}, "
"@code{read-event} waits as long as necessary for input to arrive."
msgstr ""

# type: defun
#: lispref/commands.texi:2275
msgid ""
"If @var{seconds} is @code{nil}, Emacs is considered idle while waiting for "
"user input to arrive.  Idle timers---those created with @code{run-with-idle-"
"timer} (@pxref{Idle Timers})---can run during this period.  However, if @var"
"{seconds} is non-@code{nil}, the state of idleness remains unchanged.  If "
"Emacs is non-idle when @code{read-event} is called, it remains non-idle "
"throughout the operation of @code{read-event}; if Emacs is idle (which can "
"happen if the call happens inside an idle timer), it remains idle."
msgstr ""

# type: defun
#: lispref/commands.texi:2281
msgid ""
"If @code{read-event} gets an event that is defined as a help character, then "
"in some cases @code{read-event} processes the event directly without "
"returning.  @xref{Help Functions}.  Certain other events, called @dfn"
"{special events}, are also processed directly within @code{read-event} "
"(@pxref{Special Events})."
msgstr ""

# type: defun
#: lispref/commands.texi:2284
msgid ""
"Here is what happens if you call @code{read-event} and then press the right-"
"arrow function key:"
msgstr ""

# type: group
#: lispref/commands.texi:2289
#, no-wrap
msgid ""
"(read-event)\n"
"     @result{} right\n"
msgstr ""

# type: defun
#: lispref/commands.texi:2293
#, no-wrap
msgid "read-char &optional prompt inherit-input-method seconds"
msgstr ""

# type: defun
#: lispref/commands.texi:2298
msgid ""
"This function reads and returns a character of command input.  If the user "
"generates an event which is not a character (i.e. a mouse click or function "
"key event), @code{read-char} signals an error.  The arguments work as in "
"@code{read-event}."
msgstr ""

# type: defun
#: lispref/commands.texi:2305
msgid ""
"In the first example, the user types the character @kbd{1} (@acronym{ASCII} "
"code 49).  The second example shows a keyboard macro definition that calls "
"@code{read-char} from the minibuffer using @code{eval-expression}.  @code"
"{read-char} reads the keyboard macro's very next character, which is @kbd"
"{1}.  Then @code{eval-expression} displays its return value in the echo area."
msgstr ""

# type: group
#: lispref/commands.texi:2310
#, no-wrap
msgid ""
"(read-char)\n"
"     @result{} 49\n"
msgstr ""

# type: group
#: lispref/commands.texi:2316
#, no-wrap
msgid ""
";; @r{We assume here you use @kbd{M-:} to evaluate this.}\n"
"(symbol-function 'foo)\n"
"     @result{} \"^[:(read-char)^M1\"\n"
msgstr ""

# type: group
#: lispref/commands.texi:2321
#, no-wrap
msgid ""
"(execute-kbd-macro 'foo)\n"
"     @print{} 49\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/commands.texi:2325
#, no-wrap
msgid "read-char-exclusive &optional prompt inherit-input-method seconds"
msgstr ""

# type: defun
#: lispref/commands.texi:2330
msgid ""
"This function reads and returns a character of command input.  If the user "
"generates an event which is not a character, @code{read-char-exclusive} "
"ignores it and reads another event, until it gets a character.  The "
"arguments work as in @code{read-event}."
msgstr ""

# type: defvar
#: lispref/commands.texi:2332
#, no-wrap
msgid "num-nonmacro-input-events"
msgstr ""

# type: defvar
#: lispref/commands.texi:2335
msgid ""
"This variable holds the total number of input events received so far from "
"the terminal---not counting those generated by keyboard macros."
msgstr ""

# type: subsection
#: lispref/commands.texi:2338
#, no-wrap
msgid "Modifying and Translating Input Events"
msgstr ""

# type: Plain text
#: lispref/commands.texi:2344
msgid ""
"Emacs modifies every event it reads according to @code{extra-keyboard-"
"modifiers}, then translates it through @code{keyboard-translate-table} (if "
"applicable), before returning it from @code{read-event}."
msgstr ""

# type: defvar
#: lispref/commands.texi:2346
#, no-wrap
msgid "extra-keyboard-modifiers"
msgstr ""

# type: defvar
#: lispref/commands.texi:2358
msgid ""
"This variable lets Lisp programs ``press'' the modifier keys on the "
"keyboard.  The value is a character.  Only the modifiers of the character "
"matter.  Each time the user types a keyboard key, it is altered as if those "
"modifier keys were held down.  For instance, if you bind @code{extra-"
"keyboard-modifiers} to @code{?\\C-\\M-a}, then all keyboard input characters "
"typed during the scope of the binding will have the control and meta "
"modifiers applied to them.  The character @code{?\\C-@@}, equivalent to the "
"integer 0, does not count as a control character for this purpose, but as a "
"character with no modifiers.  Thus, setting @code{extra-keyboard-modifiers} "
"to zero cancels any modification."
msgstr ""

# type: defvar
#: lispref/commands.texi:2362
msgid ""
"When using a window system, the program can ``press'' any of the modifier "
"keys in this way.  Otherwise, only the @key{CTL} and @key{META} keys can be "
"virtually pressed."
msgstr ""

# type: defvar
#: lispref/commands.texi:2365
msgid ""
"Note that this variable applies only to events that really come from the "
"keyboard, and has no effect on mouse events or any other events."
msgstr ""

# type: defvar
#: lispref/commands.texi:2367
#, no-wrap
msgid "keyboard-translate-table"
msgstr ""

# type: defvar
#: lispref/commands.texi:2372
msgid ""
"This variable is the translate table for keyboard characters.  It lets you "
"reshuffle the keys on the keyboard without changing any command bindings.  "
"Its value is normally a char-table, or else @code{nil}.  (It can also be a "
"string or vector, but this is considered obsolete.)"
msgstr ""

# type: defvar
#: lispref/commands.texi:2377
msgid ""
"If @code{keyboard-translate-table} is a char-table (@pxref{Char-Tables}), "
"then each character read from the keyboard is looked up in this char-table.  "
"If the value found there is non-@code{nil}, then it is used instead of the "
"actual input character."
msgstr ""

# type: defvar
#: lispref/commands.texi:2382
msgid ""
"Note that this translation is the first thing that happens to a character "
"after it is read from the terminal.  Record-keeping features such as @code"
"{recent-keys} and dribble files record the characters after translation."
msgstr ""

# type: defvar
#: lispref/commands.texi:2387
msgid ""
"Note also that this translation is done before the characters are supplied "
"to input methods (@pxref{Input Methods}).  Use @code{translation-table-for-"
"input} (@pxref{Translation of Characters}), if you want to translate "
"characters after input methods operate."
msgstr ""

# type: defun
#: lispref/commands.texi:2389
#, no-wrap
msgid "keyboard-translate from to"
msgstr ""

# type: defun
#: lispref/commands.texi:2393
msgid ""
"This function modifies @code{keyboard-translate-table} to translate "
"character code @var{from} into character code @var{to}.  It creates the "
"keyboard translate table if necessary."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2398
msgid ""
"Here's an example of using the @code{keyboard-translate-table} to make @kbd"
"{C-x}, @kbd{C-c} and @kbd{C-v} perform the cut, copy and paste operations:"
msgstr ""

# type: example
#: lispref/commands.texi:2406
#, no-wrap
msgid ""
"(keyboard-translate ?\\C-x 'control-x)\n"
"(keyboard-translate ?\\C-c 'control-c)\n"
"(keyboard-translate ?\\C-v 'control-v)\n"
"(global-set-key [control-x] 'kill-region)\n"
"(global-set-key [control-c] 'kill-ring-save)\n"
"(global-set-key [control-v] 'yank)\n"
msgstr ""

# type: Plain text
#: lispref/commands.texi:2414
msgid ""
"On a graphical terminal that supports extended @acronym{ASCII} input, you "
"can still get the standard Emacs meanings of one of those characters by "
"typing it with the shift key.  That makes it a different character as far as "
"keyboard translation is concerned, but it has the same usual meaning."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2417
msgid ""
"@xref{Translation Keymaps}, for mechanisms that translate event sequences at "
"the level of @code{read-key-sequence}."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2426
msgid ""
"The event-reading functions invoke the current input method, if any (@pxref"
"{Input Methods}).  If the value of @code{input-method-function} is non-@code"
"{nil}, it should be a function; when @code{read-event} reads a printing "
"character (including @key{SPC}) with no modifier bits, it calls that "
"function, passing the character as an argument."
msgstr ""

# type: defvar
#: lispref/commands.texi:2427
#, no-wrap
msgid "input-method-function"
msgstr ""

# type: defvar
#: lispref/commands.texi:2430
msgid ""
"If this is non-@code{nil}, its value specifies the current input method "
"function."
msgstr ""

# type: defvar
#: lispref/commands.texi:2436
msgid ""
"@strong{Warning:} don't bind this variable with @code{let}.  It is often "
"buffer-local, and if you bind it around reading input (which is exactly when "
"you @emph{would} bind it), switching buffers asynchronously while Emacs is "
"waiting will cause the value to be restored in the wrong buffer."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2446
msgid ""
"The input method function should return a list of events which should be "
"used as input.  (If the list is @code{nil}, that means there is no input, so "
"@code{read-event} waits for another event.)  These events are processed "
"before the events in @code{unread-command-events} (@pxref{Event Input "
"Misc}).  Events returned by the input method function are not passed to the "
"input method function again, even if they are printing characters with no "
"modifier bits."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2450
msgid ""
"If the input method function calls @code{read-event} or @code{read-key-"
"sequence}, it should bind @code{input-method-function} to @code{nil} first, "
"to prevent recursion."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2458
msgid ""
"The input method function is not called when reading the second and "
"subsequent events of a key sequence.  Thus, these characters are not subject "
"to input method processing.  The input method function should test the "
"values of @code{overriding-local-map} and @code{overriding-terminal-local-"
"map}; if either of these variables is non-@code{nil}, the input method "
"should put its argument into a list and return that list with no further "
"processing."
msgstr ""

# type: cindex
#: lispref/commands.texi:2461
#, no-wrap
msgid "quoted character input"
msgstr ""

# type: Plain text
#: lispref/commands.texi:2467
msgid ""
"You can use the function @code{read-quoted-char} to ask the user to specify "
"a character, and allow the user to specify a control or meta character "
"conveniently, either literally or as an octal character code.  The command "
"@code{quoted-insert} uses this function."
msgstr ""

# type: defun
#: lispref/commands.texi:2468
#, no-wrap
msgid "read-quoted-char &optional prompt"
msgstr ""

# type: cindex
#: lispref/commands.texi:2469
#, no-wrap
msgid "octal character input"
msgstr ""

# type: cindex
#: lispref/commands.texi:2470
#, no-wrap
msgid "control characters, reading"
msgstr ""

# type: cindex
#: lispref/commands.texi:2471
#, no-wrap
msgid "nonprinting characters, reading"
msgstr ""

# type: defun
#: lispref/commands.texi:2479
msgid ""
"This function is like @code{read-char}, except that if the first character "
"read is an octal digit (0-7), it reads any number of octal digits (but "
"stopping if a non-octal digit is found), and returns the character "
"represented by that numeric character code.  If the character that "
"terminates the sequence of octal digits is @key{RET}, it is discarded.  Any "
"other terminating character is used as input after this function returns."
msgstr ""

# type: defun
#: lispref/commands.texi:2482
msgid ""
"Quitting is suppressed when the first character is read, so that the user "
"can enter a @kbd{C-g}.  @xref{Quitting}."
msgstr ""

# type: defun
#: lispref/commands.texi:2486
msgid ""
"If @var{prompt} is supplied, it specifies a string for prompting the user.  "
"The prompt string is always displayed in the echo area, followed by a single "
"@samp{-}."
msgstr ""

# type: defun
#: lispref/commands.texi:2489
msgid ""
"In the following example, the user types in the octal number 177 (which is "
"127 in decimal)."
msgstr ""

# type: example
#: lispref/commands.texi:2492
#, no-wrap
msgid ""
"(read-quoted-char \"What character\")\n"
"\n"
msgstr ""

# type: group
#: lispref/commands.texi:2497
#, no-wrap
msgid ""
"---------- Echo Area ----------\n"
"What character @kbd{1 7 7}-\n"
"---------- Echo Area ----------\n"
"\n"
msgstr ""

# type: group
#: lispref/commands.texi:2499
#, no-wrap
msgid "     @result{} 127\n"
msgstr ""

# type: subsection
#: lispref/commands.texi:2505
#, no-wrap
msgid "Miscellaneous Event Input Features"
msgstr ""

# type: Plain text
#: lispref/commands.texi:2511
msgid ""
"This section describes how to ``peek ahead'' at events without using them "
"up, how to check for pending input, and how to discard pending input.  See "
"also the function @code{read-passwd} (@pxref{Reading a Password})."
msgstr ""

# type: defvar
#: lispref/commands.texi:2512
#, no-wrap
msgid "unread-command-events"
msgstr ""

# type: cindex
#: lispref/commands.texi:2513
#, no-wrap
msgid "next input"
msgstr ""

# type: cindex
#: lispref/commands.texi:2514
#, no-wrap
msgid "peeking at input"
msgstr ""

# type: defvar
#: lispref/commands.texi:2518
msgid ""
"This variable holds a list of events waiting to be read as command input.  "
"The events are used in the order they appear in the list, and removed one by "
"one as they are used."
msgstr ""

# type: defvar
#: lispref/commands.texi:2523
msgid ""
"The variable is needed because in some cases a function reads an event and "
"then decides not to use it.  Storing the event in this variable causes it to "
"be processed normally, by the command loop or by the functions to read "
"command input."
msgstr ""

# type: cindex
#: lispref/commands.texi:2524
#, no-wrap
msgid "prefix argument unreading"
msgstr ""

# type: defvar
#: lispref/commands.texi:2531
msgid ""
"For example, the function that implements numeric prefix arguments reads any "
"number of digits.  When it finds a non-digit event, it must unread the event "
"so that it can be read normally by the command loop.  Likewise, incremental "
"search uses this feature to unread events with no special meaning in a "
"search, because these events should exit the search and then execute "
"normally."
msgstr ""

# type: defvar
#: lispref/commands.texi:2535
msgid ""
"The reliable and easy way to extract events from a key sequence so as to put "
"them in @code{unread-command-events} is to use @code{listify-key-sequence} "
"(@pxref{Strings of Events})."
msgstr ""

# type: defvar
#: lispref/commands.texi:2538
msgid ""
"Normally you add events to the front of this list, so that the events most "
"recently unread will be reread first."
msgstr ""

# type: defvar
#: lispref/commands.texi:2544
msgid ""
"Events read from this list are not normally added to the current command's "
"key sequence (as returned by e.g. @code{this-command-keys}), as the events "
"will already have been added once as they were read for the first time.  An "
"element of the form @code{(@code{t} . @var{event})} forces @var{event} to be "
"added to the current command's key sequence."
msgstr ""

# type: defun
#: lispref/commands.texi:2546
#, no-wrap
msgid "listify-key-sequence key"
msgstr ""

# type: defun
#: lispref/commands.texi:2549
msgid ""
"This function converts the string or vector @var{key} to a list of "
"individual events, which you can put in @code{unread-command-events}."
msgstr ""

# type: defvar
#: lispref/commands.texi:2551
#, no-wrap
msgid "unread-command-char"
msgstr ""

# type: defvar
#: lispref/commands.texi:2554
msgid ""
"This variable holds a character to be read as command input.  A value of -1 "
"means ``empty.''"
msgstr ""

# type: defvar
#: lispref/commands.texi:2558
msgid ""
"This variable is mostly obsolete now that you can use @code{unread-command-"
"events} instead; it exists only to support programs written for Emacs "
"versions 18 and earlier."
msgstr ""

# type: defun
#: lispref/commands.texi:2560
#, no-wrap
msgid "input-pending-p"
msgstr ""

# type: cindex
#: lispref/commands.texi:2561
#, no-wrap
msgid "waiting for command key input"
msgstr ""

# type: defun
#: lispref/commands.texi:2566
msgid ""
"This function determines whether any command input is currently available to "
"be read.  It returns immediately, with value @code{t} if there is available "
"input, @code{nil} otherwise.  On rare occasions it may return @code{t} when "
"no input is available."
msgstr ""

# type: defvar
#: lispref/commands.texi:2568
#, no-wrap
msgid "last-input-event"
msgstr ""

# type: defvarx
#: lispref/commands.texi:2569
#, no-wrap
msgid "last-input-char"
msgstr ""

# type: defvar
#: lispref/commands.texi:2572
msgid ""
"This variable records the last terminal input event read, whether as part of "
"a command or explicitly by a Lisp program."
msgstr ""

# type: defvar
#: lispref/commands.texi:2577
msgid ""
"In the example below, the Lisp program reads the character @kbd{1}, @acronym"
"{ASCII} code 49.  It becomes the value of @code{last-input-event}, while @kbd"
"{C-e} (we assume @kbd{C-x C-e} command is used to evaluate this expression) "
"remains the value of @code{last-command-event}."
msgstr ""

# type: group
#: lispref/commands.texi:2586
#, no-wrap
msgid ""
"(progn (print (read-char))\n"
"       (print last-command-event)\n"
"       last-input-event)\n"
"     @print{} 49\n"
"     @print{} 5\n"
"     @result{} 49\n"
msgstr ""

# type: defvar
#: lispref/commands.texi:2591
msgid ""
"The alias @code{last-input-char} exists for compatibility with Emacs version "
"18."
msgstr ""

# type: defmac
#: lispref/commands.texi:2593
#, no-wrap
msgid "while-no-input body@dots{}"
msgstr ""

# type: defmac
#: lispref/commands.texi:2600
msgid ""
"This construct runs the @var{body} forms and returns the value of the last "
"one---but only if no input arrives.  If any input arrives during the "
"execution of the @var{body} forms, it aborts them (working much like a "
"quit).  The @code{while-no-input} form returns @code{nil} if aborted by a "
"real quit, and returns @code{t} if aborted by arrival of other input."
msgstr ""

# type: defmac
#: lispref/commands.texi:2604
msgid ""
"If a part of @var{body} binds @code{inhibit-quit} to non-@code{nil}, arrival "
"of input during those parts won't cause an abort until the end of that part."
msgstr ""

# type: defmac
#: lispref/commands.texi:2608
msgid ""
"If you want to be able to distinguish all possible values computed by @var"
"{body} from both kinds of abort conditions, write the code like this:"
msgstr ""

# type: example
#: lispref/commands.texi:2613
#, no-wrap
msgid ""
"(while-no-input\n"
"  (list\n"
"    (progn . @var{body})))\n"
msgstr ""

# type: defun
#: lispref/commands.texi:2616
#, no-wrap
msgid "discard-input"
msgstr ""

# type: cindex
#: lispref/commands.texi:2617
#, no-wrap
msgid "flushing input"
msgstr ""

# type: cindex
#: lispref/commands.texi:2618
#, no-wrap
msgid "discarding input"
msgstr ""

# type: cindex
#: lispref/commands.texi:2619
#, no-wrap
msgid "keyboard macro, terminating"
msgstr ""

# type: defun
#: lispref/commands.texi:2623
msgid ""
"This function discards the contents of the terminal input buffer and cancels "
"any keyboard macro that might be in the process of definition.  It returns "
"@code{nil}."
msgstr ""

# type: defun
#: lispref/commands.texi:2628
msgid ""
"In the following example, the user may type a number of characters right "
"after starting the evaluation of the form.  After the @code{sleep-for} "
"finishes sleeping, @code{discard-input} discards any characters typed during "
"the sleep."
msgstr ""

# type: example
#: lispref/commands.texi:2633
#, no-wrap
msgid ""
"(progn (sleep-for 2)\n"
"       (discard-input))\n"
"     @result{} nil\n"
msgstr ""

# type: cindex
#: lispref/commands.texi:2639
#, no-wrap
msgid "special events"
msgstr ""

# type: Plain text
#: lispref/commands.texi:2644
msgid ""
"Special events are handled at a very low level---as soon as they are read.  "
"The @code{read-event} function processes these events itself, and never "
"returns them.  Instead, it keeps waiting for the first event that is not "
"special and returns that one."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2652
msgid ""
"Events that are handled in this way do not echo, they are never grouped into "
"key sequences, and they never appear in the value of @code{last-command-"
"event} or @code{(this-command-keys)}.  They do not discard a numeric "
"argument, they cannot be unread with @code{unread-command-events}, they may "
"not appear in a keyboard macro, and they are not recorded in a keyboard "
"macro while you are defining one."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2656
msgid ""
"These events do, however, appear in @code{last-input-event} immediately "
"after they are read, and this is the way for the event's definition to find "
"the actual event."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2662
msgid ""
"The events types @code{iconify-frame}, @code{make-frame-visible}, @code"
"{delete-frame}, @code{drag-n-drop}, and user signals like @code{sigusr1} are "
"normally handled in this way.  The keymap which defines how to handle "
"special events---and which events are special---is in the variable @code"
"{special-event-map} (@pxref{Active Keymaps})."
msgstr ""

# type: section
#: lispref/commands.texi:2664
#, no-wrap
msgid "Waiting for Elapsed Time or Input"
msgstr ""

# type: cindex
#: lispref/commands.texi:2665
#, no-wrap
msgid "waiting"
msgstr ""

# type: Plain text
#: lispref/commands.texi:2673
msgid ""
"The wait functions are designed to wait for a certain amount of time to pass "
"or until there is input.  For example, you may wish to pause in the middle "
"of a computation to allow the user time to view the display.  @code{sit-for} "
"pauses and updates the screen, and returns immediately if input comes in, "
"while @code{sleep-for} pauses without updating the screen."
msgstr ""

# type: defun
#: lispref/commands.texi:2674
#, no-wrap
msgid "sit-for seconds &optional nodisp"
msgstr ""

# type: defun
#: lispref/commands.texi:2681
msgid ""
"This function performs redisplay (provided there is no pending input from "
"the user), then waits @var{seconds} seconds, or until input is available.  "
"The usual purpose of @code{sit-for} is to give the user time to read text "
"that you display.  The value is @code{t} if @code{sit-for} waited the full "
"time with no input arriving (@pxref{Event Input Misc}).  Otherwise, the "
"value is @code{nil}."
msgstr ""

# type: defun
#: lispref/commands.texi:2686
msgid ""
"The argument @var{seconds} need not be an integer.  If it is a floating "
"point number, @code{sit-for} waits for a fractional number of seconds.  Some "
"systems support only a whole number of seconds; on these systems, @var"
"{seconds} is rounded down."
msgstr ""

# type: defun
#: lispref/commands.texi:2690
msgid ""
"The expression @code{(sit-for 0)} is equivalent to @code{(redisplay)}, i.e. "
"it requests a redisplay, without any delay, if there is no pending input.  "
"@xref{Forcing Redisplay}."
msgstr ""

# type: defun
#: lispref/commands.texi:2694
msgid ""
"If @var{nodisp} is non-@code{nil}, then @code{sit-for} does not redisplay, "
"but it still returns as soon as input is available (or when the timeout "
"elapses)."
msgstr ""

# type: defun
#: lispref/commands.texi:2698
msgid ""
"In batch mode (@pxref{Batch Mode}), @code{sit-for} cannot be interrupted, "
"even by input from the standard input descriptor.  It is thus equivalent to "
"@code{sleep-for}, which is described below."
msgstr ""

# type: defun
#: lispref/commands.texi:2702
msgid ""
"It is also possible to call @code{sit-for} with three arguments, as @code"
"{(sit-for @var{seconds} @var{millisec} @var{nodisp})}, but that is "
"considered obsolete."
msgstr ""

# type: defun
#: lispref/commands.texi:2704
#, no-wrap
msgid "sleep-for seconds &optional millisec"
msgstr ""

# type: defun
#: lispref/commands.texi:2708
msgid ""
"This function simply pauses for @var{seconds} seconds without updating the "
"display.  It pays no attention to available input.  It returns @code{nil}."
msgstr ""

# type: defun
#: lispref/commands.texi:2713
msgid ""
"The argument @var{seconds} need not be an integer.  If it is a floating "
"point number, @code{sleep-for} waits for a fractional number of seconds.  "
"Some systems support only a whole number of seconds; on these systems, @var"
"{seconds} is rounded down."
msgstr ""

# type: defun
#: lispref/commands.texi:2718
msgid ""
"The optional argument @var{millisec} specifies an additional waiting period "
"measured in milliseconds.  This adds to the period specified by @var"
"{seconds}.  If the system doesn't support waiting fractions of a second, you "
"get an error if you specify nonzero @var{millisec}."
msgstr ""

# type: defun
#: lispref/commands.texi:2720
msgid "Use @code{sleep-for} when you wish to guarantee a delay."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2723
msgid "@xref{Time of Day}, for functions to get the current time."
msgstr ""

# type: kbd{#1}
#: lispref/commands.texi:2726 lispref/minibuf.texi:224
#, no-wrap
msgid "C-g"
msgstr ""

# type: cindex
#: lispref/commands.texi:2727
#, no-wrap
msgid "quitting"
msgstr ""

# type: cindex
#: lispref/commands.texi:2728
#, no-wrap
msgid "interrupt Lisp functions"
msgstr ""

# type: Plain text
#: lispref/commands.texi:2733
msgid ""
"Typing @kbd{C-g} while a Lisp function is running causes Emacs to @dfn{quit} "
"whatever it is doing.  This means that control returns to the innermost "
"active command loop."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2741
msgid ""
"Typing @kbd{C-g} while the command loop is waiting for keyboard input does "
"not cause a quit; it acts as an ordinary input character.  In the simplest "
"case, you cannot tell the difference, because @kbd{C-g} normally runs the "
"command @code{keyboard-quit}, whose effect is to quit.  However, when @kbd{C-"
"g} follows a prefix key, they combine to form an undefined key.  The effect "
"is to cancel the prefix key as well as any prefix argument."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2751
msgid ""
"In the minibuffer, @kbd{C-g} has a different definition: it aborts out of "
"the minibuffer.  This means, in effect, that it exits the minibuffer and "
"then quits.  (Simply quitting would return to the command loop @emph{within} "
"the minibuffer.)  The reason why @kbd{C-g} does not quit directly when the "
"command reader is reading input is so that its meaning can be redefined in "
"the minibuffer in this way.  @kbd{C-g} following a prefix key is not "
"redefined in the minibuffer, and it has its normal effect of canceling the "
"prefix key and prefix argument.  This too would not be possible if @kbd{C-g} "
"always quit directly."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2756
msgid ""
"When @kbd{C-g} does directly quit, it does so by setting the variable @code"
"{quit-flag} to @code{t}.  Emacs checks this variable at appropriate times "
"and quits if it is not @code{nil}.  Setting @code{quit-flag} non-@code{nil} "
"in any way thus causes a quit."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2762
msgid ""
"At the level of C code, quitting cannot happen just anywhere; only at the "
"special places that check @code{quit-flag}.  The reason for this is that "
"quitting at other places might leave an inconsistency in Emacs's internal "
"state.  Because quitting is delayed until a safe place, quitting cannot make "
"Emacs crash."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2770
msgid ""
"Certain functions such as @code{read-key-sequence} or @code{read-quoted-"
"char} prevent quitting entirely even though they wait for input.  Instead of "
"quitting, @kbd{C-g} serves as the requested input.  In the case of @code"
"{read-key-sequence}, this serves to bring about the special behavior of @kbd"
"{C-g} in the command loop.  In the case of @code{read-quoted-char}, this is "
"so that @kbd{C-q} can be used to quote a @kbd{C-g}."
msgstr ""

# type: cindex
#: lispref/commands.texi:2771
#, no-wrap
msgid "preventing quitting"
msgstr ""

# type: Plain text
#: lispref/commands.texi:2781
msgid ""
"You can prevent quitting for a portion of a Lisp function by binding the "
"variable @code{inhibit-quit} to a non-@code{nil} value.  Then, although @kbd"
"{C-g} still sets @code{quit-flag} to @code{t} as usual, the usual result of "
"this---a quit---is prevented.  Eventually, @code{inhibit-quit} will become "
"@code{nil} again, such as when its binding is unwound at the end of a @code"
"{let} form.  At that time, if @code{quit-flag} is still non-@code{nil}, the "
"requested quit happens immediately.  This behavior is ideal when you wish to "
"make sure that quitting does not happen within a ``critical section'' of the "
"program."
msgstr ""

# type: cindex
#: lispref/commands.texi:2782
#, no-wrap
msgid "@code{read-quoted-char} quitting"
msgstr ""

# type: Plain text
#: lispref/commands.texi:2790
msgid ""
"In some functions (such as @code{read-quoted-char}), @kbd{C-g} is handled in "
"a special way that does not involve quitting.  This is done by reading the "
"input with @code{inhibit-quit} bound to @code{t}, and setting @code{quit-"
"flag} to @code{nil} before @code{inhibit-quit} becomes @code{nil} again.  "
"This excerpt from the definition of @code{read-quoted-char} shows how this "
"is done; it also shows that normal quitting is permitted after the first "
"character of input."
msgstr ""

# type: example
#: lispref/commands.texi:2803
#, no-wrap
msgid ""
"(defun read-quoted-char (&optional prompt)\n"
"  \"@dots{}@var{documentation}@dots{}\"\n"
"  (let ((message-log-max nil) done (first t) (code 0) char)\n"
"    (while (not done)\n"
"      (let ((inhibit-quit first)\n"
"            @dots{})\n"
"\t(and prompt (message \"%s-\" prompt))\n"
"\t(setq char (read-event))\n"
"\t(if inhibit-quit (setq quit-flag nil)))\n"
"      @r{@dots{}set the variable @code{code}@dots{}})\n"
"    code))\n"
msgstr ""

# type: defvar
#: lispref/commands.texi:2805
#, no-wrap
msgid "quit-flag"
msgstr ""

# type: defvar
#: lispref/commands.texi:2809
msgid ""
"If this variable is non-@code{nil}, then Emacs quits immediately, unless "
"@code{inhibit-quit} is non-@code{nil}.  Typing @kbd{C-g} ordinarily sets "
"@code{quit-flag} non-@code{nil}, regardless of @code{inhibit-quit}."
msgstr ""

# type: defvar
#: lispref/commands.texi:2811
#, no-wrap
msgid "inhibit-quit"
msgstr ""

# type: defvar
#: lispref/commands.texi:2815
msgid ""
"This variable determines whether Emacs should quit when @code{quit-flag} is "
"set to a value other than @code{nil}.  If @code{inhibit-quit} is non-@code"
"{nil}, then @code{quit-flag} has no special effect."
msgstr ""

# type: defmac
#: lispref/commands.texi:2817
#, no-wrap
msgid "with-local-quit body@dots{}"
msgstr ""

# type: defmac
#: lispref/commands.texi:2823
msgid ""
"This macro executes @var{body} forms in sequence, but allows quitting, at "
"least locally, within @var{body} even if @code{inhibit-quit} was non-@code"
"{nil} outside this construct.  It returns the value of the last form in @var"
"{body}, unless exited by quitting, in which case it returns @code{nil}."
msgstr ""

# type: defmac
#: lispref/commands.texi:2834
msgid ""
"If @code{inhibit-quit} is @code{nil} on entry to @code{with-local-quit}, it "
"only executes the @var{body}, and setting @code{quit-flag} causes a normal "
"quit.  However, if @code{inhibit-quit} is non-@code{nil} so that ordinary "
"quitting is delayed, a non-@code{nil} @code{quit-flag} triggers a special "
"kind of local quit.  This ends the execution of @var{body} and exits the "
"@code{with-local-quit} body with @code{quit-flag} still non-@code{nil}, so "
"that another (ordinary) quit will happen as soon as that is allowed.  If "
"@code{quit-flag} is already non-@code{nil} at the beginning of @var{body}, "
"the local quit happens immediately and the body doesn't execute at all."
msgstr ""

# type: defmac
#: lispref/commands.texi:2839
msgid ""
"This macro is mainly useful in functions that can be called from timers, "
"process filters, process sentinels, @code{pre-command-hook}, @code{post-"
"command-hook}, and other places where @code{inhibit-quit} is normally bound "
"to @code{t}."
msgstr ""

# type: deffn
#: lispref/commands.texi:2841
#, no-wrap
msgid "Command keyboard-quit"
msgstr ""

# type: deffn
#: lispref/commands.texi:2845
msgid ""
"This function signals the @code{quit} condition with @code{(signal 'quit "
"nil)}.  This is the same thing that quitting does.  (See @code{signal} in "
"@ref{Errors}.)"
msgstr ""

# type: Plain text
#: lispref/commands.texi:2849
msgid ""
"You can specify a character other than @kbd{C-g} to use for quitting.  See "
"the function @code{set-input-mode} in @ref{Terminal Input}."
msgstr ""

# type: cindex
#: lispref/commands.texi:2852
#, no-wrap
msgid "prefix argument"
msgstr ""

# type: cindex
#: lispref/commands.texi:2853
#, no-wrap
msgid "raw prefix argument"
msgstr ""

# type: cindex
#: lispref/commands.texi:2854
#, no-wrap
msgid "numeric prefix argument"
msgstr ""

# type: Plain text
#: lispref/commands.texi:2861
msgid ""
"Most Emacs commands can use a @dfn{prefix argument}, a number specified "
"before the command itself.  (Don't confuse prefix arguments with prefix "
"keys.)  The prefix argument is at all times represented by a value, which "
"may be @code{nil}, meaning there is currently no prefix argument.  Each "
"command may use the prefix argument or ignore it."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2866
msgid ""
"There are two representations of the prefix argument: @dfn{raw} and @dfn"
"{numeric}.  The editor command loop uses the raw representation internally, "
"and so do the Lisp variables that store the information, but commands can "
"request either representation."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2868
msgid "Here are the possible values of a raw prefix argument:"
msgstr ""

# type: itemize
#: lispref/commands.texi:2874
msgid ""
"@code{nil}, meaning there is no prefix argument.  Its numeric value is 1, "
"but numerous commands make a distinction between @code{nil} and the integer "
"1."
msgstr ""

# type: itemize
#: lispref/commands.texi:2877
msgid "An integer, which stands for itself."
msgstr ""

# type: itemize
#: lispref/commands.texi:2883
msgid ""
"A list of one element, which is an integer.  This form of prefix argument "
"results from one or a succession of @kbd{C-u}'s with no digits.  The numeric "
"value is the integer in the list, but some commands make a distinction "
"between such a list and an integer alone."
msgstr ""

# type: itemize
#: lispref/commands.texi:2889
msgid ""
"The symbol @code{-}.  This indicates that @kbd{M--} or @kbd{C-u -} was "
"typed, without following digits.  The equivalent numeric value is @minus{}1, "
"but some commands make a distinction between the integer @minus{}1 and the "
"symbol @code{-}."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2893
msgid ""
"We illustrate these possibilities by calling the following function with "
"various prefixes:"
msgstr ""

# type: group
#: lispref/commands.texi:2900
#, no-wrap
msgid ""
"(defun display-prefix (arg)\n"
"  \"Display the value of the raw prefix arg.\"\n"
"  (interactive \"P\")\n"
"  (message \"%s\" arg))\n"
msgstr ""

# type: Plain text
#: lispref/commands.texi:2906
msgid ""
"Here are the results of calling @code{display-prefix} with various raw "
"prefix arguments:"
msgstr ""

# type: example
#: lispref/commands.texi:2909
#, no-wrap
msgid ""
"        M-x display-prefix  @print{} nil\n"
"\n"
msgstr ""

# type: example
#: lispref/commands.texi:2911
#, no-wrap
msgid ""
"C-u     M-x display-prefix  @print{} (4)\n"
"\n"
msgstr ""

# type: example
#: lispref/commands.texi:2913
#, no-wrap
msgid ""
"C-u C-u M-x display-prefix  @print{} (16)\n"
"\n"
msgstr ""

# type: example
#: lispref/commands.texi:2915
#, no-wrap
msgid ""
"C-u 3   M-x display-prefix  @print{} 3\n"
"\n"
msgstr ""

# type: example
#: lispref/commands.texi:2917
#, no-wrap
msgid ""
"M-3     M-x display-prefix  @print{} 3      ; @r{(Same as @code{C-u 3}.)}\n"
"\n"
msgstr ""

# type: example
#: lispref/commands.texi:2919
#, no-wrap
msgid ""
"C-u -   M-x display-prefix  @print{} -\n"
"\n"
msgstr ""

# type: example
#: lispref/commands.texi:2921
#, no-wrap
msgid ""
"M--     M-x display-prefix  @print{} -      ; @r{(Same as @code{C-u -}.)}\n"
"\n"
msgstr ""

# type: example
#: lispref/commands.texi:2923
#, no-wrap
msgid ""
"C-u - 7 M-x display-prefix  @print{} -7\n"
"\n"
msgstr ""

# type: example
#: lispref/commands.texi:2925
#, no-wrap
msgid "M-- 7   M-x display-prefix  @print{} -7     ; @r{(Same as @code{C-u -7}.)}\n"
msgstr ""

# type: Plain text
#: lispref/commands.texi:2934
msgid ""
"Emacs uses two variables to store the prefix argument: @code{prefix-arg} and "
"@code{current-prefix-arg}.  Commands such as @code{universal-argument} that "
"set up prefix arguments for other commands store them in @code{prefix-arg}.  "
"In contrast, @code{current-prefix-arg} conveys the prefix argument to the "
"current command, so setting it has no effect on the prefix arguments for "
"future commands."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2940
msgid ""
"Normally, commands specify which representation to use for the prefix "
"argument, either numeric or raw, in the @code{interactive} specification.  "
"(@xref{Using Interactive}.)  Alternatively, functions may look at the value "
"of the prefix argument directly in the variable @code{current-prefix-arg}, "
"but this is less clean."
msgstr ""

# type: defun
#: lispref/commands.texi:2941
#, no-wrap
msgid "prefix-numeric-value arg"
msgstr ""

# type: defun
#: lispref/commands.texi:2948
msgid ""
"This function returns the numeric meaning of a valid raw prefix argument "
"value, @var{arg}.  The argument may be a symbol, a number, or a list.  If it "
"is @code{nil}, the value 1 is returned; if it is @code{-}, the value @minus{}"
"1 is returned; if it is a number, that number is returned; if it is a list, "
"the @sc{car} of that list (which should be a number) is returned."
msgstr ""

# type: defvar
#: lispref/commands.texi:2950
#, no-wrap
msgid "current-prefix-arg"
msgstr ""

# type: defvar
#: lispref/commands.texi:2954
msgid ""
"This variable holds the raw prefix argument for the @emph{current} command.  "
"Commands may examine it directly, but the usual method for accessing it is "
"with @code{(interactive \"P\")}."
msgstr ""

# type: defvar
#: lispref/commands.texi:2956
#, no-wrap
msgid "prefix-arg"
msgstr ""

# type: defvar
#: lispref/commands.texi:2961
msgid ""
"The value of this variable is the raw prefix argument for the @emph{next} "
"editing command.  Commands such as @code{universal-argument} that specify "
"prefix arguments for the following command work by setting this variable."
msgstr ""

# type: defvar
#: lispref/commands.texi:2963
#, no-wrap
msgid "last-prefix-arg"
msgstr ""

# type: defvar
#: lispref/commands.texi:2965
msgid "The raw prefix argument value used by the previous command."
msgstr ""

# type: Plain text
#: lispref/commands.texi:2969
msgid ""
"The following commands exist to set up prefix arguments for the following "
"command.  Do not call them for any other reason."
msgstr ""

# type: deffn
#: lispref/commands.texi:2970
#, no-wrap
msgid "Command universal-argument"
msgstr ""

# type: deffn
#: lispref/commands.texi:2974
msgid ""
"This command reads input and specifies a prefix argument for the following "
"command.  Don't call this command yourself unless you know what you are "
"doing."
msgstr ""

# type: deffn
#: lispref/commands.texi:2976
#, no-wrap
msgid "Command digit-argument arg"
msgstr ""

# type: deffn
#: lispref/commands.texi:2981
msgid ""
"This command adds to the prefix argument for the following command.  The "
"argument @var{arg} is the raw prefix argument as it was before this command; "
"it is used to compute the updated prefix argument.  Don't call this command "
"yourself unless you know what you are doing."
msgstr ""

# type: deffn
#: lispref/commands.texi:2983
#, no-wrap
msgid "Command negative-argument arg"
msgstr ""

# type: deffn
#: lispref/commands.texi:2988
msgid ""
"This command adds to the numeric argument for the next command.  The "
"argument @var{arg} is the raw prefix argument as it was before this command; "
"its value is negated to form the new prefix argument.  Don't call this "
"command yourself unless you know what you are doing."
msgstr ""

# type: cindex
#: lispref/commands.texi:2992
#, no-wrap
msgid "recursive command loop"
msgstr ""

# type: cindex
#: lispref/commands.texi:2993
#, no-wrap
msgid "recursive editing level"
msgstr ""

# type: cindex
#: lispref/commands.texi:2994
#, no-wrap
msgid "command loop, recursive"
msgstr ""

# type: Plain text
#: lispref/commands.texi:3003
msgid ""
"The Emacs command loop is entered automatically when Emacs starts up.  This "
"top-level invocation of the command loop never exits; it keeps running as "
"long as Emacs does.  Lisp programs can also invoke the command loop.  Since "
"this makes more than one activation of the command loop, we call it @dfn"
"{recursive editing}.  A recursive editing level has the effect of suspending "
"whatever command invoked it and permitting the user to do arbitrary editing "
"before resuming that command."
msgstr ""

# type: Plain text
#: lispref/commands.texi:3010
msgid ""
"The commands available during recursive editing are the same ones available "
"in the top-level editing loop and defined in the keymaps.  Only a few "
"special commands exit the recursive editing level; the others return to the "
"recursive editing level when they finish.  (The special commands for exiting "
"are always available, but they do nothing when recursive editing is not in "
"progress.)"
msgstr ""

# type: Plain text
#: lispref/commands.texi:3014
msgid ""
"All command loops, including recursive ones, set up all-purpose error "
"handlers so that an error in a command run from the command loop will not "
"exit the loop."
msgstr ""

# type: cindex
#: lispref/commands.texi:3015
#, no-wrap
msgid "minibuffer input"
msgstr ""

# type: Plain text
#: lispref/commands.texi:3022
msgid ""
"Minibuffer input is a special kind of recursive editing.  It has a few "
"special wrinkles, such as enabling display of the minibuffer and the "
"minibuffer window, but fewer than you might suppose.  Certain keys behave "
"differently in the minibuffer, but that is only because of the minibuffer's "
"local map; if you switch windows, you get the usual Emacs commands."
msgstr ""

# type: cindex
#: lispref/commands.texi:3023
#, no-wrap
msgid "@code{throw} example"
msgstr ""

# type: item
#: lispref/commands.texi:3024 lispref/debugging.texi:487
#: lispref/processes.texi:668 lispref/searching.texi:1657
#, no-wrap
msgid "exit"
msgstr ""

# type: cindex
#: lispref/commands.texi:3025
#, no-wrap
msgid "exit recursive editing"
msgstr ""

# type: cindex
#: lispref/commands.texi:3026
#, no-wrap
msgid "aborting"
msgstr ""

# type: Plain text
#: lispref/commands.texi:3037
msgid ""
"To invoke a recursive editing level, call the function @code{recursive-"
"edit}.  This function contains the command loop; it also contains a call to "
"@code{catch} with tag @code{exit}, which makes it possible to exit the "
"recursive editing level by throwing to @code{exit} (@pxref{Catch and "
"Throw}).  If you throw a value other than @code{t}, then @code{recursive-"
"edit} returns normally to the function that called it.  The command @kbd{C-M-"
"c} (@code{exit-recursive-edit}) does this.  Throwing a @code{t} value causes "
"@code{recursive-edit} to quit, so that control returns to the command loop "
"one level up.  This is called @dfn{aborting}, and is done by @kbd{C-]} (@code"
"{abort-recursive-edit})."
msgstr ""

# type: Plain text
#: lispref/commands.texi:3047
msgid ""
"Most applications should not use recursive editing, except as part of using "
"the minibuffer.  Usually it is more convenient for the user if you change "
"the major mode of the current buffer temporarily to a special major mode, "
"which should have a command to go back to the previous mode.  (The @kbd{e} "
"command in Rmail uses this technique.)  Or, if you wish to give the user "
"different text to edit ``recursively,'' create and select a new buffer in a "
"special mode.  In this mode, define a command to complete the processing and "
"go back to the previous buffer.  (The @kbd{m} command in Rmail does this.)"
msgstr ""

# type: Plain text
#: lispref/commands.texi:3052
msgid ""
"Recursive edits are useful in debugging.  You can insert a call to @code"
"{debug} into a function definition as a sort of breakpoint, so that you can "
"look around when the function gets there.  @code{debug} invokes a recursive "
"edit but also provides the other features of the debugger."
msgstr ""

# type: Plain text
#: lispref/commands.texi:3055
msgid ""
"Recursive editing levels are also used when you type @kbd{C-r} in @code"
"{query-replace} or use @kbd{C-x q} (@code{kbd-macro-query})."
msgstr ""

# type: defun
#: lispref/commands.texi:3056
#, no-wrap
msgid "recursive-edit"
msgstr ""

# type: cindex
#: lispref/commands.texi:3057
#, no-wrap
msgid "suspend evaluation"
msgstr ""

# type: defun
#: lispref/commands.texi:3062
msgid ""
"This function invokes the editor command loop.  It is called automatically "
"by the initialization of Emacs, to let the user begin editing.  When called "
"from a Lisp program, it enters a recursive editing level."
msgstr ""

# type: defun
#: lispref/commands.texi:3067
msgid ""
"If the current buffer is not the same as the selected window's buffer, @code"
"{recursive-edit} saves and restores the current buffer.  Otherwise, if you "
"switch buffers, the buffer you switched to is current after @code{recursive-"
"edit} returns."
msgstr ""

# type: defun
#: lispref/commands.texi:3072
msgid ""
"In the following example, the function @code{simple-rec} first advances "
"point one word, then enters a recursive edit, printing out a message in the "
"echo area.  The user can then do any editing desired, and then type @kbd{C-M-"
"c} to exit and continue executing @code{simple-rec}."
msgstr ""

# type: example
#: lispref/commands.texi:3082
#, no-wrap
msgid ""
"(defun simple-rec ()\n"
"  (forward-word 1)\n"
"  (message \"Recursive edit in progress\")\n"
"  (recursive-edit)\n"
"  (forward-word 1))\n"
"     @result{} simple-rec\n"
"(simple-rec)\n"
"     @result{} nil\n"
msgstr ""

# type: deffn
#: lispref/commands.texi:3085
#, no-wrap
msgid "Command exit-recursive-edit"
msgstr ""

# type: deffn
#: lispref/commands.texi:3089
msgid ""
"This function exits from the innermost recursive edit (including minibuffer "
"input).  Its definition is effectively @code{(throw 'exit nil)}."
msgstr ""

# type: deffn
#: lispref/commands.texi:3091
#, no-wrap
msgid "Command abort-recursive-edit"
msgstr ""

# type: deffn
#: lispref/commands.texi:3096
msgid ""
"This function aborts the command that requested the innermost recursive edit "
"(including minibuffer input), by signaling @code{quit} after exiting the "
"recursive edit.  Its definition is effectively @code{(throw 'exit t)}.  @xref"
"{Quitting}."
msgstr ""

# type: deffn
#: lispref/commands.texi:3098
#, no-wrap
msgid "Command top-level"
msgstr ""

# type: deffn
#: lispref/commands.texi:3102
msgid ""
"This function exits all recursive editing levels; it does not return a "
"value, as it jumps completely out of any computation directly back to the "
"main command loop."
msgstr ""

# type: defun
#: lispref/commands.texi:3104
#, no-wrap
msgid "recursion-depth"
msgstr ""

# type: defun
#: lispref/commands.texi:3107
msgid ""
"This function returns the current depth of recursive edits.  When no "
"recursive edit is active, it returns 0."
msgstr ""

# type: cindex
#: lispref/commands.texi:3111
#, no-wrap
msgid "disabled command"
msgstr ""

# type: Plain text
#: lispref/commands.texi:3117
msgid ""
"@dfn{Disabling a command} marks the command as requiring user confirmation "
"before it can be executed.  Disabling is used for commands which might be "
"confusing to beginning users, to prevent them from using the commands by "
"accident."
msgstr ""

# type: item
#: lispref/commands.texi:3118 lispref/display.texi:3812
#, no-wrap
msgid "disabled"
msgstr ""

# type: Plain text
#: lispref/commands.texi:3123
msgid ""
"The low-level mechanism for disabling a command is to put a non-@code{nil} "
"@code{disabled} property on the Lisp symbol for the command.  These "
"properties are normally set up by the user's init file (@pxref{Init File}) "
"with Lisp expressions such as this:"
msgstr ""

# type: example
#: lispref/commands.texi:3126
#, no-wrap
msgid "(put 'upcase-region 'disabled t)\n"
msgstr ""

# type: Plain text
#: lispref/commands.texi:3131
msgid ""
"For a few commands, these properties are present by default (you can remove "
"them in your init file if you wish)."
msgstr ""

# type: Plain text
#: lispref/commands.texi:3134
msgid ""
"If the value of the @code{disabled} property is a string, the message saying "
"the command is disabled includes that string.  For example:"
msgstr ""

# type: example
#: lispref/commands.texi:3138
#, no-wrap
msgid ""
"(put 'delete-region 'disabled\n"
"     \"Text deleted this way cannot be yanked back!\\n\")\n"
msgstr ""

# type: Plain text
#: lispref/commands.texi:3144
msgid ""
"@xref{Disabling,,, emacs, The GNU Emacs Manual}, for the details on what "
"happens when a disabled command is invoked interactively.  Disabling a "
"command has no effect on calling it as a function from Lisp programs."
msgstr ""

# type: deffn
#: lispref/commands.texi:3145
#, no-wrap
msgid "Command enable-command command"
msgstr ""

# type: deffn
#: lispref/commands.texi:3149
msgid ""
"Allow @var{command} (a symbol) to be executed without special confirmation "
"from now on, and alter the user's init file (@pxref{Init File}) so that this "
"will apply to future sessions."
msgstr ""

# type: deffn
#: lispref/commands.texi:3151
#, no-wrap
msgid "Command disable-command command"
msgstr ""

# type: deffn
#: lispref/commands.texi:3154
msgid ""
"Require special confirmation to execute @var{command} from now on, and alter "
"the user's init file so that this will apply to future sessions."
msgstr ""

# type: item
#: lispref/commands.texi:3156 lispref/hooks.texi:144
#, no-wrap
msgid "disabled-command-function"
msgstr ""

# type: defvar
#: lispref/commands.texi:3162
msgid ""
"The value of this variable should be a function.  When the user invokes a "
"disabled command interactively, this function is called instead of the "
"disabled command.  It can use @code{this-command-keys} to determine what the "
"user typed to run the command, and thus find the command itself."
msgstr ""

# type: defvar
#: lispref/commands.texi:3165
msgid ""
"The value may also be @code{nil}.  Then all commands work normally, even "
"disabled ones."
msgstr ""

# type: defvar
#: lispref/commands.texi:3168
msgid ""
"By default, the value is a function that asks the user whether to proceed."
msgstr ""

# type: cindex
#: lispref/commands.texi:3172
#, no-wrap
msgid "command history"
msgstr ""

# type: cindex
#: lispref/commands.texi:3173
#, no-wrap
msgid "complex command"
msgstr ""

# type: cindex
#: lispref/commands.texi:3174
#, no-wrap
msgid "history of commands"
msgstr ""

# type: Plain text
#: lispref/commands.texi:3184
msgid ""
"The command loop keeps a history of the complex commands that have been "
"executed, to make it convenient to repeat these commands.  A @dfn{complex "
"command} is one for which the interactive argument reading uses the "
"minibuffer.  This includes any @kbd{M-x} command, any @kbd{M-:} command, and "
"any command whose @code{interactive} specification reads an argument from "
"the minibuffer.  Explicit use of the minibuffer during the execution of the "
"command itself does not cause the command to be considered complex."
msgstr ""

# type: defvar
#: lispref/commands.texi:3185
#, no-wrap
msgid "command-history"
msgstr ""

# type: defvar
#: lispref/commands.texi:3191
msgid ""
"This variable's value is a list of recent complex commands, each represented "
"as a form to evaluate.  It continues to accumulate all complex commands for "
"the duration of the editing session, but when it reaches the maximum size "
"(@pxref{Minibuffer History}), the oldest elements are deleted as new ones "
"are added."
msgstr ""

# type: group
#: lispref/commands.texi:3199
#, no-wrap
msgid ""
"command-history\n"
"@result{} ((switch-to-buffer \"chistory.texi\")\n"
"    (describe-key \"^X^[\")\n"
"    (visit-tags-table \"~/emacs/src/\")\n"
"    (find-tag \"repeat-complex-command\"))\n"
msgstr ""

# type: Plain text
#: lispref/commands.texi:3206
msgid ""
"This history list is actually a special case of minibuffer history (@pxref"
"{Minibuffer History}), with one special twist: the elements are expressions "
"rather than strings."
msgstr ""

# type: Plain text
#: lispref/commands.texi:3212
msgid ""
"There are a number of commands devoted to the editing and recall of previous "
"commands.  The commands @code{repeat-complex-command}, and @code{list-"
"command-history} are described in the user manual (@pxref{Repetition,,, "
"emacs, The GNU Emacs Manual}).  Within the minibuffer, the usual minibuffer "
"history commands are available."
msgstr ""

# type: cindex
#: lispref/commands.texi:3215
#, no-wrap
msgid "keyboard macros"
msgstr ""

# type: Plain text
#: lispref/commands.texi:3222
msgid ""
"A @dfn{keyboard macro} is a canned sequence of input events that can be "
"considered a command and made the definition of a key.  The Lisp "
"representation of a keyboard macro is a string or vector containing the "
"events.  Don't confuse keyboard macros with Lisp macros (@pxref{Macros})."
msgstr ""

# type: defun
#: lispref/commands.texi:3223
#, no-wrap
msgid "execute-kbd-macro kbdmacro &optional count loopfunc"
msgstr ""

# type: defun
#: lispref/commands.texi:3229
msgid ""
"This function executes @var{kbdmacro} as a sequence of events.  If @var"
"{kbdmacro} is a string or vector, then the events in it are executed exactly "
"as if they had been input by the user.  The sequence is @emph{not} expected "
"to be a single key sequence; normally a keyboard macro definition consists "
"of several key sequences concatenated."
msgstr ""

# type: defun
#: lispref/commands.texi:3234
msgid ""
"If @var{kbdmacro} is a symbol, then its function definition is used in place "
"of @var{kbdmacro}.  If that is another symbol, this process repeats.  "
"Eventually the result should be a string or vector.  If the result is not a "
"symbol, string, or vector, an error is signaled."
msgstr ""

# type: defun
#: lispref/commands.texi:3239
msgid ""
"The argument @var{count} is a repeat count; @var{kbdmacro} is executed that "
"many times.  If @var{count} is omitted or @code{nil}, @var{kbdmacro} is "
"executed once.  If it is 0, @var{kbdmacro} is executed over and over until "
"it encounters an error or a failing search."
msgstr ""

# type: defun
#: lispref/commands.texi:3243
msgid ""
"If @var{loopfunc} is non-@code{nil}, it is a function that is called, "
"without arguments, prior to each iteration of the macro.  If @var{loopfunc} "
"returns @code{nil}, then this stops execution of the macro."
msgstr ""

# type: defun
#: lispref/commands.texi:3245
msgid ""
"@xref{Reading One Event}, for an example of using @code{execute-kbd-macro}."
msgstr ""

# type: defvar
#: lispref/commands.texi:3247
#, no-wrap
msgid "executing-kbd-macro"
msgstr ""

# type: defvar
#: lispref/commands.texi:3253
msgid ""
"This variable contains the string or vector that defines the keyboard macro "
"that is currently executing.  It is @code{nil} if no macro is currently "
"executing.  A command can test this variable so as to behave differently "
"when run from an executing macro.  Do not set this variable yourself."
msgstr ""

# type: defvar
#: lispref/commands.texi:3255
#, no-wrap
msgid "defining-kbd-macro"
msgstr ""

# type: defvar
#: lispref/commands.texi:3262
msgid ""
"This variable is non-@code{nil} if and only if a keyboard macro is being "
"defined.  A command can test this variable so as to behave differently while "
"a macro is being defined.  The value is @code{append} while appending to the "
"definition of an existing macro.  The commands @code{start-kbd-macro}, @code"
"{kmacro-start-macro} and @code{end-kbd-macro} set this variable---do not set "
"it yourself."
msgstr ""

# type: defvar
#: lispref/commands.texi:3265 lispref/commands.texi:3273
msgid ""
"The variable is always local to the current terminal and cannot be buffer-"
"local.  @xref{Multiple Displays}."
msgstr ""

# type: defvar
#: lispref/commands.texi:3267
#, no-wrap
msgid "last-kbd-macro"
msgstr ""

# type: defvar
#: lispref/commands.texi:3270
msgid ""
"This variable is the definition of the most recently defined keyboard "
"macro.  Its value is a string or vector, or @code{nil}."
msgstr ""

# type: item
#: lispref/commands.texi:3275 lispref/hooks.texi:191
#, no-wrap
msgid "kbd-macro-termination-hook"
msgstr ""

# type: defvar
#: lispref/commands.texi:3279
msgid ""
"This normal hook (@pxref{Standard Hooks}) is run when a keyboard macro "
"terminates, regardless of what caused it to terminate (reaching the macro "
"end or an error which ended the macro prematurely)."
msgstr ""

# type: ignore
#: lispref/commands.texi:3283
#, no-wrap
msgid "   arch-tag: e34944ad-7d5c-4980-be00-36a5fe54d4b1\n"
msgstr "   arch-tag: e34944ad-7d5c-4980-be00-36a5fe54d4b1\n"

# type: menu
#: lispref/compile.texi:7 lispref/customize.texi:7 lispref/elisp.texi:131
#: lispref/loading.texi:7 lispref/loading.texi:8 lispref/vol1.texi:232
#: lispref/vol1.texi:509 lispref/vol2.texi:233 lispref/vol2.texi:510
#, no-wrap
msgid "Loading"
msgstr ""

# type: cindex
#: lispref/compile.texi:9
#, no-wrap
msgid "byte compilation"
msgstr ""

# type: item
#: lispref/compile.texi:10 lispref/compile.texi:558
#, no-wrap
msgid "byte-code"
msgstr ""

# type: cindex
#: lispref/compile.texi:11
#, no-wrap
msgid "compilation (Emacs Lisp)"
msgstr ""

# type: Plain text
#: lispref/compile.texi:18
msgid ""
"Emacs Lisp has a @dfn{compiler} that translates functions written in Lisp "
"into a special representation called @dfn{byte-code} that can be executed "
"more efficiently.  The compiler replaces Lisp function definitions with byte-"
"code.  When a byte-code function is called, its definition is evaluated by "
"the @dfn{byte-code interpreter}."
msgstr ""

# type: Plain text
#: lispref/compile.texi:24
msgid ""
"Because the byte-compiled code is evaluated by the byte-code interpreter, "
"instead of being executed directly by the machine's hardware (as true "
"compiled code is), byte-code is completely transportable from machine to "
"machine without recompilation.  It is not, however, as fast as true compiled "
"code."
msgstr ""

# type: Plain text
#: lispref/compile.texi:30
msgid ""
"Compiling a Lisp file with the Emacs byte compiler always reads the file as "
"multibyte text, even if Emacs was started with @samp{--unibyte}, unless the "
"file specifies otherwise.  This is so that compilation gives results "
"compatible with running the same file without compilation.  @xref{Loading "
"Non-ASCII}."
msgstr ""

# type: Plain text
#: lispref/compile.texi:33
msgid ""
"In general, any version of Emacs can run byte-compiled code produced by "
"recent earlier versions of Emacs, but the reverse is not true."
msgstr ""

# type: vindex
#: lispref/compile.texi:34
#, no-wrap
msgid "no-byte-compile"
msgstr ""

# type: Plain text
#: lispref/compile.texi:37
msgid ""
"If you do not want a Lisp file to be compiled, ever, put a file-local "
"variable binding for @code{no-byte-compile} into it, like this:"
msgstr ""

# type: example
#: lispref/compile.texi:40
#, no-wrap
msgid ";; -*-no-byte-compile: t; -*-\n"
msgstr ""

# type: Plain text
#: lispref/compile.texi:44
msgid ""
"@xref{Compilation Errors}, for how to investigate errors occurring in byte "
"compilation."
msgstr ""

# type: node
#: lispref/compile.texi:54 lispref/compile.texi:56
#, no-wrap
msgid "Speed of Byte-Code"
msgstr ""

# type: menu
#: lispref/compile.texi:54
msgid "An example of speedup from byte compilation."
msgstr ""

# type: menu
#: lispref/compile.texi:54 lispref/compile.texi:96 lispref/vol1.texi:519
#: lispref/vol2.texi:520
#, no-wrap
msgid "Compilation Functions"
msgstr ""

# type: menu
#: lispref/compile.texi:54 lispref/vol1.texi:519 lispref/vol2.texi:520
msgid "Byte compilation functions."
msgstr ""

# type: node
#: lispref/compile.texi:54 lispref/compile.texi:275
#, no-wrap
msgid "Docs and Compilation"
msgstr ""

# type: menu
#: lispref/compile.texi:54
msgid "Dynamic loading of documentation strings."
msgstr ""

# type: node
#: lispref/compile.texi:54 lispref/compile.texi:338
#, no-wrap
msgid "Dynamic Loading"
msgstr ""

# type: menu
#: lispref/compile.texi:54
msgid "Dynamic loading of individual functions."
msgstr ""

# type: node
#: lispref/compile.texi:54 lispref/compile.texi:399
#, no-wrap
msgid "Eval During Compile"
msgstr ""

# type: menu
#: lispref/compile.texi:54
msgid "Code to be evaluated when you compile."
msgstr ""

# type: section
#: lispref/compile.texi:54 lispref/compile.texi:480 lispref/compile.texi:481
#, no-wrap
msgid "Compiler Errors"
msgstr ""

# type: menu
#: lispref/compile.texi:54
msgid "Handling compiler error messages."
msgstr ""

# type: node
#: lispref/compile.texi:54 lispref/compile.texi:536
#, no-wrap
msgid "Byte-Code Objects"
msgstr ""

# type: menu
#: lispref/compile.texi:54
msgid "The data type used for byte-compiled functions."
msgstr ""

# type: menu
#: lispref/compile.texi:54 lispref/compile.texi:609 lispref/vol1.texi:519
#: lispref/vol2.texi:520
#, no-wrap
msgid "Disassembly"
msgstr ""

# type: menu
#: lispref/compile.texi:54 lispref/vol1.texi:519 lispref/vol2.texi:520
msgid "Disassembling byte-code; how to read byte-code."
msgstr ""

# type: section
#: lispref/compile.texi:57
#, no-wrap
msgid "Performance of Byte-Compiled Code"
msgstr ""

# type: Plain text
#: lispref/compile.texi:62
msgid ""
"A byte-compiled function is not as efficient as a primitive function written "
"in C, but runs much faster than the version written in Lisp.  Here is an "
"example:"
msgstr ""

# type: group
#: lispref/compile.texi:72
#, no-wrap
msgid ""
"(defun silly-loop (n)\n"
"  \"Return time before and after N iterations of a loop.\"\n"
"  (let ((t1 (current-time-string)))\n"
"    (while (> (setq n (1- n))\n"
"              0))\n"
"    (list t1 (current-time-string))))\n"
"@result{} silly-loop\n"
msgstr ""

# type: group
#: lispref/compile.texi:78
#, no-wrap
msgid ""
"(silly-loop 100000)\n"
"@result{} (\"Fri Mar 18 17:25:57 1994\"\n"
"    \"Fri Mar 18 17:26:28 1994\")  ; @r{31 seconds}\n"
msgstr ""

# type: group
#: lispref/compile.texi:83
#, no-wrap
msgid ""
"(byte-compile 'silly-loop)\n"
"@result{} @r{[Compiled code not shown]}\n"
msgstr ""

# type: group
#: lispref/compile.texi:89
#, no-wrap
msgid ""
"(silly-loop 100000)\n"
"@result{} (\"Fri Mar 18 17:26:52 1994\"\n"
"    \"Fri Mar 18 17:26:58 1994\")  ; @r{6 seconds}\n"
msgstr ""

# type: Plain text
#: lispref/compile.texi:95
msgid ""
"In this example, the interpreted code required 31 seconds to run, whereas "
"the byte-compiled code required 6 seconds.  These results are "
"representative, but actual results will vary greatly."
msgstr ""

# type: section
#: lispref/compile.texi:98
#, no-wrap
msgid "The Compilation Functions"
msgstr ""

# type: cindex
#: lispref/compile.texi:99
#, no-wrap
msgid "compilation functions"
msgstr ""

# type: Plain text
#: lispref/compile.texi:105
msgid ""
"You can byte-compile an individual function or macro definition with the "
"@code{byte-compile} function.  You can compile a whole file with @code{byte-"
"compile-file}, or several files with @code{byte-recompile-directory} or @code"
"{batch-byte-compile}."
msgstr ""

# type: Plain text
#: lispref/compile.texi:109
msgid ""
"The byte compiler produces error messages and warnings about each file in a "
"buffer called @samp{*Compile-Log*}.  These report things in your program "
"that suggest a problem but are not necessarily erroneous."
msgstr ""

# type: cindex
#: lispref/compile.texi:110
#, no-wrap
msgid "macro compilation"
msgstr ""

# type: Plain text
#: lispref/compile.texi:120
msgid ""
"Be careful when writing macro calls in files that you may someday byte-"
"compile.  Macro calls are expanded when they are compiled, so the macros "
"must already be defined for proper compilation.  For more details, see @ref"
"{Compiling Macros}.  If a program does not work the same way when compiled "
"as it does when interpreted, erroneous macro definitions are one likely "
"cause (@pxref{Problems with Macros}).  Inline (@code{defsubst}) functions "
"are less troublesome; if you compile a call to such a function before its "
"definition is known, the call will still work right, it will just run slower."
msgstr ""

# type: Plain text
#: lispref/compile.texi:129
msgid ""
"Normally, compiling a file does not evaluate the file's contents or load the "
"file.  But it does execute any @code{require} calls at top level in the "
"file.  One way to ensure that necessary macro definitions are available "
"during compilation is to require the file that defines them (@pxref{Named "
"Features}).  To avoid loading the macro definition files when someone @emph"
"{runs} the compiled program, write @code{eval-when-compile} around the @code"
"{require} calls (@pxref{Eval During Compile})."
msgstr ""

# type: defun
#: lispref/compile.texi:130
#, no-wrap
msgid "byte-compile symbol"
msgstr ""

# type: defun
#: lispref/compile.texi:137
msgid ""
"This function byte-compiles the function definition of @var{symbol}, "
"replacing the previous definition with the compiled one.  The function "
"definition of @var{symbol} must be the actual code for the function; i.e., "
"the compiler does not follow indirection to another symbol.  @code{byte-"
"compile} returns the new, compiled definition of @var{symbol}."
msgstr ""

# type: defun
#: lispref/compile.texi:143
msgid ""
"If @var{symbol}'s definition is a byte-code function object, @code{byte-"
"compile} does nothing and returns @code{nil}.  Lisp records only one "
"function definition for any symbol, and if that is already compiled, non-"
"compiled code is not available anywhere.  So there is no way to ``compile "
"the same definition again.''"
msgstr ""

# type: group
#: lispref/compile.texi:151
#, no-wrap
msgid ""
"(defun factorial (integer)\n"
"  \"Compute factorial of INTEGER.\"\n"
"  (if (= 1 integer) 1\n"
"    (* integer (factorial (1- integer)))))\n"
"@result{} factorial\n"
msgstr ""

# type: group
#: lispref/compile.texi:160
#, no-wrap
msgid ""
"(byte-compile 'factorial)\n"
"@result{}\n"
"#[(integer)\n"
"  \"^H\\301U\\203^H^@@\\301\\207\\302^H\\303^HS!\\\"\\207\"\n"
"  [integer 1 * factorial]\n"
"  4 \"Compute factorial of INTEGER.\"]\n"
msgstr ""

# type: defun
#: lispref/compile.texi:169
msgid ""
"The result is a byte-code function object.  The string it contains is the "
"actual byte-code; each character in it is an instruction or an operand of an "
"instruction.  The vector contains all the constants, variable names and "
"function names used by the function, except for certain primitives that are "
"coded as special instructions."
msgstr ""

# type: defun
#: lispref/compile.texi:173
msgid ""
"If the argument to @code{byte-compile} is a @code{lambda} expression, it "
"returns the corresponding compiled code, but does not store it anywhere."
msgstr ""

# type: deffn
#: lispref/compile.texi:175
#, no-wrap
msgid "Command compile-defun &optional arg"
msgstr ""

# type: deffn
#: lispref/compile.texi:180
msgid ""
"This command reads the defun containing point, compiles it, and evaluates "
"the result.  If you use this on a defun that is actually a function "
"definition, the effect is to install a compiled version of that function."
msgstr ""

# type: deffn
#: lispref/compile.texi:184
msgid ""
"@code{compile-defun} normally displays the result of evaluation in the echo "
"area, but if @var{arg} is non-@code{nil}, it inserts the result in the "
"current buffer after the form it compiled."
msgstr ""

# type: deffn
#: lispref/compile.texi:186
#, no-wrap
msgid "Command byte-compile-file filename &optional load"
msgstr ""

# type: deffn
#: lispref/compile.texi:191
msgid ""
"This function compiles a file of Lisp code named @var{filename} into a file "
"of byte-code.  The output file's name is made by changing the @samp{.el} "
"suffix into @samp{.elc}; if @var{filename} does not end in @samp{.el}, it "
"adds @samp{.elc} to the end of @var{filename}."
msgstr ""

# type: deffn
#: lispref/compile.texi:198
msgid ""
"Compilation works by reading the input file one form at a time.  If it is a "
"definition of a function or macro, the compiled function or macro definition "
"is written out.  Other forms are batched together, then each batch is "
"compiled, and written so that its compiled code will be executed when the "
"file is read.  All comments are discarded when the input file is read."
msgstr ""

# type: deffn
#: lispref/compile.texi:201
msgid ""
"This command returns @code{t} if there were no errors and @code{nil} "
"otherwise.  When called interactively, it prompts for the file name."
msgstr ""

# type: deffn
#: lispref/compile.texi:204
msgid ""
"If @var{load} is non-@code{nil}, this command loads the compiled file after "
"compiling it.  Interactively, @var{load} is the prefix argument."
msgstr ""

# type: group
#: lispref/compile.texi:209
#, no-wrap
msgid ""
"% ls -l push*\n"
"-rw-r--r--  1 lewis     791 Oct  5 20:31 push.el\n"
msgstr ""

# type: group
#: lispref/compile.texi:214
#, no-wrap
msgid ""
"(byte-compile-file \"~/emacs/push.el\")\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/compile.texi:220
#, no-wrap
msgid ""
"% ls -l push*\n"
"-rw-r--r--  1 lewis     791 Oct  5 20:31 push.el\n"
"-rw-rw-rw-  1 lewis     638 Oct  8 20:25 push.elc\n"
msgstr ""

# type: deffn
#: lispref/compile.texi:224
#, no-wrap
msgid "Command byte-recompile-directory directory &optional flag force"
msgstr ""

# type: cindex
#: lispref/compile.texi:225
#, no-wrap
msgid "library compilation"
msgstr ""

# type: deffn
#: lispref/compile.texi:230
msgid ""
"This command recompiles every @samp{.el} file in @var{directory} (or its "
"subdirectories) that needs recompilation.  A file needs recompilation if a "
"@samp{.elc} file exists but is older than the @samp{.el} file."
msgstr ""

# type: deffn
#: lispref/compile.texi:236
msgid ""
"When a @samp{.el} file has no corresponding @samp{.elc} file, @var{flag} "
"says what to do.  If it is @code{nil}, this command ignores these files.  If "
"@var{flag} is 0, it compiles them.  If it is neither @code{nil} nor 0, it "
"asks the user whether to compile each such file, and asks about each "
"subdirectory as well."
msgstr ""

# type: deffn
#: lispref/compile.texi:239
msgid ""
"Interactively, @code{byte-recompile-directory} prompts for @var{directory} "
"and @var{flag} is the prefix argument."
msgstr ""

# type: deffn
#: lispref/compile.texi:242
msgid ""
"If @var{force} is non-@code{nil}, this command recompiles every @samp{.el} "
"file that has a @samp{.elc} file."
msgstr ""

# type: deffn
#: lispref/compile.texi:244
msgid "The returned value is unpredictable."
msgstr ""

# type: defun
#: lispref/compile.texi:246
#, no-wrap
msgid "batch-byte-compile &optional noforce"
msgstr ""

# type: defun
#: lispref/compile.texi:253
msgid ""
"This function runs @code{byte-compile-file} on files specified on the "
"command line.  This function must be used only in a batch execution of "
"Emacs, as it kills Emacs on completion.  An error in one file does not "
"prevent processing of subsequent files, but no output file will be generated "
"for it, and the Emacs process will terminate with a nonzero status code."
msgstr ""

# type: defun
#: lispref/compile.texi:256
msgid ""
"If @var{noforce} is non-@code{nil}, this function does not recompile files "
"that have an up-to-date @samp{.elc} file."
msgstr ""

# type: example
#: lispref/compile.texi:259
#, no-wrap
msgid "% emacs -batch -f batch-byte-compile *.el\n"
msgstr ""

# type: defun
#: lispref/compile.texi:262
#, no-wrap
msgid "byte-code code-string data-vector max-stack"
msgstr ""

# type: cindex
#: lispref/compile.texi:263
#, no-wrap
msgid "byte-code interpreter"
msgstr ""

# type: defun
#: lispref/compile.texi:268
msgid ""
"This function actually interprets byte-code.  A byte-compiled function is "
"actually defined with a body that calls @code{byte-code}.  Don't call this "
"function yourself---only the byte compiler knows how to generate valid calls "
"to this function."
msgstr ""

# type: defun
#: lispref/compile.texi:273
msgid ""
"In Emacs version 18, byte-code was always executed by way of a call to the "
"function @code{byte-code}.  Nowadays, byte-code is usually executed as part "
"of a byte-code function object, and only rarely through an explicit call to "
"@code{byte-code}."
msgstr ""

# type: section
#: lispref/compile.texi:276
#, no-wrap
msgid "Documentation Strings and Compilation"
msgstr ""

# type: cindex
#: lispref/compile.texi:277
#, no-wrap
msgid "dynamic loading of documentation"
msgstr ""

# type: Plain text
#: lispref/compile.texi:285
msgid ""
"Functions and variables loaded from a byte-compiled file access their "
"documentation strings dynamically from the file whenever needed.  This saves "
"space within Emacs, and makes loading faster because the documentation "
"strings themselves need not be processed while loading the file.  Actual "
"access to the documentation strings becomes slower as a result, but this "
"normally is not enough to bother users."
msgstr ""

# type: Plain text
#: lispref/compile.texi:287
msgid "Dynamic access to documentation strings does have drawbacks:"
msgstr ""

# type: itemize
#: lispref/compile.texi:293
msgid ""
"If you delete or move the compiled file after loading it, Emacs can no "
"longer access the documentation strings for the functions and variables in "
"the file."
msgstr ""

# type: itemize
#: lispref/compile.texi:298
msgid ""
"If you alter the compiled file (such as by compiling a new version), then "
"further access to documentation strings in this file will probably give "
"nonsense results."
msgstr ""

# type: Plain text
#: lispref/compile.texi:305
msgid ""
"If your site installs Emacs following the usual procedures, these problems "
"will never normally occur.  Installing a new version uses a new directory "
"with a different name; as long as the old version remains installed, its "
"files will remain unmodified in the places where they are expected to be."
msgstr ""

# type: Plain text
#: lispref/compile.texi:310
msgid ""
"However, if you have built Emacs yourself and use it from the directory "
"where you built it, you will experience this problem occasionally if you "
"edit and recompile Lisp files.  When it happens, you can cure the problem by "
"reloading the file after recompiling it."
msgstr ""

# type: Plain text
#: lispref/compile.texi:318
msgid ""
"You can turn off this feature at compile time by setting @code{byte-compile-"
"dynamic-docstrings} to @code{nil}; this is useful mainly if you expect to "
"change the file, and you want Emacs processes that have already loaded it to "
"keep working when the file changes.  You can do this globally, or for one "
"source file by specifying a file-local binding for the variable.  One way to "
"do that is by adding this string to the file's first line:"
msgstr ""

# type: example
#: lispref/compile.texi:321
#, no-wrap
msgid "-*-byte-compile-dynamic-docstrings: nil;-*-\n"
msgstr ""

# type: defvar
#: lispref/compile.texi:323
#, no-wrap
msgid "byte-compile-dynamic-docstrings"
msgstr ""

# type: defvar
#: lispref/compile.texi:326
msgid ""
"If this is non-@code{nil}, the byte compiler generates compiled files that "
"are set up for dynamic loading of documentation strings."
msgstr ""

# type: samp{#1}
#: lispref/compile.texi:328
#, no-wrap
msgid "#@@@var{count}"
msgstr ""

# type: samp{#1}
#: lispref/compile.texi:329
#, no-wrap
msgid "#$"
msgstr "#$"

# type: Plain text
#: lispref/compile.texi:337
msgid ""
"The dynamic documentation string feature writes compiled files that use a "
"special Lisp reader construct, @samp{#@@@var{count}}.  This construct skips "
"the next @var{count} characters.  It also uses the @samp{#$} construct, "
"which stands for ``the name of this file, as a string.'' It is usually best "
"not to use these constructs in Lisp source files, since they are not "
"designed to be clear to humans reading the file."
msgstr ""

# type: section
#: lispref/compile.texi:339
#, no-wrap
msgid "Dynamic Loading of Individual Functions"
msgstr ""

# type: cindex
#: lispref/compile.texi:341
#, no-wrap
msgid "dynamic loading of functions"
msgstr ""

# type: cindex
#: lispref/compile.texi:342
#, no-wrap
msgid "lazy loading"
msgstr ""

# type: Plain text
#: lispref/compile.texi:350
msgid ""
"When you compile a file, you can optionally enable the @dfn{dynamic function "
"loading} feature (also known as @dfn{lazy loading}).  With dynamic function "
"loading, loading the file doesn't fully read the function definitions in the "
"file.  Instead, each function definition contains a place-holder which "
"refers to the file.  The first time each function is called, it reads the "
"full definition from the file, to replace the place-holder."
msgstr ""

# type: Plain text
#: lispref/compile.texi:357
msgid ""
"The advantage of dynamic function loading is that loading the file becomes "
"much faster.  This is a good thing for a file which contains many separate "
"user-callable functions, if using one of them does not imply you will "
"probably also use the rest.  A specialized mode which provides many keyboard "
"commands often has that usage pattern: a user may invoke the mode, but use "
"only a few of the commands it provides."
msgstr ""

# type: Plain text
#: lispref/compile.texi:359
msgid "The dynamic loading feature has certain disadvantages:"
msgstr ""

# type: itemize
#: lispref/compile.texi:364
msgid ""
"If you delete or move the compiled file after loading it, Emacs can no "
"longer load the remaining function definitions not already loaded."
msgstr ""

# type: itemize
#: lispref/compile.texi:369
msgid ""
"If you alter the compiled file (such as by compiling a new version), then "
"trying to load any function not already loaded will usually yield nonsense "
"results."
msgstr ""

# type: Plain text
#: lispref/compile.texi:375
msgid ""
"These problems will never happen in normal circumstances with installed "
"Emacs files.  But they are quite likely to happen with Lisp files that you "
"are changing.  The easiest way to prevent these problems is to reload the "
"new compiled file immediately after each recompilation."
msgstr ""

# type: Plain text
#: lispref/compile.texi:382
msgid ""
"The byte compiler uses the dynamic function loading feature if the variable "
"@code{byte-compile-dynamic} is non-@code{nil} at compilation time.  Do not "
"set this variable globally, since dynamic loading is desirable only for "
"certain files.  Instead, enable the feature for specific source files with "
"file-local variable bindings.  For example, you could do it by writing this "
"text in the source file's first line:"
msgstr ""

# type: example
#: lispref/compile.texi:385
#, no-wrap
msgid "-*-byte-compile-dynamic: t;-*-\n"
msgstr ""

# type: defvar
#: lispref/compile.texi:387
#, no-wrap
msgid "byte-compile-dynamic"
msgstr ""

# type: defvar
#: lispref/compile.texi:390
msgid ""
"If this is non-@code{nil}, the byte compiler generates compiled files that "
"are set up for dynamic function loading."
msgstr ""

# type: defun
#: lispref/compile.texi:392
#, no-wrap
msgid "fetch-bytecode function"
msgstr ""

# type: defun
#: lispref/compile.texi:397
msgid ""
"If @var{function} is a byte-code function object, this immediately finishes "
"loading the byte code of @var{function} from its byte-compiled file, if it "
"is not fully loaded already.  Otherwise, it does nothing.  It always returns "
"@var{function}."
msgstr ""

# type: section
#: lispref/compile.texi:400
#, no-wrap
msgid "Evaluation During Compilation"
msgstr ""

# type: Plain text
#: lispref/compile.texi:404
msgid ""
"These features permit you to write code to be evaluated during compilation "
"of a program."
msgstr ""

# type: defspec
#: lispref/compile.texi:405
#, no-wrap
msgid "eval-and-compile body@dots{}"
msgstr ""

# type: defspec
#: lispref/compile.texi:408
msgid ""
"This form marks @var{body} to be evaluated both when you compile the "
"containing code and when you run it (whether compiled or not)."
msgstr ""

# type: defspec
#: lispref/compile.texi:414
msgid ""
"You can get a similar result by putting @var{body} in a separate file and "
"referring to that file with @code{require}.  That method is preferable when "
"@var{body} is large.  Effectively @code{require} is automatically @code{eval-"
"and-compile}, the package is loaded both when compiling and executing."
msgstr ""

# type: defspec
#: lispref/compile.texi:418
msgid ""
"@code{autoload} is also effectively @code{eval-and-compile} too.  It's "
"recognized when compiling, so uses of such a function don't produce ``not "
"known to be defined'' warnings."
msgstr ""

# type: defspec
#: lispref/compile.texi:420
msgid "Most uses of @code{eval-and-compile} are fairly sophisticated."
msgstr ""

# type: defspec
#: lispref/compile.texi:425
msgid ""
"If a macro has a helper function to build its result, and that macro is used "
"both locally and outside the package, then @code{eval-and-compile} should be "
"used to get the helper both when compiling and then later when running."
msgstr ""

# type: defspec
#: lispref/compile.texi:430
msgid ""
"If functions are defined programmatically (with @code{fset} say), then @code"
"{eval-and-compile} can be used to have that done at compile-time as well as "
"run-time, so calls to those functions are checked (and warnings about ``not "
"known to be defined'' suppressed)."
msgstr ""

# type: defspec
#: lispref/compile.texi:432
#, no-wrap
msgid "eval-when-compile body@dots{}"
msgstr ""

# type: defspec
#: lispref/compile.texi:438
msgid ""
"This form marks @var{body} to be evaluated at compile time but not when the "
"compiled program is loaded.  The result of evaluation by the compiler "
"becomes a constant which appears in the compiled program.  If you load the "
"source file, rather than compiling it, @var{body} is evaluated normally."
msgstr ""

# type: cindex
#: lispref/compile.texi:439
#, no-wrap
msgid "compile-time constant"
msgstr ""

# type: defspec
#: lispref/compile.texi:442
msgid ""
"If you have a constant that needs some calculation to produce, @code{eval-"
"when-compile} can do that at compile-time.  For example,"
msgstr ""

# type: lisp
#: lispref/compile.texi:446
#, no-wrap
msgid ""
"(defvar my-regexp\n"
"  (eval-when-compile (regexp-opt '(\"aaa\" \"aba\" \"abb\"))))\n"
msgstr ""

# type: cindex
#: lispref/compile.texi:448
#, no-wrap
msgid "macros, at compile time"
msgstr ""

# type: defspec
#: lispref/compile.texi:452
msgid ""
"If you're using another package, but only need macros from it (the byte "
"compiler will expand those), then @code{eval-when-compile} can be used to "
"load it for compiling, but not executing.  For example,"
msgstr ""

# type: lisp
#: lispref/compile.texi:456
#, no-wrap
msgid ""
"(eval-when-compile\n"
"  (require 'my-macro-package))  ;; only macros needed from this\n"
msgstr ""

# type: defspec
#: lispref/compile.texi:462
msgid ""
"The same sort of thing goes for macros and @code{defsubst} functions defined "
"locally and only for use within the file.  They are needed for compiling the "
"file, but in most cases they are not needed for execution of the compiled "
"file.  For example,"
msgstr ""

# type: lisp
#: lispref/compile.texi:468
#, no-wrap
msgid ""
"(eval-when-compile\n"
"  (unless (fboundp 'some-new-thing)\n"
"    (defmacro 'some-new-thing ()\n"
"      (compatibility code))))\n"
msgstr ""

# type: defspec
#: lispref/compile.texi:473
msgid ""
"This is often good for code that's only a fallback for compatibility with "
"other versions of Emacs."
msgstr ""

# type: defspec
#: lispref/compile.texi:478
msgid ""
"@strong{Common Lisp Note:} At top level, @code{eval-when-compile} is "
"analogous to the Common Lisp idiom @code{(eval-when (compile eval) @dots"
"{})}.  Elsewhere, the Common Lisp @samp{#.} reader macro (but not when "
"interpreting) is closer to what @code{eval-when-compile} does."
msgstr ""

# type: cindex
#: lispref/compile.texi:482
#, no-wrap
msgid "compiler errors"
msgstr ""

# type: Plain text
#: lispref/compile.texi:489
msgid ""
"Byte compilation outputs all errors and warnings into the buffer @samp"
"{*Compile-Log*}.  The messages include file names and line numbers that "
"identify the location of the problem.  The usual Emacs commands for "
"operating on compiler diagnostics work properly on these messages."
msgstr ""

# type: Plain text
#: lispref/compile.texi:494
msgid ""
"However, the warnings about functions that were used but not defined are "
"always ``located'' at the end of the file, so these commands won't find the "
"places they are really used.  To do that, you must search for the function "
"names."
msgstr ""

# type: Plain text
#: lispref/compile.texi:498
msgid ""
"You can suppress the compiler warning for calling an undefined function @var"
"{func} by conditionalizing the function call on an @code{fboundp} test, like "
"this:"
msgstr ""

# type: example
#: lispref/compile.texi:501
#, no-wrap
msgid "(if (fboundp '@var{func}) ...(@var{func} ...)...)\n"
msgstr ""

# type: Plain text
#: lispref/compile.texi:507
msgid ""
"The call to @var{func} must be in the @var{then-form} of the @code{if}, and "
"@var{func} must appear quoted in the call to @code{fboundp}.  (This feature "
"operates for @code{cond} as well.)"
msgstr ""

# type: Plain text
#: lispref/compile.texi:511
msgid ""
"Likewise, you can suppress a compiler warning for an unbound variable @var"
"{variable} by conditionalizing its use on a @code{boundp} test, like this:"
msgstr ""

# type: example
#: lispref/compile.texi:514
#, no-wrap
msgid "(if (boundp '@var{variable}) ...@var{variable}...)\n"
msgstr ""

# type: Plain text
#: lispref/compile.texi:520
msgid ""
"The reference to @var{variable} must be in the @var{then-form} of the @code"
"{if}, and @var{variable} must appear quoted in the call to @code{boundp}."
msgstr ""

# type: Plain text
#: lispref/compile.texi:523
msgid ""
"You can suppress any compiler warnings using the construct @code{with-no-"
"warnings}:"
msgstr ""

# type: defspec
#: lispref/compile.texi:527
#, no-wrap
msgid "with-no-warnings body@dots{}"
msgstr ""

# type: defspec
#: lispref/compile.texi:531
msgid ""
"In execution, this is equivalent to @code{(progn @var{body}...)}, but the "
"compiler does not issue warnings for anything that occurs inside @var{body}."
msgstr ""

# type: defspec
#: lispref/compile.texi:534
msgid ""
"We recommend that you use this construct around the smallest possible piece "
"of code."
msgstr ""

# type: section
#: lispref/compile.texi:537
#, no-wrap
msgid "Byte-Code Function Objects"
msgstr ""

# type: cindex
#: lispref/compile.texi:538
#, no-wrap
msgid "compiled function"
msgstr ""

# type: item
#: lispref/compile.texi:539 lispref/functions.texi:111
#, no-wrap
msgid "byte-code function"
msgstr ""

# type: Plain text
#: lispref/compile.texi:543
msgid ""
"Byte-compiled functions have a special data type: they are @dfn{byte-code "
"function objects}."
msgstr ""

# type: Plain text
#: lispref/compile.texi:549
msgid ""
"Internally, a byte-code function object is much like a vector; however, the "
"evaluator handles this data type specially when it appears as a function to "
"be called.  The printed representation for a byte-code function object is "
"like that for a vector, with an additional @samp{#} before the opening @samp"
"{[}."
msgstr ""

# type: Plain text
#: lispref/compile.texi:553
msgid ""
"A byte-code function object must have at least four elements; there is no "
"maximum number, but only the first six elements have any normal use.  They "
"are:"
msgstr ""

# type: item
#: lispref/compile.texi:555
#, no-wrap
msgid "arglist"
msgstr ""

# type: table
#: lispref/compile.texi:557
msgid "The list of argument symbols."
msgstr ""

# type: table
#: lispref/compile.texi:560
msgid "The string containing the byte-code instructions."
msgstr ""

# type: item
#: lispref/compile.texi:561
#, no-wrap
msgid "constants"
msgstr ""

# type: table
#: lispref/compile.texi:564
msgid ""
"The vector of Lisp objects referenced by the byte code.  These include "
"symbols used as function names and variable names."
msgstr ""

# type: item
#: lispref/compile.texi:565
#, no-wrap
msgid "stacksize"
msgstr ""

# type: table
#: lispref/compile.texi:567
msgid "The maximum stack size this function needs."
msgstr ""

# type: item
#: lispref/compile.texi:568
#, no-wrap
msgid "docstring"
msgstr ""

# type: table
#: lispref/compile.texi:573
msgid ""
"The documentation string (if any); otherwise, @code{nil}.  The value may be "
"a number or a list, in case the documentation string is stored in a file.  "
"Use the function @code{documentation} to get the real documentation string "
"(@pxref{Accessing Documentation})."
msgstr ""

# type: item
#: lispref/compile.texi:574 lispref/eval.texi:458 lispref/functions.texi:1350
#: lispref/internals.texi:590
#, no-wrap
msgid "interactive"
msgstr ""

# type: table
#: lispref/compile.texi:577
msgid ""
"The interactive spec (if any).  This can be a string or a Lisp expression.  "
"It is @code{nil} for a function that isn't interactive."
msgstr ""

# type: Plain text
#: lispref/compile.texi:582
msgid ""
"Here's an example of a byte-code function object, in printed "
"representation.  It is the definition of the command @code{backward-sexp}."
msgstr ""

# type: example
#: lispref/compile.texi:590
#, no-wrap
msgid ""
"#[(&optional arg)\n"
"  \"^H\\204^F^@@\\301^P\\302^H[!\\207\"\n"
"  [arg 1 forward-sexp]\n"
"  2\n"
"  254435\n"
"  \"p\"]\n"
msgstr ""

# type: Plain text
#: lispref/compile.texi:594
msgid ""
"The primitive way to create a byte-code object is with @code{make-byte-code}:"
msgstr ""

# type: defun
#: lispref/compile.texi:595
#, no-wrap
msgid "make-byte-code &rest elements"
msgstr ""

# type: defun
#: lispref/compile.texi:598
msgid ""
"This function constructs and returns a byte-code function object with @var"
"{elements} as its elements."
msgstr ""

# type: Plain text
#: lispref/compile.texi:604
msgid ""
"You should not try to come up with the elements for a byte-code function "
"yourself, because if they are inconsistent, Emacs may crash when you call "
"the function.  Always leave it to the byte compiler to create these objects; "
"it makes the elements consistent (we hope)."
msgstr ""

# type: Plain text
#: lispref/compile.texi:608
msgid ""
"You can access the elements of a byte-code object using @code{aref}; you can "
"also use @code{vconcat} to create a vector with the same elements."
msgstr ""

# type: section
#: lispref/compile.texi:610
#, no-wrap
msgid "Disassembled Byte-Code"
msgstr ""

# type: cindex
#: lispref/compile.texi:611
#, no-wrap
msgid "disassembled byte-code"
msgstr ""

# type: Plain text
#: lispref/compile.texi:617
msgid ""
"People do not write byte-code; that job is left to the byte compiler.  But "
"we provide a disassembler to satisfy a cat-like curiosity.  The disassembler "
"converts the byte-compiled code into humanly readable form."
msgstr ""

# type: Plain text
#: lispref/compile.texi:623
msgid ""
"The byte-code interpreter is implemented as a simple stack machine.  It "
"pushes values onto a stack of its own, then pops them off to use them in "
"calculations whose results are themselves pushed back on the stack.  When a "
"byte-code function returns, it pops a value off the stack and returns it as "
"the value of the function."
msgstr ""

# type: Plain text
#: lispref/compile.texi:627
msgid ""
"In addition to the stack, byte-code functions can use, bind, and set "
"ordinary Lisp variables, by transferring values between variables and the "
"stack."
msgstr ""

# type: deffn
#: lispref/compile.texi:628
#, no-wrap
msgid "Command disassemble object &optional buffer-or-name"
msgstr ""

# type: deffn
#: lispref/compile.texi:635
msgid ""
"This command displays the disassembled code for @var{object}.  In "
"interactive use, or if @var{buffer-or-name} is @code{nil} or omitted, the "
"output goes in a buffer named @samp{*Disassemble*}.  If @var{buffer-or-name} "
"is non-@code{nil}, it must be a buffer or the name of an existing buffer.  "
"Then the output goes there, at point, and point is left before the output."
msgstr ""

# type: deffn
#: lispref/compile.texi:639
msgid ""
"The argument @var{object} can be a function name, a lambda expression or a "
"byte-code object.  If it is a lambda expression, @code{disassemble} compiles "
"it and disassembles the resulting compiled code."
msgstr ""

# type: Plain text
#: lispref/compile.texi:647
msgid ""
"Here are two examples of using the @code{disassemble} function.  We have "
"added explanatory comments to help you relate the byte-code to the Lisp "
"source; these do not appear in the output of @code{disassemble}.  These "
"examples show unoptimized byte-code.  Nowadays byte-code is usually "
"optimized, but we did not want to rewrite these examples, since they still "
"serve their purpose."
msgstr ""

# type: group
#: lispref/compile.texi:655
#, no-wrap
msgid ""
"(defun factorial (integer)\n"
"  \"Compute factorial of an integer.\"\n"
"  (if (= 1 integer) 1\n"
"    (* integer (factorial (1- integer)))))\n"
"     @result{} factorial\n"
msgstr ""

# type: group
#: lispref/compile.texi:660
#, no-wrap
msgid ""
"(factorial 4)\n"
"     @result{} 24\n"
msgstr ""

# type: group
#: lispref/compile.texi:667
#, no-wrap
msgid ""
"(disassemble 'factorial)\n"
"     @print{} byte-code for factorial:\n"
" doc: Compute factorial of an integer.\n"
" args: (integer)\n"
msgstr ""

# type: group
#: lispref/compile.texi:671
#, no-wrap
msgid ""
"0   constant 1              ; @r{Push 1 onto stack.}\n"
"\n"
msgstr ""

# type: group
#: lispref/compile.texi:676
#, no-wrap
msgid ""
"1   varref   integer        ; @r{Get value of @code{integer}}\n"
"                            ;   @r{from the environment}\n"
"                            ;   @r{and push the value}\n"
"                            ;   @r{onto the stack.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:682
#, no-wrap
msgid ""
"2   eqlsign                 ; @r{Pop top two values off stack,}\n"
"                            ;   @r{compare them,}\n"
"                            ;   @r{and push result onto stack.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:688
#, no-wrap
msgid ""
"3   goto-if-nil 10          ; @r{Pop and test top of stack;}\n"
"                            ;   @r{if @code{nil}, go to 10,}\n"
"                            ;   @r{else continue.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:692
#, no-wrap
msgid ""
"6   constant 1              ; @r{Push 1 onto top of stack.}\n"
"\n"
msgstr ""

# type: group
#: lispref/compile.texi:695
#, no-wrap
msgid ""
"7   goto     17             ; @r{Go to 17 (in this case, 1 will be}\n"
"                            ;   @r{returned by the function).}\n"
msgstr ""

# type: group
#: lispref/compile.texi:699
#, no-wrap
msgid ""
"10  constant *              ; @r{Push symbol @code{*} onto stack.}\n"
"\n"
msgstr ""

# type: group
#: lispref/compile.texi:701
#, no-wrap
msgid "11  varref   integer        ; @r{Push value of @code{integer} onto stack.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:705
#, no-wrap
msgid ""
"12  constant factorial      ; @r{Push @code{factorial} onto stack.}\n"
"\n"
msgstr ""

# type: group
#: lispref/compile.texi:707
#, no-wrap
msgid ""
"13  varref   integer        ; @r{Push value of @code{integer} onto stack.}\n"
"\n"
msgstr ""

# type: group
#: lispref/compile.texi:710
#, no-wrap
msgid ""
"14  sub1                    ; @r{Pop @code{integer}, decrement value,}\n"
"                            ;   @r{push new value onto stack.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:718
#, no-wrap
msgid ""
"                            ; @r{Stack now contains:}\n"
"                            ;   @minus{} @r{decremented value of @code{integer}}\n"
"                            ;   @minus{} @r{@code{factorial}}\n"
"                            ;   @minus{} @r{value of @code{integer}}\n"
"                            ;   @minus{} @r{@code{*}}\n"
msgstr ""

# type: group
#: lispref/compile.texi:725
#, no-wrap
msgid ""
"15  call     1              ; @r{Call function @code{factorial} using}\n"
"                            ;   @r{the first (i.e., the top) element}\n"
"                            ;   @r{of the stack as the argument;}\n"
"                            ;   @r{push returned value onto stack.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:733
#, no-wrap
msgid ""
"                            ; @r{Stack now contains:}\n"
"                            ;   @minus{} @r{result of recursive}\n"
"                            ;        @r{call to @code{factorial}}\n"
"                            ;   @minus{} @r{value of @code{integer}}\n"
"                            ;   @minus{} @r{@code{*}}\n"
msgstr ""

# type: group
#: lispref/compile.texi:742
#, no-wrap
msgid ""
"16  call     2              ; @r{Using the first two}\n"
"                            ;   @r{(i.e., the top two)}\n"
"                            ;   @r{elements of the stack}\n"
"                            ;   @r{as arguments,}\n"
"                            ;   @r{call the function @code{*},}\n"
"                            ;   @r{pushing the result onto the stack.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:748
#, no-wrap
msgid ""
"17  return                  ; @r{Return the top element}\n"
"                            ;   @r{of the stack.}\n"
"     @result{} nil\n"
msgstr ""

# type: Plain text
#: lispref/compile.texi:752
msgid "The @code{silly-loop} function is somewhat more complex:"
msgstr ""

# type: group
#: lispref/compile.texi:762
#, no-wrap
msgid ""
"(defun silly-loop (n)\n"
"  \"Return time before and after N iterations of a loop.\"\n"
"  (let ((t1 (current-time-string)))\n"
"    (while (> (setq n (1- n))\n"
"              0))\n"
"    (list t1 (current-time-string))))\n"
"     @result{} silly-loop\n"
msgstr ""

# type: group
#: lispref/compile.texi:769
#, no-wrap
msgid ""
"(disassemble 'silly-loop)\n"
"     @print{} byte-code for silly-loop:\n"
" doc: Return time before and after N iterations of a loop.\n"
" args: (n)\n"
"\n"
msgstr ""

# type: group
#: lispref/compile.texi:773
#, no-wrap
msgid ""
"0   constant current-time-string  ; @r{Push}\n"
"                                  ;   @r{@code{current-time-string}}\n"
"                                  ;   @r{onto top of stack.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:779
#, no-wrap
msgid ""
"1   call     0              ; @r{Call @code{current-time-string}}\n"
"                            ;   @r{ with no argument,}\n"
"                            ;   @r{ pushing result onto stack.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:784
#, no-wrap
msgid ""
"2   varbind  t1             ; @r{Pop stack and bind @code{t1}}\n"
"                            ;   @r{to popped value.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:790
#, no-wrap
msgid ""
"3   varref   n              ; @r{Get value of @code{n} from}\n"
"                            ;   @r{the environment and push}\n"
"                            ;   @r{the value onto the stack.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:794
#, no-wrap
msgid "4   sub1                    ; @r{Subtract 1 from top of stack.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:801
#, no-wrap
msgid ""
"5   dup                     ; @r{Duplicate the top of the stack;}\n"
"                            ;   @r{i.e., copy the top of}\n"
"                            ;   @r{the stack and push the}\n"
"                            ;   @r{copy onto the stack.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:806
#, no-wrap
msgid ""
"6   varset   n              ; @r{Pop the top of the stack,}\n"
"                            ;   @r{and bind @code{n} to the value.}\n"
"\n"
msgstr ""

# type: group
#: lispref/compile.texi:811
#, no-wrap
msgid ""
"                            ; @r{In effect, the sequence @code{dup varset}}\n"
"                            ;   @r{copies the top of the stack}\n"
"                            ;   @r{into the value of @code{n}}\n"
"                            ;   @r{without popping it.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:815
#, no-wrap
msgid "7   constant 0              ; @r{Push 0 onto stack.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:821
#, no-wrap
msgid ""
"8   gtr                     ; @r{Pop top two values off stack,}\n"
"                            ;   @r{test if @var{n} is greater than 0}\n"
"                            ;   @r{and push result onto stack.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:828
#, no-wrap
msgid ""
"9   goto-if-nil-else-pop 17 ; @r{Goto 17 if @code{n} <= 0}\n"
"                            ;   @r{(this exits the while loop).}\n"
"                            ;   @r{else pop top of stack}\n"
"                            ;   @r{and continue}\n"
msgstr ""

# type: group
#: lispref/compile.texi:833
#, no-wrap
msgid ""
"12  constant nil            ; @r{Push @code{nil} onto stack}\n"
"                            ;   @r{(this is the body of the loop).}\n"
msgstr ""

# type: group
#: lispref/compile.texi:840
#, no-wrap
msgid ""
"13  discard                 ; @r{Discard result of the body}\n"
"                            ;   @r{of the loop (a while loop}\n"
"                            ;   @r{is always evaluated for}\n"
"                            ;   @r{its side effects).}\n"
msgstr ""

# type: group
#: lispref/compile.texi:845
#, no-wrap
msgid ""
"14  goto     3              ; @r{Jump back to beginning}\n"
"                            ;   @r{of while loop.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:852
#, no-wrap
msgid ""
"17  discard                 ; @r{Discard result of while loop}\n"
"                            ;   @r{by popping top of stack.}\n"
"                            ;   @r{This result is the value @code{nil} that}\n"
"                            ;   @r{was not popped by the goto at 9.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:856
#, no-wrap
msgid "18  varref   t1             ; @r{Push value of @code{t1} onto stack.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:862
#, no-wrap
msgid ""
"19  constant current-time-string  ; @r{Push}\n"
"                                  ;   @r{@code{current-time-string}}\n"
"                                  ;   @r{onto top of stack.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:866
#, no-wrap
msgid "20  call     0              ; @r{Call @code{current-time-string} again.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:872
#, no-wrap
msgid ""
"21  list2                   ; @r{Pop top two elements off stack,}\n"
"                            ;   @r{create a list of them,}\n"
"                            ;   @r{and push list onto stack.}\n"
msgstr ""

# type: group
#: lispref/compile.texi:876
#, no-wrap
msgid ""
"22  unbind   1              ; @r{Unbind @code{t1} in local environment.}\n"
"\n"
msgstr ""

# type: group
#: lispref/compile.texi:878
#, no-wrap
msgid ""
"23  return                  ; @r{Return value of the top of stack.}\n"
"\n"
msgstr ""

# type: group
#: lispref/compile.texi:880
#, no-wrap
msgid "     @result{} nil\n"
msgstr ""

# type: ignore
#: lispref/compile.texi:886
#, no-wrap
msgid "   arch-tag: f78e3050-2f0a-4dee-be27-d9979a0a2289\n"
msgstr "   arch-tag: f78e3050-2f0a-4dee-be27-d9979a0a2289\n"

# type: menu
#: lispref/control.texi:7 lispref/control.texi:8 lispref/elisp.texi:126
#: lispref/eval.texi:7 lispref/variables.texi:7 lispref/vol1.texi:228
#: lispref/vol1.texi:425 lispref/vol2.texi:229 lispref/vol2.texi:426
#, no-wrap
msgid "Control Structures"
msgstr ""

# type: menu
#: lispref/control.texi:7 lispref/elisp.texi:126 lispref/functions.texi:7
#: lispref/variables.texi:7 lispref/variables.texi:8 lispref/vol1.texi:228
#: lispref/vol1.texi:448 lispref/vol2.texi:229 lispref/vol2.texi:449
#, no-wrap
msgid "Variables"
msgstr "Variables"

# type: menu
#: lispref/control.texi:7 lispref/edebug.texi:628 lispref/elisp.texi:126
#: lispref/eval.texi:7 lispref/eval.texi:8 lispref/symbols.texi:7
#: lispref/vol1.texi:228 lispref/vol1.texi:405 lispref/vol2.texi:229
#: lispref/vol2.texi:406
#, no-wrap
msgid "Evaluation"
msgstr "Evaluation"

# type: cindex
#: lispref/control.texi:9
#, no-wrap
msgid "special forms for control structures"
msgstr ""

# type: cindex
#: lispref/control.texi:10
#, no-wrap
msgid "control structures"
msgstr ""

# type: Plain text
#: lispref/control.texi:17
msgid ""
"A Lisp program consists of expressions or @dfn{forms} (@pxref{Forms}).  We "
"control the order of execution of these forms by enclosing them in @dfn"
"{control structures}.  Control structures are special forms which control "
"when, whether, or how many times to execute the forms they contain."
msgstr ""

# type: Plain text
#: lispref/control.texi:26
msgid ""
"The simplest order of execution is sequential execution: first form @var{a}, "
"then form @var{b}, and so on.  This is what happens when you write several "
"forms in succession in the body of a function, or at top level in a file of "
"Lisp code---the forms are executed in the order written.  We call this @dfn"
"{textual order}.  For example, if a function body consists of two forms @var"
"{a} and @var{b}, evaluation of the function evaluates first @var{a} and then "
"@var{b}.  The result of evaluating @var{b} becomes the value of the function."
msgstr ""

# type: Plain text
#: lispref/control.texi:29
msgid ""
"Explicit control structures make possible an order of execution other than "
"sequential."
msgstr ""

# type: Plain text
#: lispref/control.texi:36
msgid ""
"Emacs Lisp provides several kinds of control structure, including other "
"varieties of sequencing, conditionals, iteration, and (controlled)  jumps---"
"all discussed below.  The built-in control structures are special forms "
"since their subforms are not necessarily evaluated or not evaluated "
"sequentially.  You can use macros to define your own control structure "
"constructs (@pxref{Macros})."
msgstr ""

# type: menu
#: lispref/control.texi:43 lispref/control.texi:45 lispref/control.texi:46
#: lispref/eval.texi:472 lispref/vol1.texi:431 lispref/vol2.texi:432
#, no-wrap
msgid "Sequencing"
msgstr ""

# type: menu
#: lispref/control.texi:43 lispref/vol1.texi:431 lispref/vol2.texi:432
msgid "Evaluation in textual order."
msgstr ""

# type: menu
#: lispref/control.texi:43 lispref/control.texi:142 lispref/control.texi:143
#: lispref/eval.texi:436 lispref/eval.texi:457 lispref/vol1.texi:431
#: lispref/vol2.texi:432
#, no-wrap
msgid "Conditionals"
msgstr "Conditions"

# type: menu
#: lispref/control.texi:43
msgid "@code{if}, @code{cond}, @code{when}, @code{unless}."
msgstr "@code{if}, @code{cond}, @code{when}, @code{unless}."

# type: menu
#: lispref/control.texi:43 lispref/control.texi:291 lispref/eval.texi:430
#: lispref/eval.texi:467 lispref/vol1.texi:431 lispref/vol2.texi:432
#, no-wrap
msgid "Combining Conditions"
msgstr ""

# type: menu
#: lispref/control.texi:43 lispref/vol1.texi:431 lispref/vol2.texi:432
msgid "@code{and}, @code{or}, @code{not}."
msgstr "@code{and}, @code{or}, @code{not}."

# type: menu
#: lispref/control.texi:43 lispref/control.texi:415 lispref/control.texi:416
#: lispref/eval.texi:502 lispref/vol1.texi:431 lispref/vol2.texi:432
#, no-wrap
msgid "Iteration"
msgstr "Iteration"

# type: menu
#: lispref/control.texi:43 lispref/vol1.texi:431 lispref/vol2.texi:432
msgid "@code{while} loops."
msgstr "boucles @code{while}."

# type: menu
#: lispref/control.texi:43 lispref/control.texi:505 lispref/control.texi:506
#: lispref/eval.texi:499 lispref/vol1.texi:431 lispref/vol1.texi:433
#: lispref/vol2.texi:432 lispref/vol2.texi:434
#, no-wrap
msgid "Nonlocal Exits"
msgstr ""

# type: menu
#: lispref/control.texi:43 lispref/vol1.texi:431 lispref/vol2.texi:432
msgid "Jumping out of a sequence."
msgstr ""

# type: Plain text
#: lispref/control.texi:53
msgid ""
"Evaluating forms in the order they appear is the most common way control "
"passes from one form to another.  In some contexts, such as in a function "
"body, this happens automatically.  Elsewhere you must use a control "
"structure construct to do this: @code{progn}, the simplest control construct "
"of Lisp."
msgstr ""

# type: Plain text
#: lispref/control.texi:55
msgid "A @code{progn} special form looks like this:"
msgstr ""

# type: group
#: lispref/control.texi:59
#, no-wrap
msgid "(progn @var{a} @var{b} @var{c} @dots{})\n"
msgstr ""

# type: Plain text
#: lispref/control.texi:67
msgid ""
"and it says to execute the forms @var{a}, @var{b}, @var{c}, and so on, in "
"that order.  These forms are called the @dfn{body} of the @code{progn} "
"form.  The value of the last form in the body becomes the value of the "
"entire @code{progn}.  @code{(progn)} returns @code{nil}."
msgstr ""

# type: cindex
#: lispref/control.texi:68
#, no-wrap
msgid "implicit @code{progn}"
msgstr ""

# type: Plain text
#: lispref/control.texi:79
msgid ""
"In the early days of Lisp, @code{progn} was the only way to execute two or "
"more forms in succession and use the value of the last of them.  But "
"programmers found they often needed to use a @code{progn} in the body of a "
"function, where (at that time) only one form was allowed.  So the body of a "
"function was made into an ``implicit @code{progn}'': several forms are "
"allowed just as in the body of an actual @code{progn}.  Many other control "
"structures likewise contain an implicit @code{progn}.  As a result, @code"
"{progn} is not used as much as it was many years ago.  It is needed now most "
"often inside an @code{unwind-protect}, @code{and}, @code{or}, or in the @var"
"{then}-part of an @code{if}."
msgstr ""

# type: defspec
#: lispref/control.texi:80
#, no-wrap
msgid "progn forms@dots{}"
msgstr ""

# type: defspec
#: lispref/control.texi:83
msgid ""
"This special form evaluates all of the @var{forms}, in textual order, "
"returning the result of the final form."
msgstr ""

# type: group
#: lispref/control.texi:93
#, no-wrap
msgid ""
"(progn (print \"The first form\")\n"
"       (print \"The second form\")\n"
"       (print \"The third form\"))\n"
"     @print{} \"The first form\"\n"
"     @print{} \"The second form\"\n"
"     @print{} \"The third form\"\n"
"@result{} \"The third form\"\n"
msgstr ""

# type: Plain text
#: lispref/control.texi:99
msgid ""
"Two other control constructs likewise evaluate a series of forms but return "
"a different value:"
msgstr ""

# type: defspec
#: lispref/control.texi:100
#, no-wrap
msgid "prog1 form1 forms@dots{}"
msgstr ""

# type: defspec
#: lispref/control.texi:103
msgid ""
"This special form evaluates @var{form1} and all of the @var{forms}, in "
"textual order, returning the result of @var{form1}."
msgstr ""

# type: group
#: lispref/control.texi:113
#, no-wrap
msgid ""
"(prog1 (print \"The first form\")\n"
"       (print \"The second form\")\n"
"       (print \"The third form\"))\n"
"     @print{} \"The first form\"\n"
"     @print{} \"The second form\"\n"
"     @print{} \"The third form\"\n"
"@result{} \"The first form\"\n"
msgstr ""

# type: defspec
#: lispref/control.texi:118
msgid ""
"Here is a way to remove the first element from a list in the variable @code"
"{x}, then return the value of that former element:"
msgstr ""

# type: example
#: lispref/control.texi:121
#, no-wrap
msgid "(prog1 (car x) (setq x (cdr x)))\n"
msgstr ""

# type: defspec
#: lispref/control.texi:124
#, no-wrap
msgid "prog2 form1 form2 forms@dots{}"
msgstr ""

# type: defspec
#: lispref/control.texi:128
msgid ""
"This special form evaluates @var{form1}, @var{form2}, and all of the "
"following @var{forms}, in textual order, returning the result of @var{form2}."
msgstr ""

# type: group
#: lispref/control.texi:138
#, no-wrap
msgid ""
"(prog2 (print \"The first form\")\n"
"       (print \"The second form\")\n"
"       (print \"The third form\"))\n"
"     @print{} \"The first form\"\n"
"     @print{} \"The second form\"\n"
"     @print{} \"The third form\"\n"
"@result{} \"The second form\"\n"
msgstr ""

# type: cindex
#: lispref/control.texi:144
#, no-wrap
msgid "conditional evaluation"
msgstr "évaluation d'une condition"

# type: Plain text
#: lispref/control.texi:150
msgid ""
"Conditional control structures choose among alternatives.  Emacs Lisp has "
"four conditional forms: @code{if}, which is much the same as in other "
"languages; @code{when} and @code{unless}, which are variants of @code{if}; "
"and @code{cond}, which is a generalized case statement."
msgstr ""

# type: defspec
#: lispref/control.texi:151
#, no-wrap
msgid "if condition then-form else-forms@dots{}"
msgstr ""

# type: defspec
#: lispref/control.texi:158
msgid ""
"@code{if} chooses between the @var{then-form} and the @var{else-forms} based "
"on the value of @var{condition}.  If the evaluated @var{condition} is non-"
"@code{nil}, @var{then-form} is evaluated and the result returned.  "
"Otherwise, the @var{else-forms} are evaluated in textual order, and the "
"value of the last one is returned.  (The @var{else} part of @code{if} is an "
"example of an implicit @code{progn}.  @xref{Sequencing}.)"
msgstr ""

# type: defspec
#: lispref/control.texi:161
msgid ""
"If @var{condition} has the value @code{nil}, and no @var{else-forms} are "
"given, @code{if} returns @code{nil}."
msgstr ""

# type: defspec
#: lispref/control.texi:165
msgid ""
"@code{if} is a special form because the branch that is not selected is never "
"evaluated---it is ignored.  Thus, in the example below, @code{true} is not "
"printed because @code{print} is never called."
msgstr ""

# type: group
#: lispref/control.texi:172
#, no-wrap
msgid ""
"(if nil\n"
"    (print 'true)\n"
"  'very-false)\n"
"@result{} very-false\n"
msgstr ""

# type: defmac
#: lispref/control.texi:176
#, no-wrap
msgid "when condition then-forms@dots{}"
msgstr ""

# type: defmac
#: lispref/control.texi:179
msgid ""
"This is a variant of @code{if} where there are no @var{else-forms}, and "
"possibly several @var{then-forms}.  In particular,"
msgstr ""

# type: example
#: lispref/control.texi:182
#, no-wrap
msgid "(when @var{condition} @var{a} @var{b} @var{c})\n"
msgstr "(when @var{condition} @var{a} @var{b} @var{c})\n"

# type: defmac
#: lispref/control.texi:186 lispref/control.texi:201
msgid "is entirely equivalent to"
msgstr "est rigoureusement équivalent à :"

# type: example
#: lispref/control.texi:189
#, no-wrap
msgid "(if @var{condition} (progn @var{a} @var{b} @var{c}) nil)\n"
msgstr "(if @var{condition} (progn @var{a} @var{b} @var{c}) nil)\n"

# type: defmac
#: lispref/control.texi:192
#, no-wrap
msgid "unless condition forms@dots{}"
msgstr ""

# type: defmac
#: lispref/control.texi:194
msgid "This is a variant of @code{if} where there is no @var{then-form}:"
msgstr ""

# type: example
#: lispref/control.texi:197
#, no-wrap
msgid "(unless @var{condition} @var{a} @var{b} @var{c})\n"
msgstr ""

# type: example
#: lispref/control.texi:205
#, no-wrap
msgid ""
"(if @var{condition} nil\n"
"   @var{a} @var{b} @var{c})\n"
msgstr ""

# type: defspec
#: lispref/control.texi:208
#, no-wrap
msgid "cond clause@dots{}"
msgstr ""

# type: defspec
#: lispref/control.texi:213
msgid ""
"@code{cond} chooses among an arbitrary number of alternatives.  Each @var"
"{clause} in the @code{cond} must be a list.  The @sc{car} of this list is "
"the @var{condition}; the remaining elements, if any, the @var{body-forms}.  "
"Thus, a clause looks like this:"
msgstr ""

# type: example
#: lispref/control.texi:216
#, no-wrap
msgid "(@var{condition} @var{body-forms}@dots{})\n"
msgstr ""

# type: defspec
#: lispref/control.texi:223
msgid ""
"@code{cond} tries the clauses in textual order, by evaluating the @var"
"{condition} of each clause.  If the value of @var{condition} is non-@code"
"{nil}, the clause ``succeeds''; then @code{cond} evaluates its @var{body-"
"forms}, and the value of the last of @var{body-forms} becomes the value of "
"the @code{cond}.  The remaining clauses are ignored."
msgstr ""

# type: defspec
#: lispref/control.texi:227
msgid ""
"If the value of @var{condition} is @code{nil}, the clause ``fails,'' so the "
"@code{cond} moves on to the following clause, trying its @var{condition}."
msgstr ""

# type: defspec
#: lispref/control.texi:230
msgid ""
"If every @var{condition} evaluates to @code{nil}, so that every clause "
"fails, @code{cond} returns @code{nil}."
msgstr ""

# type: defspec
#: lispref/control.texi:232
msgid "A clause may also look like this:"
msgstr ""

# type: example
#: lispref/control.texi:235
#, no-wrap
msgid "(@var{condition})\n"
msgstr "(@var{condition})\n"

# type: defspec
#: lispref/control.texi:240
msgid ""
"Then, if @var{condition} is non-@code{nil} when tested, the value of @var"
"{condition} becomes the value of the @code{cond} form."
msgstr ""

# type: defspec
#: lispref/control.texi:244
msgid ""
"The following example has four clauses, which test for the cases where the "
"value of @code{x} is a number, string, buffer and symbol, respectively:"
msgstr ""

# type: group
#: lispref/control.texi:253
#, no-wrap
msgid ""
"(cond ((numberp x) x)\n"
"      ((stringp x) x)\n"
"      ((bufferp x)\n"
"       (setq temporary-hack x) ; @r{multiple body-forms}\n"
"       (buffer-name x))        ; @r{in one clause}\n"
"      ((symbolp x) (symbol-value x)))\n"
msgstr ""

# type: defspec
#: lispref/control.texi:262
msgid ""
"Often we want to execute the last clause whenever none of the previous "
"clauses was successful.  To do this, we use @code{t} as the @var{condition} "
"of the last clause, like this: @code{(t @var{body-forms})}.  The form @code"
"{t} evaluates to @code{t}, which is never @code{nil}, so this clause never "
"fails, provided the @code{cond} gets to it at all."
msgstr ""

# type: group
#: lispref/control.texi:271
#, no-wrap
msgid ""
"(setq a 5)\n"
"(cond ((eq a 'hack) 'foo)\n"
"      (t \"default\"))\n"
"@result{} \"default\"\n"
msgstr ""

# type: defspec
#: lispref/control.texi:277
msgid ""
"This @code{cond} expression returns @code{foo} if the value of @code{a} is "
"@code{hack}, and returns the string @code{\"default\"} otherwise."
msgstr ""

# type: Plain text
#: lispref/control.texi:282
msgid ""
"Any conditional construct can be expressed with @code{cond} or with @code"
"{if}.  Therefore, the choice between them is a matter of style.  For example:"
msgstr ""

# type: group
#: lispref/control.texi:288
#, no-wrap
msgid ""
"(if @var{a} @var{b} @var{c})\n"
"@equiv{}\n"
"(cond (@var{a} @var{b}) (t @var{c}))\n"
msgstr ""

# type: section
#: lispref/control.texi:292
#, no-wrap
msgid "Constructs for Combining Conditions"
msgstr ""

# type: Plain text
#: lispref/control.texi:298
msgid ""
"This section describes three constructs that are often used together with "
"@code{if} and @code{cond} to express complicated conditions.  The constructs "
"@code{and} and @code{or} can also be used individually as kinds of multiple "
"conditional constructs."
msgstr ""

# type: defun
#: lispref/control.texi:299
#, no-wrap
msgid "not condition"
msgstr ""

# type: defun
#: lispref/control.texi:304
msgid ""
"This function tests for the falsehood of @var{condition}.  It returns @code"
"{t} if @var{condition} is @code{nil}, and @code{nil} otherwise.  The "
"function @code{not} is identical to @code{null}, and we recommend using the "
"name @code{null} if you are testing for an empty list."
msgstr ""

# type: defspec
#: lispref/control.texi:306
#, no-wrap
msgid "and conditions@dots{}"
msgstr ""

# type: defspec
#: lispref/control.texi:310
msgid ""
"The @code{and} special form tests whether all the @var{conditions} are "
"true.  It works by evaluating the @var{conditions} one by one in the order "
"written."
msgstr ""

# type: defspec
#: lispref/control.texi:315
msgid ""
"If any of the @var{conditions} evaluates to @code{nil}, then the result of "
"the @code{and} must be @code{nil} regardless of the remaining @var"
"{conditions}; so @code{and} returns @code{nil} right away, ignoring the "
"remaining @var{conditions}."
msgstr ""

# type: defspec
#: lispref/control.texi:321
msgid ""
"If all the @var{conditions} turn out non-@code{nil}, then the value of the "
"last of them becomes the value of the @code{and} form.  Just @code{(and)}, "
"with no @var{conditions}, returns @code{t}, appropriate because all the @var"
"{conditions} turned out non-@code{nil}.  (Think about it; which one did not?)"
msgstr ""

# type: defspec
#: lispref/control.texi:326
msgid ""
"Here is an example.  The first condition returns the integer 1, which is not "
"@code{nil}.  Similarly, the second condition returns the integer 2, which is "
"not @code{nil}.  The third condition is @code{nil}, so the remaining "
"condition is never evaluated."
msgstr ""

# type: group
#: lispref/control.texi:333
#, no-wrap
msgid ""
"(and (print 1) (print 2) nil (print 3))\n"
"     @print{} 1\n"
"     @print{} 2\n"
"@result{} nil\n"
msgstr ""

# type: defspec
#: lispref/control.texi:337
msgid "Here is a more realistic example of using @code{and}:"
msgstr ""

# type: group
#: lispref/control.texi:342
#, no-wrap
msgid ""
"(if (and (consp foo) (eq (car foo) 'x))\n"
"    (message \"foo is a list starting with x\"))\n"
msgstr ""

# type: defspec
#: lispref/control.texi:348
msgid ""
"Note that @code{(car foo)} is not executed if @code{(consp foo)} returns "
"@code{nil}, thus avoiding an error."
msgstr ""

# type: defspec
#: lispref/control.texi:351
msgid ""
"@code{and} expressions can also be written using either @code{if} or @code"
"{cond}.  Here's how:"
msgstr ""

# type: group
#: lispref/control.texi:359
#, no-wrap
msgid ""
"(and @var{arg1} @var{arg2} @var{arg3})\n"
"@equiv{}\n"
"(if @var{arg1} (if @var{arg2} @var{arg3}))\n"
"@equiv{}\n"
"(cond (@var{arg1} (cond (@var{arg2} @var{arg3}))))\n"
msgstr ""

# type: defspec
#: lispref/control.texi:363
#, no-wrap
msgid "or conditions@dots{}"
msgstr ""

# type: defspec
#: lispref/control.texi:367
msgid ""
"The @code{or} special form tests whether at least one of the @var"
"{conditions} is true.  It works by evaluating all the @var{conditions} one "
"by one in the order written."
msgstr ""

# type: defspec
#: lispref/control.texi:372
msgid ""
"If any of the @var{conditions} evaluates to a non-@code{nil} value, then the "
"result of the @code{or} must be non-@code{nil}; so @code{or} returns right "
"away, ignoring the remaining @var{conditions}.  The value it returns is the "
"non-@code{nil} value of the condition just evaluated."
msgstr ""

# type: defspec
#: lispref/control.texi:378
msgid ""
"If all the @var{conditions} turn out @code{nil}, then the @code{or} "
"expression returns @code{nil}.  Just @code{(or)}, with no @var{conditions}, "
"returns @code{nil}, appropriate because all the @var{conditions} turned out "
"@code{nil}.  (Think about it; which one did not?)"
msgstr ""

# type: defspec
#: lispref/control.texi:381
msgid ""
"For example, this expression tests whether @code{x} is either @code{nil} or "
"the integer zero:"
msgstr ""

# type: example
#: lispref/control.texi:384
#, no-wrap
msgid "(or (eq x nil) (eq x 0))\n"
msgstr ""

# type: defspec
#: lispref/control.texi:388
msgid ""
"Like the @code{and} construct, @code{or} can be written in terms of @code"
"{cond}.  For example:"
msgstr ""

# type: group
#: lispref/control.texi:396
#, no-wrap
msgid ""
"(or @var{arg1} @var{arg2} @var{arg3})\n"
"@equiv{}\n"
"(cond (@var{arg1})\n"
"      (@var{arg2})\n"
"      (@var{arg3}))\n"
msgstr ""

# type: defspec
#: lispref/control.texi:400
msgid "You could almost write @code{or} in terms of @code{if}, but not quite:"
msgstr ""

# type: group
#: lispref/control.texi:406
#, no-wrap
msgid ""
"(if @var{arg1} @var{arg1}\n"
"  (if @var{arg2} @var{arg2}\n"
"    @var{arg3}))\n"
msgstr ""

# type: defspec
#: lispref/control.texi:413
msgid ""
"This is not completely equivalent because it can evaluate @var{arg1} or @var"
"{arg2} twice.  By contrast, @code{(or @var{arg1} @var{arg2} @var{arg3})} "
"never evaluates any argument more than once."
msgstr ""

# type: cindex
#: lispref/control.texi:417
#, no-wrap
msgid "iteration"
msgstr ""

# type: cindex
#: lispref/control.texi:418
#, no-wrap
msgid "recursion"
msgstr ""

# type: Plain text
#: lispref/control.texi:424
msgid ""
"Iteration means executing part of a program repetitively.  For example, you "
"might want to repeat some computation once for each element of a list, or "
"once for each integer from 0 to @var{n}.  You can do this in Emacs Lisp with "
"the special form @code{while}:"
msgstr ""

# type: defspec
#: lispref/control.texi:425
#, no-wrap
msgid "while condition forms@dots{}"
msgstr ""

# type: defspec
#: lispref/control.texi:431
msgid ""
"@code{while} first evaluates @var{condition}.  If the result is non-@code"
"{nil}, it evaluates @var{forms} in textual order.  Then it reevaluates @var"
"{condition}, and if the result is non-@code{nil}, it evaluates @var{forms} "
"again.  This process repeats until @var{condition} evaluates to @code{nil}."
msgstr ""

# type: defspec
#: lispref/control.texi:435
msgid ""
"There is no limit on the number of iterations that may occur.  The loop will "
"continue until either @var{condition} evaluates to @code{nil} or until an "
"error or @code{throw} jumps out of it (@pxref{Nonlocal Exits})."
msgstr ""

# type: defspec
#: lispref/control.texi:437
msgid "The value of a @code{while} form is always @code{nil}."
msgstr ""

# type: group
#: lispref/control.texi:442
#, no-wrap
msgid ""
"(setq num 0)\n"
"     @result{} 0\n"
msgstr ""

# type: group
#: lispref/control.texi:452
#, no-wrap
msgid ""
"(while (< num 4)\n"
"  (princ (format \"Iteration %d.\" num))\n"
"  (setq num (1+ num)))\n"
"     @print{} Iteration 0.\n"
"     @print{} Iteration 1.\n"
"     @print{} Iteration 2.\n"
"     @print{} Iteration 3.\n"
"     @result{} nil\n"
msgstr ""

# type: defspec
#: lispref/control.texi:459
msgid ""
"To write a ``repeat...until'' loop, which will execute something on each "
"iteration and then do the end-test, put the body followed by the end-test in "
"a @code{progn} as the first argument of @code{while}, as shown here:"
msgstr ""

# type: group
#: lispref/control.texi:465
#, no-wrap
msgid ""
"(while (progn\n"
"         (forward-line 1)\n"
"         (not (looking-at \"^$\"))))\n"
msgstr ""

# type: defspec
#: lispref/control.texi:472
msgid ""
"This moves forward one line and continues moving by lines until it reaches "
"an empty line.  It is peculiar in that the @code{while} has no body, just "
"the end test (which also does the real work of moving point)."
msgstr ""

# type: Plain text
#: lispref/control.texi:476
msgid ""
"The @code{dolist} and @code{dotimes} macros provide convenient ways to write "
"two common kinds of loops."
msgstr ""

# type: defmac
#: lispref/control.texi:477
#, no-wrap
msgid "dolist (var list [result]) body@dots{}"
msgstr ""

# type: defmac
#: lispref/control.texi:483
msgid ""
"This construct executes @var{body} once for each element of @var{list}, "
"binding the variable @var{var} locally to hold the current element.  Then it "
"returns the value of evaluating @var{result}, or @code{nil} if @var{result} "
"is omitted.  For example, here is how you could use @code{dolist} to define "
"the @code{reverse} function:"
msgstr ""

# type: example
#: lispref/control.texi:489
#, no-wrap
msgid ""
"(defun reverse (list)\n"
"  (let (value)\n"
"    (dolist (elt list value)\n"
"      (setq value (cons elt value)))))\n"
msgstr ""

# type: defmac
#: lispref/control.texi:492
#, no-wrap
msgid "dotimes (var count [result]) body@dots{}"
msgstr ""

# type: defmac
#: lispref/control.texi:498
msgid ""
"This construct executes @var{body} once for each integer from 0 (inclusive) "
"to @var{count} (exclusive), binding the variable @var{var} to the integer "
"for the current iteration.  Then it returns the value of evaluating @var"
"{result}, or @code{nil} if @var{result} is omitted.  Here is an example of "
"using @code{dotimes} to do something 100 times:"
msgstr ""

# type: example
#: lispref/control.texi:502
#, no-wrap
msgid ""
"(dotimes (i 100)\n"
"  (insert \"I will not obey absurd orders\\n\"))\n"
msgstr ""

# type: cindex
#: lispref/control.texi:507
#, no-wrap
msgid "nonlocal exits"
msgstr ""

# type: Plain text
#: lispref/control.texi:514
msgid ""
"A @dfn{nonlocal exit} is a transfer of control from one point in a program "
"to another remote point.  Nonlocal exits can occur in Emacs Lisp as a result "
"of errors; you can also use them under explicit control.  Nonlocal exits "
"unbind all variable bindings made by the constructs being exited."
msgstr ""

# type: menu
#: lispref/control.texi:520 lispref/control.texi:522 lispref/eval.texi:433
#: lispref/vol1.texi:439 lispref/vol2.texi:440
#, no-wrap
msgid "Catch and Throw"
msgstr ""

# type: menu
#: lispref/control.texi:520 lispref/vol1.texi:439 lispref/vol2.texi:440
msgid "Nonlocal exits for the program's own purposes."
msgstr ""

# type: menu
#: lispref/control.texi:520 lispref/control.texi:622 lispref/vol1.texi:439
#: lispref/vol2.texi:440
#, no-wrap
msgid "Examples of Catch"
msgstr ""

# type: menu
#: lispref/control.texi:520 lispref/vol1.texi:439 lispref/vol2.texi:440
msgid "Showing how such nonlocal exits can be written."
msgstr ""

# type: menu
#: lispref/control.texi:520 lispref/control.texi:697 lispref/control.texi:698
#: lispref/vol1.texi:439 lispref/vol1.texi:441 lispref/vol2.texi:440
#: lispref/vol2.texi:442
#, no-wrap
msgid "Errors"
msgstr ""

# type: menu
#: lispref/control.texi:520 lispref/vol1.texi:439 lispref/vol2.texi:440
msgid "How errors are signaled and handled."
msgstr ""

# type: menu
#: lispref/control.texi:520 lispref/control.texi:1174 lispref/vol1.texi:439
#: lispref/vol2.texi:440
#, no-wrap
msgid "Cleanups"
msgstr ""

# type: menu
#: lispref/control.texi:520
msgid "Arranging to run a cleanup form if an error happens."
msgstr ""

# type: subsection
#: lispref/control.texi:523
#, no-wrap
msgid "Explicit Nonlocal Exits: @code{catch} and @code{throw}"
msgstr ""

# type: Plain text
#: lispref/control.texi:531
msgid ""
"Most control constructs affect only the flow of control within the construct "
"itself.  The function @code{throw} is the exception to this rule of normal "
"program execution: it performs a nonlocal exit on request.  (There are other "
"exceptions, but they are for error handling only.)  @code{throw} is used "
"inside a @code{catch}, and jumps back to that @code{catch}.  For example:"
msgstr ""

# type: group
#: lispref/control.texi:537
#, no-wrap
msgid ""
"(defun foo-outer ()\n"
"  (catch 'foo\n"
"    (foo-inner)))\n"
"\n"
msgstr ""

# type: group
#: lispref/control.texi:543
#, no-wrap
msgid ""
"(defun foo-inner ()\n"
"  @dots{}\n"
"  (if x\n"
"      (throw 'foo t))\n"
"  @dots{})\n"
msgstr ""

# type: Plain text
#: lispref/control.texi:551
msgid ""
"The @code{throw} form, if executed, transfers control straight back to the "
"corresponding @code{catch}, which returns immediately.  The code following "
"the @code{throw} is not executed.  The second argument of @code{throw} is "
"used as the return value of the @code{catch}."
msgstr ""

# type: Plain text
#: lispref/control.texi:560
msgid ""
"The function @code{throw} finds the matching @code{catch} based on the first "
"argument: it searches for a @code{catch} whose first argument is @code{eq} "
"to the one specified in the @code{throw}.  If there is more than one "
"applicable @code{catch}, the innermost one takes precedence.  Thus, in the "
"above example, the @code{throw} specifies @code{foo}, and the @code{catch} "
"in @code{foo-outer} specifies the same symbol, so that @code{catch} is the "
"applicable one (assuming there is no other matching @code{catch} in between)."
msgstr ""

# type: Plain text
#: lispref/control.texi:572
msgid ""
"Executing @code{throw} exits all Lisp constructs up to the matching @code"
"{catch}, including function calls.  When binding constructs such as @code"
"{let} or function calls are exited in this way, the bindings are unbound, "
"just as they are when these constructs exit normally (@pxref{Local "
"Variables}).  Likewise, @code{throw} restores the buffer and position saved "
"by @code{save-excursion} (@pxref{Excursions}), and the narrowing status "
"saved by @code{save-restriction} and the window selection saved by @code"
"{save-window-excursion} (@pxref{Window Configurations}).  It also runs any "
"cleanups established with the @code{unwind-protect} special form when it "
"exits that form (@pxref{Cleanups})."
msgstr ""

# type: Plain text
#: lispref/control.texi:580
msgid ""
"The @code{throw} need not appear lexically within the @code{catch} that it "
"jumps to.  It can equally well be called from another function called within "
"the @code{catch}.  As long as the @code{throw} takes place chronologically "
"after entry to the @code{catch}, and chronologically before exit from it, it "
"has access to that @code{catch}.  This is why @code{throw} can be used in "
"commands such as @code{exit-recursive-edit} that throw back to the editor "
"command loop (@pxref{Recursive Editing})."
msgstr ""

# type: cindex
#: lispref/control.texi:581
#, no-wrap
msgid "CL note---only @code{throw} in Emacs"
msgstr ""

# type: quotation
#: lispref/control.texi:587
msgid ""
"@b{Common Lisp note:} Most other versions of Lisp, including Common Lisp, "
"have several ways of transferring control nonsequentially: @code{return}, "
"@code{return-from}, and @code{go}, for example.  Emacs Lisp has only @code"
"{throw}."
msgstr ""

# type: defspec
#: lispref/control.texi:589
#, no-wrap
msgid "catch tag body@dots{}"
msgstr ""

# type: cindex
#: lispref/control.texi:590
#, no-wrap
msgid "tag on run time stack"
msgstr ""

# type: defspec
#: lispref/control.texi:595
msgid ""
"@code{catch} establishes a return point for the @code{throw} function.  The "
"return point is distinguished from other such return points by @var{tag}, "
"which may be any Lisp object except @code{nil}.  The argument @var{tag} is "
"evaluated normally before the return point is established."
msgstr ""

# type: defspec
#: lispref/control.texi:600
msgid ""
"With the return point in effect, @code{catch} evaluates the forms of the @var"
"{body} in textual order.  If the forms execute normally (without error or "
"nonlocal exit) the value of the last body form is returned from the @code"
"{catch}."
msgstr ""

# type: defspec
#: lispref/control.texi:605
msgid ""
"If a @code{throw} is executed during the execution of @var{body}, specifying "
"the same value @var{tag}, the @code{catch} form exits immediately; the value "
"it returns is whatever was specified as the second argument of @code{throw}."
msgstr ""

# type: defun
#: lispref/control.texi:607
#, no-wrap
msgid "throw tag value"
msgstr ""

# type: defun
#: lispref/control.texi:613
msgid ""
"The purpose of @code{throw} is to return from a return point previously "
"established with @code{catch}.  The argument @var{tag} is used to choose "
"among the various existing return points; it must be @code{eq} to the value "
"specified in the @code{catch}.  If multiple return points match @var{tag}, "
"the innermost one is used."
msgstr ""

# type: defun
#: lispref/control.texi:616
msgid ""
"The argument @var{value} is used as the value to return from that @code"
"{catch}."
msgstr ""

# type: item
#: lispref/control.texi:617 lispref/errors.texi:131
#, no-wrap
msgid "no-catch"
msgstr ""

# type: defun
#: lispref/control.texi:620
msgid ""
"If no return point is in effect with tag @var{tag}, then a @code{no-catch} "
"error is signaled with data @code{(@var{tag} @var{value})}."
msgstr ""

# type: subsection
#: lispref/control.texi:623
#, no-wrap
msgid "Examples of @code{catch} and @code{throw}"
msgstr ""

# type: Plain text
#: lispref/control.texi:629
msgid ""
"One way to use @code{catch} and @code{throw} is to exit from a doubly nested "
"loop.  (In most languages, this would be done with a ``go to.'')  Here we "
"compute @code{(foo @var{i} @var{j})} for @var{i} and @var{j} varying from 0 "
"to 9:"
msgstr ""

# type: group
#: lispref/control.texi:642
#, no-wrap
msgid ""
"(defun search-foo ()\n"
"  (catch 'loop\n"
"    (let ((i 0))\n"
"      (while (< i 10)\n"
"        (let ((j 0))\n"
"          (while (< j 10)\n"
"            (if (foo i j)\n"
"                (throw 'loop (list i j)))\n"
"            (setq j (1+ j))))\n"
"        (setq i (1+ i))))))\n"
msgstr ""

# type: Plain text
#: lispref/control.texi:650
msgid ""
"If @code{foo} ever returns non-@code{nil}, we stop immediately and return a "
"list of @var{i} and @var{j}.  If @code{foo} always returns @code{nil}, the "
"@code{catch} returns normally, and the value is @code{nil}, since that is "
"the result of the @code{while}."
msgstr ""

# type: Plain text
#: lispref/control.texi:654
msgid ""
"Here are two tricky examples, slightly different, showing two return points "
"at once.  First, two return points with the same tag, @code{hack}:"
msgstr ""

# type: group
#: lispref/control.texi:661
#, no-wrap
msgid ""
"(defun catch2 (tag)\n"
"  (catch tag\n"
"    (throw 'hack 'yes)))\n"
"@result{} catch2\n"
msgstr ""

# type: group
#: lispref/control.texi:669
#, no-wrap
msgid ""
"(catch 'hack\n"
"  (print (catch2 'hack))\n"
"  'no)\n"
"@print{} yes\n"
"@result{} no\n"
msgstr ""

# type: Plain text
#: lispref/control.texi:678
msgid ""
"Since both return points have tags that match the @code{throw}, it goes to "
"the inner one, the one established in @code{catch2}.  Therefore, @code"
"{catch2} returns normally with value @code{yes}, and this value is printed.  "
"Finally the second body form in the outer @code{catch}, which is @code{'no}, "
"is evaluated and returned from the outer @code{catch}."
msgstr ""

# type: Plain text
#: lispref/control.texi:680
msgid "Now let's change the argument given to @code{catch2}:"
msgstr ""

# type: group
#: lispref/control.texi:687
#, no-wrap
msgid ""
"(catch 'hack\n"
"  (print (catch2 'quux))\n"
"  'no)\n"
"@result{} yes\n"
msgstr ""

# type: Plain text
#: lispref/control.texi:696
msgid ""
"We still have two return points, but this time only the outer one has the "
"tag @code{hack}; the inner one has the tag @code{quux} instead.  Therefore, "
"@code{throw} makes the outer @code{catch} return the value @code{yes}.  The "
"function @code{print} is never called, and the body-form @code{'no} is never "
"evaluated."
msgstr ""

# type: cindex
#: lispref/control.texi:699
#, no-wrap
msgid "errors"
msgstr ""

# type: Plain text
#: lispref/control.texi:703
msgid ""
"When Emacs Lisp attempts to evaluate a form that, for some reason, cannot be "
"evaluated, it @dfn{signals} an @dfn{error}."
msgstr ""

# type: Plain text
#: lispref/control.texi:708
msgid ""
"When an error is signaled, Emacs's default reaction is to print an error "
"message and terminate execution of the current command.  This is the right "
"thing to do in most cases, such as if you type @kbd{C-f} at the end of the "
"buffer."
msgstr ""

# type: Plain text
#: lispref/control.texi:718
msgid ""
"In complicated programs, simple termination may not be what you want.  For "
"example, the program may have made temporary changes in data structures, or "
"created temporary buffers that should be deleted before the program is "
"finished.  In such cases, you would use @code{unwind-protect} to establish "
"@dfn{cleanup expressions} to be evaluated in case of error.  (@xref"
"{Cleanups}.)  Occasionally, you may wish the program to continue execution "
"despite an error in a subroutine.  In these cases, you would use @code"
"{condition-case} to establish @dfn{error handlers} to recover control in "
"case of error."
msgstr ""

# type: Plain text
#: lispref/control.texi:722
msgid ""
"Resist the temptation to use error handling to transfer control from one "
"part of the program to another; use @code{catch} and @code{throw} instead.  "
"@xref{Catch and Throw}."
msgstr ""

# type: menu
#: lispref/control.texi:728 lispref/control.texi:730 lispref/vol1.texi:446
#: lispref/vol2.texi:447
#, no-wrap
msgid "Signaling Errors"
msgstr ""

# type: menu
#: lispref/control.texi:728 lispref/vol1.texi:446 lispref/vol2.texi:447
msgid "How to report an error."
msgstr ""

# type: menu
#: lispref/control.texi:728 lispref/control.texi:837 lispref/vol1.texi:446
#: lispref/vol2.texi:447
#, no-wrap
msgid "Processing of Errors"
msgstr ""

# type: menu
#: lispref/control.texi:728 lispref/vol1.texi:446 lispref/vol2.texi:447
msgid "What Emacs does when you report an error."
msgstr ""

# type: menu
#: lispref/control.texi:728 lispref/control.texi:873 lispref/eval.texi:439
#: lispref/vol1.texi:446 lispref/vol2.texi:447
#, no-wrap
msgid "Handling Errors"
msgstr ""

# type: menu
#: lispref/control.texi:728 lispref/vol1.texi:446 lispref/vol2.texi:447
msgid "How you can trap errors and continue execution."
msgstr ""

# type: menu
#: lispref/control.texi:728 lispref/control.texi:1073 lispref/vol1.texi:446
#: lispref/vol2.texi:447
#, no-wrap
msgid "Error Symbols"
msgstr ""

# type: menu
#: lispref/control.texi:728 lispref/vol1.texi:446 lispref/vol2.texi:447
msgid "How errors are classified for trapping them."
msgstr ""

# type: subsubsection
#: lispref/control.texi:731
#, no-wrap
msgid "How to Signal an Error"
msgstr ""

# type: cindex
#: lispref/control.texi:732
#, no-wrap
msgid "signaling errors"
msgstr ""

# type: Plain text
#: lispref/control.texi:739
msgid ""
"@dfn{Signaling} an error means beginning error processing.  Error processing "
"normally aborts all or part of the running program and returns to a point "
"that is set up to handle the error (@pxref{Processing of Errors}).  Here we "
"describe how to signal an error."
msgstr ""

# type: Plain text
#: lispref/control.texi:745
msgid ""
"Most errors are signaled ``automatically'' within Lisp primitives which you "
"call for other purposes, such as if you try to take the @sc{car} of an "
"integer or move forward a character at the end of the buffer.  You can also "
"signal errors explicitly with the functions @code{error} and @code{signal}."
msgstr ""

# type: Plain text
#: lispref/control.texi:749
msgid ""
"Quitting, which happens when the user types @kbd{C-g}, is not considered an "
"error, but it is handled almost like an error.  @xref{Quitting}."
msgstr ""

# type: Plain text
#: lispref/control.texi:755
msgid ""
"Every error specifies an error message, one way or another.  The message "
"should state what is wrong (``File does not exist''), not how things ought "
"to be (``File must exist'').  The convention in Emacs Lisp is that error "
"messages should start with a capital letter, but should not end with any "
"sort of punctuation."
msgstr ""

# type: defun
#: lispref/control.texi:756
#, no-wrap
msgid "error format-string &rest args"
msgstr ""

# type: defun
#: lispref/control.texi:760
msgid ""
"This function signals an error with an error message constructed by applying "
"@code{format} (@pxref{Formatting Strings}) to @var{format-string} and @var"
"{args}."
msgstr ""

# type: defun
#: lispref/control.texi:762
msgid "These examples show typical uses of @code{error}:"
msgstr ""

# type: group
#: lispref/control.texi:767
#, no-wrap
msgid ""
"(error \"That is an error -- try something else\")\n"
"     @error{} That is an error -- try something else\n"
msgstr ""

# type: group
#: lispref/control.texi:772
#, no-wrap
msgid ""
"(error \"You have committed %d errors\" 10)\n"
"     @error{} You have committed 10 errors\n"
msgstr ""

# type: defun
#: lispref/control.texi:778
msgid ""
"@code{error} works by calling @code{signal} with two arguments: the error "
"symbol @code{error}, and a list containing the string returned by @code"
"{format}."
msgstr ""

# type: defun
#: lispref/control.texi:783
msgid ""
"@strong{Warning:} If you want to use your own string as an error message "
"verbatim, don't just write @code{(error @var{string})}.  If @var{string} "
"contains @samp{%}, it will be interpreted as a format specifier, with "
"undesirable results.  Instead, use @code{(error \"%s\" @var{string})}."
msgstr ""

# type: defun
#: lispref/control.texi:785
#, no-wrap
msgid "signal error-symbol data"
msgstr ""

# type: anchor{#1}
#: lispref/control.texi:790
msgid "Definition of signal"
msgstr ""

# type: defun
#: lispref/control.texi:790
msgid ""
"This function signals an error named by @var{error-symbol}.  The argument "
"@var{data} is a list of additional Lisp objects relevant to the "
"circumstances of the error."
msgstr ""

# type: defun
#: lispref/control.texi:796
msgid ""
"The argument @var{error-symbol} must be an @dfn{error symbol}---a symbol "
"bearing a property @code{error-conditions} whose value is a list of "
"condition names.  This is how Emacs Lisp classifies different sorts of "
"errors. @xref{Error Symbols}, for a description of error symbols, error "
"conditions and condition names."
msgstr ""

# type: defun
#: lispref/control.texi:804
msgid ""
"If the error is not handled, the two arguments are used in printing the "
"error message.  Normally, this error message is provided by the @code{error-"
"message} property of @var{error-symbol}.  If @var{data} is non-@code{nil}, "
"this is followed by a colon and a comma separated list of the unevaluated "
"elements of @var{data}.  For @code{error}, the error message is the @sc{car} "
"of @var{data} (that must be a string).  Subcategories of @code{file-error} "
"are handled specially."
msgstr ""

# type: defun
#: lispref/control.texi:809
msgid ""
"The number and significance of the objects in @var{data} depends on @var"
"{error-symbol}.  For example, with a @code{wrong-type-arg} error, there "
"should be two objects in the list: a predicate that describes the type that "
"was expected, and the object that failed to fit that type."
msgstr ""

# type: defun
#: lispref/control.texi:814
msgid ""
"Both @var{error-symbol} and @var{data} are available to any error handlers "
"that handle the error: @code{condition-case} binds a local variable to a "
"list of the form @code{(@var{error-symbol} .@: @var{data})} (@pxref{Handling "
"Errors})."
msgstr ""

# type: defun
#: lispref/control.texi:817
msgid ""
"The function @code{signal} never returns (though in older Emacs versions it "
"could sometimes return)."
msgstr ""

# type: group
#: lispref/control.texi:822
#, no-wrap
msgid ""
"(signal 'wrong-number-of-arguments '(x y))\n"
"     @error{} Wrong number of arguments: x, y\n"
msgstr ""

# type: group
#: lispref/control.texi:827
#, no-wrap
msgid ""
"(signal 'no-such-error '(\"My unknown error condition\"))\n"
"     @error{} peculiar error: \"My unknown error condition\"\n"
msgstr ""

# type: cindex
#: lispref/control.texi:831
#, no-wrap
msgid "CL note---no continuable errors"
msgstr ""

# type: quotation
#: lispref/control.texi:835
msgid ""
"@b{Common Lisp note:} Emacs Lisp has nothing like the Common Lisp concept of "
"continuable errors."
msgstr ""

# type: subsubsection
#: lispref/control.texi:838
#, no-wrap
msgid "How Emacs Processes Errors"
msgstr ""

# type: Plain text
#: lispref/control.texi:848
msgid ""
"When an error is signaled, @code{signal} searches for an active @dfn"
"{handler} for the error.  A handler is a sequence of Lisp expressions "
"designated to be executed if an error happens in part of the Lisp program.  "
"If the error has an applicable handler, the handler is executed, and control "
"resumes following the handler.  The handler executes in the environment of "
"the @code{condition-case} that established it; all functions called within "
"that @code{condition-case} have already been exited, and the handler cannot "
"return to them."
msgstr ""

# type: Plain text
#: lispref/control.texi:855
msgid ""
"If there is no applicable handler for the error, it terminates the current "
"command and returns control to the editor command loop.  (The command loop "
"has an implicit handler for all kinds of errors.)  The command loop's "
"handler uses the error symbol and associated data to print an error "
"message.  You can use the variable @code{command-error-function} to control "
"how this is done:"
msgstr ""

# type: defvar
#: lispref/control.texi:856
#, no-wrap
msgid "command-error-function"
msgstr ""

# type: defvar
#: lispref/control.texi:864
msgid ""
"This variable, if non-@code{nil}, specifies a function to use to handle "
"errors that return control to the Emacs command loop.  The function should "
"take three arguments: @var{data}, a list of the same form that @code"
"{condition-case} would bind to its variable; @var{context}, a string "
"describing the situation in which the error occurred, or (more often) @code"
"{nil}; and @var{caller}, the Lisp function which called the primitive that "
"signaled the error."
msgstr ""

# type: cindex
#: lispref/control.texi:866
#, no-wrap
msgid "@code{debug-on-error} use"
msgstr ""

# type: Plain text
#: lispref/control.texi:872
msgid ""
"An error that has no explicit handler may call the Lisp debugger.  The "
"debugger is enabled if the variable @code{debug-on-error} (@pxref{Error "
"Debugging}) is non-@code{nil}.  Unlike error handlers, the debugger runs in "
"the environment of the error, so that you can examine values of variables "
"precisely as they were at the time of the error."
msgstr ""

# type: subsubsection
#: lispref/control.texi:874
#, no-wrap
msgid "Writing Code to Handle Errors"
msgstr ""

# type: cindex
#: lispref/control.texi:875
#, no-wrap
msgid "error handler"
msgstr ""

# type: cindex
#: lispref/control.texi:876
#, no-wrap
msgid "handling errors"
msgstr ""

# type: Plain text
#: lispref/control.texi:883
msgid ""
"The usual effect of signaling an error is to terminate the command that is "
"running and return immediately to the Emacs editor command loop.  You can "
"arrange to trap errors occurring in a part of your program by establishing "
"an error handler, with the special form @code{condition-case}.  A simple "
"example looks like this:"
msgstr ""

# type: group
#: lispref/control.texi:889
#, no-wrap
msgid ""
"(condition-case nil\n"
"    (delete-file filename)\n"
"  (error nil))\n"
msgstr ""

# type: Plain text
#: lispref/control.texi:895
msgid ""
"This deletes the file named @var{filename}, catching any error and returning "
"@code{nil} if an error occurs."
msgstr ""

# type: Plain text
#: lispref/control.texi:906
msgid ""
"The second argument of @code{condition-case} is called the @dfn{protected "
"form}.  (In the example above, the protected form is a call to @code{delete-"
"file}.)  The error handlers go into effect when this form begins execution "
"and are deactivated when this form returns.  They remain in effect for all "
"the intervening time.  In particular, they are in effect during the "
"execution of functions called by this form, in their subroutines, and so "
"on.  This is a good thing, since, strictly speaking, errors can be signaled "
"only by Lisp primitives (including @code{signal} and @code{error}) called by "
"the protected form, not by the protected form itself."
msgstr ""

# type: Plain text
#: lispref/control.texi:914
msgid ""
"The arguments after the protected form are handlers.  Each handler lists one "
"or more @dfn{condition names} (which are symbols) to specify which errors it "
"will handle.  The error symbol specified when an error is signaled also "
"defines a list of condition names.  A handler applies to an error if they "
"have any condition names in common.  In the example above, there is one "
"handler, and it specifies one condition name, @code{error}, which covers all "
"errors."
msgstr ""

# type: Plain text
#: lispref/control.texi:919
msgid ""
"The search for an applicable handler checks all the established handlers "
"starting with the most recently established one.  Thus, if two nested @code"
"{condition-case} forms offer to handle the same error, the inner of the two "
"gets to handle it."
msgstr ""

# type: Plain text
#: lispref/control.texi:926
msgid ""
"If an error is handled by some @code{condition-case} form, this ordinarily "
"prevents the debugger from being run, even if @code{debug-on-error} says "
"this error should invoke the debugger.  @xref{Error Debugging}.  If you want "
"to be able to debug errors that are caught by a @code{condition-case}, set "
"the variable @code{debug-on-signal} to a non-@code{nil} value."
msgstr ""

# type: Plain text
#: lispref/control.texi:932
msgid ""
"When an error is handled, control returns to the handler.  Before this "
"happens, Emacs unbinds all variable bindings made by binding constructs that "
"are being exited and executes the cleanups of all @code{unwind-protect} "
"forms that are exited.  Once control arrives at the handler, the body of the "
"handler is executed."
msgstr ""

# type: Plain text
#: lispref/control.texi:939
msgid ""
"After execution of the handler body, execution returns from the @code"
"{condition-case} form.  Because the protected form is exited completely "
"before execution of the handler, the handler cannot resume execution at the "
"point of the error, nor can it examine variable bindings that were made "
"within the protected form.  All it can do is clean up and proceed."
msgstr ""

# type: Plain text
#: lispref/control.texi:945
msgid ""
"The @code{condition-case} construct is often used to trap errors that are "
"predictable, such as failure to open a file in a call to @code{insert-file-"
"contents}.  It is also used to trap errors that are totally unpredictable, "
"such as when the program evaluates an expression read from the user."
msgstr ""

# type: Plain text
#: lispref/control.texi:952
msgid ""
"Error signaling and handling have some resemblance to @code{throw} and @code"
"{catch} (@pxref{Catch and Throw}), but they are entirely separate "
"facilities.  An error cannot be caught by a @code{catch}, and a @code{throw} "
"cannot be handled by an error handler (though using @code{throw} when there "
"is no suitable @code{catch} signals an error that can be handled)."
msgstr ""

# type: defspec
#: lispref/control.texi:953
#, no-wrap
msgid "condition-case var protected-form handlers@dots{}"
msgstr ""

# type: defspec
#: lispref/control.texi:960
msgid ""
"This special form establishes the error handlers @var{handlers} around the "
"execution of @var{protected-form}.  If @var{protected-form} executes without "
"error, the value it returns becomes the value of the @code{condition-case} "
"form; in this case, the @code{condition-case} has no effect.  The @code"
"{condition-case} form makes a difference when an error occurs during @var"
"{protected-form}."
msgstr ""

# type: defspec
#: lispref/control.texi:966
msgid ""
"Each of the @var{handlers} is a list of the form @code{(@var{conditions} @var"
"{body}@dots{})}.  Here @var{conditions} is an error condition name to be "
"handled, or a list of condition names; @var{body} is one or more Lisp "
"expressions to be executed when this handler handles an error.  Here are "
"examples of handlers:"
msgstr ""

# type: group
#: lispref/control.texi:970
#, no-wrap
msgid ""
"(error nil)\n"
"\n"
msgstr ""

# type: group
#: lispref/control.texi:972
#, no-wrap
msgid ""
"(arith-error (message \"Division by zero\"))\n"
"\n"
msgstr ""

# type: group
#: lispref/control.texi:976
#, no-wrap
msgid ""
"((arith-error file-error)\n"
" (message\n"
"  \"Either division by zero or failure to open a file\"))\n"
msgstr ""

# type: defspec
#: lispref/control.texi:986
msgid ""
"Each error that occurs has an @dfn{error symbol} that describes what kind of "
"error it is.  The @code{error-conditions} property of this symbol is a list "
"of condition names (@pxref{Error Symbols}).  Emacs searches all the active "
"@code{condition-case} forms for a handler that specifies one or more of "
"these condition names; the innermost matching @code{condition-case} handles "
"the error.  Within this @code{condition-case}, the first applicable handler "
"handles the error."
msgstr ""

# type: defspec
#: lispref/control.texi:990
msgid ""
"After executing the body of the handler, the @code{condition-case} returns "
"normally, using the value of the last form in the handler body as the "
"overall value."
msgstr ""

# type: cindex
#: lispref/control.texi:991
#, no-wrap
msgid "error description"
msgstr ""

# type: defspec
#: lispref/control.texi:1001
msgid ""
"The argument @var{var} is a variable.  @code{condition-case} does not bind "
"this variable when executing the @var{protected-form}, only when it handles "
"an error.  At that time, it binds @var{var} locally to an @dfn{error "
"description}, which is a list giving the particulars of the error.  The "
"error description has the form @code{(@var{error-symbol} . @var{data})}.  "
"The handler can refer to this list to decide what to do.  For example, if "
"the error is for failure opening a file, the file name is the second element "
"of @var{data}---the third element of the error description."
msgstr ""

# type: defspec
#: lispref/control.texi:1004
msgid ""
"If @var{var} is @code{nil}, that means no variable is bound.  Then the error "
"symbol and associated data are not available to the handler."
msgstr ""

# type: defun
#: lispref/control.texi:1006
#, no-wrap
msgid "error-message-string error-description"
msgstr ""

# type: defun
#: lispref/control.texi:1010
msgid ""
"This function returns the error message string for a given error "
"descriptor.  It is useful if you want to handle an error by printing the "
"usual error message for that error.  @xref{Definition of signal}."
msgstr ""

# type: cindex
#: lispref/control.texi:1012
#, no-wrap
msgid "@code{arith-error} example"
msgstr ""

# type: Plain text
#: lispref/control.texi:1016
msgid ""
"Here is an example of using @code{condition-case} to handle the error that "
"results from dividing by zero.  The handler displays the error message (but "
"without a beep), then returns a very large number."
msgstr ""

# type: group
#: lispref/control.texi:1023
#, no-wrap
msgid ""
"(defun safe-divide (dividend divisor)\n"
"  (condition-case err\n"
"      ;; @r{Protected form.}\n"
"      (/ dividend divisor)\n"
msgstr ""

# type: group
#: lispref/control.texi:1031
#, no-wrap
msgid ""
"    ;; @r{The handler.}\n"
"    (arith-error                        ; @r{Condition.}\n"
"     ;; @r{Display the usual message for this error.}\n"
"     (message \"%s\" (error-message-string err))\n"
"     1000000)))\n"
"@result{} safe-divide\n"
msgstr ""

# type: group
#: lispref/control.texi:1037
#, no-wrap
msgid ""
"(safe-divide 5 0)\n"
"     @print{} Arithmetic error: (arith-error)\n"
"@result{} 1000000\n"
msgstr ""

# type: Plain text
#: lispref/control.texi:1042
msgid ""
"The handler specifies condition name @code{arith-error} so that it will "
"handle only division-by-zero errors.  Other kinds of errors will not be "
"handled, at least not by this @code{condition-case}.  Thus,"
msgstr ""

# type: group
#: lispref/control.texi:1047
#, no-wrap
msgid ""
"(safe-divide nil 3)\n"
"     @error{} Wrong type argument: number-or-marker-p, nil\n"
msgstr ""

# type: Plain text
#: lispref/control.texi:1052
msgid ""
"Here is a @code{condition-case} that catches all kinds of errors, including "
"those signaled with @code{error}:"
msgstr ""

# type: group
#: lispref/control.texi:1057
#, no-wrap
msgid ""
"(setq baz 34)\n"
"     @result{} 34\n"
msgstr ""

# type: group
#: lispref/control.texi:1070
#, no-wrap
msgid ""
"(condition-case err\n"
"    (if (eq baz 35)\n"
"        t\n"
"      ;; @r{This is a call to the function @code{error}.}\n"
"      (error \"Rats!  The variable %s was %s, not 35\" 'baz baz))\n"
"  ;; @r{This is the handler; it is not a form.}\n"
"  (error (princ (format \"The error was: %s\" err))\n"
"         2))\n"
"@print{} The error was: (error \"Rats!  The variable baz was 34, not 35\")\n"
"@result{} 2\n"
msgstr ""

# type: subsubsection
#: lispref/control.texi:1074
#, no-wrap
msgid "Error Symbols and Condition Names"
msgstr ""

# type: cindex
#: lispref/control.texi:1075
#, no-wrap
msgid "error symbol"
msgstr ""

# type: cindex
#: lispref/control.texi:1076
#, no-wrap
msgid "error name"
msgstr ""

# type: cindex
#: lispref/control.texi:1077
#, no-wrap
msgid "condition name"
msgstr ""

# type: cindex
#: lispref/control.texi:1078
#, no-wrap
msgid "user-defined error"
msgstr ""

# type: kindex
#: lispref/control.texi:1079
#, no-wrap
msgid "error-conditions"
msgstr ""

# type: Plain text
#: lispref/control.texi:1085
msgid ""
"When you signal an error, you specify an @dfn{error symbol} to specify the "
"kind of error you have in mind.  Each error has one and only one error "
"symbol to categorize it.  This is the finest classification of errors "
"defined by the Emacs Lisp language."
msgstr ""

# type: Plain text
#: lispref/control.texi:1095
msgid ""
"These narrow classifications are grouped into a hierarchy of wider classes "
"called @dfn{error conditions}, identified by @dfn{condition names}.  The "
"narrowest such classes belong to the error symbols themselves: each error "
"symbol is also a condition name.  There are also condition names for more "
"extensive classes, up to the condition name @code{error} which takes in all "
"kinds of errors (but not @code{quit}).  Thus, each error has one or more "
"condition names: @code{error}, the error symbol if that is distinct from "
"@code{error}, and perhaps some intermediate classifications."
msgstr ""

# type: Plain text
#: lispref/control.texi:1104
msgid ""
"In order for a symbol to be an error symbol, it must have an @code{error-"
"conditions} property which gives a list of condition names.  This list "
"defines the conditions that this kind of error belongs to.  (The error "
"symbol itself, and the symbol @code{error}, should always be members of this "
"list.)  Thus, the hierarchy of condition names is defined by the @code{error-"
"conditions} properties of the error symbols.  Because quitting is not "
"considered an error, the value of the @code{error-conditions} property of "
"@code{quit} is just @code{(quit)}."
msgstr ""

# type: cindex
#: lispref/control.texi:1105
#, no-wrap
msgid "peculiar error"
msgstr ""

# type: Plain text
#: lispref/control.texi:1112
msgid ""
"In addition to the @code{error-conditions} list, the error symbol should "
"have an @code{error-message} property whose value is a string to be printed "
"when that error is signaled but not handled.  If the error symbol has no "
"@code{error-message} property or if the @code{error-message} property "
"exists, but is not a string, the error message @samp{peculiar error} is "
"used.  @xref{Definition of signal}."
msgstr ""

# type: Plain text
#: lispref/control.texi:1114
msgid "Here is how we define a new error symbol, @code{new-error}:"
msgstr ""

# type: group
#: lispref/control.texi:1121
#, no-wrap
msgid ""
"(put 'new-error\n"
"     'error-conditions\n"
"     '(error my-own-errors new-error))\n"
"@result{} (error my-own-errors new-error)\n"
msgstr ""

# type: group
#: lispref/control.texi:1125
#, no-wrap
msgid ""
"(put 'new-error 'error-message \"A new error\")\n"
"@result{} \"A new error\"\n"
msgstr ""

# type: Plain text
#: lispref/control.texi:1132
msgid ""
"This error has three condition names: @code{new-error}, the narrowest "
"classification; @code{my-own-errors}, which we imagine is a wider "
"classification; and @code{error}, which is the widest of all."
msgstr ""

# type: Plain text
#: lispref/control.texi:1135
msgid ""
"The error string should start with a capital letter but it should not end "
"with a period.  This is for consistency with the rest of Emacs."
msgstr ""

# type: Plain text
#: lispref/control.texi:1139
msgid ""
"Naturally, Emacs will never signal @code{new-error} on its own; only an "
"explicit call to @code{signal} (@pxref{Definition of signal}) in your code "
"can do this:"
msgstr ""

# type: group
#: lispref/control.texi:1144
#, no-wrap
msgid ""
"(signal 'new-error '(x y))\n"
"     @error{} A new error: x, y\n"
msgstr ""

# type: Plain text
#: lispref/control.texi:1150
msgid ""
"This error can be handled through any of the three condition names.  This "
"example handles @code{new-error} and any other errors in the class @code{my-"
"own-errors}:"
msgstr ""

# type: group
#: lispref/control.texi:1156
#, no-wrap
msgid ""
"(condition-case foo\n"
"    (bar nil t)\n"
"  (my-own-errors nil))\n"
msgstr ""

# type: Plain text
#: lispref/control.texi:1164
msgid ""
"The significant way that errors are classified is by their condition names---"
"the names used to match errors with handlers.  An error symbol serves only "
"as a convenient way to specify the intended error message and list of "
"condition names.  It would be cumbersome to give @code{signal} a list of "
"condition names rather than one error symbol."
msgstr ""

# type: Plain text
#: lispref/control.texi:1170
msgid ""
"By contrast, using only error symbols without condition names would "
"seriously decrease the power of @code{condition-case}.  Condition names make "
"it possible to categorize errors at various levels of generality when you "
"write an error handler.  Using error symbols alone would eliminate all but "
"the narrowest level of classification."
msgstr ""

# type: Plain text
#: lispref/control.texi:1173
msgid ""
"@xref{Standard Errors}, for a list of all the standard error symbols and "
"their conditions."
msgstr ""

# type: subsection
#: lispref/control.texi:1175
#, no-wrap
msgid "Cleaning Up from Nonlocal Exits"
msgstr ""

# type: Plain text
#: lispref/control.texi:1183
msgid ""
"The @code{unwind-protect} construct is essential whenever you temporarily "
"put a data structure in an inconsistent state; it permits you to make the "
"data consistent again in the event of an error or throw.  (Another more "
"specific cleanup construct that is used only for changes in buffer contents "
"is the atomic change group; @ref{Atomic Changes}.)"
msgstr ""

# type: defspec
#: lispref/control.texi:1184
#, no-wrap
msgid "unwind-protect body-form cleanup-forms@dots{}"
msgstr ""

# type: cindex
#: lispref/control.texi:1185
#, no-wrap
msgid "cleanup forms"
msgstr ""

# type: cindex
#: lispref/control.texi:1186
#, no-wrap
msgid "protected forms"
msgstr ""

# type: cindex
#: lispref/control.texi:1187
#, no-wrap
msgid "error cleanup"
msgstr ""

# type: cindex
#: lispref/control.texi:1188
#, no-wrap
msgid "unwinding"
msgstr ""

# type: defspec
#: lispref/control.texi:1195
msgid ""
"@code{unwind-protect} executes @var{body-form} with a guarantee that the @var"
"{cleanup-forms} will be evaluated if control leaves @var{body-form}, no "
"matter how that happens.  @var{body-form} may complete normally, or execute "
"a @code{throw} out of the @code{unwind-protect}, or cause an error; in all "
"cases, the @var{cleanup-forms} will be evaluated."
msgstr ""

# type: defspec
#: lispref/control.texi:1200
msgid ""
"If @var{body-form} finishes normally, @code{unwind-protect} returns the "
"value of @var{body-form}, after it evaluates the @var{cleanup-forms}.  If "
"@var{body-form} does not finish, @code{unwind-protect} does not return any "
"value in the normal sense."
msgstr ""

# type: defspec
#: lispref/control.texi:1207
msgid ""
"Only @var{body-form} is protected by the @code{unwind-protect}.  If any of "
"the @var{cleanup-forms} themselves exits nonlocally (via a @code{throw} or "
"an error), @code{unwind-protect} is @emph{not} guaranteed to evaluate the "
"rest of them.  If the failure of one of the @var{cleanup-forms} has the "
"potential to cause trouble, then protect it with another @code{unwind-"
"protect} around that form."
msgstr ""

# type: defspec
#: lispref/control.texi:1212
msgid ""
"The number of currently active @code{unwind-protect} forms counts, together "
"with the number of local variable bindings, against the limit @code{max-"
"specpdl-size} (@pxref{Definition of max-specpdl-size,, Local Variables})."
msgstr ""

# type: Plain text
#: lispref/control.texi:1216
msgid ""
"For example, here we make an invisible buffer for temporary use, and make "
"sure to kill it before finishing:"
msgstr ""

# type: group
#: lispref/control.texi:1225
#, no-wrap
msgid ""
"(save-excursion\n"
"  (let ((buffer (get-buffer-create \" *temp*\")))\n"
"    (set-buffer buffer)\n"
"    (unwind-protect\n"
"        @var{body-form}\n"
"      (kill-buffer buffer))))\n"
msgstr ""

# type: Plain text
#: lispref/control.texi:1236
msgid ""
"You might think that we could just as well write @code{(kill-buffer (current-"
"buffer))} and dispense with the variable @code{buffer}.  However, the way "
"shown above is safer, if @var{body-form} happens to get an error after "
"switching to a different buffer! (Alternatively, you could write another "
"@code{save-excursion} around @var{body-form}, to ensure that the temporary "
"buffer becomes current again in time to kill it.)"
msgstr ""

# type: Plain text
#: lispref/control.texi:1241
msgid ""
"Emacs includes a standard macro called @code{with-temp-buffer} which expands "
"into more or less the code shown above (@pxref{Definition of with-temp-"
"buffer,, Current Buffer}).  Several of the macros defined in this manual use "
"@code{unwind-protect} in this way."
msgstr ""

# type: findex
#: lispref/control.texi:1242
#, no-wrap
msgid "ftp-login"
msgstr "ftp-login"

# type: Plain text
#: lispref/control.texi:1250
msgid ""
"Here is an actual example derived from an FTP package.  It creates a process "
"(@pxref{Processes}) to try to establish a connection to a remote machine.  "
"As the function @code{ftp-login} is highly susceptible to numerous problems "
"that the writer of the function cannot anticipate, it is protected with a "
"form that guarantees deletion of the process in the event of failure.  "
"Otherwise, Emacs might fill up with useless subprocesses."
msgstr ""

# type: group
#: lispref/control.texi:1261
#, no-wrap
msgid ""
"(let ((win nil))\n"
"  (unwind-protect\n"
"      (progn\n"
"        (setq process (ftp-setup-buffer host file))\n"
"        (if (setq win (ftp-login process host user password))\n"
"            (message \"Logged in\")\n"
"          (error \"Ftp login failed\")))\n"
"    (or win (and process (delete-process process)))))\n"
msgstr ""

# type: Plain text
#: lispref/control.texi:1269
msgid ""
"This example has a small bug: if the user types @kbd{C-g} to quit, and the "
"quit happens immediately after the function @code{ftp-setup-buffer} returns "
"but before the variable @code{process} is set, the process will not be "
"killed.  There is no easy way to fix this bug, but at least it is very "
"unlikely."
msgstr ""

# type: ignore
#: lispref/control.texi:1272
#, no-wrap
msgid "   arch-tag: 8abc30d4-4d3a-47f9-b908-e9e971c18c6d\n"
msgstr "   arch-tag: 8abc30d4-4d3a-47f9-b908-e9e971c18c6d\n"

# type: node
#: lispref/customize.texi:7 lispref/elisp.texi:126 lispref/loading.texi:7
#: lispref/macros.texi:7
#, no-wrap
msgid "Customization"
msgstr ""

# type: menu
#: lispref/customize.texi:7 lispref/elisp.texi:126 lispref/functions.texi:7
#: lispref/macros.texi:7 lispref/macros.texi:8 lispref/vol1.texi:228
#: lispref/vol1.texi:499 lispref/vol2.texi:229 lispref/vol2.texi:500
#, no-wrap
msgid "Macros"
msgstr ""

# type: chapter
#: lispref/customize.texi:8
#, no-wrap
msgid "Writing Customization Definitions"
msgstr ""

# type: cindex
#: lispref/customize.texi:10
#, no-wrap
msgid "customization definitions"
msgstr ""

# type: Plain text
#: lispref/customize.texi:15
msgid ""
"This chapter describes how to declare user options for customization, and "
"also customization groups for classifying them.  We use the term @dfn"
"{customization item} to include both kinds of customization definitions---as "
"well as face definitions (@pxref{Defining Faces})."
msgstr ""

# type: node
#: lispref/customize.texi:22 lispref/customize.texi:24
#, no-wrap
msgid "Common Keywords"
msgstr ""

# type: menu
#: lispref/customize.texi:22
msgid "Common keyword arguments for all kinds of"
msgstr ""

# type: menu
#: lispref/customize.texi:22
msgid "customization declarations."
msgstr ""

# type: node
#: lispref/customize.texi:22 lispref/customize.texi:188
#, no-wrap
msgid "Group Definitions"
msgstr ""

# type: menu
#: lispref/customize.texi:22
msgid "Writing customization group definitions."
msgstr ""

# type: node
#: lispref/customize.texi:22 lispref/customize.texi:261
#, no-wrap
msgid "Variable Definitions"
msgstr ""

# type: menu
#: lispref/customize.texi:22
msgid "Declaring user options."
msgstr ""

# type: section
#: lispref/customize.texi:22 lispref/customize.texi:447
#: lispref/customize.texi:448
#, no-wrap
msgid "Customization Types"
msgstr ""

# type: menu
#: lispref/customize.texi:22
msgid "Specifying the type of a user option."
msgstr ""

# type: section
#: lispref/customize.texi:25
#, no-wrap
msgid "Common Item Keywords"
msgstr ""

# type: cindex
#: lispref/customize.texi:27
#, no-wrap
msgid "customization keywords"
msgstr ""

# type: Plain text
#: lispref/customize.texi:31
msgid ""
"All kinds of customization declarations (for variables and groups, and for "
"faces) accept keyword arguments for specifying various information.  This "
"section describes some keywords that apply to all kinds."
msgstr ""

# type: Plain text
#: lispref/customize.texi:36
msgid ""
"All of these keywords, except @code{:tag}, can be used more than once in a "
"given item.  Each use of the keyword has an independent effect.  The keyword "
"@code{:tag} is an exception because any given item can only display one name."
msgstr ""

# type: item
#: lispref/customize.texi:38
#, no-wrap
msgid ":tag @var{label}"
msgstr ""

# type: kindex
#: lispref/customize.texi:39
#, no-wrap
msgid "tag@r{, customization keyword}"
msgstr ""

# type: table
#: lispref/customize.texi:45
msgid ""
"Use @var{label}, a string, instead of the item's name, to label the item in "
"customization menus and buffers.  @strong{Don't use a tag which is "
"substantially different from the item's real name; that would cause "
"confusion.} One legitimate case for use of @code{:tag} is to specify a dash "
"where normally a hyphen would be converted to a space:"
msgstr ""

# type: example
#: lispref/customize.texi:49
#, no-wrap
msgid ""
"(defcustom cursor-in-non-selected-windows @dots{}\n"
"  :tag \"Cursor In Non-selected Windows\"\n"
msgstr ""

# type: kindex
#: lispref/customize.texi:51
#, no-wrap
msgid "group@r{, customization keyword}"
msgstr ""

# type: item
#: lispref/customize.texi:52 lispref/modes.texi:1396
#, no-wrap
msgid ":group @var{group}"
msgstr ""

# type: table
#: lispref/customize.texi:56
msgid ""
"Put this customization item in group @var{group}.  When you use @code{:"
"group} in a @code{defgroup}, it makes the new group a subgroup of @var"
"{group}."
msgstr ""

# type: table
#: lispref/customize.texi:60
msgid ""
"If you use this keyword more than once, you can put a single item into more "
"than one group.  Displaying any of those groups will show this item.  Please "
"don't overdo this, since the result would be annoying."
msgstr ""

# type: item
#: lispref/customize.texi:61
#, no-wrap
msgid ":link @var{link-data}"
msgstr ""

# type: kindex
#: lispref/customize.texi:62
#, no-wrap
msgid "link@r{, customization keyword}"
msgstr ""

# type: table
#: lispref/customize.texi:66
msgid ""
"Include an external link after the documentation string for this item.  This "
"is a sentence containing an active field which references some other "
"documentation."
msgstr ""

# type: table
#: lispref/customize.texi:68
msgid "There are several alternatives you can use for @var{link-data}:"
msgstr ""

# type: item
#: lispref/customize.texi:70
#, no-wrap
msgid "(custom-manual @var{info-node})"
msgstr ""

# type: table
#: lispref/customize.texi:75
msgid ""
"Link to an Info node; @var{info-node} is a string which specifies the node "
"name, as in @code{\"(emacs)Top\"}.  The link appears as @samp{[Manual]} in "
"the customization buffer and enters the built-in Info reader on @var{info-"
"node}."
msgstr ""

# type: item
#: lispref/customize.texi:76
#, no-wrap
msgid "(info-link @var{info-node})"
msgstr ""

# type: table
#: lispref/customize.texi:79
msgid ""
"Like @code{custom-manual} except that the link appears in the customization "
"buffer with the Info node name."
msgstr ""

# type: item
#: lispref/customize.texi:80
#, no-wrap
msgid "(url-link @var{url})"
msgstr ""

# type: table
#: lispref/customize.texi:85
msgid ""
"Link to a web page; @var{url} is a string which specifies the @acronym"
"{URL}.  The link appears in the customization buffer as @var{url} and "
"invokes the WWW browser specified by @code{browse-url-browser-function}."
msgstr ""

# type: item
#: lispref/customize.texi:86
#, no-wrap
msgid "(emacs-commentary-link @var{library})"
msgstr ""

# type: table
#: lispref/customize.texi:89
msgid ""
"Link to the commentary section of a library; @var{library} is a string which "
"specifies the library name."
msgstr ""

# type: item
#: lispref/customize.texi:90
#, no-wrap
msgid "(emacs-library-link @var{library})"
msgstr ""

# type: table
#: lispref/customize.texi:93
msgid ""
"Link to an Emacs Lisp library file; @var{library} is a string which "
"specifies the library name."
msgstr ""

# type: item
#: lispref/customize.texi:94
#, no-wrap
msgid "(file-link @var{file})"
msgstr ""

# type: table
#: lispref/customize.texi:97
msgid ""
"Link to a file; @var{file} is a string which specifies the name of the file "
"to visit with @code{find-file} when the user invokes this link."
msgstr ""

# type: item
#: lispref/customize.texi:98
#, no-wrap
msgid "(function-link @var{function})"
msgstr ""

# type: table
#: lispref/customize.texi:102
msgid ""
"Link to the documentation of a function; @var{function} is a string which "
"specifies the name of the function to describe with @code{describe-function} "
"when the user invokes this link."
msgstr ""

# type: item
#: lispref/customize.texi:103
#, no-wrap
msgid "(variable-link @var{variable})"
msgstr ""

# type: table
#: lispref/customize.texi:107
msgid ""
"Link to the documentation of a variable; @var{variable} is a string which "
"specifies the name of the variable to describe with @code{describe-variable} "
"when the user invokes this link."
msgstr ""

# type: item
#: lispref/customize.texi:108
#, no-wrap
msgid "(custom-group-link @var{group})"
msgstr ""

# type: table
#: lispref/customize.texi:111
msgid ""
"Link to another customization group.  Invoking it creates a new "
"customization buffer for @var{group}."
msgstr ""

# type: table
#: lispref/customize.texi:117
msgid ""
"You can specify the text to use in the customization buffer by adding @code{:"
"tag @var{name}} after the first element of the @var{link-data}; for example, "
"@code{(info-link :tag \"foo\" \"(emacs)Top\")} makes a link to the Emacs "
"manual which appears in the buffer as @samp{foo}."
msgstr ""

# type: table
#: lispref/customize.texi:120
msgid ""
"An item can have more than one external link; however, most items have none "
"at all."
msgstr ""

# type: item
#: lispref/customize.texi:121
#, no-wrap
msgid ":load @var{file}"
msgstr ""

# type: kindex
#: lispref/customize.texi:122
#, no-wrap
msgid "load@r{, customization keyword}"
msgstr ""

# type: table
#: lispref/customize.texi:126
msgid ""
"Load file @var{file} (a string) before displaying this customization item.  "
"Loading is done with @code{load-library}, and only if the file is not "
"already loaded."
msgstr ""

# type: item
#: lispref/customize.texi:127
#, no-wrap
msgid ":require @var{feature}"
msgstr ""

# type: kindex
#: lispref/customize.texi:128
#, no-wrap
msgid "require@r{, customization keyword}"
msgstr ""

# type: table
#: lispref/customize.texi:131
msgid ""
"Execute @code{(require '@var{feature})} when your saved customizations set "
"the value of this item.  @var{feature} should be a symbol."
msgstr ""

# type: table
#: lispref/customize.texi:135
msgid ""
"The most common reason to use @code{:require} is when a variable enables a "
"feature such as a minor mode, and just setting the variable won't have any "
"effect unless the code which implements the mode is loaded."
msgstr ""

# type: item
#: lispref/customize.texi:136
#, no-wrap
msgid ":version @var{version}"
msgstr ""

# type: kindex
#: lispref/customize.texi:137
#, no-wrap
msgid "version@r{, customization keyword}"
msgstr ""

# type: table
#: lispref/customize.texi:141
msgid ""
"This keyword specifies that the item was first introduced in Emacs version "
"@var{version}, or that its default value was changed in that version.  The "
"value @var{version} must be a string."
msgstr ""

# type: item
#: lispref/customize.texi:142
#, no-wrap
msgid ":package-version '(@var{package} . @var{version})"
msgstr ""

# type: kindex
#: lispref/customize.texi:143
#, no-wrap
msgid "package-version@r{, customization keyword}"
msgstr ""

# type: table
#: lispref/customize.texi:148
msgid ""
"This keyword specifies that the item was first introduced in @var{package} "
"version @var{version}, or that its meaning or default value was changed in "
"that version.  The value of @var{package} is a symbol and @var{version} is a "
"string."
msgstr ""

# type: table
#: lispref/customize.texi:150
msgid "This keyword takes priority over @code{:version}."
msgstr ""

# type: table
#: lispref/customize.texi:155
msgid ""
"@var{package} should be the official name of the package, such as MH-E or "
"Gnus.  If the package @var{package} is released as part of Emacs, @var"
"{package} and @var{version} should appear in the value of @code{customize-"
"package-emacs-version-alist}."
msgstr ""

# type: Plain text
#: lispref/customize.texi:160
msgid ""
"Packages distributed as part of Emacs that use the @code{:package-version} "
"keyword must also update the @code{customize-package-emacs-version-alist} "
"variable."
msgstr ""

# type: defvar
#: lispref/customize.texi:161
#, no-wrap
msgid "customize-package-emacs-version-alist"
msgstr ""

# type: defvar
#: lispref/customize.texi:165
msgid ""
"This alist provides a mapping for the versions of Emacs that are associated "
"with versions of a package listed in the @code{:package-version} keyword.  "
"Its elements look like this:"
msgstr ""

# type: example
#: lispref/customize.texi:168
#, no-wrap
msgid "(@var{package} (@var{pversion} . @var{eversion})@dots{})\n"
msgstr ""

# type: defvar
#: lispref/customize.texi:174
msgid ""
"For each @var{package}, which is a symbol, there are one or more elements "
"that contain a package version @var{pversion} with an associated Emacs "
"version @var{eversion}.  These versions are strings.  For example, the MH-E "
"package updates this alist with the following:"
msgstr ""

# type: smallexample
#: lispref/customize.texi:180
#, no-wrap
msgid ""
"(add-to-list 'customize-package-emacs-version-alist\n"
"             '(MH-E (\"6.0\" . \"22.1\") (\"6.1\" . \"22.1\") (\"7.0\" . \"22.1\")\n"
"                    (\"7.1\" . \"22.1\") (\"7.2\" . \"22.1\") (\"7.3\" . \"22.1\")\n"
"                    (\"7.4\" . \"22.1\") (\"8.0\" . \"22.1\")))\n"
msgstr ""

# type: defvar
#: lispref/customize.texi:186
msgid ""
"The value of @var{package} needs to be unique and it needs to match the @var"
"{package} value appearing in the @code{:package-version} keyword.  Since the "
"user might see the value in a error message, a good choice is the official "
"name of the package, such as MH-E or Gnus."
msgstr ""

# type: section
#: lispref/customize.texi:189
#, no-wrap
msgid "Defining Customization Groups"
msgstr ""

# type: cindex
#: lispref/customize.texi:190
#, no-wrap
msgid "define customization group"
msgstr ""

# type: cindex
#: lispref/customize.texi:191
#, no-wrap
msgid "customization groups, defining"
msgstr ""

# type: Plain text
#: lispref/customize.texi:201
msgid ""
"Each Emacs Lisp package should have one main customization group which "
"contains all the options, faces and other groups in the package.  If the "
"package has a small number of options and faces, use just one group and put "
"everything in it.  When there are more than twelve or so options and faces, "
"then you should structure them into subgroups, and put the subgroups under "
"the package's main customization group.  It is OK to put some of the options "
"and faces in the package's main group alongside the subgroups."
msgstr ""

# type: Plain text
#: lispref/customize.texi:207
msgid ""
"The package's main or only group should be a member of one or more of the "
"standard customization groups.  (To display the full list of them, use @kbd"
"{M-x customize}.)  Choose one or more of them (but not too many), and add "
"your group to each of them using the @code{:group} keyword."
msgstr ""

# type: Plain text
#: lispref/customize.texi:209
msgid "The way to declare new customization groups is with @code{defgroup}."
msgstr ""

# type: defmac
#: lispref/customize.texi:210
#, no-wrap
msgid "defgroup group members doc [keyword value]@dots{}"
msgstr ""

# type: defmac
#: lispref/customize.texi:214
msgid ""
"Declare @var{group} as a customization group containing @var{members}.  Do "
"not quote the symbol @var{group}.  The argument @var{doc} specifies the "
"documentation string for the group."
msgstr ""

# type: defmac
#: lispref/customize.texi:219
msgid ""
"The argument @var{members} is a list specifying an initial set of "
"customization items to be members of the group.  However, most often @var"
"{members} is @code{nil}, and you specify the group's members by using the "
"@code{:group} keyword when defining those members."
msgstr ""

# type: defmac
#: lispref/customize.texi:225
msgid ""
"If you want to specify group members through @var{members}, each element "
"should have the form @code{(@var{name} @var{widget})}.  Here @var{name} is a "
"symbol, and @var{widget} is a widget type for editing that symbol.  Useful "
"widgets are @code{custom-variable} for a variable, @code{custom-face} for a "
"face, and @code{custom-group} for a group."
msgstr ""

# type: defmac
#: lispref/customize.texi:229
msgid ""
"When you introduce a new group into Emacs, use the @code{:version} keyword "
"in the @code{defgroup}; then you need not use it for the individual members "
"of the group."
msgstr ""

# type: defmac
#: lispref/customize.texi:232
msgid ""
"In addition to the common keywords (@pxref{Common Keywords}), you can also "
"use this keyword in @code{defgroup}:"
msgstr ""

# type: item
#: lispref/customize.texi:234
#, no-wrap
msgid ":prefix @var{prefix}"
msgstr ""

# type: kindex
#: lispref/customize.texi:235
#, no-wrap
msgid "prefix@r{, @code{defgroup} keyword}"
msgstr ""

# type: table
#: lispref/customize.texi:238
msgid ""
"If the name of an item in the group starts with @var{prefix}, then the tag "
"for that item is constructed (by default) by omitting @var{prefix}."
msgstr ""

# type: table
#: lispref/customize.texi:240
msgid "One group can have any number of prefixes."
msgstr ""

# type: Plain text
#: lispref/customize.texi:250
msgid ""
"The prefix-discarding feature is currently turned off, which means that @code"
"{:prefix} currently has no effect.  We did this because we found that "
"discarding the specified prefixes often led to confusing names for options.  "
"This happened because the people who wrote the @code{defgroup} definitions "
"for various groups added @code{:prefix} keywords whenever they make logical "
"sense---that is, whenever the variables in the library have a common prefix."
msgstr ""

# type: Plain text
#: lispref/customize.texi:256
msgid ""
"In order to obtain good results with @code{:prefix}, it would be necessary "
"to check the specific effects of discarding a particular prefix, given the "
"specific items in a group and their names and documentation.  If the "
"resulting text is not clear, then @code{:prefix} should not be used in that "
"case."
msgstr ""

# type: Plain text
#: lispref/customize.texi:260
msgid ""
"It should be possible to recheck all the customization groups, delete the "
"@code{:prefix} specifications which give unclear results, and then turn this "
"feature back on, if someone would like to do the work."
msgstr ""

# type: section
#: lispref/customize.texi:262
#, no-wrap
msgid "Defining Customization Variables"
msgstr ""

# type: cindex
#: lispref/customize.texi:263
#, no-wrap
msgid "define customization options"
msgstr ""

# type: cindex
#: lispref/customize.texi:264
#, no-wrap
msgid "customization variables, how to define"
msgstr ""

# type: Plain text
#: lispref/customize.texi:267
msgid "Use @code{defcustom} to declare user-customizable variables."
msgstr ""

# type: defmac
#: lispref/customize.texi:268
#, no-wrap
msgid "defcustom option standard doc [keyword value]@dots{}"
msgstr ""

# type: defmac
#: lispref/customize.texi:275
msgid ""
"This construct declares @var{option} as a customizable user option "
"variable.  You should not quote @var{option}.  The argument @var{doc} "
"specifies the documentation string for the variable.  There is no need to "
"start it with a @samp{*}, because @code{defcustom} automatically marks @var"
"{option} as a @dfn{user option} (@pxref{Defining Variables})."
msgstr ""

# type: defmac
#: lispref/customize.texi:285
msgid ""
"The argument @var{standard} is an expression that specifies the standard "
"value for @var{option}.  Evaluating the @code{defcustom} form evaluates @var"
"{standard}, but does not necessarily install the standard value.  If @var"
"{option} already has a default value, @code{defcustom} does not change it.  "
"If the user has saved a customization for @var{option}, @code{defcustom} "
"installs the user's customized value as @var{option}'s default value.  If "
"neither of those cases applies, @code{defcustom} installs the result of "
"evaluating @var{standard} as the default value."
msgstr ""

# type: defmac
#: lispref/customize.texi:292
msgid ""
"The expression @var{standard} can be evaluated at various other times, too---"
"whenever the customization facility needs to know @var{option}'s standard "
"value.  So be sure to use an expression which is harmless to evaluate at any "
"time.  We recommend avoiding backquotes in @var{standard}, because they are "
"not expanded when editing the value, so list values will appear to have the "
"wrong structure."
msgstr ""

# type: defmac
#: lispref/customize.texi:294
msgid "Every @code{defcustom} should specify @code{:group} at least once."
msgstr ""

# type: defmac
#: lispref/customize.texi:299
msgid ""
"If you specify the @code{:set} keyword, to make the variable take other "
"special actions when set through the customization buffer, the variable's "
"documentation string should tell the user specifically how to do the same "
"job in hand-written Lisp code."
msgstr ""

# type: defmac
#: lispref/customize.texi:305
msgid ""
"When you evaluate a @code{defcustom} form with @kbd{C-M-x} in Emacs Lisp "
"mode (@code{eval-defun}), a special feature of @code{eval-defun} arranges to "
"set the variable unconditionally, without testing whether its value is "
"void.  (The same feature applies to @code{defvar}.)  @xref{Defining "
"Variables}."
msgstr ""

# type: Plain text
#: lispref/customize.texi:308
msgid "@code{defcustom} accepts the following additional keywords:"
msgstr ""

# type: item
#: lispref/customize.texi:310 lispref/processes.texi:1761
#, no-wrap
msgid ":type @var{type}"
msgstr ""

# type: table
#: lispref/customize.texi:314
msgid ""
"Use @var{type} as the data type for this option.  It specifies which values "
"are legitimate, and how to display the value.  @xref{Customization Types}, "
"for more information."
msgstr ""

# type: item
#: lispref/customize.texi:315
#, no-wrap
msgid ":options @var{value-list}"
msgstr ""

# type: kindex
#: lispref/customize.texi:316
#, no-wrap
msgid "options@r{, @code{defcustom} keyword}"
msgstr ""

# type: table
#: lispref/customize.texi:320
msgid ""
"Specify the list of reasonable values for use in this option.  The user is "
"not restricted to using only these values, but they are offered as "
"convenient alternatives."
msgstr ""

# type: table
#: lispref/customize.texi:324
msgid ""
"This is meaningful only for certain types, currently including @code{hook}, "
"@code{plist} and @code{alist}.  See the definition of the individual types "
"for a description of how to use @code{:options}."
msgstr ""

# type: item
#: lispref/customize.texi:325
#, no-wrap
msgid ":set @var{setfunction}"
msgstr ""

# type: kindex
#: lispref/customize.texi:326
#, no-wrap
msgid "set@r{, @code{defcustom} keyword}"
msgstr ""

# type: table
#: lispref/customize.texi:333
msgid ""
"Specify @var{setfunction} as the way to change the value of this option.  "
"The function @var{setfunction} should take two arguments, a symbol (the "
"option name) and the new value, and should do whatever is necessary to "
"update the value properly for this option (which may not mean simply setting "
"the option as a Lisp variable).  The default for @var{setfunction} is @code"
"{set-default}."
msgstr ""

# type: item
#: lispref/customize.texi:334
#, no-wrap
msgid ":get @var{getfunction}"
msgstr ""

# type: kindex
#: lispref/customize.texi:335
#, no-wrap
msgid "get@r{, @code{defcustom} keyword}"
msgstr ""

# type: table
#: lispref/customize.texi:341
msgid ""
"Specify @var{getfunction} as the way to extract the value of this option.  "
"The function @var{getfunction} should take one argument, a symbol, and "
"should return whatever customize should use as the ``current value'' for "
"that symbol (which need not be the symbol's Lisp value).  The default is "
"@code{default-value}."
msgstr ""

# type: table
#: lispref/customize.texi:347
msgid ""
"You have to really understand the workings of Custom to use @code{:get} "
"correctly.  It is meant for values that are treated in Custom as variables "
"but are not actually stored in Lisp variables.  It is almost surely a "
"mistake to specify @code{getfunction} for a value that really is stored in a "
"Lisp variable."
msgstr ""

# type: item
#: lispref/customize.texi:348
#, no-wrap
msgid ":initialize @var{function}"
msgstr ""

# type: kindex
#: lispref/customize.texi:349
#, no-wrap
msgid "initialize@r{, @code{defcustom} keyword}"
msgstr ""

# type: table
#: lispref/customize.texi:354
msgid ""
"@var{function} should be a function used to initialize the variable when the "
"@code{defcustom} is evaluated.  It should take two arguments, the option "
"name (a symbol) and the value.  Here are some predefined functions meant for "
"use in this way:"
msgstr ""

# type: item
#: lispref/customize.texi:356
#, no-wrap
msgid "custom-initialize-set"
msgstr ""

# type: table
#: lispref/customize.texi:359
msgid ""
"Use the variable's @code{:set} function to initialize the variable, but do "
"not reinitialize it if it is already non-void."
msgstr ""

# type: item
#: lispref/customize.texi:360
#, no-wrap
msgid "custom-initialize-default"
msgstr ""

# type: table
#: lispref/customize.texi:367
msgid ""
"Like @code{custom-initialize-set}, but use the function @code{set-default} "
"to set the variable, instead of the variable's @code{:set} function.  This "
"is the usual choice for a variable whose @code{:set} function enables or "
"disables a minor mode; with this choice, defining the variable will not call "
"the minor mode function, but customizing the variable will do so."
msgstr ""

# type: item
#: lispref/customize.texi:368
#, no-wrap
msgid "custom-initialize-reset"
msgstr ""

# type: table
#: lispref/customize.texi:373
msgid ""
"Always use the @code{:set} function to initialize the variable.  If the "
"variable is already non-void, reset it by calling the @code{:set} function "
"using the current value (returned by the @code{:get} method).  This is the "
"default @code{:initialize} function."
msgstr ""

# type: item
#: lispref/customize.texi:374
#, no-wrap
msgid "custom-initialize-changed"
msgstr ""

# type: table
#: lispref/customize.texi:378
msgid ""
"Use the @code{:set} function to initialize the variable, if it is already "
"set or has been customized; otherwise, just use @code{set-default}."
msgstr ""

# type: item
#: lispref/customize.texi:379
#, no-wrap
msgid "custom-initialize-safe-set"
msgstr ""

# type: itemx
#: lispref/customize.texi:380
#, no-wrap
msgid "custom-initialize-safe-default"
msgstr ""

# type: table
#: lispref/customize.texi:385
msgid ""
"These functions behave like @code{custom-initialize-set} (@code{custom-"
"initialize-default}, respectively), but catch errors.  If an error occurs "
"during initialization, they set the variable to @code{nil} using @code{set-"
"default}, and throw no error."
msgstr ""

# type: table
#: lispref/customize.texi:394
msgid ""
"These two functions are only meant for options defined in pre-loaded files, "
"where some variables or functions used to compute the option's value may not "
"yet be defined.  The option normally gets updated in @file{startup.el}, "
"ignoring the previously computed value.  Because of this typical usage, the "
"value which these two functions compute normally only matters when, after "
"startup, one unsets the option's value and then reevaluates the defcustom.  "
"By that time, the necessary variables and functions will be defined, so "
"there will not be an error."
msgstr ""

# type: item
#: lispref/customize.texi:396
#, no-wrap
msgid ":set-after @var{variables}"
msgstr ""

# type: kindex
#: lispref/customize.texi:397
#, no-wrap
msgid "set-after@r{, @code{defcustom} keyword}"
msgstr ""

# type: table
#: lispref/customize.texi:403
msgid ""
"When setting variables according to saved customizations, make sure to set "
"the variables @var{variables} before this one; in other words, delay setting "
"this variable until after those others have been handled.  Use @code{:set-"
"after} if setting this variable won't work properly unless those other "
"variables already have their intended values."
msgstr ""

# type: Plain text
#: lispref/customize.texi:410
msgid ""
"The @code{:require} keyword is useful for an option that turns on the "
"operation of a certain feature.  Assuming that the package is coded to check "
"the value of the option, you still need to arrange for the package to be "
"loaded.  You can do that with @code{:require}.  @xref{Common Keywords}.  "
"Here is an example, from the library @file{saveplace.el}:"
msgstr ""

# type: example
#: lispref/customize.texi:417
#, no-wrap
msgid ""
"(defcustom save-place nil\n"
"  \"Non-nil means automatically save place in each file...\"\n"
"  :type 'boolean\n"
"  :require 'saveplace\n"
"  :group 'save-place)\n"
msgstr ""

# type: Plain text
#: lispref/customize.texi:427
msgid ""
"If a customization item has a type such as @code{hook} or @code{alist}, "
"which supports @code{:options}, you can add additional values to the list "
"from outside the @code{defcustom} declaration by calling @code{custom-add-"
"frequent-value}.  For example, if you define a function @code{my-lisp-mode-"
"initialization} intended to be called from @code{emacs-lisp-mode-hook}, you "
"might want to add that to the list of reasonable values for @code{emacs-lisp-"
"mode-hook}, but not by editing its definition.  You can do it thus:"
msgstr ""

# type: example
#: lispref/customize.texi:431
#, no-wrap
msgid ""
"(custom-add-frequent-value 'emacs-lisp-mode-hook\n"
"   'my-lisp-mode-initialization)\n"
msgstr ""

# type: defun
#: lispref/customize.texi:433
#, no-wrap
msgid "custom-add-frequent-value symbol value"
msgstr ""

# type: defun
#: lispref/customize.texi:436
msgid ""
"For the customization option @var{symbol}, add @var{value} to the list of "
"reasonable values."
msgstr ""

# type: defun
#: lispref/customize.texi:439
msgid ""
"The precise effect of adding a value depends on the customization type of "
"@var{symbol}."
msgstr ""

# type: Plain text
#: lispref/customize.texi:446
msgid ""
"Internally, @code{defcustom} uses the symbol property @code{standard-value} "
"to record the expression for the standard value, and @code{saved-value} to "
"record the value saved by the user with the customization buffer.  Both "
"properties are actually lists whose car is an expression which evaluates to "
"the value."
msgstr ""

# type: cindex
#: lispref/customize.texi:450
#, no-wrap
msgid "customization types"
msgstr ""

# type: Plain text
#: lispref/customize.texi:455
msgid ""
"When you define a user option with @code{defcustom}, you must specify its "
"@dfn{customization type}.  That is a Lisp object which describes (1)  which "
"values are legitimate and (2) how to display the value in the customization "
"buffer for editing."
msgstr ""

# type: kindex
#: lispref/customize.texi:456
#, no-wrap
msgid "type@r{, @code{defcustom} keyword}"
msgstr ""

# type: Plain text
#: lispref/customize.texi:462
msgid ""
"You specify the customization type in @code{defcustom} with the @code{:type} "
"keyword.  The argument of @code{:type} is evaluated, but only once when the "
"@code{defcustom} is executed, so it isn't useful for the value to vary.  "
"Normally we use a quoted constant.  For example:"
msgstr ""

# type: example
#: lispref/customize.texi:468
#, no-wrap
msgid ""
"(defcustom diff-command \"diff\"\n"
"  \"The command to use to run diff.\"\n"
"  :type '(string)\n"
"  :group 'diff)\n"
msgstr ""

# type: Plain text
#: lispref/customize.texi:475
msgid ""
"In general, a customization type is a list whose first element is a symbol, "
"one of the customization type names defined in the following sections.  "
"After this symbol come a number of arguments, depending on the symbol.  "
"Between the type symbol and its arguments, you can optionally write keyword-"
"value pairs (@pxref{Type Keywords})."
msgstr ""

# type: Plain text
#: lispref/customize.texi:481
msgid ""
"Some of the type symbols do not use any arguments; those are called @dfn"
"{simple types}.  For a simple type, if you do not use any keyword-value "
"pairs, you can omit the parentheses around the type symbol.  For example "
"just @code{string} as a customization type is equivalent to @code{(string)}."
msgstr ""

# type: subsection
#: lispref/customize.texi:488 lispref/customize.texi:493
#: lispref/customize.texi:494
#, no-wrap
msgid "Simple Types"
msgstr ""

# type: subsection
#: lispref/customize.texi:488 lispref/customize.texi:703
#: lispref/customize.texi:704
#, no-wrap
msgid "Composite Types"
msgstr ""

# type: subsection
#: lispref/customize.texi:488 lispref/customize.texi:945
#: lispref/customize.texi:946
#, no-wrap
msgid "Splicing into Lists"
msgstr ""

# type: subsection
#: lispref/customize.texi:488 lispref/customize.texi:994
#: lispref/customize.texi:995
#, no-wrap
msgid "Type Keywords"
msgstr ""

# type: subsection
#: lispref/customize.texi:488 lispref/customize.texi:1182
#: lispref/customize.texi:1183
#, no-wrap
msgid "Defining New Types"
msgstr ""

# type: Plain text
#: lispref/customize.texi:492
msgid ""
"All customization types are implemented as widgets; see @ref{Top, , "
"Introduction, widget, The Emacs Widget Library}, for details."
msgstr ""

# type: Plain text
#: lispref/customize.texi:497
msgid "This section describes all the simple customization types."
msgstr ""

# type: item
#: lispref/customize.texi:499 lispref/edebug.texi:1187
#, no-wrap
msgid "sexp"
msgstr ""

# type: table
#: lispref/customize.texi:503
msgid ""
"The value may be any Lisp object that can be printed and read back.  You can "
"use @code{sexp} as a fall-back for any option, if you don't want to take the "
"time to work out a more specific type to use."
msgstr ""

# type: var{#1}
#: lispref/customize.texi:504 lispref/display.texi:1650
#, no-wrap
msgid "integer"
msgstr ""

# type: table
#: lispref/customize.texi:507
msgid ""
"The value must be an integer, and is represented textually in the "
"customization buffer."
msgstr ""

# type: item
#: lispref/customize.texi:508
#, no-wrap
msgid "number"
msgstr ""

# type: table
#: lispref/customize.texi:511
msgid ""
"The value must be a number (floating point or integer), and is represented "
"textually in the customization buffer."
msgstr ""

# type: var{#1}
#: lispref/customize.texi:512 lispref/display.texi:1652
#, no-wrap
msgid "float"
msgstr ""

# type: table
#: lispref/customize.texi:515
msgid ""
"The value must be a floating point number, and is represented textually in "
"the customization buffer."
msgstr ""

# type: table
#: lispref/customize.texi:520
msgid ""
"The value must be a string, and the customization buffer shows just the "
"contents, with no delimiting @samp{\"} characters and no quoting with @samp"
"{\\}."
msgstr ""

# type: cindex
#: lispref/customize.texi:521 lispref/files.texi:2831 lispref/modes.texi:2478
#: lispref/searching.texi:215
#, no-wrap
msgid "regexp"
msgstr ""

# type: table
#: lispref/customize.texi:524
msgid ""
"Like @code{string} except that the string must be a valid regular expression."
msgstr ""

# type: item
#: lispref/customize.texi:525
#, no-wrap
msgid "character"
msgstr ""

# type: table
#: lispref/customize.texi:529
msgid ""
"The value must be a character code.  A character code is actually an "
"integer, but this type shows the value by inserting the character in the "
"buffer, rather than by showing the number."
msgstr ""

# type: item
#: lispref/customize.texi:530
#, no-wrap
msgid "file"
msgstr ""

# type: table
#: lispref/customize.texi:533
msgid ""
"The value must be a file name, and you can do completion with @kbd{M-@key"
"{TAB}}."
msgstr ""

# type: item
#: lispref/customize.texi:534
#, no-wrap
msgid "(file :must-match t)"
msgstr ""

# type: table
#: lispref/customize.texi:537
msgid ""
"The value must be a file name for an existing file, and you can do "
"completion with @kbd{M-@key{TAB}}."
msgstr ""

# type: item
#: lispref/customize.texi:538 lispref/internals.texi:1006
#, no-wrap
msgid "directory"
msgstr ""

# type: table
#: lispref/customize.texi:541
msgid ""
"The value must be a directory name, and you can do completion with @kbd{M-"
"@key{TAB}}."
msgstr ""

# type: item
#: lispref/customize.texi:542
#, no-wrap
msgid "hook"
msgstr ""

# type: table
#: lispref/customize.texi:548
msgid ""
"The value must be a list of functions (or a single function, but that is "
"obsolete usage).  This customization type is used for hook variables.  You "
"can use the @code{:options} keyword in a hook variable's @code{defcustom} to "
"specify a list of functions recommended for use in the hook; see @ref"
"{Variable Definitions}."
msgstr ""

# type: cindex
#: lispref/customize.texi:549 lispref/lists.texi:1532
#, no-wrap
msgid "alist"
msgstr ""

# type: table
#: lispref/customize.texi:554
msgid ""
"The value must be a list of cons-cells, the @sc{car} of each cell "
"representing a key, and the @sc{cdr} of the same cell representing an "
"associated value.  The user can add and delete key/value pairs, and edit "
"both the key and the value of each pair."
msgstr ""

# type: table
#: lispref/customize.texi:556
msgid "You can specify the key and value types like this:"
msgstr ""

# type: smallexample
#: lispref/customize.texi:559
#, no-wrap
msgid "(alist :key-type @var{key-type} :value-type @var{value-type})\n"
msgstr ""

# type: table
#: lispref/customize.texi:565
msgid ""
"where @var{key-type} and @var{value-type} are customization type "
"specifications.  The default key type is @code{sexp}, and the default value "
"type is @code{sexp}."
msgstr ""

# type: table
#: lispref/customize.texi:573
msgid ""
"The user can add any key matching the specified key type, but you can give "
"some keys a preferential treatment by specifying them with the @code{:"
"options} (see @ref{Variable Definitions}).  The specified keys will always "
"be shown in the customize buffer (together with a suitable value), with a "
"checkbox to include or exclude or disable the key/value pair from the "
"alist.  The user will not be able to edit the keys specified by the @code{:"
"options} keyword argument."
msgstr ""

# type: table
#: lispref/customize.texi:577
msgid ""
"The argument to the @code{:options} keywords should be a list of "
"specifications for reasonable keys in the alist.  Ordinarily, they are "
"simply atoms, which stand for themselves as.  For example:"
msgstr ""

# type: smallexample
#: lispref/customize.texi:580
#, no-wrap
msgid ":options '(\"foo\" \"bar\" \"baz\")\n"
msgstr ""

# type: table
#: lispref/customize.texi:585
msgid ""
"specifies that there are three ``known'' keys, namely @code{\"foo\"}, @code"
"{\"bar\"} and @code{\"baz\"}, which will always be shown first."
msgstr ""

# type: table
#: lispref/customize.texi:591
msgid ""
"You may want to restrict the value type for specific keys, for example, the "
"value associated with the @code{\"bar\"} key can only be an integer.  You "
"can specify this by using a list instead of an atom in the list.  The first "
"element will specify the key, like before, while the second element will "
"specify the value type.  For example:"
msgstr ""

# type: smallexample
#: lispref/customize.texi:594
#, no-wrap
msgid ":options '(\"foo\" (\"bar\" integer) \"baz\")\n"
msgstr ""

# type: table
#: lispref/customize.texi:603
msgid ""
"Finally, you may want to change how the key is presented.  By default, the "
"key is simply shown as a @code{const}, since the user cannot change the "
"special keys specified with the @code{:options} keyword.  However, you may "
"want to use a more specialized type for presenting the key, like @code"
"{function-item} if you know it is a symbol with a function binding.  This is "
"done by using a customization type specification instead of a symbol for the "
"key."
msgstr ""

# type: smallexample
#: lispref/customize.texi:607
#, no-wrap
msgid ""
":options '(\"foo\" ((function-item some-function) integer)\n"
"           \"baz\")\n"
msgstr ""

# type: table
#: lispref/customize.texi:611
msgid ""
"Many alists use lists with two elements, instead of cons cells.  For example,"
msgstr ""

# type: smallexample
#: lispref/customize.texi:615
#, no-wrap
msgid ""
"(defcustom list-alist '((\"foo\" 1) (\"bar\" 2) (\"baz\" 3))\n"
"  \"Each element is a list of the form (KEY VALUE).\")\n"
msgstr ""

# type: table
#: lispref/customize.texi:619
msgid "instead of"
msgstr ""

# type: smallexample
#: lispref/customize.texi:623
#, no-wrap
msgid ""
"(defcustom cons-alist '((\"foo\" . 1) (\"bar\" . 2) (\"baz\" . 3))\n"
"  \"Each element is a cons-cell (KEY . VALUE).\")\n"
msgstr ""

# type: table
#: lispref/customize.texi:629
msgid ""
"Because of the way lists are implemented on top of cons cells, you can treat "
"@code{list-alist} in the example above as a cons cell alist, where the value "
"type is a list with a single element containing the real value."
msgstr ""

# type: smallexample
#: lispref/customize.texi:634
#, no-wrap
msgid ""
"(defcustom list-alist '((\"foo\" 1) (\"bar\" 2) (\"baz\" 3))\n"
"  \"Each element is a list of the form (KEY VALUE).\"\n"
"  :type '(alist :value-type (group integer)))\n"
msgstr ""

# type: table
#: lispref/customize.texi:638
msgid ""
"The @code{group} widget is used here instead of @code{list} only because the "
"formatting is better suited for the purpose."
msgstr ""

# type: table
#: lispref/customize.texi:641
msgid ""
"Similarly, you can have alists with more values associated with each key, "
"using variations of this trick:"
msgstr ""

# type: smallexample
#: lispref/customize.texi:649
#, no-wrap
msgid ""
"(defcustom person-data '((\"brian\"  50 t)\n"
"                         (\"dorith\" 55 nil)\n"
"                         (\"ken\"    52 t))\n"
"  \"Alist of basic info about people.\n"
"Each element has the form (NAME AGE MALE-FLAG).\"\n"
"  :type '(alist :value-type (group integer boolean)))\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/customize.texi:657
#, no-wrap
msgid ""
"(defcustom pets '((\"brian\")\n"
"                  (\"dorith\" \"dog\" \"guppy\")\n"
"                  (\"ken\" \"cat\"))\n"
"  \"Alist of people's pets.\n"
"In an element (KEY . VALUE), KEY is the person's name,\n"
"and the VALUE is a list of that person's pets.\"\n"
"  :type '(alist :value-type (repeat string)))\n"
msgstr ""

# type: cindex
#: lispref/customize.texi:659 lispref/symbols.texi:403
#, no-wrap
msgid "plist"
msgstr "plist"

# type: table
#: lispref/customize.texi:663
msgid ""
"The @code{plist} custom type is similar to the @code{alist} (see above), "
"except that the information is stored as a property list, i.e. a list of "
"this form:"
msgstr ""

# type: smallexample
#: lispref/customize.texi:666
#, no-wrap
msgid "(@var{key} @var{value} @var{key} @var{value} @var{key} @var{value} @dots{})\n"
msgstr ""

# type: table
#: lispref/customize.texi:670
msgid ""
"The default @code{:key-type} for @code{plist} is @code{symbol}, rather than "
"@code{sexp}."
msgstr ""

# type: cindex
#: lispref/customize.texi:671 lispref/errors.texi:32 lispref/keymaps.texi:1008
#: lispref/modes.texi:1624 lispref/streams.texi:142 lispref/streams.texi:386
#: lispref/symbols.texi:9
#, no-wrap
msgid "symbol"
msgstr "symbole"

# type: table
#: lispref/customize.texi:674
msgid ""
"The value must be a symbol.  It appears in the customization buffer as the "
"name of the symbol."
msgstr ""

# type: item
#: lispref/customize.texi:675 lispref/eval.texi:452 lispref/functions.texi:44
#: lispref/functions.texi:45 lispref/functions.texi:1341
#: lispref/modes.texi:2492 lispref/streams.texi:105 lispref/streams.texi:369
#: lispref/text.texi:943
#, no-wrap
msgid "function"
msgstr "fonction"

# type: table
#: lispref/customize.texi:678
msgid ""
"The value must be either a lambda expression or a function name.  When it is "
"a function name, you can do completion with @kbd{M-@key{TAB}}."
msgstr ""

# type: cindex
#: lispref/customize.texi:679 lispref/minibuf.texi:412
#: lispref/variables.texi:9
#, no-wrap
msgid "variable"
msgstr "variable"

# type: table
#: lispref/customize.texi:682
msgid ""
"The value must be a variable name, and you can do completion with @kbd{M-@key"
"{TAB}}."
msgstr ""

# type: item
#: lispref/customize.texi:683 lispref/display.texi:1347
#: lispref/display.texi:4362 lispref/text.texi:2970
#, no-wrap
msgid "face"
msgstr ""

# type: table
#: lispref/customize.texi:686
msgid ""
"The value must be a symbol which is a face name, and you can do completion "
"with @kbd{M-@key{TAB}}."
msgstr ""

# type: cindex
#: lispref/customize.texi:687 lispref/intro.texi:174
#, no-wrap
msgid "boolean"
msgstr "booléen"

# type: table
#: lispref/customize.texi:693
msgid ""
"The value is boolean---either @code{nil} or @code{t}.  Note that by using "
"@code{choice} and @code{const} together (see the next section), you can "
"specify that the value must be @code{nil} or @code{t}, but also specify the "
"text to describe each value in a way that fits the specific meaning of the "
"alternative."
msgstr ""

# type: item
#: lispref/customize.texi:694
#, no-wrap
msgid "coding-system"
msgstr ""

# type: table
#: lispref/customize.texi:697
msgid ""
"The value must be a coding-system name, and you can do completion with @kbd"
"{M-@key{TAB}}."
msgstr ""

# type: var{#1}
#: lispref/customize.texi:698 lispref/display.texi:2003
#, no-wrap
msgid "color"
msgstr "couleur"

# type: table
#: lispref/customize.texi:701
msgid ""
"The value must be a valid color name, and you can do completion with @kbd{M-"
"@key{TAB}}.  A sample is provided."
msgstr ""

# type: cindex
#: lispref/customize.texi:705
#, no-wrap
msgid "Composite Types (customization)"
msgstr ""

# type: Plain text
#: lispref/customize.texi:711
msgid ""
"When none of the simple types is appropriate, you can use composite types, "
"which build new types from other types or from specified data.  The "
"specified types or data are called the @dfn{arguments} of the composite "
"type.  The composite type normally looks like this:"
msgstr ""

# type: example
#: lispref/customize.texi:714
#, no-wrap
msgid "(@var{constructor} @var{arguments}@dots{})\n"
msgstr ""

# type: Plain text
#: lispref/customize.texi:719
msgid ""
"but you can also add keyword-value pairs before the arguments, like this:"
msgstr ""

# type: example
#: lispref/customize.texi:722
#, no-wrap
msgid "(@var{constructor} @r{@{}@var{keyword} @var{value}@r{@}}@dots{} @var{arguments}@dots{})\n"
msgstr ""

# type: Plain text
#: lispref/customize.texi:726
msgid ""
"Here is a table of constructors and how to use them to write composite types:"
msgstr ""

# type: item
#: lispref/customize.texi:728
#, no-wrap
msgid "(cons @var{car-type} @var{cdr-type})"
msgstr ""

# type: table
#: lispref/customize.texi:733
msgid ""
"The value must be a cons cell, its @sc{car} must fit @var{car-type}, and its "
"@sc{cdr} must fit @var{cdr-type}.  For example, @code{(cons string symbol)} "
"is a customization type which matches values such as @code{(\"foo\" . foo)}."
msgstr ""

# type: table
#: lispref/customize.texi:737
msgid ""
"In the customization buffer, the @sc{car} and the @sc{cdr} are displayed and "
"edited separately, each according to the type that you specify for it."
msgstr ""

# type: item
#: lispref/customize.texi:738
#, no-wrap
msgid "(list @var{element-types}@dots{})"
msgstr ""

# type: table
#: lispref/customize.texi:742
msgid ""
"The value must be a list with exactly as many elements as the @var{element-"
"types} given; and each element must fit the corresponding @var{element-type}."
msgstr ""

# type: table
#: lispref/customize.texi:746
msgid ""
"For example, @code{(list integer string function)} describes a list of three "
"elements; the first element must be an integer, the second a string, and the "
"third a function."
msgstr ""

# type: table
#: lispref/customize.texi:749
msgid ""
"In the customization buffer, each element is displayed and edited "
"separately, according to the type specified for it."
msgstr ""

# type: item
#: lispref/customize.texi:750
#, no-wrap
msgid "(vector @var{element-types}@dots{})"
msgstr ""

# type: table
#: lispref/customize.texi:753
msgid ""
"Like @code{list} except that the value must be a vector instead of a list.  "
"The elements work the same as in @code{list}."
msgstr ""

# type: item
#: lispref/customize.texi:754
#, no-wrap
msgid "(choice @var{alternative-types}@dots{})"
msgstr ""

# type: table
#: lispref/customize.texi:758
msgid ""
"The value must fit at least one of @var{alternative-types}.  For example, "
"@code{(choice integer string)} allows either an integer or a string."
msgstr ""

# type: table
#: lispref/customize.texi:762
msgid ""
"In the customization buffer, the user selects an alternative using a menu, "
"and can then edit the value in the usual way for that alternative."
msgstr ""

# type: table
#: lispref/customize.texi:768
msgid ""
"Normally the strings in this menu are determined automatically from the "
"choices; however, you can specify different strings for the menu by "
"including the @code{:tag} keyword in the alternatives.  For example, if an "
"integer stands for a number of spaces, while a string is text to use "
"verbatim, you might write the customization type this way,"
msgstr ""

# type: example
#: lispref/customize.texi:772
#, no-wrap
msgid ""
"(choice (integer :tag \"Number of spaces\")\n"
"        (string :tag \"Literal text\"))\n"
msgstr ""

# type: table
#: lispref/customize.texi:776
msgid ""
"so that the menu offers @samp{Number of spaces} and @samp{Literal text}."
msgstr ""

# type: table
#: lispref/customize.texi:780
msgid ""
"In any alternative for which @code{nil} is not a valid value, other than a "
"@code{const}, you should specify a valid default for that alternative using "
"the @code{:value} keyword.  @xref{Type Keywords}."
msgstr ""

# type: table
#: lispref/customize.texi:785
msgid ""
"If some values are covered by more than one of the alternatives, customize "
"will choose the first alternative that the value fits.  This means you "
"should always list the most specific types first, and the most general "
"last.  Here's an example of proper usage:"
msgstr ""

# type: example
#: lispref/customize.texi:789
#, no-wrap
msgid ""
"(choice (const :tag \"Off\" nil)\n"
"        symbol (sexp :tag \"Other\"))\n"
msgstr ""

# type: table
#: lispref/customize.texi:794
msgid ""
"This way, the special value @code{nil} is not treated like other symbols, "
"and symbols are not treated like other Lisp expressions."
msgstr ""

# type: item
#: lispref/customize.texi:795
#, no-wrap
msgid "(radio @var{element-types}@dots{})"
msgstr ""

# type: table
#: lispref/customize.texi:801
msgid ""
"This is similar to @code{choice}, except that the choices are displayed "
"using `radio buttons' rather than a menu.  This has the advantage of "
"displaying documentation for the choices when applicable and so is often a "
"good choice for a choice between constant functions (@code{function-item} "
"customization types)."
msgstr ""

# type: item
#: lispref/customize.texi:802
#, no-wrap
msgid "(const @var{value})"
msgstr ""

# type: table
#: lispref/customize.texi:804
msgid "The value must be @var{value}---nothing else is allowed."
msgstr ""

# type: table
#: lispref/customize.texi:808
msgid ""
"The main use of @code{const} is inside of @code{choice}.  For example, @code"
"{(choice integer (const nil))} allows either an integer or @code{nil}."
msgstr ""

# type: table
#: lispref/customize.texi:811
msgid ""
"@code{:tag} is often used with @code{const}, inside of @code{choice}.  For "
"example,"
msgstr ""

# type: example
#: lispref/customize.texi:816
#, no-wrap
msgid ""
"(choice (const :tag \"Yes\" t)\n"
"        (const :tag \"No\" nil)\n"
"        (const :tag \"Ask\" foo))\n"
msgstr ""

# type: table
#: lispref/customize.texi:821
msgid ""
"describes a variable for which @code{t} means yes, @code{nil} means no, and "
"@code{foo} means ``ask.''"
msgstr ""

# type: item
#: lispref/customize.texi:822
#, no-wrap
msgid "(other @var{value})"
msgstr ""

# type: table
#: lispref/customize.texi:825
msgid ""
"This alternative can match any Lisp value, but if the user chooses this "
"alternative, that selects the value @var{value}."
msgstr ""

# type: table
#: lispref/customize.texi:828
msgid ""
"The main use of @code{other} is as the last element of @code{choice}.  For "
"example,"
msgstr ""

# type: example
#: lispref/customize.texi:833
#, no-wrap
msgid ""
"(choice (const :tag \"Yes\" t)\n"
"        (const :tag \"No\" nil)\n"
"        (other :tag \"Ask\" foo))\n"
msgstr ""

# type: table
#: lispref/customize.texi:841
msgid ""
"describes a variable for which @code{t} means yes, @code{nil} means no, and "
"anything else means ``ask.'' If the user chooses @samp{Ask} from the menu of "
"alternatives, that specifies the value @code{foo}; but any other value (not "
"@code{t}, @code{nil} or @code{foo}) displays as @samp{Ask}, just like @code"
"{foo}."
msgstr ""

# type: item
#: lispref/customize.texi:842
#, no-wrap
msgid "(function-item @var{function})"
msgstr ""

# type: table
#: lispref/customize.texi:847
msgid ""
"Like @code{const}, but used for values which are functions.  This displays "
"the documentation string as well as the function name.  The documentation "
"string is either the one you specify with @code{:doc}, or @var{function}'s "
"own documentation string."
msgstr ""

# type: item
#: lispref/customize.texi:848
#, no-wrap
msgid "(variable-item @var{variable})"
msgstr ""

# type: table
#: lispref/customize.texi:853
msgid ""
"Like @code{const}, but used for values which are variable names.  This "
"displays the documentation string as well as the variable name.  The "
"documentation string is either the one you specify with @code{:doc}, or @var"
"{variable}'s own documentation string."
msgstr ""

# type: item
#: lispref/customize.texi:854
#, no-wrap
msgid "(set @var{types}@dots{})"
msgstr ""

# type: table
#: lispref/customize.texi:857
msgid ""
"The value must be a list, and each element of the list must match one of the "
"@var{types} specified."
msgstr ""

# type: table
#: lispref/customize.texi:865
msgid ""
"This appears in the customization buffer as a checklist, so that each of @var"
"{types} may have either one corresponding element or none.  It is not "
"possible to specify two different elements that match the same one of @var"
"{types}.  For example, @code{(set integer symbol)} allows one integer and/or "
"one symbol in the list; it does not allow multiple integers or multiple "
"symbols.  As a result, it is rare to use nonspecific types such as @code"
"{integer} in a @code{set}."
msgstr ""

# type: table
#: lispref/customize.texi:868
msgid ""
"Most often, the @var{types} in a @code{set} are @code{const} types, as shown "
"here:"
msgstr ""

# type: example
#: lispref/customize.texi:871
#, no-wrap
msgid "(set (const :bold) (const :italic))\n"
msgstr ""

# type: table
#: lispref/customize.texi:874
msgid "Sometimes they describe possible elements in an alist:"
msgstr ""

# type: example
#: lispref/customize.texi:878
#, no-wrap
msgid ""
"(set (cons :tag \"Height\" (const height) integer)\n"
"     (cons :tag \"Width\" (const width) integer))\n"
msgstr ""

# type: table
#: lispref/customize.texi:883
msgid ""
"That lets the user specify a height value optionally and a width value "
"optionally."
msgstr ""

# type: item
#: lispref/customize.texi:884
#, no-wrap
msgid "(repeat @var{element-type})"
msgstr ""

# type: table
#: lispref/customize.texi:889
msgid ""
"The value must be a list and each element of the list must fit the type @var"
"{element-type}.  This appears in the customization buffer as a list of "
"elements, with @samp{[INS]} and @samp{[DEL]} buttons for adding more "
"elements or removing elements."
msgstr ""

# type: item
#: lispref/customize.texi:890
#, no-wrap
msgid "(restricted-sexp :match-alternatives @var{criteria})"
msgstr ""

# type: table
#: lispref/customize.texi:895
msgid ""
"This is the most general composite type construct.  The value may be any "
"Lisp object that satisfies one of @var{criteria}.  @var{criteria} should be "
"a list, and each element should be one of these possibilities:"
msgstr ""

# type: itemize
#: lispref/customize.texi:902
msgid ""
"A predicate---that is, a function of one argument that has no side effects, "
"and returns either @code{nil} or non-@code{nil} according to the argument.  "
"Using a predicate in the list says that objects for which the predicate "
"returns non-@code{nil} are acceptable."
msgstr ""

# type: itemize
#: lispref/customize.texi:906
msgid ""
"A quoted constant---that is, @code{'@var{object}}.  This sort of element in "
"the list says that @var{object} itself is an acceptable value."
msgstr ""

# type: example
#: lispref/customize.texi:913
#, no-wrap
msgid ""
"(restricted-sexp :match-alternatives\n"
"                 (integerp 't 'nil))\n"
msgstr ""

# type: table
#: lispref/customize.texi:917
msgid "allows integers, @code{t} and @code{nil} as legitimate values."
msgstr ""

# type: table
#: lispref/customize.texi:920
msgid ""
"The customization buffer shows all legitimate values using their read "
"syntax, and the user edits them textually."
msgstr ""

# type: Plain text
#: lispref/customize.texi:924
msgid ""
"Here is a table of the keywords you can use in keyword-value pairs in a "
"composite type:"
msgstr ""

# type: item
#: lispref/customize.texi:926 lispref/customize.texi:1080
#, no-wrap
msgid ":tag @var{tag}"
msgstr ""

# type: table
#: lispref/customize.texi:930
msgid ""
"Use @var{tag} as the name of this alternative, for user communication "
"purposes.  This is useful for a type that appears inside of a @code{choice}."
msgstr ""

# type: item
#: lispref/customize.texi:931
#, no-wrap
msgid ":match-alternatives @var{criteria}"
msgstr ""

# type: kindex
#: lispref/customize.texi:932
#, no-wrap
msgid "match-alternatives@r{, customization keyword}"
msgstr ""

# type: table
#: lispref/customize.texi:935
msgid ""
"Use @var{criteria} to match possible values.  This is used only in @code"
"{restricted-sexp}."
msgstr ""

# type: item
#: lispref/customize.texi:936
#, no-wrap
msgid ":args @var{argument-list}"
msgstr ""

# type: kindex
#: lispref/customize.texi:937
#, no-wrap
msgid "args@r{, customization keyword}"
msgstr ""

# type: table
#: lispref/customize.texi:943
msgid ""
"Use the elements of @var{argument-list} as the arguments of the type "
"construct.  For instance, @code{(const :args (foo))} is equivalent to @code"
"{(const foo)}.  You rarely need to write @code{:args} explicitly, because "
"normally the arguments are recognized automatically as whatever follows the "
"last keyword-value pair."
msgstr ""

# type: Plain text
#: lispref/customize.texi:952
msgid ""
"The @code{:inline} feature lets you splice a variable number of elements "
"into the middle of a list or vector.  You use it in a @code{set}, @code"
"{choice} or @code{repeat} type which appears among the element-types of a "
"@code{list} or @code{vector}."
msgstr ""

# type: Plain text
#: lispref/customize.texi:957
msgid ""
"Normally, each of the element-types in a @code{list} or @code{vector} "
"describes one and only one element of the list or vector.  Thus, if an "
"element-type is a @code{repeat}, that specifies a list of unspecified length "
"which appears as one element."
msgstr ""

# type: Plain text
#: lispref/customize.texi:963
msgid ""
"But when the element-type uses @code{:inline}, the value it matches is "
"merged directly into the containing sequence.  For example, if it matches a "
"list with three elements, those become three elements of the overall "
"sequence.  This is analogous to using @samp{,@@} in the backquote construct."
msgstr ""

# type: Plain text
#: lispref/customize.texi:967
msgid ""
"For example, to specify a list whose first element must be @code{baz} and "
"whose remaining arguments should be zero or more of @code{foo} and @code"
"{bar}, use this customization type:"
msgstr ""

# type: example
#: lispref/customize.texi:970
#, no-wrap
msgid "(list (const baz) (set :inline t (const foo) (const bar)))\n"
msgstr ""

# type: Plain text
#: lispref/customize.texi:975
msgid ""
"This matches values such as @code{(baz)}, @code{(baz foo)}, @code{(baz bar)} "
"and @code{(baz foo bar)}."
msgstr ""

# type: Plain text
#: lispref/customize.texi:981
msgid ""
"When the element-type is a @code{choice}, you use @code{:inline} not in the "
"@code{choice} itself, but in (some of) the alternatives of the @code"
"{choice}.  For example, to match a list which must start with a file name, "
"followed either by the symbol @code{t} or two strings, use this "
"customization type:"
msgstr ""

# type: example
#: lispref/customize.texi:986
#, no-wrap
msgid ""
"(list file\n"
"      (choice (const t)\n"
"              (list :inline t string string)))\n"
msgstr ""

# type: Plain text
#: lispref/customize.texi:993
msgid ""
"If the user chooses the first alternative in the choice, then the overall "
"list has two elements and the second element is @code{t}.  If the user "
"chooses the second alternative, then the overall list has three elements and "
"the second and third must be strings."
msgstr ""

# type: Plain text
#: lispref/customize.texi:1000
msgid ""
"You can specify keyword-argument pairs in a customization type after the "
"type name symbol.  Here are the keywords you can use, and their meanings:"
msgstr ""

# type: item
#: lispref/customize.texi:1002
#, no-wrap
msgid ":value @var{default}"
msgstr ""

# type: table
#: lispref/customize.texi:1007
msgid ""
"This is used for a type that appears as an alternative inside of @code"
"{choice}; it specifies the default value to use, at first, if and when the "
"user selects this alternative with the menu in the customization buffer."
msgstr ""

# type: table
#: lispref/customize.texi:1010
msgid ""
"Of course, if the actual value of the option fits this alternative, it will "
"appear showing the actual value, not @var{default}."
msgstr ""

# type: table
#: lispref/customize.texi:1013
msgid ""
"If @code{nil} is not a valid value for the alternative, then it is essential "
"to specify a valid default with @code{:value}."
msgstr ""

# type: item
#: lispref/customize.texi:1014
#, no-wrap
msgid ":format @var{format-string}"
msgstr ""

# type: kindex
#: lispref/customize.texi:1015
#, no-wrap
msgid "format@r{, customization keyword}"
msgstr ""

# type: table
#: lispref/customize.texi:1019
msgid ""
"This string will be inserted in the buffer to represent the value "
"corresponding to the type.  The following @samp{%} escapes are available for "
"use in @var{format-string}:"
msgstr ""

# type: item
#: lispref/customize.texi:1021
#, no-wrap
msgid "%[@var{button}%]"
msgstr ""

# type: table
#: lispref/customize.texi:1026
msgid ""
"Display the text @var{button} marked as a button.  The @code{:action} "
"attribute specifies what the button will do if the user invokes it; its "
"value is a function which takes two arguments---the widget which the button "
"appears in, and the event."
msgstr ""

# type: table
#: lispref/customize.texi:1029
msgid ""
"There is no way to specify two different buttons with different actions."
msgstr ""

# type: item
#: lispref/customize.texi:1030
#, no-wrap
msgid "%@{@var{sample}%@}"
msgstr ""

# type: table
#: lispref/customize.texi:1032
msgid "Show @var{sample} in a special face specified by @code{:sample-face}."
msgstr ""

# type: item
#: lispref/customize.texi:1033
#, no-wrap
msgid "%v"
msgstr ""

# type: table
#: lispref/customize.texi:1036
msgid ""
"Substitute the item's value.  How the value is represented depends on the "
"kind of item, and (for variables) on the customization type."
msgstr ""

# type: item
#: lispref/customize.texi:1037 lispref/os.texi:1208 lispref/strings.texi:771
#, no-wrap
msgid "%d"
msgstr ""

# type: table
#: lispref/customize.texi:1039
msgid "Substitute the item's documentation string."
msgstr ""

# type: item
#: lispref/customize.texi:1040 lispref/os.texi:1214
#, no-wrap
msgid "%h"
msgstr ""

# type: table
#: lispref/customize.texi:1044
msgid ""
"Like @samp{%d}, but if the documentation string is more than one line, add "
"an active field to control whether to show all of it or just the first line."
msgstr ""

# type: item
#: lispref/customize.texi:1045 lispref/modes.texi:1996 lispref/os.texi:1240
#, no-wrap
msgid "%t"
msgstr ""

# type: table
#: lispref/customize.texi:1048
msgid ""
"Substitute the tag here.  You specify the tag with the @code{:tag} keyword."
msgstr ""

# type: item
#: lispref/customize.texi:1049 lispref/modes.texi:2033
#: lispref/strings.texi:797
#, no-wrap
msgid "%%"
msgstr ""

# type: table
#: lispref/customize.texi:1051
msgid "Display a literal @samp{%}."
msgstr ""

# type: item
#: lispref/customize.texi:1053
#, no-wrap
msgid ":action @var{action}"
msgstr ""

# type: kindex
#: lispref/customize.texi:1054
#, no-wrap
msgid "action@r{, customization keyword}"
msgstr ""

# type: table
#: lispref/customize.texi:1056
msgid "Perform @var{action} if the user clicks on a button."
msgstr ""

# type: item
#: lispref/customize.texi:1057
#, no-wrap
msgid ":button-face @var{face}"
msgstr ""

# type: kindex
#: lispref/customize.texi:1058
#, no-wrap
msgid "button-face@r{, customization keyword}"
msgstr ""

# type: table
#: lispref/customize.texi:1061
msgid ""
"Use the face @var{face} (a face name or a list of face names) for button "
"text displayed with @samp{%[@dots{}%]}."
msgstr ""

# type: item
#: lispref/customize.texi:1062
#, no-wrap
msgid ":button-prefix @var{prefix}"
msgstr ""

# type: itemx
#: lispref/customize.texi:1063
#, no-wrap
msgid ":button-suffix @var{suffix}"
msgstr ""

# type: kindex
#: lispref/customize.texi:1064
#, no-wrap
msgid "button-prefix@r{, customization keyword}"
msgstr ""

# type: kindex
#: lispref/customize.texi:1065
#, no-wrap
msgid "button-suffix@r{, customization keyword}"
msgstr ""

# type: table
#: lispref/customize.texi:1068
msgid ""
"These specify the text to display before and after a button.  Each can be:"
msgstr ""

# type: table
#: lispref/customize.texi:1072
msgid "No text is inserted."
msgstr ""

# type: item
#: lispref/customize.texi:1073 lispref/processes.texi:233
#: lispref/text.texi:3973
#, no-wrap
msgid "a string"
msgstr ""

# type: table
#: lispref/customize.texi:1075
msgid "The string is inserted literally."
msgstr ""

# type: item
#: lispref/customize.texi:1076 lispref/edebug.texi:1138
#, no-wrap
msgid "a symbol"
msgstr ""

# type: table
#: lispref/customize.texi:1078
msgid "The symbol's value is used."
msgstr ""

# type: table
#: lispref/customize.texi:1083
msgid ""
"Use @var{tag} (a string) as the tag for the value (or part of the value)  "
"that corresponds to this type."
msgstr ""

# type: item
#: lispref/customize.texi:1084
#, no-wrap
msgid ":doc @var{doc}"
msgstr ""

# type: kindex
#: lispref/customize.texi:1085
#, no-wrap
msgid "doc@r{, customization keyword}"
msgstr ""

# type: table
#: lispref/customize.texi:1090
msgid ""
"Use @var{doc} as the documentation string for this value (or part of the "
"value) that corresponds to this type.  In order for this to work, you must "
"specify a value for @code{:format}, and use @samp{%d} or @samp{%h} in that "
"value."
msgstr ""

# type: table
#: lispref/customize.texi:1094
msgid ""
"The usual reason to specify a documentation string for a type is to provide "
"more information about the meanings of alternatives inside a @code{:choice} "
"type or the parts of some other composite type."
msgstr ""

# type: item
#: lispref/customize.texi:1095
#, no-wrap
msgid ":help-echo @var{motion-doc}"
msgstr ""

# type: kindex
#: lispref/customize.texi:1096
#, no-wrap
msgid "help-echo@r{, customization keyword}"
msgstr ""

# type: table
#: lispref/customize.texi:1103
msgid ""
"When you move to this item with @code{widget-forward} or @code{widget-"
"backward}, it will display the string @var{motion-doc} in the echo area.  In "
"addition, @var{motion-doc} is used as the mouse @code{help-echo} string and "
"may actually be a function or form evaluated to yield a help string.  If it "
"is a function, it is called with one argument, the widget."
msgstr ""

# type: item
#: lispref/customize.texi:1104
#, no-wrap
msgid ":match @var{function}"
msgstr ""

# type: kindex
#: lispref/customize.texi:1105
#, no-wrap
msgid "match@r{, customization keyword}"
msgstr ""

# type: table
#: lispref/customize.texi:1110
msgid ""
"Specify how to decide whether a value matches the type.  The corresponding "
"value, @var{function}, should be a function that accepts two arguments, a "
"widget and a value; it should return non-@code{nil} if the value is "
"acceptable."
msgstr ""

# type: item
#: lispref/customize.texi:1112
#, no-wrap
msgid ":indent @var{columns}"
msgstr ""

# type: ignore
#: lispref/customize.texi:1117
#, no-wrap
msgid ""
"Indent this item by @var{columns} columns.  The indentation is used for\n"
"@samp{%n}, and automatically for group names, for checklists and radio\n"
"buttons, and for editable lists.  It affects the whole of the\n"
"item except for the first line.\n"
"\n"
msgstr ""

# type: item
#: lispref/customize.texi:1118
#, no-wrap
msgid ":offset @var{columns}"
msgstr ""

# type: ignore
#: lispref/customize.texi:1121
#, no-wrap
msgid ""
"An integer indicating how many extra spaces to indent the subitems of\n"
"this item.  By default, subitems are indented the same as their parent.\n"
"\n"
msgstr ""

# type: item
#: lispref/customize.texi:1122
#, no-wrap
msgid ":extra-offset"
msgstr ""

# type: ignore
#: lispref/customize.texi:1125
#, no-wrap
msgid ""
"An integer indicating how many extra spaces to add to this item's\n"
"indentation, compared to its parent.\n"
"\n"
msgstr ""

# type: item
#: lispref/customize.texi:1126
#, no-wrap
msgid ":notify"
msgstr ""

# type: ignore
#: lispref/customize.texi:1131
#, no-wrap
msgid ""
"A function called each time the item or a subitem is changed.  The\n"
"function is called with two or three arguments.  The first argument is\n"
"the item itself, the second argument is the item that was changed, and\n"
"the third argument is the event leading to the change, if any.\n"
"\n"
msgstr ""

# type: item
#: lispref/customize.texi:1132
#, no-wrap
msgid ":menu-tag"
msgstr ""

# type: ignore
#: lispref/customize.texi:1135
#, no-wrap
msgid ""
"A tag used in the menu when the widget is used as an option in a\n"
"@code{menu-choice} widget.\n"
"\n"
msgstr ""

# type: item
#: lispref/customize.texi:1136
#, no-wrap
msgid ":menu-tag-get"
msgstr ""

# type: ignore
#: lispref/customize.texi:1141
#, no-wrap
msgid ""
"A function used for finding the tag when the widget is used as an option\n"
"in a @code{menu-choice} widget.  By default, the tag used will be either the\n"
"@code{:menu-tag} or @code{:tag} property if present, or the @code{princ}\n"
"representation of the @code{:value} property if not.\n"
"\n"
msgstr ""

# type: item
#: lispref/customize.texi:1142
#, no-wrap
msgid ":validate"
msgstr ""

# type: ignore
#: lispref/customize.texi:1147
#, no-wrap
msgid ""
"A function which takes a widget as an argument, and return @code{nil}\n"
"if the widget's current value is valid for the widget.  Otherwise, it\n"
"should return the widget containing the invalid data, and set that\n"
"widget's @code{:error} property to a string explaining the error.\n"
"\n"
msgstr ""

# type: ignore
#: lispref/customize.texi:1150
#, no-wrap
msgid ""
"You can use the function @code{widget-children-validate} for this job;\n"
"it tests that all children of @var{widget} are valid.\n"
"\n"
msgstr ""

# type: item
#: lispref/customize.texi:1151
#, no-wrap
msgid ":tab-order"
msgstr ""

# type: ignore
#: lispref/customize.texi:1155
#, no-wrap
msgid ""
"Specify the order in which widgets are traversed with\n"
"@code{widget-forward} or @code{widget-backward}.  This is only partially\n"
"implemented.\n"
"\n"
msgstr ""

# type: enumerate
#: lispref/customize.texi:1159
#, no-wrap
msgid ""
"Widgets with tabbing order @code{-1} are ignored.\n"
"\n"
msgstr ""

# type: enumerate
#: lispref/customize.texi:1164
#, no-wrap
msgid ""
"(Unimplemented) When on a widget with tabbing order @var{n}, go to the\n"
"next widget in the buffer with tabbing order @var{n+1} or @code{nil},\n"
"whichever comes first.\n"
"\n"
msgstr ""

# type: enumerate
#: lispref/customize.texi:1168
#, no-wrap
msgid ""
"When on a widget with no tabbing order specified, go to the next widget\n"
"in the buffer with a positive tabbing order, or @code{nil}\n"
msgstr ""

# type: item
#: lispref/customize.texi:1170
#, no-wrap
msgid ":parent"
msgstr ""

# type: ignore
#: lispref/customize.texi:1173
#, no-wrap
msgid ""
"The parent of a nested widget (e.g., a @code{menu-choice} item or an\n"
"element of a @code{editable-list} widget).\n"
"\n"
msgstr ""

# type: item
#: lispref/customize.texi:1174
#, no-wrap
msgid ":sibling-args"
msgstr ""

# type: ignore
#: lispref/customize.texi:1179
#, no-wrap
msgid ""
"This keyword is only used for members of a @code{radio-button-choice} or\n"
"@code{checklist}.  The value should be a list of extra keyword\n"
"arguments, which will be used when creating the @code{radio-button} or\n"
"@code{checkbox} associated with this item.\n"
msgstr ""

# type: Plain text
#: lispref/customize.texi:1193
msgid ""
"In the previous sections we have described how to construct elaborate type "
"specifications for @code{defcustom}.  In some cases you may want to give "
"such a type specification a name.  The obvious case is when you are using "
"the same type for many user options: rather than repeat the specification "
"for each option, you can give the type specification a name, and use that "
"name each @code{defcustom}.  The other case is when a user option's value is "
"a recursive data structure.  To make it possible for a datatype to refer to "
"itself, it needs to have a name."
msgstr ""

# type: Plain text
#: lispref/customize.texi:1200
msgid ""
"Since custom types are implemented as widgets, the way to define a new "
"customize type is to define a new widget.  We are not going to describe the "
"widget interface here in details, see @ref{Top, , Introduction, widget, The "
"Emacs Widget Library}, for that.  Instead we are going to demonstrate the "
"minimal functionality needed for defining new customize types by a simple "
"example."
msgstr ""

# type: example
#: lispref/customize.texi:1211
#, no-wrap
msgid ""
"(define-widget 'binary-tree-of-string 'lazy\n"
"  \"A binary tree made of cons-cells and strings.\"\n"
"  :offset 4\n"
"  :tag \"Node\"\n"
"  :type '(choice (string :tag \"Leaf\" :value \"\")\n"
"                 (cons :tag \"Interior\"\n"
"                       :value (\"\" . \"\")\n"
"                       binary-tree-of-string\n"
"                       binary-tree-of-string)))\n"
"\n"
msgstr ""

# type: example
#: lispref/customize.texi:1215
#, no-wrap
msgid ""
"(defcustom foo-bar \"\"\n"
"  \"Sample variable holding a binary tree of strings.\"\n"
"  :type 'binary-tree-of-string)\n"
msgstr ""

# type: Plain text
#: lispref/customize.texi:1228
msgid ""
"The function to define a new widget is called @code{define-widget}.  The "
"first argument is the symbol we want to make a new widget type.  The second "
"argument is a symbol representing an existing widget, the new widget is "
"going to be defined in terms of difference from the existing widget.  For "
"the purpose of defining new customization types, the @code{lazy} widget is "
"perfect, because it accepts a @code{:type} keyword argument with the same "
"syntax as the keyword argument to @code{defcustom} with the same name.  The "
"third argument is a documentation string for the new widget.  You will be "
"able to see that string with the @kbd{M-x widget-browse @key{RET} binary-"
"tree-of-string @key{RET}} command."
msgstr ""

# type: Plain text
#: lispref/customize.texi:1239
msgid ""
"After these mandatory arguments follow the keyword arguments.  The most "
"important is @code{:type}, which describes the data type we want to match "
"with this widget.  Here a @code{binary-tree-of-string} is described as being "
"either a string, or a cons-cell whose car and cdr are themselves both @code"
"{binary-tree-of-string}.  Note the reference to the widget type we are "
"currently in the process of defining.  The @code{:tag} attribute is a string "
"to name the widget in the user interface, and the @code{:offset} argument is "
"there to ensure that child nodes are indented four spaces relative to the "
"parent node, making the tree structure apparent in the customization buffer."
msgstr ""

# type: Plain text
#: lispref/customize.texi:1242
msgid ""
"The @code{defcustom} shows how the new widget can be used as an ordinary "
"customization type."
msgstr ""

# type: Plain text
#: lispref/customize.texi:1250
msgid ""
"The reason for the name @code{lazy} is that the other composite widgets "
"convert their inferior widgets to internal form when the widget is "
"instantiated in a buffer.  This conversion is recursive, so the inferior "
"widgets will convert @emph{their} inferior widgets.  If the data structure "
"is itself recursive, this conversion is an infinite recursion.  The @code"
"{lazy} widget prevents the recursion: it convert its @code{:type} argument "
"only when needed."
msgstr ""

# type: ignore
#: lispref/customize.texi:1253
#, no-wrap
msgid "   arch-tag: d1b8fad3-f48c-4ce4-a402-f73b5ef19bd2\n"
msgstr "   arch-tag: d1b8fad3-f48c-4ce4-a402-f73b5ef19bd2\n"

# type: menu
#: lispref/debugging.texi:7 lispref/elisp.texi:139 lispref/minibuf.texi:7
#: lispref/streams.texi:7 lispref/vol1.texi:240 lispref/vol2.texi:241
#, no-wrap
msgid "Read and Print"
msgstr ""

# type: menu
#: lispref/debugging.texi:8 lispref/vol1.texi:521 lispref/vol2.texi:522
#, no-wrap
msgid "Debugging Lisp Programs"
msgstr ""

# type: Plain text
#: lispref/debugging.texi:12
msgid ""
"There are three ways to investigate a problem in an Emacs Lisp program, "
"depending on what you are doing with the program when the problem appears."
msgstr ""

# type: itemize
#: lispref/debugging.texi:19
msgid ""
"If the problem occurs when you run the program, you can use a Lisp debugger "
"to investigate what is happening during execution.  In addition to the "
"ordinary debugger, Emacs comes with a source-level debugger, Edebug.  This "
"chapter describes both of them."
msgstr ""

# type: itemize
#: lispref/debugging.texi:23
msgid ""
"If the problem is syntactic, so that Lisp cannot even read the program, you "
"can use the Emacs facilities for editing Lisp to localize it."
msgstr ""

# type: itemize
#: lispref/debugging.texi:27
msgid ""
"If the problem occurs when trying to compile the program with the byte "
"compiler, you need to know how to examine the compiler's input buffer."
msgstr ""

# type: menu
#: lispref/debugging.texi:35 lispref/debugging.texi:45 lispref/edebug.texi:13
#: lispref/vol1.texi:527 lispref/vol2.texi:528
#, no-wrap
msgid "Debugger"
msgstr ""

# type: menu
#: lispref/debugging.texi:35 lispref/vol1.texi:527 lispref/vol2.texi:528
msgid "How the Emacs Lisp debugger is implemented."
msgstr ""

# type: menu
#: lispref/debugging.texi:35 lispref/edebug.texi:13 lispref/edebug.texi:14
#: lispref/vol1.texi:527 lispref/vol2.texi:528
#, no-wrap
msgid "Edebug"
msgstr ""

# type: menu
#: lispref/debugging.texi:35 lispref/vol1.texi:527 lispref/vol2.texi:528
msgid "A source-level Emacs Lisp debugger."
msgstr ""

# type: menu
#: lispref/debugging.texi:35 lispref/debugging.texi:676 lispref/edebug.texi:13
#: lispref/vol1.texi:527 lispref/vol2.texi:528
#, no-wrap
msgid "Syntax Errors"
msgstr ""

# type: menu
#: lispref/debugging.texi:35 lispref/vol1.texi:527 lispref/vol2.texi:528
msgid "How to find syntax errors."
msgstr ""

# type: section
#: lispref/debugging.texi:35 lispref/debugging.texi:765
#: lispref/debugging.texi:766
#, no-wrap
msgid "Test Coverage"
msgstr ""

# type: menu
#: lispref/debugging.texi:35
msgid "Ensuring you have tested all branches in your code."
msgstr ""

# type: menu
#: lispref/debugging.texi:35 lispref/debugging.texi:806 lispref/vol1.texi:527
#: lispref/vol2.texi:528
#, no-wrap
msgid "Compilation Errors"
msgstr ""

# type: menu
#: lispref/debugging.texi:35
msgid "How to find errors that show up in byte compilation."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:41
msgid ""
"Another useful debugging tool is the dribble file.  When a dribble file is "
"open, Emacs copies all keyboard input characters to that file.  Afterward, "
"you can examine the file to find out what input was used.  @xref{Terminal "
"Input}."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:44
msgid ""
"For debugging problems in terminal descriptions, the @code{open-termscript} "
"function can be useful.  @xref{Terminal Output}."
msgstr ""

# type: menu
#: lispref/debugging.texi:46 lispref/vol1.texi:529 lispref/vol2.texi:530
#, no-wrap
msgid "The Lisp Debugger"
msgstr ""

# type: cindex
#: lispref/debugging.texi:47
#, no-wrap
msgid "debugger for Emacs Lisp"
msgstr ""

# type: cindex
#: lispref/debugging.texi:48
#, no-wrap
msgid "Lisp debugger"
msgstr ""

# type: cindex
#: lispref/debugging.texi:49
#, no-wrap
msgid "break"
msgstr ""

# type: Plain text
#: lispref/debugging.texi:58
msgid ""
"The ordinary @dfn{Lisp debugger} provides the ability to suspend evaluation "
"of a form.  While evaluation is suspended (a state that is commonly known as "
"a @dfn{break}), you may examine the run time stack, examine the values of "
"local or global variables, or change those values.  Since a break is a "
"recursive edit, all the usual editing facilities of Emacs are available; you "
"can even run programs that will enter the debugger recursively.  @xref"
"{Recursive Editing}."
msgstr ""

# type: menu
#: lispref/debugging.texi:68 lispref/debugging.texi:70 lispref/vol1.texi:537
#: lispref/vol2.texi:538
#, no-wrap
msgid "Error Debugging"
msgstr ""

# type: menu
#: lispref/debugging.texi:68 lispref/vol1.texi:537 lispref/vol2.texi:538
msgid "Entering the debugger when an error happens."
msgstr ""

# type: node
#: lispref/debugging.texi:68 lispref/debugging.texi:169
#, no-wrap
msgid "Infinite Loops"
msgstr ""

# type: menu
#: lispref/debugging.texi:68
msgid "Stopping and debugging a program that doesn't exit."
msgstr ""

# type: menu
#: lispref/debugging.texi:68 lispref/debugging.texi:200 lispref/vol1.texi:537
#: lispref/vol2.texi:538
#, no-wrap
msgid "Function Debugging"
msgstr ""

# type: menu
#: lispref/debugging.texi:68 lispref/vol1.texi:537 lispref/vol2.texi:538
msgid "Entering it when a certain function is called."
msgstr ""

# type: menu
#: lispref/debugging.texi:68 lispref/debugging.texi:283 lispref/vol1.texi:537
#: lispref/vol2.texi:538
#, no-wrap
msgid "Explicit Debug"
msgstr ""

# type: menu
#: lispref/debugging.texi:68 lispref/vol1.texi:537 lispref/vol2.texi:538
msgid "Entering it at a certain point in the program."
msgstr ""

# type: menu
#: lispref/debugging.texi:68 lispref/debugging.texi:299 lispref/vol1.texi:537
#: lispref/vol2.texi:538
#, no-wrap
msgid "Using Debugger"
msgstr ""

# type: menu
#: lispref/debugging.texi:68 lispref/vol1.texi:537 lispref/vol2.texi:538
msgid "What the debugger does; what you see while in it."
msgstr ""

# type: menu
#: lispref/debugging.texi:68 lispref/debugging.texi:341
#: lispref/debugging.texi:342 lispref/vol1.texi:537 lispref/vol2.texi:538
#, no-wrap
msgid "Debugger Commands"
msgstr ""

# type: menu
#: lispref/debugging.texi:68 lispref/vol1.texi:537 lispref/vol2.texi:538
msgid "Commands used while in the debugger."
msgstr ""

# type: menu
#: lispref/debugging.texi:68 lispref/debugging.texi:436
#: lispref/debugging.texi:437 lispref/vol1.texi:537 lispref/vol2.texi:538
#, no-wrap
msgid "Invoking the Debugger"
msgstr ""

# type: menu
#: lispref/debugging.texi:68 lispref/vol1.texi:537 lispref/vol2.texi:538
msgid "How to call the function @code{debug}."
msgstr ""

# type: menu
#: lispref/debugging.texi:68 lispref/debugging.texi:531 lispref/vol1.texi:537
#: lispref/vol2.texi:538
#, no-wrap
msgid "Internals of Debugger"
msgstr ""

# type: menu
#: lispref/debugging.texi:68 lispref/vol1.texi:537 lispref/vol2.texi:538
msgid "Subroutines of the debugger, and global variables."
msgstr ""

# type: subsection
#: lispref/debugging.texi:71
#, no-wrap
msgid "Entering the Debugger on an Error"
msgstr ""

# type: cindex
#: lispref/debugging.texi:72
#, no-wrap
msgid "error debugging"
msgstr ""

# type: cindex
#: lispref/debugging.texi:73
#, no-wrap
msgid "debugging errors"
msgstr ""

# type: Plain text
#: lispref/debugging.texi:78
msgid ""
"The most important time to enter the debugger is when a Lisp error happens.  "
"This allows you to investigate the immediate causes of the error."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:86
msgid ""
"However, entry to the debugger is not a normal consequence of an error.  "
"Many commands frequently cause Lisp errors when invoked inappropriately "
"(such as @kbd{C-f} at the end of the buffer), and during ordinary editing it "
"would be very inconvenient to enter the debugger each time this happens.  So "
"if you want errors to enter the debugger, set the variable @code{debug-on-"
"error} to non-@code{nil}.  (The command @code{toggle-debug-on-error} "
"provides an easy way to do this.)"
msgstr ""

# type: defopt
#: lispref/debugging.texi:87
#, no-wrap
msgid "debug-on-error"
msgstr "debug-on-error"

# type: defopt
#: lispref/debugging.texi:93
msgid ""
"This variable determines whether the debugger is called when an error is "
"signaled and not handled.  If @code{debug-on-error} is @code{t}, all kinds "
"of errors call the debugger (except those listed in @code{debug-ignored-"
"errors}).  If it is @code{nil}, none call the debugger."
msgstr ""

# type: defopt
#: lispref/debugging.texi:98
msgid ""
"The value can also be a list of error conditions that should call the "
"debugger.  For example, if you set it to the list @code{(void-variable)}, "
"then only errors about a variable that has no value invoke the debugger."
msgstr ""

# type: defopt
#: lispref/debugging.texi:102
msgid ""
"When this variable is non-@code{nil}, Emacs does not create an error handler "
"around process filter functions and sentinels.  Therefore, errors in these "
"functions also invoke the debugger.  @xref{Processes}."
msgstr ""

# type: defopt
#: lispref/debugging.texi:104
#, no-wrap
msgid "debug-ignored-errors"
msgstr "debug-ignored-errors"

# type: defopt
#: lispref/debugging.texi:111
msgid ""
"This variable specifies certain kinds of errors that should not enter the "
"debugger.  Its value is a list of error condition symbols and/or regular "
"expressions.  If the error has any of those condition symbols, or if the "
"error message matches any of the regular expressions, then that error does "
"not enter the debugger, regardless of the value of @code{debug-on-error}."
msgstr ""

# type: defopt
#: lispref/debugging.texi:118
msgid ""
"The normal value of this variable lists several errors that happen often "
"during editing but rarely result from bugs in Lisp programs.  However, "
"``rarely'' is not ``never''; if your program fails with an error that "
"matches this list, you will need to change this list in order to debug the "
"error.  The easiest way is usually to set @code{debug-ignored-errors} to "
"@code{nil}."
msgstr ""

# type: defopt
#: lispref/debugging.texi:120
#, no-wrap
msgid "eval-expression-debug-on-error"
msgstr "eval-expression-debug-on-error"

# type: defopt
#: lispref/debugging.texi:127
msgid ""
"If this variable has a non-@code{nil} value, then @code{debug-on-error} is "
"set to @code{t} when evaluating with the command @code{eval-expression}.  If "
"@code{eval-expression-debug-on-error} is @code{nil}, then the value of @code"
"{debug-on-error} is not changed.  @xref{Lisp Eval,, Evaluating Emacs-Lisp "
"Expressions, emacs, The GNU Emacs Manual}."
msgstr ""

# type: defopt
#: lispref/debugging.texi:129
#, no-wrap
msgid "debug-on-signal"
msgstr "debug-on-signal"

# type: defopt
#: lispref/debugging.texi:134
msgid ""
"Normally, errors that are caught by @code{condition-case} never run the "
"debugger, even if @code{debug-on-error} is non-@code{nil}.  In other words, "
"@code{condition-case} gets a chance to handle the error before the debugger "
"gets a chance."
msgstr ""

# type: defopt
#: lispref/debugging.texi:140
msgid ""
"If you set @code{debug-on-signal} to a non-@code{nil} value, then the "
"debugger gets the first chance at every error; an error will invoke the "
"debugger regardless of any @code{condition-case}, if it fits the criteria "
"specified by the values of @code{debug-on-error} and @code{debug-ignored-"
"errors}."
msgstr ""

# type: defopt
#: lispref/debugging.texi:146
msgid ""
"@strong{Warning:} This variable is strong medicine! Various parts of Emacs "
"handle errors in the normal course of affairs, and you may not even realize "
"that errors happen there.  If you set @code{debug-on-signal} to a non-@code"
"{nil} value, those errors will enter the debugger."
msgstr ""

# type: defopt
#: lispref/debugging.texi:149
msgid ""
"@strong{Warning:} @code{debug-on-signal} has no effect when @code{debug-on-"
"error} is @code{nil}."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:156
msgid ""
"To debug an error that happens during loading of the init file, use the "
"option @samp{--debug-init}.  This binds @code{debug-on-error} to @code{t} "
"while loading the init file, and bypasses the @code{condition-case} which "
"normally catches errors in the init file."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:163
msgid ""
"If your init file sets @code{debug-on-error}, the effect may not last past "
"the end of loading the init file.  (This is an undesirable byproduct of the "
"code that implements the @samp{--debug-init} command line option.)  The best "
"way to make the init file set @code{debug-on-error} permanently is with @code"
"{after-init-hook}, like this:"
msgstr ""

# type: example
#: lispref/debugging.texi:167
#, no-wrap
msgid ""
"(add-hook 'after-init-hook\n"
"          (lambda () (setq debug-on-error t)))\n"
msgstr ""

# type: subsection
#: lispref/debugging.texi:170
#, no-wrap
msgid "Debugging Infinite Loops"
msgstr ""

# type: cindex
#: lispref/debugging.texi:171
#, no-wrap
msgid "infinite loops"
msgstr ""

# type: cindex
#: lispref/debugging.texi:172
#, no-wrap
msgid "loops, infinite"
msgstr ""

# type: cindex
#: lispref/debugging.texi:173
#, no-wrap
msgid "quitting from infinite loop"
msgstr ""

# type: cindex
#: lispref/debugging.texi:174
#, no-wrap
msgid "stopping an infinite loop"
msgstr ""

# type: Plain text
#: lispref/debugging.texi:179
msgid ""
"When a program loops infinitely and fails to return, your first problem is "
"to stop the loop.  On most operating systems, you can do this with @kbd{C-"
"g}, which causes a @dfn{quit}."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:186
msgid ""
"Ordinary quitting gives no information about why the program was looping.  "
"To get more information, you can set the variable @code{debug-on-quit} to "
"non-@code{nil}.  Quitting with @kbd{C-g} is not considered an error, and "
"@code{debug-on-error} has no effect on the handling of @kbd{C-g}.  Likewise, "
"@code{debug-on-quit} has no effect on errors."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:191
msgid ""
"Once you have the debugger running in the middle of the infinite loop, you "
"can proceed from the debugger using the stepping commands.  If you step "
"through the entire loop, you will probably get enough information to solve "
"the problem."
msgstr ""

# type: defopt
#: lispref/debugging.texi:192
#, no-wrap
msgid "debug-on-quit"
msgstr "debug-on-quit"

# type: defopt
#: lispref/debugging.texi:198
msgid ""
"This variable determines whether the debugger is called when @code{quit} is "
"signaled and not handled.  If @code{debug-on-quit} is non-@code{nil}, then "
"the debugger is called whenever you quit (that is, type @kbd{C-g}).  If @code"
"{debug-on-quit} is @code{nil}, then the debugger is not called when you "
"quit.  @xref{Quitting}."
msgstr ""

# type: subsection
#: lispref/debugging.texi:201
#, no-wrap
msgid "Entering the Debugger on a Function Call"
msgstr ""

# type: cindex
#: lispref/debugging.texi:202
#, no-wrap
msgid "function call debugging"
msgstr ""

# type: cindex
#: lispref/debugging.texi:203
#, no-wrap
msgid "debugging specific functions"
msgstr ""

# type: Plain text
#: lispref/debugging.texi:211
msgid ""
"To investigate a problem that happens in the middle of a program, one useful "
"technique is to enter the debugger whenever a certain function is called.  "
"You can do this to the function in which the problem occurs, and then step "
"through the function, or you can do this to a function called shortly before "
"the problem, step quickly over the call to that function, and then step "
"through its caller."
msgstr ""

# type: deffn
#: lispref/debugging.texi:212
#, no-wrap
msgid "Command debug-on-entry function-name"
msgstr ""

# type: deffn
#: lispref/debugging.texi:217
msgid ""
"This function requests @var{function-name} to invoke the debugger each time "
"it is called.  It works by inserting the form @code{(implement-debug-on-"
"entry)} into the function definition as the first form."
msgstr ""

# type: deffn
#: lispref/debugging.texi:226
msgid ""
"Any function or macro defined as Lisp code may be set to break on entry, "
"regardless of whether it is interpreted code or compiled code.  If the "
"function is a command, it will enter the debugger when called from Lisp and "
"when called interactively (after the reading of the arguments).  You can "
"also set debug-on-entry for primitive functions (i.e., those written in C) "
"this way, but it only takes effect when the primitive is called from Lisp "
"code.  Debug-on-entry is not allowed for special forms."
msgstr ""

# type: deffn
#: lispref/debugging.texi:231
msgid ""
"When @code{debug-on-entry} is called interactively, it prompts for @var"
"{function-name} in the minibuffer.  If the function is already set up to "
"invoke the debugger on entry, @code{debug-on-entry} does nothing.  @code"
"{debug-on-entry} always returns @var{function-name}."
msgstr ""

# type: deffn
#: lispref/debugging.texi:236
msgid ""
"@strong{Warning:} if you redefine a function after using @code{debug-on-"
"entry} on it, the code to enter the debugger is discarded by the "
"redefinition.  In effect, redefining the function cancels the break-on-entry "
"feature for that function."
msgstr ""

# type: deffn
#: lispref/debugging.texi:238
msgid "Here's an example to illustrate use of this function:"
msgstr ""

# type: group
#: lispref/debugging.texi:245
#, no-wrap
msgid ""
"(defun fact (n)\n"
"  (if (zerop n) 1\n"
"      (* n (fact (1- n)))))\n"
"     @result{} fact\n"
msgstr ""

# type: group
#: lispref/debugging.texi:249
#, no-wrap
msgid ""
"(debug-on-entry 'fact)\n"
"     @result{} fact\n"
msgstr ""

# type: group
#: lispref/debugging.texi:252
#, no-wrap
msgid "(fact 3)\n"
msgstr ""

# type: group
#: lispref/debugging.texi:263
#, no-wrap
msgid ""
"------ Buffer: *Backtrace* ------\n"
"Debugger entered--entering a function:\n"
"* fact(3)\n"
"  eval((fact 3))\n"
"  eval-last-sexp-1(nil)\n"
"  eval-last-sexp(nil)\n"
"  call-interactively(eval-last-sexp)\n"
"------ Buffer: *Backtrace* ------\n"
msgstr ""

# type: group
#: lispref/debugging.texi:270
#, no-wrap
msgid ""
"(symbol-function 'fact)\n"
"     @result{} (lambda (n)\n"
"          (debug (quote debug))\n"
"          (if (zerop n) 1 (* n (fact (1- n)))))\n"
msgstr ""

# type: deffn
#: lispref/debugging.texi:274
#, no-wrap
msgid "Command cancel-debug-on-entry &optional function-name"
msgstr ""

# type: deffn
#: lispref/debugging.texi:281
msgid ""
"This function undoes the effect of @code{debug-on-entry} on @var{function-"
"name}.  When called interactively, it prompts for @var{function-name} in the "
"minibuffer.  If @var{function-name} is omitted or @code{nil}, it cancels "
"break-on-entry for all functions.  Calling @code{cancel-debug-on-entry} does "
"nothing to a function which is not currently set up to break on entry."
msgstr ""

# type: subsection
#: lispref/debugging.texi:284
#, no-wrap
msgid "Explicit Entry to the Debugger"
msgstr ""

# type: Plain text
#: lispref/debugging.texi:292
msgid ""
"You can cause the debugger to be called at a certain point in your program "
"by writing the expression @code{(debug)} at that point.  To do this, visit "
"the source file, insert the text @samp{(debug)} at the proper place, and "
"type @kbd{C-M-x} (@code{eval-defun}, a Lisp mode key binding).  @strong"
"{Warning:} if you do this for temporary debugging purposes, be sure to undo "
"this insertion before you save the file!"
msgstr ""

# type: Plain text
#: lispref/debugging.texi:298
msgid ""
"The place where you insert @samp{(debug)} must be a place where an "
"additional form can be evaluated and its value ignored.  (If the value of "
"@code{(debug)} isn't ignored, it will alter the execution of the program!)  "
"The most common suitable places are inside a @code{progn} or an implicit "
"@code{progn} (@pxref{Sequencing})."
msgstr ""

# type: subsection
#: lispref/debugging.texi:300
#, no-wrap
msgid "Using the Debugger"
msgstr ""

# type: Plain text
#: lispref/debugging.texi:309
msgid ""
"When the debugger is entered, it displays the previously selected buffer in "
"one window and a buffer named @samp{*Backtrace*} in another window.  The "
"backtrace buffer contains one line for each level of Lisp function execution "
"currently going on.  At the beginning of this buffer is a message describing "
"the reason that the debugger was invoked (such as the error message and "
"associated data, if it was invoked due to an error)."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:320
msgid ""
"The backtrace buffer is read-only and uses a special major mode, Debugger "
"mode, in which letters are defined as debugger commands.  The usual Emacs "
"editing commands are available; thus, you can switch windows to examine the "
"buffer that was being edited at the time of the error, switch buffers, visit "
"files, or do any other sort of editing.  However, the debugger is a "
"recursive editing level (@pxref{Recursive Editing})  and it is wise to go "
"back to the backtrace buffer and exit the debugger (with the @kbd{q} "
"command) when you are finished with it.  Exiting the debugger gets out of "
"the recursive edit and kills the backtrace buffer."
msgstr ""

# type: cindex
#: lispref/debugging.texi:321
#, no-wrap
msgid "current stack frame"
msgstr ""

# type: Plain text
#: lispref/debugging.texi:331
msgid ""
"The backtrace buffer shows you the functions that are executing and their "
"argument values.  It also allows you to specify a stack frame by moving "
"point to the line describing that frame.  (A stack frame is the place where "
"the Lisp interpreter records information about a particular invocation of a "
"function.)  The frame whose line point is on is considered the @dfn{current "
"frame}.  Some of the debugger commands operate on the current frame.  If a "
"line starts with a star, that means that exiting that frame will call the "
"debugger again.  This is useful for examining the return value of a function."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:335
msgid ""
"If a function name is underlined, that means the debugger knows where its "
"source code is located.  You can click @kbd{Mouse-2} on that name, or move "
"to it and type @key{RET}, to visit the source code."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:340
msgid ""
"The debugger itself must be run byte-compiled, since it makes assumptions "
"about how many stack frames are used for the debugger itself.  These "
"assumptions are false if the debugger is running interpreted."
msgstr ""

# type: cindex
#: lispref/debugging.texi:343
#, no-wrap
msgid "debugger command list"
msgstr ""

# type: Plain text
#: lispref/debugging.texi:355
msgid ""
"The debugger buffer (in Debugger mode) provides special commands in addition "
"to the usual Emacs commands.  The most important use of debugger commands is "
"for stepping through code, so that you can see how control flows.  The "
"debugger can step through the control structures of an interpreted function, "
"but cannot do so in a byte-compiled function.  If you would like to step "
"through a byte-compiled function, replace it with an interpreted definition "
"of the same function.  (To do this, visit the source for the function and "
"type @kbd{C-M-x} on its definition.)  You cannot use the Lisp debugger to "
"step through a primitive function."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:357
msgid "Here is a list of Debugger mode commands:"
msgstr ""

# type: table
#: lispref/debugging.texi:364
msgid ""
"Exit the debugger and continue execution.  When continuing is possible, it "
"resumes execution of the program as if the debugger had never been entered "
"(aside from any side-effects that you caused by changing variable values or "
"data structures while inside the debugger)."
msgstr ""

# type: table
#: lispref/debugging.texi:368
msgid ""
"Continuing is possible after entry to the debugger due to function entry or "
"exit, explicit invocation, or quitting.  You cannot continue if the debugger "
"was entered because of an error."
msgstr ""

# type: table
#: lispref/debugging.texi:374
msgid ""
"Continue execution, but enter the debugger the next time any Lisp function "
"is called.  This allows you to step through the subexpressions of an "
"expression, seeing what values the subexpressions compute, and what else "
"they do."
msgstr ""

# type: table
#: lispref/debugging.texi:379
msgid ""
"The stack frame made for the function call which enters the debugger in this "
"way will be flagged automatically so that the debugger will be called again "
"when the frame is exited.  You can use the @kbd{u} command to cancel this "
"flag."
msgstr ""

# type: table
#: lispref/debugging.texi:384
msgid ""
"Flag the current frame so that the debugger will be entered when the frame "
"is exited.  Frames flagged in this way are marked with stars in the "
"backtrace buffer."
msgstr ""

# type: item
#: lispref/debugging.texi:385 lispref/edebug.texi:454
#, no-wrap
msgid "u"
msgstr ""

# type: table
#: lispref/debugging.texi:389
msgid ""
"Don't enter the debugger when the current frame is exited.  This cancels a "
"@kbd{b} command on that frame.  The visible effect is to remove the star "
"from the line in the backtrace buffer."
msgstr ""

# type: item
#: lispref/debugging.texi:390
#, no-wrap
msgid "j"
msgstr ""

# type: table
#: lispref/debugging.texi:394
msgid ""
"Flag the current frame like @kbd{b}.  Then continue execution like @kbd{c}, "
"but temporarily disable break-on-entry for all functions that are set up to "
"do so by @code{debug-on-entry}."
msgstr ""

# type: table
#: lispref/debugging.texi:403
msgid ""
"Read a Lisp expression in the minibuffer, evaluate it, and print the value "
"in the echo area.  The debugger alters certain important variables, and the "
"current buffer, as part of its operation; @kbd{e} temporarily restores their "
"values from outside the debugger, so you can examine and change them.  This "
"makes the debugger more transparent.  By contrast, @kbd{M-:} does nothing "
"special in the debugger; it shows you the variable values within the "
"debugger."
msgstr ""

# type: item
#: lispref/debugging.texi:404
#, no-wrap
msgid "R"
msgstr ""

# type: table
#: lispref/debugging.texi:407
msgid ""
"Like @kbd{e}, but also save the result of evaluation in the buffer @samp"
"{*Debugger-record*}."
msgstr ""

# type: item
#: lispref/debugging.texi:408 lispref/edebug.texi:392
#, no-wrap
msgid "q"
msgstr ""

# type: table
#: lispref/debugging.texi:411
msgid ""
"Terminate the program being debugged; return to top-level Emacs command "
"execution."
msgstr ""

# type: table
#: lispref/debugging.texi:414
msgid ""
"If the debugger was entered due to a @kbd{C-g} but you really want to quit, "
"and not debug, use the @kbd{q} command."
msgstr ""

# type: table
#: lispref/debugging.texi:418
msgid ""
"Return a value from the debugger.  The value is computed by reading an "
"expression with the minibuffer and evaluating it."
msgstr ""

# type: table
#: lispref/debugging.texi:425
msgid ""
"The @kbd{r} command is useful when the debugger was invoked due to exit from "
"a Lisp call frame (as requested with @kbd{b} or by entering the frame with "
"@kbd{d}); then the value specified in the @kbd{r} command is used as the "
"value of that frame.  It is also useful if you call @code{debug} and use its "
"return value.  Otherwise, @kbd{r} has the same effect as @kbd{c}, and the "
"specified return value does not matter."
msgstr ""

# type: table
#: lispref/debugging.texi:427
msgid "You can't use @kbd{r} when the debugger was entered due to an error."
msgstr ""

# type: item
#: lispref/debugging.texi:428
#, no-wrap
msgid "l"
msgstr ""

# type: table
#: lispref/debugging.texi:434
msgid ""
"Display a list of functions that will invoke the debugger when called.  This "
"is a list of functions that are set to break on entry by means of @code"
"{debug-on-entry}.  @strong{Warning:} if you redefine such a function and "
"thus cancel the effect of @code{debug-on-entry}, it may erroneously show up "
"in this list."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:441
msgid ""
"Here we describe in full detail the function @code{debug} that is used to "
"invoke the debugger."
msgstr ""

# type: defun
#: lispref/debugging.texi:442
#, no-wrap
msgid "debug &rest debugger-args"
msgstr ""

# type: defun
#: lispref/debugging.texi:448
msgid ""
"This function enters the debugger.  It switches buffers to a buffer named "
"@samp{*Backtrace*} (or @samp{*Backtrace*<2>} if it is the second recursive "
"entry to the debugger, etc.), and fills it with information about the stack "
"of Lisp function calls.  It then enters a recursive edit, showing the "
"backtrace buffer in Debugger mode."
msgstr ""

# type: defun
#: lispref/debugging.texi:453
msgid ""
"The Debugger mode @kbd{c}, @kbd{d}, @kbd{j}, and @kbd{r} commands exit the "
"recursive edit; then @code{debug} switches back to the previous buffer and "
"returns to whatever called @code{debug}.  This is the only way the function "
"@code{debug} can return to its caller."
msgstr ""

# type: defun
#: lispref/debugging.texi:458
msgid ""
"The use of the @var{debugger-args} is that @code{debug} displays the rest of "
"its arguments at the top of the @samp{*Backtrace*} buffer, so that the user "
"can see them.  Except as described below, this is the @emph{only} way these "
"arguments are used."
msgstr ""

# type: defun
#: lispref/debugging.texi:463
msgid ""
"However, certain values for first argument to @code{debug} have a special "
"significance.  (Normally, these values are used only by the internals of "
"Emacs, and not by programmers calling @code{debug}.)  Here is a table of "
"these special values:"
msgstr ""

# type: item
#: lispref/debugging.texi:465
#, no-wrap
msgid "lambda"
msgstr ""

# type: cindex
#: lispref/debugging.texi:466
#, no-wrap
msgid "@code{lambda} in debug"
msgstr ""

# type: table
#: lispref/debugging.texi:472
msgid ""
"A first argument of @code{lambda} means @code{debug} was called because of "
"entry to a function when @code{debug-on-next-call} was non-@code{nil}.  The "
"debugger displays @samp{Debugger entered--entering a function:} as a line of "
"text at the top of the buffer."
msgstr ""

# type: item
#: lispref/debugging.texi:473
#, no-wrap
msgid "debug"
msgstr ""

# type: table
#: lispref/debugging.texi:479
msgid ""
"@code{debug} as first argument means @code{debug} was called because of "
"entry to a function that was set to debug on entry.  The debugger displays "
"the string @samp{Debugger entered--entering a function:}, just as in the "
"@code{lambda} case.  It also marks the stack frame for that function so that "
"it will invoke the debugger when exited."
msgstr ""

# type: code{#1}
#: lispref/debugging.texi:480 lispref/display.texi:750
#: lispref/display.texi:1786 lispref/display.texi:2000 lispref/edebug.texi:252
#: lispref/edebug.texi:1132 lispref/frames.texi:41 lispref/intro.texi:200
#: lispref/processes.texi:236 lispref/searching.texi:960
#: lispref/sequences.texi:642 lispref/streams.texi:123
#: lispref/streams.texi:376 lispref/windows.texi:342 lispref/windows.texi:604
#, no-wrap
msgid "t"
msgstr ""

# type: table
#: lispref/debugging.texi:486
msgid ""
"When the first argument is @code{t}, this indicates a call to @code{debug} "
"due to evaluation of a function call form when @code{debug-on-next-call} is "
"non-@code{nil}.  The debugger displays @samp{Debugger entered--beginning "
"evaluation of function call form:} as the top line in the buffer."
msgstr ""

# type: table
#: lispref/debugging.texi:494
msgid ""
"When the first argument is @code{exit}, it indicates the exit of a stack "
"frame previously marked to invoke the debugger on exit.  The second argument "
"given to @code{debug} in this case is the value being returned from the "
"frame.  The debugger displays @samp{Debugger entered--returning value:} in "
"the top line of the buffer, followed by the value being returned."
msgstr ""

# type: item
#: lispref/debugging.texi:495 lispref/errors.texi:35
#, no-wrap
msgid "error"
msgstr ""

# type: cindex
#: lispref/debugging.texi:496
#, no-wrap
msgid "@code{error} in debug"
msgstr ""

# type: table
#: lispref/debugging.texi:502
msgid ""
"When the first argument is @code{error}, the debugger indicates that it is "
"being entered because an error or @code{quit} was signaled and not handled, "
"by displaying @samp{Debugger entered--Lisp error:} followed by the error "
"signaled and any arguments to @code{signal}.  For example,"
msgstr ""

# type: group
#: lispref/debugging.texi:507
#, no-wrap
msgid ""
"(let ((debug-on-error t))\n"
"  (/ 1 0))\n"
msgstr ""

# type: group
#: lispref/debugging.texi:515
#, no-wrap
msgid ""
"------ Buffer: *Backtrace* ------\n"
"Debugger entered--Lisp error: (arith-error)\n"
"  /(1 0)\n"
"...\n"
"------ Buffer: *Backtrace* ------\n"
msgstr ""

# type: table
#: lispref/debugging.texi:521
msgid ""
"If an error was signaled, presumably the variable @code{debug-on-error} is "
"non-@code{nil}.  If @code{quit} was signaled, then presumably the variable "
"@code{debug-on-quit} is non-@code{nil}."
msgstr ""

# type: table
#: lispref/debugging.texi:528
msgid ""
"Use @code{nil} as the first of the @var{debugger-args} when you want to "
"enter the debugger explicitly.  The rest of the @var{debugger-args} are "
"printed on the top line of the buffer.  You can use this feature to display "
"messages---for example, to remind yourself of the conditions under which "
"@code{debug} is called."
msgstr ""

# type: subsection
#: lispref/debugging.texi:532
#, no-wrap
msgid "Internals of the Debugger"
msgstr ""

# type: Plain text
#: lispref/debugging.texi:536
msgid ""
"This section describes functions and variables used internally by the "
"debugger."
msgstr ""

# type: defvar
#: lispref/debugging.texi:537
#, no-wrap
msgid "debugger"
msgstr ""

# type: defvar
#: lispref/debugging.texi:543
msgid ""
"The value of this variable is the function to call to invoke the debugger.  "
"Its value must be a function of any number of arguments, or, more typically, "
"the name of a function.  This function should invoke some kind of debugger.  "
"The default value of the variable is @code{debug}."
msgstr ""

# type: defvar
#: lispref/debugging.texi:547
msgid ""
"The first argument that Lisp hands to the function indicates why it was "
"called.  The convention for arguments is detailed in the description of @code"
"{debug} (@pxref{Invoking the Debugger})."
msgstr ""

# type: deffn
#: lispref/debugging.texi:549
#, no-wrap
msgid "Command backtrace"
msgstr ""

# type: cindex
#: lispref/debugging.texi:550
#, no-wrap
msgid "run time stack"
msgstr ""

# type: cindex
#: lispref/debugging.texi:551
#, no-wrap
msgid "call stack"
msgstr ""

# type: deffn
#: lispref/debugging.texi:557
msgid ""
"This function prints a trace of Lisp function calls currently active.  This "
"is the function used by @code{debug} to fill up the @samp{*Backtrace*} "
"buffer.  It is written in C, since it must have access to the stack to "
"determine which function calls are active.  The return value is always @code"
"{nil}."
msgstr ""

# type: deffn
#: lispref/debugging.texi:562
msgid ""
"In the following example, a Lisp expression calls @code{backtrace} "
"explicitly.  This prints the backtrace to the stream @code{standard-output}, "
"which, in this case, is the buffer @samp{backtrace-output}."
msgstr ""

# type: deffn
#: lispref/debugging.texi:567
msgid ""
"Each line of the backtrace represents one function call.  The line shows the "
"values of the function's arguments if they are all known; if they are still "
"being computed, the line says so.  The arguments of special forms are elided."
msgstr ""

# type: group
#: lispref/debugging.texi:576
#, no-wrap
msgid ""
"(with-output-to-temp-buffer \"backtrace-output\"\n"
"  (let ((var 1))\n"
"    (save-excursion\n"
"      (setq var (eval '(progn\n"
"                         (1+ var)\n"
"                         (list 'testing (backtrace))))))))\n"
"\n"
msgstr ""

# type: group
#: lispref/debugging.texi:578
#, no-wrap
msgid "     @result{} (testing nil)\n"
msgstr ""

# type: group
#: lispref/debugging.texi:584
#, no-wrap
msgid ""
"----------- Buffer: backtrace-output ------------\n"
"  backtrace()\n"
"  (list ...computing arguments...)\n"
msgstr ""

# type: smallexample
#: lispref/debugging.texi:593
#, no-wrap
msgid ""
"  (progn ...)\n"
"  eval((progn (1+ var) (list (quote testing) (backtrace))))\n"
"  (setq ...)\n"
"  (save-excursion ...)\n"
"  (let ...)\n"
"  (with-output-to-temp-buffer ...)\n"
"  eval((with-output-to-temp-buffer ...))\n"
"  eval-last-sexp-1(nil)\n"
msgstr ""

# type: group
#: lispref/debugging.texi:597
#, no-wrap
msgid ""
"  eval-last-sexp(nil)\n"
"  call-interactively(eval-last-sexp)\n"
"----------- Buffer: backtrace-output ------------\n"
msgstr ""

# type: defopt
#: lispref/debugging.texi:602
#, no-wrap
msgid "stack-trace-on-error"
msgstr "stack-trace-on-error"

# type: cindex
#: lispref/debugging.texi:603
#, no-wrap
msgid "stack trace"
msgstr ""

# type: defopt
#: lispref/debugging.texi:609
#, no-wrap
msgid ""
"This variable controls whether Lisp automatically displays a\n"
"backtrace buffer after every error that is not handled.  A quit signal\n"
"counts as an error for this variable.  If it is non-@code{nil} then a\n"
"backtrace is shown in a pop-up buffer named @samp{*Backtrace*} on every\n"
"error.  If it is @code{nil}, then a backtrace is not shown.\n"
"\n"
msgstr ""

# type: defopt
#: lispref/debugging.texi:614
#, no-wrap
msgid ""
"When a backtrace is shown, that buffer is not selected.  If either\n"
"@code{debug-on-quit} or @code{debug-on-error} is also non-@code{nil}, then\n"
"a backtrace is shown in one buffer, and the debugger is popped up in\n"
"another buffer with its own backtrace.\n"
"\n"
msgstr ""

# type: defopt
#: lispref/debugging.texi:617
#, no-wrap
msgid ""
"We consider this feature to be obsolete and superseded by the debugger\n"
"itself.\n"
msgstr ""

# type: defvar
#: lispref/debugging.texi:620
#, no-wrap
msgid "debug-on-next-call"
msgstr "debug-on-next-call"

# type: cindex
#: lispref/debugging.texi:621
#, no-wrap
msgid "@code{eval}, and debugging"
msgstr ""

# type: cindex
#: lispref/debugging.texi:622
#, no-wrap
msgid "@code{apply}, and debugging"
msgstr ""

# type: cindex
#: lispref/debugging.texi:623
#, no-wrap
msgid "@code{funcall}, and debugging"
msgstr ""

# type: defvar
#: lispref/debugging.texi:627
msgid ""
"If this variable is non-@code{nil}, it says to call the debugger before the "
"next @code{eval}, @code{apply} or @code{funcall}.  Entering the debugger "
"sets @code{debug-on-next-call} to @code{nil}."
msgstr ""

# type: defvar
#: lispref/debugging.texi:629
msgid "The @kbd{d} command in the debugger works by setting this variable."
msgstr ""

# type: defun
#: lispref/debugging.texi:631
#, no-wrap
msgid "backtrace-debug level flag"
msgstr ""

# type: defun
#: lispref/debugging.texi:637
msgid ""
"This function sets the debug-on-exit flag of the stack frame @var{level} "
"levels down the stack, giving it the value @var{flag}.  If @var{flag} is non-"
"@code{nil}, this will cause the debugger to be entered when that frame later "
"exits.  Even a nonlocal exit through that frame will enter the debugger."
msgstr ""

# type: defun
#: lispref/debugging.texi:639
msgid "This function is used only by the debugger."
msgstr ""

# type: defvar
#: lispref/debugging.texi:641
#, no-wrap
msgid "command-debug-status"
msgstr ""

# type: defvar
#: lispref/debugging.texi:647
msgid ""
"This variable records the debugging status of the current interactive "
"command.  Each time a command is called interactively, this variable is "
"bound to @code{nil}.  The debugger can set this variable to leave "
"information for future debugger invocations during the same command "
"invocation."
msgstr ""

# type: defvar
#: lispref/debugging.texi:651
msgid ""
"The advantage of using this variable rather than an ordinary global variable "
"is that the data will never carry over to a subsequent command invocation."
msgstr ""

# type: defun
#: lispref/debugging.texi:653
#, no-wrap
msgid "backtrace-frame frame-number"
msgstr ""

# type: defun
#: lispref/debugging.texi:657
msgid ""
"The function @code{backtrace-frame} is intended for use in Lisp debuggers.  "
"It returns information about what computation is happening in the stack "
"frame @var{frame-number} levels down."
msgstr ""

# type: defun
#: lispref/debugging.texi:660
msgid ""
"If that frame has not evaluated the arguments yet, or is a special form, the "
"value is @code{(nil @var{function} @var{arg-forms}@dots{})}."
msgstr ""

# type: defun
#: lispref/debugging.texi:664
msgid ""
"If that frame has evaluated its arguments and called its function already, "
"the return value is @code{(t @var{function} @var{arg-values}@dots{})}."
msgstr ""

# type: defun
#: lispref/debugging.texi:669
msgid ""
"In the return value, @var{function} is whatever was supplied as the @sc{car} "
"of the evaluated list, or a @code{lambda} expression in the case of a macro "
"call.  If the function has a @code{&rest} argument, that is represented as "
"the tail of the list @var{arg-values}."
msgstr ""

# type: defun
#: lispref/debugging.texi:672
msgid ""
"If @var{frame-number} is out of range, @code{backtrace-frame} returns @code"
"{nil}."
msgstr ""

# type: include
#: lispref/debugging.texi:674
#, no-wrap
msgid "edebug.texi"
msgstr ""

# type: menu
#: lispref/debugging.texi:677 lispref/vol1.texi:539 lispref/vol2.texi:540
#, no-wrap
msgid "Debugging Invalid Lisp Syntax"
msgstr ""

# type: cindex
#: lispref/debugging.texi:678
#, no-wrap
msgid "debugging invalid Lisp syntax"
msgstr ""

# type: Plain text
#: lispref/debugging.texi:688
msgid ""
"The Lisp reader reports invalid syntax, but cannot say where the real "
"problem is.  For example, the error ``End of file during parsing'' in "
"evaluating an expression indicates an excess of open parentheses (or square "
"brackets).  The reader detects this imbalance at the end of the file, but it "
"cannot figure out where the close parenthesis should have been.  Likewise, "
"``Invalid read syntax: \")\"'' indicates an excess close parenthesis or "
"missing open parenthesis, but does not say where the missing parenthesis "
"belongs.  How, then, to find what to change?"
msgstr ""

# type: Plain text
#: lispref/debugging.texi:693
msgid ""
"If the problem is not simply an imbalance of parentheses, a useful technique "
"is to try @kbd{C-M-e} at the beginning of each defun, and see if it goes to "
"the place where that defun appears to end.  If it does not, there is a "
"problem in that defun."
msgstr ""

# type: cindex
#: lispref/debugging.texi:694
#, no-wrap
msgid "unbalanced parentheses"
msgstr ""

# type: cindex
#: lispref/debugging.texi:695
#, no-wrap
msgid "parenthesis mismatch, debugging"
msgstr ""

# type: Plain text
#: lispref/debugging.texi:700
msgid ""
"However, unmatched parentheses are the most common syntax errors in Lisp, "
"and we can give further advice for those cases.  (In addition, just moving "
"point through the code with Show Paren mode enabled might find the mismatch.)"
msgstr ""

# type: menu
#: lispref/debugging.texi:704 lispref/debugging.texi:706 lispref/vol1.texi:542
#: lispref/vol2.texi:543
#, no-wrap
msgid "Excess Open"
msgstr ""

# type: menu
#: lispref/debugging.texi:704 lispref/vol1.texi:542 lispref/vol2.texi:543
msgid "How to find a spurious open paren or missing close."
msgstr ""

# type: menu
#: lispref/debugging.texi:704 lispref/debugging.texi:740 lispref/vol1.texi:542
#: lispref/vol2.texi:543
#, no-wrap
msgid "Excess Close"
msgstr ""

# type: menu
#: lispref/debugging.texi:704 lispref/vol1.texi:542 lispref/vol2.texi:543
msgid "How to find a spurious close paren or missing open."
msgstr ""

# type: subsection
#: lispref/debugging.texi:707
#, no-wrap
msgid "Excess Open Parentheses"
msgstr ""

# type: Plain text
#: lispref/debugging.texi:713
msgid ""
"The first step is to find the defun that is unbalanced.  If there is an "
"excess open parenthesis, the way to do this is to go to the end of the file "
"and type @kbd{C-u C-M-u}.  This will move you to the beginning of the first "
"defun that is unbalanced."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:720
msgid ""
"The next step is to determine precisely what is wrong.  There is no way to "
"be sure of this except by studying the program, but often the existing "
"indentation is a clue to where the parentheses should have been.  The "
"easiest way to use this clue is to reindent with @kbd{C-M-q} and see what "
"moves.  @strong{But don't do this yet!} Keep reading, first."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:726
msgid ""
"Before you do this, make sure the defun has enough close parentheses.  "
"Otherwise, @kbd{C-M-q} will get an error, or will reindent all the rest of "
"the file until the end.  So move to the end of the defun and insert a close "
"parenthesis there.  Don't use @kbd{C-M-e} to move there, since that too will "
"fail to work until the defun is balanced."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:734
msgid ""
"Now you can go to the beginning of the defun and type @kbd{C-M-q}.  Usually "
"all the lines from a certain point to the end of the function will shift to "
"the right.  There is probably a missing close parenthesis, or a superfluous "
"open parenthesis, near that point.  (However, don't assume this is true; "
"study the code to make sure.)  Once you have found the discrepancy, undo the "
"@kbd{C-M-q} with @kbd{C-_}, since the old indentation is probably "
"appropriate to the intended parentheses."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:739
msgid ""
"After you think you have fixed the problem, use @kbd{C-M-q} again.  If the "
"old indentation actually fit the intended nesting of parentheses, and you "
"have put back those parentheses, @kbd{C-M-q} should not change anything."
msgstr ""

# type: subsection
#: lispref/debugging.texi:741
#, no-wrap
msgid "Excess Close Parentheses"
msgstr ""

# type: Plain text
#: lispref/debugging.texi:746
msgid ""
"To deal with an excess close parenthesis, first go to the beginning of the "
"file, then type @kbd{C-u -1 C-M-u} to find the end of the first unbalanced "
"defun."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:751
msgid ""
"Then find the actual matching close parenthesis by typing @kbd{C-M-f} at the "
"beginning of that defun.  This will leave you somewhere short of the place "
"where the defun ought to end.  It is possible that you will find a spurious "
"close parenthesis in that vicinity."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:759
msgid ""
"If you don't see a problem at that point, the next thing to do is to type "
"@kbd{C-M-q} at the beginning of the defun.  A range of lines will probably "
"shift left; if so, the missing open parenthesis or spurious close "
"parenthesis is probably near the first of those lines.  (However, don't "
"assume this is true; study the code to make sure.)  Once you have found the "
"discrepancy, undo the @kbd{C-M-q} with @kbd{C-_}, since the old indentation "
"is probably appropriate to the intended parentheses."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:764
msgid ""
"After you think you have fixed the problem, use @kbd{C-M-q} again.  If the "
"old indentation actually fits the intended nesting of parentheses, and you "
"have put back those parentheses, @kbd{C-M-q} should not change anything."
msgstr ""

# type: cindex
#: lispref/debugging.texi:767
#, no-wrap
msgid "coverage testing"
msgstr ""

# type: findex
#: lispref/debugging.texi:769
#, no-wrap
msgid "testcover-start"
msgstr "testcover-start"

# type: findex
#: lispref/debugging.texi:770
#, no-wrap
msgid "testcover-mark-all"
msgstr "testcover-mark-all"

# type: findex
#: lispref/debugging.texi:771
#, no-wrap
msgid "testcover-next-mark"
msgstr "testcover-next-mark"

# type: Plain text
#: lispref/debugging.texi:780
msgid ""
"You can do coverage testing for a file of Lisp code by loading the @code"
"{testcover} library and using the command @kbd{M-x testcover-start @key{RET} "
"@var{file} @key{RET}} to instrument the code.  Then test your code by "
"calling it one or more times.  Then use the command @kbd{M-x testcover-mark-"
"all} to display colored highlights on the code to show where coverage is "
"insufficient.  The command @kbd{M-x testcover-next-mark} will move point "
"forward to the next highlighted spot."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:788
msgid ""
"Normally, a red highlight indicates the form was never completely evaluated; "
"a brown highlight means it always evaluated to the same value (meaning there "
"has been little testing of what is done with the result).  However, the red "
"highlight is skipped for forms that can't possibly complete their "
"evaluation, such as @code{error}.  The brown highlight is skipped for forms "
"that are expected to always evaluate to the same value, such as @code{(setq "
"x 14)}."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:791
msgid ""
"For difficult cases, you can add do-nothing macros to your code to give "
"advice to the test coverage tool."
msgstr ""

# type: defmac
#: lispref/debugging.texi:792
#, no-wrap
msgid "1value form"
msgstr ""

# type: defmac
#: lispref/debugging.texi:795
msgid ""
"Evaluate @var{form} and return its value, but inform coverage testing that "
"@var{form}'s value should always be the same."
msgstr ""

# type: defmac
#: lispref/debugging.texi:797
#, no-wrap
msgid "noreturn form"
msgstr ""

# type: defmac
#: lispref/debugging.texi:800
msgid ""
"Evaluate @var{form}, informing coverage testing that @var{form} should never "
"return.  If it ever does return, you get a run-time error."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:805
msgid ""
"Edebug also has a coverage testing feature (@pxref{Coverage Testing}).  "
"These features partly duplicate each other, and it would be cleaner to "
"combine them."
msgstr ""

# type: section
#: lispref/debugging.texi:807
#, no-wrap
msgid "Debugging Problems in Compilation"
msgstr ""

# type: cindex
#: lispref/debugging.texi:808
#, no-wrap
msgid "debugging byte compilation problems"
msgstr ""

# type: Plain text
#: lispref/debugging.texi:816
msgid ""
"When an error happens during byte compilation, it is normally due to invalid "
"syntax in the program you are compiling.  The compiler prints a suitable "
"error message in the @samp{*Compile-Log*} buffer, and then stops.  The "
"message may state a function name in which the error was found, or it may "
"not.  Either way, here is how to find out where in the file the error "
"occurred."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:821
msgid ""
"What you should do is switch to the buffer @w{@samp{ *Compiler Input*}}.  "
"(Note that the buffer name starts with a space, so it does not show up in "
"@kbd{M-x list-buffers}.)  This buffer contains the program being compiled, "
"and point shows how far the byte compiler was able to read."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:826
msgid ""
"If the error was due to invalid Lisp syntax, point shows exactly where the "
"invalid syntax was @emph{detected}.  The cause of the error is not "
"necessarily near by! Use the techniques in the previous section to find the "
"error."
msgstr ""

# type: Plain text
#: lispref/debugging.texi:831
msgid ""
"If the error was detected while compiling a form that had been read "
"successfully, then point is located at the end of the form.  In this case, "
"this technique can't localize the error precisely, but can still show you "
"which function to check."
msgstr ""

# type: ignore
#: lispref/debugging.texi:834
#, no-wrap
msgid "   arch-tag: ddc57378-b0e6-4195-b7b6-43f8777395a7\n"
msgstr "   arch-tag: ddc57378-b0e6-4195-b7b6-43f8777395a7\n"

# type: menu
#: lispref/display.texi:7 lispref/elisp.texi:160 lispref/os.texi:7
#: lispref/processes.texi:7 lispref/vol1.texi:261 lispref/vol2.texi:262
#, no-wrap
msgid "Display"
msgstr ""

# type: menu
#: lispref/display.texi:8 lispref/vol1.texi:916 lispref/vol2.texi:917
#, no-wrap
msgid "Emacs Display"
msgstr ""

# type: Plain text
#: lispref/display.texi:12
msgid ""
"This chapter describes a number of features related to the display that "
"Emacs presents to the user."
msgstr ""

# type: menu
#: lispref/display.texi:38 lispref/display.texi:40 lispref/vol1.texi:928
#: lispref/vol2.texi:929
#, no-wrap
msgid "Refresh Screen"
msgstr ""

# type: menu
#: lispref/display.texi:38 lispref/vol1.texi:928 lispref/vol2.texi:929
msgid "Clearing the screen and redrawing everything on it."
msgstr ""

# type: section
#: lispref/display.texi:38 lispref/display.texi:88 lispref/display.texi:89
#, no-wrap
msgid "Forcing Redisplay"
msgstr ""

# type: menu
#: lispref/display.texi:38
msgid "Forcing redisplay."
msgstr ""

# type: menu
#: lispref/display.texi:38 lispref/display.texi:126 lispref/display.texi:127
#: lispref/vol1.texi:928 lispref/vol2.texi:929
#, no-wrap
msgid "Truncation"
msgstr ""

# type: menu
#: lispref/display.texi:38 lispref/vol1.texi:928 lispref/vol2.texi:929
msgid "Folding or wrapping long text lines."
msgstr ""

# type: menu
#: lispref/display.texi:38 lispref/display.texi:193 lispref/display.texi:194
#: lispref/vol1.texi:928 lispref/vol2.texi:929
#, no-wrap
msgid "The Echo Area"
msgstr ""

# type: menu
#: lispref/display.texi:38
msgid "Displaying messages at the bottom of the screen."
msgstr ""

# type: node
#: lispref/display.texi:38 lispref/display.texi:523
#, no-wrap
msgid "Warnings"
msgstr ""

# type: menu
#: lispref/display.texi:38
msgid "Displaying warning messages for the user."
msgstr ""

# type: section
#: lispref/display.texi:38 lispref/display.texi:712 lispref/display.texi:713
#, no-wrap
msgid "Invisible Text"
msgstr ""

# type: menu
#: lispref/display.texi:38 lispref/vol1.texi:928 lispref/vol2.texi:929
msgid "Hiding part of the buffer text."
msgstr ""

# type: menu
#: lispref/display.texi:38 lispref/display.texi:841 lispref/display.texi:842
#: lispref/vol1.texi:928 lispref/vol2.texi:929
#, no-wrap
msgid "Selective Display"
msgstr ""

# type: menu
#: lispref/display.texi:38
msgid "Hiding part of the buffer text (the old way)."
msgstr ""

# type: menu
#: lispref/display.texi:38 lispref/display.texi:959 lispref/display.texi:960
#: lispref/eval.texi:505 lispref/vol1.texi:928 lispref/vol2.texi:929
#, no-wrap
msgid "Temporary Displays"
msgstr ""

# type: menu
#: lispref/display.texi:38 lispref/vol1.texi:928 lispref/vol2.texi:929
msgid "Displays that go away automatically."
msgstr ""

# type: section
#: lispref/display.texi:38 lispref/display.texi:1103 lispref/display.texi:1104
#, no-wrap
msgid "Overlays"
msgstr ""

# type: menu
#: lispref/display.texi:38
msgid "Use overlays to highlight parts of the buffer."
msgstr ""

# type: section
#: lispref/display.texi:38 lispref/display.texi:1553 lispref/display.texi:1554
#, no-wrap
msgid "Width"
msgstr ""

# type: menu
#: lispref/display.texi:38
msgid "How wide a character or string is on the screen."
msgstr ""

# type: section
#: lispref/display.texi:38 lispref/display.texi:1608 lispref/display.texi:1609
#, no-wrap
msgid "Line Height"
msgstr ""

# type: menu
#: lispref/display.texi:38
msgid "Controlling the height of lines."
msgstr ""

# type: section
#: lispref/display.texi:38 lispref/display.texi:1703 lispref/display.texi:1704
#, no-wrap
msgid "Faces"
msgstr ""

# type: menu
#: lispref/display.texi:38
msgid "A face defines a graphics style for text characters:"
msgstr ""

# type: menu
#: lispref/display.texi:38
msgid "font, colors, etc."
msgstr ""

# type: section
#: lispref/display.texi:38 lispref/display.texi:2747 lispref/display.texi:2748
#, no-wrap
msgid "Fringes"
msgstr ""

# type: menu
#: lispref/display.texi:38
msgid "Controlling window fringes."
msgstr ""

# type: section
#: lispref/display.texi:38 lispref/display.texi:3135 lispref/display.texi:3136
#, no-wrap
msgid "Scroll Bars"
msgstr ""

# type: menu
#: lispref/display.texi:38
msgid "Controlling vertical scroll bars."
msgstr ""

# type: node
#: lispref/display.texi:38 lispref/display.texi:3225
#, no-wrap
msgid "Display Property"
msgstr ""

# type: menu
#: lispref/display.texi:38
msgid "Enabling special display features."
msgstr ""

# type: section
#: lispref/display.texi:38 lispref/display.texi:3585 lispref/display.texi:3586
#, no-wrap
msgid "Images"
msgstr ""

# type: menu
#: lispref/display.texi:38
msgid "Displaying images in Emacs buffers."
msgstr ""

# type: section
#: lispref/display.texi:38 lispref/display.texi:4302 lispref/display.texi:4303
#, no-wrap
msgid "Buttons"
msgstr ""

# type: menu
#: lispref/display.texi:38
msgid "Adding clickable buttons to Emacs buffers."
msgstr ""

# type: section
#: lispref/display.texi:38 lispref/display.texi:4620 lispref/display.texi:4621
#, no-wrap
msgid "Abstract Display"
msgstr ""

# type: menu
#: lispref/display.texi:38
msgid "Emacs' Widget for Object Collections."
msgstr ""

# type: menu
#: lispref/display.texi:38 lispref/display.texi:4953 lispref/vol1.texi:928
#: lispref/vol2.texi:929
#, no-wrap
msgid "Blinking"
msgstr ""

# type: menu
#: lispref/display.texi:38 lispref/vol1.texi:928 lispref/vol2.texi:929
msgid "How Emacs shows the matching open parenthesis."
msgstr ""

# type: menu
#: lispref/display.texi:38 lispref/display.texi:5013 lispref/vol1.texi:928
#: lispref/vol2.texi:929
#, no-wrap
msgid "Usual Display"
msgstr ""

# type: menu
#: lispref/display.texi:38
msgid "The usual conventions for displaying nonprinting chars."
msgstr ""

# type: section
#: lispref/display.texi:38 lispref/display.texi:5097 lispref/display.texi:5098
#, no-wrap
msgid "Display Tables"
msgstr ""

# type: menu
#: lispref/display.texi:38
msgid "How to specify other conventions."
msgstr ""

# type: menu
#: lispref/display.texi:38 lispref/display.texi:5327 lispref/display.texi:5328
#: lispref/vol1.texi:928 lispref/vol2.texi:929
#, no-wrap
msgid "Beeping"
msgstr ""

# type: menu
#: lispref/display.texi:38 lispref/vol1.texi:928 lispref/vol2.texi:929
msgid "Audible signal to the user."
msgstr ""

# type: menu
#: lispref/display.texi:38 lispref/display.texi:5364 lispref/display.texi:5365
#: lispref/vol1.texi:928 lispref/vol2.texi:929
#, no-wrap
msgid "Window Systems"
msgstr ""

# type: menu
#: lispref/display.texi:38 lispref/vol1.texi:928 lispref/vol2.texi:929
msgid "Which window system is being used."
msgstr ""

# type: section
#: lispref/display.texi:41
#, no-wrap
msgid "Refreshing the Screen"
msgstr ""

# type: Plain text
#: lispref/display.texi:46
msgid ""
"The function @code{redraw-frame} clears and redisplays the entire contents "
"of a given frame (@pxref{Frames}).  This is useful if the screen is "
"corrupted."
msgstr ""

# type: defun
#: lispref/display.texi:48
#, no-wrap
msgid "redraw-frame frame"
msgstr ""

# type: defun
#: lispref/display.texi:50
msgid "This function clears and redisplays frame @var{frame}."
msgstr ""

# type: Plain text
#: lispref/display.texi:53
msgid "Even more powerful is @code{redraw-display}:"
msgstr ""

# type: deffn
#: lispref/display.texi:54
#, no-wrap
msgid "Command redraw-display"
msgstr ""

# type: deffn
#: lispref/display.texi:56
msgid "This function clears and redisplays all visible frames."
msgstr ""

# type: Plain text
#: lispref/display.texi:60
msgid ""
"This function calls for redisplay of certain windows, the next time "
"redisplay is done, but does not clear them first."
msgstr ""

# type: defun
#: lispref/display.texi:61
#, no-wrap
msgid "force-window-update &optional object"
msgstr ""

# type: defun
#: lispref/display.texi:67
msgid ""
"This function forces some or all windows to be updated on next redisplay.  "
"If @var{object} is a window, it forces redisplay of that window.  If @var"
"{object} is a buffer or buffer name, it forces redisplay of all windows "
"displaying that buffer.  If @var{object} is @code{nil} (or omitted), it "
"forces redisplay of all windows."
msgstr ""

# type: Plain text
#: lispref/display.texi:73
msgid ""
"Processing user input takes absolute priority over redisplay.  If you call "
"these functions when input is available, they do nothing immediately, but a "
"full redisplay does happen eventually---after all the input has been "
"processed."
msgstr ""

# type: Plain text
#: lispref/display.texi:79
msgid ""
"Normally, suspending and resuming Emacs also refreshes the screen.  Some "
"terminal emulators record separate contents for display-oriented programs "
"such as Emacs and for ordinary sequential display.  If you are using such a "
"terminal, you might want to inhibit the redisplay on resumption."
msgstr ""

# type: defvar
#: lispref/display.texi:80
#, no-wrap
msgid "no-redraw-on-reenter"
msgstr ""

# type: cindex
#: lispref/display.texi:81
#, no-wrap
msgid "suspend (cf. @code{no-redraw-on-reenter})"
msgstr ""

# type: cindex
#: lispref/display.texi:82
#, no-wrap
msgid "resume (cf. @code{no-redraw-on-reenter})"
msgstr ""

# type: defvar
#: lispref/display.texi:86
msgid ""
"This variable controls whether Emacs redraws the entire screen after it has "
"been suspended and resumed.  Non-@code{nil} means there is no need to "
"redraw, @code{nil} means redrawing is needed.  The default is @code{nil}."
msgstr ""

# type: cindex
#: lispref/display.texi:90
#, no-wrap
msgid "forcing redisplay"
msgstr ""

# type: Plain text
#: lispref/display.texi:96
msgid ""
"Emacs redisplay normally stops if input arrives, and does not happen at all "
"if input is available before it starts.  Most of the time, this is exactly "
"what you want.  However, you can prevent preemption by binding @code"
"{redisplay-dont-pause} to a non-@code{nil} value."
msgstr ""

# type: defvar
#: lispref/display.texi:97
#, no-wrap
msgid "redisplay-preemption-period"
msgstr ""

# type: defvar
#: lispref/display.texi:102
msgid ""
"This variable specifies how many seconds Emacs waits between checks for new "
"input during redisplay.  (The default is 0.1 seconds.)  If input has arrived "
"when Emacs checks, it pre-empts redisplay and processes the available input "
"before trying again to redisplay."
msgstr ""

# type: defvar
#: lispref/display.texi:105
msgid ""
"If this variable is @code{nil}, Emacs does not check for input during "
"redisplay, and redisplay cannot be preempted by input."
msgstr ""

# type: defvar
#: lispref/display.texi:108
msgid ""
"This variable is only obeyed on graphical terminals.  For text terminals, "
"see @ref{Terminal Output}."
msgstr ""

# type: defvar
#: lispref/display.texi:110
#, no-wrap
msgid "redisplay-dont-pause"
msgstr ""

# type: defvar
#: lispref/display.texi:114
msgid ""
"If this variable is non-@code{nil}, pending input does not prevent or halt "
"redisplay; redisplay occurs, and finishes, regardless of whether input is "
"available."
msgstr ""

# type: defun
#: lispref/display.texi:116
#, no-wrap
msgid "redisplay &optional force"
msgstr ""

# type: defun
#: lispref/display.texi:119
msgid ""
"This function performs an immediate redisplay provided there are no pending "
"input events.  This is equivalent to @code{(sit-for 0)}."
msgstr ""

# type: defun
#: lispref/display.texi:122
msgid ""
"If the optional argument @var{force} is non-@code{nil}, it forces an "
"immediate and complete redisplay even if input is available."
msgstr ""

# type: defun
#: lispref/display.texi:124
msgid "Returns @code{t} if redisplay was performed, or @code{nil} otherwise."
msgstr ""

# type: cindex
#: lispref/display.texi:128
#, no-wrap
msgid "line wrapping"
msgstr ""

# type: cindex
#: lispref/display.texi:129
#, no-wrap
msgid "line truncation"
msgstr ""

# type: cindex
#: lispref/display.texi:130
#, no-wrap
msgid "continuation lines"
msgstr ""

# type: cindex
#: lispref/display.texi:131
#, no-wrap
msgid "@samp{$} in display"
msgstr ""

# type: cindex
#: lispref/display.texi:132
#, no-wrap
msgid "@samp{\\} in display"
msgstr ""

# type: Plain text
#: lispref/display.texi:142
msgid ""
"When a line of text extends beyond the right edge of a window, Emacs can @dfn"
"{continue} the line (make it ``wrap'' to the next screen line), or @dfn"
"{truncate} the line (limit it to one screen line).  The additional screen "
"lines used to display a long text line are called @dfn{continuation} lines.  "
"Continuation is not the same as filling; continuation happens on the screen "
"only, not in the buffer contents, and it breaks a line precisely at the "
"right margin, not at a word boundary.  @xref{Filling}."
msgstr ""

# type: Plain text
#: lispref/display.texi:149
msgid ""
"On a graphical display, tiny arrow images in the window fringes indicate "
"truncated and continued lines (@pxref{Fringes}).  On a text terminal, a @samp"
"{$} in the rightmost column of the window indicates truncation; a @samp{\\} "
"on the rightmost column indicates a line that ``wraps.'' (The display table "
"can specify alternate characters to use for this; @pxref{Display Tables})."
msgstr ""

# type: item
#: lispref/display.texi:150 lispref/locals.texi:216
#, no-wrap
msgid "truncate-lines"
msgstr "truncate-lines"

# type: defopt
#: lispref/display.texi:155
msgid ""
"This buffer-local variable controls how Emacs displays lines that extend "
"beyond the right edge of the window.  The default is @code{nil}, which "
"specifies continuation.  If the value is non-@code{nil}, then these lines "
"are truncated."
msgstr ""

# type: defopt
#: lispref/display.texi:159
msgid ""
"If the variable @code{truncate-partial-width-windows} is non-@code{nil}, "
"then truncation is always used for side-by-side windows (within one frame) "
"regardless of the value of @code{truncate-lines}."
msgstr ""

# type: defopt
#: lispref/display.texi:161
#, no-wrap
msgid "default-truncate-lines"
msgstr "default-truncate-lines"

# type: defopt
#: lispref/display.texi:164
msgid ""
"This variable is the default value for @code{truncate-lines}, for buffers "
"that do not have buffer-local values for it."
msgstr ""

# type: defopt
#: lispref/display.texi:166
#, no-wrap
msgid "truncate-partial-width-windows"
msgstr "truncate-partial-width-windows"

# type: defopt
#: lispref/display.texi:171
msgid ""
"This variable controls display of lines that extend beyond the right edge of "
"the window, in side-by-side windows (@pxref{Splitting Windows}).  If it is "
"non-@code{nil}, these lines are truncated; otherwise, @code{truncate-lines} "
"says what to do with them."
msgstr ""

# type: Plain text
#: lispref/display.texi:175
msgid ""
"When horizontal scrolling (@pxref{Horizontal Scrolling}) is in use in a "
"window, that forces truncation."
msgstr ""

# type: Plain text
#: lispref/display.texi:181
msgid ""
"If your buffer contains @emph{very} long lines, and you use continuation to "
"display them, just thinking about them can make Emacs redisplay slow.  The "
"column computation and indentation functions also become slow.  Then you "
"might find it advisable to set @code{cache-long-line-scans} to @code{t}."
msgstr ""

# type: item
#: lispref/display.texi:182 lispref/locals.texi:82
#, no-wrap
msgid "cache-long-line-scans"
msgstr "cache-long-line-scans"

# type: defvar
#: lispref/display.texi:187
msgid ""
"If this variable is non-@code{nil}, various indentation and motion "
"functions, and Emacs redisplay, cache the results of scanning the buffer, "
"and consult the cache to avoid rescanning regions of the buffer unless they "
"are modified."
msgstr ""

# type: defvar
#: lispref/display.texi:189
msgid "Turning on the cache slows down processing of short lines somewhat."
msgstr ""

# type: defvar
#: lispref/display.texi:191
msgid "This variable is automatically buffer-local in every buffer."
msgstr ""

# type: cindex
#: lispref/display.texi:195
#, no-wrap
msgid "error display"
msgstr ""

# type: cindex
#: lispref/display.texi:196
#, no-wrap
msgid "echo area"
msgstr ""

# type: Plain text
#: lispref/display.texi:206
msgid ""
"The @dfn{echo area} is used for displaying error messages (@pxref{Errors}), "
"for messages made with the @code{message} primitive, and for echoing "
"keystrokes.  It is not the same as the minibuffer, despite the fact that the "
"minibuffer appears (when active) in the same place on the screen as the echo "
"area.  The @cite{GNU Emacs Manual} specifies the rules for resolving "
"conflicts between the echo area and the minibuffer for use of that screen "
"space (@pxref{Minibuffer,, The Minibuffer, emacs, The GNU Emacs Manual})."
msgstr ""

# type: Plain text
#: lispref/display.texi:210
msgid ""
"You can write output in the echo area by using the Lisp printing functions "
"with @code{t} as the stream (@pxref{Output Functions}), or explicitly."
msgstr ""

# type: node
#: lispref/display.texi:216 lispref/display.texi:218
#, no-wrap
msgid "Displaying Messages"
msgstr ""

# type: menu
#: lispref/display.texi:216
msgid "Explicitly displaying text in the echo area."
msgstr ""

# type: node
#: lispref/display.texi:216 lispref/display.texi:319
#, no-wrap
msgid "Progress"
msgstr ""

# type: menu
#: lispref/display.texi:216
msgid "Informing user about progress of a long operation."
msgstr ""

# type: node
#: lispref/display.texi:216 lispref/display.texi:435
#, no-wrap
msgid "Logging Messages"
msgstr ""

# type: menu
#: lispref/display.texi:216
msgid "Echo area messages are logged for the user."
msgstr ""

# type: subsection
#: lispref/display.texi:216 lispref/display.texi:478 lispref/display.texi:479
#, no-wrap
msgid "Echo Area Customization"
msgstr ""

# type: menu
#: lispref/display.texi:216
msgid "Controlling the echo area."
msgstr ""

# type: subsection
#: lispref/display.texi:219
#, no-wrap
msgid "Displaying Messages in the Echo Area"
msgstr ""

# type: cindex
#: lispref/display.texi:220
#, no-wrap
msgid "display message in echo area"
msgstr ""

# type: Plain text
#: lispref/display.texi:224
msgid ""
"This section describes the functions for explicitly producing echo area "
"messages.  Many other Emacs features display messages there, too."
msgstr ""

# type: defun
#: lispref/display.texi:225
#, no-wrap
msgid "message format-string &rest arguments"
msgstr ""

# type: defun
#: lispref/display.texi:231
msgid ""
"This function displays a message in the echo area.  The argument @var{format-"
"string} is similar to a C language @code{printf} format string.  See @code"
"{format} in @ref{Formatting Strings}, for the details on the conversion "
"specifications.  @code{message} returns the constructed string."
msgstr ""

# type: defun
#: lispref/display.texi:234
msgid ""
"In batch mode, @code{message} prints the message text on the standard error "
"stream, followed by a newline."
msgstr ""

# type: defun
#: lispref/display.texi:237
msgid ""
"If @var{format-string}, or strings among the @var{arguments}, have @code"
"{face} text properties, these affect the way the message is displayed."
msgstr ""

# type: defun
#: lispref/display.texi:244
msgid ""
"If @var{format-string} is @code{nil} or the empty string, @code{message} "
"clears the echo area; if the echo area has been expanded automatically, this "
"brings it back to its normal size.  If the minibuffer is active, this brings "
"the minibuffer contents back onto the screen immediately."
msgstr ""

# type: group
#: lispref/display.texi:251
#, no-wrap
msgid ""
"(message \"Minibuffer depth is %d.\"\n"
"         (minibuffer-depth))\n"
" @print{} Minibuffer depth is 0.\n"
"@result{} \"Minibuffer depth is 0.\"\n"
msgstr ""

# type: group
#: lispref/display.texi:257
#, no-wrap
msgid ""
"---------- Echo Area ----------\n"
"Minibuffer depth is 0.\n"
"---------- Echo Area ----------\n"
msgstr ""

# type: defun
#: lispref/display.texi:262
msgid ""
"To automatically display a message in the echo area or in a pop-buffer, "
"depending on its size, use @code{display-message-or-buffer} (see below)."
msgstr ""

# type: defmac
#: lispref/display.texi:264
#, no-wrap
msgid "with-temp-message message &rest body"
msgstr ""

# type: defmac
#: lispref/display.texi:269
msgid ""
"This construct displays a message in the echo area temporarily, during the "
"execution of @var{body}.  It displays @var{message}, executes @var{body}, "
"then returns the value of the last body form while restoring the previous "
"echo area contents."
msgstr ""

# type: defun
#: lispref/display.texi:271
#, no-wrap
msgid "message-or-box format-string &rest arguments"
msgstr ""

# type: defun
#: lispref/display.texi:280
msgid ""
"This function displays a message like @code{message}, but may display it in "
"a dialog box instead of the echo area.  If this function is called in a "
"command that was invoked using the mouse---more precisely, if @code{last-"
"nonmenu-event} (@pxref{Command Loop Info}) is either @code{nil} or a list---"
"then it uses a dialog box or pop-up menu to display the message.  Otherwise, "
"it uses the echo area.  (This is the same criterion that @code{y-or-n-p} "
"uses to make a similar decision; see @ref{Yes-or-No Queries}.)"
msgstr ""

# type: defun
#: lispref/display.texi:283
msgid ""
"You can force use of the mouse or of the echo area by binding @code{last-"
"nonmenu-event} to a suitable value around the call."
msgstr ""

# type: defun
#: lispref/display.texi:285
#, no-wrap
msgid "message-box format-string &rest arguments"
msgstr ""

# type: anchor{#1}
#: lispref/display.texi:292
msgid "message-box"
msgstr ""

# type: defun
#: lispref/display.texi:292
msgid ""
"This function displays a message like @code{message}, but uses a dialog box "
"(or a pop-up menu) whenever that is possible.  If it is impossible to use a "
"dialog box or pop-up menu, because the terminal does not support them, then "
"@code{message-box} uses the echo area, like @code{message}."
msgstr ""

# type: defun
#: lispref/display.texi:294
#, no-wrap
msgid "display-message-or-buffer message &optional buffer-name not-this-window frame"
msgstr ""

# type: defun
#: lispref/display.texi:300
msgid ""
"This function displays the message @var{message}, which may be either a "
"string or a buffer.  If it is shorter than the maximum height of the echo "
"area, as defined by @code{max-mini-window-height}, it is displayed in the "
"echo area, using @code{message}.  Otherwise, @code{display-buffer} is used "
"to show it in a pop-up buffer."
msgstr ""

# type: defun
#: lispref/display.texi:303
msgid ""
"Returns either the string shown in the echo area, or when a pop-up buffer is "
"used, the window used to display it."
msgstr ""

# type: defun
#: lispref/display.texi:309
msgid ""
"If @var{message} is a string, then the optional argument @var{buffer-name} "
"is the name of the buffer used to display it when a pop-up buffer is used, "
"defaulting to @samp{*Message*}.  In the case where @var{message} is a string "
"and displayed in the echo area, it is not specified whether the contents are "
"inserted into the buffer anyway."
msgstr ""

# type: defun
#: lispref/display.texi:312
msgid ""
"The optional arguments @var{not-this-window} and @var{frame} are as for @code"
"{display-buffer}, and only used if a buffer is displayed."
msgstr ""

# type: defun
#: lispref/display.texi:314
#, no-wrap
msgid "current-message"
msgstr ""

# type: defun
#: lispref/display.texi:317
msgid ""
"This function returns the message currently being displayed in the echo "
"area, or @code{nil} if there is none."
msgstr ""

# type: subsection
#: lispref/display.texi:320
#, no-wrap
msgid "Reporting Operation Progress"
msgstr ""

# type: cindex
#: lispref/display.texi:321
#, no-wrap
msgid "progress reporting"
msgstr ""

# type: Plain text
#: lispref/display.texi:326
msgid ""
"When an operation can take a while to finish, you should inform the user "
"about the progress it makes.  This way the user can estimate remaining time "
"and clearly see that Emacs is busy working, not hung."
msgstr ""

# type: Plain text
#: lispref/display.texi:330
msgid ""
"Functions listed in this section provide simple and efficient way of "
"reporting operation progress.  Here is a working example that does nothing "
"useful:"
msgstr ""

# type: smallexample
#: lispref/display.texi:339
#, no-wrap
msgid ""
"(let ((progress-reporter\n"
"       (make-progress-reporter \"Collecting mana for Emacs...\"\n"
"                               0  500)))\n"
"  (dotimes (k 500)\n"
"    (sit-for 0.01)\n"
"    (progress-reporter-update progress-reporter k))\n"
"  (progress-reporter-done progress-reporter))\n"
msgstr ""

# type: defun
#: lispref/display.texi:341
#, no-wrap
msgid "make-progress-reporter message min-value max-value &optional current-value min-change min-time"
msgstr ""

# type: defun
#: lispref/display.texi:346
msgid ""
"This function creates and returns a @dfn{progress reporter}---an object you "
"will use as an argument for all other functions listed here.  The idea is to "
"precompute as much data as possible to make progress reporting very fast."
msgstr ""

# type: defun
#: lispref/display.texi:352
msgid ""
"When this progress reporter is subsequently used, it will display @var"
"{message} in the echo area, followed by progress percentage.  @var{message} "
"is treated as a simple string.  If you need it to depend on a filename, for "
"instance, use @code{format} before calling this function."
msgstr ""

# type: defun
#: lispref/display.texi:361
msgid ""
"@var{min-value} and @var{max-value} arguments stand for starting and final "
"states of your operation.  For instance, if you scan a buffer, they should "
"be the results of @code{point-min} and @code{point-max} correspondingly.  It "
"is required that @var{max-value} is greater than @var{min-value}.  If you "
"create progress reporter when some part of the operation has already been "
"completed, then specify @var{current-value} argument.  But normally you "
"should omit it or set it to @code{nil}---it will default to @var{min-value} "
"then."
msgstr ""

# type: defun
#: lispref/display.texi:371
msgid ""
"Remaining arguments control the rate of echo area updates.  Progress "
"reporter will wait for at least @var{min-change} more percents of the "
"operation to be completed before printing next message.  @var{min-time} "
"specifies the minimum time in seconds to pass between successive prints.  It "
"can be fractional.  Depending on Emacs and system capabilities, progress "
"reporter may or may not respect this last argument or do it with varying "
"precision.  Default value for @var{min-change} is 1 (one percent), for @var"
"{min-time}---0.2 (seconds.)"
msgstr ""

# type: defun
#: lispref/display.texi:374
msgid ""
"This function calls @code{progress-reporter-update}, so the first message is "
"printed immediately."
msgstr ""

# type: defun
#: lispref/display.texi:376
#, no-wrap
msgid "progress-reporter-update reporter value"
msgstr ""

# type: defun
#: lispref/display.texi:382
msgid ""
"This function does the main work of reporting progress of your operation.  "
"It displays the message of @var{reporter}, followed by progress percentage "
"determined by @var{value}.  If percentage is zero, or close enough according "
"to the @var{min-change} and @var{min-time} arguments, then it is omitted "
"from the output."
msgstr ""

# type: defun
#: lispref/display.texi:389
msgid ""
"@var{reporter} must be the result of a call to @code{make-progress-"
"reporter}.  @var{value} specifies the current state of your operation and "
"must be between @var{min-value} and @var{max-value} (inclusive) as passed to "
"@code{make-progress-reporter}.  For instance, if you scan a buffer, then @var"
"{value} should be the result of a call to @code{point}."
msgstr ""

# type: defun
#: lispref/display.texi:395
msgid ""
"This function respects @var{min-change} and @var{min-time} as passed to @code"
"{make-progress-reporter} and so does not output new messages on every "
"invocation.  It is thus very fast and normally you should not try to reduce "
"the number of calls to it: resulting overhead will most likely negate your "
"effort."
msgstr ""

# type: defun
#: lispref/display.texi:397
#, no-wrap
msgid "progress-reporter-force-update reporter value &optional new-message"
msgstr ""

# type: defun
#: lispref/display.texi:400
msgid ""
"This function is similar to @code{progress-reporter-update} except that it "
"prints a message in the echo area unconditionally."
msgstr ""

# type: defun
#: lispref/display.texi:406
msgid ""
"The first two arguments have the same meaning as for @code{progress-reporter-"
"update}.  Optional @var{new-message} allows you to change the message of the "
"@var{reporter}.  Since this functions always updates the echo area, such a "
"change will be immediately presented to the user."
msgstr ""

# type: defun
#: lispref/display.texi:408
#, no-wrap
msgid "progress-reporter-done reporter"
msgstr ""

# type: defun
#: lispref/display.texi:412
msgid ""
"This function should be called when the operation is finished.  It prints "
"the message of @var{reporter} followed by word ``done'' in the echo area."
msgstr ""

# type: defun
#: lispref/display.texi:417
msgid ""
"You should always call this function and not hope for @code{progress-"
"reporter-update} to print ``100%.'' Firstly, it may never print it, there "
"are many good reasons for this not to happen.  Secondly, ``done'' is more "
"explicit."
msgstr ""

# type: defmac
#: lispref/display.texi:419
#, no-wrap
msgid "dotimes-with-progress-reporter (var count [result]) message body@dots{}"
msgstr ""

# type: defmac
#: lispref/display.texi:423
msgid ""
"This is a convenience macro that works the same way as @code{dotimes} does, "
"but also reports loop progress using the functions described above.  It "
"allows you to save some typing."
msgstr ""

# type: defmac
#: lispref/display.texi:426
msgid ""
"You can rewrite the example in the beginning of this node using this macro "
"this way:"
msgstr ""

# type: example
#: lispref/display.texi:432
#, no-wrap
msgid ""
"(dotimes-with-progress-reporter\n"
"    (k 500)\n"
"    \"Collecting some mana for Emacs...\"\n"
"  (sit-for 0.01))\n"
msgstr ""

# type: subsection
#: lispref/display.texi:436
#, no-wrap
msgid "Logging Messages in @samp{*Messages*}"
msgstr ""

# type: cindex
#: lispref/display.texi:437
#, no-wrap
msgid "logging echo-area messages"
msgstr ""

# type: Plain text
#: lispref/display.texi:443
msgid ""
"Almost all the messages displayed in the echo area are also recorded in the "
"@samp{*Messages*} buffer so that the user can refer back to them.  This "
"includes all the messages that are output with @code{message}."
msgstr ""

# type: defopt
#: lispref/display.texi:444
#, no-wrap
msgid "message-log-max"
msgstr "message-log-max"

# type: defopt
#: lispref/display.texi:449
msgid ""
"This variable specifies how many lines to keep in the @samp{*Messages*} "
"buffer.  The value @code{t} means there is no limit on how many lines to "
"keep.  The value @code{nil} disables message logging entirely.  Here's how "
"to display a message and prevent it from being logged:"
msgstr ""

# type: example
#: lispref/display.texi:453
#, no-wrap
msgid ""
"(let (message-log-max)\n"
"  (message @dots{}))\n"
msgstr ""

# type: Plain text
#: lispref/display.texi:460
msgid ""
"To make @samp{*Messages*} more convenient for the user, the logging facility "
"combines successive identical messages.  It also combines successive related "
"messages for the sake of two cases: question followed by answer, and a "
"series of progress messages."
msgstr ""

# type: Plain text
#: lispref/display.texi:466
msgid ""
"A ``question followed by an answer'' means two messages like the ones "
"produced by @code{y-or-n-p}: the first is @samp{@var{question}}, and the "
"second is @samp{@var{question}...@var{answer}}.  The first message conveys "
"no additional information beyond what's in the second, so logging the second "
"message discards the first from the log."
msgstr ""

# type: Plain text
#: lispref/display.texi:472
msgid ""
"A ``series of progress messages'' means successive messages like those "
"produced by @code{make-progress-reporter}.  They have the form @samp{@var"
"{base}...@var{how-far}}, where @var{base} is the same each time, while @var"
"{how-far} varies.  Logging each message in the series discards the previous "
"one, provided they are consecutive."
msgstr ""

# type: Plain text
#: lispref/display.texi:477
msgid ""
"The functions @code{make-progress-reporter} and @code{y-or-n-p} don't have "
"to do anything special to activate the message log combination feature.  It "
"operates whenever two consecutive messages are logged that share a common "
"prefix ending in @samp{...}."
msgstr ""

# type: Plain text
#: lispref/display.texi:482
msgid "These variables control details of how the echo area works."
msgstr ""

# type: defvar
#: lispref/display.texi:483
#, no-wrap
msgid "cursor-in-echo-area"
msgstr "cursor-in-echo-area"

# type: defvar
#: lispref/display.texi:488
msgid ""
"This variable controls where the cursor appears when a message is displayed "
"in the echo area.  If it is non-@code{nil}, then the cursor appears at the "
"end of the message.  Otherwise, the cursor appears at point---not in the "
"echo area at all."
msgstr ""

# type: defvar
#: lispref/display.texi:491
msgid ""
"The value is normally @code{nil}; Lisp programs bind it to @code{t} for "
"brief periods of time."
msgstr ""

# type: item
#: lispref/display.texi:493 lispref/hooks.texi:147
#, no-wrap
msgid "echo-area-clear-hook"
msgstr "echo-area-clear-hook"

# type: defvar
#: lispref/display.texi:496
msgid ""
"This normal hook is run whenever the echo area is cleared---either by @code"
"{(message nil)} or for any other reason."
msgstr ""

# type: defvar
#: lispref/display.texi:498
#, no-wrap
msgid "echo-keystrokes"
msgstr "echo-keystrokes"

# type: defvar
#: lispref/display.texi:507
msgid ""
"This variable determines how much time should elapse before command "
"characters echo.  Its value must be an integer or floating point number, "
"which specifies the number of seconds to wait before echoing.  If the user "
"types a prefix key (such as @kbd{C-x}) and then delays this many seconds "
"before continuing, the prefix key is echoed in the echo area.  (Once echoing "
"begins in a key sequence, all subsequent characters in the same key sequence "
"are echoed immediately.)"
msgstr ""

# type: defvar
#: lispref/display.texi:509
msgid "If the value is zero, then command input is not echoed."
msgstr ""

# type: defvar
#: lispref/display.texi:511
#, no-wrap
msgid "message-truncate-lines"
msgstr "message-truncate-lines"

# type: defvar
#: lispref/display.texi:516
msgid ""
"Normally, displaying a long message resizes the echo area to display the "
"entire message.  But if the variable @code{message-truncate-lines} is non-"
"@code{nil}, the echo area does not resize, and the message is truncated to "
"fit it, as in Emacs 20 and before."
msgstr ""

# type: Plain text
#: lispref/display.texi:522
msgid ""
"The variable @code{max-mini-window-height}, which specifies the maximum "
"height for resizing minibuffer windows, also applies to the echo area (which "
"is really a special use of the minibuffer window.  @xref{Minibuffer Misc}."
msgstr ""

# type: section
#: lispref/display.texi:524
#, no-wrap
msgid "Reporting Warnings"
msgstr ""

# type: cindex
#: lispref/display.texi:525
#, no-wrap
msgid "warnings"
msgstr ""

# type: Plain text
#: lispref/display.texi:529
msgid ""
"@dfn{Warnings} are a facility for a program to inform the user of a possible "
"problem, but continue running."
msgstr ""

# type: subsection
#: lispref/display.texi:534 lispref/display.texi:536 lispref/display.texi:537
#, no-wrap
msgid "Warning Basics"
msgstr ""

# type: menu
#: lispref/display.texi:534
msgid "Warnings concepts and functions to report them."
msgstr ""

# type: subsection
#: lispref/display.texi:534 lispref/display.texi:602 lispref/display.texi:603
#, no-wrap
msgid "Warning Variables"
msgstr ""

# type: menu
#: lispref/display.texi:534
msgid "Variables programs bind to customize their warnings."
msgstr ""

# type: subsection
#: lispref/display.texi:534 lispref/display.texi:679 lispref/display.texi:680
#, no-wrap
msgid "Warning Options"
msgstr ""

# type: menu
#: lispref/display.texi:534
msgid "Variables users set to control display of warnings."
msgstr ""

# type: cindex
#: lispref/display.texi:538
#, no-wrap
msgid "severity level"
msgstr ""

# type: Plain text
#: lispref/display.texi:544
msgid ""
"Every warning has a textual message, which explains the problem for the "
"user, and a @dfn{severity level} which is a symbol.  Here are the possible "
"severity levels, in order of decreasing severity, and their meanings:"
msgstr ""

# type: item
#: lispref/display.texi:546
#, no-wrap
msgid ":emergency"
msgstr ""

# type: table
#: lispref/display.texi:549
msgid ""
"A problem that will seriously impair Emacs operation soon if you do not "
"attend to it promptly."
msgstr ""

# type: item
#: lispref/display.texi:549
#, no-wrap
msgid ":error"
msgstr ""

# type: table
#: lispref/display.texi:551
msgid "A report of data or circumstances that are inherently wrong."
msgstr ""

# type: item
#: lispref/display.texi:551
#, no-wrap
msgid ":warning"
msgstr ""

# type: table
#: lispref/display.texi:554
msgid ""
"A report of data or circumstances that are not inherently wrong, but raise "
"suspicion of a possible problem."
msgstr ""

# type: item
#: lispref/display.texi:554
#, no-wrap
msgid ":debug"
msgstr ""

# type: table
#: lispref/display.texi:556
msgid "A report of information that may be useful if you are debugging."
msgstr ""

# type: Plain text
#: lispref/display.texi:570
msgid ""
"When your program encounters invalid input data, it can either signal a Lisp "
"error by calling @code{error} or @code{signal} or report a warning with "
"severity @code{:error}.  Signaling a Lisp error is the easiest thing to do, "
"but it means the program cannot continue processing.  If you want to take "
"the trouble to implement a way to continue processing despite the bad data, "
"then reporting a warning of severity @code{:error} is the right way to "
"inform the user of the problem.  For instance, the Emacs Lisp byte compiler "
"can report an error that way and continue compiling other functions.  (If "
"the program signals a Lisp error and then handles it with @code{condition-"
"case}, the user won't see the error message; it could show the message to "
"the user by reporting it as a warning.)"
msgstr ""

# type: cindex
#: lispref/display.texi:571
#, no-wrap
msgid "warning type"
msgstr ""

# type: Plain text
#: lispref/display.texi:578
msgid ""
"Each warning has a @dfn{warning type} to classify it.  The type is a list of "
"symbols.  The first symbol should be the custom group that you use for the "
"program's user options.  For example, byte compiler warnings use the warning "
"type @code{(bytecomp)}.  You can also subcategorize the warnings, if you "
"wish, by using more symbols in the list."
msgstr ""

# type: defun
#: lispref/display.texi:579
#, no-wrap
msgid "display-warning type message &optional level buffer-name"
msgstr ""

# type: defun
#: lispref/display.texi:583
msgid ""
"This function reports a warning, using @var{message} as the message and @var"
"{type} as the warning type.  @var{level} should be the severity level, with "
"@code{:warning} being the default."
msgstr ""

# type: defun
#: lispref/display.texi:586
msgid ""
"@var{buffer-name}, if non-@code{nil}, specifies the name of the buffer for "
"logging the warning.  By default, it is @samp{*Warnings*}."
msgstr ""

# type: defun
#: lispref/display.texi:588
#, no-wrap
msgid "lwarn type level message &rest args"
msgstr ""

# type: defun
#: lispref/display.texi:592
msgid ""
"This function reports a warning using the value of @code{(format @var"
"{message} @var{args}...)} as the message.  In other respects it is "
"equivalent to @code{display-warning}."
msgstr ""

# type: defun
#: lispref/display.texi:594
#, no-wrap
msgid "warn message &rest args"
msgstr ""

# type: defun
#: lispref/display.texi:600
msgid ""
"This function reports a warning using the value of @code{(format @var"
"{message} @var{args}...)} as the message, @code{(emacs)} as the type, and "
"@code{:warning} as the severity level.  It exists for compatibility only; we "
"recommend not using it, because you should specify a specific warning type."
msgstr ""

# type: Plain text
#: lispref/display.texi:607
msgid ""
"Programs can customize how their warnings appear by binding the variables "
"described in this section."
msgstr ""

# type: defvar
#: lispref/display.texi:608
#, no-wrap
msgid "warning-levels"
msgstr ""

# type: defvar
#: lispref/display.texi:612
msgid ""
"This list defines the meaning and severity order of the warning severity "
"levels.  Each element defines one severity level, and they are arranged in "
"order of decreasing severity."
msgstr ""

# type: defvar
#: lispref/display.texi:619
msgid ""
"Each element has the form @code{(@var{level} @var{string} @var{function})}, "
"where @var{level} is the severity level it defines.  @var{string} specifies "
"the textual description of this level.  @var{string} should use @samp{%s} to "
"specify where to put the warning type information, or it can omit the @samp{%"
"s} so as not to include that information."
msgstr ""

# type: defvar
#: lispref/display.texi:622
msgid ""
"The optional @var{function}, if non-@code{nil}, is a function to call with "
"no arguments, to get the user's attention."
msgstr ""

# type: defvar
#: lispref/display.texi:624
msgid "Normally you should not change the value of this variable."
msgstr ""

# type: defvar
#: lispref/display.texi:626
#, no-wrap
msgid "warning-prefix-function"
msgstr ""

# type: defvar
#: lispref/display.texi:632
msgid ""
"If non-@code{nil}, the value is a function to generate prefix text for "
"warnings.  Programs can bind the variable to a suitable function.  @code"
"{display-warning} calls this function with the warnings buffer current, and "
"the function can insert text in it.  That text becomes the beginning of the "
"warning message."
msgstr ""

# type: defvar
#: lispref/display.texi:639
msgid ""
"The function is called with two arguments, the severity level and its entry "
"in @code{warning-levels}.  It should return a list to use as the entry (this "
"value need not be an actual member of @code{warning-levels}).  By "
"constructing this value, the function can change the severity of the "
"warning, or specify different handling for a given severity level."
msgstr ""

# type: defvar
#: lispref/display.texi:642
msgid ""
"If the variable's value is @code{nil} then there is no function to call."
msgstr ""

# type: defvar
#: lispref/display.texi:644
#, no-wrap
msgid "warning-series"
msgstr ""

# type: defvar
#: lispref/display.texi:651
msgid ""
"Programs can bind this variable to @code{t} to say that the next warning "
"should begin a series.  When several warnings form a series, that means to "
"leave point on the first warning of the series, rather than keep moving it "
"for each warning so that it appears on the last one.  The series ends when "
"the local binding is unbound and @code{warning-series} becomes @code{nil} "
"again."
msgstr ""

# type: defvar
#: lispref/display.texi:657
msgid ""
"The value can also be a symbol with a function definition.  That is "
"equivalent to @code{t}, except that the next warning will also call the "
"function with no arguments with the warnings buffer current.  The function "
"can insert text which will serve as a header for the series of warnings."
msgstr ""

# type: defvar
#: lispref/display.texi:660
msgid ""
"Once a series has begun, the value is a marker which points to the buffer "
"position in the warnings buffer of the start of the series."
msgstr ""

# type: defvar
#: lispref/display.texi:663
msgid ""
"The variable's normal value is @code{nil}, which means to handle each "
"warning separately."
msgstr ""

# type: defvar
#: lispref/display.texi:665
#, no-wrap
msgid "warning-fill-prefix"
msgstr ""

# type: defvar
#: lispref/display.texi:668
msgid ""
"When this variable is non-@code{nil}, it specifies a fill prefix to use for "
"filling each warning's text."
msgstr ""

# type: defvar
#: lispref/display.texi:670
#, no-wrap
msgid "warning-type-format"
msgstr ""

# type: defvar
#: lispref/display.texi:677
msgid ""
"This variable specifies the format for displaying the warning type in the "
"warning message.  The result of formatting the type this way gets included "
"in the message under the control of the string in the entry in @code{warning-"
"levels}.  The default value is @code{\" (%s)\"}.  If you bind it to @code"
"{\"\"} then the warning type won't appear at all."
msgstr ""

# type: Plain text
#: lispref/display.texi:684
msgid ""
"These variables are used by users to control what happens when a Lisp "
"program reports a warning."
msgstr ""

# type: defopt
#: lispref/display.texi:685
#, no-wrap
msgid "warning-minimum-level"
msgstr "warning-minimum-level"

# type: defopt
#: lispref/display.texi:690
msgid ""
"This user option specifies the minimum severity level that should be shown "
"immediately to the user.  The default is @code{:warning}, which means to "
"immediately display all warnings except @code{:debug} warnings."
msgstr ""

# type: defopt
#: lispref/display.texi:692
#, no-wrap
msgid "warning-minimum-log-level"
msgstr "warning-minimum-log-level"

# type: defopt
#: lispref/display.texi:696
msgid ""
"This user option specifies the minimum severity level that should be logged "
"in the warnings buffer.  The default is @code{:warning}, which means to log "
"all warnings except @code{:debug} warnings."
msgstr ""

# type: defopt
#: lispref/display.texi:698
#, no-wrap
msgid "warning-suppress-types"
msgstr "warning-suppress-types"

# type: defopt
#: lispref/display.texi:703
msgid ""
"This list specifies which warning types should not be displayed immediately "
"for the user.  Each element of the list should be a list of symbols.  If its "
"elements match the first elements in a warning type, then that warning is "
"not displayed immediately."
msgstr ""

# type: defopt
#: lispref/display.texi:705
#, no-wrap
msgid "warning-suppress-log-types"
msgstr "warning-suppress-log-types"

# type: defopt
#: lispref/display.texi:710
msgid ""
"This list specifies which warning types should not be logged in the warnings "
"buffer.  Each element of the list should be a list of symbols.  If it "
"matches the first few elements in a warning type, then that warning is not "
"logged."
msgstr ""

# type: cindex
#: lispref/display.texi:715
#, no-wrap
msgid "invisible text"
msgstr ""

# type: Plain text
#: lispref/display.texi:722
msgid ""
"You can make characters @dfn{invisible}, so that they do not appear on the "
"screen, with the @code{invisible} property.  This can be either a text "
"property (@pxref{Text Properties}) or a property of an overlay (@pxref"
"{Overlays}).  Cursor motion also partly ignores these characters; if the "
"command loop finds point within them, it moves point to the other side of "
"them."
msgstr ""

# type: Plain text
#: lispref/display.texi:729
msgid ""
"In the simplest case, any non-@code{nil} @code{invisible} property makes a "
"character invisible.  This is the default case---if you don't alter the "
"default value of @code{buffer-invisibility-spec}, this is how the @code"
"{invisible} property works.  You should normally use @code{t} as the value "
"of the @code{invisible} property if you don't plan to set @code{buffer-"
"invisibility-spec} yourself."
msgstr ""

# type: Plain text
#: lispref/display.texi:736
msgid ""
"More generally, you can use the variable @code{buffer-invisibility-spec} to "
"control which values of the @code{invisible} property make text invisible.  "
"This permits you to classify the text into different subsets in advance, by "
"giving them different @code{invisible} values, and subsequently make various "
"subsets visible or invisible by changing the value of @code{buffer-"
"invisibility-spec}."
msgstr ""

# type: Plain text
#: lispref/display.texi:743
msgid ""
"Controlling visibility with @code{buffer-invisibility-spec} is especially "
"useful in a program to display the list of entries in a database.  It "
"permits the implementation of convenient filtering commands to view just a "
"part of the entries in the database.  Setting this variable is very fast, "
"much faster than scanning all the text in the buffer looking for properties "
"to change."
msgstr ""

# type: item
#: lispref/display.texi:744 lispref/locals.texi:64
#, no-wrap
msgid "buffer-invisibility-spec"
msgstr "buffer-invisibility-spec"

# type: defvar
#: lispref/display.texi:748
msgid ""
"This variable specifies which kinds of @code{invisible} properties actually "
"make a character invisible.  Setting this variable makes it buffer-local."
msgstr ""

# type: table
#: lispref/display.texi:753
msgid ""
"A character is invisible if its @code{invisible} property is non-@code"
"{nil}.  This is the default."
msgstr ""

# type: item
#: lispref/display.texi:754 lispref/display.texi:1791 lispref/edebug.texi:1143
#, no-wrap
msgid "a list"
msgstr ""

# type: table
#: lispref/display.texi:758
msgid ""
"Each element of the list specifies a criterion for invisibility; if a "
"character's @code{invisible} property fits any one of these criteria, the "
"character is invisible.  The list can have two kinds of elements:"
msgstr ""

# type: item
#: lispref/display.texi:760 lispref/objects.texi:1715
#, no-wrap
msgid "atom"
msgstr ""

# type: table
#: lispref/display.texi:763
msgid ""
"A character is invisible if its @code{invisible} property value is @var"
"{atom} or if it is a list with @var{atom} as a member."
msgstr ""

# type: item
#: lispref/display.texi:764
#, no-wrap
msgid "(@var{atom} . t)"
msgstr ""

# type: table
#: lispref/display.texi:768
msgid ""
"A character is invisible if its @code{invisible} property value is @var"
"{atom} or if it is a list with @var{atom} as a member.  Moreover, a sequence "
"of such characters displays as an ellipsis."
msgstr ""

# type: Plain text
#: lispref/display.texi:774
msgid ""
"Two functions are specifically provided for adding elements to @code{buffer-"
"invisibility-spec} and removing elements from it."
msgstr ""

# type: defun
#: lispref/display.texi:775
#, no-wrap
msgid "add-to-invisibility-spec element"
msgstr ""

# type: defun
#: lispref/display.texi:780
msgid ""
"This function adds the element @var{element} to @code{buffer-invisibility-"
"spec}.  If @code{buffer-invisibility-spec} was @code{t}, it changes to a "
"list, @code{(t)}, so that text whose @code{invisible} property is @code{t} "
"remains invisible."
msgstr ""

# type: defun
#: lispref/display.texi:782
#, no-wrap
msgid "remove-from-invisibility-spec element"
msgstr ""

# type: defun
#: lispref/display.texi:786
msgid ""
"This removes the element @var{element} from @code{buffer-invisibility-"
"spec}.  This does nothing if @var{element} is not in the list."
msgstr ""

# type: Plain text
#: lispref/display.texi:792
msgid ""
"A convention for use of @code{buffer-invisibility-spec} is that a major mode "
"should use the mode's own name as an element of @code{buffer-invisibility-"
"spec} and as the value of the @code{invisible} property:"
msgstr ""

# type: example
#: lispref/display.texi:798
#, no-wrap
msgid ""
";; @r{If you want to display an ellipsis:}\n"
"(add-to-invisibility-spec '(my-symbol . t))\n"
";; @r{If you don't want ellipsis:}\n"
"(add-to-invisibility-spec 'my-symbol)\n"
"\n"
msgstr ""

# type: example
#: lispref/display.texi:801
#, no-wrap
msgid ""
"(overlay-put (make-overlay beginning end)\n"
"             'invisible 'my-symbol)\n"
"\n"
msgstr ""

# type: example
#: lispref/display.texi:806
#, no-wrap
msgid ""
";; @r{When done with the overlays:}\n"
"(remove-from-invisibility-spec '(my-symbol . t))\n"
";; @r{Or respectively:}\n"
"(remove-from-invisibility-spec 'my-symbol)\n"
msgstr ""

# type: vindex
#: lispref/display.texi:808
#, no-wrap
msgid "line-move-ignore-invisible"
msgstr ""

# type: Plain text
#: lispref/display.texi:814
msgid ""
"Ordinarily, functions that operate on text or move point do not care whether "
"the text is invisible.  The user-level line motion commands explicitly "
"ignore invisible newlines if @code{line-move-ignore-invisible} is non-@code"
"{nil} (the default), but only because they are explicitly programmed to do "
"so."
msgstr ""

# type: Plain text
#: lispref/display.texi:824
msgid ""
"However, if a command ends with point inside or immediately before invisible "
"text, the main editing loop moves point further forward or further backward "
"(in the same direction that the command already moved it) until that "
"condition is no longer true.  Thus, if the command moved point back into an "
"invisible range, Emacs moves point back to the beginning of that range, and "
"then back one more character.  If the command moved point forward into an "
"invisible range, Emacs moves point forward up to the first visible character "
"that follows the invisible text."
msgstr ""

# type: Plain text
#: lispref/display.texi:832
msgid ""
"Incremental search can make invisible overlays visible temporarily and/or "
"permanently when a match includes invisible text.  To enable this, the "
"overlay should have a non-@code{nil} @code{isearch-open-invisible} "
"property.  The property value should be a function to be called with the "
"overlay as an argument.  This function should make the overlay visible "
"permanently; it is used when the match overlaps the overlay on exit from the "
"search."
msgstr ""

# type: Plain text
#: lispref/display.texi:840
msgid ""
"During the search, such overlays are made temporarily visible by temporarily "
"modifying their invisible and intangible properties.  If you want this to be "
"done differently for a certain overlay, give it an @code{isearch-open-"
"invisible-temporary} property which is a function.  The function is called "
"with two arguments: the first is the overlay, and the second is @code{nil} "
"to make the overlay visible, or @code{t} to make it invisible again."
msgstr ""

# type: Plain text
#: lispref/display.texi:847
msgid ""
"@dfn{Selective display} refers to a pair of related features for hiding "
"certain lines on the screen."
msgstr ""

# type: Plain text
#: lispref/display.texi:853
msgid ""
"The first variant, explicit selective display, is designed for use in a Lisp "
"program: it controls which lines are hidden by altering the text.  This kind "
"of hiding in some ways resembles the effect of the @code{invisible} property "
"(@pxref{Invisible Text}), but the two features are different and do not work "
"the same way."
msgstr ""

# type: Plain text
#: lispref/display.texi:857
msgid ""
"In the second variant, the choice of lines to hide is made automatically "
"based on indentation.  This variant is designed to be a user-level feature."
msgstr ""

# type: Plain text
#: lispref/display.texi:863
msgid ""
"The way you control explicit selective display is by replacing a newline "
"(control-j) with a carriage return (control-m).  The text that was formerly "
"a line following that newline is now hidden.  Strictly speaking, it is "
"temporarily no longer a line at all, since only newlines can separate lines; "
"it is now part of the previous line."
msgstr ""

# type: Plain text
#: lispref/display.texi:872
msgid ""
"Selective display does not directly affect editing commands.  For example, "
"@kbd{C-f} (@code{forward-char}) moves point unhesitatingly into hidden "
"text.  However, the replacement of newline characters with carriage return "
"characters affects some editing commands.  For example, @code{next-line} "
"skips hidden lines, since it searches only for newlines.  Modes that use "
"selective display can also define commands that take account of the "
"newlines, or that control which parts of the text are hidden."
msgstr ""

# type: Plain text
#: lispref/display.texi:877
msgid ""
"When you write a selectively displayed buffer into a file, all the control-"
"m's are output as newlines.  This means that when you next read in the file, "
"it looks OK, with nothing hidden.  The selective display effect is seen only "
"within Emacs."
msgstr ""

# type: item
#: lispref/display.texi:878 lispref/locals.texi:207
#, no-wrap
msgid "selective-display"
msgstr ""

# type: defvar
#: lispref/display.texi:881
msgid ""
"This buffer-local variable enables selective display.  This means that "
"lines, or portions of lines, may be made hidden."
msgstr ""

# type: itemize
#: lispref/display.texi:888
msgid ""
"If the value of @code{selective-display} is @code{t}, then the character "
"control-m marks the start of hidden text; the control-m, and the rest of the "
"line following it, are not displayed.  This is explicit selective display."
msgstr ""

# type: itemize
#: lispref/display.texi:893
msgid ""
"If the value of @code{selective-display} is a positive integer, then lines "
"that start with more than that many columns of indentation are not displayed."
msgstr ""

# type: defvar
#: lispref/display.texi:901
msgid ""
"When some portion of a buffer is hidden, the vertical movement commands "
"operate as if that portion did not exist, allowing a single @code{next-line} "
"command to skip any number of hidden lines.  However, character movement "
"commands (such as @code{forward-char}) do not skip the hidden portion, and "
"it is possible (if tricky) to insert or delete text in an hidden portion."
msgstr ""

# type: defvar
#: lispref/display.texi:906
msgid ""
"In the examples below, we show the @emph{display appearance} of the buffer "
"@code{foo}, which changes with the value of @code{selective-display}.  The "
"@emph{contents} of the buffer do not change."
msgstr ""

# type: group
#: lispref/display.texi:911
#, no-wrap
msgid ""
"(setq selective-display nil)\n"
"     @result{} nil\n"
"\n"
msgstr ""

# type: group
#: lispref/display.texi:920
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"1 on this column\n"
" 2on this column\n"
"  3n this column\n"
"  3n this column\n"
" 2on this column\n"
"1 on this column\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: group
#: lispref/display.texi:925
#, no-wrap
msgid ""
"(setq selective-display 2)\n"
"     @result{} 2\n"
"\n"
msgstr ""

# type: group
#: lispref/display.texi:932
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"1 on this column\n"
" 2on this column\n"
" 2on this column\n"
"1 on this column\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: item
#: lispref/display.texi:936 lispref/locals.texi:210
#, no-wrap
msgid "selective-display-ellipses"
msgstr ""

# type: defvar
#: lispref/display.texi:940
msgid ""
"If this buffer-local variable is non-@code{nil}, then Emacs displays @samp"
"{@dots{}} at the end of a line that is followed by hidden text.  This "
"example is a continuation of the previous one."
msgstr ""

# type: group
#: lispref/display.texi:945
#, no-wrap
msgid ""
"(setq selective-display-ellipses t)\n"
"     @result{} t\n"
"\n"
msgstr ""

# type: group
#: lispref/display.texi:952
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"1 on this column\n"
" 2on this column ...\n"
" 2on this column\n"
"1 on this column\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: defvar
#: lispref/display.texi:957
msgid ""
"You can use a display table to substitute other text for the ellipsis (@samp"
"{@dots{}}).  @xref{Display Tables}."
msgstr ""

# type: Plain text
#: lispref/display.texi:965
msgid ""
"Temporary displays are used by Lisp programs to put output into a buffer and "
"then present it to the user for perusal rather than for editing.  Many help "
"commands use this feature."
msgstr ""

# type: defspec
#: lispref/display.texi:966
#, no-wrap
msgid "with-output-to-temp-buffer buffer-name forms@dots{}"
msgstr ""

# type: defspec
#: lispref/display.texi:971
msgid ""
"This function executes @var{forms} while arranging to insert any output they "
"print into the buffer named @var{buffer-name}, which is first created if "
"necessary, and put into Help mode.  Finally, the buffer is displayed in some "
"window, but not selected."
msgstr ""

# type: defspec
#: lispref/display.texi:979
msgid ""
"If the @var{forms} do not change the major mode in the output buffer, so "
"that it is still Help mode at the end of their execution, then @code{with-"
"output-to-temp-buffer} makes this buffer read-only at the end, and also "
"scans it for function and variable names to make them into clickable cross-"
"references.  @xref{Docstring hyperlinks, , Tips for Documentation Strings}, "
"in particular the item on hyperlinks in documentation strings, for more "
"details."
msgstr ""

# type: defspec
#: lispref/display.texi:984
msgid ""
"The string @var{buffer-name} specifies the temporary buffer, which need not "
"already exist.  The argument must be a string, not a buffer.  The buffer is "
"erased initially (with no questions asked), and it is marked as unmodified "
"after @code{with-output-to-temp-buffer} exits."
msgstr ""

# type: defspec
#: lispref/display.texi:991
msgid ""
"@code{with-output-to-temp-buffer} binds @code{standard-output} to the "
"temporary buffer, then it evaluates the forms in @var{forms}.  Output using "
"the Lisp output functions within @var{forms} goes by default to that buffer "
"(but screen display and messages in the echo area, although they are "
"``output'' in the general sense of the word, are not affected).  @xref"
"{Output Functions}."
msgstr ""

# type: defspec
#: lispref/display.texi:994
msgid ""
"Several hooks are available for customizing the behavior of this construct; "
"they are listed below."
msgstr ""

# type: defspec
#: lispref/display.texi:996
msgid "The value of the last form in @var{forms} is returned."
msgstr ""

# type: group
#: lispref/display.texi:1002
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
" This is the contents of foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: group
#: lispref/display.texi:1009
#, no-wrap
msgid ""
"(with-output-to-temp-buffer \"foo\"\n"
"    (print 20)\n"
"    (print standard-output))\n"
"@result{} #<buffer foo>\n"
"\n"
msgstr ""

# type: group
#: lispref/display.texi:1012
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"20\n"
"\n"
msgstr ""

# type: group
#: lispref/display.texi:1014
#, no-wrap
msgid ""
"#<buffer foo>\n"
"\n"
msgstr ""

# type: group
#: lispref/display.texi:1016 lispref/text.texi:188
#, no-wrap
msgid "---------- Buffer: foo ----------\n"
msgstr ""

# type: item
#: lispref/display.texi:1020 lispref/hooks.texi:289
#, no-wrap
msgid "temp-buffer-show-function"
msgstr ""

# type: defvar
#: lispref/display.texi:1024
msgid ""
"If this variable is non-@code{nil}, @code{with-output-to-temp-buffer} calls "
"it as a function to do the job of displaying a help buffer.  The function "
"gets one argument, which is the buffer it should display."
msgstr ""

# type: defvar
#: lispref/display.texi:1029
msgid ""
"It is a good idea for this function to run @code{temp-buffer-show-hook} just "
"as @code{with-output-to-temp-buffer} normally would, inside of @code{save-"
"selected-window} and with the chosen window and buffer selected."
msgstr ""

# type: item
#: lispref/display.texi:1031 lispref/hooks.texi:286
#, no-wrap
msgid "temp-buffer-setup-hook"
msgstr ""

# type: defvar
#: lispref/display.texi:1036
msgid ""
"This normal hook is run by @code{with-output-to-temp-buffer} before "
"evaluating @var{body}.  When the hook runs, the temporary buffer is "
"current.  This hook is normally set up with a function to put the buffer in "
"Help mode."
msgstr ""

# type: item
#: lispref/display.texi:1038 lispref/hooks.texi:292
#, no-wrap
msgid "temp-buffer-show-hook"
msgstr ""

# type: defvar
#: lispref/display.texi:1045
msgid ""
"This normal hook is run by @code{with-output-to-temp-buffer} after "
"displaying the temporary buffer.  When the hook runs, the temporary buffer "
"is current, and the window it was displayed in is selected.  This hook is "
"normally set up with a function to make the buffer read only, and find "
"function names and variable names in it, provided the major mode is Help "
"mode."
msgstr ""

# type: defun
#: lispref/display.texi:1047
#, no-wrap
msgid "momentary-string-display string position &optional char message"
msgstr ""

# type: defun
#: lispref/display.texi:1051
msgid ""
"This function momentarily displays @var{string} in the current buffer at @var"
"{position}.  It has no effect on the undo list or on the buffer's "
"modification status."
msgstr ""

# type: defun
#: lispref/display.texi:1059
msgid ""
"The momentary display remains until the next input event.  If the next input "
"event is @var{char}, @code{momentary-string-display} ignores it and "
"returns.  Otherwise, that event remains buffered for subsequent use as "
"input.  Thus, typing @var{char} will simply remove the string from the "
"display, while typing (say) @kbd{C-f} will remove the string from the "
"display and later (presumably) move point forward.  The argument @var{char} "
"is a space by default."
msgstr ""

# type: defun
#: lispref/display.texi:1061
msgid "The return value of @code{momentary-string-display} is not meaningful."
msgstr ""

# type: defun
#: lispref/display.texi:1066
msgid ""
"If the string @var{string} does not contain control characters, you can do "
"the same job in a more general way by creating (and then subsequently "
"deleting) an overlay with a @code{before-string} property.  @xref{Overlay "
"Properties}."
msgstr ""

# type: defun
#: lispref/display.texi:1070
msgid ""
"If @var{message} is non-@code{nil}, it is displayed in the echo area while "
"@var{string} is displayed in the buffer.  If it is @code{nil}, a default "
"message says to type @var{char} to continue."
msgstr ""

# type: defun
#: lispref/display.texi:1073
msgid ""
"In this example, point is initially located at the beginning of the second "
"line:"
msgstr ""

# type: group
#: lispref/display.texi:1080
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of foo.\n"
"@point{}Second line.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: group
#: lispref/display.texi:1088
#, no-wrap
msgid ""
"(momentary-string-display\n"
"  \"**** Important Message! ****\"\n"
"  (point) ?\\r\n"
"  \"Type RET when done reading\")\n"
"@result{} t\n"
msgstr ""

# type: group
#: lispref/display.texi:1095
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of foo.\n"
"**** Important Message! ****Second line.\n"
"---------- Buffer: foo ----------\n"
"\n"
msgstr ""

# type: group
#: lispref/display.texi:1099
#, no-wrap
msgid ""
"---------- Echo Area ----------\n"
"Type RET when done reading\n"
"---------- Echo Area ----------\n"
msgstr ""

# type: cindex
#: lispref/display.texi:1105
#, no-wrap
msgid "overlays"
msgstr ""

# type: Plain text
#: lispref/display.texi:1112
msgid ""
"You can use @dfn{overlays} to alter the appearance of a buffer's text on the "
"screen, for the sake of presentation features.  An overlay is an object that "
"belongs to a particular buffer, and has a specified beginning and end.  It "
"also has properties that you can examine and set; these affect the display "
"of the text within the overlay."
msgstr ""

# type: Plain text
#: lispref/display.texi:1118
msgid ""
"An overlay uses markers to record its beginning and end; thus, editing the "
"text of the buffer adjusts the beginning and end of each overlay so that it "
"stays with the text.  When you create the overlay, you can specify whether "
"text inserted at the beginning should be inside the overlay or outside, and "
"likewise for the end of the overlay."
msgstr ""

# type: subsection
#: lispref/display.texi:1124 lispref/display.texi:1126
#: lispref/display.texi:1127
#, no-wrap
msgid "Managing Overlays"
msgstr ""

# type: menu
#: lispref/display.texi:1124
msgid "Creating and moving overlays."
msgstr ""

# type: subsection
#: lispref/display.texi:1124 lispref/display.texi:1278
#: lispref/display.texi:1279
#, no-wrap
msgid "Overlay Properties"
msgstr ""

# type: menu
#: lispref/display.texi:1124
msgid ""
"How to read and set properties.  What properties do to the screen display."
msgstr ""

# type: node
#: lispref/display.texi:1124 lispref/display.texi:1489
#, no-wrap
msgid "Finding Overlays"
msgstr ""

# type: menu
#: lispref/display.texi:1124
msgid "Searching for overlays."
msgstr ""

# type: Plain text
#: lispref/display.texi:1133
msgid ""
"This section describes the functions to create, delete and move overlays, "
"and to examine their contents.  Overlay changes are not recorded in the "
"buffer's undo list, since the overlays are not part of the buffer's contents."
msgstr ""

# type: defun
#: lispref/display.texi:1134
#, no-wrap
msgid "overlayp object"
msgstr ""

# type: defun
#: lispref/display.texi:1136
msgid "This function returns @code{t} if @var{object} is an overlay."
msgstr ""

# type: defun
#: lispref/display.texi:1138
#, no-wrap
msgid "make-overlay start end &optional buffer front-advance rear-advance"
msgstr ""

# type: defun
#: lispref/display.texi:1144
msgid ""
"This function creates and returns an overlay that belongs to @var{buffer} "
"and ranges from @var{start} to @var{end}.  Both @var{start} and @var{end} "
"must specify buffer positions; they may be integers or markers.  If @var"
"{buffer} is omitted, the overlay is created in the current buffer."
msgstr ""

# type: defun
#: lispref/display.texi:1154
msgid ""
"The arguments @var{front-advance} and @var{rear-advance} specify the marker "
"insertion type for the start of the overlay and for the end of the overlay, "
"respectively.  @xref{Marker Insertion Types}.  If they are both @code{nil}, "
"the default, then the overlay extends to include any text inserted at the "
"beginning, but not text inserted at the end.  If @var{front-advance} is non-"
"@code{nil}, text inserted at the beginning of the overlay is excluded from "
"the overlay.  If @var{rear-advance} is non-@code{nil}, text inserted at the "
"end of the overlay is included in the overlay."
msgstr ""

# type: defun
#: lispref/display.texi:1156
#, no-wrap
msgid "overlay-start overlay"
msgstr ""

# type: defun
#: lispref/display.texi:1159
msgid ""
"This function returns the position at which @var{overlay} starts, as an "
"integer."
msgstr ""

# type: defun
#: lispref/display.texi:1161
#, no-wrap
msgid "overlay-end overlay"
msgstr ""

# type: defun
#: lispref/display.texi:1164
msgid ""
"This function returns the position at which @var{overlay} ends, as an "
"integer."
msgstr ""

# type: defun
#: lispref/display.texi:1166
#, no-wrap
msgid "overlay-buffer overlay"
msgstr ""

# type: defun
#: lispref/display.texi:1169
msgid ""
"This function returns the buffer that @var{overlay} belongs to.  It returns "
"@code{nil} if @var{overlay} has been deleted."
msgstr ""

# type: defun
#: lispref/display.texi:1171
#, no-wrap
msgid "delete-overlay overlay"
msgstr ""

# type: defun
#: lispref/display.texi:1176
msgid ""
"This function deletes @var{overlay}.  The overlay continues to exist as a "
"Lisp object, and its property list is unchanged, but it ceases to be "
"attached to the buffer it belonged to, and ceases to have any effect on "
"display."
msgstr ""

# type: defun
#: lispref/display.texi:1179
msgid ""
"A deleted overlay is not permanently disconnected.  You can give it a "
"position in a buffer again by calling @code{move-overlay}."
msgstr ""

# type: defun
#: lispref/display.texi:1181
#, no-wrap
msgid "move-overlay overlay start end &optional buffer"
msgstr ""

# type: defun
#: lispref/display.texi:1185
msgid ""
"This function moves @var{overlay} to @var{buffer}, and places its bounds at "
"@var{start} and @var{end}.  Both arguments @var{start} and @var{end} must "
"specify buffer positions; they may be integers or markers."
msgstr ""

# type: defun
#: lispref/display.texi:1189
msgid ""
"If @var{buffer} is omitted, @var{overlay} stays in the same buffer it was "
"already associated with; if @var{overlay} was deleted, it goes into the "
"current buffer."
msgstr ""

# type: defun
#: lispref/display.texi:1191
msgid "The return value is @var{overlay}."
msgstr ""

# type: defun
#: lispref/display.texi:1196
msgid ""
"This is the only valid way to change the endpoints of an overlay.  Do not "
"try modifying the markers in the overlay by hand, as that fails to update "
"other vital data structures and can cause some overlays to be ``lost.''"
msgstr ""

# type: defun
#: lispref/display.texi:1198
#, no-wrap
msgid "remove-overlays &optional start end name value"
msgstr ""

# type: defun
#: lispref/display.texi:1202
msgid ""
"This function removes all the overlays between @var{start} and @var{end} "
"whose property @var{name} has the value @var{value}.  It can move the "
"endpoints of the overlays in the region, or split them."
msgstr ""

# type: defun
#: lispref/display.texi:1208
msgid ""
"If @var{name} is omitted or @code{nil}, it means to delete all overlays in "
"the specified region.  If @var{start} and/or @var{end} are omitted or @code"
"{nil}, that means the beginning and end of the buffer respectively.  "
"Therefore, @code{(remove-overlays)} removes all the overlays in the current "
"buffer."
msgstr ""

# type: example
#: lispref/display.texi:1261
#, no-wrap
msgid ""
";; @r{Create an overlay.}\n"
"(setq foo (make-overlay 1 10))\n"
"     @result{} #<overlay from 1 to 10 in display.texi>\n"
"(overlay-start foo)\n"
"     @result{} 1\n"
"(overlay-end foo)\n"
"     @result{} 10\n"
"(overlay-buffer foo)\n"
"     @result{} #<buffer display.texi>\n"
";; @r{Give it a property we can check later.}\n"
"(overlay-put foo 'happy t)\n"
"     @result{} t\n"
";; @r{Verify the property is present.}\n"
"(overlay-get foo 'happy)\n"
"     @result{} t\n"
";; @r{Move the overlay.}\n"
"(move-overlay foo 5 20)\n"
"     @result{} #<overlay from 5 to 20 in display.texi>\n"
"(overlay-start foo)\n"
"     @result{} 5\n"
"(overlay-end foo)\n"
"     @result{} 20\n"
";; @r{Delete the overlay.}\n"
"(delete-overlay foo)\n"
"     @result{} nil\n"
";; @r{Verify it is deleted.}\n"
"foo\n"
"     @result{} #<overlay in no buffer>\n"
";; @r{A deleted overlay has no position.}\n"
"(overlay-start foo)\n"
"     @result{} nil\n"
"(overlay-end foo)\n"
"     @result{} nil\n"
"(overlay-buffer foo)\n"
"     @result{} nil\n"
";; @r{Undelete the overlay.}\n"
"(move-overlay foo 1 20)\n"
"     @result{} #<overlay from 1 to 20 in display.texi>\n"
";; @r{Verify the results.}\n"
"(overlay-start foo)\n"
"     @result{} 1\n"
"(overlay-end foo)\n"
"     @result{} 20\n"
"(overlay-buffer foo)\n"
"     @result{} #<buffer display.texi>\n"
";; @r{Moving and deleting the overlay does not change its properties.}\n"
"(overlay-get foo 'happy)\n"
"     @result{} t\n"
msgstr ""

# type: Plain text
#: lispref/display.texi:1268
msgid ""
"Emacs stores the overlays of each buffer in two lists, divided around an "
"arbitrary ``center position.'' One list extends backwards through the buffer "
"from that center position, and the other extends forwards from that center "
"position.  The center position can be anywhere in the buffer."
msgstr ""

# type: defun
#: lispref/display.texi:1269
#, no-wrap
msgid "overlay-recenter pos"
msgstr ""

# type: defun
#: lispref/display.texi:1273
msgid ""
"This function recenters the overlays of the current buffer around position "
"@var{pos}.  That makes overlay lookup faster for positions near @var{pos}, "
"but slower for positions far away from @var{pos}."
msgstr ""

# type: Plain text
#: lispref/display.texi:1277
msgid ""
"A loop that scans the buffer forwards, creating overlays, can run faster if "
"you do @code{(overlay-recenter (point-max))} first."
msgstr ""

# type: Plain text
#: lispref/display.texi:1284
msgid ""
"Overlay properties are like text properties in that the properties that "
"alter how a character is displayed can come from either source.  But in most "
"respects they are different.  @xref{Text Properties}, for comparison."
msgstr ""

# type: Plain text
#: lispref/display.texi:1293
msgid ""
"Text properties are considered a part of the text; overlays and their "
"properties are specifically considered not to be part of the text.  Thus, "
"copying text between various buffers and strings preserves text properties, "
"but does not try to preserve overlays.  Changing a buffer's text properties "
"marks the buffer as modified, while moving an overlay or changing its "
"properties does not.  Unlike text property changes, overlay property changes "
"are not recorded in the buffer's undo list."
msgstr ""

# type: Plain text
#: lispref/display.texi:1295
msgid "These functions read and set the properties of an overlay:"
msgstr ""

# type: defun
#: lispref/display.texi:1296
#, no-wrap
msgid "overlay-get overlay prop"
msgstr ""

# type: defun
#: lispref/display.texi:1302
msgid ""
"This function returns the value of property @var{prop} recorded in @var"
"{overlay}, if any.  If @var{overlay} does not record any value for that "
"property, but it does have a @code{category} property which is a symbol, "
"that symbol's @var{prop} property is used.  Otherwise, the value is @code"
"{nil}."
msgstr ""

# type: defun
#: lispref/display.texi:1304
#, no-wrap
msgid "overlay-put overlay prop value"
msgstr ""

# type: defun
#: lispref/display.texi:1307
msgid ""
"This function sets the value of property @var{prop} recorded in @var"
"{overlay} to @var{value}.  It returns @var{value}."
msgstr ""

# type: defun
#: lispref/display.texi:1309
#, no-wrap
msgid "overlay-properties overlay"
msgstr ""

# type: defun
#: lispref/display.texi:1311
msgid "This returns a copy of the property list of @var{overlay}."
msgstr ""

# type: Plain text
#: lispref/display.texi:1316
msgid ""
"See also the function @code{get-char-property} which checks both overlay "
"properties and text properties for a given character.  @xref{Examining "
"Properties}."
msgstr ""

# type: Plain text
#: lispref/display.texi:1319
msgid "Many overlay properties have special meanings; here is a table of them:"
msgstr ""

# type: item
#: lispref/display.texi:1321
#, no-wrap
msgid "priority"
msgstr ""

# type: kindex
#: lispref/display.texi:1322
#, no-wrap
msgid "priority @r{(overlay property)}"
msgstr ""

# type: table
#: lispref/display.texi:1331
msgid ""
"This property's value (which should be a nonnegative integer number)  "
"determines the priority of the overlay.  The priority matters when two or "
"more overlays cover the same character and both specify the same property; "
"the one whose @code{priority} value is larger takes priority over the "
"other.  For the @code{face} property, the higher priority value does not "
"completely replace the other; instead, its face attributes override the face "
"attributes of the lower priority @code{face} property."
msgstr ""

# type: table
#: lispref/display.texi:1335
msgid ""
"Currently, all overlays take priority over text properties.  Please avoid "
"using negative priority values, as we have not yet decided just what they "
"should mean."
msgstr ""

# type: kindex
#: lispref/display.texi:1337
#, no-wrap
msgid "window @r{(overlay property)}"
msgstr ""

# type: table
#: lispref/display.texi:1340
msgid ""
"If the @code{window} property is non-@code{nil}, then the overlay applies "
"only on that window."
msgstr ""

# type: item
#: lispref/display.texi:1341 lispref/text.texi:2964
#, no-wrap
msgid "category"
msgstr ""

# type: kindex
#: lispref/display.texi:1342
#, no-wrap
msgid "category @r{(overlay property)}"
msgstr ""

# type: table
#: lispref/display.texi:1346
msgid ""
"If an overlay has a @code{category} property, we call it the @dfn{category} "
"of the overlay.  It should be a symbol.  The properties of the symbol serve "
"as defaults for the properties of the overlay."
msgstr ""

# type: kindex
#: lispref/display.texi:1348
#, no-wrap
msgid "face @r{(overlay property)}"
msgstr ""

# type: table
#: lispref/display.texi:1351
msgid ""
"This property controls the way text is displayed---for example, which font "
"and which colors.  @xref{Faces}, for more information."
msgstr ""

# type: table
#: lispref/display.texi:1354
msgid ""
"In the simplest case, the value is a face name.  It can also be a list; then "
"each element can be any of these possibilities:"
msgstr ""

# type: itemize
#: lispref/display.texi:1358 lispref/text.texi:2982
msgid "A face name (a symbol or string)."
msgstr ""

# type: itemize
#: lispref/display.texi:1366 lispref/text.texi:2990
msgid ""
"A property list of face attributes.  This has the form (@var{keyword} @var"
"{value} @dots{}), where each @var{keyword} is a face attribute name and @var"
"{value} is a meaningful value for that attribute.  With this feature, you do "
"not need to create a face each time you want to specify a particular "
"attribute for certain text.  @xref{Face Attributes}."
msgstr ""

# type: itemize
#: lispref/display.texi:1371
msgid ""
"A cons cell, either of the form @code{(foreground-color . @var{color-name})} "
"or @code{(background-color . @var{color-name})}.  These elements specify "
"just the foreground color or just the background color."
msgstr ""

# type: itemize
#: lispref/display.texi:1374
msgid ""
"@code{(foreground-color . @var{color-name})} has the same effect as @code{(:"
"foreground @var{color-name})}; likewise for the background."
msgstr ""

# type: code{#1}
#: lispref/display.texi:1376 lispref/display.texi:4367 lispref/text.texi:3020
#: lispref/text.texi:3639
#, no-wrap
msgid "mouse-face"
msgstr ""

# type: kindex
#: lispref/display.texi:1377
#, no-wrap
msgid "mouse-face @r{(overlay property)}"
msgstr ""

# type: table
#: lispref/display.texi:1380
msgid ""
"This property is used instead of @code{face} when the mouse is within the "
"range of the overlay."
msgstr ""

# type: item
#: lispref/display.texi:1381 lispref/frames.texi:354 lispref/text.texi:3035
#, no-wrap
msgid "display"
msgstr ""

# type: kindex
#: lispref/display.texi:1382
#, no-wrap
msgid "display @r{(overlay property)}"
msgstr ""

# type: table
#: lispref/display.texi:1387
msgid ""
"This property activates various features that change the way text is "
"displayed.  For example, it can make text appear taller or shorter, higher "
"or lower, wider or narrower, or replaced with an image.  @xref{Display "
"Property}."
msgstr ""

# type: kindex
#: lispref/display.texi:1389
#, no-wrap
msgid "help-echo @r{(overlay property)}"
msgstr ""

# type: table
#: lispref/display.texi:1394
msgid ""
"If an overlay has a @code{help-echo} property, then when you move the mouse "
"onto the text in the overlay, Emacs displays a help string in the echo area, "
"or in the tooltip window.  For details see @ref{Text help-echo}."
msgstr ""

# type: item
#: lispref/display.texi:1395 lispref/text.texi:3175
#, no-wrap
msgid "modification-hooks"
msgstr ""

# type: kindex
#: lispref/display.texi:1396
#, no-wrap
msgid "modification-hooks @r{(overlay property)}"
msgstr ""

# type: table
#: lispref/display.texi:1400
msgid ""
"This property's value is a list of functions to be called if any character "
"within the overlay is changed or if text is inserted strictly within the "
"overlay."
msgstr ""

# type: table
#: lispref/display.texi:1405
msgid ""
"The hook functions are called both before and after each change.  If the "
"functions save the information they receive, and compare notes between "
"calls, they can determine exactly what change has been made in the buffer "
"text."
msgstr ""

# type: table
#: lispref/display.texi:1409
msgid ""
"When called before a change, each function receives four arguments: the "
"overlay, @code{nil}, and the beginning and end of the text range to be "
"modified."
msgstr ""

# type: table
#: lispref/display.texi:1416
msgid ""
"When called after a change, each function receives five arguments: the "
"overlay, @code{t}, the beginning and end of the text range just modified, "
"and the length of the pre-change text replaced by that range.  (For an "
"insertion, the pre-change length is zero; for a deletion, that length is the "
"number of characters deleted, and the post-change beginning and end are "
"equal.)"
msgstr ""

# type: table
#: lispref/display.texi:1420 lispref/text.texi:3190
msgid ""
"If these functions modify the buffer, they should bind @code{inhibit-"
"modification-hooks} to @code{t} around doing so, to avoid confusing the "
"internal mechanism that calls these hooks."
msgstr ""

# type: table
#: lispref/display.texi:1423
msgid ""
"Text properties also support the @code{modification-hooks} property, but the "
"details are somewhat different (@pxref{Special Properties})."
msgstr ""

# type: item
#: lispref/display.texi:1424 lispref/text.texi:3194
#, no-wrap
msgid "insert-in-front-hooks"
msgstr ""

# type: kindex
#: lispref/display.texi:1425
#, no-wrap
msgid "insert-in-front-hooks @r{(overlay property)}"
msgstr ""

# type: table
#: lispref/display.texi:1429
msgid ""
"This property's value is a list of functions to be called before and after "
"inserting text right at the beginning of the overlay.  The calling "
"conventions are the same as for the @code{modification-hooks} functions."
msgstr ""

# type: itemx
#: lispref/display.texi:1430 lispref/text.texi:3195
#, no-wrap
msgid "insert-behind-hooks"
msgstr ""

# type: kindex
#: lispref/display.texi:1431
#, no-wrap
msgid "insert-behind-hooks @r{(overlay property)}"
msgstr ""

# type: table
#: lispref/display.texi:1435
msgid ""
"This property's value is a list of functions to be called before and after "
"inserting text right at the end of the overlay.  The calling conventions are "
"the same as for the @code{modification-hooks} functions."
msgstr ""

# type: item
#: lispref/display.texi:1436 lispref/text.texi:3122
#, no-wrap
msgid "invisible"
msgstr ""

# type: kindex
#: lispref/display.texi:1437
#, no-wrap
msgid "invisible @r{(overlay property)}"
msgstr ""

# type: table
#: lispref/display.texi:1441
msgid ""
"The @code{invisible} property can make the text in the overlay invisible, "
"which means that it does not appear on the screen.  @xref{Invisible Text}, "
"for details."
msgstr ""

# type: item
#: lispref/display.texi:1442 lispref/text.texi:3127
#, no-wrap
msgid "intangible"
msgstr ""

# type: kindex
#: lispref/display.texi:1443
#, no-wrap
msgid "intangible @r{(overlay property)}"
msgstr ""

# type: table
#: lispref/display.texi:1446
msgid ""
"The @code{intangible} property on an overlay works just like the @code"
"{intangible} text property.  @xref{Special Properties}, for details."
msgstr ""

# type: item
#: lispref/display.texi:1447
#, no-wrap
msgid "isearch-open-invisible"
msgstr ""

# type: table
#: lispref/display.texi:1451
msgid ""
"This property tells incremental search how to make an invisible overlay "
"visible, permanently, if the final match overlaps it.  @xref{Invisible Text}."
msgstr ""

# type: item
#: lispref/display.texi:1452
#, no-wrap
msgid "isearch-open-invisible-temporary"
msgstr ""

# type: table
#: lispref/display.texi:1455
msgid ""
"This property tells incremental search how to make an invisible overlay "
"visible, temporarily, during the search.  @xref{Invisible Text}."
msgstr ""

# type: item
#: lispref/display.texi:1456
#, no-wrap
msgid "before-string"
msgstr ""

# type: kindex
#: lispref/display.texi:1457
#, no-wrap
msgid "before-string @r{(overlay property)}"
msgstr ""

# type: table
#: lispref/display.texi:1461
msgid ""
"This property's value is a string to add to the display at the beginning of "
"the overlay.  The string does not appear in the buffer in any sense---only "
"on the screen."
msgstr ""

# type: item
#: lispref/display.texi:1462
#, no-wrap
msgid "after-string"
msgstr ""

# type: kindex
#: lispref/display.texi:1463
#, no-wrap
msgid "after-string @r{(overlay property)}"
msgstr ""

# type: table
#: lispref/display.texi:1467
msgid ""
"This property's value is a string to add to the display at the end of the "
"overlay.  The string does not appear in the buffer in any sense---only on "
"the screen."
msgstr ""

# type: item
#: lispref/display.texi:1468
#, no-wrap
msgid "evaporate"
msgstr ""

# type: kindex
#: lispref/display.texi:1469
#, no-wrap
msgid "evaporate @r{(overlay property)}"
msgstr ""

# type: table
#: lispref/display.texi:1474
msgid ""
"If this property is non-@code{nil}, the overlay is deleted automatically if "
"it becomes empty (i.e., if its length becomes zero).  If you give an empty "
"overlay a non-@code{nil} @code{evaporate} property, that deletes it "
"immediately."
msgstr ""

# type: item
#: lispref/display.texi:1475 lispref/text.texi:3093
#, no-wrap
msgid "local-map"
msgstr ""

# type: cindex
#: lispref/display.texi:1476
#, no-wrap
msgid "keymap of character (and overlays)"
msgstr ""

# type: kindex
#: lispref/display.texi:1477
#, no-wrap
msgid "local-map @r{(overlay property)}"
msgstr ""

# type: table
#: lispref/display.texi:1481
msgid ""
"If this property is non-@code{nil}, it specifies a keymap for a portion of "
"the text.  The property's value replaces the buffer's local map, when the "
"character after point is within the overlay.  @xref{Active Keymaps}."
msgstr ""

# type: item
#: lispref/display.texi:1482 lispref/display.texi:4373
#: lispref/internals.texi:1046 lispref/keymaps.texi:9 lispref/keymaps.texi:969
#: lispref/text.texi:3078
#, no-wrap
msgid "keymap"
msgstr ""

# type: kindex
#: lispref/display.texi:1483
#, no-wrap
msgid "keymap @r{(overlay property)}"
msgstr ""

# type: table
#: lispref/display.texi:1487
msgid ""
"The @code{keymap} property is similar to @code{local-map} but overrides the "
"buffer's local map (and the map specified by the @code{local-map} property) "
"rather than replacing it."
msgstr ""

# type: subsection
#: lispref/display.texi:1490
#, no-wrap
msgid "Searching for Overlays"
msgstr ""

# type: defun
#: lispref/display.texi:1492
#, no-wrap
msgid "overlays-at pos"
msgstr ""

# type: defun
#: lispref/display.texi:1497
msgid ""
"This function returns a list of all the overlays that cover the character at "
"position @var{pos} in the current buffer.  The list is in no particular "
"order.  An overlay contains position @var{pos} if it begins at or before @var"
"{pos}, and ends after @var{pos}."
msgstr ""

# type: defun
#: lispref/display.texi:1500
msgid ""
"To illustrate usage, here is a Lisp function that returns a list of the "
"overlays that specify property @var{prop} for the character at point:"
msgstr ""

# type: smallexample
#: lispref/display.texi:1511
#, no-wrap
msgid ""
"(defun find-overlays-specifying (prop)\n"
"  (let ((overlays (overlays-at (point)))\n"
"        found)\n"
"    (while overlays\n"
"      (let ((overlay (car overlays)))\n"
"        (if (overlay-get overlay prop)\n"
"            (setq found (cons overlay found))))\n"
"      (setq overlays (cdr overlays)))\n"
"    found))\n"
msgstr ""

# type: defun
#: lispref/display.texi:1514
#, no-wrap
msgid "overlays-in beg end"
msgstr ""

# type: defun
#: lispref/display.texi:1520
msgid ""
"This function returns a list of the overlays that overlap the region @var"
"{beg} through @var{end}.  ``Overlap'' means that at least one character is "
"contained within the overlay and also contained within the specified region; "
"however, empty overlays are included in the result if they are located at "
"@var{beg}, or strictly between @var{beg} and @var{end}."
msgstr ""

# type: defun
#: lispref/display.texi:1522
#, no-wrap
msgid "next-overlay-change pos"
msgstr ""

# type: defun
#: lispref/display.texi:1526
msgid ""
"This function returns the buffer position of the next beginning or end of an "
"overlay, after @var{pos}.  If there is none, it returns @code{(point-max)}."
msgstr ""

# type: defun
#: lispref/display.texi:1528
#, no-wrap
msgid "previous-overlay-change pos"
msgstr ""

# type: defun
#: lispref/display.texi:1532
msgid ""
"This function returns the buffer position of the previous beginning or end "
"of an overlay, before @var{pos}.  If there is none, it returns @code{(point-"
"min)}."
msgstr ""

# type: Plain text
#: lispref/display.texi:1540
msgid ""
"As an example, here's a simplified (and inefficient) version of the "
"primitive function @code{next-single-char-property-change} (@pxref{Property "
"Search}).  It searches forward from position @var{pos} for the next position "
"where the value of a given property @code{prop}, as obtained from either "
"overlays or text properties, changes."
msgstr ""

# type: smallexample
#: lispref/display.texi:1551
#, no-wrap
msgid ""
"(defun next-single-char-property-change (position prop)\n"
"  (save-excursion\n"
"    (goto-char position)\n"
"    (let ((propval (get-char-property (point) prop)))\n"
"      (while (and (not (eobp))\n"
"                  (eq (get-char-property (point) prop) propval))\n"
"        (goto-char (min (next-overlay-change (point))\n"
"                        (next-single-property-change (point) prop)))))\n"
"    (point)))\n"
msgstr ""

# type: Plain text
#: lispref/display.texi:1559
msgid ""
"Since not all characters have the same width, these functions let you check "
"the width of a character.  @xref{Primitive Indent}, and @ref{Screen Lines}, "
"for related functions."
msgstr ""

# type: defun
#: lispref/display.texi:1560
#, no-wrap
msgid "char-width char"
msgstr ""

# type: defun
#: lispref/display.texi:1563
msgid ""
"This function returns the width in columns of the character @var{char}, if "
"it were displayed in the current buffer and the selected window."
msgstr ""

# type: defun
#: lispref/display.texi:1565
#, no-wrap
msgid "string-width string"
msgstr ""

# type: defun
#: lispref/display.texi:1568
msgid ""
"This function returns the width in columns of the string @var{string}, if it "
"were displayed in the current buffer and the selected window."
msgstr ""

# type: defun
#: lispref/display.texi:1570
#, no-wrap
msgid "truncate-string-to-width string width &optional start-column padding ellipsis"
msgstr ""

# type: defun
#: lispref/display.texi:1573
msgid ""
"This function returns the part of @var{string} that fits within @var{width} "
"columns, as a new string."
msgstr ""

# type: defun
#: lispref/display.texi:1579
msgid ""
"If @var{string} does not reach @var{width}, then the result ends where @var"
"{string} ends.  If one multi-column character in @var{string} extends across "
"the column @var{width}, that character is not included in the result.  Thus, "
"the result can fall short of @var{width} but cannot go beyond it."
msgstr ""

# type: defun
#: lispref/display.texi:1585
msgid ""
"The optional argument @var{start-column} specifies the starting column.  If "
"this is non-@code{nil}, then the first @var{start-column} columns of the "
"string are omitted from the value.  If one multi-column character in @var"
"{string} extends across the column @var{start-column}, that character is not "
"included."
msgstr ""

# type: defun
#: lispref/display.texi:1592
msgid ""
"The optional argument @var{padding}, if non-@code{nil}, is a padding "
"character added at the beginning and end of the result string, to extend it "
"to exactly @var{width} columns.  The padding character is used at the end of "
"the result if it falls short of @var{width}.  It is also used at the "
"beginning of the result if one multi-column character in @var{string} "
"extends across the column @var{start-column}."
msgstr ""

# type: defun
#: lispref/display.texi:1599
msgid ""
"If @var{ellipsis} is non-@code{nil}, it should be a string which will "
"replace the end of @var{str} (including any padding) if it extends beyond "
"@var{end-column}, unless the display width of @var{str} is equal to or less "
"than the display width of @var{ellipsis}.  If @var{ellipsis} is non-@code"
"{nil} and not a string, it stands for @code{\"...\"}."
msgstr ""

# type: example
#: lispref/display.texi:1605
#, no-wrap
msgid ""
"(truncate-string-to-width \"\\tab\\t\" 12 4)\n"
"     @result{} \"ab\"\n"
"(truncate-string-to-width \"\\tab\\t\" 12 4 ?\\s)\n"
"     @result{} \"    ab  \"\n"
msgstr ""

# type: cindex
#: lispref/display.texi:1610
#, no-wrap
msgid "line height"
msgstr ""

# type: Plain text
#: lispref/display.texi:1615
msgid ""
"The total height of each display line consists of the height of the contents "
"of the line, plus optional additional vertical line spacing above or below "
"the display line."
msgstr ""

# type: Plain text
#: lispref/display.texi:1622
msgid ""
"The height of the line contents is the maximum height of any character or "
"image on that display line, including the final newline if there is one.  (A "
"display line that is continued doesn't include a final newline.)  That is "
"the default line height, if you do nothing to specify a greater height.  (In "
"the most common case, this equals the height of the default frame font.)"
msgstr ""

# type: Plain text
#: lispref/display.texi:1627
msgid ""
"There are several ways to explicitly specify a larger line height, either by "
"specifying an absolute height for the display line, or by specifying "
"vertical space.  However, no matter what you specify, the actual line height "
"can never be less than the default."
msgstr ""

# type: kindex
#: lispref/display.texi:1628 lispref/text.texi:3170
#, no-wrap
msgid "line-height @r{(text property)}"
msgstr ""

# type: Plain text
#: lispref/display.texi:1632
msgid ""
"A newline can have a @code{line-height} text or overlay property that "
"controls the total height of the display line ending in that newline."
msgstr ""

# type: Plain text
#: lispref/display.texi:1637
msgid ""
"If the property value is @code{t}, the newline character has no effect on "
"the displayed height of the line---the visible contents alone determine the "
"height.  This is useful for tiling small images (or image slices) without "
"adding blank areas between the images."
msgstr ""

# type: Plain text
#: lispref/display.texi:1644
msgid ""
"If the property value is a list of the form @code{(@var{height} @var"
"{total})}, that adds extra space @emph{below} the display line.  First Emacs "
"uses @var{height} as a height spec to control extra space @emph{above} the "
"line; then it adds enough space @emph{below} the line to bring the total "
"line height up to @var{total}.  In this case, the other ways to specify the "
"line spacing are ignored."
msgstr ""

# type: Plain text
#: lispref/display.texi:1648
msgid ""
"Any other kind of property value is a height spec, which translates into a "
"number---the specified line height.  There are several ways to write a "
"height spec; here's how each of them translates into a number:"
msgstr ""

# type: table
#: lispref/display.texi:1652
msgid ""
"If the height spec is a positive integer, the height value is that integer."
msgstr ""

# type: table
#: lispref/display.texi:1655
msgid ""
"If the height spec is a float, @var{float}, the numeric height value is @var"
"{float} times the frame's default line height."
msgstr ""

# type: item
#: lispref/display.texi:1655
#, no-wrap
msgid "(@var{face} . @var{ratio})"
msgstr ""

# type: table
#: lispref/display.texi:1660
msgid ""
"If the height spec is a cons of the format shown, the numeric height is @var"
"{ratio} times the height of face @var{face}.  @var{ratio} can be any type of "
"number, or @code{nil} which means a ratio of 1.  If @var{face} is @code{t}, "
"it refers to the current face."
msgstr ""

# type: item
#: lispref/display.texi:1660
#, no-wrap
msgid "(nil . @var{ratio})"
msgstr ""

# type: table
#: lispref/display.texi:1663
msgid ""
"If the height spec is a cons of the format shown, the numeric height is @var"
"{ratio} times the height of the contents of the line."
msgstr ""

# type: Plain text
#: lispref/display.texi:1669
msgid ""
"Thus, any valid height spec determines the height in pixels, one way or "
"another.  If the line contents' height is less than that, Emacs adds extra "
"vertical space above the line to achieve the specified total height."
msgstr ""

# type: Plain text
#: lispref/display.texi:1674
msgid ""
"If you don't specify the @code{line-height} property, the line's height "
"consists of the contents' height plus the line spacing.  There are several "
"ways to specify the line spacing for different parts of Emacs text."
msgstr ""

# type: vindex
#: lispref/display.texi:1675
#, no-wrap
msgid "default-line-spacing"
msgstr ""

# type: Plain text
#: lispref/display.texi:1683
msgid ""
"You can specify the line spacing for all lines in a frame with the @code"
"{line-spacing} frame parameter (@pxref{Layout Parameters}).  However, if the "
"variable @code{default-line-spacing} is non-@code{nil}, it overrides the "
"frame's @code{line-spacing} parameter.  An integer value specifies the "
"number of pixels put below lines on graphical displays.  A floating point "
"number specifies the spacing relative to the frame's default line height."
msgstr ""

# type: item
#: lispref/display.texi:1684 lispref/frames.texi:530 lispref/locals.texi:156
#: lispref/text.texi:3162
#, no-wrap
msgid "line-spacing"
msgstr ""

# type: Plain text
#: lispref/display.texi:1690
msgid ""
"You can specify the line spacing for all lines in a buffer via the buffer-"
"local @code{line-spacing} variable.  An integer value specifies the number "
"of pixels put below lines on graphical displays.  A floating point number "
"specifies the spacing relative to the default frame line height.  This "
"overrides line spacings specified for the frame."
msgstr ""

# type: kindex
#: lispref/display.texi:1691 lispref/text.texi:3163
#, no-wrap
msgid "line-spacing @r{(text property)}"
msgstr ""

# type: Plain text
#: lispref/display.texi:1696
msgid ""
"Finally, a newline can have a @code{line-spacing} text or overlay property "
"that overrides the default frame line spacing and the buffer local @code"
"{line-spacing} variable, for the display line ending in that newline."
msgstr ""

# type: Plain text
#: lispref/display.texi:1702
msgid ""
"One way or another, these mechanisms specify a Lisp value for the spacing of "
"each line.  The value is a height spec, and it translates into a Lisp value "
"as described above.  However, in this case the numeric height value "
"specifies the line spacing, rather than the line height."
msgstr ""

# type: cindex
#: lispref/display.texi:1705
#, no-wrap
msgid "faces"
msgstr ""

# type: Plain text
#: lispref/display.texi:1713
msgid ""
"A @dfn{face} is a named collection of graphical attributes: font family, "
"foreground color, background color, optional underlining, and many others.  "
"Faces are used in Emacs to control the style of display of particular parts "
"of the text or the frame.  @xref{Standard Faces,,, emacs, The GNU Emacs "
"Manual}, for the list of faces Emacs normally comes with."
msgstr ""

# type: cindex
#: lispref/display.texi:1714
#, no-wrap
msgid "face id"
msgstr ""

# type: Plain text
#: lispref/display.texi:1718
msgid ""
"Each face has its own @dfn{face number}, which distinguishes faces at low "
"levels within Emacs.  However, for most purposes, you refer to faces in Lisp "
"programs by the symbols that name them."
msgstr ""

# type: defun
#: lispref/display.texi:1719
#, no-wrap
msgid "facep object"
msgstr ""

# type: defun
#: lispref/display.texi:1723
msgid ""
"This function returns @code{t} if @var{object} is a face name string or "
"symbol (or if it is a vector of the kind used internally to record face "
"data).  It returns @code{nil} otherwise."
msgstr ""

# type: Plain text
#: lispref/display.texi:1728
msgid ""
"Each face name is meaningful for all frames, and by default it has the same "
"meaning in all frames.  But you can arrange to give a particular face name a "
"special meaning in one frame if you wish."
msgstr ""

# type: subsection
#: lispref/display.texi:1741 lispref/display.texi:1743
#: lispref/display.texi:1744
#, no-wrap
msgid "Defining Faces"
msgstr ""

# type: menu
#: lispref/display.texi:1741
msgid "How to define a face with @code{defface}."
msgstr ""

# type: subsection
#: lispref/display.texi:1741 lispref/display.texi:1875
#: lispref/display.texi:1876
#, no-wrap
msgid "Face Attributes"
msgstr ""

# type: menu
#: lispref/display.texi:1741
msgid "What is in a face?"
msgstr ""

# type: node
#: lispref/display.texi:1741 lispref/display.texi:2069
#, no-wrap
msgid "Attribute Functions"
msgstr ""

# type: menu
#: lispref/display.texi:1741
msgid "Functions to examine and set face attributes."
msgstr ""

# type: subsection
#: lispref/display.texi:1741 lispref/display.texi:2277
#: lispref/display.texi:2278
#, no-wrap
msgid "Displaying Faces"
msgstr ""

# type: menu
#: lispref/display.texi:1741
msgid "How Emacs combines the faces specified for a character."
msgstr ""

# type: subsection
#: lispref/display.texi:1741 lispref/display.texi:2328
#: lispref/display.texi:2329
#, no-wrap
msgid "Font Selection"
msgstr ""

# type: menu
#: lispref/display.texi:1741
msgid "Finding the best available font for a face."
msgstr ""

# type: node
#: lispref/display.texi:1741 lispref/display.texi:2443
#, no-wrap
msgid "Face Functions"
msgstr ""

# type: menu
#: lispref/display.texi:1741
msgid "How to define and examine faces."
msgstr ""

# type: node
#: lispref/display.texi:1741 lispref/display.texi:2503
#, no-wrap
msgid "Auto Faces"
msgstr ""

# type: menu
#: lispref/display.texi:1741
msgid "Hook for automatic face assignment."
msgstr ""

# type: node
#: lispref/display.texi:1741 lispref/display.texi:2535
#, no-wrap
msgid "Font Lookup"
msgstr ""

# type: menu
#: lispref/display.texi:1741
msgid "Looking up the names of available fonts"
msgstr ""

# type: menu
#: lispref/display.texi:1741
msgid "and information about them."
msgstr ""

# type: subsection
#: lispref/display.texi:1741 lispref/display.texi:2613
#: lispref/display.texi:2614
#, no-wrap
msgid "Fontsets"
msgstr ""

# type: menu
#: lispref/display.texi:1741
msgid "A fontset is a collection of fonts"
msgstr ""

# type: menu
#: lispref/display.texi:1741
msgid "that handle a range of character sets."
msgstr ""

# type: Plain text
#: lispref/display.texi:1750
msgid ""
"The way to define a new face is with @code{defface}.  This creates a kind of "
"customization item (@pxref{Customization}) which the user can customize "
"using the Customization buffer (@pxref{Easy Customization,,, emacs, The GNU "
"Emacs Manual})."
msgstr ""

# type: defmac
#: lispref/display.texi:1751
#, no-wrap
msgid "defface face spec doc [keyword value]@dots{}"
msgstr ""

# type: defmac
#: lispref/display.texi:1758
msgid ""
"This declares @var{face} as a customizable face that defaults according to "
"@var{spec}.  You should not quote the symbol @var{face}, and it should not "
"end in @samp{-face} (that would be redundant).  The argument @var{doc} "
"specifies the face documentation.  The keywords you can use in @code"
"{defface} are the same as in @code{defgroup} and @code{defcustom} (@pxref"
"{Common Keywords})."
msgstr ""

# type: defmac
#: lispref/display.texi:1762
msgid ""
"When @code{defface} executes, it defines the face according to @var{spec}, "
"then uses any customizations that were read from the init file (@pxref{Init "
"File}) to override that specification."
msgstr ""

# type: defmac
#: lispref/display.texi:1773
msgid ""
"The purpose of @var{spec} is to specify how the face should appear on "
"different kinds of terminals.  It should be an alist whose elements have the "
"form @code{(@var{display} @var{atts})}.  Each element's @sc{car}, @var"
"{display}, specifies a class of terminals.  (The first element, if its @sc"
"{car} is @code{default}, is special---it specifies defaults for the "
"remaining elements).  The element's @sc{cadr}, @var{atts}, is a list of face "
"attributes and their values; it specifies what the face should look like on "
"that kind of terminal.  The possible attributes are defined in the value of "
"@code{custom-face-attributes}."
msgstr ""

# type: defmac
#: lispref/display.texi:1778
msgid ""
"The @var{display} part of an element of @var{spec} determines which frames "
"the element matches.  If more than one element of @var{spec} matches a given "
"frame, the first element that matches is the one used for that frame.  There "
"are three possibilities for @var{display}:"
msgstr ""

# type: code{#1}
#: lispref/display.texi:1780
#, no-wrap
msgid "default"
msgstr ""

# type: table
#: lispref/display.texi:1785
msgid ""
"This element of @var{spec} doesn't match any frames; instead, it specifies "
"defaults that apply to all frames.  This kind of element, if used, must be "
"the first element of @var{spec}.  Each of the following elements can "
"override any or all of these defaults."
msgstr ""

# type: table
#: lispref/display.texi:1790
msgid ""
"This element of @var{spec} matches all frames.  Therefore, any subsequent "
"elements of @var{spec} are never used.  Normally @code{t} is used in the "
"last (or only) element of @var{spec}."
msgstr ""

# type: table
#: lispref/display.texi:1797
msgid ""
"If @var{display} is a list, each element should have the form @code{(@var"
"{characteristic} @var{value}@dots{})}.  Here @var{characteristic} specifies "
"a way of classifying frames, and the @var{value}s are possible "
"classifications which @var{display} should apply to.  Here are the possible "
"values of @var{characteristic}:"
msgstr ""

# type: var{#1}
#: lispref/display.texi:1799 lispref/display.texi:4380 lispref/objects.texi:11
#: lispref/processes.texi:2201
#, no-wrap
msgid "type"
msgstr ""

# type: table
#: lispref/display.texi:1805
msgid ""
"The kind of window system the frame uses---either @code{graphic} (any "
"graphics-capable display), @code{x}, @code{pc} (for the MS-DOS console), "
"@code{w32} (for MS Windows 9X/NT/2K/XP), @code{mac} (for the Macintosh "
"display), or @code{tty} (a non-graphics-capable display).  @xref{Window "
"Systems, window-system}."
msgstr ""

# type: item
#: lispref/display.texi:1806
#, no-wrap
msgid "class"
msgstr ""

# type: table
#: lispref/display.texi:1809
msgid ""
"What kinds of colors the frame supports---either @code{color}, @code"
"{grayscale}, or @code{mono}."
msgstr ""

# type: item
#: lispref/display.texi:1810
#, no-wrap
msgid "background"
msgstr ""

# type: table
#: lispref/display.texi:1812
msgid "The kind of background---either @code{light} or @code{dark}."
msgstr ""

# type: item
#: lispref/display.texi:1813
#, no-wrap
msgid "min-colors"
msgstr ""

# type: table
#: lispref/display.texi:1817
msgid ""
"An integer that represents the minimum number of colors the frame should "
"support.  This matches a frame if its @code{display-color-cells} value is at "
"least the specified integer."
msgstr ""

# type: item
#: lispref/display.texi:1818
#, no-wrap
msgid "supports"
msgstr ""

# type: table
#: lispref/display.texi:1824
msgid ""
"Whether or not the frame can display the face attributes given in @var{value}"
"@dots{} (@pxref{Face Attributes}).  See the documentation for the function "
"@code{display-supports-face-attributes-p} for more information on exactly "
"how this testing is done.  @xref{Display Face Attribute Testing}."
msgstr ""

# type: table
#: lispref/display.texi:1832
msgid ""
"If an element of @var{display} specifies more than one @var{value} for a "
"given @var{characteristic}, any of those values is acceptable.  If @var"
"{display} has more than one element, each element should specify a different "
"@var{characteristic}; then @emph{each} characteristic of the frame must "
"match one of the @var{value}s specified for it in @var{display}."
msgstr ""

# type: Plain text
#: lispref/display.texi:1836
msgid "Here's how the standard face @code{region} is defined:"
msgstr ""

# type: group
#: lispref/display.texi:1842
#, no-wrap
msgid ""
"(defface region\n"
"  '((((class color) (min-colors 88) (background dark))\n"
"     :background \"blue3\")\n"
msgstr ""

# type: example
#: lispref/display.texi:1854
#, no-wrap
msgid ""
"    (((class color) (min-colors 88) (background light))\n"
"     :background \"lightgoldenrod2\")\n"
"    (((class color) (min-colors 16) (background dark))\n"
"     :background \"blue3\")\n"
"    (((class color) (min-colors 16) (background light))\n"
"     :background \"lightgoldenrod2\")\n"
"    (((class color) (min-colors 8))\n"
"     :background \"blue\" :foreground \"white\")\n"
"    (((type tty) (class mono))\n"
"     :inverse-video t)\n"
"    (t :background \"gray\"))\n"
msgstr ""

# type: group
#: lispref/display.texi:1857
#, no-wrap
msgid ""
"  \"Basic face for highlighting the region.\"\n"
"  :group 'basic-faces)\n"
msgstr ""

# type: Plain text
#: lispref/display.texi:1866
msgid ""
"Internally, @code{defface} uses the symbol property @code{face-defface-spec} "
"to record the face attributes specified in @code{defface}, @code{saved-face} "
"for the attributes saved by the user with the customization buffer, @code"
"{customized-face} for the attributes customized by the user for the current "
"session, but not saved, and @code{face-documentation} for the documentation "
"string."
msgstr ""

# type: defopt
#: lispref/display.texi:1867
#, no-wrap
msgid "frame-background-mode"
msgstr "frame-background-mode"

# type: defopt
#: lispref/display.texi:1873
msgid ""
"This option, if non-@code{nil}, specifies the background type to use for "
"interpreting face definitions.  If it is @code{dark}, then Emacs treats all "
"frames as if they had a dark background, regardless of their actual "
"background colors.  If it is @code{light}, then Emacs treats all frames as "
"if they had a light background."
msgstr ""

# type: cindex
#: lispref/display.texi:1877
#, no-wrap
msgid "face attributes"
msgstr ""

# type: Plain text
#: lispref/display.texi:1884
msgid ""
"The effect of using a face is determined by a fixed set of @dfn{face "
"attributes}.  This table lists all the face attributes, and what they mean.  "
"You can specify more than one face for a given piece of text; Emacs merges "
"the attributes of all the faces to determine how to display the text.  @xref"
"{Displaying Faces}."
msgstr ""

# type: Plain text
#: lispref/display.texi:1890
msgid ""
"Any attribute in a face can have the value @code{unspecified}.  This means "
"the face doesn't specify that attribute.  In face merging, when the first "
"face fails to specify a particular attribute, that means the next face gets "
"a chance.  However, the @code{default} face must specify all attributes."
msgstr ""

# type: Plain text
#: lispref/display.texi:1896
msgid ""
"Some of these font attributes are meaningful only on certain kinds of "
"displays---if your display cannot handle a certain attribute, the attribute "
"is ignored.  (The attributes @code{:family}, @code{:width}, @code{:height}, "
"@code{:weight}, and @code{:slant} correspond to parts of an X Logical Font "
"Descriptor.)"
msgstr ""

# type: item
#: lispref/display.texi:1898
#, no-wrap
msgid ":family"
msgstr ""

# type: table
#: lispref/display.texi:1902
msgid ""
"Font family name, or fontset name (@pxref{Fontsets}).  If you specify a font "
"family name, the wild-card characters @samp{*} and @samp{?} are allowed."
msgstr ""

# type: item
#: lispref/display.texi:1903
#, no-wrap
msgid ":width"
msgstr ""

# type: table
#: lispref/display.texi:1909
msgid ""
"Relative proportionate width, also known as the character set width or set "
"width.  This should be one of the symbols @code{ultra-condensed}, @code"
"{extra-condensed}, @code{condensed}, @code{semi-condensed}, @code{normal}, "
"@code{semi-expanded}, @code{expanded}, @code{extra-expanded}, or @code{ultra-"
"expanded}."
msgstr ""

# type: item
#: lispref/display.texi:1910
#, no-wrap
msgid ":height"
msgstr ""

# type: table
#: lispref/display.texi:1915
msgid ""
"Either the font height, an integer in units of 1/10 point, a floating point "
"number specifying the amount by which to scale the height of any underlying "
"face, or a function, which is called with the old height (from the "
"underlying face), and should return the new height."
msgstr ""

# type: item
#: lispref/display.texi:1916
#, no-wrap
msgid ":weight"
msgstr ""

# type: table
#: lispref/display.texi:1921
msgid ""
"Font weight---a symbol from this series (from most dense to most faint): "
"@code{ultra-bold}, @code{extra-bold}, @code{bold}, @code{semi-bold}, @code"
"{normal}, @code{semi-light}, @code{light}, @code{extra-light}, or @code"
"{ultra-light}."
msgstr ""

# type: table
#: lispref/display.texi:1925
msgid ""
"On a text-only terminal, any weight greater than normal is displayed as "
"extra bright, and any weight less than normal is displayed as half-bright "
"(provided the terminal supports the feature)."
msgstr ""

# type: item
#: lispref/display.texi:1926
#, no-wrap
msgid ":slant"
msgstr ""

# type: table
#: lispref/display.texi:1929
msgid ""
"Font slant---one of the symbols @code{italic}, @code{oblique}, @code"
"{normal}, @code{reverse-italic}, or @code{reverse-oblique}."
msgstr ""

# type: table
#: lispref/display.texi:1932
msgid ""
"On a text-only terminal, slanted text is displayed as half-bright, if the "
"terminal supports the feature."
msgstr ""

# type: item
#: lispref/display.texi:1933
#, no-wrap
msgid ":foreground"
msgstr ""

# type: table
#: lispref/display.texi:1939
msgid ""
"Foreground color, a string.  The value can be a system-defined color name, "
"or a hexadecimal color specification of the form @samp{#@var{rr}@var{gg}@var"
"{bb}}.  (@samp{#000000} is black, @samp{#ff0000} is red, @samp{#00ff00} is "
"green, @samp{#0000ff} is blue, and @samp{#ffffff} is white.)"
msgstr ""

# type: item
#: lispref/display.texi:1940
#, no-wrap
msgid ":background"
msgstr ""

# type: table
#: lispref/display.texi:1942
msgid "Background color, a string, like the foreground color."
msgstr ""

# type: item
#: lispref/display.texi:1943
#, no-wrap
msgid ":inverse-video"
msgstr ""

# type: table
#: lispref/display.texi:1946
msgid ""
"Whether or not characters should be displayed in inverse video.  The value "
"should be @code{t} (yes) or @code{nil} (no)."
msgstr ""

# type: item
#: lispref/display.texi:1947
#, no-wrap
msgid ":stipple"
msgstr ""

# type: table
#: lispref/display.texi:1949
msgid "The background stipple, a bitmap."
msgstr ""

# type: table
#: lispref/display.texi:1953
msgid ""
"The value can be a string; that should be the name of a file containing "
"external-format X bitmap data.  The file is found in the directories listed "
"in the variable @code{x-bitmap-file-path}."
msgstr ""

# type: table
#: lispref/display.texi:1961
msgid ""
"Alternatively, the value can specify the bitmap directly, with a list of the "
"form @code{(@var{width} @var{height} @var{data})}.  Here, @var{width} and "
"@var{height} specify the size in pixels, and @var{data} is a string "
"containing the raw bits of the bitmap, row by row.  Each row occupies @math"
"{(@var{width} + 7) / 8} consecutive bytes in the string (which should be a "
"unibyte string for best results).  This means that each row always occupies "
"at least one whole byte."
msgstr ""

# type: table
#: lispref/display.texi:1963
msgid "If the value is @code{nil}, that means use no stipple pattern."
msgstr ""

# type: table
#: lispref/display.texi:1966
msgid ""
"Normally you do not need to set the stipple attribute, because it is used "
"automatically to handle certain shades of gray."
msgstr ""

# type: item
#: lispref/display.texi:1967
#, no-wrap
msgid ":underline"
msgstr ""

# type: table
#: lispref/display.texi:1972
msgid ""
"Whether or not characters should be underlined, and in what color.  If the "
"value is @code{t}, underlining uses the foreground color of the face.  If "
"the value is a string, underlining uses that color.  The value @code{nil} "
"means do not underline."
msgstr ""

# type: item
#: lispref/display.texi:1973
#, no-wrap
msgid ":overline"
msgstr ""

# type: table
#: lispref/display.texi:1976
msgid ""
"Whether or not characters should be overlined, and in what color.  The value "
"is used like that of @code{:underline}."
msgstr ""

# type: item
#: lispref/display.texi:1977
#, no-wrap
msgid ":strike-through"
msgstr ""

# type: table
#: lispref/display.texi:1980
msgid ""
"Whether or not characters should be strike-through, and in what color.  The "
"value is used like that of @code{:underline}."
msgstr ""

# type: item
#: lispref/display.texi:1981
#, no-wrap
msgid ":inherit"
msgstr ""

# type: table
#: lispref/display.texi:1987
msgid ""
"The name of a face from which to inherit attributes, or a list of face "
"names.  Attributes from inherited faces are merged into the face like an "
"underlying face would be, with higher priority than underlying faces.  If a "
"list of faces is used, attributes from faces earlier in the list override "
"those from later faces."
msgstr ""

# type: item
#: lispref/display.texi:1988
#, no-wrap
msgid ":box"
msgstr ""

# type: table
#: lispref/display.texi:1991
msgid ""
"Whether or not a box should be drawn around characters, its color, the width "
"of the box lines, and 3D appearance."
msgstr ""

# type: Plain text
#: lispref/display.texi:1995
msgid ""
"Here are the possible values of the @code{:box} attribute, and what they "
"mean:"
msgstr ""

# type: table
#: lispref/display.texi:1999
msgid "Don't draw a box."
msgstr ""

# type: table
#: lispref/display.texi:2002
msgid "Draw a box with lines of width 1, in the foreground color."
msgstr ""

# type: table
#: lispref/display.texi:2005
msgid "Draw a box with lines of width 1, in color @var{color}."
msgstr ""

# type: code{#1}
#: lispref/display.texi:2006
#, no-wrap
msgid "(:line-width @var{width} :color @var{color} :style @var{style})"
msgstr ""

# type: table
#: lispref/display.texi:2009
msgid ""
"This way you can explicitly specify all aspects of the box.  The value @var"
"{width} specifies the width of the lines to draw; it defaults to 1."
msgstr ""

# type: table
#: lispref/display.texi:2013
msgid ""
"The value @var{color} specifies the color to draw with.  The default is the "
"foreground color of the face for simple boxes, and the background color of "
"the face for 3D boxes."
msgstr ""

# type: table
#: lispref/display.texi:2019
msgid ""
"The value @var{style} specifies whether to draw a 3D box.  If it is @code"
"{released-button}, the box looks like a 3D button that is not being "
"pressed.  If it is @code{pressed-button}, the box looks like a 3D button "
"that is being pressed.  If it is @code{nil} or omitted, a plain 2D box is "
"used."
msgstr ""

# type: Plain text
#: lispref/display.texi:2025
msgid ""
"In older versions of Emacs, before @code{:family}, @code{:height}, @code{:"
"width}, @code{:weight}, and @code{:slant} existed, these attributes were "
"used to specify the type face.  They are now semi-obsolete, but they still "
"work:"
msgstr ""

# type: item
#: lispref/display.texi:2027 lispref/display.texi:2041
#, no-wrap
msgid ":font"
msgstr ""

# type: table
#: lispref/display.texi:2029
msgid "This attribute specifies the font name."
msgstr ""

# type: item
#: lispref/display.texi:2030 lispref/display.texi:2049
#, no-wrap
msgid ":bold"
msgstr ""

# type: table
#: lispref/display.texi:2032
msgid "A non-@code{nil} value specifies a bold font."
msgstr ""

# type: item
#: lispref/display.texi:2033 lispref/display.texi:2053
#, no-wrap
msgid ":italic"
msgstr ""

# type: table
#: lispref/display.texi:2035
msgid "A non-@code{nil} value specifies an italic font."
msgstr ""

# type: Plain text
#: lispref/display.texi:2039
msgid ""
"For compatibility, you can still set these ``attributes,'' even though they "
"are not real face attributes.  Here is what that does:"
msgstr ""

# type: table
#: lispref/display.texi:2045
msgid ""
"You can specify an X font name as the ``value'' of this ``attribute''; that "
"sets the @code{:family}, @code{:width}, @code{:height}, @code{:weight}, and "
"@code{:slant} attributes according to the font name."
msgstr ""

# type: table
#: lispref/display.texi:2048
msgid ""
"If the value is a pattern with wildcards, the first font that matches the "
"pattern is used to set these attributes."
msgstr ""

# type: table
#: lispref/display.texi:2052
msgid ""
"A non-@code{nil} makes the face bold; @code{nil} makes it normal.  This "
"actually works by setting the @code{:weight} attribute."
msgstr ""

# type: table
#: lispref/display.texi:2056
msgid ""
"A non-@code{nil} makes the face italic; @code{nil} makes it normal.  This "
"actually works by setting the @code{:slant} attribute."
msgstr ""

# type: defvar
#: lispref/display.texi:2058
#, no-wrap
msgid "x-bitmap-file-path"
msgstr ""

# type: defvar
#: lispref/display.texi:2061
msgid ""
"This variable specifies a list of directories for searching for bitmap "
"files, for the @code{:stipple} attribute."
msgstr ""

# type: defun
#: lispref/display.texi:2063
#, no-wrap
msgid "bitmap-spec-p object"
msgstr ""

# type: defun
#: lispref/display.texi:2067
msgid ""
"This returns @code{t} if @var{object} is a valid bitmap specification, "
"suitable for use with @code{:stipple} (see above).  It returns @code{nil} "
"otherwise."
msgstr ""

# type: subsection
#: lispref/display.texi:2070
#, no-wrap
msgid "Face Attribute Functions"
msgstr ""

# type: Plain text
#: lispref/display.texi:2074
msgid ""
"This section describes the functions for accessing and modifying the "
"attributes of an existing face."
msgstr ""

# type: defun
#: lispref/display.texi:2075
#, no-wrap
msgid "set-face-attribute face frame &rest arguments"
msgstr ""

# type: defun
#: lispref/display.texi:2079
msgid ""
"This function sets one or more attributes of face @var{face} for frame @var"
"{frame}.  The attributes you specify this way override whatever the @code"
"{defface} says."
msgstr ""

# type: defun
#: lispref/display.texi:2084
msgid ""
"The extra arguments @var{arguments} specify the attributes to set, and the "
"values for them.  They should consist of alternating attribute names (such "
"as @code{:family} or @code{:underline}) and corresponding values.  Thus,"
msgstr ""

# type: example
#: lispref/display.texi:2090
#, no-wrap
msgid ""
"(set-face-attribute 'foo nil\n"
"                    :width 'extended\n"
"                    :weight 'bold\n"
"                    :underline \"red\")\n"
msgstr ""

# type: defun
#: lispref/display.texi:2095
msgid ""
"sets the attributes @code{:width}, @code{:weight} and @code{:underline} to "
"the corresponding values."
msgstr ""

# type: defun
#: lispref/display.texi:2099
msgid ""
"If @var{frame} is @code{t}, this function sets the default attributes for "
"new frames.  Default attribute values specified this way override the @code"
"{defface} for newly created frames."
msgstr ""

# type: defun
#: lispref/display.texi:2102
msgid ""
"If @var{frame} is @code{nil}, this function sets the attributes for all "
"existing frames, and the default for new frames."
msgstr ""

# type: defun
#: lispref/display.texi:2104
#, no-wrap
msgid "face-attribute face attribute &optional frame inherit"
msgstr ""

# type: defun
#: lispref/display.texi:2108
msgid ""
"This returns the value of the @var{attribute} attribute of face @var{face} "
"on @var{frame}.  If @var{frame} is @code{nil}, that means the selected frame "
"(@pxref{Input Focus})."
msgstr ""

# type: defun
#: lispref/display.texi:2113
msgid ""
"If @var{frame} is @code{t}, this returns whatever new-frames default value "
"you previously specified with @code{set-face-attribute} for the @var"
"{attribute} attribute of @var{face}.  If you have not specified one, it "
"returns @code{nil}."
msgstr ""

# type: defun
#: lispref/display.texi:2123
msgid ""
"If @var{inherit} is @code{nil}, only attributes directly defined by @var"
"{face} are considered, so the return value may be @code{unspecified}, or a "
"relative value.  If @var{inherit} is non-@code{nil}, @var{face}'s definition "
"of @var{attribute} is merged with the faces specified by its @code{:inherit} "
"attribute; however the return value may still be @code{unspecified} or "
"relative.  If @var{inherit} is a face or a list of faces, then the result is "
"further merged with that face (or faces), until it becomes specified and "
"absolute."
msgstr ""

# type: defun
#: lispref/display.texi:2128
msgid ""
"To ensure that the return value is always specified and absolute, use a "
"value of @code{default} for @var{inherit}; this will resolve any unspecified "
"or relative values by merging with the @code{default} face (which is always "
"completely specified)."
msgstr ""

# type: example
#: lispref/display.texi:2134
#, no-wrap
msgid ""
"(face-attribute 'bold :weight)\n"
"     @result{} bold\n"
msgstr ""

# type: defun
#: lispref/display.texi:2137
#, no-wrap
msgid "face-attribute-relative-p attribute value"
msgstr ""

# type: defun
#: lispref/display.texi:2143
msgid ""
"This function returns non-@code{nil} if @var{value}, when used as the value "
"of the face attribute @var{attribute}, is relative.  This means it would "
"modify, rather than completely override, any value that comes from a "
"subsequent face in the face list or that is inherited from another face."
msgstr ""

# type: defun
#: lispref/display.texi:2146
msgid ""
"@code{unspecified} is a relative value for all attributes.  For @code{:"
"height}, floating point values are also relative."
msgstr ""

# type: defopt
#: lispref/display.texi:2148 lispref/lists.texi:1153 lispref/lists.texi:1459
#: lispref/lists.texi:1689 lispref/minibuf.texi:1386 lispref/objects.texi:275
#: lispref/streams.texi:308 lispref/windows.texi:1041
msgid "For example:"
msgstr ""

# type: example
#: lispref/display.texi:2152
#, no-wrap
msgid ""
"(face-attribute-relative-p :height 2.0)\n"
"     @result{} t\n"
msgstr ""

# type: defun
#: lispref/display.texi:2155
#, no-wrap
msgid "merge-face-attribute attribute value1 value2"
msgstr ""

# type: defun
#: lispref/display.texi:2160
msgid ""
"If @var{value1} is a relative value for the face attribute @var{attribute}, "
"returns it merged with the underlying value @var{value2}; otherwise, if @var"
"{value1} is an absolute value for the face attribute @var{attribute}, "
"returns @var{value1} unchanged."
msgstr ""

# type: Plain text
#: lispref/display.texi:2167
msgid ""
"The functions above did not exist before Emacs 21.  For compatibility with "
"older Emacs versions, you can use the following functions to set and examine "
"the face attributes which existed in those versions.  They use values of "
"@code{t} and @code{nil} for @var{frame} just like @code{set-face-attribute} "
"and @code{face-attribute}."
msgstr ""

# type: defun
#: lispref/display.texi:2168
#, no-wrap
msgid "set-face-foreground face color &optional frame"
msgstr ""

# type: defunx
#: lispref/display.texi:2169
#, no-wrap
msgid "set-face-background face color &optional frame"
msgstr ""

# type: defun
#: lispref/display.texi:2173
msgid ""
"These functions set the foreground (or background, respectively) color of "
"face @var{face} to @var{color}.  The argument @var{color} should be a "
"string, the name of a color."
msgstr ""

# type: defun
#: lispref/display.texi:2176
msgid ""
"Certain shades of gray are implemented by stipple patterns on black-and-"
"white screens."
msgstr ""

# type: defun
#: lispref/display.texi:2178
#, no-wrap
msgid "set-face-stipple face pattern &optional frame"
msgstr ""

# type: defun
#: lispref/display.texi:2183
msgid ""
"This function sets the background stipple pattern of face @var{face} to @var"
"{pattern}.  The argument @var{pattern} should be the name of a stipple "
"pattern defined by the X server, or actual bitmap data (@pxref{Face "
"Attributes}), or @code{nil} meaning don't use stipple."
msgstr ""

# type: defun
#: lispref/display.texi:2186
msgid ""
"Normally there is no need to pay attention to stipple patterns, because they "
"are used automatically to handle certain shades of gray."
msgstr ""

# type: defun
#: lispref/display.texi:2188
#, no-wrap
msgid "set-face-font face font &optional frame"
msgstr ""

# type: defun
#: lispref/display.texi:2193
msgid ""
"This function sets the font of face @var{face}.  This actually sets the "
"attributes @code{:family}, @code{:width}, @code{:height}, @code{:weight}, "
"and @code{:slant} according to the font name @var{font}."
msgstr ""

# type: defun
#: lispref/display.texi:2195
#, no-wrap
msgid "set-face-bold-p face bold-p &optional frame"
msgstr ""

# type: defun
#: lispref/display.texi:2199
msgid ""
"This function specifies whether @var{face} should be bold.  If @var{bold-p} "
"is non-@code{nil}, that means yes; @code{nil} means no.  This actually sets "
"the @code{:weight} attribute."
msgstr ""

# type: defun
#: lispref/display.texi:2201
#, no-wrap
msgid "set-face-italic-p face italic-p &optional frame"
msgstr ""

# type: defun
#: lispref/display.texi:2205
msgid ""
"This function specifies whether @var{face} should be italic.  If @var{italic-"
"p} is non-@code{nil}, that means yes; @code{nil} means no.  This actually "
"sets the @code{:slant} attribute."
msgstr ""

# type: defun
#: lispref/display.texi:2207
#, no-wrap
msgid "set-face-underline-p face underline &optional frame"
msgstr ""

# type: defun
#: lispref/display.texi:2211
msgid ""
"This function sets the underline attribute of face @var{face}.  Non-@code"
"{nil} means do underline; @code{nil} means don't.  If @var{underline} is a "
"string, underline with that color."
msgstr ""

# type: defun
#: lispref/display.texi:2213
#, no-wrap
msgid "set-face-inverse-video-p face inverse-video-p &optional frame"
msgstr ""

# type: defun
#: lispref/display.texi:2216
msgid ""
"This function sets the @code{:inverse-video} attribute of face @var{face}."
msgstr ""

# type: defun
#: lispref/display.texi:2218
#, no-wrap
msgid "invert-face face &optional frame"
msgstr ""

# type: defun
#: lispref/display.texi:2221
msgid ""
"This function swaps the foreground and background colors of face @var{face}."
msgstr ""

# type: Plain text
#: lispref/display.texi:2228
msgid ""
"These functions examine the attributes of a face.  If you don't specify @var"
"{frame}, they refer to the selected frame; @code{t} refers to the default "
"data for new frames.  They return the symbol @code{unspecified} if the face "
"doesn't define any value for that attribute."
msgstr ""

# type: defun
#: lispref/display.texi:2229
#, no-wrap
msgid "face-foreground face &optional frame inherit"
msgstr ""

# type: defunx
#: lispref/display.texi:2230
#, no-wrap
msgid "face-background face &optional frame inherit"
msgstr ""

# type: defun
#: lispref/display.texi:2233
msgid ""
"These functions return the foreground color (or background color, "
"respectively) of face @var{face}, as a string."
msgstr ""

# type: defun
#: lispref/display.texi:2240
msgid ""
"If @var{inherit} is @code{nil}, only a color directly defined by the face is "
"returned.  If @var{inherit} is non-@code{nil}, any faces specified by its "
"@code{:inherit} attribute are considered as well, and if @var{inherit} is a "
"face or a list of faces, then they are also considered, until a specified "
"color is found.  To ensure that the return value is always specified, use a "
"value of @code{default} for @var{inherit}."
msgstr ""

# type: defun
#: lispref/display.texi:2242
#, no-wrap
msgid "face-stipple face &optional frame inherit"
msgstr ""

# type: defun
#: lispref/display.texi:2245
msgid ""
"This function returns the name of the background stipple pattern of face @var"
"{face}, or @code{nil} if it doesn't have one."
msgstr ""

# type: defun
#: lispref/display.texi:2253
msgid ""
"If @var{inherit} is @code{nil}, only a stipple directly defined by the face "
"is returned.  If @var{inherit} is non-@code{nil}, any faces specified by its "
"@code{:inherit} attribute are considered as well, and if @var{inherit} is a "
"face or a list of faces, then they are also considered, until a specified "
"stipple is found.  To ensure that the return value is always specified, use "
"a value of @code{default} for @var{inherit}."
msgstr ""

# type: defun
#: lispref/display.texi:2255
#, no-wrap
msgid "face-font face &optional frame"
msgstr ""

# type: defun
#: lispref/display.texi:2257
msgid "This function returns the name of the font of face @var{face}."
msgstr ""

# type: defun
#: lispref/display.texi:2259
#, no-wrap
msgid "face-bold-p face &optional frame"
msgstr ""

# type: defun
#: lispref/display.texi:2262
msgid ""
"This function returns @code{t} if @var{face} is bold---that is, if it is "
"bolder than normal.  It returns @code{nil} otherwise."
msgstr ""

# type: defun
#: lispref/display.texi:2264
#, no-wrap
msgid "face-italic-p face &optional frame"
msgstr ""

# type: defun
#: lispref/display.texi:2267
msgid ""
"This function returns @code{t} if @var{face} is italic or oblique, @code"
"{nil} otherwise."
msgstr ""

# type: defun
#: lispref/display.texi:2269
#, no-wrap
msgid "face-underline-p face &optional frame"
msgstr ""

# type: defun
#: lispref/display.texi:2271
msgid ""
"This function returns the @code{:underline} attribute of face @var{face}."
msgstr ""

# type: defun
#: lispref/display.texi:2273
#, no-wrap
msgid "face-inverse-video-p face &optional frame"
msgstr ""

# type: defun
#: lispref/display.texi:2275
msgid ""
"This function returns the @code{:inverse-video} attribute of face @var{face}."
msgstr ""

# type: Plain text
#: lispref/display.texi:2281
msgid "Here are the ways to specify which faces to use for display of text:"
msgstr ""

# type: itemize
#: lispref/display.texi:2287
msgid ""
"With defaults.  The @code{default} face is used as the ultimate default for "
"all text.  (In Emacs 19 and 20, the @code{default} face is used only when no "
"other face is specified.)"
msgstr ""

# type: itemize
#: lispref/display.texi:2292
msgid ""
"For a mode line or header line, the face @code{mode-line} or @code{mode-line-"
"inactive}, or @code{header-line}, is merged in just before @code{default}."
msgstr ""

# type: itemize
#: lispref/display.texi:2297
msgid ""
"With text properties.  A character can have a @code{face} property; if so, "
"the faces and face attributes specified there apply.  @xref{Special "
"Properties}."
msgstr ""

# type: itemize
#: lispref/display.texi:2301
msgid ""
"If the character has a @code{mouse-face} property, that is used instead of "
"the @code{face} property when the mouse is ``near enough'' to the character."
msgstr ""

# type: itemize
#: lispref/display.texi:2305
msgid ""
"With overlays.  An overlay can have @code{face} and @code{mouse-face} "
"properties too; they apply to all the text covered by the overlay."
msgstr ""

# type: itemize
#: lispref/display.texi:2310
msgid ""
"With a region that is active.  In Transient Mark mode, the region is "
"highlighted with the face @code{region} (@pxref{Standard Faces,,, emacs, The "
"GNU Emacs Manual})."
msgstr ""

# type: itemize
#: lispref/display.texi:2314
msgid ""
"With special glyphs.  Each glyph can specify a particular face number.  @xref"
"{Glyphs}."
msgstr ""

# type: Plain text
#: lispref/display.texi:2324
msgid ""
"If these various sources together specify more than one face for a "
"particular character, Emacs merges the attributes of the various faces "
"specified.  For each attribute, Emacs tries first the face of any special "
"glyph; then the face for region highlighting, if appropriate; then the faces "
"specified by overlays, followed by those specified by text properties, then "
"the @code{mode-line} or @code{mode-line-inactive} or @code{header-line} face "
"(if in a mode line or a header line), and last the @code{default} face."
msgstr ""

# type: Plain text
#: lispref/display.texi:2327
msgid ""
"When multiple overlays cover one character, an overlay with higher priority "
"overrides those with lower priority.  @xref{Overlays}."
msgstr ""

# type: Plain text
#: lispref/display.texi:2336
msgid ""
"@dfn{Selecting a font} means mapping the specified face attributes for a "
"character to a font that is available on a particular display.  The face "
"attributes, as determined by face merging, specify most of the font choice, "
"but not all.  Part of the choice depends on what character it is."
msgstr ""

# type: Plain text
#: lispref/display.texi:2340
msgid ""
"If the face specifies a fontset name, that fontset determines a pattern for "
"fonts of the given charset.  If the face specifies a font family, a font "
"pattern is constructed."
msgstr ""

# type: Plain text
#: lispref/display.texi:2349
msgid ""
"Emacs tries to find an available font for the given face attributes and "
"character's registry and encoding.  If there is a font that matches exactly, "
"it is used, of course.  The hard case is when no available font exactly fits "
"the specification.  Then Emacs looks for one that is ``close''---one "
"attribute at a time.  You can specify the order to consider the attributes.  "
"In the case where a specified font family is not available, you can specify "
"a set of mappings for alternatives to try."
msgstr ""

# type: defvar
#: lispref/display.texi:2350
#, no-wrap
msgid "face-font-selection-order"
msgstr ""

# type: defvar
#: lispref/display.texi:2355
msgid ""
"This variable specifies the order of importance of the face attributes @code"
"{:width}, @code{:height}, @code{:weight}, and @code{:slant}.  The value "
"should be a list containing those four symbols, in order of decreasing "
"importance."
msgstr ""

# type: defvar
#: lispref/display.texi:2359
msgid ""
"Font selection first finds the best available matches for the first "
"attribute listed; then, among the fonts which are best in that way, it "
"searches for the best matches in the second attribute, and so on."
msgstr ""

# type: defvar
#: lispref/display.texi:2365
msgid ""
"The attributes @code{:weight} and @code{:width} have symbolic values in a "
"range centered around @code{normal}.  Matches that are more extreme (farther "
"from @code{normal}) are somewhat preferred to matches that are less extreme "
"(closer to @code{normal}); this is designed to ensure that non-normal faces "
"contrast with normal ones, whenever possible."
msgstr ""

# type: defvar
#: lispref/display.texi:2370
msgid ""
"The default is @code{(:width :height :weight :slant)}, which means first "
"find the fonts closest to the specified @code{:width}, then---among the "
"fonts with that width---find a best match for the specified font height, and "
"so on."
msgstr ""

# type: defvar
#: lispref/display.texi:2377
msgid ""
"One example of a case where this variable makes a difference is when the "
"default font has no italic equivalent.  With the default ordering, the @code"
"{italic} face will use a non-italic font that is similar to the default "
"one.  But if you put @code{:slant} before @code{:height}, the @code{italic} "
"face will use an italic font, even if its height is not quite right."
msgstr ""

# type: defvar
#: lispref/display.texi:2379
#, no-wrap
msgid "face-font-family-alternatives"
msgstr ""

# type: defvar
#: lispref/display.texi:2383
msgid ""
"This variable lets you specify alternative font families to try, if a given "
"family is specified and doesn't exist.  Each element should have this form:"
msgstr ""

# type: example
#: lispref/display.texi:2386
#, no-wrap
msgid "(@var{family} @var{alternate-families}@dots{})\n"
msgstr ""

# type: defvar
#: lispref/display.texi:2391
msgid ""
"If @var{family} is specified but not available, Emacs will try the other "
"families given in @var{alternate-families}, one by one, until it finds a "
"family that does exist."
msgstr ""

# type: defvar
#: lispref/display.texi:2393
#, no-wrap
msgid "face-font-registry-alternatives"
msgstr ""

# type: defvar
#: lispref/display.texi:2397
msgid ""
"This variable lets you specify alternative font registries to try, if a "
"given registry is specified and doesn't exist.  Each element should have "
"this form:"
msgstr ""

# type: example
#: lispref/display.texi:2400
#, no-wrap
msgid "(@var{registry} @var{alternate-registries}@dots{})\n"
msgstr ""

# type: defvar
#: lispref/display.texi:2405
msgid ""
"If @var{registry} is specified but not available, Emacs will try the other "
"registries given in @var{alternate-registries}, one by one, until it finds a "
"registry that does exist."
msgstr ""

# type: Plain text
#: lispref/display.texi:2410
msgid ""
"Emacs can make use of scalable fonts, but by default it does not use them, "
"since the use of too many or too big scalable fonts can crash XFree86 "
"servers."
msgstr ""

# type: defvar
#: lispref/display.texi:2411
#, no-wrap
msgid "scalable-fonts-allowed"
msgstr ""

# type: defvar
#: lispref/display.texi:2415
msgid ""
"This variable controls which scalable fonts to use.  A value of @code{nil}, "
"the default, means do not use scalable fonts.  @code{t} means to use any "
"scalable font that seems appropriate for the text."
msgstr ""

# type: defvar
#: lispref/display.texi:2419
msgid ""
"Otherwise, the value must be a list of regular expressions.  Then a scalable "
"font is enabled for use if its name matches any regular expression in the "
"list.  For example,"
msgstr ""

# type: example
#: lispref/display.texi:2422
#, no-wrap
msgid "(setq scalable-fonts-allowed '(\"muleindian-2$\"))\n"
msgstr ""

# type: defvar
#: lispref/display.texi:2426
msgid "allows the use of scalable fonts with registry @code{muleindian-2}."
msgstr ""

# type: defvar
#: lispref/display.texi:2428
#, no-wrap
msgid "face-font-rescale-alist"
msgstr ""

# type: defvar
#: lispref/display.texi:2431
msgid ""
"This variable specifies scaling for certain faces.  Its value should be a "
"list of elements of the form"
msgstr ""

# type: example
#: lispref/display.texi:2434
#, no-wrap
msgid "(@var{fontname-regexp} . @var{scale-factor})\n"
msgstr ""

# type: defvar
#: lispref/display.texi:2441
msgid ""
"If @var{fontname-regexp} matches the font name that is about to be used, "
"this says to choose a larger similar font according to the factor @var{scale-"
"factor}.  You would use this feature to normalize the font size if certain "
"fonts are bigger or smaller than their nominal heights and widths would "
"suggest."
msgstr ""

# type: subsection
#: lispref/display.texi:2444
#, no-wrap
msgid "Functions for Working with Faces"
msgstr ""

# type: Plain text
#: lispref/display.texi:2447
msgid "Here are additional functions for creating and working with faces."
msgstr ""

# type: defun
#: lispref/display.texi:2448
#, no-wrap
msgid "make-face name"
msgstr ""

# type: defun
#: lispref/display.texi:2452
msgid ""
"This function defines a new face named @var{name}, initially with all "
"attributes @code{nil}.  It does nothing if there is already a face named @var"
"{name}."
msgstr ""

# type: defun
#: lispref/display.texi:2454
#, no-wrap
msgid "face-list"
msgstr ""

# type: defun
#: lispref/display.texi:2456
msgid "This function returns a list of all defined face names."
msgstr ""

# type: defun
#: lispref/display.texi:2458
#, no-wrap
msgid "copy-face old-face new-name &optional frame new-frame"
msgstr ""

# type: defun
#: lispref/display.texi:2462
msgid ""
"This function defines a face named @var{new-name} as a copy of the existing "
"face named @var{old-face}.  It creates the face @var{new-name} if that "
"doesn't already exist."
msgstr ""

# type: defun
#: lispref/display.texi:2467
msgid ""
"If the optional argument @var{frame} is given, this function applies only to "
"that frame.  Otherwise it applies to each frame individually, copying "
"attributes from @var{old-face} in each frame to @var{new-face} in the same "
"frame."
msgstr ""

# type: defun
#: lispref/display.texi:2471
msgid ""
"If the optional argument @var{new-frame} is given, then @code{copy-face} "
"copies the attributes of @var{old-face} in @var{frame} to @var{new-name} in "
"@var{new-frame}."
msgstr ""

# type: defun
#: lispref/display.texi:2473
#, no-wrap
msgid "face-id face"
msgstr ""

# type: defun
#: lispref/display.texi:2475
msgid "This function returns the face number of face @var{face}."
msgstr ""

# type: defun
#: lispref/display.texi:2477 lispref/help.texi:169
#, no-wrap
msgid "face-documentation face"
msgstr ""

# type: defun
#: lispref/display.texi:2480
msgid ""
"This function returns the documentation string of face @var{face}, or @code"
"{nil} if none was specified for it."
msgstr ""

# type: defun
#: lispref/display.texi:2482
#, no-wrap
msgid "face-equal face1 face2 &optional frame"
msgstr ""

# type: defun
#: lispref/display.texi:2485
msgid ""
"This returns @code{t} if the faces @var{face1} and @var{face2} have the same "
"attributes for display."
msgstr ""

# type: defun
#: lispref/display.texi:2487
#, no-wrap
msgid "face-differs-from-default-p face &optional frame"
msgstr ""

# type: defun
#: lispref/display.texi:2490
msgid ""
"This returns non-@code{nil} if the face @var{face} displays differently from "
"the default face."
msgstr ""

# type: cindex
#: lispref/display.texi:2492
#, no-wrap
msgid "face alias"
msgstr ""

# type: Plain text
#: lispref/display.texi:2497
msgid ""
"A @dfn{face alias} provides an equivalent name for a face.  You can define a "
"face alias by giving the alias symbol the @code{face-alias} property, with a "
"value of the target face name.  The following example makes @code{modeline} "
"an alias for the @code{mode-line} face."
msgstr ""

# type: example
#: lispref/display.texi:2500
#, no-wrap
msgid "(put 'modeline 'face-alias 'mode-line)\n"
msgstr ""

# type: subsection
#: lispref/display.texi:2504
#, no-wrap
msgid "Automatic Face Assignment"
msgstr ""

# type: cindex
#: lispref/display.texi:2505
#, no-wrap
msgid "automatic face assignment"
msgstr ""

# type: cindex
#: lispref/display.texi:2506
#, no-wrap
msgid "faces, automatic choice"
msgstr ""

# type: Plain text
#: lispref/display.texi:2510
msgid ""
"This hook is used for automatically assigning faces to text in the buffer.  "
"It is part of the implementation of Font-Lock mode."
msgstr ""

# type: defvar
#: lispref/display.texi:2511
#, no-wrap
msgid "fontification-functions"
msgstr ""

# type: defvar
#: lispref/display.texi:2514
msgid ""
"This variable holds a list of functions that are called by Emacs redisplay "
"as needed to assign faces automatically to text in the buffer."
msgstr ""

# type: defvar
#: lispref/display.texi:2518
msgid ""
"The functions are called in the order listed, with one argument, a buffer "
"position @var{pos}.  Each function should attempt to assign faces to the "
"text in the current buffer starting at @var{pos}."
msgstr ""

# type: defvar
#: lispref/display.texi:2524
msgid ""
"Each function should record the faces they assign by setting the @code{face} "
"property.  It should also add a non-@code{nil} @code{fontified} property for "
"all the text it has assigned faces to.  That property tells redisplay that "
"faces have been assigned to that text already."
msgstr ""

# type: defvar
#: lispref/display.texi:2530
msgid ""
"It is probably a good idea for each function to do nothing if the character "
"after @var{pos} already has a non-@code{nil} @code{fontified} property, but "
"this is not required.  If one function overrides the assignments made by a "
"previous one, the properties as they are after the last function finishes "
"are the ones that really matter."
msgstr ""

# type: defvar
#: lispref/display.texi:2533
msgid ""
"For efficiency, we recommend writing these functions so that they usually "
"assign faces to around 400 to 600 characters at each call."
msgstr ""

# type: subsection
#: lispref/display.texi:2536
#, no-wrap
msgid "Looking Up Fonts"
msgstr ""

# type: defun
#: lispref/display.texi:2538
#, no-wrap
msgid "x-list-fonts pattern &optional face frame maximum"
msgstr ""

# type: defun
#: lispref/display.texi:2543
msgid ""
"This function returns a list of available font names that match @var"
"{pattern}.  If the optional arguments @var{face} and @var{frame} are "
"specified, then the list is limited to fonts that are the same size as @var"
"{face} currently is on @var{frame}."
msgstr ""

# type: defun
#: lispref/display.texi:2548
msgid ""
"The argument @var{pattern} should be a string, perhaps with wildcard "
"characters: the @samp{*} character matches any substring, and the @samp{?} "
"character matches any single character.  Pattern matching of font names "
"ignores case."
msgstr ""

# type: defun
#: lispref/display.texi:2551
msgid ""
"If you specify @var{face} and @var{frame}, @var{face} should be a face name "
"(a symbol) and @var{frame} should be a frame."
msgstr ""

# type: defun
#: lispref/display.texi:2557
msgid ""
"The optional argument @var{maximum} sets a limit on how many fonts to "
"return.  If this is non-@code{nil}, then the return value is truncated after "
"the first @var{maximum} matching fonts.  Specifying a small value for @var"
"{maximum} can make this function much faster, in cases where many fonts "
"match the pattern."
msgstr ""

# type: defun
#: lispref/display.texi:2559
#, no-wrap
msgid "x-family-fonts &optional family frame"
msgstr ""

# type: defun
#: lispref/display.texi:2565
msgid ""
"This function returns a list describing the available fonts for family @var"
"{family} on @var{frame}.  If @var{family} is omitted or @code{nil}, this "
"list applies to all families, and therefore, it contains all available "
"fonts.  Otherwise, @var{family} must be a string; it may contain the "
"wildcards @samp{?} and @samp{*}."
msgstr ""

# type: defun
#: lispref/display.texi:2569
msgid ""
"The list describes the display that @var{frame} is on; if @var{frame} is "
"omitted or @code{nil}, it applies to the selected frame's display (@pxref"
"{Input Focus})."
msgstr ""

# type: defun
#: lispref/display.texi:2571
msgid "The list contains a vector of the following form for each font:"
msgstr ""

# type: example
#: lispref/display.texi:2575
#, no-wrap
msgid ""
"[@var{family} @var{width} @var{point-size} @var{weight} @var{slant}\n"
" @var{fixed-p} @var{full} @var{registry-and-encoding}]\n"
msgstr ""

# type: defun
#: lispref/display.texi:2579
msgid ""
"The first five elements correspond to face attributes; if you specify these "
"attributes for a face, it will use this font."
msgstr ""

# type: defun
#: lispref/display.texi:2585
msgid ""
"The last three elements give additional information about the font.  @var"
"{fixed-p} is non-@code{nil} if the font is fixed-pitch.  @var{full} is the "
"full name of the font, and @var{registry-and-encoding} is a string giving "
"the registry and encoding of the font."
msgstr ""

# type: defun
#: lispref/display.texi:2587
msgid ""
"The result list is sorted according to the current face font sort order."
msgstr ""

# type: defun
#: lispref/display.texi:2589
#, no-wrap
msgid "x-font-family-list &optional frame"
msgstr ""

# type: defun
#: lispref/display.texi:2593
msgid ""
"This function returns a list of the font families available for @var"
"{frame}'s display.  If @var{frame} is omitted or @code{nil}, it describes "
"the selected frame's display (@pxref{Input Focus})."
msgstr ""

# type: defun
#: lispref/display.texi:2595
msgid "The value is a list of elements of this form:"
msgstr ""

# type: example
#: lispref/display.texi:2598
#, no-wrap
msgid "(@var{family} . @var{fixed-p})\n"
msgstr ""

# type: defun
#: lispref/display.texi:2603
msgid ""
"Here @var{family} is a font family, and @var{fixed-p} is non-@code{nil} if "
"fonts of that family are fixed-pitch."
msgstr ""

# type: defvar
#: lispref/display.texi:2605
#, no-wrap
msgid "font-list-limit"
msgstr ""

# type: defvar
#: lispref/display.texi:2611
msgid ""
"This variable specifies maximum number of fonts to consider in font "
"matching.  The function @code{x-family-fonts} will not return more than that "
"many fonts, and font selection will consider only that many fonts when "
"searching a matching font for face attributes.  The default is currently 100."
msgstr ""

# type: Plain text
#: lispref/display.texi:2622
msgid ""
"A @dfn{fontset} is a list of fonts, each assigned to a range of character "
"codes.  An individual font cannot display the whole range of characters that "
"Emacs supports, but a fontset can.  Fontsets have names, just as fonts do, "
"and you can use a fontset name in place of a font name when you specify the "
"``font'' for a frame or a face.  Here is information about defining a "
"fontset under Lisp program control."
msgstr ""

# type: defun
#: lispref/display.texi:2623
#, no-wrap
msgid "create-fontset-from-fontset-spec fontset-spec &optional style-variant-p noerror"
msgstr ""

# type: defun
#: lispref/display.texi:2626
msgid ""
"This function defines a new fontset according to the specification string "
"@var{fontset-spec}.  The string should have this format:"
msgstr ""

# type: smallexample
#: lispref/display.texi:2629
#, no-wrap
msgid "@var{fontpattern}, @r{[}@var{charsetname}:@var{fontname}@r{]@dots{}}\n"
msgstr ""

# type: defun
#: lispref/display.texi:2633
msgid "Whitespace characters before and after the commas are ignored."
msgstr ""

# type: defun
#: lispref/display.texi:2637
msgid ""
"The first part of the string, @var{fontpattern}, should have the form of a "
"standard X font name, except that the last two fields should be @samp"
"{fontset-@var{alias}}."
msgstr ""

# type: defun
#: lispref/display.texi:2644
msgid ""
"The new fontset has two names, one long and one short.  The long name is @var"
"{fontpattern} in its entirety.  The short name is @samp{fontset-@var"
"{alias}}.  You can refer to the fontset by either name.  If a fontset with "
"the same name already exists, an error is signaled, unless @var{noerror} is "
"non-@code{nil}, in which case this function does nothing."
msgstr ""

# type: defun
#: lispref/display.texi:2650
msgid ""
"If optional argument @var{style-variant-p} is non-@code{nil}, that says to "
"create bold, italic and bold-italic variants of the fontset as well.  These "
"variant fontsets do not have a short name, only a long one, which is made by "
"altering @var{fontpattern} to indicate the bold or italic status."
msgstr ""

# type: defun
#: lispref/display.texi:2653
msgid ""
"The specification string also says which fonts to use in the fontset.  See "
"below for the details."
msgstr ""

# type: Plain text
#: lispref/display.texi:2660
msgid ""
"The construct @samp{@var{charset}:@var{font}} specifies which font to use "
"(in this fontset) for one particular character set.  Here, @var{charset} is "
"the name of a character set, and @var{font} is the font to use for that "
"character set.  You can use this construct any number of times in the "
"specification string."
msgstr ""

# type: Plain text
#: lispref/display.texi:2666
msgid ""
"For the remaining character sets, those that you don't specify explicitly, "
"Emacs chooses a font based on @var{fontpattern}: it replaces @samp{fontset-"
"@var{alias}} with a value that names one character set.  For the @acronym"
"{ASCII} character set, @samp{fontset-@var{alias}} is replaced with @samp"
"{ISO8859-1}."
msgstr ""

# type: Plain text
#: lispref/display.texi:2672
msgid ""
"In addition, when several consecutive fields are wildcards, Emacs collapses "
"them into a single wildcard.  This is to prevent use of auto-scaled fonts.  "
"Fonts made by scaling larger fonts are not usable for editing, and scaling a "
"smaller font is not useful because it is better to use the smaller font in "
"its own size, which Emacs does."
msgstr ""

# type: Plain text
#: lispref/display.texi:2674
msgid "Thus if @var{fontpattern} is this,"
msgstr ""

# type: example
#: lispref/display.texi:2677
#, no-wrap
msgid "-*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24\n"
msgstr ""

# type: Plain text
#: lispref/display.texi:2681
msgid "the font specification for @acronym{ASCII} characters would be this:"
msgstr ""

# type: example
#: lispref/display.texi:2684
#, no-wrap
msgid "-*-fixed-medium-r-normal-*-24-*-ISO8859-1\n"
msgstr ""

# type: Plain text
#: lispref/display.texi:2688
msgid "and the font specification for Chinese GB2312 characters would be this:"
msgstr ""

# type: example
#: lispref/display.texi:2691
#, no-wrap
msgid "-*-fixed-medium-r-normal-*-24-*-gb2312*-*\n"
msgstr ""

# type: Plain text
#: lispref/display.texi:2697
msgid ""
"You may not have any Chinese font matching the above font specification.  "
"Most X distributions include only Chinese fonts that have @samp{song ti} or "
"@samp{fangsong ti} in the @var{family} field.  In such a case, @samp{Fontset-"
"@var{n}} can be specified as below:"
msgstr ""

# type: smallexample
#: lispref/display.texi:2701
#, no-wrap
msgid ""
"Emacs.Fontset-0: -*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24,\\\n"
"        chinese-gb2312:-*-*-medium-r-normal-*-24-*-gb2312*-*\n"
msgstr ""

# type: Plain text
#: lispref/display.texi:2708
msgid ""
"Then, the font specifications for all but Chinese GB2312 characters have "
"@samp{fixed} in the @var{family} field, and the font specification for "
"Chinese GB2312 characters has a wild card @samp{*} in the @var{family} field."
msgstr ""

# type: defun
#: lispref/display.texi:2709
#, no-wrap
msgid "set-fontset-font name character fontname &optional frame"
msgstr ""

# type: defun
#: lispref/display.texi:2712
msgid ""
"This function modifies the existing fontset @var{name} to use the font name "
"@var{fontname} for the character @var{character}."
msgstr ""

# type: defun
#: lispref/display.texi:2715
msgid ""
"If @var{name} is @code{nil}, this function modifies the default fontset, "
"whose short name is @samp{fontset-default}."
msgstr ""

# type: defun
#: lispref/display.texi:2720
msgid ""
"@var{character} may be a cons; @code{(@var{from} . @var{to})}, where @var"
"{from} and @var{to} are non-generic characters.  In that case, use @var"
"{fontname} for all characters in the range @var{from} and @var{to} "
"(inclusive)."
msgstr ""

# type: defun
#: lispref/display.texi:2723
msgid ""
"@var{character} may be a charset.  In that case, use @var{fontname} for all "
"character in the charsets."
msgstr ""

# type: defun
#: lispref/display.texi:2728
msgid ""
"@var{fontname} may be a cons; @code{(@var{family} . @var{registry})}, where "
"@var{family} is a family name of a font (possibly including a foundry name "
"at the head), @var{registry} is a registry name of a font (possibly "
"including an encoding name at the tail)."
msgstr ""

# type: defun
#: lispref/display.texi:2732
msgid ""
"For instance, this changes the default fontset to use a font of which "
"registry name is @samp{JISX0208.1983} for all characters belonging to the "
"charset @code{japanese-jisx0208}."
msgstr ""

# type: smallexample
#: lispref/display.texi:2735
#, no-wrap
msgid "(set-fontset-font nil 'japanese-jisx0208 '(nil . \"JISX0208.1983\"))\n"
msgstr ""

# type: defun
#: lispref/display.texi:2738
#, no-wrap
msgid "char-displayable-p char"
msgstr ""

# type: defun
#: lispref/display.texi:2742
msgid ""
"This function returns @code{t} if Emacs ought to be able to display @var"
"{char}.  More precisely, if the selected frame's fontset has a font to "
"display the character set that @var{char} belongs to."
msgstr ""

# type: defun
#: lispref/display.texi:2745
msgid ""
"Fontsets can specify a font on a per-character basis; when the fontset does "
"that, this function's value may not be accurate."
msgstr ""

# type: cindex
#: lispref/display.texi:2749
#, no-wrap
msgid "fringes"
msgstr ""

# type: Plain text
#: lispref/display.texi:2754
msgid ""
"The @dfn{fringes} of a window are thin vertical strips down the sides that "
"are used for displaying bitmaps that indicate truncation, continuation, "
"horizontal scrolling, and the overlay arrow."
msgstr ""

# type: node
#: lispref/display.texi:2762 lispref/display.texi:2764
#, no-wrap
msgid "Fringe Size/Pos"
msgstr ""

# type: menu
#: lispref/display.texi:2762
msgid "Specifying where to put the window fringes."
msgstr ""

# type: subsection
#: lispref/display.texi:2762 lispref/display.texi:2812
#: lispref/display.texi:2813
#, no-wrap
msgid "Fringe Indicators"
msgstr ""

# type: menu
#: lispref/display.texi:2762
msgid "Displaying indicator icons in the window fringes."
msgstr ""

# type: subsection
#: lispref/display.texi:2762 lispref/display.texi:2940
#: lispref/display.texi:2941
#, no-wrap
msgid "Fringe Cursors"
msgstr ""

# type: menu
#: lispref/display.texi:2762
msgid "Displaying cursors in the right fringe."
msgstr ""

# type: subsection
#: lispref/display.texi:2762 lispref/display.texi:2993
#: lispref/display.texi:2994
#, no-wrap
msgid "Fringe Bitmaps"
msgstr ""

# type: menu
#: lispref/display.texi:2762
msgid "Specifying bitmaps for fringe indicators."
msgstr ""

# type: node
#: lispref/display.texi:2762 lispref/display.texi:3031
#, no-wrap
msgid "Customizing Bitmaps"
msgstr ""

# type: menu
#: lispref/display.texi:2762
msgid "Specifying your own bitmaps to use in the fringes."
msgstr ""

# type: menu
#: lispref/display.texi:2762 lispref/display.texi:3077 lispref/vol1.texi:928
#: lispref/vol2.texi:929
#, no-wrap
msgid "Overlay Arrow"
msgstr ""

# type: menu
#: lispref/display.texi:2762 lispref/vol1.texi:928 lispref/vol2.texi:929
msgid "Display of an arrow to indicate position."
msgstr ""

# type: subsection
#: lispref/display.texi:2765
#, no-wrap
msgid "Fringe Size and Position"
msgstr ""

# type: Plain text
#: lispref/display.texi:2769
msgid ""
"The following buffer-local variables control the position and width of the "
"window fringes."
msgstr ""

# type: item
#: lispref/display.texi:2770 lispref/locals.texi:132
#, no-wrap
msgid "fringes-outside-margins"
msgstr ""

# type: defvar
#: lispref/display.texi:2774
msgid ""
"The fringes normally appear between the display margins and the window "
"text.  If the value is non-@code{nil}, they appear outside the display "
"margins.  @xref{Display Margins}."
msgstr ""

# type: item
#: lispref/display.texi:2776 lispref/locals.texi:147
#, no-wrap
msgid "left-fringe-width"
msgstr ""

# type: defvar
#: lispref/display.texi:2780
msgid ""
"This variable, if non-@code{nil}, specifies the width of the left fringe in "
"pixels.  A value of @code{nil} means to use the left fringe width from the "
"window's frame."
msgstr ""

# type: item
#: lispref/display.texi:2782 lispref/locals.texi:189
#, no-wrap
msgid "right-fringe-width"
msgstr ""

# type: defvar
#: lispref/display.texi:2786
msgid ""
"This variable, if non-@code{nil}, specifies the width of the right fringe in "
"pixels.  A value of @code{nil} means to use the right fringe width from the "
"window's frame."
msgstr ""

# type: Plain text
#: lispref/display.texi:2792
msgid ""
"The values of these variables take effect when you display the buffer in a "
"window.  If you change them while the buffer is visible, you can call @code"
"{set-window-buffer} to display it once again in the same window, to make the "
"changes take effect."
msgstr ""

# type: defun
#: lispref/display.texi:2793
#, no-wrap
msgid "set-window-fringes window left &optional right outside-margins"
msgstr ""

# type: defun
#: lispref/display.texi:2796
msgid ""
"This function sets the fringe widths of window @var{window}.  If @var"
"{window} is @code{nil}, the selected window is used."
msgstr ""

# type: defun
#: lispref/display.texi:2802
msgid ""
"The argument @var{left} specifies the width in pixels of the left fringe, "
"and likewise @var{right} for the right fringe.  A value of @code{nil} for "
"either one stands for the default width.  If @var{outside-margins} is non-"
"@code{nil}, that specifies that fringes should appear outside of the display "
"margins."
msgstr ""

# type: defun
#: lispref/display.texi:2804
#, no-wrap
msgid "window-fringes &optional window"
msgstr ""

# type: defun
#: lispref/display.texi:2809
msgid ""
"This function returns information about the fringes of a window @var"
"{window}.  If @var{window} is omitted or @code{nil}, the selected window is "
"used.  The value has the form @code{(@var{left-width} @var{right-width} @var"
"{outside-margins})}."
msgstr ""

# type: cindex
#: lispref/display.texi:2814
#, no-wrap
msgid "fringe indicators"
msgstr ""

# type: cindex
#: lispref/display.texi:2815
#, no-wrap
msgid "indicators, fringe"
msgstr ""

# type: Plain text
#: lispref/display.texi:2820
msgid ""
"The @dfn{fringe indicators} are tiny icons Emacs displays in the window "
"fringe (on a graphic display) to indicate truncated or continued lines, "
"buffer boundaries, overlay arrow, etc."
msgstr ""

# type: item
#: lispref/display.texi:2821 lispref/locals.texi:144
#, no-wrap
msgid "indicate-empty-lines"
msgstr ""

# type: cindex
#: lispref/display.texi:2822
#, no-wrap
msgid "fringes, and empty line indication"
msgstr ""

# type: defopt
#: lispref/display.texi:2827
msgid ""
"When this is non-@code{nil}, Emacs displays a special glyph in the fringe of "
"each empty line at the end of the buffer, on graphical displays.  @xref"
"{Fringes}.  This variable is automatically buffer-local in every buffer."
msgstr ""

# type: item
#: lispref/display.texi:2829 lispref/locals.texi:141
#, no-wrap
msgid "indicate-buffer-boundaries"
msgstr ""

# type: defvar
#: lispref/display.texi:2832
msgid ""
"This buffer-local variable controls how the buffer boundaries and window "
"scrolling are indicated in the window fringes."
msgstr ""

# type: defvar
#: lispref/display.texi:2838
msgid ""
"Emacs can indicate the buffer boundaries---that is, the first and last line "
"in the buffer---with angle icons when they appear on the screen.  In "
"addition, Emacs can display an up-arrow in the fringe to show that there is "
"text above the screen, and a down-arrow to show there is text below the "
"screen."
msgstr ""

# type: defvar
#: lispref/display.texi:2840
msgid "There are three kinds of basic values:"
msgstr ""

# type: table
#: lispref/display.texi:2844
msgid "Don't display any of these fringe icons."
msgstr ""

# type: item
#: lispref/display.texi:2844 lispref/frames.texi:390
#: lispref/internals.texi:1238
#, no-wrap
msgid "left"
msgstr ""

# type: table
#: lispref/display.texi:2846
msgid "Display the angle icons and arrows in the left fringe."
msgstr ""

# type: code{#1}
#: lispref/display.texi:2846
#, no-wrap
msgid "right"
msgstr ""

# type: table
#: lispref/display.texi:2848
msgid "Display the angle icons and arrows in the right fringe."
msgstr ""

# type: item
#: lispref/display.texi:2848
#, no-wrap
msgid "any non-alist"
msgstr ""

# type: table
#: lispref/display.texi:2851
msgid ""
"Display the angle icons in the left fringe and don't display the arrows."
msgstr ""

# type: defvar
#: lispref/display.texi:2860
msgid ""
"Otherwise the value should be an alist that specifies which fringe "
"indicators to display and where.  Each element of the alist should have the "
"form @code{(@var{indicator} . @var{position})}.  Here, @var{indicator} is "
"one of @code{top}, @code{bottom}, @code{up}, @code{down}, and @code{t} "
"(which covers all the icons not yet specified), while @var{position} is one "
"of @code{left}, @code{right} and @code{nil}."
msgstr ""

# type: defvar
#: lispref/display.texi:2865
msgid ""
"For example, @code{((top . left) (t . right))} places the top angle bitmap "
"in left fringe, and the bottom angle bitmap as well as both arrow bitmaps in "
"right fringe.  To show the angle bitmaps in the left fringe, and no arrow "
"bitmaps, use @code{((top .  left) (bottom . left))}."
msgstr ""

# type: defvar
#: lispref/display.texi:2867
#, no-wrap
msgid "default-indicate-buffer-boundaries"
msgstr ""

# type: defvar
#: lispref/display.texi:2870
msgid ""
"The value of this variable is the default value for @code{indicate-buffer-"
"boundaries} in buffers that do not override it."
msgstr ""

# type: item
#: lispref/display.texi:2872 lispref/locals.texi:129
#, no-wrap
msgid "fringe-indicator-alist"
msgstr ""

# type: defvar
#: lispref/display.texi:2875
msgid ""
"This buffer-local variable specifies the mapping from logical fringe "
"indicators to the actual bitmaps displayed in the window fringes."
msgstr ""

# type: defvar
#: lispref/display.texi:2877
msgid "These symbols identify the logical fringe indicators:"
msgstr ""

# type: item
#: lispref/display.texi:2879
#, no-wrap
msgid "Truncation and continuation line indicators:"
msgstr ""

# type: table
#: lispref/display.texi:2881
msgid "@code{truncation}, @code{continuation}."
msgstr ""

# type: item
#: lispref/display.texi:2882
#, no-wrap
msgid "Buffer position indicators:"
msgstr ""

# type: table
#: lispref/display.texi:2886
msgid "@code{up}, @code{down}, @code{top}, @code{bottom}, @code{top-bottom}."
msgstr ""

# type: item
#: lispref/display.texi:2887
#, no-wrap
msgid "Empty line indicator:"
msgstr ""

# type: table
#: lispref/display.texi:2889
msgid "@code{empty-line}."
msgstr ""

# type: item
#: lispref/display.texi:2890
#, no-wrap
msgid "Overlay arrow indicator:"
msgstr ""

# type: table
#: lispref/display.texi:2892
msgid "@code{overlay-arrow}."
msgstr ""

# type: item
#: lispref/display.texi:2893
#, no-wrap
msgid "Unknown bitmap indicator:"
msgstr ""

# type: table
#: lispref/display.texi:2895
msgid "@code{unknown}."
msgstr ""

# type: defvar
#: lispref/display.texi:2900
msgid ""
"The value is an alist where each element @code{(@var{indicator} . @var"
"{bitmaps})} specifies the fringe bitmaps used to display a specific logical "
"fringe indicator."
msgstr ""

# type: defvar
#: lispref/display.texi:2905
msgid ""
"Here, @var{indicator} specifies the logical indicator type, and @var"
"{bitmaps} is list of symbols @code{(@var{left} @var{right} [@var{left1} @var"
"{right1}])} which specifies the actual bitmap shown in the left or right "
"fringe for the logical indicator."
msgstr ""

# type: defvar
#: lispref/display.texi:2912
msgid ""
"The @var{left} and @var{right} symbols specify the bitmaps shown in the left "
"and/or right fringe for the specific indicator.  The @var{left1} or @var"
"{right1} bitmaps are used only for the `bottom' and `top-bottom indicators "
"when the last (only) line in has no final newline.  Alternatively, @var"
"{bitmaps} may be a single symbol which is used in both left and right "
"fringes."
msgstr ""

# type: defvar
#: lispref/display.texi:2917
msgid ""
"When @code{fringe-indicator-alist} has a buffer-local value, and there is no "
"bitmap defined for a logical indicator, or the bitmap is @code{t}, the "
"corresponding value from the (non-local)  @code{default-fringe-indicator-"
"alist} is used."
msgstr ""

# type: defvar
#: lispref/display.texi:2919
msgid "To completely hide a specific indicator, set the bitmap to @code{nil}."
msgstr ""

# type: defvar
#: lispref/display.texi:2921
#, no-wrap
msgid "default-fringe-indicator-alist"
msgstr ""

# type: defvar
#: lispref/display.texi:2924
msgid ""
"The value of this variable is the default value for @code{fringe-indicator-"
"alist} in buffers that do not override it."
msgstr ""

# type: Plain text
#: lispref/display.texi:2927
msgid "Standard fringe bitmaps for indicators:"
msgstr ""

# type: example
#: lispref/display.texi:2938
#, no-wrap
msgid ""
"left-arrow right-arrow up-arrow down-arrow\n"
"left-curly-arrow right-curly-arrow\n"
"left-triangle right-triangle\n"
"top-left-angle top-right-angle\n"
"bottom-left-angle bottom-right-angle\n"
"left-bracket right-bracket\n"
"filled-rectangle hollow-rectangle\n"
"filled-square hollow-square\n"
"vertical-bar horizontal-bar\n"
"empty-line question-mark\n"
msgstr ""

# type: cindex
#: lispref/display.texi:2942
#, no-wrap
msgid "fringe cursors"
msgstr ""

# type: cindex
#: lispref/display.texi:2943
#, no-wrap
msgid "cursor, fringe"
msgstr ""

# type: Plain text
#: lispref/display.texi:2949
msgid ""
"When a line is exactly as wide as the window, Emacs displays the cursor in "
"the right fringe instead of using two lines.  Different bitmaps are used to "
"represent the cursor in the fringe depending on the current buffer's cursor "
"type."
msgstr ""

# type: item
#: lispref/display.texi:2951
#, no-wrap
msgid "Logical cursor types:"
msgstr ""

# type: table
#: lispref/display.texi:2954
msgid ""
"@code{box} , @code{hollow}, @code{bar}, @code{hbar}, @code{hollow-small}."
msgstr ""

# type: Plain text
#: lispref/display.texi:2959
msgid ""
"The @code{hollow-small} type is used instead of @code{hollow} when the "
"normal @code{hollow-rectangle} bitmap is too tall to fit on a specific "
"display line."
msgstr ""

# type: defvar
#: lispref/display.texi:2960
#, no-wrap
msgid "overflow-newline-into-fringe"
msgstr ""

# type: defvar
#: lispref/display.texi:2965
msgid ""
"If this is non-@code{nil}, lines exactly as wide as the window (not counting "
"the final newline character) are not continued.  Instead, when point is at "
"the end of the line, the cursor appears in the right fringe."
msgstr ""

# type: item
#: lispref/display.texi:2967 lispref/locals.texi:126
#, no-wrap
msgid "fringe-cursor-alist"
msgstr ""

# type: defvar
#: lispref/display.texi:2975
msgid ""
"This variable specifies the mapping from logical cursor type to the actual "
"fringe bitmaps displayed in the right fringe.  The value is an alist where "
"each element @code{(@var{cursor} . @var{bitmap})} specifies the fringe "
"bitmaps used to display a specific logical cursor type in the fringe.  Here, "
"@var{cursor} specifies the logical cursor type and @var{bitmap} is a symbol "
"specifying the fringe bitmap to be displayed for that logical cursor type."
msgstr ""

# type: defvar
#: lispref/display.texi:2979
msgid ""
"When @code{fringe-cursor-alist} has a buffer-local value, and there is no "
"bitmap defined for a cursor type, the corresponding value from the (non-"
"local) @code{default-fringes-indicator-alist} is used."
msgstr ""

# type: defvar
#: lispref/display.texi:2981
#, no-wrap
msgid "default-fringes-cursor-alist"
msgstr ""

# type: defvar
#: lispref/display.texi:2984
msgid ""
"The value of this variable is the default value for @code{fringe-cursor-"
"alist} in buffers that do not override it."
msgstr ""

# type: Plain text
#: lispref/display.texi:2987
msgid "Standard bitmaps for displaying the cursor in right fringe:"
msgstr ""

# type: example
#: lispref/display.texi:2990
#, no-wrap
msgid ""
"filled-rectangle hollow-rectangle filled-square hollow-square\n"
"vertical-bar horizontal-bar\n"
msgstr ""

# type: cindex
#: lispref/display.texi:2995
#, no-wrap
msgid "fringe bitmaps"
msgstr ""

# type: cindex
#: lispref/display.texi:2996
#, no-wrap
msgid "bitmaps, fringe"
msgstr ""

# type: Plain text
#: lispref/display.texi:3004
msgid ""
"The @dfn{fringe bitmaps} are the actual bitmaps which represent the logical "
"fringe indicators for truncated or continued lines, buffer boundaries, "
"overlay arrow, etc.  Fringe bitmap symbols have their own name space.  The "
"fringe bitmaps are shared by all frames and windows.  You can redefine the "
"built-in fringe bitmaps, and you can define new fringe bitmaps."
msgstr ""

# type: Plain text
#: lispref/display.texi:3016
msgid ""
"The way to display a bitmap in the left or right fringes for a given line in "
"a window is by specifying the @code{display} property for one of the "
"characters that appears in it.  Use a display specification of the form @code"
"{(left-fringe @var{bitmap} [@var{face}])} or @code{(right-fringe @var"
"{bitmap} [@var{face}])} (@pxref{Display Property}).  Here, @var{bitmap} is a "
"symbol identifying the bitmap you want, and @var{face} (which is optional) "
"is the name of the face whose colors should be used for displaying the "
"bitmap, instead of the default @code{fringe} face.  @var{face} is "
"automatically merged with the @code{fringe} face, so normally @var{face} "
"need only specify the foreground color for the bitmap."
msgstr ""

# type: defun
#: lispref/display.texi:3017
#, no-wrap
msgid "fringe-bitmaps-at-pos &optional pos window"
msgstr ""

# type: defun
#: lispref/display.texi:3024
msgid ""
"This function returns the fringe bitmaps of the display line containing "
"position @var{pos} in window @var{window}.  The return value has the form "
"@code{(@var{left} @var{right} @var{ov})}, where @var{left} is the symbol for "
"the fringe bitmap in the left fringe (or @code{nil} if no bitmap), @var"
"{right} is similar for the right fringe, and @var{ov} is non-@code{nil} if "
"there is an overlay arrow in the left fringe."
msgstr ""

# type: defun
#: lispref/display.texi:3029
msgid ""
"The value is @code{nil} if @var{pos} is not visible in @var{window}.  If @var"
"{window} is @code{nil}, that stands for the selected window.  If @var{pos} "
"is @code{nil}, that stands for the value of point in @var{window}."
msgstr ""

# type: subsection
#: lispref/display.texi:3032
#, no-wrap
msgid "Customizing Fringe Bitmaps"
msgstr ""

# type: defun
#: lispref/display.texi:3034
#, no-wrap
msgid "define-fringe-bitmap bitmap bits &optional height width align"
msgstr ""

# type: defun
#: lispref/display.texi:3037
msgid ""
"This function defines the symbol @var{bitmap} as a new fringe bitmap, or "
"replaces an existing bitmap with that name."
msgstr ""

# type: defun
#: lispref/display.texi:3043
msgid ""
"The argument @var{bits} specifies the image to use.  It should be either a "
"string or a vector of integers, where each element (an integer) corresponds "
"to one row of the bitmap.  Each bit of an integer corresponds to one pixel "
"of the bitmap, where the low bit corresponds to the rightmost pixel of the "
"bitmap."
msgstr ""

# type: defun
#: lispref/display.texi:3048
msgid ""
"The height is normally the length of @var{bits}.  However, you can specify a "
"different height with non-@code{nil} @var{height}.  The width is normally 8, "
"but you can specify a different width with non-@code{nil} @var{width}.  The "
"width must be an integer between 1 and 16."
msgstr ""

# type: defun
#: lispref/display.texi:3053
msgid ""
"The argument @var{align} specifies the positioning of the bitmap relative to "
"the range of rows where it is used; the default is to center the bitmap.  "
"The allowed values are @code{top}, @code{center}, or @code{bottom}."
msgstr ""

# type: defun
#: lispref/display.texi:3059
msgid ""
"The @var{align} argument may also be a list @code{(@var{align} @var"
"{periodic})} where @var{align} is interpreted as described above.  If @var"
"{periodic} is non-@code{nil}, it specifies that the rows in @code{bits} "
"should be repeated enough times to reach the specified height."
msgstr ""

# type: defun
#: lispref/display.texi:3061
#, no-wrap
msgid "destroy-fringe-bitmap bitmap"
msgstr ""

# type: defun
#: lispref/display.texi:3066
msgid ""
"This function destroy the fringe bitmap identified by @var{bitmap}.  If @var"
"{bitmap} identifies a standard fringe bitmap, it actually restores the "
"standard definition of that bitmap, instead of eliminating it entirely."
msgstr ""

# type: defun
#: lispref/display.texi:3068
#, no-wrap
msgid "set-fringe-bitmap-face bitmap &optional face"
msgstr ""

# type: defun
#: lispref/display.texi:3072
msgid ""
"This sets the face for the fringe bitmap @var{bitmap} to @var{face}.  If @var"
"{face} is @code{nil}, it selects the @code{fringe} face.  The bitmap's face "
"controls the color to draw it in."
msgstr ""

# type: defun
#: lispref/display.texi:3075
msgid ""
"@var{face} is merged with the @code{fringe} face, so normally @var{face} "
"should specify only the foreground color."
msgstr ""

# type: subsection
#: lispref/display.texi:3078
#, no-wrap
msgid "The Overlay Arrow"
msgstr ""

# type: Plain text
#: lispref/display.texi:3086
msgid ""
"The @dfn{overlay arrow} is useful for directing the user's attention to a "
"particular line in a buffer.  For example, in the modes used for interface "
"to debuggers, the overlay arrow indicates the line of code about to be "
"executed.  This feature has nothing to do with @dfn{overlays} (@pxref"
"{Overlays})."
msgstr ""

# type: defvar
#: lispref/display.texi:3087
#, no-wrap
msgid "overlay-arrow-string"
msgstr ""

# type: defvar
#: lispref/display.texi:3092
msgid ""
"This variable holds the string to display to call attention to a particular "
"line, or @code{nil} if the arrow feature is not in use.  On a graphical "
"display the contents of the string are ignored; instead a glyph is displayed "
"in the fringe area to the left of the display area."
msgstr ""

# type: defvar
#: lispref/display.texi:3094
#, no-wrap
msgid "overlay-arrow-position"
msgstr ""

# type: defvar
#: lispref/display.texi:3102
msgid ""
"This variable holds a marker that indicates where to display the overlay "
"arrow.  It should point at the beginning of a line.  On a non-graphical "
"display the arrow text appears at the beginning of that line, overlaying any "
"text that would otherwise appear.  Since the arrow is usually short, and the "
"line usually begins with indentation, normally nothing significant is "
"overwritten."
msgstr ""

# type: defvar
#: lispref/display.texi:3112
msgid ""
"The overlay-arrow string is displayed in any given buffer if the value of "
"@code{overlay-arrow-position} in that buffer points into that buffer.  Thus, "
"it works to can display multiple overlay arrow strings by creating buffer-"
"local bindings of @code{overlay-arrow-position}.  However, it is usually "
"cleaner to use @code{overlay-arrow-variable-list} to achieve this result."
msgstr ""

# type: Plain text
#: lispref/display.texi:3116
msgid ""
"You can do a similar job by creating an overlay with a @code{before-string} "
"property.  @xref{Overlay Properties}."
msgstr ""

# type: Plain text
#: lispref/display.texi:3119
msgid ""
"You can define multiple overlay arrows via the variable @code{overlay-arrow-"
"variable-list}."
msgstr ""

# type: defvar
#: lispref/display.texi:3120
#, no-wrap
msgid "overlay-arrow-variable-list"
msgstr ""

# type: defvar
#: lispref/display.texi:3125
msgid ""
"This variable's value is a list of variables, each of which specifies the "
"position of an overlay arrow.  The variable @code{overlay-arrow-position} "
"has its normal meaning because it is on this list."
msgstr ""

# type: Plain text
#: lispref/display.texi:3134
msgid ""
"Each variable on this list can have properties @code{overlay-arrow-string} "
"and @code{overlay-arrow-bitmap} that specify an overlay arrow string (for "
"text-only terminals) or fringe bitmap (for graphical terminals) to display "
"at the corresponding overlay arrow position.  If either property is not set, "
"the default @code{overlay-arrow-string} or @code{overlay-arrow} fringe "
"indicator is used."
msgstr ""

# type: cindex
#: lispref/display.texi:3137
#, no-wrap
msgid "scroll bars"
msgstr ""

# type: Plain text
#: lispref/display.texi:3144
msgid ""
"Normally the frame parameter @code{vertical-scroll-bars} controls whether "
"the windows in the frame have vertical scroll bars, and whether they are on "
"the left or right.  The frame parameter @code{scroll-bar-width} specifies "
"how wide they are (@code{nil} meaning the default).  @xref{Layout "
"Parameters}."
msgstr ""

# type: defun
#: lispref/display.texi:3145
#, no-wrap
msgid "frame-current-scroll-bars &optional frame"
msgstr ""

# type: defun
#: lispref/display.texi:3153
msgid ""
"This function reports the scroll bar type settings for frame @var{frame}.  "
"The value is a cons cell @code{(@var{vertical-type} .@: @var{horizontal-"
"type})}, where @var{vertical-type} is either @code{left}, @code{right}, or "
"@code{nil} (which means no scroll bar.)  @var{horizontal-type} is meant to "
"specify the horizontal scroll bar type, but since they are not implemented, "
"it is always @code{nil}."
msgstr ""

# type: item
#: lispref/display.texi:3155 lispref/locals.texi:219
#, no-wrap
msgid "vertical-scroll-bar"
msgstr ""

# type: Plain text
#: lispref/display.texi:3161
msgid ""
"You can enable or disable scroll bars for a particular buffer, by setting "
"the variable @code{vertical-scroll-bar}.  This variable automatically "
"becomes buffer-local when set.  The possible values are @code{left}, @code"
"{right}, @code{t}, which means to use the frame's default, and @code{nil} "
"for no scroll bar."
msgstr ""

# type: Plain text
#: lispref/display.texi:3164
msgid ""
"You can also control this for individual windows.  Call the function @code"
"{set-window-scroll-bars} to specify what to do for a specific window:"
msgstr ""

# type: defun
#: lispref/display.texi:3165
#, no-wrap
msgid "set-window-scroll-bars window width &optional vertical-type horizontal-type"
msgstr ""

# type: defun
#: lispref/display.texi:3168
msgid ""
"This function sets the width and type of scroll bars for window @var{window}."
msgstr ""

# type: defun
#: lispref/display.texi:3174
msgid ""
"@var{width} specifies the scroll bar width in pixels (@code{nil} means use "
"the width specified for the frame).  @var{vertical-type} specifies whether "
"to have a vertical scroll bar and, if so, where.  The possible values are "
"@code{left}, @code{right} and @code{nil}, just like the values of the @code"
"{vertical-scroll-bars} frame parameter."
msgstr ""

# type: defun
#: lispref/display.texi:3179
msgid ""
"The argument @var{horizontal-type} is meant to specify whether and where to "
"have horizontal scroll bars, but since they are not implemented, it has no "
"effect.  If @var{window} is @code{nil}, the selected window is used."
msgstr ""

# type: defun
#: lispref/display.texi:3181
#, no-wrap
msgid "window-scroll-bars &optional window"
msgstr ""

# type: defun
#: lispref/display.texi:3189
msgid ""
"Report the width and type of scroll bars specified for @var{window}.  If @var"
"{window} is omitted or @code{nil}, the selected window is used.  The value "
"is a list of the form @code{(@var{width} @var{cols} @var{vertical-type} @var"
"{horizontal-type})}.  The value @var{width} is the value that was specified "
"for the width (which may be @code{nil}); @var{cols} is the number of columns "
"that the scroll bar actually occupies."
msgstr ""

# type: defun
#: lispref/display.texi:3191
msgid "@var{horizontal-type} is not actually meaningful."
msgstr ""

# type: Plain text
#: lispref/display.texi:3201
msgid ""
"If you don't specify these values for a window with @code{set-window-scroll-"
"bars}, the buffer-local variables @code{scroll-bar-mode} and @code{scroll-"
"bar-width} in the buffer being displayed control the window's vertical "
"scroll bars.  The function @code{set-window-buffer} examines these "
"variables.  If you change them in a buffer that is already visible in a "
"window, you can make the window take note of the new values by calling @code"
"{set-window-buffer} specifying the same buffer that is already displayed."
msgstr ""

# type: defvar
#: lispref/display.texi:3202
#, no-wrap
msgid "scroll-bar-mode"
msgstr ""

# type: defvar
#: lispref/display.texi:3207
msgid ""
"This variable, always local in all buffers, controls whether and where to "
"put scroll bars in windows displaying the buffer.  The possible values are "
"@code{nil} for no scroll bar, @code{left} to put a scroll bar on the left, "
"and @code{right} to put a scroll bar on the right."
msgstr ""

# type: defun
#: lispref/display.texi:3209
#, no-wrap
msgid "window-current-scroll-bars &optional window"
msgstr ""

# type: defun
#: lispref/display.texi:3217
msgid ""
"This function reports the scroll bar type for window @var{window}.  If @var"
"{window} is omitted or @code{nil}, the selected window is used.  The value "
"is a cons cell @code{(@var{vertical-type} .@: @var{horizontal-type})}.  "
"Unlike @code{window-scroll-bars}, this reports the scroll bar type actually "
"used, once frame defaults and @code{scroll-bar-mode} are taken into account."
msgstr ""

# type: item
#: lispref/display.texi:3219 lispref/frames.texi:499 lispref/locals.texi:198
#, no-wrap
msgid "scroll-bar-width"
msgstr ""

# type: defvar
#: lispref/display.texi:3223
msgid ""
"This variable, always local in all buffers, specifies the width of the "
"buffer's scroll bars, measured in pixels.  A value of @code{nil} means to "
"use the value specified by the frame."
msgstr ""

# type: section
#: lispref/display.texi:3226
#, no-wrap
msgid "The @code{display} Property"
msgstr ""

# type: cindex
#: lispref/display.texi:3227
#, no-wrap
msgid "display specification"
msgstr ""

# type: kindex
#: lispref/display.texi:3228
#, no-wrap
msgid "display @r{(text property)}"
msgstr ""

# type: Plain text
#: lispref/display.texi:3235
msgid ""
"The @code{display} text property (or overlay property) is used to insert "
"images into text, and also control other aspects of how text displays.  The "
"value of the @code{display} property should be a display specification, or a "
"list or vector containing several display specifications."
msgstr ""

# type: Plain text
#: lispref/display.texi:3243
msgid ""
"Some kinds of @code{display} properties specify something to display instead "
"of the text that has the property.  In this case, ``the text'' means all the "
"consecutive characters that have the same Lisp object as their @code"
"{display} property; these characters are replaced as a single unit.  By "
"contrast, characters that have similar but distinct Lisp objects as their "
"@code{display} properties are handled separately.  Here's a function that "
"illustrates this point:"
msgstr ""

# type: smallexample
#: lispref/display.texi:3253
#, no-wrap
msgid ""
"(defun foo ()\n"
"  (goto-char (point-min))\n"
"  (dotimes (i 5)\n"
"    (let ((string (concat \"A\")))\n"
"      (put-text-property (point) (1+ (point)) 'display string)\n"
"      (forward-char 1)\n"
"      (put-text-property (point) (1+ (point)) 'display string)\n"
"      (forward-char 1))))\n"
msgstr ""

# type: Plain text
#: lispref/display.texi:3264
msgid ""
"It gives each of the first ten characters in the buffer string @code{\"A\"} "
"as the @code{display} property, but they don't all get the same string.  The "
"first two characters get the same string, so they together are replaced with "
"one @samp{A}.  The next two characters get a second string, so they together "
"are replaced with one @samp{A}.  Likewise for each following pair of "
"characters.  Thus, the ten characters appear as five A's.  This function "
"would have the same results:"
msgstr ""

# type: smallexample
#: lispref/display.texi:3273
#, no-wrap
msgid ""
"(defun foo ()\n"
"  (goto-char (point-min))\n"
"  (dotimes (i 5)\n"
"    (let ((string (concat \"A\")))\n"
"      (put-text-property (point) (2+ (point)) 'display string)\n"
"      (put-text-property (point) (1+ (point)) 'display string)\n"
"      (forward-char 2))))\n"
msgstr ""

# type: Plain text
#: lispref/display.texi:3281
msgid ""
"This illustrates that what matters is the property value for each "
"character.  If two consecutive characters have the same object as the @code"
"{display} property value, it's irrelevant whether they got this property "
"from a single call to @code{put-text-property} or from two different calls."
msgstr ""

# type: Plain text
#: lispref/display.texi:3284
msgid ""
"The rest of this section describes several kinds of display specifications "
"and what they mean."
msgstr ""

# type: node
#: lispref/display.texi:3292 lispref/display.texi:3294
#, no-wrap
msgid "Specified Space"
msgstr ""

# type: menu
#: lispref/display.texi:3292
msgid "Displaying one space with a specified width."
msgstr ""

# type: node
#: lispref/display.texi:3292 lispref/display.texi:3357
#, no-wrap
msgid "Pixel Specification"
msgstr ""

# type: menu
#: lispref/display.texi:3292
msgid "Specifying space width or height in pixels."
msgstr ""

# type: node
#: lispref/display.texi:3292 lispref/display.texi:3428
#, no-wrap
msgid "Other Display Specs"
msgstr ""

# type: menu
#: lispref/display.texi:3292
msgid "Displaying an image; magnifying text; moving it"
msgstr ""

# type: menu
#: lispref/display.texi:3292
msgid "up or down on the page; adjusting the width"
msgstr ""

# type: menu
#: lispref/display.texi:3292
msgid "of spaces within text."
msgstr ""

# type: node
#: lispref/display.texi:3292 lispref/display.texi:3527
#, no-wrap
msgid "Display Margins"
msgstr ""

# type: menu
#: lispref/display.texi:3292
msgid "Displaying text or images to the side of the main text."
msgstr ""

# type: subsection
#: lispref/display.texi:3295
#, no-wrap
msgid "Specified Spaces"
msgstr ""

# type: cindex
#: lispref/display.texi:3296
#, no-wrap
msgid "spaces, specified height or width"
msgstr ""

# type: cindex
#: lispref/display.texi:3297
#, no-wrap
msgid "variable-width spaces"
msgstr ""

# type: Plain text
#: lispref/display.texi:3306
msgid ""
"To display a space of specified width and/or height, use a display "
"specification of the form @code{(space . @var{props})}, where @var{props} is "
"a property list (a list of alternating properties and values).  You can put "
"this property on one or more consecutive characters; a space of the "
"specified height and width is displayed in place of @emph{all} of those "
"characters.  These are the properties you can use in @var{props} to specify "
"the weight of the space:"
msgstr ""

# type: item
#: lispref/display.texi:3308 lispref/display.texi:3927
#, no-wrap
msgid ":width @var{width}"
msgstr ""

# type: table
#: lispref/display.texi:3313
msgid ""
"If @var{width} is an integer or floating point number, it specifies that the "
"space width should be @var{width} times the normal character width.  @var"
"{width} can also be a @dfn{pixel width} specification (@pxref{Pixel "
"Specification})."
msgstr ""

# type: item
#: lispref/display.texi:3314
#, no-wrap
msgid ":relative-width @var{factor}"
msgstr ""

# type: table
#: lispref/display.texi:3319
msgid ""
"Specifies that the width of the stretch should be computed from the first "
"character in the group of consecutive characters that have the same @code"
"{display} property.  The space width is the width of that character, "
"multiplied by @var{factor}."
msgstr ""

# type: item
#: lispref/display.texi:3320
#, no-wrap
msgid ":align-to @var{hpos}"
msgstr ""

# type: table
#: lispref/display.texi:3325
msgid ""
"Specifies that the space should be wide enough to reach @var{hpos}.  If @var"
"{hpos} is a number, it is measured in units of the normal character width.  "
"@var{hpos} can also be a @dfn{pixel width} specification (@pxref{Pixel "
"Specification})."
msgstr ""

# type: Plain text
#: lispref/display.texi:3329
msgid ""
"You should use one and only one of the above properties.  You can also "
"specify the height of the space, with these properties:"
msgstr ""

# type: item
#: lispref/display.texi:3331 lispref/display.texi:3930
#, no-wrap
msgid ":height @var{height}"
msgstr ""

# type: table
#: lispref/display.texi:3337
msgid ""
"Specifies the height of the space.  If @var{height} is an integer or "
"floating point number, it specifies that the space height should be @var"
"{height} times the normal character height.  The @var{height} may also be a "
"@dfn{pixel height} specification (@pxref{Pixel Specification})."
msgstr ""

# type: item
#: lispref/display.texi:3338
#, no-wrap
msgid ":relative-height @var{factor}"
msgstr ""

# type: table
#: lispref/display.texi:3341
msgid ""
"Specifies the height of the space, multiplying the ordinary height of the "
"text having this display specification by @var{factor}."
msgstr ""

# type: item
#: lispref/display.texi:3342 lispref/display.texi:3715
#, no-wrap
msgid ":ascent @var{ascent}"
msgstr ""

# type: table
#: lispref/display.texi:3348
msgid ""
"If the value of @var{ascent} is a non-negative number no greater than 100, "
"it specifies that @var{ascent} percent of the height of the space should be "
"considered as the ascent of the space---that is, the part above the "
"baseline.  The ascent may also be specified in pixel units with a @dfn{pixel "
"ascent} specification (@pxref{Pixel Specification})."
msgstr ""

# type: Plain text
#: lispref/display.texi:3352
msgid "Don't use both @code{:height} and @code{:relative-height} together."
msgstr ""

# type: Plain text
#: lispref/display.texi:3356
msgid ""
"The @code{:width} and @code{:align-to} properties are supported on non-"
"graphic terminals, but the other space properties in this section are not."
msgstr ""

# type: subsection
#: lispref/display.texi:3358
#, no-wrap
msgid "Pixel Specification for Spaces"
msgstr ""

# type: cindex
#: lispref/display.texi:3359
#, no-wrap
msgid "spaces, pixel specification"
msgstr ""

# type: Plain text
#: lispref/display.texi:3365
msgid ""
"The value of the @code{:width}, @code{:align-to}, @code{:height}, and @code{:"
"ascent} properties can be a special kind of expression that is evaluated "
"during redisplay.  The result of the evaluation is used as an absolute "
"number of pixels."
msgstr ""

# type: Plain text
#: lispref/display.texi:3367
msgid "The following expressions are supported:"
msgstr ""

# type: group
#: lispref/display.texi:3373
#, no-wrap
msgid ""
"  @var{expr} ::= @var{num} | (@var{num}) | @var{unit} | @var{elem} | @var{pos} | @var{image} | @var{form}\n"
"  @var{num}  ::= @var{integer} | @var{float} | @var{symbol}\n"
"  @var{unit} ::= in | mm | cm | width | height\n"
msgstr ""

# type: group
#: lispref/display.texi:3380
#, no-wrap
msgid ""
"  @var{elem} ::= left-fringe | right-fringe | left-margin | right-margin\n"
"        |  scroll-bar | text\n"
"  @var{pos}  ::= left | center | right\n"
"  @var{form} ::= (@var{num} . @var{expr}) | (@var{op} @var{expr} ...)\n"
"  @var{op}   ::= + | -\n"
msgstr ""

# type: Plain text
#: lispref/display.texi:3387
msgid ""
"The form @var{num} specifies a fraction of the default frame font height or "
"width.  The form @code{(@var{num})} specifies an absolute number of pixels.  "
"If @var{num} is a symbol, @var{symbol}, its buffer-local variable binding is "
"used."
msgstr ""

# type: Plain text
#: lispref/display.texi:3393
msgid ""
"The @code{in}, @code{mm}, and @code{cm} units specify the number of pixels "
"per inch, millimeter, and centimeter, respectively.  The @code{width} and "
"@code{height} units correspond to the default width and height of the "
"current face.  An image specification @code{image} corresponds to the width "
"or height of the image."
msgstr ""

# type: Plain text
#: lispref/display.texi:3397
msgid ""
"The @code{left-fringe}, @code{right-fringe}, @code{left-margin}, @code{right-"
"margin}, @code{scroll-bar}, and @code{text} elements specify to the width of "
"the corresponding area of the window."
msgstr ""

# type: Plain text
#: lispref/display.texi:3401
msgid ""
"The @code{left}, @code{center}, and @code{right} positions can be used with "
"@code{:align-to} to specify a position relative to the left edge, center, or "
"right edge of the text area."
msgstr ""

# type: Plain text
#: lispref/display.texi:3409
msgid ""
"Any of the above window elements (except @code{text}) can also be used with "
"@code{:align-to} to specify that the position is relative to the left edge "
"of the given area.  Once the base offset for a relative position has been "
"set (by the first occurrence of one of these symbols), further occurrences "
"of these symbols are interpreted as the width of the specified area.  For "
"example, to align to the center of the left-margin, use"
msgstr ""

# type: example
#: lispref/display.texi:3412
#, no-wrap
msgid ":align-to (+ left-margin (0.5 . left-margin))\n"
msgstr ""

# type: Plain text
#: lispref/display.texi:3417
msgid ""
"If no specific base offset is set for alignment, it is always relative to "
"the left edge of the text area.  For example, @samp{:align-to 0} in a header-"
"line aligns with the first text column in the text area."
msgstr ""

# type: Plain text
#: lispref/display.texi:3423
msgid ""
"A value of the form @code{(@var{num} . @var{expr})} stands for the product "
"of the values of @var{num} and @var{expr}.  For example, @code{(2 . in)} "
"specifies a width of 2 inches, while @code{(0.5 .  @var{image})} specifies "
"half the width (or height) of the specified image."
msgstr ""

# type: Plain text
#: lispref/display.texi:3427
msgid ""
"The form @code{(+ @var{expr} ...)} adds up the value of the expressions.  "
"The form @code{(- @var{expr} ...)} negates or subtracts the value of the "
"expressions."
msgstr ""

# type: subsection
#: lispref/display.texi:3429
#, no-wrap
msgid "Other Display Specifications"
msgstr ""

# type: Plain text
#: lispref/display.texi:3433
msgid ""
"Here are the other sorts of display specifications that you can use in the "
"@code{display} text property."
msgstr ""

# type: table
#: lispref/display.texi:3437
msgid "Display @var{string} instead of the text that has this property."
msgstr ""

# type: table
#: lispref/display.texi:3440
msgid ""
"Recursive display specifications are not supported---@var{string}'s @code"
"{display} properties, if any, are not used."
msgstr ""

# type: item
#: lispref/display.texi:3441
#, no-wrap
msgid "(image . @var{image-props})"
msgstr ""

# type: table
#: lispref/display.texi:3445
msgid ""
"This kind of display specification is an image descriptor (@pxref{Images}).  "
"When used as a display specification, it means to display the image instead "
"of the text that has the display specification."
msgstr ""

# type: item
#: lispref/display.texi:3446
#, no-wrap
msgid "(slice @var{x} @var{y} @var{width} @var{height})"
msgstr ""

# type: table
#: lispref/display.texi:3454
msgid ""
"This specification together with @code{image} specifies a @dfn{slice} (a "
"partial area) of the image to display.  The elements @var{y} and @var{x} "
"specify the top left corner of the slice, within the image; @var{width} and "
"@var{height} specify the width and height of the slice.  Integer values are "
"numbers of pixels.  A floating point number in the range 0.0--1.0 stands for "
"that fraction of the width or height of the entire image."
msgstr ""

# type: item
#: lispref/display.texi:3455
#, no-wrap
msgid "((margin nil) @var{string})"
msgstr ""

# type: table
#: lispref/display.texi:3461
msgid ""
"A display specification of this form means to display @var{string} instead "
"of the text that has the display specification, at the same position as that "
"text.  It is equivalent to using just @var{string}, but it is done as a "
"special case of marginal display (@pxref{Display Margins})."
msgstr ""

# type: item
#: lispref/display.texi:3462
#, no-wrap
msgid "(space-width @var{factor})"
msgstr ""

# type: table
#: lispref/display.texi:3468
msgid ""
"This display specification affects all the space characters within the text "
"that has the specification.  It displays all of these spaces @var{factor} "
"times as wide as normal.  The element @var{factor} should be an integer or "
"float.  Characters other than spaces are not affected at all; in particular, "
"this has no effect on tab characters."
msgstr ""

# type: item
#: lispref/display.texi:3469
#, no-wrap
msgid "(height @var{height})"
msgstr ""

# type: table
#: lispref/display.texi:3472
msgid ""
"This display specification makes the text taller or shorter.  Here are the "
"possibilities for @var{height}:"
msgstr ""

# type: code{#1}
#: lispref/display.texi:3474
#, no-wrap
msgid "(+ @var{n})"
msgstr ""

# type: table
#: lispref/display.texi:3480
msgid ""
"This means to use a font that is @var{n} steps larger.  A ``step'' is "
"defined by the set of available fonts---specifically, those that match what "
"was otherwise specified for this text, in all attributes except height.  "
"Each size for which a suitable font is available counts as another step.  "
"@var{n} should be an integer."
msgstr ""

# type: code{#1}
#: lispref/display.texi:3481
#, no-wrap
msgid "(- @var{n})"
msgstr ""

# type: table
#: lispref/display.texi:3483
msgid "This means to use a font that is @var{n} steps smaller."
msgstr ""

# type: item
#: lispref/display.texi:3484
#, no-wrap
msgid "a number, @var{factor}"
msgstr ""

# type: table
#: lispref/display.texi:3487
msgid ""
"A number, @var{factor}, means to use a font that is @var{factor} times as "
"tall as the default font."
msgstr ""

# type: item
#: lispref/display.texi:3488
#, no-wrap
msgid "a symbol, @var{function}"
msgstr ""

# type: table
#: lispref/display.texi:3491
msgid ""
"A symbol is a function to compute the height.  It is called with the current "
"height as argument, and should return the new height to use."
msgstr ""

# type: item
#: lispref/display.texi:3492
#, no-wrap
msgid "anything else, @var{form}"
msgstr ""

# type: table
#: lispref/display.texi:3496
msgid ""
"If the @var{height} value doesn't fit the previous possibilities, it is a "
"form.  Emacs evaluates it to get the new height, with the symbol @code"
"{height} bound to the current specified font height."
msgstr ""

# type: item
#: lispref/display.texi:3498
#, no-wrap
msgid "(raise @var{factor})"
msgstr ""

# type: table
#: lispref/display.texi:3501
msgid ""
"This kind of display specification raises or lowers the text it applies to, "
"relative to the baseline of the line."
msgstr ""

# type: table
#: lispref/display.texi:3506
msgid ""
"@var{factor} must be a number, which is interpreted as a multiple of the "
"height of the affected text.  If it is positive, that means to display the "
"characters raised.  If it is negative, that means to display them lower down."
msgstr ""

# type: table
#: lispref/display.texi:3510
msgid ""
"If the text also has a @code{height} display specification, that does not "
"affect the amount of raising or lowering, which is based on the faces used "
"for the text."
msgstr ""

# type: Plain text
#: lispref/display.texi:3526
msgid ""
"You can make any display specification conditional.  To do that, package it "
"in another list of the form @code{(when @var{condition} . @var{spec})}.  "
"Then the specification @var{spec} applies only when @var{condition} "
"evaluates to a non-@code{nil} value.  During the evaluation, @code{object} "
"is bound to the string or buffer having the conditional @code{display} "
"property.  @code{position} and @code{buffer-position} are bound to the "
"position within @code{object} and the buffer position where the @code"
"{display} property was found, respectively.  Both positions can be different "
"when @code{object} is a string."
msgstr ""

# type: subsection
#: lispref/display.texi:3528
#, no-wrap
msgid "Displaying in the Margins"
msgstr ""

# type: itemize
#: lispref/display.texi:3529 lispref/windows.texi:113
#, no-wrap
msgid "display margins"
msgstr ""

# type: cindex
#: lispref/display.texi:3530
#, no-wrap
msgid "margins, display"
msgstr ""

# type: Plain text
#: lispref/display.texi:3536
msgid ""
"A buffer can have blank areas called @dfn{display margins} on the left and "
"on the right.  Ordinary text never appears in these areas, but you can put "
"things into the display margins using the @code{display} property."
msgstr ""

# type: Plain text
#: lispref/display.texi:3543
msgid ""
"To put text in the left or right display margin of the window, use a display "
"specification of the form @code{(margin right-margin)} or @code{(margin left-"
"margin)} on it.  To put an image in a display margin, use that display "
"specification along with the display specification for the image.  "
"Unfortunately, there is currently no way to make text or images in the "
"margin mouse-sensitive."
msgstr ""

# type: Plain text
#: lispref/display.texi:3551
msgid ""
"If you put such a display specification directly on text in the buffer, the "
"specified margin display appears @emph{instead of} that buffer text itself.  "
"To put something in the margin @emph{in association with} certain buffer "
"text without preventing or altering the display of that text, put a @code"
"{before-string} property on the text and put the display specification on "
"the contents of the before-string."
msgstr ""

# type: Plain text
#: lispref/display.texi:3555
msgid ""
"Before the display margins can display anything, you must give them a "
"nonzero width.  The usual way to do that is to set these variables:"
msgstr ""

# type: item
#: lispref/display.texi:3556 lispref/locals.texi:153
#, no-wrap
msgid "left-margin-width"
msgstr ""

# type: defvar
#: lispref/display.texi:3559
msgid ""
"This variable specifies the width of the left margin.  It is buffer-local in "
"all buffers."
msgstr ""

# type: item
#: lispref/display.texi:3561 lispref/locals.texi:192
#, no-wrap
msgid "right-margin-width"
msgstr ""

# type: defvar
#: lispref/display.texi:3564
msgid ""
"This variable specifies the width of the right margin.  It is buffer-local "
"in all buffers."
msgstr ""

# type: Plain text
#: lispref/display.texi:3570
msgid ""
"Setting these variables does not immediately affect the window.  These "
"variables are checked when a new buffer is displayed in the window.  Thus, "
"you can make changes take effect by calling @code{set-window-buffer}."
msgstr ""

# type: Plain text
#: lispref/display.texi:3572
msgid "You can also set the margin widths immediately."
msgstr ""

# type: defun
#: lispref/display.texi:3573
#, no-wrap
msgid "set-window-margins window left &optional right"
msgstr ""

# type: defun
#: lispref/display.texi:3577
msgid ""
"This function specifies the margin widths for window @var{window}.  The "
"argument @var{left} controls the left margin and @var{right} controls the "
"right margin (default @code{0})."
msgstr ""

# type: defun
#: lispref/display.texi:3579
#, no-wrap
msgid "window-margins &optional window"
msgstr ""

# type: defun
#: lispref/display.texi:3583
msgid ""
"This function returns the left and right margins of @var{window} as a cons "
"cell of the form @code{(@var{left} . @var{right})}.  If @var{window} is @code"
"{nil}, the selected window is used."
msgstr ""

# type: cindex
#: lispref/display.texi:3587
#, no-wrap
msgid "images in buffers"
msgstr ""

# type: Plain text
#: lispref/display.texi:3592
msgid ""
"To display an image in an Emacs buffer, you must first create an image "
"descriptor, then use it as a display specifier in the @code{display} "
"property of text that is displayed (@pxref{Display Property})."
msgstr ""

# type: Plain text
#: lispref/display.texi:3599
msgid ""
"Emacs is usually able to display images when it is run on a graphical "
"terminal.  Images cannot be displayed in a text terminal, on certain "
"graphical terminals that lack the support for this, or if Emacs is compiled "
"without image support.  You can use the function @code{display-images-p} to "
"determine if images can in principle be displayed (@pxref{Display Feature "
"Testing})."
msgstr ""

# type: Plain text
#: lispref/display.texi:3606
msgid ""
"Emacs can display a number of different image formats; some of them are "
"supported only if particular support libraries are installed on your "
"machine.  In some environments, Emacs can load image libraries on demand; if "
"so, the variable @code{image-library-alist} can be used to modify the set of "
"known names for these dynamic libraries (though it is not possible to add "
"new image formats)."
msgstr ""

# type: Plain text
#: lispref/display.texi:3612
msgid ""
"The supported image formats include XBM, XPM (this requires the libraries "
"@code{libXpm} version 3.4k and @code{libz}), GIF (requiring @code{libungif} "
"4.1.0), PostScript, PBM, JPEG (requiring the @code{libjpeg} library version "
"v6a), TIFF (requiring @code{libtiff} v3.4), and PNG (requiring @code{libpng} "
"1.0.2)."
msgstr ""

# type: Plain text
#: lispref/display.texi:3616
msgid ""
"You specify one of these formats with an image type symbol.  The image type "
"symbols are @code{xbm}, @code{xpm}, @code{gif}, @code{postscript}, @code"
"{pbm}, @code{jpeg}, @code{tiff}, and @code{png}."
msgstr ""

# type: defvar
#: lispref/display.texi:3617
#, no-wrap
msgid "image-types"
msgstr ""

# type: defvar
#: lispref/display.texi:3623
msgid ""
"This variable contains a list of those image type symbols that are "
"potentially supported in the current configuration.  @emph{Potentially} here "
"means that Emacs knows about the image types, not necessarily that they can "
"be loaded (they could depend on unavailable dynamic libraries, for example)."
msgstr ""

# type: defvar
#: lispref/display.texi:3626
msgid ""
"To know which image types are really available, use @code{image-type-"
"available-p}."
msgstr ""

# type: defvar
#: lispref/display.texi:3628
#, no-wrap
msgid "image-library-alist"
msgstr ""

# type: defvar
#: lispref/display.texi:3631
msgid ""
"This in an alist of image types vs external libraries needed to display them."
msgstr ""

# type: defvar
#: lispref/display.texi:3636
msgid ""
"Each element is a list @code{(@var{image-type} @var{library}...)}, where the "
"car is a supported image format from @code{image-types}, and the rest are "
"strings giving alternate filenames for the corresponding external libraries "
"to load."
msgstr ""

# type: defvar
#: lispref/display.texi:3641
msgid ""
"Emacs tries to load the libraries in the order they appear on the list; if "
"none is loaded, the running session of Emacs won't support the image type.  "
"@code{pbm} and @code{xbm} don't need to be listed; they're always supported."
msgstr ""

# type: defvar
#: lispref/display.texi:3644
msgid ""
"This variable is ignored if the image libraries are statically linked into "
"Emacs."
msgstr ""

# type: defun
#: lispref/display.texi:3646
#, no-wrap
msgid "image-type-available-p type"
msgstr "image-type-available-p type"

# type: findex
#: lispref/display.texi:3647
#, no-wrap
msgid "image-type-available-p"
msgstr "image-type-available-p"

# type: defun
#: lispref/display.texi:3653
msgid ""
"This function returns non-@code{nil} if image type @var{type} is available, "
"i.e., if images of this type can be loaded and displayed in Emacs.  @var"
"{type} should be one of the types contained in @code{image-types}."
msgstr ""

# type: defun
#: lispref/display.texi:3657
msgid ""
"For image types whose support libraries are statically linked, this function "
"always returns @code{t}; for other image types, it returns @code{t} if the "
"dynamic library could be loaded, @code{nil} otherwise."
msgstr ""

# type: subsection
#: lispref/display.texi:3669 lispref/display.texi:3671
#: lispref/display.texi:3672
#, no-wrap
msgid "Image Descriptors"
msgstr ""

# type: menu
#: lispref/display.texi:3669
msgid "How to specify an image for use in @code{:display}."
msgstr ""

# type: subsection
#: lispref/display.texi:3669 lispref/display.texi:3875
#: lispref/display.texi:3876
#, no-wrap
msgid "XBM Images"
msgstr ""

# type: menu
#: lispref/display.texi:3669
msgid "Special features for XBM format."
msgstr ""

# type: subsection
#: lispref/display.texi:3669 lispref/display.texi:3934
#: lispref/display.texi:3935
#, no-wrap
msgid "XPM Images"
msgstr ""

# type: menu
#: lispref/display.texi:3669
msgid "Special features for XPM format."
msgstr ""

# type: subsection
#: lispref/display.texi:3669 lispref/display.texi:3950
#: lispref/display.texi:3951
#, no-wrap
msgid "GIF Images"
msgstr ""

# type: menu
#: lispref/display.texi:3669
msgid "Special features for GIF format."
msgstr ""

# type: subsection
#: lispref/display.texi:3669 lispref/display.texi:3986
#: lispref/display.texi:3987
#, no-wrap
msgid "PostScript Images"
msgstr ""

# type: menu
#: lispref/display.texi:3669
msgid "Special features for PostScript format."
msgstr ""

# type: subsection
#: lispref/display.texi:3669 lispref/display.texi:4017
#: lispref/display.texi:4018
#, no-wrap
msgid "Other Image Types"
msgstr ""

# type: menu
#: lispref/display.texi:3669
msgid "Various other formats are supported."
msgstr ""

# type: subsection
#: lispref/display.texi:3669 lispref/display.texi:4045
#: lispref/display.texi:4046
#, no-wrap
msgid "Defining Images"
msgstr ""

# type: menu
#: lispref/display.texi:3669
msgid "Convenient ways to define an image for later use."
msgstr ""

# type: subsection
#: lispref/display.texi:3669 lispref/display.texi:4173
#: lispref/display.texi:4174
#, no-wrap
msgid "Showing Images"
msgstr ""

# type: menu
#: lispref/display.texi:3669
msgid "Convenient ways to display an image once it is defined."
msgstr ""

# type: subsection
#: lispref/display.texi:3669 lispref/display.texi:4274
#: lispref/display.texi:4275
#, no-wrap
msgid "Image Cache"
msgstr ""

# type: menu
#: lispref/display.texi:3669
msgid "Internal mechanisms of image display."
msgstr ""

# type: cindex
#: lispref/display.texi:3673
#, no-wrap
msgid "image descriptor"
msgstr ""

# type: Plain text
#: lispref/display.texi:3680
msgid ""
"An image description is a list of the form @code{(image . @var{props})}, "
"where @var{props} is a property list containing alternating keyword symbols "
"(symbols whose names start with a colon) and their values.  You can use any "
"Lisp object as a property, but the only properties that have any special "
"meaning are certain symbols, all of them keywords."
msgstr ""

# type: Plain text
#: lispref/display.texi:3685
msgid ""
"Every image descriptor must contain the property @code{:type @var{type}} to "
"specify the format of the image.  The value of @var{type} should be an image "
"type symbol; for example, @code{xpm} for an image in XPM format."
msgstr ""

# type: Plain text
#: lispref/display.texi:3688
msgid ""
"Here is a list of other properties that are meaningful for all image types:"
msgstr ""

# type: item
#: lispref/display.texi:3690 lispref/os.texi:1834
#, no-wrap
msgid ":file @var{file}"
msgstr ""

# type: table
#: lispref/display.texi:3694
msgid ""
"The @code{:file} property says to load the image from file @var{file}.  If "
"@var{file} is not an absolute file name, it is expanded in @code{data-"
"directory}."
msgstr ""

# type: item
#: lispref/display.texi:3695 lispref/display.texi:3903 lispref/os.texi:1839
#, no-wrap
msgid ":data @var{data}"
msgstr ""

# type: table
#: lispref/display.texi:3700
msgid ""
"The @code{:data} property says the actual contents of the image.  Each image "
"must use either @code{:data} or @code{:file}, but not both.  For most image "
"types, the value of the @code{:data} property should be a string containing "
"the image data; we recommend using a unibyte string."
msgstr ""

# type: table
#: lispref/display.texi:3706
msgid ""
"Before using @code{:data}, look for further information in the section below "
"describing the specific image format.  For some image types, @code{:data} "
"may not be supported; for some, it allows other data types; for some, @code{:"
"data} alone is not enough, so you need to use other image properties along "
"with @code{:data}."
msgstr ""

# type: item
#: lispref/display.texi:3707
#, no-wrap
msgid ":margin @var{margin}"
msgstr ""

# type: table
#: lispref/display.texi:3714
msgid ""
"The @code{:margin} property specifies how many pixels to add as an extra "
"margin around the image.  The value, @var{margin}, must be a non-negative "
"number, or a pair @code{(@var{x} . @var{y})} of such numbers.  If it is a "
"pair, @var{x} specifies how many pixels to add horizontally, and @var{y} "
"specifies how many pixels to add vertically.  If @code{:margin} is not "
"specified, the default is zero."
msgstr ""

# type: table
#: lispref/display.texi:3720
msgid ""
"The @code{:ascent} property specifies the amount of the image's height to "
"use for its ascent---that is, the part above the baseline.  The value, @var"
"{ascent}, must be a number in the range 0 to 100, or the symbol @code"
"{center}."
msgstr ""

# type: table
#: lispref/display.texi:3723
msgid ""
"If @var{ascent} is a number, that percentage of the image's height is used "
"for its ascent."
msgstr ""

# type: table
#: lispref/display.texi:3728
msgid ""
"If @var{ascent} is @code{center}, the image is vertically centered around a "
"centerline which would be the vertical centerline of text drawn at the "
"position of the image, in the manner specified by the text properties and "
"overlays that apply to the image."
msgstr ""

# type: table
#: lispref/display.texi:3730
msgid "If this property is omitted, it defaults to 50."
msgstr ""

# type: item
#: lispref/display.texi:3731
#, no-wrap
msgid ":relief @var{relief}"
msgstr ""

# type: table
#: lispref/display.texi:3737
msgid ""
"The @code{:relief} property, if non-@code{nil}, adds a shadow rectangle "
"around the image.  The value, @var{relief}, specifies the width of the "
"shadow lines, in pixels.  If @var{relief} is negative, shadows are drawn so "
"that the image appears as a pressed button; otherwise, it appears as an "
"unpressed button."
msgstr ""

# type: item
#: lispref/display.texi:3738
#, no-wrap
msgid ":conversion @var{algorithm}"
msgstr ""

# type: table
#: lispref/display.texi:3742
msgid ""
"The @code{:conversion} property, if non-@code{nil}, specifies a conversion "
"algorithm that should be applied to the image before it is displayed; the "
"value, @var{algorithm}, specifies which algorithm."
msgstr ""

# type: item
#: lispref/display.texi:3744
#, no-wrap
msgid "laplace"
msgstr ""

# type: itemx
#: lispref/display.texi:3745
#, no-wrap
msgid "emboss"
msgstr ""

# type: table
#: lispref/display.texi:3750
msgid ""
"Specifies the Laplace edge detection algorithm, which blurs out small "
"differences in color while highlighting larger differences.  People "
"sometimes consider this useful for displaying the image for a ``disabled'' "
"button."
msgstr ""

# type: item
#: lispref/display.texi:3751
#, no-wrap
msgid "(edge-detection :matrix @var{matrix} :color-adjust @var{adjust})"
msgstr ""

# type: table
#: lispref/display.texi:3760
msgid ""
"Specifies a general edge-detection algorithm.  @var{matrix} must be either a "
"nine-element list or a nine-element vector of numbers.  A pixel at position "
"@math{x/y} in the transformed image is computed from original pixels around "
"that position.  @var{matrix} specifies, for each pixel in the neighborhood "
"of @math{x/y}, a factor with which that pixel will influence the transformed "
"pixel; element @math{0} specifies the factor for the pixel at @math{x-1/y-"
"1}, element @math{1} the factor for the pixel at @math{x/y-1} etc., as shown "
"below:"
msgstr ""

# type: tex
#: lispref/display.texi:3765
#, no-wrap
msgid ""
"$$\\pmatrix{x-1/y-1 & x/y-1  & x+1/y-1 \\cr\n"
"   x-1/y  &   x/y &    x+1/y \\cr\n"
"   x-1/y+1&   x/y+1 &  x+1/y+1 \\cr}$$\n"
msgstr ""

# type: display
#: lispref/display.texi:3772
#, no-wrap
msgid ""
"  (x-1/y-1  x/y-1  x+1/y-1\n"
"   x-1/y    x/y    x+1/y\n"
"   x-1/y+1  x/y+1  x+1/y+1)\n"
msgstr ""

# type: table
#: lispref/display.texi:3779
msgid ""
"The resulting pixel is computed from the color intensity of the color "
"resulting from summing up the RGB values of surrounding pixels, multiplied "
"by the specified factors, and dividing that sum by the sum of the factors' "
"absolute values."
msgstr ""

# type: table
#: lispref/display.texi:3781
msgid "Laplace edge-detection currently uses a matrix of"
msgstr ""

# type: tex
#: lispref/display.texi:3786
#, no-wrap
msgid ""
"$$\\pmatrix{1 & 0 & 0 \\cr\n"
"   0&  0 &  0 \\cr\n"
"   9 & 9 & -1 \\cr}$$\n"
msgstr ""

# type: display
#: lispref/display.texi:3793
#, no-wrap
msgid ""
"  (1  0  0\n"
"   0  0  0\n"
"   9  9 -1)\n"
msgstr ""

# type: table
#: lispref/display.texi:3797
msgid "Emboss edge-detection uses a matrix of"
msgstr ""

# type: tex
#: lispref/display.texi:3802
#, no-wrap
msgid ""
"$$\\pmatrix{ 2 & -1 &  0 \\cr\n"
"   -1 &  0 &  1 \\cr\n"
"    0  & 1 & -2 \\cr}$$\n"
msgstr ""

# type: display
#: lispref/display.texi:3809
#, no-wrap
msgid ""
"  ( 2 -1  0\n"
"   -1  0  1\n"
"    0  1 -2)\n"
msgstr ""

# type: table
#: lispref/display.texi:3814
msgid "Specifies transforming the image so that it looks ``disabled.''"
msgstr ""

# type: item
#: lispref/display.texi:3816
#, no-wrap
msgid ":mask @var{mask}"
msgstr ""

# type: table
#: lispref/display.texi:3825
msgid ""
"If @var{mask} is @code{heuristic} or @code{(heuristic @var{bg})}, build a "
"clipping mask for the image, so that the background of a frame is visible "
"behind the image.  If @var{bg} is not specified, or if @var{bg} is @code{t}, "
"determine the background color of the image by looking at the four corners "
"of the image, assuming the most frequently occurring color from the corners "
"is the background color of the image.  Otherwise, @var{bg} must be a list "
"@code{(@var{red} @var{green} @var{blue})} specifying the color to assume for "
"the background of the image."
msgstr ""

# type: table
#: lispref/display.texi:3829
msgid ""
"If @var{mask} is @code{nil}, remove a mask from the image, if it has one.  "
"Images in some formats include a mask which can be removed by specifying "
"@code{:mask nil}."
msgstr ""

# type: item
#: lispref/display.texi:3830
#, no-wrap
msgid ":pointer @var{shape}"
msgstr ""

# type: table
#: lispref/display.texi:3833
msgid ""
"This specifies the pointer shape when the mouse pointer is over this image.  "
"@xref{Pointer Shape}, for available pointer shapes."
msgstr ""

# type: item
#: lispref/display.texi:3834
#, no-wrap
msgid ":map @var{map}"
msgstr ""

# type: table
#: lispref/display.texi:3836
msgid "This associates an image map of @dfn{hot spots} with this image."
msgstr ""

# type: table
#: lispref/display.texi:3840
msgid ""
"An image map is an alist where each element has the format @code{(@var{area} "
"@var{id} @var{plist})}.  An @var{area} is specified as either a rectangle, a "
"circle, or a polygon."
msgstr ""

# type: table
#: lispref/display.texi:3845
msgid ""
"A rectangle is a cons @code{(rect . ((@var{x0} . @var{y0}) . (@var{x1} . @var"
"{y1})))} which specifies the pixel coordinates of the upper left and bottom "
"right corners of the rectangle area."
msgstr ""

# type: table
#: lispref/display.texi:3850
msgid ""
"A circle is a cons @code{(circle . ((@var{x0} . @var{y0}) . @var{r}))} which "
"specifies the center and the radius of the circle; @var{r} may be a float or "
"integer."
msgstr ""

# type: table
#: lispref/display.texi:3854
msgid ""
"A polygon is a cons @code{(poly . [@var{x0} @var{y0} @var{x1} @var"
"{y1} ...])} where each pair in the vector describes one corner in the "
"polygon."
msgstr ""

# type: table
#: lispref/display.texi:3861
msgid ""
"When the mouse pointer lies on a hot-spot area of an image, the @var{plist} "
"of that hot-spot is consulted; if it contains a @code{help-echo} property, "
"that defines a tool-tip for the hot-spot, and if it contains a @code"
"{pointer} property, that defines the shape of the mouse cursor when it is on "
"the hot-spot.  @xref{Pointer Shape}, for available pointer shapes."
msgstr ""

# type: table
#: lispref/display.texi:3866
msgid ""
"When you click the mouse when the mouse pointer is over a hot-spot, an event "
"is composed by combining the @var{id} of the hot-spot with the mouse event; "
"for instance, @code{[area4 mouse-1]} if the hot-spot's @var{id} is @code"
"{area4}."
msgstr ""

# type: defun
#: lispref/display.texi:3868
#, no-wrap
msgid "image-mask-p spec &optional frame"
msgstr ""

# type: defun
#: lispref/display.texi:3873
msgid ""
"This function returns @code{t} if image @var{spec} has a mask bitmap.  @var"
"{frame} is the frame on which the image will be displayed.  @var{frame} @code"
"{nil} or omitted means to use the selected frame (@pxref{Input Focus})."
msgstr ""

# type: cindex
#: lispref/display.texi:3877
#, no-wrap
msgid "XBM"
msgstr ""

# type: Plain text
#: lispref/display.texi:3882
msgid ""
"To use XBM format, specify @code{xbm} as the image type.  This image format "
"doesn't require an external library, so images of this type are always "
"supported."
msgstr ""

# type: Plain text
#: lispref/display.texi:3884
msgid ""
"Additional image properties supported for the @code{xbm} image type are:"
msgstr ""

# type: item
#: lispref/display.texi:3886 lispref/display.texi:4026
#, no-wrap
msgid ":foreground @var{foreground}"
msgstr ""

# type: table
#: lispref/display.texi:3891 lispref/display.texi:4031
msgid ""
"The value, @var{foreground}, should be a string specifying the image "
"foreground color, or @code{nil} for the default color.  This color is used "
"for each pixel in the XBM that is 1.  The default is the frame's foreground "
"color."
msgstr ""

# type: item
#: lispref/display.texi:3892 lispref/display.texi:4032
#, no-wrap
msgid ":background @var{background}"
msgstr ""

# type: table
#: lispref/display.texi:3897 lispref/display.texi:4037
msgid ""
"The value, @var{background}, should be a string specifying the image "
"background color, or @code{nil} for the default color.  This color is used "
"for each pixel in the XBM that is 0.  The default is the frame's background "
"color."
msgstr ""

# type: Plain text
#: lispref/display.texi:3901
msgid ""
"If you specify an XBM image using data within Emacs instead of an external "
"file, use the following three properties:"
msgstr ""

# type: table
#: lispref/display.texi:3906
msgid ""
"The value, @var{data}, specifies the contents of the image.  There are three "
"formats you can use for @var{data}:"
msgstr ""

# type: itemize
#: lispref/display.texi:3911
msgid ""
"A vector of strings or bool-vectors, each specifying one line of the image.  "
"Do specify @code{:height} and @code{:width}."
msgstr ""

# type: itemize
#: lispref/display.texi:3917
msgid ""
"A string containing the same byte sequence as an XBM file would contain.  "
"You must not specify @code{:height} and @code{:width} in this case, because "
"omitting them is what indicates the data has the format of an XBM file.  The "
"file contents specify the height and width of the image."
msgstr ""

# type: itemize
#: lispref/display.texi:3925
msgid ""
"A string or a bool-vector containing the bits of the image (plus perhaps "
"some extra bits at the end that will not be used).  It should contain at "
"least @var{width} * @code{height} bits.  In this case, you must specify @code"
"{:height} and @code{:width}, both to indicate that the string contains just "
"the bits rather than a whole XBM file, and to specify the size of the image."
msgstr ""

# type: table
#: lispref/display.texi:3929
msgid "The value, @var{width}, specifies the width of the image, in pixels."
msgstr ""

# type: table
#: lispref/display.texi:3932
msgid "The value, @var{height}, specifies the height of the image, in pixels."
msgstr ""

# type: cindex
#: lispref/display.texi:3936
#, no-wrap
msgid "XPM"
msgstr ""

# type: Plain text
#: lispref/display.texi:3941
msgid ""
"To use XPM format, specify @code{xpm} as the image type.  The additional "
"image property @code{:color-symbols} is also meaningful with the @code{xpm} "
"image type:"
msgstr ""

# type: item
#: lispref/display.texi:3943
#, no-wrap
msgid ":color-symbols @var{symbols}"
msgstr ""

# type: table
#: lispref/display.texi:3948
msgid ""
"The value, @var{symbols}, should be an alist whose elements have the form "
"@code{(@var{name} . @var{color})}.  In each element, @var{name} is the name "
"of a color as it appears in the image file, and @var{color} specifies the "
"actual color to use for displaying that name."
msgstr ""

# type: cindex
#: lispref/display.texi:3952
#, no-wrap
msgid "GIF"
msgstr ""

# type: Plain text
#: lispref/display.texi:3955
msgid "For GIF images, specify image type @code{gif}."
msgstr ""

# type: item
#: lispref/display.texi:3957
#, no-wrap
msgid ":index @var{index}"
msgstr ""

# type: table
#: lispref/display.texi:3962
msgid ""
"You can use @code{:index} to specify one image from a GIF file that contains "
"more than one image.  This property specifies use of image number @var"
"{index} from the file.  If the GIF file doesn't contain an image with index "
"@var{index}, the image displays as a hollow box."
msgstr ""

# type: ignore
#: lispref/display.texi:3969
#, no-wrap
msgid ""
"This could be used to implement limited support for animated GIFs.\n"
"For example, the following function displays a multi-image GIF file\n"
"at point-min in the current buffer, switching between sub-images\n"
"every 0.1 seconds.\n"
"\n"
msgstr ""

# type: ignore
#: lispref/display.texi:3973
#, no-wrap
msgid ""
"(defun show-anim (file max)\n"
"  \"Display multi-image GIF file FILE which contains MAX subimages.\"\n"
"  (display-anim (current-buffer) file 0 max t))\n"
"\n"
msgstr ""

# type: ignore
#: lispref/display.texi:3984
#, no-wrap
msgid ""
"(defun display-anim (buffer file idx max first-time)\n"
"  (when (= idx max)\n"
"    (setq idx 0))\n"
"  (let ((img (create-image file nil :image idx)))\n"
"    (save-excursion\n"
"      (set-buffer buffer)\n"
"      (goto-char (point-min))\n"
"      (unless first-time (delete-char 1))\n"
"      (insert-image img))\n"
"    (run-with-timer 0.1 nil 'display-anim buffer file (1+ idx) max nil)))\n"
msgstr ""

# type: cindex
#: lispref/display.texi:3988
#, no-wrap
msgid "postscript images"
msgstr ""

# type: Plain text
#: lispref/display.texi:3993
msgid ""
"To use PostScript for an image, specify image type @code{postscript}.  This "
"works only if you have Ghostscript installed.  You must always use these "
"three properties:"
msgstr ""

# type: item
#: lispref/display.texi:3995
#, no-wrap
msgid ":pt-width @var{width}"
msgstr ""

# type: table
#: lispref/display.texi:3998
msgid ""
"The value, @var{width}, specifies the width of the image measured in points "
"(1/72 inch).  @var{width} must be an integer."
msgstr ""

# type: item
#: lispref/display.texi:3999
#, no-wrap
msgid ":pt-height @var{height}"
msgstr ""

# type: table
#: lispref/display.texi:4002
msgid ""
"The value, @var{height}, specifies the height of the image in points (1/72 "
"inch).  @var{height} must be an integer."
msgstr ""

# type: item
#: lispref/display.texi:4003
#, no-wrap
msgid ":bounding-box @var{box}"
msgstr ""

# type: table
#: lispref/display.texi:4007
msgid ""
"The value, @var{box}, must be a list or vector of four integers, which "
"specifying the bounding box of the PostScript image, analogous to the @samp"
"{BoundingBox} comment found in PostScript files."
msgstr ""

# type: example
#: lispref/display.texi:4010
#, no-wrap
msgid "%%BoundingBox: 22 171 567 738\n"
msgstr ""

# type: Plain text
#: lispref/display.texi:4016
msgid ""
"Displaying PostScript images from Lisp data is not currently implemented, "
"but it may be implemented by the time you read this.  See the @file{etc/"
"NEWS} file to make sure."
msgstr ""

# type: cindex
#: lispref/display.texi:4019
#, no-wrap
msgid "PBM"
msgstr ""

# type: Plain text
#: lispref/display.texi:4024
msgid ""
"For PBM images, specify image type @code{pbm}.  Color, gray-scale and "
"monochromatic images are supported.  For mono PBM images, two additional "
"image properties are supported."
msgstr ""

# type: Plain text
#: lispref/display.texi:4040
msgid "For JPEG images, specify image type @code{jpeg}."
msgstr ""

# type: Plain text
#: lispref/display.texi:4042
msgid "For TIFF images, specify image type @code{tiff}."
msgstr ""

# type: Plain text
#: lispref/display.texi:4044
msgid "For PNG images, specify image type @code{png}."
msgstr ""

# type: Plain text
#: lispref/display.texi:4050
msgid ""
"The functions @code{create-image}, @code{defimage} and @code{find-image} "
"provide convenient ways to create image descriptors."
msgstr ""

# type: defun
#: lispref/display.texi:4051
#, no-wrap
msgid "create-image file-or-data &optional type data-p &rest props"
msgstr ""

# type: defun
#: lispref/display.texi:4056
msgid ""
"This function creates and returns an image descriptor which uses the data in "
"@var{file-or-data}.  @var{file-or-data} can be a file name or a string "
"containing the image data; @var{data-p} should be @code{nil} for the former "
"case, non-@code{nil} for the latter case."
msgstr ""

# type: defun
#: lispref/display.texi:4061
msgid ""
"The optional argument @var{type} is a symbol specifying the image type.  If "
"@var{type} is omitted or @code{nil}, @code{create-image} tries to determine "
"the image type from the file's first few bytes, or else from the file's name."
msgstr ""

# type: defun
#: lispref/display.texi:4064
msgid ""
"The remaining arguments, @var{props}, specify additional image properties---"
"for example,"
msgstr ""

# type: example
#: lispref/display.texi:4067
#, no-wrap
msgid "(create-image \"foo.xpm\" 'xpm nil :heuristic-mask t)\n"
msgstr ""

# type: defun
#: lispref/display.texi:4071
msgid ""
"The function returns @code{nil} if images of this type are not supported.  "
"Otherwise it returns an image descriptor."
msgstr ""

# type: defmac
#: lispref/display.texi:4073
#, no-wrap
msgid "defimage symbol specs &optional doc"
msgstr ""

# type: defmac
#: lispref/display.texi:4077
msgid ""
"This macro defines @var{symbol} as an image name.  The arguments @var{specs} "
"is a list which specifies how to display the image.  The third argument, @var"
"{doc}, is an optional documentation string."
msgstr ""

# type: defmac
#: lispref/display.texi:4085
msgid ""
"Each argument in @var{specs} has the form of a property list, and each one "
"should specify at least the @code{:type} property and either the @code{:"
"file} or the @code{:data} property.  The value of @code{:type} should be a "
"symbol specifying the image type, the value of @code{:file} is the file to "
"load the image from, and the value of @code{:data} is a string containing "
"the actual image data.  Here is an example:"
msgstr ""

# type: example
#: lispref/display.texi:4090
#, no-wrap
msgid ""
"(defimage test-image\n"
"  ((:type xpm :file \"~/test1.xpm\")\n"
"   (:type xbm :file \"~/test1.xbm\")))\n"
msgstr ""

# type: defmac
#: lispref/display.texi:4096
msgid ""
"@code{defimage} tests each argument, one by one, to see if it is usable---"
"that is, if the type is supported and the file exists.  The first usable "
"argument is used to make an image descriptor which is stored in @var{symbol}."
msgstr ""

# type: defmac
#: lispref/display.texi:4099
msgid ""
"If none of the alternatives will work, then @var{symbol} is defined as @code"
"{nil}."
msgstr ""

# type: defun
#: lispref/display.texi:4101
#, no-wrap
msgid "find-image specs"
msgstr ""

# type: defun
#: lispref/display.texi:4104
msgid ""
"This function provides a convenient way to find an image satisfying one of a "
"list of image specifications @var{specs}."
msgstr ""

# type: defun
#: lispref/display.texi:4114
msgid ""
"Each specification in @var{specs} is a property list with contents depending "
"on image type.  All specifications must at least contain the properties @code"
"{:type @var{type}} and either @w{@code{:file @var{file}}} or @w{@code{:data "
"@var{DATA}}}, where @var{type} is a symbol specifying the image type, e.g.@: "
"@code{xbm}, @var{file} is the file to load the image from, and @var{data} is "
"a string containing the actual image data.  The first specification in the "
"list whose @var{type} is supported, and @var{file} exists, is used to "
"construct the image specification to be returned.  If no specification is "
"satisfied, @code{nil} is returned."
msgstr ""

# type: defun
#: lispref/display.texi:4116
msgid "The image is looked for in @code{image-load-path}."
msgstr ""

# type: defvar
#: lispref/display.texi:4118
#, no-wrap
msgid "image-load-path"
msgstr ""

# type: defvar
#: lispref/display.texi:4124
msgid ""
"This variable's value is a list of locations in which to search for image "
"files.  If an element is a string or a variable symbol whose value is a "
"string, the string is taken to be the name of a directory to search.  If an "
"element is a variable symbol whose value is a list, that is taken to be a "
"list of directory names to search."
msgstr ""

# type: defvar
#: lispref/display.texi:4133
msgid ""
"The default is to search in the @file{images} subdirectory of the directory "
"specified by @code{data-directory}, then the directory specified by @code"
"{data-directory}, and finally in the directories in @code{load-path}.  "
"Subdirectories are not automatically included in the search, so if you put "
"an image file in a subdirectory, you have to supply the subdirectory name "
"explicitly.  For example, to find the image @file{images/foo/bar.xpm} within "
"@code{data-directory}, you should specify the image as follows:"
msgstr ""

# type: example
#: lispref/display.texi:4136
#, no-wrap
msgid "(defimage foo-image '((:type xpm :file \"foo/bar.xpm\")))\n"
msgstr ""

# type: defun
#: lispref/display.texi:4139
#, no-wrap
msgid "image-load-path-for-library library image &optional path no-error"
msgstr ""

# type: defun
#: lispref/display.texi:4142
msgid ""
"This function returns a suitable search path for images used by the Lisp "
"package @var{library}."
msgstr ""

# type: defun
#: lispref/display.texi:4149
msgid ""
"The function searches for @var{image} first using @code{image-load-path}, "
"excluding @file{@code{data-directory}/images}, and then in @code{load-path}, "
"followed by a path suitable for @var{library}, which includes @file{../../"
"etc/images} and @file{../etc/images} relative to the library file itself, "
"and finally in @file{@code{data-directory}/images}."
msgstr ""

# type: defun
#: lispref/display.texi:4154
msgid ""
"Then this function returns a list of directories which contains first the "
"directory in which @var{image} was found, followed by the value of @code"
"{load-path}.  If @var{path} is given, it is used instead of @code{load-path}."
msgstr ""

# type: defun
#: lispref/display.texi:4158
msgid ""
"If @var{no-error} is non-@code{nil} and a suitable path can't be found, "
"don't signal an error.  Instead, return a list of directories as before, "
"except that @code{nil} appears in place of the image directory."
msgstr ""

# type: defun
#: lispref/display.texi:4161
msgid ""
"Here is an example that uses a common idiom to provide compatibility with "
"versions of Emacs that lack the variable @code{image-load-path}:"
msgstr ""

# type: example
#: lispref/display.texi:4170
#, no-wrap
msgid ""
"(defvar image-load-path) ; shush compiler\n"
"(let* ((load-path (image-load-path-for-library\n"
"                        \"mh-e\" \"mh-logo.xpm\"))\n"
"       (image-load-path (cons (car load-path)\n"
"                              (when (boundp 'image-load-path)\n"
"                                image-load-path))))\n"
"  (mh-tool-bar-folder-buttons-init))\n"
msgstr ""

# type: Plain text
#: lispref/display.texi:4179
msgid ""
"You can use an image descriptor by setting up the @code{display} property "
"yourself, but it is easier to use the functions in this section."
msgstr ""

# type: defun
#: lispref/display.texi:4180
#, no-wrap
msgid "insert-image image &optional string area slice"
msgstr ""

# type: defun
#: lispref/display.texi:4187
msgid ""
"This function inserts @var{image} in the current buffer at point.  The value "
"@var{image} should be an image descriptor; it could be a value returned by "
"@code{create-image}, or the value of a symbol defined with @code{defimage}.  "
"The argument @var{string} specifies the text to put in the buffer to hold "
"the image.  If it is omitted or @code{nil}, @code{insert-image} uses @code"
"{\" \"} by default."
msgstr ""

# type: defun
#: lispref/display.texi:4193 lispref/display.texi:4229
msgid ""
"The argument @var{area} specifies whether to put the image in a margin.  If "
"it is @code{left-margin}, the image appears in the left margin; @code{right-"
"margin} specifies the right margin.  If @var{area} is @code{nil} or omitted, "
"the image is displayed at point within the buffer's text."
msgstr ""

# type: defun
#: lispref/display.texi:4202
msgid ""
"The argument @var{slice} specifies a slice of the image to insert.  If @var"
"{slice} is @code{nil} or omitted the whole image is inserted.  Otherwise, "
"@var{slice} is a list @code{(@var{x} @var{y} @var{width} @var{height})} "
"which specifies the @var{x} and @var{y} positions and @var{width} and @var"
"{height} of the image area to insert.  Integer values are in units of "
"pixels.  A floating point number in the range 0.0--1.0 stands for that "
"fraction of the width or height of the entire image."
msgstr ""

# type: defun
#: lispref/display.texi:4206
msgid ""
"Internally, this function inserts @var{string} in the buffer, and gives it a "
"@code{display} property which specifies @var{image}.  @xref{Display "
"Property}."
msgstr ""

# type: defun
#: lispref/display.texi:4208
#, no-wrap
msgid "insert-sliced-image image &optional string area rows cols"
msgstr ""

# type: defun
#: lispref/display.texi:4212
msgid ""
"This function inserts @var{image} in the current buffer at point, like @code"
"{insert-image}, but splits the image into @var{rows}x@var{cols} equally "
"sized slices."
msgstr ""

# type: defun
#: lispref/display.texi:4214
#, no-wrap
msgid "put-image image pos &optional string area"
msgstr ""

# type: defun
#: lispref/display.texi:4220
msgid ""
"This function puts image @var{image} in front of @var{pos} in the current "
"buffer.  The argument @var{pos} should be an integer or a marker.  It "
"specifies the buffer position where the image should appear.  The argument "
"@var{string} specifies the text that should hold the image as an alternative "
"to the default."
msgstr ""

# type: defun
#: lispref/display.texi:4223
msgid ""
"The argument @var{image} must be an image descriptor, perhaps returned by "
"@code{create-image} or stored by @code{defimage}."
msgstr ""

# type: defun
#: lispref/display.texi:4233
msgid ""
"Internally, this function creates an overlay, and gives it a @code{before-"
"string} property containing text that has a @code{display} property whose "
"value is the image.  (Whew!)"
msgstr ""

# type: defun
#: lispref/display.texi:4235
#, no-wrap
msgid "remove-images start end &optional buffer"
msgstr ""

# type: defun
#: lispref/display.texi:4239
msgid ""
"This function removes images in @var{buffer} between positions @var{start} "
"and @var{end}.  If @var{buffer} is omitted or @code{nil}, images are removed "
"from the current buffer."
msgstr ""

# type: defun
#: lispref/display.texi:4243
msgid ""
"This removes only images that were put into @var{buffer} the way @code{put-"
"image} does it, not images that were inserted with @code{insert-image} or in "
"other ways."
msgstr ""

# type: defun
#: lispref/display.texi:4245
#, no-wrap
msgid "image-size spec &optional pixels frame"
msgstr ""

# type: defun
#: lispref/display.texi:4254
msgid ""
"This function returns the size of an image as a pair @w{@code{(@var{width} . "
"@var{height})}}.  @var{spec} is an image specification.  @var{pixels} non-"
"@code{nil} means return sizes measured in pixels, otherwise return sizes "
"measured in canonical character units (fractions of the width/height of the "
"frame's default font).  @var{frame} is the frame on which the image will be "
"displayed.  @var{frame} null or omitted means use the selected frame (@pxref"
"{Input Focus})."
msgstr ""

# type: defvar
#: lispref/display.texi:4256
#, no-wrap
msgid "max-image-size"
msgstr ""

# type: defvar
#: lispref/display.texi:4260
msgid ""
"This variable is used to define the maximum size of image that Emacs will "
"load.  Emacs will refuse to load (and display) any image that is larger than "
"this limit."
msgstr ""

# type: defvar
#: lispref/display.texi:4266
msgid ""
"If the value is an integer, it directly specifies the maximum image height "
"and width, measured in pixels.  If it is a floating point number, it "
"specifies the maximum image height and width as a ratio to the frame height "
"and width.  If the value is non-numeric, there is no explicit limit on the "
"size of images."
msgstr ""

# type: defvar
#: lispref/display.texi:4272
msgid ""
"The purpose of this variable is to prevent unreasonably large images from "
"accidentally being loaded into Emacs.  It only takes effect the first time "
"an image is loaded.  Once an image is placed in the image cache, it can "
"always be displayed, even if the value of @var{max-image-size} is "
"subsequently changed (@pxref{Image Cache})."
msgstr ""

# type: cindex
#: lispref/display.texi:4276
#, no-wrap
msgid "image cache"
msgstr ""

# type: Plain text
#: lispref/display.texi:4281
msgid ""
"Emacs stores images in an image cache when it displays them, so it can "
"display them again more efficiently.  It removes an image from the cache "
"when it hasn't been displayed for a specified period of time."
msgstr ""

# type: Plain text
#: lispref/display.texi:4285
msgid ""
"When an image is looked up in the cache, its specification is compared with "
"cached image specifications using @code{equal}.  This means that all images "
"with equal specifications share the same image in the cache."
msgstr ""

# type: defvar
#: lispref/display.texi:4286
#, no-wrap
msgid "image-cache-eviction-delay"
msgstr ""

# type: defvar
#: lispref/display.texi:4290
msgid ""
"This variable specifies the number of seconds an image can remain in the "
"cache without being displayed.  When an image is not displayed for this "
"length of time, Emacs removes it from the image cache."
msgstr ""

# type: defvar
#: lispref/display.texi:4294
msgid ""
"If the value is @code{nil}, Emacs does not remove images from the cache "
"except when you explicitly clear it.  This mode can be useful for debugging."
msgstr ""

# type: defun
#: lispref/display.texi:4296
#, no-wrap
msgid "clear-image-cache &optional frame"
msgstr ""

# type: defun
#: lispref/display.texi:4300
msgid ""
"This function clears the image cache.  If @var{frame} is non-@code{nil}, "
"only the cache for that frame is cleared.  Otherwise all frames' caches are "
"cleared."
msgstr ""

# type: cindex
#: lispref/display.texi:4304
#, no-wrap
msgid "buttons in buffers"
msgstr ""

# type: cindex
#: lispref/display.texi:4305
#, no-wrap
msgid "clickable buttons in buffers"
msgstr ""

# type: Plain text
#: lispref/display.texi:4311
msgid ""
"The @emph{button} package defines functions for inserting and manipulating "
"clickable (with the mouse, or via keyboard commands)  buttons in Emacs "
"buffers, such as might be used for help hyper-links, etc.  Emacs uses "
"buttons for the hyper-links in help text and the like."
msgstr ""

# type: Plain text
#: lispref/display.texi:4315
msgid ""
"A button is essentially a set of properties attached (via text properties or "
"overlays) to a region of text in an Emacs buffer.  These properties are "
"called @dfn{button properties}."
msgstr ""

# type: Plain text
#: lispref/display.texi:4320
msgid ""
"One of these properties (@code{action}) is a function, which will be called "
"when the user invokes it using the keyboard or the mouse.  The invoked "
"function may then examine the button and use its other properties as desired."
msgstr ""

# type: Plain text
#: lispref/display.texi:4330
msgid ""
"In some ways the Emacs button package duplicates functionality offered by "
"the widget package (@pxref{Top, , Introduction, widget, The Emacs Widget "
"Library}), but the button package has the advantage that it is much faster, "
"much smaller, and much simpler to use (for elisp programmers---for users, "
"the result is about the same).  The extra speed and space savings are useful "
"mainly if you need to create many buttons in a buffer (for instance an @code"
"{*Apropos*} buffer uses buttons to make entries clickable, and may contain "
"many thousands of entries)."
msgstr ""

# type: subsection
#: lispref/display.texi:4337 lispref/display.texi:4339
#: lispref/display.texi:4340
#, no-wrap
msgid "Button Properties"
msgstr ""

# type: menu
#: lispref/display.texi:4337
msgid "Button properties with special meanings."
msgstr ""

# type: subsection
#: lispref/display.texi:4337 lispref/display.texi:4406
#: lispref/display.texi:4407
#, no-wrap
msgid "Button Types"
msgstr ""

# type: menu
#: lispref/display.texi:4337
msgid "Defining common properties for classes of buttons."
msgstr ""

# type: subsection
#: lispref/display.texi:4337 lispref/display.texi:4435
#: lispref/display.texi:4436
#, no-wrap
msgid "Making Buttons"
msgstr ""

# type: menu
#: lispref/display.texi:4337
msgid "Adding buttons to Emacs buffers."
msgstr ""

# type: subsection
#: lispref/display.texi:4337 lispref/display.texi:4492
#: lispref/display.texi:4493
#, no-wrap
msgid "Manipulating Buttons"
msgstr ""

# type: menu
#: lispref/display.texi:4337
msgid "Getting and setting properties of buttons."
msgstr ""

# type: subsection
#: lispref/display.texi:4337 lispref/display.texi:4558
#: lispref/display.texi:4559
#, no-wrap
msgid "Button Buffer Commands"
msgstr ""

# type: menu
#: lispref/display.texi:4337
msgid "Buffer-wide commands and bindings for buttons."
msgstr ""

# type: cindex
#: lispref/display.texi:4341
#, no-wrap
msgid "button properties"
msgstr ""

# type: Plain text
#: lispref/display.texi:4347
msgid ""
"Buttons have an associated list of properties defining their appearance and "
"behavior, and other arbitrary properties may be used for application "
"specific purposes.  Some properties that have special meaning to the button "
"package include:"
msgstr ""

# type: item
#: lispref/display.texi:4349
#, no-wrap
msgid "action"
msgstr ""

# type: kindex
#: lispref/display.texi:4350
#, no-wrap
msgid "action @r{(button property)}"
msgstr ""

# type: table
#: lispref/display.texi:4354
msgid ""
"The function to call when the user invokes the button, which is passed the "
"single argument @var{button}.  By default this is @code{ignore}, which does "
"nothing."
msgstr ""

# type: item
#: lispref/display.texi:4355
#, no-wrap
msgid "mouse-action"
msgstr ""

# type: kindex
#: lispref/display.texi:4356
#, no-wrap
msgid "mouse-action @r{(button property)}"
msgstr ""

# type: table
#: lispref/display.texi:4361
msgid ""
"This is similar to @code{action}, and when present, will be used instead of "
"@code{action} for button invocations resulting from mouse-clicks (instead of "
"the user hitting @key{RET}).  If not present, mouse-clicks use @code{action} "
"instead."
msgstr ""

# type: kindex
#: lispref/display.texi:4363
#, no-wrap
msgid "face @r{(button property)}"
msgstr ""

# type: table
#: lispref/display.texi:4366
msgid ""
"This is an Emacs face controlling how buttons of this type are displayed; by "
"default this is the @code{button} face."
msgstr ""

# type: kindex
#: lispref/display.texi:4368
#, no-wrap
msgid "mouse-face @r{(button property)}"
msgstr ""

# type: table
#: lispref/display.texi:4372
msgid ""
"This is an additional face which controls appearance during mouse-overs "
"(merged with the usual button face); by default this is the usual Emacs @code"
"{highlight} face."
msgstr ""

# type: kindex
#: lispref/display.texi:4374
#, no-wrap
msgid "keymap @r{(button property)}"
msgstr ""

# type: table
#: lispref/display.texi:4379
msgid ""
"The button's keymap, defining bindings active within the button region.  By "
"default this is the usual button region keymap, stored in the variable @code"
"{button-map}, which defines @key{RET} and @key{mouse-2} to invoke the button."
msgstr ""

# type: kindex
#: lispref/display.texi:4381
#, no-wrap
msgid "type @r{(button property)}"
msgstr ""

# type: table
#: lispref/display.texi:4385
msgid ""
"The button-type of the button.  When creating a button, this is usually "
"specified using the @code{:type} keyword argument.  @xref{Button Types}."
msgstr ""

# type: kindex
#: lispref/display.texi:4387
#, no-wrap
msgid "help-index @r{(button property)}"
msgstr ""

# type: table
#: lispref/display.texi:4390
msgid ""
"A string displayed by the Emacs tool-tip help system; by default, @code"
"{\"mouse-2, RET: Push this button\"}."
msgstr ""

# type: item
#: lispref/display.texi:4391
#, no-wrap
msgid "follow-link"
msgstr ""

# type: kindex
#: lispref/display.texi:4392
#, no-wrap
msgid "follow-link @r{(button property)}"
msgstr ""

# type: table
#: lispref/display.texi:4395
msgid ""
"The follow-link property, defining how a @key{Mouse-1} click behaves on this "
"button, @xref{Links and Mouse-1}."
msgstr ""

# type: item
#: lispref/display.texi:4396
#, no-wrap
msgid "button"
msgstr ""

# type: kindex
#: lispref/display.texi:4397
#, no-wrap
msgid "button @r{(button property)}"
msgstr ""

# type: table
#: lispref/display.texi:4401
msgid ""
"All buttons have a non-@code{nil} @code{button} property, which may be "
"useful in finding regions of text that comprise buttons (which is what the "
"standard button functions do)."
msgstr ""

# type: Plain text
#: lispref/display.texi:4405
msgid ""
"There are other properties defined for the regions of text in a button, but "
"these are not generally interesting for typical uses."
msgstr ""

# type: cindex
#: lispref/display.texi:4408
#, no-wrap
msgid "button types"
msgstr ""

# type: Plain text
#: lispref/display.texi:4415
msgid ""
"Every button has a button @emph{type}, which defines default values for the "
"button's properties.  Button types are arranged in a hierarchy, with "
"specialized types inheriting from more general types, so that it's easy to "
"define special-purpose types of buttons for specific tasks."
msgstr ""

# type: defun
#: lispref/display.texi:4416
#, no-wrap
msgid "define-button-type name &rest properties"
msgstr ""

# type: defun
#: lispref/display.texi:4422
msgid ""
"Define a `button type' called @var{name}.  The remaining arguments form a "
"sequence of @var{property value} pairs, specifying default property values "
"for buttons with this type (a button's type may be set by giving it a @code"
"{type} property when creating the button, using the @code{:type} keyword "
"argument)."
msgstr ""

# type: defun
#: lispref/display.texi:4428
msgid ""
"In addition, the keyword argument @code{:supertype} may be used to specify a "
"button-type from which @var{name} inherits its default property values.  "
"Note that this inheritance happens only when @var{name} is defined; "
"subsequent changes to a supertype are not reflected in its subtypes."
msgstr ""

# type: Plain text
#: lispref/display.texi:4434
msgid ""
"Using @code{define-button-type} to define default properties for buttons is "
"not necessary---buttons without any specified type use the built-in button-"
"type @code{button}---but it is encouraged, since doing so usually makes the "
"resulting code clearer and more efficient."
msgstr ""

# type: cindex
#: lispref/display.texi:4437
#, no-wrap
msgid "making buttons"
msgstr ""

# type: Plain text
#: lispref/display.texi:4446
msgid ""
"Buttons are associated with a region of text, using an overlay or text "
"properties to hold button-specific information, all of which are initialized "
"from the button's type (which defaults to the built-in button type @code"
"{button}).  Like all Emacs text, the appearance of the button is governed by "
"the @code{face} property; by default (via the @code{face} property inherited "
"from the @code{button} button-type)  this is a simple underline, like a "
"typical web-page link."
msgstr ""

# type: Plain text
#: lispref/display.texi:4451
msgid ""
"For convenience, there are two sorts of button-creation functions, those "
"that add button properties to an existing region of a buffer, called @code"
"{make-...button}, and those that also insert the button text, called @code"
"{insert-...button}."
msgstr ""

# type: Plain text
#: lispref/display.texi:4460
msgid ""
"The button-creation functions all take the @code{&rest} argument @var"
"{properties}, which should be a sequence of @var{property value} pairs, "
"specifying properties to add to the button; see @ref{Button Properties}.  In "
"addition, the keyword argument @code{:type} may be used to specify a button-"
"type from which to inherit other properties; see @ref{Button Types}.  Any "
"properties not explicitly specified during creation will be inherited from "
"the button's type (if the type defines such a property)."
msgstr ""

# type: Plain text
#: lispref/display.texi:4463
msgid ""
"The following functions add a button using an overlay (@pxref{Overlays}) to "
"hold the button properties:"
msgstr ""

# type: defun
#: lispref/display.texi:4464
#, no-wrap
msgid "make-button beg end &rest properties"
msgstr ""

# type: defun
#: lispref/display.texi:4467
msgid ""
"This makes a button from @var{beg} to @var{end} in the current buffer, and "
"returns it."
msgstr ""

# type: defun
#: lispref/display.texi:4469
#, no-wrap
msgid "insert-button label &rest properties"
msgstr ""

# type: defun
#: lispref/display.texi:4472
msgid ""
"This insert a button with the label @var{label} at point, and returns it."
msgstr ""

# type: Plain text
#: lispref/display.texi:4481
msgid ""
"The following functions are similar, but use Emacs text properties (@pxref"
"{Text Properties}) to hold the button properties, making the button actually "
"part of the text instead of being a property of the buffer.  Buttons using "
"text properties do not create markers into the buffer, which is important "
"for speed when you use extremely large numbers of buttons.  Both functions "
"return the position of the start of the new button:"
msgstr ""

# type: defun
#: lispref/display.texi:4482
#, no-wrap
msgid "make-text-button beg end &rest properties"
msgstr ""

# type: defun
#: lispref/display.texi:4485
msgid ""
"This makes a button from @var{beg} to @var{end} in the current buffer, using "
"text properties."
msgstr ""

# type: defun
#: lispref/display.texi:4487
#, no-wrap
msgid "insert-text-button label &rest properties"
msgstr ""

# type: defun
#: lispref/display.texi:4490
msgid ""
"This inserts a button with the label @var{label} at point, using text "
"properties."
msgstr ""

# type: cindex
#: lispref/display.texi:4494
#, no-wrap
msgid "manipulating buttons"
msgstr ""

# type: Plain text
#: lispref/display.texi:4499
msgid ""
"These are functions for getting and setting properties of buttons.  Often "
"these are used by a button's invocation function to determine what to do."
msgstr ""

# type: Plain text
#: lispref/display.texi:4505
msgid ""
"Where a @var{button} parameter is specified, it means an object referring to "
"a specific button, either an overlay (for overlay buttons), or a buffer-"
"position or marker (for text property buttons).  Such an object is passed as "
"the first argument to a button's invocation function when it is invoked."
msgstr ""

# type: defun
#: lispref/display.texi:4506
#, no-wrap
msgid "button-start button"
msgstr ""

# type: defun
#: lispref/display.texi:4508
msgid "Return the position at which @var{button} starts."
msgstr ""

# type: defun
#: lispref/display.texi:4510
#, no-wrap
msgid "button-end button"
msgstr ""

# type: defun
#: lispref/display.texi:4512
msgid "Return the position at which @var{button} ends."
msgstr ""

# type: defun
#: lispref/display.texi:4514
#, no-wrap
msgid "button-get button prop"
msgstr ""

# type: defun
#: lispref/display.texi:4516
msgid "Get the property of button @var{button} named @var{prop}."
msgstr ""

# type: defun
#: lispref/display.texi:4518
#, no-wrap
msgid "button-put button prop val"
msgstr ""

# type: defun
#: lispref/display.texi:4520
msgid "Set @var{button}'s @var{prop} property to @var{val}."
msgstr ""

# type: defun
#: lispref/display.texi:4522
#, no-wrap
msgid "button-activate button &optional use-mouse-action"
msgstr ""

# type: defun
#: lispref/display.texi:4527
msgid ""
"Call @var{button}'s @code{action} property (i.e., invoke it).  If @var{use-"
"mouse-action} is non-@code{nil}, try to invoke the button's @code{mouse-"
"action} property instead of @code{action}; if the button has no @code{mouse-"
"action} property, use @code{action} as normal."
msgstr ""

# type: defun
#: lispref/display.texi:4529
#, no-wrap
msgid "button-label button"
msgstr ""

# type: defun
#: lispref/display.texi:4531
msgid "Return @var{button}'s text label."
msgstr ""

# type: defun
#: lispref/display.texi:4533
#, no-wrap
msgid "button-type button"
msgstr ""

# type: defun
#: lispref/display.texi:4535
msgid "Return @var{button}'s button-type."
msgstr ""

# type: defun
#: lispref/display.texi:4537
#, no-wrap
msgid "button-has-type-p button type"
msgstr ""

# type: defun
#: lispref/display.texi:4540
msgid ""
"Return @code{t} if @var{button} has button-type @var{type}, or one of @var"
"{type}'s subtypes."
msgstr ""

# type: defun
#: lispref/display.texi:4542
#, no-wrap
msgid "button-at pos"
msgstr ""

# type: defun
#: lispref/display.texi:4544
msgid ""
"Return the button at position @var{pos} in the current buffer, or @code{nil}."
msgstr ""

# type: defun
#: lispref/display.texi:4546
#, no-wrap
msgid "button-type-put type prop val"
msgstr ""

# type: defun
#: lispref/display.texi:4548
msgid "Set the button-type @var{type}'s @var{prop} property to @var{val}."
msgstr ""

# type: defun
#: lispref/display.texi:4550
#, no-wrap
msgid "button-type-get type prop"
msgstr ""

# type: defun
#: lispref/display.texi:4552
msgid "Get the property of button-type @var{type} named @var{prop}."
msgstr ""

# type: defun
#: lispref/display.texi:4554
#, no-wrap
msgid "button-type-subtype-p type supertype"
msgstr ""

# type: defun
#: lispref/display.texi:4556
msgid ""
"Return @code{t} if button-type @var{type} is a subtype of @var{supertype}."
msgstr ""

# type: cindex
#: lispref/display.texi:4560
#, no-wrap
msgid "button buffer commands"
msgstr ""

# type: Plain text
#: lispref/display.texi:4564
msgid ""
"These are commands and functions for locating and operating on buttons in an "
"Emacs buffer."
msgstr ""

# type: Plain text
#: lispref/display.texi:4573
msgid ""
"@code{push-button} is the command that a user uses to actually `push' a "
"button, and is bound by default in the button itself to @key{RET} and to @key"
"{mouse-2} using a region-specific keymap.  Commands that are useful outside "
"the buttons itself, such as @code{forward-button} and @code{backward-button} "
"are additionally available in the keymap stored in @code{button-buffer-map}; "
"a mode which uses buttons may want to use @code{button-buffer-map} as a "
"parent keymap for its keymap."
msgstr ""

# type: Plain text
#: lispref/display.texi:4578
msgid ""
"If the button has a non-@code{nil} @code{follow-link} property, and @var"
"{mouse-1-click-follows-link} is set, a quick @key{Mouse-1} click will also "
"activate the @code{push-button} command.  @xref{Links and Mouse-1}."
msgstr ""

# type: deffn
#: lispref/display.texi:4579
#, no-wrap
msgid "Command push-button &optional pos use-mouse-action"
msgstr ""

# type: deffn
#: lispref/display.texi:4590
msgid ""
"Perform the action specified by a button at location @var{pos}.  @var{pos} "
"may be either a buffer position or a mouse-event.  If @var{use-mouse-action} "
"is non-@code{nil}, or @var{pos} is a mouse-event (@pxref{Mouse Events}), try "
"to invoke the button's @code{mouse-action} property instead of @code"
"{action}; if the button has no @code{mouse-action} property, use @code"
"{action} as normal.  @var{pos} defaults to point, except when @code{push-"
"button} is invoked interactively as the result of a mouse-event, in which "
"case, the mouse event's position is used.  If there's no button at @var"
"{pos}, do nothing and return @code{nil}, otherwise return @code{t}."
msgstr ""

# type: deffn
#: lispref/display.texi:4592
#, no-wrap
msgid "Command forward-button n &optional wrap display-message"
msgstr ""

# type: deffn
#: lispref/display.texi:4600
msgid ""
"Move to the @var{n}th next button, or @var{n}th previous button if @var{n} "
"is negative.  If @var{n} is zero, move to the start of any button at point.  "
"If @var{wrap} is non-@code{nil}, moving past either end of the buffer "
"continues from the other end.  If @var{display-message} is non-@code{nil}, "
"the button's help-echo string is displayed.  Any button with a non-@code"
"{nil} @code{skip} property is skipped over.  Returns the button found."
msgstr ""

# type: deffn
#: lispref/display.texi:4602
#, no-wrap
msgid "Command backward-button n &optional wrap display-message"
msgstr ""

# type: deffn
#: lispref/display.texi:4610
msgid ""
"Move to the @var{n}th previous button, or @var{n}th next button if @var{n} "
"is negative.  If @var{n} is zero, move to the start of any button at point.  "
"If @var{wrap} is non-@code{nil}, moving past either end of the buffer "
"continues from the other end.  If @var{display-message} is non-@code{nil}, "
"the button's help-echo string is displayed.  Any button with a non-@code"
"{nil} @code{skip} property is skipped over.  Returns the button found."
msgstr ""

# type: defun
#: lispref/display.texi:4612
#, no-wrap
msgid "next-button pos &optional count-current"
msgstr ""

# type: defunx
#: lispref/display.texi:4613
#, no-wrap
msgid "previous-button pos &optional count-current"
msgstr ""

# type: defun
#: lispref/display.texi:4618
msgid ""
"Return the next button after (for @code{next-button} or before (for @code"
"{previous-button}) position @var{pos} in the current buffer.  If @var{count-"
"current} is non-@code{nil}, count any button at @var{pos} in the search, "
"instead of starting at the next button."
msgstr ""

# type: cindex
#: lispref/display.texi:4622
#, no-wrap
msgid "ewoc"
msgstr ""

# type: cindex
#: lispref/display.texi:4623
#, no-wrap
msgid "display, abstract"
msgstr ""

# type: cindex
#: lispref/display.texi:4624
#, no-wrap
msgid "display, arbitrary objects"
msgstr ""

# type: cindex
#: lispref/display.texi:4625
#, no-wrap
msgid "model/view/controller"
msgstr ""

# type: cindex
#: lispref/display.texi:4626
#, no-wrap
msgid "view part, model/view/controller"
msgstr ""

# type: Plain text
#: lispref/display.texi:4632
msgid ""
"The Ewoc package constructs buffer text that represents a structure of Lisp "
"objects, and updates the text to follow changes in that structure.  This is "
"like the ``view'' component in the ``model/view/controller'' design paradigm."
msgstr ""

# type: Plain text
#: lispref/display.texi:4639
msgid ""
"An @dfn{ewoc} is a structure that organizes information required to "
"construct buffer text that represents certain Lisp data.  The buffer text of "
"the ewoc has three parts, in order: first, fixed @dfn{header} text; next, "
"textual descriptions of a series of data elements (Lisp objects that you "
"specify); and last, fixed @dfn{footer} text.  Specifically, an ewoc contains "
"information on:"
msgstr ""

# type: itemize
#: lispref/display.texi:4643
msgid "The buffer which its text is generated in."
msgstr ""

# type: itemize
#: lispref/display.texi:4646
msgid "The text's start position in the buffer."
msgstr ""

# type: itemize
#: lispref/display.texi:4649
msgid "The header and footer strings."
msgstr ""

# type: itemize
#: lispref/display.texi:4652
msgid "A doubly-linked chain of @dfn{nodes}, each of which contains:"
msgstr ""

# type: itemize
#: lispref/display.texi:4656
msgid "A @dfn{data element}, a single Lisp object."
msgstr ""

# type: itemize
#: lispref/display.texi:4659
msgid "Links to the preceding and following nodes in the chain."
msgstr ""

# type: itemize
#: lispref/display.texi:4665
msgid ""
"A @dfn{pretty-printer} function which is responsible for inserting the "
"textual representation of a data element value into the current buffer."
msgstr ""

# type: Plain text
#: lispref/display.texi:4674
msgid ""
"Typically, you define an ewoc with @code{ewoc-create}, and then pass the "
"resulting ewoc structure to other functions in the Ewoc package to build "
"nodes within it, and display it in the buffer.  Once it is displayed in the "
"buffer, other functions determine the correspondance between buffer "
"positions and nodes, move point from one node's textual representation to "
"another, and so forth.  @xref{Abstract Display Functions}."
msgstr ""

# type: Plain text
#: lispref/display.texi:4679
msgid ""
"A node @dfn{encapsulates} a data element much the way a variable holds a "
"value.  Normally, encapsulation occurs as a part of adding a node to the "
"ewoc.  You can retrieve the data element value and place a new value in its "
"place, like so:"
msgstr ""

# type: lisp
#: lispref/display.texi:4683
#, no-wrap
msgid ""
"(ewoc-data @var{node})\n"
"@result{} value\n"
"\n"
msgstr ""

# type: lisp
#: lispref/display.texi:4686
#, no-wrap
msgid ""
"(ewoc-set-data @var{node} @var{new-value})\n"
"@result{} @var{new-value}\n"
msgstr ""

# type: Plain text
#: lispref/display.texi:4693
msgid ""
"You can also use, as the data element value, a Lisp object (list or vector) "
"that is a container for the ``real'' value, or an index into some other "
"structure.  The example (@pxref{Abstract Display Example})  uses the latter "
"approach."
msgstr ""

# type: Plain text
#: lispref/display.texi:4701
msgid ""
"When the data changes, you will want to update the text in the buffer.  You "
"can update all nodes by calling @code{ewoc-refresh}, or just specific nodes "
"using @code{ewoc-invalidate}, or all nodes satisfying a predicate using @code"
"{ewoc-map}.  Alternatively, you can delete invalid nodes using @code{ewoc-"
"delete} or @code{ewoc-filter}, and add new nodes in their place.  Deleting a "
"node from an ewoc deletes its associated textual description from buffer, as "
"well."
msgstr ""

# type: subsection
#: lispref/display.texi:4705 lispref/display.texi:4707
#: lispref/display.texi:4708
#, no-wrap
msgid "Abstract Display Functions"
msgstr ""

# type: subsection
#: lispref/display.texi:4705 lispref/display.texi:4842
#: lispref/display.texi:4843
#, no-wrap
msgid "Abstract Display Example"
msgstr ""

# type: Plain text
#: lispref/display.texi:4713
msgid ""
"In this subsection, @var{ewoc} and @var{node} stand for the structures "
"described above (@pxref{Abstract Display}), while @var{data} stands for an "
"arbitrary Lisp object used as a data element."
msgstr ""

# type: defun
#: lispref/display.texi:4714
#, no-wrap
msgid "ewoc-create pretty-printer &optional header footer nosep"
msgstr ""

# type: defun
#: lispref/display.texi:4721
msgid ""
"This constructs and returns a new ewoc, with no nodes (and thus no data "
"elements).  @var{pretty-printer} should be a function that takes one "
"argument, a data element of the sort you plan to use in this ewoc, and "
"inserts its textual description at point using @code{insert} (and never @code"
"{insert-before-markers}, because that would interfere with the Ewoc "
"package's internal mechanisms)."
msgstr ""

# type: defun
#: lispref/display.texi:4728
msgid ""
"Normally, a newline is automatically inserted after the header, the footer "
"and every node's textual description.  If @var{nosep} is non-@code{nil}, no "
"newline is inserted.  This may be useful for displaying an entire ewoc on a "
"single line, for example, or for making nodes ``invisible'' by arranging for "
"@var{pretty-printer} to do nothing for those nodes."
msgstr ""

# type: defun
#: lispref/display.texi:4732
msgid ""
"An ewoc maintains its text in the buffer that is current when you create it, "
"so switch to the intended buffer before calling @code{ewoc-create}."
msgstr ""

# type: defun
#: lispref/display.texi:4734
#, no-wrap
msgid "ewoc-buffer ewoc"
msgstr ""

# type: defun
#: lispref/display.texi:4736
msgid "This returns the buffer where @var{ewoc} maintains its text."
msgstr ""

# type: defun
#: lispref/display.texi:4738
#, no-wrap
msgid "ewoc-get-hf ewoc"
msgstr ""

# type: defun
#: lispref/display.texi:4741
msgid ""
"This returns a cons cell @code{(@var{header} . @var{footer})} made from @var"
"{ewoc}'s header and footer."
msgstr ""

# type: defun
#: lispref/display.texi:4743
#, no-wrap
msgid "ewoc-set-hf ewoc header footer"
msgstr ""

# type: defun
#: lispref/display.texi:4746
msgid ""
"This sets the header and footer of @var{ewoc} to the strings @var{header} "
"and @var{footer}, respectively."
msgstr ""

# type: defun
#: lispref/display.texi:4748
#, no-wrap
msgid "ewoc-enter-first ewoc data"
msgstr ""

# type: defunx
#: lispref/display.texi:4749
#, no-wrap
msgid "ewoc-enter-last ewoc data"
msgstr ""

# type: defun
#: lispref/display.texi:4752
msgid ""
"These add a new node encapsulating @var{data}, putting it, respectively, at "
"the beginning or end of @var{ewoc}'s chain of nodes."
msgstr ""

# type: defun
#: lispref/display.texi:4754
#, no-wrap
msgid "ewoc-enter-before ewoc node data"
msgstr ""

# type: defunx
#: lispref/display.texi:4755
#, no-wrap
msgid "ewoc-enter-after ewoc node data"
msgstr ""

# type: defun
#: lispref/display.texi:4758
msgid ""
"These add a new node encapsulating @var{data}, adding it to @var{ewoc} "
"before or after @var{node}, respectively."
msgstr ""

# type: defun
#: lispref/display.texi:4760
#, no-wrap
msgid "ewoc-prev ewoc node"
msgstr ""

# type: defunx
#: lispref/display.texi:4761
#, no-wrap
msgid "ewoc-next ewoc node"
msgstr ""

# type: defun
#: lispref/display.texi:4764
msgid ""
"These return, respectively, the previous node and the next node of @var"
"{node} in @var{ewoc}."
msgstr ""

# type: defun
#: lispref/display.texi:4766
#, no-wrap
msgid "ewoc-nth ewoc n"
msgstr ""

# type: defun
#: lispref/display.texi:4770
msgid ""
"This returns the node in @var{ewoc} found at zero-based index @var{n}.  A "
"negative @var{n} means count from the end.  @code{ewoc-nth} returns @code"
"{nil} if @var{n} is out of range."
msgstr ""

# type: defun
#: lispref/display.texi:4772
#, no-wrap
msgid "ewoc-data node"
msgstr ""

# type: defun
#: lispref/display.texi:4774
msgid "This extracts the data encapsulated by @var{node} and returns it."
msgstr ""

# type: defun
#: lispref/display.texi:4776
#, no-wrap
msgid "ewoc-set-data node data"
msgstr ""

# type: defun
#: lispref/display.texi:4778
msgid "This sets the data encapsulated by @var{node} to @var{data}."
msgstr ""

# type: defun
#: lispref/display.texi:4780
#, no-wrap
msgid "ewoc-locate ewoc &optional pos guess"
msgstr ""

# type: defun
#: lispref/display.texi:4788
msgid ""
"This determines the node in @var{ewoc} which contains point (or @var{pos} if "
"specified), and returns that node.  If @var{ewoc} has no nodes, it returns "
"@code{nil}.  If @var{pos} is before the first node, it returns the first "
"node; if @var{pos} is after the last node, it returns the last node.  The "
"optional third arg @var{guess} should be a node that is likely to be near "
"@var{pos}; this doesn't alter the result, but makes the function run faster."
msgstr ""

# type: defun
#: lispref/display.texi:4790
#, no-wrap
msgid "ewoc-location node"
msgstr ""

# type: defun
#: lispref/display.texi:4792
msgid "This returns the start position of @var{node}."
msgstr ""

# type: defun
#: lispref/display.texi:4794
#, no-wrap
msgid "ewoc-goto-prev ewoc arg"
msgstr ""

# type: defunx
#: lispref/display.texi:4795
#, no-wrap
msgid "ewoc-goto-next ewoc arg"
msgstr ""

# type: defun
#: lispref/display.texi:4801
msgid ""
"These move point to the previous or next, respectively, @var{arg}th node in "
"@var{ewoc}.  @code{ewoc-goto-prev} does not move if it is already at the "
"first node or if @var{ewoc} is empty, whereas @code{ewoc-goto-next} moves "
"past the last node, returning @code{nil}.  Excepting this special case, "
"these functions return the node moved to."
msgstr ""

# type: defun
#: lispref/display.texi:4803
#, no-wrap
msgid "ewoc-goto-node ewoc node"
msgstr ""

# type: defun
#: lispref/display.texi:4805
msgid "This moves point to the start of @var{node} in @var{ewoc}."
msgstr ""

# type: defun
#: lispref/display.texi:4807
#, no-wrap
msgid "ewoc-refresh ewoc"
msgstr ""

# type: defun
#: lispref/display.texi:4812
msgid ""
"This function regenerates the text of @var{ewoc}.  It works by deleting the "
"text between the header and the footer, i.e., all the data elements' "
"representations, and then calling the pretty-printer function for each node, "
"one by one, in order."
msgstr ""

# type: defun
#: lispref/display.texi:4814
#, no-wrap
msgid "ewoc-invalidate ewoc &rest nodes"
msgstr ""

# type: defun
#: lispref/display.texi:4817
msgid ""
"This is similar to @code{ewoc-refresh}, except that only @var{nodes} in @var"
"{ewoc} are updated instead of the entire set."
msgstr ""

# type: defun
#: lispref/display.texi:4819
#, no-wrap
msgid "ewoc-delete ewoc &rest nodes"
msgstr ""

# type: defun
#: lispref/display.texi:4821
msgid "This deletes each node in @var{nodes} from @var{ewoc}."
msgstr ""

# type: defun
#: lispref/display.texi:4823
#, no-wrap
msgid "ewoc-filter ewoc predicate &rest args"
msgstr ""

# type: defun
#: lispref/display.texi:4827
msgid ""
"This calls @var{predicate} for each data element in @var{ewoc} and deletes "
"those nodes for which @var{predicate} returns @code{nil}.  Any @var{args} "
"are passed to @var{predicate}."
msgstr ""

# type: defun
#: lispref/display.texi:4829
#, no-wrap
msgid "ewoc-collect ewoc predicate &rest args"
msgstr ""

# type: defun
#: lispref/display.texi:4834
msgid ""
"This calls @var{predicate} for each data element in @var{ewoc} and returns a "
"list of those elements for which @var{predicate} returns non-@code{nil}.  "
"The elements in the list are ordered as in the buffer.  Any @var{args} are "
"passed to @var{predicate}."
msgstr ""

# type: defun
#: lispref/display.texi:4836
#, no-wrap
msgid "ewoc-map map-function ewoc &rest args"
msgstr ""

# type: defun
#: lispref/display.texi:4840
msgid ""
"This calls @var{map-function} for each data element in @var{ewoc} and "
"updates those nodes for which @var{map-function} returns non-@code{nil}.  "
"Any @var{args} are passed to @var{map-function}."
msgstr ""

# type: Plain text
#: lispref/display.texi:4849
msgid ""
"Here is a simple example using functions of the ewoc package to implement a "
"``color components display,'' an area in a buffer that represents a vector "
"of three integers (itself representing a 24-bit RGB value) in various ways."
msgstr ""

# type: example
#: lispref/display.texi:4855
#, no-wrap
msgid ""
"(setq colorcomp-ewoc nil\n"
"      colorcomp-data nil\n"
"      colorcomp-mode-map nil\n"
"      colorcomp-labels [\"Red\" \"Green\" \"Blue\"])\n"
"\n"
msgstr ""

# type: example
#: lispref/display.texi:4871
#, no-wrap
msgid ""
"(defun colorcomp-pp (data)\n"
"  (if data\n"
"      (let ((comp (aref colorcomp-data data)))\n"
"        (insert (aref colorcomp-labels data) \"\\t: #x\"\n"
"                (format \"%02X\" comp) \" \"\n"
"                (make-string (ash comp -2) ?#) \"\\n\"))\n"
"    (let ((cstr (format \"#%02X%02X%02X\"\n"
"                        (aref colorcomp-data 0)\n"
"                        (aref colorcomp-data 1)\n"
"                        (aref colorcomp-data 2)))\n"
"          (samp \" (sample text) \"))\n"
"      (insert \"Color\\t: \"\n"
"              (propertize samp 'face `(foreground-color . ,cstr))\n"
"              (propertize samp 'face `(background-color . ,cstr))\n"
"              \"\\n\"))))\n"
"\n"
msgstr ""

# type: example
#: lispref/display.texi:4900
#, no-wrap
msgid ""
"(defun colorcomp (color)\n"
"  \"Allow fiddling with COLOR in a new buffer.\n"
"The buffer is in Color Components mode.\"\n"
"  (interactive \"sColor (name or #RGB or #RRGGBB): \")\n"
"  (when (string= \"\" color)\n"
"    (setq color \"green\"))\n"
"  (unless (color-values color)\n"
"    (error \"No such color: %S\" color))\n"
"  (switch-to-buffer\n"
"   (generate-new-buffer (format \"originally: %s\" color)))\n"
"  (kill-all-local-variables)\n"
"  (setq major-mode 'colorcomp-mode\n"
"        mode-name \"Color Components\")\n"
"  (use-local-map colorcomp-mode-map)\n"
"  (erase-buffer)\n"
"  (buffer-disable-undo)\n"
"  (let ((data (apply 'vector (mapcar (lambda (n) (ash n -8))\n"
"                                     (color-values color))))\n"
"        (ewoc (ewoc-create 'colorcomp-pp\n"
"                           \"\\nColor Components\\n\\n\"\n"
"                           (substitute-command-keys\n"
"                            \"\\n\\\\@{colorcomp-mode-map@}\"))))\n"
"    (set (make-local-variable 'colorcomp-data) data)\n"
"    (set (make-local-variable 'colorcomp-ewoc) ewoc)\n"
"    (ewoc-enter-last ewoc 0)\n"
"    (ewoc-enter-last ewoc 1)\n"
"    (ewoc-enter-last ewoc 2)\n"
"    (ewoc-enter-last ewoc nil)))\n"
msgstr ""

# type: cindex
#: lispref/display.texi:4902
#, no-wrap
msgid "controller part, model/view/controller"
msgstr ""

# type: Plain text
#: lispref/display.texi:4908
msgid ""
"This example can be extended to be a ``color selection widget'' (in other "
"words, the controller part of the ``model/view/controller'' design paradigm) "
"by defining commands to modify @code{colorcomp-data} and to ``finish'' the "
"selection process, and a keymap to tie it all together conveniently."
msgstr ""

# type: smallexample
#: lispref/display.texi:4918
#, no-wrap
msgid ""
"(defun colorcomp-mod (index limit delta)\n"
"  (let ((cur (aref colorcomp-data index)))\n"
"    (unless (= limit cur)\n"
"      (aset colorcomp-data index (+ cur delta)))\n"
"    (ewoc-invalidate\n"
"     colorcomp-ewoc\n"
"     (ewoc-nth colorcomp-ewoc index)\n"
"     (ewoc-nth colorcomp-ewoc -1))))\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/display.texi:4925
#, no-wrap
msgid ""
"(defun colorcomp-R-more () (interactive) (colorcomp-mod 0 255 1))\n"
"(defun colorcomp-G-more () (interactive) (colorcomp-mod 1 255 1))\n"
"(defun colorcomp-B-more () (interactive) (colorcomp-mod 2 255 1))\n"
"(defun colorcomp-R-less () (interactive) (colorcomp-mod 0 0 -1))\n"
"(defun colorcomp-G-less () (interactive) (colorcomp-mod 1 0 -1))\n"
"(defun colorcomp-B-less () (interactive) (colorcomp-mod 2 0 -1))\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/display.texi:4935
#, no-wrap
msgid ""
"(defun colorcomp-copy-as-kill-and-exit ()\n"
"  \"Copy the color components into the kill ring and kill the buffer.\n"
"The string is formatted #RRGGBB (hash followed by six hex digits).\"\n"
"  (interactive)\n"
"  (kill-new (format \"#%02X%02X%02X\"\n"
"                    (aref colorcomp-data 0)\n"
"                    (aref colorcomp-data 1)\n"
"                    (aref colorcomp-data 2)))\n"
"  (kill-buffer nil))\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/display.texi:4947
#, no-wrap
msgid ""
"(setq colorcomp-mode-map\n"
"      (let ((m (make-sparse-keymap)))\n"
"        (suppress-keymap m)\n"
"        (define-key m \"i\" 'colorcomp-R-less)\n"
"        (define-key m \"o\" 'colorcomp-R-more)\n"
"        (define-key m \"k\" 'colorcomp-G-less)\n"
"        (define-key m \"l\" 'colorcomp-G-more)\n"
"        (define-key m \",\" 'colorcomp-B-less)\n"
"        (define-key m \".\" 'colorcomp-B-more)\n"
"        (define-key m \" \" 'colorcomp-copy-as-kill-and-exit)\n"
"        m))\n"
msgstr ""

# type: Plain text
#: lispref/display.texi:4952
msgid ""
"Note that we never modify the data in each node, which is fixed when the "
"ewoc is created to be either @code{nil} or an index into the vector @code"
"{colorcomp-data}, the actual color components."
msgstr ""

# type: section
#: lispref/display.texi:4954
#, no-wrap
msgid "Blinking Parentheses"
msgstr ""

# type: cindex
#: lispref/display.texi:4955
#, no-wrap
msgid "parenthesis matching"
msgstr ""

# type: cindex
#: lispref/display.texi:4956
#, no-wrap
msgid "blinking parentheses"
msgstr ""

# type: cindex
#: lispref/display.texi:4957
#, no-wrap
msgid "balancing parentheses"
msgstr ""

# type: Plain text
#: lispref/display.texi:4961
msgid ""
"This section describes the mechanism by which Emacs shows a matching open "
"parenthesis when the user inserts a close parenthesis."
msgstr ""

# type: item
#: lispref/display.texi:4962 lispref/hooks.texi:83
#, no-wrap
msgid "blink-paren-function"
msgstr ""

# type: defvar
#: lispref/display.texi:4967
msgid ""
"The value of this variable should be a function (of no arguments) to be "
"called whenever a character with close parenthesis syntax is inserted.  The "
"value of @code{blink-paren-function} may be @code{nil}, in which case "
"nothing is done."
msgstr ""

# type: defopt
#: lispref/display.texi:4969
#, no-wrap
msgid "blink-matching-paren"
msgstr "blink-matching-paren"

# type: defopt
#: lispref/display.texi:4972
msgid ""
"If this variable is @code{nil}, then @code{blink-matching-open} does nothing."
msgstr ""

# type: defopt
#: lispref/display.texi:4974
#, no-wrap
msgid "blink-matching-paren-distance"
msgstr "blink-matching-paren-distance"

# type: defopt
#: lispref/display.texi:4977
msgid ""
"This variable specifies the maximum distance to scan for a matching "
"parenthesis before giving up."
msgstr ""

# type: defopt
#: lispref/display.texi:4979
#, no-wrap
msgid "blink-matching-delay"
msgstr "blink-matching-delay"

# type: defopt
#: lispref/display.texi:4983
msgid ""
"This variable specifies the number of seconds for the cursor to remain at "
"the matching parenthesis.  A fraction of a second often gives good results, "
"but the default is 1, which works on all systems."
msgstr ""

# type: deffn
#: lispref/display.texi:4985
#, no-wrap
msgid "Command blink-matching-open"
msgstr ""

# type: deffn
#: lispref/display.texi:4992
msgid ""
"This function is the default value of @code{blink-paren-function}.  It "
"assumes that point follows a character with close parenthesis syntax and "
"moves the cursor momentarily to the matching opening character.  If that "
"character is not already on the screen, it displays the character's context "
"in the echo area.  To avoid long delays, this function does not search "
"farther than @code{blink-matching-paren-distance} characters."
msgstr ""

# type: deffn
#: lispref/display.texi:4994
msgid "Here is an example of calling this function explicitly."
msgstr ""

# type: group
#: lispref/display.texi:5003
#, no-wrap
msgid ""
"(defun interactive-blink-matching-open ()\n"
"  \"Indicate momentarily the start of sexp before point.\"\n"
"  (interactive)\n"
msgstr ""

# type: group
#: lispref/display.texi:5009
#, no-wrap
msgid ""
"  (let ((blink-matching-paren-distance\n"
"         (buffer-size))\n"
"        (blink-matching-paren t))\n"
"    (blink-matching-open)))\n"
msgstr ""

# type: section
#: lispref/display.texi:5014
#, no-wrap
msgid "Usual Display Conventions"
msgstr ""

# type: Plain text
#: lispref/display.texi:5019
msgid ""
"The usual display conventions define how to display each character code.  "
"You can override these conventions by setting up a display table (@pxref"
"{Display Tables}).  Here are the usual display conventions:"
msgstr ""

# type: itemize
#: lispref/display.texi:5024
msgid ""
"Character codes 32 through 126 map to glyph codes 32 through 126.  Normally "
"this means they display as themselves."
msgstr ""

# type: itemize
#: lispref/display.texi:5028
msgid ""
"Character code 9 is a horizontal tab.  It displays as whitespace up to a "
"position determined by @code{tab-width}."
msgstr ""

# type: itemize
#: lispref/display.texi:5031
msgid "Character code 10 is a newline."
msgstr ""

# type: itemize
#: lispref/display.texi:5039
msgid ""
"All other codes in the range 0 through 31, and code 127, display in one of "
"two ways according to the value of @code{ctl-arrow}.  If it is non-@code"
"{nil}, these codes map to sequences of two glyphs, where the first glyph is "
"the @acronym{ASCII} code for @samp{^}.  (A display table can specify a glyph "
"to use instead of @samp{^}.)  Otherwise, these codes map just like the codes "
"in the range 128 to 255."
msgstr ""

# type: itemize
#: lispref/display.texi:5045
msgid ""
"On MS-DOS terminals, Emacs arranges by default for the character code 127 to "
"be mapped to the glyph code 127, which normally displays as an empty "
"polygon.  This glyph is used to display non-@acronym{ASCII} characters that "
"the MS-DOS terminal doesn't support.  @xref{MS-DOS and MULE,,, emacs, The "
"GNU Emacs Manual}."
msgstr ""

# type: itemize
#: lispref/display.texi:5051
msgid ""
"Character codes 128 through 255 map to sequences of four glyphs, where the "
"first glyph is the @acronym{ASCII} code for @samp{\\}, and the others are "
"digit characters representing the character code in octal.  (A display table "
"can specify a glyph to use instead of @samp{\\}.)"
msgstr ""

# type: itemize
#: lispref/display.texi:5056
msgid ""
"Multibyte character codes above 256 are displayed as themselves, or as a "
"question mark or empty box if the terminal cannot display that character."
msgstr ""

# type: Plain text
#: lispref/display.texi:5062
msgid ""
"The usual display conventions apply even when there is a display table, for "
"any character whose entry in the active display table is @code{nil}.  Thus, "
"when you set up a display table, you need only specify the characters for "
"which you want special behavior."
msgstr ""

# type: Plain text
#: lispref/display.texi:5067
msgid ""
"These display rules apply to carriage return (character code 13), when it "
"appears in the buffer.  But that character may not appear in the buffer "
"where you expect it, if it was eliminated as part of end-of-line conversion "
"(@pxref{Coding System Basics})."
msgstr ""

# type: Plain text
#: lispref/display.texi:5074
msgid ""
"These variables affect the way certain characters are displayed on the "
"screen.  Since they change the number of columns the characters occupy, they "
"also affect the indentation functions.  These variables also affect how the "
"mode line is displayed; if you want to force redisplay of the mode line "
"using the new values, call the function @code{force-mode-line-update} (@pxref"
"{Mode Line Format})."
msgstr ""

# type: item
#: lispref/display.texi:5075 lispref/locals.texi:88
#, no-wrap
msgid "ctl-arrow"
msgstr ""

# type: cindex
#: lispref/display.texi:5076
#, no-wrap
msgid "control characters in display"
msgstr ""

# type: defopt
#: lispref/display.texi:5081
msgid ""
"This buffer-local variable controls how control characters are displayed.  "
"If it is non-@code{nil}, they are displayed as a caret followed by the "
"character: @samp{^A}.  If it is @code{nil}, they are displayed as a "
"backslash followed by three octal digits: @samp{\\001}."
msgstr ""

# type: defvar
#: lispref/display.texi:5084
#, no-wrap
msgid "default-ctl-arrow"
msgstr ""

# type: defvar
#: lispref/display.texi:5087
msgid ""
"The value of this variable is the default value for @code{ctl-arrow} in "
"buffers that do not override it.  @xref{Default Value}."
msgstr ""

# type: item
#: lispref/display.texi:5089 lispref/locals.texi:213
#, no-wrap
msgid "tab-width"
msgstr ""

# type: defopt
#: lispref/display.texi:5095
msgid ""
"The value of this buffer-local variable is the spacing between tab stops "
"used for displaying tab characters in Emacs buffers.  The value is in units "
"of columns, and the default is 8.  Note that this feature is completely "
"independent of the user-settable tab stops used by the command @code{tab-to-"
"tab-stop}.  @xref{Indent Tabs}."
msgstr ""

# type: cindex
#: lispref/display.texi:5100
#, no-wrap
msgid "display table"
msgstr ""

# type: Plain text
#: lispref/display.texi:5105
msgid ""
"You can use the @dfn{display table} feature to control how all possible "
"character codes display on the screen.  This is useful for displaying "
"European languages that have letters not in the @acronym{ASCII} character "
"set."
msgstr ""

# type: Plain text
#: lispref/display.texi:5110
msgid ""
"The display table maps each character code into a sequence of @dfn{glyphs}, "
"each glyph being a graphic that takes up one character position on the "
"screen.  You can also define how to display each glyph on your terminal, "
"using the @dfn{glyph table}."
msgstr ""

# type: Plain text
#: lispref/display.texi:5114
msgid ""
"Display tables affect how the mode line is displayed; if you want to force "
"redisplay of the mode line using a new display table, call @code{force-mode-"
"line-update} (@pxref{Mode Line Format})."
msgstr ""

# type: subsection
#: lispref/display.texi:5119 lispref/display.texi:5121
#: lispref/display.texi:5122
#, no-wrap
msgid "Display Table Format"
msgstr ""

# type: menu
#: lispref/display.texi:5119
msgid "What a display table consists of."
msgstr ""

# type: subsection
#: lispref/display.texi:5119 lispref/display.texi:5216
#: lispref/display.texi:5217
#, no-wrap
msgid "Active Display Table"
msgstr ""

# type: menu
#: lispref/display.texi:5119
msgid "How Emacs selects a display table to use."
msgstr ""

# type: subsection
#: lispref/display.texi:5119 lispref/display.texi:5261
#: lispref/display.texi:5262
#, no-wrap
msgid "Glyphs"
msgstr ""

# type: menu
#: lispref/display.texi:5119
msgid "How to define a glyph, and what glyphs mean."
msgstr ""

# type: Plain text
#: lispref/display.texi:5126
msgid ""
"A display table is actually a char-table (@pxref{Char-Tables}) with @code"
"{display-table} as its subtype."
msgstr ""

# type: defun
#: lispref/display.texi:5127
#, no-wrap
msgid "make-display-table"
msgstr ""

# type: defun
#: lispref/display.texi:5130
msgid ""
"This creates and returns a display table.  The table initially has @code"
"{nil} in all elements."
msgstr ""

# type: Plain text
#: lispref/display.texi:5138
msgid ""
"The ordinary elements of the display table are indexed by character codes; "
"the element at index @var{c} says how to display the character code @var"
"{c}.  The value should be @code{nil} or a vector of the glyphs to be output "
"(@pxref{Glyphs}).  @code{nil} says to display the character @var{c} "
"according to the usual display conventions (@pxref{Usual Display})."
msgstr ""

# type: Plain text
#: lispref/display.texi:5142
msgid ""
"@strong{Warning:} if you use the display table to change the display of "
"newline characters, the whole buffer will be displayed as one long ``line.''"
msgstr ""

# type: Plain text
#: lispref/display.texi:5146
msgid ""
"The display table also has six ``extra slots'' which serve special "
"purposes.  Here is a table of their meanings; @code{nil} in any slot means "
"to use the default for that slot, as stated below."
msgstr ""

# type: item
#: lispref/display.texi:5148 lispref/edebug.texi:1135 lispref/frames.texi:1000
#: lispref/processes.texi:242 lispref/windows.texi:348
#: lispref/windows.texi:611
#, no-wrap
msgid "0"
msgstr ""

# type: table
#: lispref/display.texi:5153
msgid ""
"The glyph for the end of a truncated screen line (the default for this is "
"@samp{$}).  @xref{Glyphs}.  On graphical terminals, Emacs uses arrows in the "
"fringes to indicate truncation, so the display table has no effect."
msgstr ""

# type: item
#: lispref/display.texi:5154 lispref/files.texi:1233
#, no-wrap
msgid "1"
msgstr ""

# type: table
#: lispref/display.texi:5158
msgid ""
"The glyph for the end of a continued line (the default is @samp{\\}).  On "
"graphical terminals, Emacs uses curved arrows in the fringes to indicate "
"continuation, so the display table has no effect."
msgstr ""

# type: item
#: lispref/display.texi:5159
#, no-wrap
msgid "2"
msgstr ""

# type: table
#: lispref/display.texi:5162
msgid ""
"The glyph for indicating a character displayed as an octal character code "
"(the default is @samp{\\})."
msgstr ""

# type: item
#: lispref/display.texi:5163
#, no-wrap
msgid "3"
msgstr ""

# type: table
#: lispref/display.texi:5165
msgid "The glyph for indicating a control character (the default is @samp{^})."
msgstr ""

# type: item
#: lispref/display.texi:5166
#, no-wrap
msgid "4"
msgstr ""

# type: table
#: lispref/display.texi:5169
msgid ""
"A vector of glyphs for indicating the presence of invisible lines (the "
"default is @samp{...}).  @xref{Selective Display}."
msgstr ""

# type: item
#: lispref/display.texi:5170
#, no-wrap
msgid "5"
msgstr ""

# type: table
#: lispref/display.texi:5175
msgid ""
"The glyph used to draw the border between side-by-side windows (the default "
"is @samp{|}).  @xref{Splitting Windows}.  This takes effect only when there "
"are no scroll bars; if scroll bars are supported and in use, a scroll bar "
"separates the two windows."
msgstr ""

# type: Plain text
#: lispref/display.texi:5179
msgid ""
"For example, here is how to construct a display table that mimics the effect "
"of setting @code{ctl-arrow} to a non-@code{nil} value:"
msgstr ""

# type: example
#: lispref/display.texi:5188
#, no-wrap
msgid ""
"(setq disptab (make-display-table))\n"
"(let ((i 0))\n"
"  (while (< i 32)\n"
"    (or (= i ?\\t) (= i ?\\n)\n"
"        (aset disptab i (vector ?^ (+ i 64))))\n"
"    (setq i (1+ i)))\n"
"  (aset disptab 127 (vector ?^ ??)))\n"
msgstr ""

# type: defun
#: lispref/display.texi:5190
#, no-wrap
msgid "display-table-slot display-table slot"
msgstr ""

# type: defun
#: lispref/display.texi:5196
msgid ""
"This function returns the value of the extra slot @var{slot} of @var{display-"
"table}.  The argument @var{slot} may be a number from 0 to 5 inclusive, or a "
"slot name (symbol).  Valid symbols are @code{truncation}, @code{wrap}, @code"
"{escape}, @code{control}, @code{selective-display}, and @code{vertical-"
"border}."
msgstr ""

# type: defun
#: lispref/display.texi:5198
#, no-wrap
msgid "set-display-table-slot display-table slot value"
msgstr ""

# type: defun
#: lispref/display.texi:5204
msgid ""
"This function stores @var{value} in the extra slot @var{slot} of @var"
"{display-table}.  The argument @var{slot} may be a number from 0 to 5 "
"inclusive, or a slot name (symbol).  Valid symbols are @code{truncation}, "
"@code{wrap}, @code{escape}, @code{control}, @code{selective-display}, and "
"@code{vertical-border}."
msgstr ""

# type: defun
#: lispref/display.texi:5206
#, no-wrap
msgid "describe-display-table display-table"
msgstr ""

# type: defun
#: lispref/display.texi:5209
msgid ""
"This function displays a description of the display table @var{display-"
"table} in a help buffer."
msgstr ""

# type: deffn
#: lispref/display.texi:5211
#, no-wrap
msgid "Command describe-current-display-table"
msgstr ""

# type: deffn
#: lispref/display.texi:5214
msgid ""
"This command displays a description of the current display table in a help "
"buffer."
msgstr ""

# type: cindex
#: lispref/display.texi:5218
#, no-wrap
msgid "active display table"
msgstr ""

# type: Plain text
#: lispref/display.texi:5226
msgid ""
"Each window can specify a display table, and so can each buffer.  When a "
"buffer @var{b} is displayed in window @var{w}, display uses the display "
"table for window @var{w} if it has one; otherwise, the display table for "
"buffer @var{b} if it has one; otherwise, the standard display table if any.  "
"The display table chosen is called the @dfn{active} display table."
msgstr ""

# type: defun
#: lispref/display.texi:5227
#, no-wrap
msgid "window-display-table &optional window"
msgstr ""

# type: defun
#: lispref/display.texi:5231
msgid ""
"This function returns @var{window}'s display table, or @code{nil} if @var"
"{window} does not have an assigned display table.  The default for @var"
"{window} is the selected window."
msgstr ""

# type: defun
#: lispref/display.texi:5233
#, no-wrap
msgid "set-window-display-table window table"
msgstr ""

# type: defun
#: lispref/display.texi:5237
msgid ""
"This function sets the display table of @var{window} to @var{table}.  The "
"argument @var{table} should be either a display table or @code{nil}."
msgstr ""

# type: item
#: lispref/display.texi:5239 lispref/locals.texi:40
#, no-wrap
msgid "buffer-display-table"
msgstr ""

# type: defvar
#: lispref/display.texi:5244
msgid ""
"This variable is automatically buffer-local in all buffers; its value in a "
"particular buffer specifies the display table for that buffer.  If it is "
"@code{nil}, that means the buffer does not have an assigned display table."
msgstr ""

# type: defvar
#: lispref/display.texi:5246
#, no-wrap
msgid "standard-display-table"
msgstr ""

# type: defvar
#: lispref/display.texi:5250
msgid ""
"This variable's value is the default display table, used whenever a window "
"has no display table and neither does the buffer displayed in that window.  "
"This variable is @code{nil} by default."
msgstr ""

# type: Plain text
#: lispref/display.texi:5257
msgid ""
"If there is no display table to use for a particular window---that is, if "
"the window specifies none, its buffer specifies none, and @code{standard-"
"display-table} is @code{nil}---then Emacs uses the usual display conventions "
"for all character codes in that window.  @xref{Usual Display}."
msgstr ""

# type: Plain text
#: lispref/display.texi:5260
msgid ""
"A number of functions for changing the standard display table are defined in "
"the library @file{disp-table}."
msgstr ""

# type: cindex
#: lispref/display.texi:5264
#, no-wrap
msgid "glyph"
msgstr ""

# type: Plain text
#: lispref/display.texi:5268
msgid ""
"A @dfn{glyph} is a generalization of a character; it stands for an image "
"that takes up a single character position on the screen.  Normally glyphs "
"come from vectors in the display table (@pxref{Display Tables})."
msgstr ""

# type: Plain text
#: lispref/display.texi:5273
msgid ""
"A glyph is represented in Lisp as a @dfn{glyph code}.  A glyph code can be "
"@dfn{simple} or it can be defined by the @dfn{glyph table}.  A simple glyph "
"code is just a way of specifying a character and a face to output it in.  "
"@xref{Faces}."
msgstr ""

# type: Plain text
#: lispref/display.texi:5275
msgid "The following functions are used to manipulate simple glyph codes:"
msgstr ""

# type: defun
#: lispref/display.texi:5276
#, no-wrap
msgid "make-glyph-code char &optional face"
msgstr ""

# type: defun
#: lispref/display.texi:5279
msgid ""
"This function returns a simple glyph code representing char @var{char} with "
"face @var{face}."
msgstr ""

# type: defun
#: lispref/display.texi:5281
#, no-wrap
msgid "glyph-char glyph"
msgstr ""

# type: defun
#: lispref/display.texi:5283
msgid "This function returns the character of simple glyph code @var{glyph}."
msgstr ""

# type: defun
#: lispref/display.texi:5285
#, no-wrap
msgid "glyph-face glyph"
msgstr ""

# type: defun
#: lispref/display.texi:5288
msgid ""
"This function returns face of simple glyph code @var{glyph}, or @code{nil} "
"if @var{glyph} has the default face (face-id 0)."
msgstr ""

# type: Plain text
#: lispref/display.texi:5292
msgid ""
"On character terminals, you can set up a @dfn{glyph table} to define the "
"meaning of glyph codes (represented as small integers)."
msgstr ""

# type: defvar
#: lispref/display.texi:5293
#, no-wrap
msgid "glyph-table"
msgstr ""

# type: defvar
#: lispref/display.texi:5297
msgid ""
"The value of this variable is the current glyph table.  It should be @code"
"{nil} or a vector whose @var{g}th element defines glyph code @var{g}."
msgstr ""

# type: defvar
#: lispref/display.texi:5301
msgid ""
"If a glyph code is greater than or equal to the length of the glyph table, "
"that code is automatically simple.  If @code{glyph-table} is @code{nil} then "
"all glyph codes are simple."
msgstr ""

# type: defvar
#: lispref/display.texi:5304
msgid ""
"The glyph table is used only on character terminals.  On graphical displays, "
"all glyph codes are simple."
msgstr ""

# type: Plain text
#: lispref/display.texi:5307
msgid "Here are the meaningful types of elements in the glyph table:"
msgstr ""

# type: table
#: lispref/display.texi:5312
msgid ""
"Send the characters in @var{string} to the terminal to output this glyph "
"code."
msgstr ""

# type: var{#1}
#: lispref/display.texi:5313
#, no-wrap
msgid "code"
msgstr ""

# type: table
#: lispref/display.texi:5317
msgid ""
"Define this glyph code as an alias for glyph code @var{code} created by @code"
"{make-glyph-code}.  You can use such an alias to define a small-numbered "
"glyph code which specifies a character with a face."
msgstr ""

# type: table
#: lispref/display.texi:5320
msgid "This glyph code is simple."
msgstr ""

# type: defun
#: lispref/display.texi:5322
#, no-wrap
msgid "create-glyph string"
msgstr ""

# type: defun
#: lispref/display.texi:5325
msgid ""
"This function returns a newly-allocated glyph code which is set up to "
"display by sending @var{string} to the terminal."
msgstr ""

# type: cindex
#: lispref/display.texi:5330
#, no-wrap
msgid "bell"
msgstr ""

# type: Plain text
#: lispref/display.texi:5337
msgid ""
"This section describes how to make Emacs ring the bell (or blink the screen) "
"to attract the user's attention.  Be conservative about how often you do "
"this; frequent bells can become irritating.  Also be careful not to use just "
"beeping when signaling an error is more appropriate.  (@xref{Errors}.)"
msgstr ""

# type: defun
#: lispref/display.texi:5338
#, no-wrap
msgid "ding &optional do-not-terminate"
msgstr ""

# type: cindex
#: lispref/display.texi:5339
#, no-wrap
msgid "keyboard macro termination"
msgstr ""

# type: defun
#: lispref/display.texi:5343
msgid ""
"This function beeps, or flashes the screen (see @code{visible-bell} below).  "
"It also terminates any keyboard macro currently executing unless @var{do-not-"
"terminate} is non-@code{nil}."
msgstr ""

# type: defun
#: lispref/display.texi:5345
#, no-wrap
msgid "beep &optional do-not-terminate"
msgstr ""

# type: defun
#: lispref/display.texi:5347
msgid "This is a synonym for @code{ding}."
msgstr ""

# type: defopt
#: lispref/display.texi:5349
#, no-wrap
msgid "visible-bell"
msgstr "visible-bell"

# type: defopt
#: lispref/display.texi:5355
msgid ""
"This variable determines whether Emacs should flash the screen to represent "
"a bell.  Non-@code{nil} means yes, @code{nil} means no.  This is effective "
"on graphical displays, and on text-only terminals provided the terminal's "
"Termcap entry defines the visible bell capability (@samp{vb})."
msgstr ""

# type: defvar
#: lispref/display.texi:5357
#, no-wrap
msgid "ring-bell-function"
msgstr "ring-bell-function"

# type: defvar
#: lispref/display.texi:5362
msgid ""
"If this is non-@code{nil}, it specifies how Emacs should ``ring the bell.'' "
"Its value should be a function of no arguments.  If this is non-@code{nil}, "
"it takes precedence over the @code{visible-bell} variable."
msgstr ""

# type: Plain text
#: lispref/display.texi:5371
msgid ""
"Emacs works with several window systems, most notably the X Window System.  "
"Both Emacs and X use the term ``window,'' but use it differently.  An Emacs "
"frame is a single window as far as X is concerned; the individual Emacs "
"windows are not known to X at all."
msgstr ""

# type: defvar
#: lispref/display.texi:5372
#, no-wrap
msgid "window-system"
msgstr "window-system"

# type: defvar
#: lispref/display.texi:5375
msgid ""
"This variable tells Lisp programs what window system Emacs is running "
"under.  The possible values are"
msgstr ""

# type: cindex
#: lispref/display.texi:5378
#, no-wrap
msgid "X Window System"
msgstr ""

# type: table
#: lispref/display.texi:5380
msgid "Emacs is displaying using X."
msgstr ""

# type: item
#: lispref/display.texi:5380 lispref/frames.texi:47
#, no-wrap
msgid "pc"
msgstr "pc"

# type: table
#: lispref/display.texi:5382
msgid "Emacs is displaying using MS-DOS."
msgstr ""

# type: item
#: lispref/display.texi:5382 lispref/frames.texi:45
#, no-wrap
msgid "w32"
msgstr "w32"

# type: table
#: lispref/display.texi:5384
msgid "Emacs is displaying using Windows."
msgstr ""

# type: item
#: lispref/display.texi:5384 lispref/frames.texi:43
#, no-wrap
msgid "mac"
msgstr "mac"

# type: table
#: lispref/display.texi:5386
msgid "Emacs is displaying using a Macintosh."
msgstr ""

# type: table
#: lispref/display.texi:5388
msgid "Emacs is using a character-based terminal."
msgstr ""

# type: item
#: lispref/display.texi:5391 lispref/hooks.texi:320
#, no-wrap
msgid "window-setup-hook"
msgstr "window-setup-hook"

# type: defvar
#: lispref/display.texi:5397
msgid ""
"This variable is a normal hook which Emacs runs after handling the "
"initialization files.  Emacs runs this hook after it has completed loading "
"your init file, the default initialization file (if any), and the terminal-"
"specific Lisp code, and running the hook @code{term-setup-hook}."
msgstr ""

# type: defvar
#: lispref/display.texi:5401
msgid ""
"This hook is used for internal purposes: setting up communication with the "
"window system, and creating the initial window.  Users should not interfere "
"with it."
msgstr ""

# type: ignore
#: lispref/display.texi:5405
#, no-wrap
msgid "   arch-tag: ffdf5714-7ecf-415b-9023-fbc6b409c2c6\n"
msgstr "   arch-tag: ffdf5714-7ecf-415b-9023-fbc6b409c2c6\n"

# type: node
#: lispref/doclicense.texi:2 lispref/elisp.texi:174 lispref/gpl.texi:4
#: lispref/tips.texi:7
#, no-wrap
msgid "GPL"
msgstr "GPL"

# type: center
#: lispref/doclicense.texi:5
#, no-wrap
msgid "Version 1.2, November 2002"
msgstr "Version 1.2, novembre 2002"

# type: display
#: lispref/doclicense.texi:10
#, no-wrap
msgid ""
"Copyright (C) 2000,2001,2002  Free Software Foundation, Inc.\n"
"51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n"
"\n"
msgstr ""
"Copyright (C) 2000,2001,2002  Free Software Foundation, Inc.\n"
"51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n"
"\n"

# type: display
#: lispref/doclicense.texi:13 lispref/gpl.texi:15
#, no-wrap
msgid ""
"Everyone is permitted to copy and distribute verbatim copies\n"
"of this license document, but changing it is not allowed.\n"
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:18
msgid "PREAMBLE"
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:26
msgid ""
"The purpose of this License is to make a manual, textbook, or other "
"functional and useful document ``free'' in the sense of freedom: to assure "
"everyone the effective freedom to copy and redistribute it, with or without "
"modifying it, either commercially or noncommercially.  Secondarily, this "
"License preserves for the author and publisher a way to get credit for their "
"work, while not being considered responsible for modifications made by "
"others."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:31
msgid ""
"This License is a kind of ``copyleft,'' which means that derivative works of "
"the document must themselves be free in the same sense.  It complements the "
"GNU General Public License, which is a copyleft license designed for free "
"software."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:39
msgid ""
"We have designed this License in order to use it for manuals for free "
"software, because free software needs free documentation: a free program "
"should come with manuals providing the same freedoms that the software "
"does.  But this License is not limited to software manuals; it can be used "
"for any textual work, regardless of subject matter or whether it is "
"published as a printed book.  We recommend this License principally for "
"works whose purpose is instruction or reference."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:43
msgid "APPLICABILITY AND DEFINITIONS"
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:53
msgid ""
"This License applies to any manual or other work, in any medium, that "
"contains a notice placed by the copyright holder saying it can be "
"distributed under the terms of this License.  Such a notice grants a world-"
"wide, royalty-free license, unlimited in duration, to use that work under "
"the conditions stated herein.  The ``Document,'' below, refers to any such "
"manual or work.  Any member of the public is a licensee, and is addressed as "
"``you.'' You accept the license if you copy, modify or distribute the work "
"in a way requiring permission under copyright law."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:57
msgid ""
"A ``Modified Version'' of the Document means any work containing the "
"Document or a portion of it, either copied verbatim, or with modifications "
"and/or translated into another language."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:68
msgid ""
"A ``Secondary Section'' is a named appendix or a front-matter section of the "
"Document that deals exclusively with the relationship of the publishers or "
"authors of the Document to the Document's overall subject (or to related "
"matters) and contains nothing that could fall directly within that overall "
"subject.  (Thus, if the Document is in part a textbook of mathematics, a "
"Secondary Section may not explain any mathematics.)  The relationship could "
"be a matter of historical connection with the subject or with related "
"matters, or of legal, commercial, philosophical, ethical or political "
"position regarding them."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:76
msgid ""
"The ``Invariant Sections'' are certain Secondary Sections whose titles are "
"designated, as being those of Invariant Sections, in the notice that says "
"that the Document is released under this License.  If a section does not fit "
"the above definition of Secondary then it is not allowed to be designated as "
"Invariant.  The Document may contain zero Invariant Sections.  If the "
"Document does not identify any Invariant Sections then there are none."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:81
msgid ""
"The ``Cover Texts'' are certain short passages of text that are listed, as "
"Front-Cover Texts or Back-Cover Texts, in the notice that says that the "
"Document is released under this License.  A Front-Cover Text may be at most "
"5 words, and a Back-Cover Text may be at most 25 words."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:94
msgid ""
"A ``Transparent'' copy of the Document means a machine-readable copy, "
"represented in a format whose specification is available to the general "
"public, that is suitable for revising the document straightforwardly with "
"generic text editors or (for images composed of pixels) generic paint "
"programs or (for drawings) some widely available drawing editor, and that is "
"suitable for input to text formatters or for automatic translation to a "
"variety of formats suitable for input to text formatters.  A copy made in an "
"otherwise Transparent file format whose markup, or absence of markup, has "
"been arranged to thwart or discourage subsequent modification by readers is "
"not Transparent.  An image format is not Transparent if used for any "
"substantial amount of text.  A copy that is not ``Transparent'' is called "
"``Opaque.''"
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:106
msgid ""
"Examples of suitable formats for Transparent copies include plain ASCII "
"without markup, Texinfo input format, LaTeX input format, SGML or XML using "
"a publicly available DTD, and standard-conforming simple HTML, PostScript or "
"PDF designed for human modification.  Examples of transparent image formats "
"include PNG, XCF and JPG.  Opaque formats include proprietary formats that "
"can be read and edited only by proprietary word processors, SGML or XML for "
"which the DTD and/or processing tools are not generally available, and the "
"machine-generated HTML, PostScript or PDF produced by some word processors "
"for output purposes only."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:113
msgid ""
"The ``Title Page'' means, for a printed book, the title page itself, plus "
"such following pages as are needed to hold, legibly, the material this "
"License requires to appear in the title page.  For works in formats which do "
"not have any title page as such, ``Title Page'' means the text near the most "
"prominent appearance of the work's title, preceding the beginning of the "
"body of the text."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:121
msgid ""
"A section ``Entitled XYZ'' means a named subunit of the Document whose title "
"either is precisely XYZ or contains XYZ in parentheses following text that "
"translates XYZ in another language.  (Here XYZ stands for a specific section "
"name mentioned below, such as ``Acknowledgements,'' ``Dedications,'' "
"``Endorsements,'' or ``History.'')  To ``Preserve the Title'' of such a "
"section when you modify the Document means that it remains a section "
"``Entitled XYZ'' according to this definition."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:128
msgid ""
"The Document may include Warranty Disclaimers next to the notice which "
"states that this License applies to the Document.  These Warranty "
"Disclaimers are considered to be included by reference in this License, but "
"only as regards disclaiming warranties: any other implication that these "
"Warranty Disclaimers may have is void and has no effect on the meaning of "
"this License."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:131
msgid "VERBATIM COPYING"
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:141
msgid ""
"You may copy and distribute the Document in any medium, either commercially "
"or noncommercially, provided that this License, the copyright notices, and "
"the license notice saying this License applies to the Document are "
"reproduced in all copies, and that you add no other conditions whatsoever to "
"those of this License.  You may not use technical measures to obstruct or "
"control the reading or further copying of the copies you make or "
"distribute.  However, you may accept compensation in exchange for copies.  "
"If you distribute a large enough number of copies you must also follow the "
"conditions in section 3."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:144
msgid ""
"You may also lend copies, under the same conditions stated above, and you "
"may publicly display copies."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:147
msgid "COPYING IN QUANTITY"
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:160
msgid ""
"If you publish printed copies (or copies in media that commonly have printed "
"covers) of the Document, numbering more than 100, and the Document's license "
"notice requires Cover Texts, you must enclose the copies in covers that "
"carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the "
"front cover, and Back-Cover Texts on the back cover.  Both covers must also "
"clearly and legibly identify you as the publisher of these copies.  The "
"front cover must present the full title with all words of the title equally "
"prominent and visible.  You may add other material on the covers in "
"addition.  Copying with changes limited to the covers, as long as they "
"preserve the title of the Document and satisfy these conditions, can be "
"treated as verbatim copying in other respects."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:165
msgid ""
"If the required texts for either cover are too voluminous to fit legibly, "
"you should put the first ones listed (as many as fit reasonably) on the "
"actual cover, and continue the rest onto adjacent pages."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:178
msgid ""
"If you publish or distribute Opaque copies of the Document numbering more "
"than 100, you must either include a machine-readable Transparent copy along "
"with each Opaque copy, or state in or with each Opaque copy a computer-"
"network location from which the general network-using public has access to "
"download using public-standard network protocols a complete Transparent copy "
"of the Document, free of added material.  If you use the latter option, you "
"must take reasonably prudent steps, when you begin distribution of Opaque "
"copies in quantity, to ensure that this Transparent copy will remain thus "
"accessible at the stated location until at least one year after the last "
"time you distribute an Opaque copy (directly or through your agents or "
"retailers) of that edition to the public."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:182
msgid ""
"It is requested, but not required, that you contact the authors of the "
"Document well before redistributing any large number of copies, to give them "
"a chance to provide you with an updated version of the Document."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:185
msgid "MODIFICATIONS"
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:192
msgid ""
"You may copy and distribute a Modified Version of the Document under the "
"conditions of sections 2 and 3 above, provided that you release the Modified "
"Version under precisely this License, with the Modified Version filling the "
"role of the Document, thus licensing distribution and modification of the "
"Modified Version to whoever possesses a copy of it.  In addition, you must "
"do these things in the Modified Version:"
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:240
msgid ""
"A. Use in the Title Page (and on the covers, if any) a title distinct from "
"that of the Document, and from those of previous versions (which should, if "
"there were any, be listed in the History section of the Document).  You may "
"use the same title as a previous version if the original publisher of that "
"version gives permission.@* B. List on the Title Page, as authors, one or "
"more persons or entities responsible for authorship of the modifications in "
"the Modified Version, together with at least five of the principal authors "
"of the Document (all of its principal authors, if it has fewer than five), "
"unless they release you from this requirement.@* C. State on the Title page "
"the name of the publisher of the Modified Version, as the publisher.@* D. "
"Preserve all the copyright notices of the Document.@* E. Add an appropriate "
"copyright notice for your modifications adjacent to the other copyright "
"notices.@* F. Include, immediately after the copyright notices, a license "
"notice giving the public permission to use the Modified Version under the "
"terms of this License, in the form shown in the Addendum below.@* G. "
"Preserve in that license notice the full lists of Invariant Sections and "
"required Cover Texts given in the Document's license notice.@* H. Include an "
"unaltered copy of this License.@* I. Preserve the section Entitled "
"``History,'' Preserve its Title, and add to it an item stating at least the "
"title, year, new authors, and publisher of the Modified Version as given on "
"the Title Page.  If there is no section Entitled ``History'' in the "
"Document, create one stating the title, year, authors, and publisher of the "
"Document as given on its Title Page, then add an item describing the "
"Modified Version as stated in the previous sentence.@* J. Preserve the "
"network location, if any, given in the Document for public access to a "
"Transparent copy of the Document, and likewise the network locations given "
"in the Document for previous versions it was based on.  These may be placed "
"in the ``History'' section.  You may omit a network location for a work that "
"was published at least four years before the Document itself, or if the "
"original publisher of the version it refers to gives permission.@* K. For "
"any section Entitled ``Acknowledgements'' or ``Dedications,'' Preserve the "
"Title of the section, and preserve in the section all the substance and tone "
"of each of the contributor acknowledgements and/or dedications given therein."
"@* L. Preserve all the Invariant Sections of the Document, unaltered in "
"their text and in their titles.  Section numbers or the equivalent are not "
"considered part of the section titles.@* M. Delete any section Entitled "
"``Endorsements.'' Such a section may not be included in the Modified Version."
"@* N. Do not retitle any existing section to be Entitled ``Endorsements'' or "
"to conflict in title with any Invariant Section.@* O. Preserve any Warranty "
"Disclaimers.@*"
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:247
msgid ""
"If the Modified Version includes new front-matter sections or appendices "
"that qualify as Secondary Sections and contain no material copied from the "
"Document, you may at your option designate some or all of these sections as "
"invariant.  To do this, add their titles to the list of Invariant Sections "
"in the Modified Version's license notice.  These titles must be distinct "
"from any other section titles."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:253
msgid ""
"You may add a section Entitled ``Endorsements,'' provided it contains "
"nothing but endorsements of your Modified Version by various parties--for "
"example, statements of peer review or that the text has been approved by an "
"organization as the authoritative definition of a standard."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:263
msgid ""
"You may add a passage of up to five words as a Front-Cover Text, and a "
"passage of up to 25 words as a Back-Cover Text, to the end of the list of "
"Cover Texts in the Modified Version.  Only one passage of Front-Cover Text "
"and one of Back-Cover Text may be added by (or through arrangements made by) "
"any one entity.  If the Document already includes a cover text for the same "
"cover, previously added by you or by arrangement made by the same entity you "
"are acting on behalf of, you may not add another; but you may replace the "
"old one, on explicit permission from the previous publisher that added the "
"old one."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:267
msgid ""
"The author(s) and publisher(s) of the Document do not by this License give "
"permission to use their names for publicity for or to assert or imply "
"endorsement of any Modified Version."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:270
msgid "COMBINING DOCUMENTS"
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:277
msgid ""
"You may combine the Document with other documents released under this "
"License, under the terms defined in section 4 above for modified versions, "
"provided that you include in the combination all of the Invariant Sections "
"of all of the original documents, unmodified, and list them all as Invariant "
"Sections of your combined work in its license notice, and that you preserve "
"all their Warranty Disclaimers."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:286
msgid ""
"The combined work need only contain one copy of this License, and multiple "
"identical Invariant Sections may be replaced with a single copy.  If there "
"are multiple Invariant Sections with the same name but different contents, "
"make the title of each such section unique by adding at the end of it, in "
"parentheses, the name of the original author or publisher of that section if "
"known, or else a unique number.  Make the same adjustment to the section "
"titles in the list of Invariant Sections in the license notice of the "
"combined work."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:292
msgid ""
"In the combination, you must combine any sections Entitled ``History'' in "
"the various original documents, forming one section Entitled ``History''; "
"likewise combine any sections Entitled ``Acknowledgements,'' and any "
"sections Entitled ``Dedications.'' You must delete all sections Entitled "
"``Endorsements.''"
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:295
msgid "COLLECTIONS OF DOCUMENTS"
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:301
msgid ""
"You may make a collection consisting of the Document and other documents "
"released under this License, and replace the individual copies of this "
"License in the various documents with a single copy that is included in the "
"collection, provided that you follow the rules of this License for verbatim "
"copying of each of the documents in all other respects."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:306
msgid ""
"You may extract a single document from such a collection, and distribute it "
"individually under this License, provided you insert a copy of this License "
"into the extracted document, and follow this License in all other respects "
"regarding verbatim copying of that document."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:309
msgid "AGGREGATION WITH INDEPENDENT WORKS"
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:318
msgid ""
"A compilation of the Document or its derivatives with other separate and "
"independent documents or works, in or on a volume of a storage or "
"distribution medium, is called an ``aggregate'' if the copyright resulting "
"from the compilation is not used to limit the legal rights of the "
"compilation's users beyond what the individual works permit.  When the "
"Document is included in an aggregate, this License does not apply to the "
"other works in the aggregate which are not themselves derivative works of "
"the Document."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:326
msgid ""
"If the Cover Text requirement of section 3 is applicable to these copies of "
"the Document, then if the Document is less than one half of the entire "
"aggregate, the Document's Cover Texts may be placed on covers that bracket "
"the Document within the aggregate, or the electronic equivalent of covers if "
"the Document is in electronic form.  Otherwise they must appear on printed "
"covers that bracket the whole aggregate."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:329
msgid "TRANSLATION"
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:342
msgid ""
"Translation is considered a kind of modification, so you may distribute "
"translations of the Document under the terms of section 4.  Replacing "
"Invariant Sections with translations requires special permission from their "
"copyright holders, but you may include translations of some or all Invariant "
"Sections in addition to the original versions of these Invariant Sections.  "
"You may include a translation of this License, and all the license notices "
"in the Document, and any Warranty Disclaimers, provided that you also "
"include the original English version of this License and the original "
"versions of those notices and disclaimers.  In case of a disagreement "
"between the translation and the original version of this License or a notice "
"or disclaimer, the original version will prevail."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:347
msgid ""
"If a section in the Document is Entitled ``Acknowledgements,'' "
"``Dedications,'' or ``History,'' the requirement (section 4) to Preserve its "
"Title (section 1) will typically require changing the actual title."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:350
msgid "TERMINATION"
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:358
msgid ""
"You may not copy, modify, sublicense, or distribute the Document except as "
"expressly provided for under this License.  Any other attempt to copy, "
"modify, sublicense or distribute the Document is void, and will "
"automatically terminate your rights under this License.  However, parties "
"who have received copies, or rights, from you under this License will not "
"have their licenses terminated so long as such parties remain in full "
"compliance."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:361
msgid "FUTURE REVISIONS OF THIS LICENSE"
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:367
msgid ""
"The Free Software Foundation may publish new, revised versions of the GNU "
"Free Documentation License from time to time.  Such new versions will be "
"similar in spirit to the present version, but may differ in detail to "
"address new problems or concerns.  See http://www.gnu.org/copyleft/."
msgstr ""

# type: enumerate
#: lispref/doclicense.texi:376
msgid ""
"Each version of the License is given a distinguishing version number.  If "
"the Document specifies that a particular numbered version of this License "
"``or any later version'' applies to it, you have the option of following the "
"terms and conditions either of that specified version or of any later "
"version that has been published (not as a draft) by the Free Software "
"Foundation.  If the Document does not specify a version number of this "
"License, you may choose any version ever published (not as a draft) by the "
"Free Software Foundation."
msgstr ""

# type: unnumberedsec
#: lispref/doclicense.texi:379
#, no-wrap
msgid "ADDENDUM: How to use this License for your documents"
msgstr ""

# type: Plain text
#: lispref/doclicense.texi:384
msgid ""
"To use this License in a document you have written, include a copy of the "
"License in the document and put the following copyright and license notices "
"just after the title page:"
msgstr ""

# type: group
#: lispref/doclicense.texi:394
#, no-wrap
msgid ""
"Copyright (C)  @var{year}  @var{your name}.\n"
"Permission is granted to copy, distribute and/or modify this document\n"
"under the terms of the GNU Free Documentation License, Version 1.2\n"
"or any later version published by the Free Software Foundation;\n"
"with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.\n"
"A copy of the license is included in the section entitled ``GNU\n"
"Free Documentation License.''\n"
msgstr ""

# type: Plain text
#: lispref/doclicense.texi:399
msgid ""
"If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, "
"replace the ``with...Texts.'' line with this:"
msgstr ""

# type: group
#: lispref/doclicense.texi:405
#, no-wrap
msgid ""
"with the Invariant Sections being @var{list their titles}, with the\n"
"Front-Cover Texts being @var{list}, and with the Back-Cover Texts being\n"
"@var{list}.\n"
msgstr ""

# type: Plain text
#: lispref/doclicense.texi:411
msgid ""
"If you have Invariant Sections without Cover Texts, or some other "
"combination of the three, merge those two alternatives to suit the situation."
msgstr ""

# type: Plain text
#: lispref/doclicense.texi:416
msgid ""
"If your document contains nontrivial examples of program code, we recommend "
"releasing these examples in parallel under your choice of free software "
"license, such as the GNU General Public License, to permit their use in free "
"software."
msgstr ""

# type: ignore
#: lispref/doclicense.texi:419
#, no-wrap
msgid "   arch-tag: 9014cf6e-f3c4-401d-b8da-4fe52723984c\n"
msgstr "   arch-tag: 9014cf6e-f3c4-401d-b8da-4fe52723984c\n"

# type: cindex
#: lispref/edebug.texi:15
#, no-wrap
msgid "Edebug debugging facility"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:19
msgid ""
"Edebug is a source-level debugger for Emacs Lisp programs with which you can:"
msgstr ""

# type: itemize
#: lispref/edebug.texi:23
msgid "Step through evaluation, stopping before and after each expression."
msgstr ""

# type: itemize
#: lispref/edebug.texi:26
msgid "Set conditional or unconditional breakpoints."
msgstr ""

# type: itemize
#: lispref/edebug.texi:29
msgid "Stop when a specified condition is true (the global break event)."
msgstr ""

# type: itemize
#: lispref/edebug.texi:33
msgid ""
"Trace slow or fast, stopping briefly at each stop point, or at each "
"breakpoint."
msgstr ""

# type: itemize
#: lispref/edebug.texi:37
msgid ""
"Display expression results and evaluate expressions as if outside of Edebug."
msgstr ""

# type: itemize
#: lispref/edebug.texi:41
msgid ""
"Automatically re-evaluate a list of expressions and display their results "
"each time Edebug updates the display."
msgstr ""

# type: itemize
#: lispref/edebug.texi:44
msgid "Output trace info on function enter and exit."
msgstr ""

# type: itemize
#: lispref/edebug.texi:47
msgid "Stop when an error occurs."
msgstr ""

# type: itemize
#: lispref/edebug.texi:50
msgid "Display a backtrace, omitting Edebug's own frames."
msgstr ""

# type: itemize
#: lispref/edebug.texi:53
msgid "Specify argument evaluation for macros and defining forms."
msgstr ""

# type: itemize
#: lispref/edebug.texi:56
msgid "Obtain rudimentary coverage testing and frequency counts."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:60
msgid ""
"The first three sections below should tell you enough about Edebug to enable "
"you to use it."
msgstr ""

# type: subsection
#: lispref/edebug.texi:80 lispref/edebug.texi:82 lispref/edebug.texi:83
#, no-wrap
msgid "Using Edebug"
msgstr ""

# type: menu
#: lispref/edebug.texi:80
msgid "Introduction to use of Edebug."
msgstr ""

# type: node
#: lispref/edebug.texi:80 lispref/edebug.texi:152
#, no-wrap
msgid "Instrumenting"
msgstr ""

# type: menu
#: lispref/edebug.texi:80
msgid "You must instrument your code"
msgstr ""

# type: menu
#: lispref/edebug.texi:80
msgid "in order to debug it with Edebug."
msgstr ""

# type: menu
#: lispref/edebug.texi:80
msgid ""
"Modes: Edebug Execution Modes. Execution modes, stopping more or less often."
msgstr ""

# type: subsection
#: lispref/edebug.texi:80 lispref/edebug.texi:310 lispref/edebug.texi:311
#, no-wrap
msgid "Jumping"
msgstr ""

# type: menu
#: lispref/edebug.texi:80
msgid "Commands to jump to a specified place."
msgstr ""

# type: menu
#: lispref/edebug.texi:80
msgid "Misc: Edebug Misc.\t\tMiscellaneous commands."
msgstr ""

# type: subsection
#: lispref/edebug.texi:80 lispref/edebug.texi:423 lispref/edebug.texi:424
#, no-wrap
msgid "Breaks"
msgstr ""

# type: menu
#: lispref/edebug.texi:80
msgid "Setting breakpoints to make the program stop."
msgstr ""

# type: subsection
#: lispref/edebug.texi:80 lispref/edebug.texi:551 lispref/edebug.texi:552
#, no-wrap
msgid "Trapping Errors"
msgstr ""

# type: menu
#: lispref/edebug.texi:80
msgid "Trapping errors with Edebug."
msgstr ""

# type: menu
#: lispref/edebug.texi:80
msgid "Views: Edebug Views.\t\tViews inside and outside of Edebug."
msgstr ""

# type: menu
#: lispref/edebug.texi:80
msgid "Eval: Edebug Eval.\t\tEvaluating expressions within Edebug."
msgstr ""

# type: node
#: lispref/edebug.texi:80 lispref/edebug.texi:657
#, no-wrap
msgid "Eval List"
msgstr ""

# type: menu
#: lispref/edebug.texi:80
msgid "Expressions whose values are displayed"
msgstr ""

# type: menu
#: lispref/edebug.texi:80
msgid "each time you enter Edebug."
msgstr ""

# type: subsection
#: lispref/edebug.texi:80 lispref/edebug.texi:761 lispref/edebug.texi:762
#, no-wrap
msgid "Printing in Edebug"
msgstr ""

# type: menu
#: lispref/edebug.texi:80
msgid "Customization of printing."
msgstr ""

# type: subsection
#: lispref/edebug.texi:80 lispref/edebug.texi:813 lispref/edebug.texi:814
#, no-wrap
msgid "Trace Buffer"
msgstr ""

# type: menu
#: lispref/edebug.texi:80
msgid "How to produce trace output in a buffer."
msgstr ""

# type: subsection
#: lispref/edebug.texi:80 lispref/edebug.texi:860 lispref/edebug.texi:861
#, no-wrap
msgid "Coverage Testing"
msgstr ""

# type: menu
#: lispref/edebug.texi:80
msgid "How to test evaluation coverage."
msgstr ""

# type: subsection
#: lispref/edebug.texi:80 lispref/edebug.texi:931 lispref/edebug.texi:932
#, no-wrap
msgid "The Outside Context"
msgstr ""

# type: menu
#: lispref/edebug.texi:80
msgid "Data that Edebug saves and restores."
msgstr ""

# type: subsection
#: lispref/edebug.texi:80 lispref/edebug.texi:1069 lispref/edebug.texi:1070
#, no-wrap
msgid "Edebug and Macros"
msgstr ""

# type: menu
#: lispref/edebug.texi:80
msgid "Specifying how to handle macro calls."
msgstr ""

# type: menu
#: lispref/edebug.texi:80
msgid "Options: Edebug Options.\tOption variables for customizing Edebug."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:90
msgid ""
"To debug a Lisp program with Edebug, you must first @dfn{instrument} the "
"Lisp code that you want to debug.  A simple way to do this is to first move "
"point into the definition of a function or macro and then do @kbd{C-u C-M-x} "
"(@code{eval-defun} with a prefix argument).  See @ref{Instrumenting}, for "
"alternative ways to instrument code."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:97
msgid ""
"Once a function is instrumented, any call to the function activates Edebug.  "
"Depending on which Edebug execution mode you have selected, activating "
"Edebug may stop execution and let you step through the function, or it may "
"update the display and continue execution while checking for debugging "
"commands.  The default execution mode is step, which stops execution.  @xref"
"{Edebug Execution Modes}."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:101
msgid ""
"Within Edebug, you normally view an Emacs buffer showing the source of the "
"Lisp code you are debugging.  This is referred to as the @dfn{source code "
"buffer}, and it is temporarily read-only."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:105
msgid ""
"An arrow in the left fringe indicates the line where the function is "
"executing.  Point initially shows where within the line the function is "
"executing, but this ceases to be true if you move point yourself."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:109
msgid ""
"If you instrument the definition of @code{fac} (shown below) and then "
"execute @code{(fac 3)}, here is what you would normally see.  Point is at "
"the open-parenthesis before @code{if}."
msgstr ""

# type: example
#: lispref/edebug.texi:115
#, no-wrap
msgid ""
"(defun fac (n)\n"
"=>@point{}(if (< 0 n)\n"
"      (* n (fac (1- n)))\n"
"    1))\n"
msgstr ""

# type: cindex
#: lispref/edebug.texi:117
#, no-wrap
msgid "stop points"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:123
msgid ""
"The places within a function where Edebug can stop execution are called @dfn"
"{stop points}.  These occur both before and after each subexpression that is "
"a list, and also after each variable reference.  Here we use periods to show "
"the stop points in the function @code{fac}:"
msgstr ""

# type: example
#: lispref/edebug.texi:129
#, no-wrap
msgid ""
"(defun fac (n)\n"
"  .(if .(< 0 n.).\n"
"      .(* n. .(fac .(1- n.).).).\n"
"    1).)\n"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:136
msgid ""
"The special commands of Edebug are available in the source code buffer in "
"addition to the commands of Emacs Lisp mode.  For example, you can type the "
"Edebug command @key{SPC} to execute until the next stop point.  If you type "
"@key{SPC} once after entry to @code{fac}, here is the display you will see:"
msgstr ""

# type: example
#: lispref/edebug.texi:142
#, no-wrap
msgid ""
"(defun fac (n)\n"
"=>(if @point{}(< 0 n)\n"
"      (* n (fac (1- n)))\n"
"    1))\n"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:146
msgid ""
"When Edebug stops execution after an expression, it displays the "
"expression's value in the echo area."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:151
msgid ""
"Other frequently used commands are @kbd{b} to set a breakpoint at a stop "
"point, @kbd{g} to execute until a breakpoint is reached, and @kbd{q} to exit "
"Edebug and return to the top-level command loop.  Type @kbd{?} to display a "
"list of all Edebug commands."
msgstr ""

# type: subsection
#: lispref/edebug.texi:153
#, no-wrap
msgid "Instrumenting for Edebug"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:158
msgid ""
"In order to use Edebug to debug Lisp code, you must first @dfn{instrument} "
"the code.  Instrumenting code inserts additional code into it, to invoke "
"Edebug at the proper places."
msgstr ""

# type: kindex
#: lispref/edebug.texi:159
#, no-wrap
msgid "C-M-x"
msgstr ""

# type: findex
#: lispref/edebug.texi:160
#, no-wrap
msgid "eval-defun (Edebug)"
msgstr "eval-defun (Edebug)"

# type: Plain text
#: lispref/edebug.texi:170
msgid ""
"When you invoke command @kbd{C-M-x} (@code{eval-defun}) with a prefix "
"argument on a function definition, it instruments the definition before "
"evaluating it.  (This does not modify the source code itself.)  If the "
"variable @code{edebug-all-defs} is non-@code{nil}, that inverts the meaning "
"of the prefix argument: in this case, @kbd{C-M-x} instruments the definition "
"@emph{unless} it has a prefix argument.  The default value of @code{edebug-"
"all-defs} is @code{nil}.  The command @kbd{M-x edebug-all-defs} toggles the "
"value of the variable @code{edebug-all-defs}."
msgstr ""

# type: findex
#: lispref/edebug.texi:171
#, no-wrap
msgid "eval-region @r{(Edebug)}"
msgstr "eval-region @r{(Edebug)}"

# type: findex
#: lispref/edebug.texi:172
#, no-wrap
msgid "eval-buffer @r{(Edebug)}"
msgstr "eval-buffer @r{(Edebug)}"

# type: findex
#: lispref/edebug.texi:173
#, no-wrap
msgid "eval-current-buffer @r{(Edebug)}"
msgstr "eval-current-buffer @r{(Edebug)}"

# type: Plain text
#: lispref/edebug.texi:181
msgid ""
"If @code{edebug-all-defs} is non-@code{nil}, then the commands @code{eval-"
"region}, @code{eval-current-buffer}, and @code{eval-buffer} also instrument "
"any definitions they evaluate.  Similarly, @code{edebug-all-forms} controls "
"whether @code{eval-region} should instrument @emph{any} form, even non-"
"defining forms.  This doesn't apply to loading or evaluations in the "
"minibuffer.  The command @kbd{M-x edebug-all-forms} toggles this option."
msgstr ""

# type: findex
#: lispref/edebug.texi:182
#, no-wrap
msgid "edebug-eval-top-level-form"
msgstr "edebug-eval-top-level-form"

# type: Plain text
#: lispref/edebug.texi:186
msgid ""
"Another command, @kbd{M-x edebug-eval-top-level-form}, is available to "
"instrument any top-level form regardless of the values of @code{edebug-all-"
"defs} and @code{edebug-all-forms}."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:196
msgid ""
"While Edebug is active, the command @kbd{I} (@code{edebug-instrument-"
"callee}) instruments the definition of the function or macro called by the "
"list form after point, if is not already instrumented.  This is possible "
"only if Edebug knows where to find the source for that function; for this "
"reading, after loading Edebug, @code{eval-region} records the position of "
"every definition it evaluates, even if not instrumenting it.  See also the "
"@kbd{i} command (@pxref{Jumping}), which steps into the call after "
"instrumenting the function."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:203
msgid ""
"Edebug knows how to instrument all the standard special forms, @code"
"{interactive} forms with an expression argument, anonymous lambda "
"expressions, and other defining forms.  However, Edebug cannot determine on "
"its own what a user-defined macro will do with the arguments of a macro "
"call, so you must provide that information using Edebug specifications; see "
"@ref{Edebug and Macros}, for details."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:208
msgid ""
"When Edebug is about to instrument code for the first time in a session, it "
"runs the hook @code{edebug-setup-hook}, then sets it to @code{nil}.  You can "
"use this to load Edebug specifications associated with a package you are "
"using, but only when you use Edebug."
msgstr ""

# type: findex
#: lispref/edebug.texi:209
#, no-wrap
msgid "eval-expression @r{(Edebug)}"
msgstr "eval-expression @r{(Edebug)}"

# type: Plain text
#: lispref/edebug.texi:215
msgid ""
"To remove instrumentation from a definition, simply re-evaluate its "
"definition in a way that does not instrument.  There are two ways of "
"evaluating forms that never instrument them: from a file with @code{load}, "
"and from the minibuffer with @code{eval-expression} (@kbd{M-:})."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:218
msgid ""
"If Edebug detects a syntax error while instrumenting, it leaves point at the "
"erroneous code and signals an @code{invalid-read-syntax} error."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:221
msgid ""
"@xref{Edebug Eval}, for other evaluation functions available inside of "
"Edebug."
msgstr ""

# type: subsection
#: lispref/edebug.texi:222 lispref/edebug.texi:223
#, no-wrap
msgid "Edebug Execution Modes"
msgstr ""

# type: cindex
#: lispref/edebug.texi:225
#, no-wrap
msgid "Edebug execution modes"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:233
msgid ""
"Edebug supports several execution modes for running the program you are "
"debugging.  We call these alternatives @dfn{Edebug execution modes}; do not "
"confuse them with major or minor modes.  The current Edebug execution mode "
"determines how far Edebug continues execution before stopping---whether it "
"stops at each stop point, or continues to the next breakpoint, for example---"
"and how much Edebug displays the progress of the evaluation before it stops."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:238
msgid ""
"Normally, you specify the Edebug execution mode by typing a command to "
"continue the program in a certain mode.  Here is a table of these commands; "
"all except for @kbd{S} resume execution of the program, at least for a "
"certain distance."
msgstr ""

# type: table
#: lispref/edebug.texi:243
msgid ""
"Stop: don't execute any more of the program, but wait for more Edebug "
"commands (@code{edebug-stop})."
msgstr ""

# type: key{#1}
#: lispref/edebug.texi:244 lispref/minibuf.texi:276 lispref/minibuf.texi:1009
#: lispref/minibuf.texi:1032
#, no-wrap
msgid "SPC"
msgstr ""

# type: table
#: lispref/edebug.texi:246
msgid ""
"Step: stop at the next stop point encountered (@code{edebug-step-mode})."
msgstr ""

# type: table
#: lispref/edebug.texi:251
msgid ""
"Next: stop at the next stop point encountered after an expression (@code"
"{edebug-next-mode}).  Also see @code{edebug-forward-sexp} in @ref{Jumping}."
msgstr ""

# type: table
#: lispref/edebug.texi:255
msgid ""
"Trace: pause (normally one second) at each Edebug stop point (@code{edebug-"
"trace-mode})."
msgstr ""

# type: item
#: lispref/edebug.texi:256
#, no-wrap
msgid "T"
msgstr ""

# type: table
#: lispref/edebug.texi:259
msgid ""
"Rapid trace: update the display at each stop point, but don't actually pause "
"(@code{edebug-Trace-fast-mode})."
msgstr ""

# type: item
#: lispref/edebug.texi:260
#, no-wrap
msgid "g"
msgstr ""

# type: table
#: lispref/edebug.texi:262
msgid ""
"Go: run until the next breakpoint (@code{edebug-go-mode}).  @xref"
"{Breakpoints}."
msgstr ""

# type: table
#: lispref/edebug.texi:266
msgid ""
"Continue: pause one second at each breakpoint, and then continue (@code"
"{edebug-continue-mode})."
msgstr ""

# type: table
#: lispref/edebug.texi:270
msgid ""
"Rapid continue: move point to each breakpoint, but don't pause (@code{edebug-"
"Continue-fast-mode})."
msgstr ""

# type: table
#: lispref/edebug.texi:274
msgid ""
"Go non-stop: ignore breakpoints (@code{edebug-Go-nonstop-mode}).  You can "
"still stop the program by typing @kbd{S}, or any editing command."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:278
msgid ""
"In general, the execution modes earlier in the above list run the program "
"more slowly or stop sooner than the modes later in the list."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:284
msgid ""
"While executing or tracing, you can interrupt the execution by typing any "
"Edebug command.  Edebug stops the program at the next stop point and then "
"executes the command you typed.  For example, typing @kbd{t} during "
"execution switches to trace mode at the next stop point.  You can use @kbd"
"{S} to stop execution without doing anything else."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:289
msgid ""
"If your function happens to read input, a character you type intending to "
"interrupt execution may be read by the function instead.  You can avoid such "
"unintended results by paying attention to when your program wants input."
msgstr ""

# type: cindex
#: lispref/edebug.texi:290
#, no-wrap
msgid "keyboard macros (Edebug)"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:297
msgid ""
"Keyboard macros containing the commands in this section do not completely "
"work: exiting from Edebug, to resume the program, loses track of the "
"keyboard macro.  This is not easy to fix.  Also, defining or executing a "
"keyboard macro outside of Edebug does not affect commands inside Edebug.  "
"This is usually an advantage.  See also the @code{edebug-continue-kbd-macro} "
"option (@pxref{Edebug Options})."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:304
msgid ""
"When you enter a new Edebug level, the initial execution mode comes from the "
"value of the variable @code{edebug-initial-mode}.  (@xref{Edebug Options}.)  "
"By default, this specifies step mode.  Note that you may reenter the same "
"Edebug level several times if, for example, an instrumented function is "
"called several times from one command."
msgstr ""

# type: defopt
#: lispref/edebug.texi:305
#, no-wrap
msgid "edebug-sit-for-seconds"
msgstr "edebug-sit-for-seconds"

# type: defopt
#: lispref/edebug.texi:308
msgid ""
"This option specifies how many seconds to wait between execution steps in "
"trace mode.  The default is 1 second."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:318
msgid ""
"The commands described in this section execute until they reach a specified "
"location.  All except @kbd{i} make a temporary breakpoint to establish the "
"place to stop, then switch to go mode.  Any other breakpoint reached before "
"the intended stop point will also stop execution.  @xref{Breakpoints}, for "
"the details on breakpoints."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:322
msgid ""
"These commands may fail to work as expected in case of nonlocal exit, as "
"that can bypass the temporary breakpoint where you expected the program to "
"stop."
msgstr ""

# type: item
#: lispref/edebug.texi:324
#, no-wrap
msgid "h"
msgstr "h"

# type: table
#: lispref/edebug.texi:326
msgid ""
"Proceed to the stop point near where point is (@code{edebug-goto-here})."
msgstr ""

# type: table
#: lispref/edebug.texi:330
msgid "Run the program for one expression (@code{edebug-forward-sexp})."
msgstr ""

# type: item
#: lispref/edebug.texi:331
#, no-wrap
msgid "o"
msgstr "o"

# type: table
#: lispref/edebug.texi:333
msgid "Run the program until the end of the containing sexp."
msgstr ""

# type: table
#: lispref/edebug.texi:336
msgid "Step into the function or macro called by the form after point."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:340
msgid ""
"The @kbd{h} command proceeds to the stop point at or after the current "
"location of point, using a temporary breakpoint."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:345
msgid ""
"The @kbd{f} command runs the program forward over one expression.  More "
"precisely, it sets a temporary breakpoint at the position that @kbd{C-M-f} "
"would reach, then executes in go mode so that the program will stop at "
"breakpoints."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:350
msgid ""
"With a prefix argument @var{n}, the temporary breakpoint is placed @var{n} "
"sexps beyond point.  If the containing list ends before @var{n} more "
"elements, then the place to stop is after the containing expression."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:354
msgid ""
"You must check that the position @kbd{C-M-f} finds is a place that the "
"program will really get to.  In @code{cond}, for example, this may not be "
"true."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:359
msgid ""
"For flexibility, the @kbd{f} command does @code{forward-sexp} starting at "
"point, rather than at the stop point.  If you want to execute one expression "
"@emph{from the current stop point}, first type @kbd{w}, to move point there, "
"and then type @kbd{f}."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:367
msgid ""
"The @kbd{o} command continues ``out of'' an expression.  It places a "
"temporary breakpoint at the end of the sexp containing point.  If the "
"containing sexp is a function definition itself, @kbd{o} continues until "
"just before the last sexp in the definition.  If that is where you are now, "
"it returns from the function and then stops.  In other words, this command "
"does not exit the currently executing function unless you are positioned "
"after the last sexp."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:373
msgid ""
"The @kbd{i} command steps into the function or macro called by the list form "
"after point, and stops at its first stop point.  Note that the form need not "
"be the one about to be evaluated.  But if the form is a function call about "
"to be evaluated, remember to use this command before any of the arguments "
"are evaluated, since otherwise it will be too late."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:378
msgid ""
"The @kbd{i} command instruments the function or macro it's supposed to step "
"into, if it isn't instrumented already.  This is convenient, but keep in "
"mind that the function or macro remains instrumented unless you explicitly "
"arrange to deinstrument it."
msgstr ""

# type: node
#: lispref/edebug.texi:379
#, no-wrap
msgid "Edebug Misc"
msgstr ""

# type: subsection
#: lispref/edebug.texi:380
#, no-wrap
msgid "Miscellaneous Edebug Commands"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:383
msgid "Some miscellaneous Edebug commands are described here."
msgstr ""

# type: samp{#1}
#: lispref/edebug.texi:385 lispref/minibuf.texi:284 lispref/minibuf.texi:1006
#: lispref/minibuf.texi:1029 lispref/searching.texi:330
#, no-wrap
msgid "?"
msgstr "?"

# type: table
#: lispref/edebug.texi:387
msgid "Display the help message for Edebug (@code{edebug-help})."
msgstr ""

# type: item
#: lispref/edebug.texi:388
#, no-wrap
msgid "C-]"
msgstr "C-]"

# type: table
#: lispref/edebug.texi:391
msgid ""
"Abort one level back to the previous command level (@code{abort-recursive-"
"edit})."
msgstr ""

# type: table
#: lispref/edebug.texi:398
msgid ""
"Return to the top level editor command loop (@code{top-level}).  This exits "
"all recursive editing levels, including all levels of Edebug activity.  "
"However, instrumented code protected with @code{unwind-protect} or @code"
"{condition-case} forms may resume debugging."
msgstr ""

# type: item
#: lispref/edebug.texi:399
#, no-wrap
msgid "Q"
msgstr "Q"

# type: table
#: lispref/edebug.texi:402
msgid ""
"Like @kbd{q}, but don't stop even for protected code (@code{top-level-"
"nonstop})."
msgstr ""

# type: table
#: lispref/edebug.texi:406
msgid ""
"Redisplay the most recently known expression result in the echo area (@code"
"{edebug-previous-result})."
msgstr ""

# type: table
#: lispref/edebug.texi:410
msgid ""
"Display a backtrace, excluding Edebug's own functions for clarity (@code"
"{edebug-backtrace})."
msgstr ""

# type: table
#: lispref/edebug.texi:413
msgid ""
"You cannot use debugger commands in the backtrace buffer in Edebug as you "
"would in the standard debugger."
msgstr ""

# type: table
#: lispref/edebug.texi:416
msgid ""
"The backtrace buffer is killed automatically when you continue execution."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:422
msgid ""
"You can invoke commands from Edebug that activate Edebug again recursively.  "
"Whenever Edebug is active, you can quit to the top level with @kbd{q} or "
"abort one recursive edit level with @kbd{C-]}.  You can display a backtrace "
"of all the pending evaluations with @kbd{d}."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:429
msgid ""
"Edebug's step mode stops execution when the next stop point is reached.  "
"There are three other ways to stop Edebug execution once it has started: "
"breakpoints, the global break condition, and source breakpoints."
msgstr ""

# type: node
#: lispref/edebug.texi:434 lispref/edebug.texi:436
#, no-wrap
msgid "Breakpoints"
msgstr ""

# type: menu
#: lispref/edebug.texi:434
msgid "Breakpoints at stop points."
msgstr ""

# type: subsubsection
#: lispref/edebug.texi:434 lispref/edebug.texi:499 lispref/edebug.texi:500
#, no-wrap
msgid "Global Break Condition"
msgstr ""

# type: menu
#: lispref/edebug.texi:434
msgid "Breaking on an event."
msgstr ""

# type: subsubsection
#: lispref/edebug.texi:434 lispref/edebug.texi:522 lispref/edebug.texi:523
#, no-wrap
msgid "Source Breakpoints"
msgstr ""

# type: menu
#: lispref/edebug.texi:434
msgid "Embedding breakpoints in source code."
msgstr ""

# type: subsubsection
#: lispref/edebug.texi:437
#, no-wrap
msgid "Edebug Breakpoints"
msgstr ""

# type: cindex
#: lispref/edebug.texi:439
#, no-wrap
msgid "breakpoints (Edebug)"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:446
msgid ""
"While using Edebug, you can specify @dfn{breakpoints} in the program you are "
"testing: these are places where execution should stop.  You can set a "
"breakpoint at any stop point, as defined in @ref{Using Edebug}.  For setting "
"and unsetting breakpoints, the stop point that is affected is the first one "
"at or after point in the source code buffer.  Here are the Edebug commands "
"for breakpoints:"
msgstr ""

# type: table
#: lispref/edebug.texi:453
msgid ""
"Set a breakpoint at the stop point at or after point (@code{edebug-set-"
"breakpoint}).  If you use a prefix argument, the breakpoint is temporary---"
"it turns off the first time it stops the program."
msgstr ""

# type: table
#: lispref/edebug.texi:457
msgid ""
"Unset the breakpoint (if any) at the stop point at or after point (@code"
"{edebug-unset-breakpoint})."
msgstr ""

# type: item
#: lispref/edebug.texi:458
#, no-wrap
msgid "x @var{condition} @key{RET}"
msgstr "x @var{condition} @key{RET}"

# type: table
#: lispref/edebug.texi:463
msgid ""
"Set a conditional breakpoint which stops the program only if evaluating @var"
"{condition} produces a non-@code{nil} value (@code{edebug-set-conditional-"
"breakpoint}).  With a prefix argument, the breakpoint is temporary."
msgstr ""

# type: table
#: lispref/edebug.texi:467
msgid ""
"Move point to the next breakpoint in the current definition (@code{edebug-"
"next-breakpoint})."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:473
msgid ""
"While in Edebug, you can set a breakpoint with @kbd{b} and unset one with "
"@kbd{u}.  First move point to the Edebug stop point of your choice, then "
"type @kbd{b} or @kbd{u} to set or unset a breakpoint there.  Unsetting a "
"breakpoint where none has been set has no effect."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:476
msgid ""
"Re-evaluating or reinstrumenting a definition removes all of its previous "
"breakpoints."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:484
msgid ""
"A @dfn{conditional breakpoint} tests a condition each time the program gets "
"there.  Any errors that occur as a result of evaluating the condition are "
"ignored, as if the result were @code{nil}.  To set a conditional breakpoint, "
"use @kbd{x}, and specify the condition expression in the minibuffer.  "
"Setting a conditional breakpoint at a stop point that has a previously "
"established conditional breakpoint puts the previous condition expression in "
"the minibuffer so you can edit it."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:489
msgid ""
"You can make a conditional or unconditional breakpoint @dfn{temporary} by "
"using a prefix argument with the command to set the breakpoint.  When a "
"temporary breakpoint stops the program, it is automatically unset."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:492
msgid ""
"Edebug always stops or pauses at a breakpoint, except when the Edebug mode "
"is Go-nonstop.  In that mode, it ignores breakpoints entirely."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:498
msgid ""
"To find out where your breakpoints are, use the @kbd{B} command, which moves "
"point to the next breakpoint following point, within the same function, or "
"to the first breakpoint if there are no following breakpoints.  This command "
"does not continue execution---it just moves point in the buffer."
msgstr ""

# type: cindex
#: lispref/edebug.texi:502
#, no-wrap
msgid "stopping on events"
msgstr ""

# type: cindex
#: lispref/edebug.texi:503
#, no-wrap
msgid "global break condition"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:510
msgid ""
"A @dfn{global break condition} stops execution when a specified condition is "
"satisfied, no matter where that may occur.  Edebug evaluates the global "
"break condition at every stop point; if it evaluates to a non-@code{nil} "
"value, then execution stops or pauses depending on the execution mode, as if "
"a breakpoint had been hit.  If evaluating the condition gets an error, "
"execution does not stop."
msgstr ""

# type: findex
#: lispref/edebug.texi:511
#, no-wrap
msgid "edebug-set-global-break-condition"
msgstr "edebug-set-global-break-condition"

# type: Plain text
#: lispref/edebug.texi:517
msgid ""
"The condition expression is stored in @code{edebug-global-break-condition}.  "
"You can specify a new expression using the @kbd{X} command from the source "
"code buffer while Edebug is active, or using @kbd{C-x X X} from any buffer "
"at any time, as long as Edebug is loaded (@code{edebug-set-global-break-"
"condition})."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:521
msgid ""
"The global break condition is the simplest way to find where in your code "
"some event occurs, but it makes code run much more slowly.  So you should "
"reset the condition to @code{nil} when not using it."
msgstr ""

# type: findex
#: lispref/edebug.texi:525
#, no-wrap
msgid "edebug"
msgstr "edebug"

# type: cindex
#: lispref/edebug.texi:526
#, no-wrap
msgid "source breakpoints"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:534
msgid ""
"All breakpoints in a definition are forgotten each time you reinstrument "
"it.  If you wish to make a breakpoint that won't be forgotten, you can write "
"a @dfn{source breakpoint}, which is simply a call to the function @code"
"{edebug} in your source code.  You can, of course, make such a call "
"conditional.  For example, in the @code{fac} function, you can insert the "
"first line as shown below, to stop when the argument reaches zero:"
msgstr ""

# type: example
#: lispref/edebug.texi:541
#, no-wrap
msgid ""
"(defun fac (n)\n"
"  (if (= n 0) (edebug))\n"
"  (if (< 0 n)\n"
"      (* n (fac (1- n)))\n"
"    1))\n"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:546
msgid ""
"When the @code{fac} definition is instrumented and the function is called, "
"the call to @code{edebug} acts as a breakpoint.  Depending on the execution "
"mode, Edebug stops or pauses there."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:550
msgid ""
"If no instrumented code is being executed when @code{edebug} is called, that "
"function calls @code{debug}."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:559
msgid ""
"Emacs normally displays an error message when an error is signaled and not "
"handled with @code{condition-case}.  While Edebug is active and executing "
"instrumented code, it normally responds to all unhandled errors.  You can "
"customize this with the options @code{edebug-on-error} and @code{edebug-on-"
"quit}; see @ref{Edebug Options}."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:566
msgid ""
"When Edebug responds to an error, it shows the last stop point encountered "
"before the error.  This may be the location of a call to a function which "
"was not instrumented, and within which the error actually occurred.  For an "
"unbound variable error, the last known stop point might be quite distant "
"from the offending variable reference.  In that case, you might want to "
"display a full backtrace (@pxref{Edebug Misc})."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:572
msgid ""
"If you change @code{debug-on-error} or @code{debug-on-quit} while Edebug is "
"active, these changes will be forgotten when Edebug becomes inactive.  "
"Furthermore, during Edebug's recursive edit, these variables are bound to "
"the values they had outside of Edebug."
msgstr ""

# type: subsection
#: lispref/edebug.texi:573 lispref/edebug.texi:574
#, no-wrap
msgid "Edebug Views"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:580
msgid ""
"These Edebug commands let you view aspects of the buffer and window status "
"as they were before entry to Edebug.  The outside window configuration is "
"the collection of windows and contents that were in effect outside of Edebug."
msgstr ""

# type: table
#: lispref/edebug.texi:585
msgid ""
"Switch to viewing the outside window configuration (@code{edebug-view-"
"outside}).  Type @kbd{C-x X w} to return to Edebug."
msgstr ""

# type: table
#: lispref/edebug.texi:591
msgid ""
"Temporarily display the outside current buffer with point at its outside "
"position (@code{edebug-bounce-point}), pausing for one second before "
"returning to Edebug.  With a prefix argument @var{n}, pause for @var{n} "
"seconds instead."
msgstr ""

# type: item
#: lispref/edebug.texi:592
#, no-wrap
msgid "w"
msgstr ""

# type: table
#: lispref/edebug.texi:595
msgid ""
"Move point back to the current stop point in the source code buffer (@code"
"{edebug-where})."
msgstr ""

# type: table
#: lispref/edebug.texi:599
msgid ""
"If you use this command in a different window displaying the same buffer, "
"that window will be used instead to display the current definition in the "
"future."
msgstr ""

# type: item
#: lispref/edebug.texi:600
#, no-wrap
msgid "W"
msgstr ""

# type: table
#: lispref/edebug.texi:604
msgid ""
"Toggle whether Edebug saves and restores the outside window configuration "
"(@code{edebug-toggle-save-windows})."
msgstr ""

# type: table
#: lispref/edebug.texi:608
msgid ""
"With a prefix argument, @code{W} only toggles saving and restoring of the "
"selected window.  To specify a window that is not displaying the source code "
"buffer, you must use @kbd{C-x X W} from the global keymap."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:613
msgid ""
"You can view the outside window configuration with @kbd{v} or just bounce to "
"the point in the current buffer with @kbd{p}, even if it is not normally "
"displayed."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:618
msgid ""
"After moving point, you may wish to jump back to the stop point.  You can do "
"that with @kbd{w} from a source code buffer.  You can jump back to the stop "
"point in the source code buffer from any buffer using @kbd{C-x X w}."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:626
msgid ""
"Each time you use @kbd{W} to turn saving @emph{off}, Edebug forgets the "
"saved outside window configuration---so that even if you turn saving back "
"@emph{on}, the current window configuration remains unchanged when you next "
"exit Edebug (by continuing the program).  However, the automatic redisplay "
"of @samp{*edebug*} and @samp{*edebug-trace*} may conflict with the buffers "
"you wish to see unless you have enough windows open."
msgstr ""

# type: node
#: lispref/edebug.texi:627
#, no-wrap
msgid "Edebug Eval"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:636
msgid ""
"While within Edebug, you can evaluate expressions ``as if'' Edebug were not "
"running.  Edebug tries to be invisible to the expression's evaluation and "
"printing.  Evaluation of expressions that cause side effects will work as "
"expected, except for changes to data that Edebug explicitly saves and "
"restores.  @xref{The Outside Context}, for details on this process."
msgstr ""

# type: item
#: lispref/edebug.texi:638
#, no-wrap
msgid "e @var{exp} @key{RET}"
msgstr ""

# type: table
#: lispref/edebug.texi:642
msgid ""
"Evaluate expression @var{exp} in the context outside of Edebug (@code{edebug-"
"eval-expression}).  That is, Edebug tries to minimize its interference with "
"the evaluation."
msgstr ""

# type: item
#: lispref/edebug.texi:643
#, no-wrap
msgid "M-: @var{exp} @key{RET}"
msgstr ""

# type: table
#: lispref/edebug.texi:645
msgid "Evaluate expression @var{exp} in the context of Edebug itself."
msgstr ""

# type: item
#: lispref/edebug.texi:646 lispref/edebug.texi:680
#, no-wrap
msgid "C-x C-e"
msgstr ""

# type: table
#: lispref/edebug.texi:649 lispref/edebug.texi:683
msgid ""
"Evaluate the expression before point, in the context outside of Edebug (@code"
"{edebug-eval-last-sexp})."
msgstr ""

# type: cindex
#: lispref/edebug.texi:651
#, no-wrap
msgid "lexical binding (Edebug)"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:656
msgid ""
"Edebug supports evaluation of expressions containing references to lexically "
"bound symbols created by the following constructs in @file{cl.el} (version "
"2.03 or later): @code{lexical-let}, @code{macrolet}, and @code{symbol-"
"macrolet}."
msgstr ""

# type: subsection
#: lispref/edebug.texi:658
#, no-wrap
msgid "Evaluation List Buffer"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:664
msgid ""
"You can use the @dfn{evaluation list buffer}, called @samp{*edebug*}, to "
"evaluate expressions interactively.  You can also set up the @dfn{evaluation "
"list} of expressions to be evaluated automatically each time Edebug updates "
"the display."
msgstr ""

# type: item
#: lispref/edebug.texi:666
#, no-wrap
msgid "E"
msgstr ""

# type: table
#: lispref/edebug.texi:669
msgid ""
"Switch to the evaluation list buffer @samp{*edebug*} (@code{edebug-visit-"
"eval-list})."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:674
msgid ""
"In the @samp{*edebug*} buffer you can use the commands of Lisp Interaction "
"mode (@pxref{Lisp Interaction,,, emacs, The GNU Emacs Manual}) as well as "
"these special commands:"
msgstr ""

# type: kbd{#1}
#: lispref/edebug.texi:676 lispref/minibuf.texi:218 lispref/minibuf.texi:1038
#, no-wrap
msgid "C-j"
msgstr ""

# type: table
#: lispref/edebug.texi:679
msgid ""
"Evaluate the expression before point, in the outside context, and insert the "
"value in the buffer (@code{edebug-eval-print-last-sexp})."
msgstr ""

# type: item
#: lispref/edebug.texi:684
#, no-wrap
msgid "C-c C-u"
msgstr ""

# type: table
#: lispref/edebug.texi:687
msgid ""
"Build a new evaluation list from the contents of the buffer (@code{edebug-"
"update-eval-list})."
msgstr ""

# type: item
#: lispref/edebug.texi:688
#, no-wrap
msgid "C-c C-d"
msgstr ""

# type: table
#: lispref/edebug.texi:691
msgid ""
"Delete the evaluation list group that point is in (@code{edebug-delete-eval-"
"item})."
msgstr ""

# type: item
#: lispref/edebug.texi:692
#, no-wrap
msgid "C-c C-w"
msgstr ""

# type: table
#: lispref/edebug.texi:695
msgid ""
"Switch back to the source code buffer at the current stop point (@code"
"{edebug-where})."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:700
msgid ""
"You can evaluate expressions in the evaluation list window with @kbd{C-j} or "
"@kbd{C-x C-e}, just as you would in @samp{*scratch*}; but they are evaluated "
"in the context outside of Edebug."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:704
msgid ""
"The expressions you enter interactively (and their results) are lost when "
"you continue execution; but you can set up an @dfn{evaluation list} "
"consisting of expressions to be evaluated each time execution stops."
msgstr ""

# type: cindex
#: lispref/edebug.texi:705
#, no-wrap
msgid "evaluation list group"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:709
msgid ""
"To do this, write one or more @dfn{evaluation list groups} in the evaluation "
"list buffer.  An evaluation list group consists of one or more Lisp "
"expressions.  Groups are separated by comment lines."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:714
msgid ""
"The command @kbd{C-c C-u} (@code{edebug-update-eval-list}) rebuilds the "
"evaluation list, scanning the buffer and using the first expression of each "
"group.  (The idea is that the second expression of the group is the value "
"previously computed and displayed.)"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:720
msgid ""
"Each entry to Edebug redisplays the evaluation list by inserting each "
"expression in the buffer, followed by its current value.  It also inserts "
"comment lines so that each expression becomes its own group.  Thus, if you "
"type @kbd{C-c C-u} again without changing the buffer text, the evaluation "
"list is effectively unchanged."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:725
msgid ""
"If an error occurs during an evaluation from the evaluation list, the error "
"message is displayed in a string as if it were the result.  Therefore, "
"expressions that use variables not currently valid do not interrupt your "
"debugging."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:728
msgid ""
"Here is an example of what the evaluation list window looks like after "
"several expressions have been added to it:"
msgstr ""

# type: smallexample
#: lispref/edebug.texi:748
#, no-wrap
msgid ""
"(current-buffer)\n"
"#<buffer *scratch*>\n"
";---------------------------------------------------------------\n"
"(selected-window)\n"
"#<window 16 on *scratch*>\n"
";---------------------------------------------------------------\n"
"(point)\n"
"196\n"
";---------------------------------------------------------------\n"
"bad-var\n"
"\"Symbol's value as variable is void: bad-var\"\n"
";---------------------------------------------------------------\n"
"(recursion-depth)\n"
"0\n"
";---------------------------------------------------------------\n"
"this-command\n"
"eval-last-sexp\n"
";---------------------------------------------------------------\n"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:756
msgid ""
"To delete a group, move point into it and type @kbd{C-c C-d}, or simply "
"delete the text for the group and update the evaluation list with @kbd{C-c C-"
"u}.  To add a new expression to the evaluation list, insert the expression "
"at a suitable place, insert a new comment line, then type @kbd{C-c C-u}.  "
"You need not insert dashes in the comment line---its contents don't matter."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:760
msgid ""
"After selecting @samp{*edebug*}, you can return to the source code buffer "
"with @kbd{C-c C-w}.  The @samp{*edebug*} buffer is killed when you continue "
"execution, and recreated next time it is needed."
msgstr ""

# type: cindex
#: lispref/edebug.texi:764
#, no-wrap
msgid "printing (Edebug)"
msgstr ""

# type: cindex
#: lispref/edebug.texi:765
#, no-wrap
msgid "printing circular structures"
msgstr ""

# type: pindex
#: lispref/edebug.texi:766
#, no-wrap
msgid "cust-print"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:769
msgid ""
"If an expression in your program produces a value containing circular list "
"structure, you may get an error when Edebug attempts to print it."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:776
msgid ""
"One way to cope with circular structure is to set @code{print-length} or "
"@code{print-level} to truncate the printing.  Edebug does this for you; it "
"binds @code{print-length} and @code{print-level} to 50 if they were @code"
"{nil}.  (Actually, the variables @code{edebug-print-length} and @code{edebug-"
"print-level} specify the values to use within Edebug.)  @xref{Output "
"Variables}."
msgstr ""

# type: defopt
#: lispref/edebug.texi:777
#, no-wrap
msgid "edebug-print-length"
msgstr "edebug-print-length"

# type: defopt
#: lispref/edebug.texi:780
msgid ""
"If non-@code{nil}, Edebug binds @code{print-length} to this value while "
"printing results.  The default value is @code{50}."
msgstr ""

# type: defopt
#: lispref/edebug.texi:782
#, no-wrap
msgid "edebug-print-level"
msgstr "edebug-print-level"

# type: defopt
#: lispref/edebug.texi:785
msgid ""
"If non-@code{nil}, Edebug binds @code{print-level} to this value while "
"printing results.  The default value is @code{50}."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:790
msgid ""
"You can also print circular structures and structures that share elements "
"more informatively by binding @code{print-circle} to a non-@code{nil} value."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:792
msgid "Here is an example of code that creates a circular structure:"
msgstr ""

# type: example
#: lispref/edebug.texi:796
#, no-wrap
msgid ""
"(setq a '(x y))\n"
"(setcar a a)\n"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:804
msgid ""
"Custom printing prints this as @samp{Result: #1=(#1# y)}.  The @samp{#1=} "
"notation labels the structure that follows it with the label @samp{1}, and "
"the @samp{#1#} notation references the previously labeled structure.  This "
"notation is used for any shared elements of lists or vectors."
msgstr ""

# type: defopt
#: lispref/edebug.texi:805
#, no-wrap
msgid "edebug-print-circle"
msgstr "edebug-print-circle"

# type: defopt
#: lispref/edebug.texi:808
msgid ""
"If non-@code{nil}, Edebug binds @code{print-circle} to this value while "
"printing results.  The default value is @code{t}."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:812
msgid ""
"Other programs can also use custom printing; see @file{cust-print.el} for "
"details."
msgstr ""

# type: cindex
#: lispref/edebug.texi:815
#, no-wrap
msgid "trace buffer"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:821
msgid ""
"Edebug can record an execution trace, storing it in a buffer named @samp"
"{*edebug-trace*}.  This is a log of function calls and returns, showing the "
"function names and their arguments and values.  To enable trace recording, "
"set @code{edebug-trace} to a non-@code{nil} value."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:824
msgid ""
"Making a trace buffer is not the same thing as using trace execution mode "
"(@pxref{Edebug Execution Modes})."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:830
msgid ""
"When trace recording is enabled, each function entry and exit adds lines to "
"the trace buffer.  A function entry record consists of @samp{::::@{}, "
"followed by the function name and argument values.  A function exit record "
"consists of @samp{::::@}}, followed by the function name and result of the "
"function."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:834
msgid ""
"The number of @samp{:}s in an entry shows its recursion depth.  You can use "
"the braces in the trace buffer to find the matching beginning or end of "
"function calls."
msgstr ""

# type: findex
#: lispref/edebug.texi:835
#, no-wrap
msgid "edebug-print-trace-before"
msgstr "edebug-print-trace-before"

# type: findex
#: lispref/edebug.texi:836
#, no-wrap
msgid "edebug-print-trace-after"
msgstr "edebug-print-trace-after"

# type: Plain text
#: lispref/edebug.texi:840
msgid ""
"You can customize trace recording for function entry and exit by redefining "
"the functions @code{edebug-print-trace-before} and @code{edebug-print-trace-"
"after}."
msgstr ""

# type: defmac
#: lispref/edebug.texi:841
#, no-wrap
msgid "edebug-tracing string body@dots{}"
msgstr ""

# type: defmac
#: lispref/edebug.texi:847
msgid ""
"This macro requests additional trace information around the execution of the "
"@var{body} forms.  The argument @var{string} specifies text to put in the "
"trace buffer, after the @samp{@{} or @samp{@}}.  All the arguments are "
"evaluated, and @code{edebug-tracing} returns the value of the last form in "
"@var{body}."
msgstr ""

# type: defun
#: lispref/edebug.texi:849
#, no-wrap
msgid "edebug-trace format-string &rest format-args"
msgstr ""

# type: defun
#: lispref/edebug.texi:853
msgid ""
"This function inserts text in the trace buffer.  It computes the text with "
"@code{(apply 'format @var{format-string} @var{format-args})}.  It also "
"appends a newline to separate entries."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:859
msgid ""
"@code{edebug-tracing} and @code{edebug-trace} insert lines in the trace "
"buffer whenever they are called, even if Edebug is not active.  Adding text "
"to the trace buffer also scrolls its window to show the last lines inserted."
msgstr ""

# type: cindex
#: lispref/edebug.texi:863
#, no-wrap
msgid "coverage testing (Edebug)"
msgstr ""

# type: cindex
#: lispref/edebug.texi:864
#, no-wrap
msgid "frequency counts"
msgstr ""

# type: cindex
#: lispref/edebug.texi:865
#, no-wrap
msgid "performance analysis"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:868
msgid ""
"Edebug provides rudimentary coverage testing and display of execution "
"frequency."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:876
msgid ""
"Coverage testing works by comparing the result of each expression with the "
"previous result; each form in the program is considered ``covered'' if it "
"has returned two different values since you began testing coverage in the "
"current Emacs session.  Thus, to do coverage testing on your program, "
"execute it under various conditions and note whether it behaves correctly; "
"Edebug will tell you when you have tried enough different conditions that "
"each form has returned two different values."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:882
msgid ""
"Coverage testing makes execution slower, so it is only done if @code{edebug-"
"test-coverage} is non-@code{nil}.  Frequency counting is performed for all "
"execution of an instrumented function, even if the execution mode is Go-"
"nonstop, and regardless of whether coverage testing is enabled."
msgstr ""

# type: kindex
#: lispref/edebug.texi:883
#, no-wrap
msgid "C-x X ="
msgstr ""

# type: findex
#: lispref/edebug.texi:884
#, no-wrap
msgid "edebug-temp-display-freq-count"
msgstr "edebug-temp-display-freq-count"

# type: Plain text
#: lispref/edebug.texi:889
msgid ""
"Use @kbd{C-x X =} (@code{edebug-display-freq-count}) to display both the "
"coverage information and the frequency counts for a definition.  Just @kbd"
"{=} (@code{edebug-temp-display-freq-count}) displays the same information "
"temporarily, only until you type another key."
msgstr ""

# type: deffn
#: lispref/edebug.texi:890
#, no-wrap
msgid "Command edebug-display-freq-count"
msgstr ""

# type: deffn
#: lispref/edebug.texi:893
msgid ""
"This command displays the frequency count data for each line of the current "
"definition."
msgstr ""

# type: deffn
#: lispref/edebug.texi:900
msgid ""
"The frequency counts appear as comment lines after each line of code, and "
"you can undo all insertions with one @code{undo} command.  The counts appear "
"under the @samp{(} before an expression or the @samp{)} after an expression, "
"or on the last character of a variable.  To simplify the display, a count is "
"not shown if it is equal to the count of an earlier expression on the same "
"line."
msgstr ""

# type: deffn
#: lispref/edebug.texi:904
msgid ""
"The character @samp{=} following the count for an expression says that the "
"expression has returned the same value each time it was evaluated.  In other "
"words, it is not yet ``covered'' for coverage testing purposes."
msgstr ""

# type: deffn
#: lispref/edebug.texi:907
msgid ""
"To clear the frequency count and coverage data for a definition, simply "
"reinstrument it with @code{eval-defun}."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:912
msgid ""
"For example, after evaluating @code{(fac 5)} with a source breakpoint, and "
"setting @code{edebug-test-coverage} to @code{t}, when the breakpoint is "
"reached, the frequency data looks like this:"
msgstr ""

# type: example
#: lispref/edebug.texi:923
#, no-wrap
msgid ""
"(defun fac (n)\n"
"  (if (= n 0) (edebug))\n"
";#6           1      = =5\n"
"  (if (< 0 n)\n"
";#5         =\n"
"      (* n (fac (1- n)))\n"
";#    5               0\n"
"    1))\n"
";#   0\n"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:929
msgid ""
"The comment lines show that @code{fac} was called 6 times.  The first @code"
"{if} statement returned 5 times with the same result each time; the same is "
"true of the condition on the second @code{if}.  The recursive call of @code"
"{fac} did not return at all."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:940
msgid ""
"Edebug tries to be transparent to the program you are debugging, but it does "
"not succeed completely.  Edebug also tries to be transparent when you "
"evaluate expressions with @kbd{e} or with the evaluation list buffer, by "
"temporarily restoring the outside context.  This section explains precisely "
"what context Edebug restores, and how Edebug fails to be completely "
"transparent."
msgstr ""

# type: subsubsection
#: lispref/edebug.texi:945 lispref/edebug.texi:947 lispref/edebug.texi:948
#, no-wrap
msgid "Checking Whether to Stop"
msgstr ""

# type: menu
#: lispref/edebug.texi:945
msgid "When Edebug decides what to do."
msgstr ""

# type: subsubsection
#: lispref/edebug.texi:945 lispref/edebug.texi:967 lispref/edebug.texi:968
#, no-wrap
msgid "Edebug Display Update"
msgstr ""

# type: menu
#: lispref/edebug.texi:945
msgid "When Edebug updates the display."
msgstr ""

# type: subsubsection
#: lispref/edebug.texi:945 lispref/edebug.texi:1022 lispref/edebug.texi:1023
#, no-wrap
msgid "Edebug Recursive Edit"
msgstr ""

# type: menu
#: lispref/edebug.texi:945
msgid "When Edebug stops execution."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:953
msgid ""
"Whenever Edebug is entered, it needs to save and restore certain data before "
"even deciding whether to make trace information or stop the program."
msgstr ""

# type: itemize
#: lispref/edebug.texi:959
msgid ""
"@code{max-lisp-eval-depth} and @code{max-specpdl-size} are both incremented "
"once to reduce Edebug's impact on the stack.  You could, however, still run "
"out of stack space when using Edebug."
msgstr ""

# type: itemize
#: lispref/edebug.texi:964
msgid ""
"The state of keyboard macro execution is saved and restored.  While Edebug "
"is active, @code{executing-kbd-macro} is bound to @code{nil} unless @code"
"{edebug-continue-kbd-macro} is non-@code{nil}."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:976
msgid ""
"When Edebug needs to display something (e.g., in trace mode), it saves the "
"current window configuration from ``outside'' Edebug (@pxref{Window "
"Configurations}).  When you exit Edebug (by continuing the program), it "
"restores the previous window configuration."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:983
msgid ""
"Emacs redisplays only when it pauses.  Usually, when you continue execution, "
"the program re-enters Edebug at a breakpoint or after stepping, without "
"pausing or reading input in between.  In such cases, Emacs never gets a "
"chance to redisplay the ``outside'' configuration.  Consequently, what you "
"see is the same window configuration as the last time Edebug was active, "
"with no interruption."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:987
msgid ""
"Entry to Edebug for displaying something also saves and restores the "
"following data (though some of them are deliberately not restored if an "
"error or quit signal occurs)."
msgstr ""

# type: cindex
#: lispref/edebug.texi:990
#, no-wrap
msgid "current buffer point and mark (Edebug)"
msgstr ""

# type: itemize
#: lispref/edebug.texi:993
msgid ""
"Which buffer is current, and the positions of point and the mark in the "
"current buffer, are saved and restored."
msgstr ""

# type: cindex
#: lispref/edebug.texi:995
#, no-wrap
msgid "window configuration (Edebug)"
msgstr ""

# type: itemize
#: lispref/edebug.texi:998
msgid ""
"The outside window configuration is saved and restored if @code{edebug-save-"
"windows} is non-@code{nil} (@pxref{Edebug Options})."
msgstr ""

# type: itemize
#: lispref/edebug.texi:1004
msgid ""
"The window configuration is not restored on error or quit, but the outside "
"selected window @emph{is} reselected even on error or quit in case a @code"
"{save-excursion} is active.  If the value of @code{edebug-save-windows} is a "
"list, only the listed windows are saved and restored."
msgstr ""

# type: itemize
#: lispref/edebug.texi:1007
msgid ""
"The window start and horizontal scrolling of the source code buffer are not "
"restored, however, so that the display remains coherent within Edebug."
msgstr ""

# type: itemize
#: lispref/edebug.texi:1011
msgid ""
"The value of point in each displayed buffer is saved and restored if @code"
"{edebug-save-displayed-buffer-points} is non-@code{nil}."
msgstr ""

# type: itemize
#: lispref/edebug.texi:1016
msgid ""
"The variables @code{overlay-arrow-position} and @code{overlay-arrow-string} "
"are saved and restored.  So you can safely invoke Edebug from the recursive "
"edit elsewhere in the same buffer."
msgstr ""

# type: itemize
#: lispref/edebug.texi:1020
msgid ""
"@code{cursor-in-echo-area} is locally bound to @code{nil} so that the cursor "
"shows up in the window."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1027
msgid ""
"When Edebug is entered and actually reads commands from the user, it saves "
"(and later restores) these additional data:"
msgstr ""

# type: itemize
#: lispref/edebug.texi:1031
msgid "The current match data.  @xref{Match Data}."
msgstr ""

# type: itemize
#: lispref/edebug.texi:1039
msgid ""
"The variables @code{last-command}, @code{this-command}, @code{last-command-"
"char}, @code{last-input-char}, @code{last-input-event}, @code{last-command-"
"event}, @code{last-event-frame}, @code{last-nonmenu-event}, and @code{track-"
"mouse}.  Commands used within Edebug do not affect these variables outside "
"of Edebug."
msgstr ""

# type: itemize
#: lispref/edebug.texi:1043
msgid ""
"Executing commands within Edebug can change the key sequence that would be "
"returned by @code{this-command-keys}, and there is no way to reset the key "
"sequence from Lisp."
msgstr ""

# type: itemize
#: lispref/edebug.texi:1048
msgid ""
"Edebug cannot save and restore the value of @code{unread-command-events}.  "
"Entering Edebug while this variable has a nontrivial value can interfere "
"with execution of the program you are debugging."
msgstr ""

# type: itemize
#: lispref/edebug.texi:1052
msgid ""
"Complex commands executed while in Edebug are added to the variable @code"
"{command-history}.  In rare cases this can alter execution."
msgstr ""

# type: itemize
#: lispref/edebug.texi:1057
msgid ""
"Within Edebug, the recursion depth appears one deeper than the recursion "
"depth outside Edebug.  This is not true of the automatically updated "
"evaluation list window."
msgstr ""

# type: itemize
#: lispref/edebug.texi:1062
msgid ""
"@code{standard-output} and @code{standard-input} are bound to @code{nil} by "
"the @code{recursive-edit}, but Edebug temporarily restores them during "
"evaluations."
msgstr ""

# type: itemize
#: lispref/edebug.texi:1067
msgid ""
"The state of keyboard macro definition is saved and restored.  While Edebug "
"is active, @code{defining-kbd-macro} is bound to @code{edebug-continue-kbd-"
"macro}."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1074
msgid ""
"To make Edebug properly instrument expressions that call macros, some extra "
"care is needed.  This subsection explains the details."
msgstr ""

# type: subsubsection
#: lispref/edebug.texi:1080 lispref/edebug.texi:1082 lispref/edebug.texi:1083
#, no-wrap
msgid "Instrumenting Macro Calls"
msgstr ""

# type: menu
#: lispref/edebug.texi:1080
msgid "The basic problem."
msgstr ""

# type: subsubsection
#: lispref/edebug.texi:1080 lispref/edebug.texi:1156 lispref/edebug.texi:1157
#, no-wrap
msgid "Specification List"
msgstr ""

# type: menu
#: lispref/edebug.texi:1080
msgid "How to specify complex patterns of evaluation."
msgstr ""

# type: node
#: lispref/edebug.texi:1080 lispref/edebug.texi:1365
#, no-wrap
msgid "Backtracking"
msgstr ""

# type: menu
#: lispref/edebug.texi:1080
msgid "What Edebug does when matching fails."
msgstr ""

# type: subsubsection
#: lispref/edebug.texi:1080 lispref/edebug.texi:1406 lispref/edebug.texi:1407
#, no-wrap
msgid "Specification Examples"
msgstr ""

# type: menu
#: lispref/edebug.texi:1080
msgid "To help understand specifications."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1091
msgid ""
"When Edebug instruments an expression that calls a Lisp macro, it needs "
"additional information about the macro to do the job properly.  This is "
"because there is no a-priori way to tell which subexpressions of the macro "
"call are forms to be evaluated.  (Evaluation may occur explicitly in the "
"macro body, or when the resulting expansion is evaluated, or any time later.)"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1097
msgid ""
"Therefore, you must define an Edebug specification for each macro that "
"Edebug will encounter, to explain the format of calls to that macro.  To do "
"this, add a @code{debug} declaration to the macro definition.  Here is a "
"simple example that shows the specification for the @code{for} example macro "
"(@pxref{Argument Evaluation})."
msgstr ""

# type: smallexample
#: lispref/edebug.texi:1104
#, no-wrap
msgid ""
"(defmacro for (var from init to final do &rest body)\n"
"  \"Execute a simple \\\"for\\\" loop.\n"
"For example, (for i from 1 to 10 do (print i)).\"\n"
"  (declare (debug (symbolp \"from\" form \"to\" form \"do\" &rest form)))\n"
"  ...)\n"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1112
msgid ""
"The Edebug specification says which parts of a call to the macro are forms "
"to be evaluated.  For simple macros, the @var{specification} often looks "
"very similar to the formal argument list of the macro definition, but "
"specifications are much more general than macro arguments.  @xref{Defining "
"Macros}, for more explanation of the @code{declare} form."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1118
msgid ""
"You can also define an edebug specification for a macro separately from the "
"macro definition with @code{def-edebug-spec}.  Adding @code{debug} "
"declarations is preferred, and more convenient, for macro definitions in "
"Lisp, but @code{def-edebug-spec} makes it possible to define Edebug "
"specifications for special forms implemented in C."
msgstr ""

# type: deffn
#: lispref/edebug.texi:1119
#, no-wrap
msgid "Macro def-edebug-spec macro specification"
msgstr ""

# type: deffn
#: lispref/edebug.texi:1123
msgid ""
"Specify which expressions of a call to macro @var{macro} are forms to be "
"evaluated.  @var{specification} should be the edebug specification.  Neither "
"argument is evaluated."
msgstr ""

# type: deffn
#: lispref/edebug.texi:1126
msgid ""
"The @var{macro} argument can actually be any symbol, not just a macro name."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1130
msgid ""
"Here is a table of the possibilities for @var{specification} and how each "
"directs processing of arguments."
msgstr ""

# type: table
#: lispref/edebug.texi:1134
msgid "All arguments are instrumented for evaluation."
msgstr ""

# type: table
#: lispref/edebug.texi:1137
msgid "None of the arguments is instrumented."
msgstr ""

# type: table
#: lispref/edebug.texi:1142
msgid ""
"The symbol must have an Edebug specification which is used instead.  This "
"indirection is repeated until another kind of specification is found.  This "
"allows you to inherit the specification from another macro."
msgstr ""

# type: table
#: lispref/edebug.texi:1147
msgid ""
"The elements of the list describe the types of the arguments of a calling "
"form.  The possible elements of a specification list are described in the "
"following sections."
msgstr ""

# type: vindex
#: lispref/edebug.texi:1149
#, no-wrap
msgid "edebug-eval-macro-args"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1155
msgid ""
"If a macro has no Edebug specification, neither through a @code{debug} "
"declaration nor through a @code{def-edebug-spec} call, the variable @code"
"{edebug-eval-macro-args} comes into play.  If it is @code{nil}, the default, "
"none of the arguments is instrumented for evaluation.  If it is non-@code"
"{nil}, all arguments are instrumented."
msgstr ""

# type: cindex
#: lispref/edebug.texi:1159
#, no-wrap
msgid "Edebug specification list"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1166
msgid ""
"A @dfn{specification list} is required for an Edebug specification if some "
"arguments of a macro call are evaluated while others are not.  Some elements "
"in a specification list match one or more arguments, but others modify the "
"processing of all following elements.  The latter, called @dfn{specification "
"keywords}, are symbols beginning with @samp{&} (such as @code{&optional})."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1172
msgid ""
"A specification list may contain sublists which match arguments that are "
"themselves lists, or it may contain vectors used for grouping.  Sublists and "
"groups thus subdivide the specification list into a hierarchy of levels.  "
"Specification keywords apply only to the remainder of the sublist or group "
"they are contained in."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1176
msgid ""
"When a specification list involves alternatives or repetition, matching it "
"against an actual macro call may require backtracking.  @xref{Backtracking}, "
"for more details."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1181
msgid ""
"Edebug specifications provide the power of regular expression matching, plus "
"some context-free grammar constructs: the matching of sublists with balanced "
"parentheses, recursive processing of forms, and recursion via indirect "
"specifications."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1185
msgid ""
"Here's a table of the possible elements of a specification list, with their "
"meanings (see @ref{Specification Examples}, for the referenced examples):"
msgstr ""

# type: table
#: lispref/edebug.texi:1190
msgid "A single unevaluated Lisp object, which is not instrumented."
msgstr ""

# type: item
#: lispref/edebug.texi:1191
#, no-wrap
msgid "form"
msgstr ""

# type: table
#: lispref/edebug.texi:1193
msgid "A single evaluated expression, which is instrumented."
msgstr ""

# type: item
#: lispref/edebug.texi:1194
#, no-wrap
msgid "place"
msgstr ""

# type: findex
#: lispref/edebug.texi:1195
#, no-wrap
msgid "edebug-unwrap"
msgstr "edebug-unwrap"

# type: table
#: lispref/edebug.texi:1197
msgid "A place to store a value, as in the Common Lisp @code{setf} construct."
msgstr ""

# type: item
#: lispref/edebug.texi:1198
#, no-wrap
msgid "body"
msgstr ""

# type: table
#: lispref/edebug.texi:1200
msgid "Short for @code{&rest form}.  See @code{&rest} below."
msgstr ""

# type: item
#: lispref/edebug.texi:1201
#, no-wrap
msgid "function-form"
msgstr ""

# type: table
#: lispref/edebug.texi:1208
msgid ""
"A function form: either a quoted function symbol, a quoted lambda "
"expression, or a form (that should evaluate to a function symbol or lambda "
"expression).  This is useful when an argument that's a lambda expression "
"might be quoted with @code{quote} rather than @code{function}, since it "
"instruments the body of the lambda expression either way."
msgstr ""

# type: item
#: lispref/edebug.texi:1209
#, no-wrap
msgid "lambda-expr"
msgstr ""

# type: table
#: lispref/edebug.texi:1211
msgid "A lambda expression with no quoting."
msgstr ""

# type: kindex
#: lispref/edebug.texi:1212 lispref/functions.texi:313
#, no-wrap
msgid "&optional"
msgstr ""

# type: table
#: lispref/edebug.texi:1216
msgid ""
"All following elements in the specification list are optional; as soon as "
"one does not match, Edebug stops matching at this level."
msgstr ""

# type: table
#: lispref/edebug.texi:1221
msgid ""
"To make just a few elements optional followed by non-optional elements, use "
"@code{[&optional @var{specs}@dots{}]}.  To specify that several elements "
"must all match or none, use @code{&optional [@var{specs}@dots{}]}.  See the "
"@code{defun} example."
msgstr ""

# type: kindex
#: lispref/edebug.texi:1222 lispref/functions.texi:314
#, no-wrap
msgid "&rest"
msgstr ""

# type: table
#: lispref/edebug.texi:1228
msgid ""
"All following elements in the specification list are repeated zero or more "
"times.  In the last repetition, however, it is not a problem if the "
"expression runs out before matching all of the elements of the specification "
"list."
msgstr ""

# type: table
#: lispref/edebug.texi:1232
msgid ""
"To repeat only a few elements, use @code{[&rest @var{specs}@dots{}]}.  To "
"specify several elements that must all match on every repetition, use @code"
"{&rest [@var{specs}@dots{}]}."
msgstr ""

# type: item
#: lispref/edebug.texi:1233
#, no-wrap
msgid "&or"
msgstr ""

# type: table
#: lispref/edebug.texi:1238
msgid ""
"Each of the following elements in the specification list is an alternative.  "
"One of the alternatives must match, or the @code{&or} specification fails."
msgstr ""

# type: table
#: lispref/edebug.texi:1242
msgid ""
"Each list element following @code{&or} is a single alternative.  To group "
"two or more list elements as a single alternative, enclose them in @code"
"{[@dots{}]}."
msgstr ""

# type: item
#: lispref/edebug.texi:1243
#, no-wrap
msgid "&not"
msgstr ""

# type: table
#: lispref/edebug.texi:1249
msgid ""
"Each of the following elements is matched as alternatives as if by using "
"@code{&or}, but if any of them match, the specification fails.  If none of "
"them match, nothing is matched, but the @code{&not} specification succeeds."
msgstr ""

# type: item
#: lispref/edebug.texi:1250
#, no-wrap
msgid "&define"
msgstr ""

# type: table
#: lispref/edebug.texi:1257
msgid ""
"Indicates that the specification is for a defining form.  The defining form "
"itself is not instrumented (that is, Edebug does not stop before and after "
"the defining form), but forms inside it typically will be instrumented.  The "
"@code{&define} keyword should be the first element in a list specification."
msgstr ""

# type: table
#: lispref/edebug.texi:1262
msgid ""
"This is successful when there are no more arguments to match at the current "
"argument list level; otherwise it fails.  See sublist specifications and the "
"backquote example."
msgstr ""

# type: item
#: lispref/edebug.texi:1263
#, no-wrap
msgid "gate"
msgstr ""

# type: cindex
#: lispref/edebug.texi:1264
#, no-wrap
msgid "preventing backtracking"
msgstr ""

# type: table
#: lispref/edebug.texi:1269
msgid ""
"No argument is matched but backtracking through the gate is disabled while "
"matching the remainder of the specifications at this level.  This is "
"primarily used to generate more specific syntax error messages.  See @ref"
"{Backtracking}, for more details.  Also see the @code{let} example."
msgstr ""

# type: var{#1}
#: lispref/edebug.texi:1270
#, no-wrap
msgid "other-symbol"
msgstr ""

# type: cindex
#: lispref/edebug.texi:1271
#, no-wrap
msgid "indirect specifications"
msgstr ""

# type: table
#: lispref/edebug.texi:1274
msgid ""
"Any other symbol in a specification list may be a predicate or an indirect "
"specification."
msgstr ""

# type: table
#: lispref/edebug.texi:1280
msgid ""
"If the symbol has an Edebug specification, this @dfn{indirect specification} "
"should be either a list specification that is used in place of the symbol, "
"or a function that is called to process the arguments.  The specification "
"may be defined with @code{def-edebug-spec} just as for macros. See the @code"
"{defun} example."
msgstr ""

# type: table
#: lispref/edebug.texi:1284
msgid ""
"Otherwise, the symbol should be a predicate.  The predicate is called with "
"the argument and the specification fails if the predicate returns @code"
"{nil}.  In either case, that argument is not instrumented."
msgstr ""

# type: table
#: lispref/edebug.texi:1287
msgid ""
"Some suitable predicates include @code{symbolp}, @code{integerp}, @code"
"{stringp}, @code{vectorp}, and @code{atom}."
msgstr ""

# type: item
#: lispref/edebug.texi:1288
#, no-wrap
msgid "[@var{elements}@dots{}]"
msgstr ""

# type: cindex
#: lispref/edebug.texi:1289
#, no-wrap
msgid "[@dots{}] (Edebug)"
msgstr ""

# type: table
#: lispref/edebug.texi:1292
msgid ""
"A vector of elements groups the elements into a single @dfn{group "
"specification}.  Its meaning has nothing to do with vectors."
msgstr ""

# type: item
#: lispref/edebug.texi:1293
#, no-wrap
msgid "\"@var{string}\""
msgstr ""

# type: table
#: lispref/edebug.texi:1297
msgid ""
"The argument should be a symbol named @var{string}.  This specification is "
"equivalent to the quoted symbol, @code{'@var{symbol}}, where the name of @var"
"{symbol} is the @var{string}, but the string form is preferred."
msgstr ""

# type: item
#: lispref/edebug.texi:1298
#, no-wrap
msgid "(vector @var{elements}@dots{})"
msgstr ""

# type: table
#: lispref/edebug.texi:1301
msgid ""
"The argument should be a vector whose elements must match the @var{elements} "
"in the specification.  See the backquote example."
msgstr ""

# type: item
#: lispref/edebug.texi:1302
#, no-wrap
msgid "(@var{elements}@dots{})"
msgstr ""

# type: table
#: lispref/edebug.texi:1305
msgid ""
"Any other list is a @dfn{sublist specification} and the argument must be a "
"list whose elements match the specification @var{elements}."
msgstr ""

# type: cindex
#: lispref/edebug.texi:1306
#, no-wrap
msgid "dotted lists (Edebug)"
msgstr ""

# type: table
#: lispref/edebug.texi:1315
msgid ""
"A sublist specification may be a dotted list and the corresponding list "
"argument may then be a dotted list.  Alternatively, the last @sc{cdr} of a "
"dotted list specification may be another sublist specification (via a "
"grouping or an indirect specification, e.g., @code{(spec .  [(more specs@dots"
"{})])}) whose elements match the non-dotted list arguments.  This is useful "
"in recursive specifications such as in the backquote example.  Also see the "
"description of a @code{nil} specification above for terminating such "
"recursion."
msgstr ""

# type: table
#: lispref/edebug.texi:1320
msgid ""
"Note that a sublist specification written as @code{(specs .  nil)} is "
"equivalent to @code{(specs)}, and @code{(specs .  (sublist-elements@dots"
"{}))} is equivalent to @code{(specs sublist-elements@dots{})}."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1326
msgid ""
"Here is a list of additional specifications that may appear only after @code"
"{&define}.  See the @code{defun} example."
msgstr ""

# type: item
#: lispref/edebug.texi:1328 lispref/files.texi:2825 lispref/frames.texi:372
#: lispref/internals.texi:999 lispref/internals.texi:1431
#, no-wrap
msgid "name"
msgstr ""

# type: table
#: lispref/edebug.texi:1330
msgid "The argument, a symbol, is the name of the defining form."
msgstr ""

# type: table
#: lispref/edebug.texi:1333
msgid ""
"A defining form is not required to have a name field; and it may have "
"multiple name fields."
msgstr ""

# type: item
#: lispref/edebug.texi:1334
#, no-wrap
msgid ":name"
msgstr ""

# type: table
#: lispref/edebug.texi:1340
msgid ""
"This construct does not actually match an argument.  The element following "
"@code{:name} should be a symbol; it is used as an additional name component "
"for the definition.  You can use this to add a unique, static component to "
"the name of the definition.  It may be used more than once."
msgstr ""

# type: item
#: lispref/edebug.texi:1341
#, no-wrap
msgid "arg"
msgstr ""

# type: table
#: lispref/edebug.texi:1345
msgid ""
"The argument, a symbol, is the name of an argument of the defining form.  "
"However, lambda-list keywords (symbols starting with @samp{&})  are not "
"allowed."
msgstr ""

# type: item
#: lispref/edebug.texi:1346
#, no-wrap
msgid "lambda-list"
msgstr ""

# type: cindex
#: lispref/edebug.texi:1347
#, no-wrap
msgid "lambda-list (Edebug)"
msgstr ""

# type: table
#: lispref/edebug.texi:1349
msgid "This matches a lambda list---the argument list of a lambda expression."
msgstr ""

# type: item
#: lispref/edebug.texi:1350
#, no-wrap
msgid "def-body"
msgstr ""

# type: table
#: lispref/edebug.texi:1356
msgid ""
"The argument is the body of code in a definition.  This is like @code{body}, "
"described above, but a definition body must be instrumented with a different "
"Edebug call that looks up information associated with the definition.  Use "
"@code{def-body} for the highest level list of forms within the definition."
msgstr ""

# type: item
#: lispref/edebug.texi:1357
#, no-wrap
msgid "def-form"
msgstr ""

# type: table
#: lispref/edebug.texi:1363
msgid ""
"The argument is a single, highest-level form in a definition.  This is like "
"@code{def-body}, except use this to match a single form rather than a list "
"of forms.  As a special case, @code{def-form} also means that tracing "
"information is not output when the form is executed.  See the @code"
"{interactive} example."
msgstr ""

# type: subsubsection
#: lispref/edebug.texi:1366
#, no-wrap
msgid "Backtracking in Specifications"
msgstr ""

# type: cindex
#: lispref/edebug.texi:1368
#, no-wrap
msgid "backtracking"
msgstr ""

# type: cindex
#: lispref/edebug.texi:1369
#, no-wrap
msgid "syntax error (Edebug)"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1376
msgid ""
"If a specification fails to match at some point, this does not necessarily "
"mean a syntax error will be signaled; instead, @dfn{backtracking} will take "
"place until all alternatives have been exhausted.  Eventually every element "
"of the argument list must be matched by some element in the specification, "
"and every required element in the specification must match some argument."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1387
msgid ""
"When a syntax error is detected, it might not be reported until much later "
"after higher-level alternatives have been exhausted, and with the point "
"positioned further from the real error.  But if backtracking is disabled "
"when an error occurs, it can be reported immediately.  Note that "
"backtracking is also reenabled automatically in several situations; it is "
"reenabled when a new alternative is established by @code{&optional}, @code"
"{&rest}, or @code{&or}, or at the start of processing a sublist, group, or "
"indirect specification.  The effect of enabling or disabling backtracking is "
"limited to the remainder of the level currently being processed and lower "
"levels."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1392
msgid ""
"Backtracking is disabled while matching any of the form specifications (that "
"is, @code{form}, @code{body}, @code{def-form}, and @code{def-body}).  These "
"specifications will match any form so any error must be in the form itself "
"rather than at a higher level."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1399
msgid ""
"Backtracking is also disabled after successfully matching a quoted symbol or "
"string specification, since this usually indicates a recognized construct.  "
"But if you have a set of alternative constructs that all begin with the same "
"symbol, you can usually work around this constraint by factoring the symbol "
"out of the alternatives, e.g., @code{[\"foo\" &or [first case] [second "
"case] ...]}."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1405
msgid ""
"Most needs are satisfied by these two ways that backtracking is "
"automatically disabled, but occasionally it is useful to explicitly disable "
"backtracking by using the @code{gate} specification.  This is useful when "
"you know that no higher alternatives could apply.  See the example of the "
"@code{let} specification."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1411
msgid ""
"It may be easier to understand Edebug specifications by studying the "
"examples provided here."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1416
msgid ""
"A @code{let} special form has a sequence of bindings and a body.  Each of "
"the bindings is either a symbol or a sublist with a symbol and optional "
"expression.  In the specification below, notice the @code{gate} inside of "
"the sublist to prevent backtracking once a sublist is found."
msgstr ""

# type: example
#: lispref/edebug.texi:1422
#, no-wrap
msgid ""
"(def-edebug-spec let\n"
"  ((&rest\n"
"    &or symbolp (gate symbolp &optional form))\n"
"   body))\n"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1429
msgid ""
"Edebug uses the following specifications for @code{defun} and @code"
"{defmacro} and the associated argument list and @code{interactive} "
"specifications.  It is necessary to handle interactive forms specially since "
"an expression argument is actually evaluated outside of the function body."
msgstr ""

# type: smallexample
#: lispref/edebug.texi:1437
#, no-wrap
msgid ""
"(def-edebug-spec defmacro defun) ; @r{Indirect ref to @code{defun} spec.}\n"
"(def-edebug-spec defun\n"
"  (&define name lambda-list\n"
"           [&optional stringp]   ; @r{Match the doc string, if present.}\n"
"           [&optional (\"interactive\" interactive)]\n"
"           def-body))\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/edebug.texi:1443
#, no-wrap
msgid ""
"(def-edebug-spec lambda-list\n"
"  (([&rest arg]\n"
"    [&optional [\"&optional\" arg &rest arg]]\n"
"    &optional [\"&rest\" arg]\n"
"    )))\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/edebug.texi:1446
#, no-wrap
msgid ""
"(def-edebug-spec interactive\n"
"  (&optional &or stringp def-form))    ; @r{Notice: @code{def-form}}\n"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1453
msgid ""
"The specification for backquote below illustrates how to match dotted lists "
"and use @code{nil} to terminate recursion.  It also illustrates how "
"components of a vector may be matched.  (The actual specification defined by "
"Edebug does not support dotted lists because doing so causes very deep "
"recursion that could fail.)"
msgstr ""

# type: smallexample
#: lispref/edebug.texi:1456
#, no-wrap
msgid ""
"(def-edebug-spec ` (backquote-form))   ; @r{Alias just for clarity.}\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/edebug.texi:1462
#, no-wrap
msgid ""
"(def-edebug-spec backquote-form\n"
"  (&or ([&or \",\" \",@@\"] &or (\"quote\" backquote-form) form)\n"
"       (backquote-form . [&or nil backquote-form])\n"
"       (vector &rest backquote-form)\n"
"       sexp))\n"
msgstr ""

# type: subsection
#: lispref/edebug.texi:1465 lispref/edebug.texi:1466
#, no-wrap
msgid "Edebug Options"
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1469
msgid "These options affect the behavior of Edebug:"
msgstr ""

# type: defopt
#: lispref/edebug.texi:1470
#, no-wrap
msgid "edebug-setup-hook"
msgstr "edebug-setup-hook"

# type: defopt
#: lispref/edebug.texi:1477
msgid ""
"Functions to call before Edebug is used.  Each time it is set to a new "
"value, Edebug will call those functions once and then @code{edebug-setup-"
"hook} is reset to @code{nil}.  You could use this to load up Edebug "
"specifications associated with a package you are using but only when you "
"also use Edebug.  @xref{Instrumenting}."
msgstr ""

# type: defopt
#: lispref/edebug.texi:1479
#, no-wrap
msgid "edebug-all-defs"
msgstr "edebug-all-defs"

# type: defopt
#: lispref/edebug.texi:1484
msgid ""
"If this is non-@code{nil}, normal evaluation of defining forms such as @code"
"{defun} and @code{defmacro} instruments them for Edebug.  This applies to "
"@code{eval-defun}, @code{eval-region}, @code{eval-buffer}, and @code{eval-"
"current-buffer}."
msgstr ""

# type: defopt
#: lispref/edebug.texi:1487
msgid ""
"Use the command @kbd{M-x edebug-all-defs} to toggle the value of this "
"option.  @xref{Instrumenting}."
msgstr ""

# type: defopt
#: lispref/edebug.texi:1489
#, no-wrap
msgid "edebug-all-forms"
msgstr "edebug-all-forms"

# type: defopt
#: lispref/edebug.texi:1494
msgid ""
"If this is non-@code{nil}, the commands @code{eval-defun}, @code{eval-"
"region}, @code{eval-buffer}, and @code{eval-current-buffer} instrument all "
"forms, even those that don't define anything.  This doesn't apply to loading "
"or evaluations in the minibuffer."
msgstr ""

# type: defopt
#: lispref/edebug.texi:1497
msgid ""
"Use the command @kbd{M-x edebug-all-forms} to toggle the value of this "
"option.  @xref{Instrumenting}."
msgstr ""

# type: defopt
#: lispref/edebug.texi:1499
#, no-wrap
msgid "edebug-save-windows"
msgstr "edebug-save-windows"

# type: defopt
#: lispref/edebug.texi:1504
msgid ""
"If this is non-@code{nil}, Edebug saves and restores the window "
"configuration.  That takes some time, so if your program does not care what "
"happens to the window configurations, it is better to set this variable to "
"@code{nil}."
msgstr ""

# type: defopt
#: lispref/edebug.texi:1507
msgid "If the value is a list, only the listed windows are saved and restored."
msgstr ""

# type: defopt
#: lispref/edebug.texi:1510
msgid ""
"You can use the @kbd{W} command in Edebug to change this variable "
"interactively.  @xref{Edebug Display Update}."
msgstr ""

# type: defopt
#: lispref/edebug.texi:1512
#, no-wrap
msgid "edebug-save-displayed-buffer-points"
msgstr "edebug-save-displayed-buffer-points"

# type: defopt
#: lispref/edebug.texi:1515
msgid ""
"If this is non-@code{nil}, Edebug saves and restores point in all displayed "
"buffers."
msgstr ""

# type: defopt
#: lispref/edebug.texi:1520
msgid ""
"Saving and restoring point in other buffers is necessary if you are "
"debugging code that changes the point of a buffer which is displayed in a "
"non-selected window.  If Edebug or the user then selects the window, point "
"in that buffer will move to the window's value of point."
msgstr ""

# type: defopt
#: lispref/edebug.texi:1524
msgid ""
"Saving and restoring point in all buffers is expensive, since it requires "
"selecting each window twice, so enable this only if you need it.  @xref"
"{Edebug Display Update}."
msgstr ""

# type: defopt
#: lispref/edebug.texi:1526
#, no-wrap
msgid "edebug-initial-mode"
msgstr "edebug-initial-mode"

# type: defopt
#: lispref/edebug.texi:1531
msgid ""
"If this variable is non-@code{nil}, it specifies the initial execution mode "
"for Edebug when it is first activated.  Possible values are @code{step}, "
"@code{next}, @code{go}, @code{Go-nonstop}, @code{trace}, @code{Trace-fast}, "
"@code{continue}, and @code{Continue-fast}."
msgstr ""

# type: defopt
#: lispref/edebug.texi:1534
msgid "The default value is @code{step}.  @xref{Edebug Execution Modes}."
msgstr ""

# type: defopt
#: lispref/edebug.texi:1536
#, no-wrap
msgid "edebug-trace"
msgstr "edebug-trace"

# type: defopt
#: lispref/edebug.texi:1540
msgid ""
"If this is non-@code{nil}, trace each function entry and exit.  Tracing "
"output is displayed in a buffer named @samp{*edebug-trace*}, one function "
"entry or exit per line, indented by the recursion level."
msgstr ""

# type: defopt
#: lispref/edebug.texi:1542
msgid "Also see @code{edebug-tracing}, in @ref{Trace Buffer}."
msgstr ""

# type: defopt
#: lispref/edebug.texi:1544
#, no-wrap
msgid "edebug-test-coverage"
msgstr "edebug-test-coverage"

# type: defopt
#: lispref/edebug.texi:1547
msgid ""
"If non-@code{nil}, Edebug tests coverage of all expressions debugged.  @xref"
"{Coverage Testing}."
msgstr ""

# type: defopt
#: lispref/edebug.texi:1549
#, no-wrap
msgid "edebug-continue-kbd-macro"
msgstr "edebug-continue-kbd-macro"

# type: defopt
#: lispref/edebug.texi:1554
msgid ""
"If non-@code{nil}, continue defining or executing any keyboard macro that is "
"executing outside of Edebug.  Use this with caution since it is not "
"debugged.  @xref{Edebug Execution Modes}."
msgstr ""

# type: defopt
#: lispref/edebug.texi:1556
#, no-wrap
msgid "edebug-on-error"
msgstr "edebug-on-error"

# type: defopt
#: lispref/edebug.texi:1560
msgid ""
"Edebug binds @code{debug-on-error} to this value, if @code{debug-on-error} "
"was previously @code{nil}.  @xref{Trapping Errors}."
msgstr ""

# type: defopt
#: lispref/edebug.texi:1562
#, no-wrap
msgid "edebug-on-quit"
msgstr "edebug-on-quit"

# type: defopt
#: lispref/edebug.texi:1566
msgid ""
"Edebug binds @code{debug-on-quit} to this value, if @code{debug-on-quit} was "
"previously @code{nil}.  @xref{Trapping Errors}."
msgstr ""

# type: Plain text
#: lispref/edebug.texi:1573
msgid ""
"If you change the values of @code{edebug-on-error} or @code{edebug-on-quit} "
"while Edebug is active, their values won't be used until the @emph{next} "
"time Edebug is invoked via a new command."
msgstr ""

# type: defopt
#: lispref/edebug.texi:1574
#, no-wrap
msgid "edebug-global-break-condition"
msgstr "edebug-global-break-condition"

# type: defopt
#: lispref/edebug.texi:1578
msgid ""
"If non-@code{nil}, an expression to test for at every stop point.  If the "
"result is non-@code{nil}, then break.  Errors are ignored.  @xref{Global "
"Break Condition}."
msgstr ""

# type: ignore
#: lispref/edebug.texi:1582
#, no-wrap
msgid "   arch-tag: 74842db8-019f-4818-b5a4-b2de878e57fd\n"
msgstr "   arch-tag: 74842db8-019f-4818-b5a4-b2de878e57fd\n"

# type: titlefont{#1}
#: lispref/elisp-covers.texi:20 lispref/elisp-covers.texi:43
#: lispref/elisp-covers.texi:74 lispref/elisp-covers.texi:104
#: lispref/elisp-covers.texi:139 lispref/elisp-covers.texi:169
#: lispref/elisp-covers.texi:199 lispref/elisp.texi:100
#: lispref/front-cover-1.texi:15 lispref/front-cover-1.texi:36
#, no-wrap
msgid "Emacs Lisp"
msgstr ""

# type: titlefont{#1}
#: lispref/elisp-covers.texi:22 lispref/elisp-covers.texi:45
#: lispref/elisp-covers.texi:76 lispref/elisp-covers.texi:106
#: lispref/elisp-covers.texi:141 lispref/elisp-covers.texi:171
#: lispref/elisp-covers.texi:201 lispref/front-cover-1.texi:17
#: lispref/front-cover-1.texi:38
#, no-wrap
msgid "Reference"
msgstr ""

# type: titlefont{#1}
#: lispref/elisp-covers.texi:24 lispref/elisp-covers.texi:47
#: lispref/elisp-covers.texi:78 lispref/elisp-covers.texi:108
#: lispref/elisp-covers.texi:143 lispref/elisp-covers.texi:173
#: lispref/elisp-covers.texi:203 lispref/front-cover-1.texi:19
#: lispref/front-cover-1.texi:40
#, no-wrap
msgid "Manual"
msgstr ""

# type: center
#: lispref/elisp-covers.texi:26 lispref/elisp-covers.texi:49
#: lispref/elisp-covers.texi:80 lispref/elisp-covers.texi:114
#: lispref/elisp-covers.texi:145 lispref/elisp-covers.texi:175
#: lispref/elisp-covers.texi:205 lispref/elisp-covers.texi:220
#: lispref/elisp-covers.texi:239
#, no-wrap
msgid "GNU Emacs Version 19"
msgstr ""

# type: center
#: lispref/elisp-covers.texi:28 lispref/elisp-covers.texi:51
#: lispref/elisp-covers.texi:82 lispref/elisp-covers.texi:116
#: lispref/elisp-covers.texi:147 lispref/elisp-covers.texi:177
#: lispref/elisp-covers.texi:207 lispref/elisp-covers.texi:222
#: lispref/elisp-covers.texi:241
#, no-wrap
msgid "Edition 2.3, June 1994"
msgstr ""

# type: titlefont{#1}
#: lispref/elisp-covers.texi:30 lispref/elisp-covers.texi:84
#: lispref/elisp-covers.texi:118 lispref/elisp-covers.texi:149
#: lispref/front-cover-1.texi:25 lispref/vol1.texi:159
#, no-wrap
msgid "Volume 1"
msgstr ""

# type: center
#: lispref/elisp-covers.texi:32 lispref/elisp-covers.texi:86
#: lispref/elisp-covers.texi:151 lispref/elisp-covers.texi:181
#: lispref/elisp-covers.texi:211 lispref/elisp-covers.texi:224
#: lispref/elisp-covers.texi:243 lispref/front-cover-1.texi:27
#: lispref/front-cover-1.texi:48 lispref/vol1.texi:161 lispref/vol2.texi:162
#, no-wrap
msgid "by Bil Lewis, Dan LaLiberte,"
msgstr ""

# type: center
#: lispref/elisp-covers.texi:33 lispref/elisp-covers.texi:87
#: lispref/elisp-covers.texi:152 lispref/elisp-covers.texi:182
#: lispref/elisp-covers.texi:212 lispref/elisp-covers.texi:225
#: lispref/elisp-covers.texi:244 lispref/elisp.texi:76
#: lispref/front-cover-1.texi:28 lispref/front-cover-1.texi:49
#: lispref/vol1.texi:162 lispref/vol2.texi:163
#, no-wrap
msgid "and the GNU Manual Group"
msgstr ""

# type: titlefont{#1}
#: lispref/elisp-covers.texi:53 lispref/elisp-covers.texi:179
#: lispref/elisp-covers.texi:209 lispref/front-cover-1.texi:46
#: lispref/vol2.texi:160
#, no-wrap
msgid "Volume 2"
msgstr ""

# type: center
#: lispref/elisp-covers.texi:55 lispref/elisp-covers.texi:120
#, no-wrap
msgid "by Bil Lewis,"
msgstr ""

# type: center
#: lispref/elisp-covers.texi:56 lispref/elisp-covers.texi:121
#, no-wrap
msgid "Dan LaLiberte, and"
msgstr ""

# type: center
#: lispref/elisp-covers.texi:57 lispref/elisp-covers.texi:122
#, no-wrap
msgid "the GNU Manual Group"
msgstr ""

# type: tex
#: lispref/elisp-covers.texi:64
#, no-wrap
msgid "\\global\\baselineskip = 16pt\n"
msgstr ""

# type: titlepage
#: lispref/elisp-covers.texi:67
msgid "16 pts baseline skip:"
msgstr ""

# type: tex
#: lispref/elisp-covers.texi:94 lispref/elisp-covers.texi:159
#, no-wrap
msgid "\\global\\baselineskip = 18pt\n"
msgstr ""

# type: titlepage
#: lispref/elisp-covers.texi:97
msgid "18 pts baseline skip, with 15pts between sections"
msgstr ""

# type: tex
#: lispref/elisp-covers.texi:111
#, no-wrap
msgid "\\global\\baselineskip = 15pt\n"
msgstr ""

# type: tex
#: lispref/elisp-covers.texi:129 lispref/elisp-covers.texi:189
#, no-wrap
msgid "\\global\\baselineskip = 24pt\n"
msgstr ""

# type: titlepage
#: lispref/elisp-covers.texi:132 lispref/elisp-covers.texi:192
msgid "24 pts baseline skip:"
msgstr ""

# type: titlepage
#: lispref/elisp-covers.texi:162
msgid "18 pts baseline skip:"
msgstr ""

# type: author
#: lispref/elisp-covers.texi:219 lispref/elisp-covers.texi:228
#, no-wrap
msgid "The GNU Emacs Lisp Reference Manual --- Vol. 1"
msgstr ""

# type: author
#: lispref/elisp-covers.texi:230 lispref/elisp-covers.texi:250
#, no-wrap
msgid "FSF"
msgstr ""

# type: author
#: lispref/elisp-covers.texi:238 lispref/elisp-covers.texi:248
#, no-wrap
msgid "The GNU Emacs Lisp Reference Manual --- Vol. 2"
msgstr ""

# type: ignore
#: lispref/elisp-covers.texi:257
#, no-wrap
msgid "   arch-tag: 02d65d63-3b64-49bc-a5c0-bfd5eabb6c98\n"
msgstr "   arch-tag: 02d65d63-3b64-49bc-a5c0-bfd5eabb6c98\n"

# type: dircategory
#: lispref/elisp.texi:12
#, no-wrap
msgid "Emacs"
msgstr "Emacs"

# type: direntry
#: lispref/elisp.texi:15
msgid "Elisp: (elisp)"
msgstr "Elisp: (elisp)"

# type: direntry
#: lispref/elisp.texi:15
msgid "The Emacs Lisp Reference Manual."
msgstr ""

# type: Plain text
#: lispref/elisp.texi:24 lispref/front-cover-1.texi:7 lispref/lay-flat.texi:12
#: lispref/vol1.texi:15 lispref/vol2.texi:16
msgid "@smallbook"
msgstr "@smallbook"

# type: ifset
#: lispref/elisp.texi:35
#, no-wrap
msgid ""
"\\global\\let\\urlcolor=\\Black % don't print links in grayscale\n"
"\\global\\let\\linkcolor=\\Black\n"
msgstr ""

# type: tex
#: lispref/elisp.texi:37
#, no-wrap
msgid "\\global\\hbadness=6666 % don't worry about not-too-underfull boxes\n"
msgstr ""

# type: copying
#: lispref/elisp.texi:50
msgid ""
"This is edition @value{VERSION} of the GNU Emacs Lisp Reference Manual,@* "
"corresponding to Emacs version @value{EMACSVER}."
msgstr ""

# type: copying
#: lispref/elisp.texi:54
msgid ""
"Copyright @copyright{} 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1998, 1999, "
"2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc."
msgstr ""

# type: quotation
#: lispref/elisp.texi:63
msgid ""
"Permission is granted to copy, distribute and/or modify this document under "
"the terms of the GNU Free Documentation License, Version 1.2 or any later "
"version published by the Free Software Foundation; with the Invariant "
"Sections being ``GNU General Public License,'' with the Front-Cover texts "
"being ``A GNU Manual,'' and with the Back-Cover Texts as in (a) below.  A "
"copy of the license is included in the section entitled ``GNU Free "
"Documentation License.''"
msgstr ""

# type: quotation
#: lispref/elisp.texi:67
msgid ""
"(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify this "
"GNU Manual, like GNU software.  Copies published by the Free Software "
"Foundation raise funds for GNU development.''"
msgstr ""

# type: subtitle
#: lispref/elisp.texi:72
#, no-wrap
msgid "For Emacs Version @value{EMACSVER}"
msgstr ""

# type: subtitle
#: lispref/elisp.texi:73
#, no-wrap
msgid "Revision @value{VERSION}, April 2007"
msgstr ""

# type: author
#: lispref/elisp.texi:75
#, no-wrap
msgid "by Bil Lewis, Dan LaLiberte, Richard Stallman"
msgstr ""

# type: titlepage
#: lispref/elisp.texi:87
msgid ""
"Published by the Free Software Foundation @* 51 Franklin St, Fifth Floor @* "
"Boston, MA 02110-1301 @* USA @* ISBN 1-882114-74-4"
msgstr ""

# type: titlepage
#: lispref/elisp.texi:90 lispref/vol1.texi:199 lispref/vol2.texi:200
msgid "Cover art by Etienne Suvasa."
msgstr ""

# type: menu
#: lispref/elisp.texi:99 lispref/elisp.texi:108 lispref/intro.texi:8
#: lispref/intro.texi:10 lispref/objects.texi:7 lispref/vol1.texi:212
#: lispref/vol1.texi:281 lispref/vol2.texi:213 lispref/vol2.texi:282
#, no-wrap
msgid "Introduction"
msgstr "Introduction"

# type: node
#: lispref/elisp.texi:99 lispref/vol1.texi:202 lispref/vol2.texi:203
#, no-wrap
msgid "(dir)"
msgstr "(dir)"

# type: ifnottex
#: lispref/elisp.texi:104
msgid ""
"This Info file contains edition @value{VERSION} of the GNU Emacs Lisp "
"Reference Manual, corresponding to GNU Emacs version @value{EMACSVER}."
msgstr ""
"Ce dossier d'information contient l'édition @value{VERSION} du Manuel\n"
"de référence GNU Emacs Lisp, correspondant à la version\n"
"@value{EMACSVER} de GNU Emacs."

# type: menu
#: lispref/elisp.texi:108 lispref/vol1.texi:212 lispref/vol2.texi:213
msgid "Introduction and conventions used."
msgstr "Introduction et conventions utilisées."

# type: node
#: lispref/elisp.texi:118 lispref/intro.texi:8 lispref/numbers.texi:7
#: lispref/objects.texi:7 lispref/objects.texi:8 lispref/vol1.texi:221
#: lispref/vol1.texi:303 lispref/vol2.texi:222 lispref/vol2.texi:304
#, no-wrap
msgid "Lisp Data Types"
msgstr "Types de données Lisp"

# type: menu
#: lispref/elisp.texi:118 lispref/vol1.texi:221 lispref/vol2.texi:222
msgid "Data types of objects in Emacs Lisp."
msgstr "Types de données des objets dans Emacs Lisp."

# type: chapter
#: lispref/elisp.texi:118 lispref/numbers.texi:7 lispref/numbers.texi:8
#: lispref/objects.texi:7 lispref/strings.texi:7 lispref/vol1.texi:221
#: lispref/vol1.texi:349 lispref/vol2.texi:222 lispref/vol2.texi:350
#, no-wrap
msgid "Numbers"
msgstr "Nombres"

# type: menu
#: lispref/elisp.texi:118 lispref/vol1.texi:221 lispref/vol2.texi:222
msgid "Numbers and arithmetic functions."
msgstr "Nombres et fonctions arithmétiques."

# type: node
#: lispref/elisp.texi:118 lispref/lists.texi:7 lispref/numbers.texi:7
#: lispref/strings.texi:7 lispref/strings.texi:9 lispref/vol1.texi:221
#: lispref/vol1.texi:361 lispref/vol2.texi:222 lispref/vol2.texi:362
#, no-wrap
msgid "Strings and Characters"
msgstr "Chaînes et caractères"

# type: menu
#: lispref/elisp.texi:118 lispref/vol1.texi:221 lispref/vol2.texi:222
msgid "Strings, and functions that work on them."
msgstr "Chaînes et fonctions qui sont basés sur elles."

# type: menu
#: lispref/elisp.texi:118 lispref/lists.texi:7 lispref/lists.texi:8
#: lispref/sequences.texi:7 lispref/strings.texi:7 lispref/vol1.texi:221
#: lispref/vol1.texi:371 lispref/vol2.texi:222 lispref/vol2.texi:372
#, no-wrap
msgid "Lists"
msgstr ""

# type: menu
#: lispref/elisp.texi:118 lispref/vol1.texi:221 lispref/vol2.texi:222
msgid "Lists, cons cells, and related functions."
msgstr ""

# type: menu
#: lispref/elisp.texi:118 lispref/hash.texi:7 lispref/lists.texi:7
#: lispref/sequences.texi:7 lispref/vol1.texi:221 lispref/vol2.texi:222
#, no-wrap
msgid "Sequences Arrays Vectors"
msgstr ""

# type: menu
#: lispref/elisp.texi:118 lispref/vol1.texi:221 lispref/vol2.texi:222
msgid "Lists, strings and vectors are called sequences."
msgstr ""

# type: menu
#: lispref/elisp.texi:118 lispref/vol1.texi:221 lispref/vol2.texi:222
msgid "Certain functions act on any kind of sequence."
msgstr ""

# type: menu
#: lispref/elisp.texi:118 lispref/vol1.texi:221 lispref/vol2.texi:222
msgid "The description of vectors is here as well."
msgstr ""

# type: node
#: lispref/elisp.texi:118 lispref/hash.texi:7 lispref/hash.texi:8
#: lispref/sequences.texi:7 lispref/symbols.texi:7
#, no-wrap
msgid "Hash Tables"
msgstr "Tables de hachage"

# type: menu
#: lispref/elisp.texi:118
msgid "Very fast lookup-tables."
msgstr ""

# type: menu
#: lispref/elisp.texi:118 lispref/eval.texi:7 lispref/hash.texi:7
#: lispref/symbols.texi:7 lispref/symbols.texi:8 lispref/symbols.texi:35
#: lispref/symbols.texi:140 lispref/symbols.texi:185 lispref/symbols.texi:400
#: lispref/vol1.texi:221 lispref/vol1.texi:396 lispref/vol2.texi:222
#: lispref/vol2.texi:397
#, no-wrap
msgid "Symbols"
msgstr "Symboles"

# type: menu
#: lispref/elisp.texi:118 lispref/vol1.texi:221 lispref/vol2.texi:222
msgid "Symbols represent names, uniquely."
msgstr "Les symboles représentent des noms, de façon unique."

# type: menu
#: lispref/elisp.texi:126 lispref/vol1.texi:228 lispref/vol2.texi:229
msgid "How Lisp expressions are evaluated."
msgstr "Comment les expressions Lisp sont évaluées."

# type: menu
#: lispref/elisp.texi:126 lispref/vol1.texi:228 lispref/vol2.texi:229
msgid "Conditionals, loops, nonlocal exits."
msgstr "Conditions, boucles et sorties non locales."

# type: menu
#: lispref/elisp.texi:126 lispref/vol1.texi:228 lispref/vol2.texi:229
msgid "Using symbols in programs to stand for values."
msgstr "Utilisation de symboles dans des programmes à la place de valeurs."

# type: menu
#: lispref/elisp.texi:126 lispref/functions.texi:7 lispref/functions.texi:8
#: lispref/macros.texi:7 lispref/variables.texi:7 lispref/vol1.texi:228
#: lispref/vol1.texi:477 lispref/vol2.texi:229 lispref/vol2.texi:478
#, no-wrap
msgid "Functions"
msgstr "Fonctions"

# type: menu
#: lispref/elisp.texi:126 lispref/vol1.texi:228 lispref/vol2.texi:229
msgid "A function is a Lisp program"
msgstr "Une fonction est un programme Lisp"

# NOTE: menu à revoir
# type: menu
#: lispref/elisp.texi:126 lispref/vol1.texi:228 lispref/vol2.texi:229
msgid "that can be invoked from other functions."
msgstr "qui peut être appelée depuis d'autres fonctions."

# type: menu
#: lispref/elisp.texi:126 lispref/vol1.texi:228 lispref/vol2.texi:229
msgid "Macros are a way to extend the Lisp language."
msgstr "Les macros sont un moyen d'étendre le langage Lisp."

# type: menu
#: lispref/elisp.texi:126
msgid "Writing customization declarations."
msgstr "Écriture de déclarations de personnalisation."

# type: menu
#: lispref/elisp.texi:131 lispref/vol1.texi:232 lispref/vol2.texi:233
msgid "Reading files of Lisp code into Lisp."
msgstr "Lire des fichiers de code Lisp depuis Lisp."

# type: menu
#: lispref/elisp.texi:131 lispref/vol1.texi:232 lispref/vol2.texi:233
msgid "Compilation makes programs run faster."
msgstr "La compilation rend les programmes plus rapides."

# type: menu
#: lispref/elisp.texi:131
msgid "Adding to the definition of a function."
msgstr ""

# type: menu
#: lispref/elisp.texi:131 lispref/vol1.texi:232 lispref/vol2.texi:233
msgid "Tools and tips for debugging Lisp programs."
msgstr "Outils et astuces pour le débogage de programmes Lisp."

# type: menu
#: lispref/elisp.texi:139 lispref/vol1.texi:240 lispref/vol2.texi:241
msgid "Converting Lisp objects to text and back."
msgstr "Convertir des objets Lisp en texte et inversement."

# type: menu
#: lispref/elisp.texi:139 lispref/vol1.texi:240 lispref/vol2.texi:241
msgid "Using the minibuffer to read input."
msgstr "Utilisation du minibuffer pour la lecture de l'entrée."

# type: menu
#: lispref/elisp.texi:139 lispref/vol1.texi:240 lispref/vol2.texi:241
msgid "How the editor command loop works,"
msgstr ""

# type: menu
#: lispref/elisp.texi:139 lispref/vol1.texi:240 lispref/vol2.texi:241
msgid "and how you can call its subroutines."
msgstr ""

# type: menu
#: lispref/elisp.texi:139 lispref/vol1.texi:240 lispref/vol2.texi:241
msgid "Defining the bindings from keys to commands."
msgstr "Définition de l'association des touches à des commandes."

# type: menu
#: lispref/elisp.texi:139 lispref/help.texi:7 lispref/keymaps.texi:7
#: lispref/modes.texi:7 lispref/vol1.texi:240 lispref/vol2.texi:241
#, no-wrap
msgid "Modes"
msgstr "Modes"

# type: menu
#: lispref/elisp.texi:139 lispref/vol1.texi:240 lispref/vol2.texi:241
msgid "Defining major and minor modes."
msgstr "Définition de modes majeurs et mineurs."

# type: menu
#: lispref/elisp.texi:139 lispref/files.texi:7 lispref/help.texi:7
#: lispref/help.texi:8 lispref/modes.texi:7 lispref/vol1.texi:240
#: lispref/vol1.texi:643 lispref/vol2.texi:241 lispref/vol2.texi:644
#, no-wrap
msgid "Documentation"
msgstr "Documentation"

# type: menu
#: lispref/elisp.texi:139 lispref/vol1.texi:240 lispref/vol2.texi:241
msgid "Writing and using documentation strings."
msgstr ""

# type: menu
#: lispref/elisp.texi:149 lispref/vol1.texi:250 lispref/vol2.texi:251
msgid "Accessing files."
msgstr ""

# type: menu
#: lispref/elisp.texi:149 lispref/vol1.texi:250 lispref/vol2.texi:251
msgid "Controlling how backups and auto-save"
msgstr ""

# type: menu
#: lispref/elisp.texi:149 lispref/vol1.texi:250 lispref/vol2.texi:251
msgid "files are made."
msgstr ""

# type: menu
#: lispref/elisp.texi:149 lispref/vol1.texi:250 lispref/vol2.texi:251
msgid "Creating and using buffer objects."
msgstr ""

# type: menu
#: lispref/elisp.texi:149 lispref/vol1.texi:250 lispref/vol2.texi:251
msgid "Manipulating windows and displaying buffers."
msgstr ""

# type: node
#: lispref/elisp.texi:149 lispref/frames.texi:7 lispref/frames.texi:8
#: lispref/positions.texi:7 lispref/vol1.texi:250 lispref/vol1.texi:741
#: lispref/vol2.texi:251 lispref/vol2.texi:742 lispref/windows.texi:7
#, no-wrap
msgid "Frames"
msgstr ""

# type: menu
#: lispref/elisp.texi:149
msgid "Making multiple system-level windows."
msgstr ""

# type: menu
#: lispref/elisp.texi:149 lispref/frames.texi:7 lispref/markers.texi:7
#: lispref/positions.texi:7 lispref/positions.texi:8 lispref/vol1.texi:250
#: lispref/vol1.texi:767 lispref/vol2.texi:251 lispref/vol2.texi:768
#, no-wrap
msgid "Positions"
msgstr "Positions"

# type: menu
#: lispref/elisp.texi:149 lispref/vol1.texi:250 lispref/vol2.texi:251
msgid "Buffer positions and motion functions."
msgstr ""

# type: menu
#: lispref/elisp.texi:149 lispref/markers.texi:7 lispref/markers.texi:8
#: lispref/positions.texi:7 lispref/text.texi:7 lispref/vol1.texi:250
#: lispref/vol1.texi:784 lispref/vol2.texi:251 lispref/vol2.texi:785
#, no-wrap
msgid "Markers"
msgstr "Marqueurs"

# type: menu
#: lispref/elisp.texi:149 lispref/vol1.texi:250 lispref/vol2.texi:251
msgid "Markers represent positions and update"
msgstr ""

# type: menu
#: lispref/elisp.texi:149 lispref/vol1.texi:250 lispref/vol2.texi:251
msgid "automatically when the text is changed."
msgstr ""

# type: menu
#: lispref/elisp.texi:155 lispref/markers.texi:7 lispref/nonascii.texi:7
#: lispref/text.texi:7 lispref/text.texi:8 lispref/vol1.texi:255
#: lispref/vol1.texi:795 lispref/vol2.texi:256 lispref/vol2.texi:796
#, no-wrap
msgid "Text"
msgstr "Texte"

# type: menu
#: lispref/elisp.texi:155 lispref/vol1.texi:255 lispref/vol2.texi:256
msgid "Examining and changing text in buffers."
msgstr ""

# type: node
#: lispref/elisp.texi:155 lispref/nonascii.texi:7 lispref/searching.texi:7
#: lispref/text.texi:7
#, no-wrap
msgid "Non-ASCII Characters"
msgstr "Charactères non-ASCII"

# type: menu
#: lispref/elisp.texi:155
msgid "Non-ASCII text in buffers and strings."
msgstr ""

# type: menu
#: lispref/elisp.texi:155 lispref/nonascii.texi:7 lispref/searching.texi:7
#: lispref/searching.texi:8 lispref/syntax.texi:7 lispref/vol1.texi:255
#: lispref/vol1.texi:834 lispref/vol2.texi:256 lispref/vol2.texi:835
#, no-wrap
msgid "Searching and Matching"
msgstr "Recherches et correspondances"

# type: menu
#: lispref/elisp.texi:155 lispref/vol1.texi:255 lispref/vol2.texi:256
msgid "Searching buffers for strings or regexps."
msgstr "Rechercher une chaîne ou expression rationnelle dans un buffer."

# type: menu
#: lispref/elisp.texi:155 lispref/vol1.texi:255 lispref/vol2.texi:256
msgid "The syntax table controls word and list parsing."
msgstr ""

# type: menu
#: lispref/elisp.texi:155 lispref/vol1.texi:255 lispref/vol2.texi:256
msgid "How Abbrev mode works, and its data structures."
msgstr ""

# type: menu
#: lispref/elisp.texi:160 lispref/vol1.texi:261 lispref/vol2.texi:262
msgid "Running and communicating with subprocesses."
msgstr ""

# type: menu
#: lispref/elisp.texi:160
msgid "Features for controlling the screen display."
msgstr ""

# type: menu
#: lispref/elisp.texi:160 lispref/vol1.texi:261 lispref/vol2.texi:262
msgid "Getting the user id, system type, environment"
msgstr ""

# type: menu
#: lispref/elisp.texi:160 lispref/vol1.texi:261 lispref/vol2.texi:262
msgid "variables, and other such things."
msgstr ""

# type: menu
#: lispref/elisp.texi:162 lispref/vol1.texi:263 lispref/vol2.texi:264
msgid "Appendices"
msgstr "Annexes"

# type: menu
#: lispref/elisp.texi:174
msgid "Info for users downgrading to Emacs 21."
msgstr ""

# type: menu
#: lispref/elisp.texi:174
msgid "The license for this documentation"
msgstr ""

# type: menu
#: lispref/elisp.texi:174 lispref/vol1.texi:212 lispref/vol2.texi:213
msgid "Conditions for copying and changing GNU Emacs."
msgstr ""

# type: menu
#: lispref/elisp.texi:174 lispref/gpl.texi:4 lispref/internals.texi:7
#: lispref/tips.texi:7 lispref/vol1.texi:271 lispref/vol2.texi:272
#, no-wrap
msgid "Tips"
msgstr "Astuces"

# type: menu
#: lispref/elisp.texi:174
msgid "Advice and coding conventions for Emacs Lisp."
msgstr "Conseils et règles de codage pour le Lisp d'Emacs."

# type: menu
#: lispref/elisp.texi:174 lispref/errors.texi:7 lispref/internals.texi:7
#: lispref/internals.texi:9 lispref/tips.texi:7 lispref/vol1.texi:271
#: lispref/vol1.texi:930 lispref/vol2.texi:272 lispref/vol2.texi:931
#, no-wrap
msgid "GNU Emacs Internals"
msgstr "Fonctionnement interne de GNU Emacs"

# type: menu
#: lispref/elisp.texi:174 lispref/vol1.texi:271 lispref/vol2.texi:272
msgid "Building and dumping Emacs;"
msgstr ""

# type: menu
#: lispref/elisp.texi:174 lispref/vol1.texi:271 lispref/vol2.texi:272
msgid "internal data structures."
msgstr ""

# type: menu
#: lispref/elisp.texi:174 lispref/errors.texi:7 lispref/errors.texi:8
#: lispref/internals.texi:7 lispref/locals.texi:7 lispref/vol1.texi:271
#: lispref/vol2.texi:272
#, no-wrap
msgid "Standard Errors"
msgstr "Erreurs standard"

# type: menu
#: lispref/elisp.texi:174 lispref/vol1.texi:271 lispref/vol2.texi:272
msgid "List of all error symbols."
msgstr "Liste de tous les symboles d'erreur"

# type: menu
#: lispref/elisp.texi:174 lispref/errors.texi:7 lispref/locals.texi:7
#: lispref/maps.texi:7 lispref/vol1.texi:271 lispref/vol2.texi:272
#, no-wrap
msgid "Standard Buffer-Local Variables"
msgstr ""

# type: menu
#: lispref/elisp.texi:174
msgid "List of variables buffer-local in all buffers."
msgstr ""

# type: menu
#: lispref/elisp.texi:174 lispref/hooks.texi:7 lispref/locals.texi:7
#: lispref/maps.texi:7 lispref/maps.texi:8 lispref/vol1.texi:271
#: lispref/vol2.texi:272
#, no-wrap
msgid "Standard Keymaps"
msgstr ""

# type: menu
#: lispref/elisp.texi:174 lispref/vol1.texi:271 lispref/vol2.texi:272
msgid "List of standard keymaps."
msgstr ""

# type: menu
#: lispref/elisp.texi:174 lispref/hooks.texi:7 lispref/hooks.texi:8
#: lispref/index.texi:22 lispref/maps.texi:7 lispref/vol1.texi:271
#: lispref/vol2.texi:272
#, no-wrap
msgid "Standard Hooks"
msgstr ""

# type: menu
#: lispref/elisp.texi:174 lispref/vol1.texi:271 lispref/vol2.texi:272
msgid "List of standard hook variables."
msgstr ""

# type: menu
#: lispref/elisp.texi:177 lispref/elisp.texi:1472 lispref/hooks.texi:7
#: lispref/index.texi:22 lispref/index.texi:23 lispref/vol1.texi:274
#: lispref/vol2.texi:275
#, no-wrap
msgid "Index"
msgstr ""

# type: menu
#: lispref/elisp.texi:177 lispref/vol1.texi:274 lispref/vol2.texi:275
msgid "Index including concepts, functions, variables,"
msgstr ""

# type: menu
#: lispref/elisp.texi:177 lispref/vol1.texi:274 lispref/vol2.texi:275
msgid "and other terms."
msgstr ""

# type: ignore
#: lispref/elisp.texi:180
#, no-wrap
msgid "* New Symbols::             New functions and variables in Emacs @value{EMACSVER}.\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:190
#, no-wrap
msgid ""
" --- The Detailed Node Listing ---\n"
" ---------------------------------\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:193
#, no-wrap
msgid ""
"Here are other nodes that are inferiors of those already listed,\n"
"mentioned here so you can get to them in one step:\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:195
#, no-wrap
msgid ""
"Introduction\n"
"\n"
msgstr ""
"Introduction\n"
"\n"

# type: detailmenu
#: lispref/elisp.texi:201
#, no-wrap
msgid ""
"* Caveats::                 Flaws and a request for help.\n"
"* Lisp History::            Emacs Lisp is descended from Maclisp.\n"
"* Conventions::             How the manual is formatted.\n"
"* Version Info::            Which Emacs version is running?\n"
"* Acknowledgements::        The authors, editors, and sponsors of this manual.\n"
"\n"
msgstr ""
"* Avertissements::              Erreurs et demande d'aide.\n"
"* L'histoire de Lisp::          Emacs Lisp descend de Maclisp.\n"
"* Conventions::                 Comment le manuel est composé.\n"
"* Information de version::      Quelle version d'Emacs fonctionne?\n"
"* Remerciements::               Les auteurs, les rédacteurs, et les commanditaires de ce manuel.\n"
"\n"

# type: detailmenu
#: lispref/elisp.texi:203
#, no-wrap
msgid ""
"Conventions\n"
"\n"
msgstr ""
"Conventions\n"
"\n"

# type: detailmenu
#: lispref/elisp.texi:211
#, no-wrap
msgid ""
"* Some Terms::              Explanation of terms we use in this manual.\n"
"* nil and t::               How the symbols @code{nil} and @code{t} are used.\n"
"* Evaluation Notation::     The format we use for examples of evaluation.\n"
"* Printing Notation::       The format we use for examples that print output.\n"
"* Error Messages::          The format we use for examples of errors.\n"
"* Buffer Text Notation::    The format we use for buffer contents in examples.\n"
"* Format of Descriptions::  Notation for describing functions, variables, etc.\n"
"\n"
msgstr ""
"* Quelques termes::             Explication des termes que nous employons en ce manuel.\n"
"* nil et t::                    Comment les symboles @code{nil} et @code{t} sont employés.\n"
"* Notation d'évaluation::       Le format que nous employons pour des exemples de l'évaluation.\n"
"* Notation d'affichage::        Le format que nous employons quand les exemples affichent du texte.\n"
"* Messages d'erreur::           Le format que nous employons pour des exemples d'erreurs.\n"
"* Notation des textes de tampon:: Le format que nous employons pour le contenu de tampons dans les exemples.\n"
"* Format des descriptions::     Notation pour décrire des fonctions, des variables, etc.\n"
"\n"

# type: detailmenu
#: lispref/elisp.texi:213
#, no-wrap
msgid ""
"Format of Descriptions\n"
"\n"
msgstr "Format de descriptions\n\n"

# type: detailmenu
#: lispref/elisp.texi:218
#, no-wrap
msgid ""
"* A Sample Function Description::  A description of an imaginary\n"
"                                     function, @code{foo}.\n"
"* A Sample Variable Description::  A description of an imaginary\n"
"                                     variable, @code{electric-future-map}.\n"
"\n"
msgstr ""
"* Un exemple d'une description de fonction::  Une description d'une imaginaire\n"
"                                     fonction, @code{foo}.\n"
"* Un exemple d'une description de variable::  Une description d'une imaginaire\n"
"                                     variable, @code{electric-future-map}.\n"
"\n"

# type: detailmenu
#: lispref/elisp.texi:220
#, no-wrap
msgid ""
"Lisp Data Types\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:228
#, no-wrap
msgid ""
"* Printed Representation::  How Lisp objects are represented as text.\n"
"* Comments::                Comments and their formatting conventions.\n"
"* Programming Types::       Types found in all Lisp systems.\n"
"* Editing Types::           Types specific to Emacs.\n"
"* Circular Objects::            Read syntax for circular structure.\n"
"* Type Predicates::         Tests related to types.\n"
"* Equality Predicates::     Tests of equality between any two objects.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:230
#, no-wrap
msgid ""
"Programming Types\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:252
#, no-wrap
msgid ""
"* Integer Type::        Numbers without fractional parts.\n"
"* Floating Point Type:: Numbers with fractional parts and with a large range.\n"
"* Character Type::      The representation of letters, numbers and\n"
"                          control characters.\n"
"* Symbol Type::         A multi-use object that refers to a function,\n"
"                        variable, property list, or itself.\n"
"* Sequence Type::       Both lists and arrays are classified as sequences.\n"
"* Cons Cell Type::      Cons cells, and lists (which are made from cons cells).\n"
"* Array Type::          Arrays include strings and vectors.\n"
"* String Type::         An (efficient) array of characters.\n"
"* Vector Type::         One-dimensional arrays.\n"
"* Char-Table Type::     One-dimensional sparse arrays indexed by characters.\n"
"* Bool-Vector Type::    One-dimensional arrays of @code{t} or @code{nil}.\n"
"* Hash Table Type::     Super-fast lookup tables.\n"
"* Function Type::       A piece of executable code you can call from elsewhere.\n"
"* Macro Type::          A method of expanding an expression into another\n"
"                          expression, more fundamental but less pretty.\n"
"* Primitive Function Type::     A function written in C, callable from Lisp.\n"
"* Byte-Code Type::      A function written in Lisp, then compiled.\n"
"* Autoload Type::       A type used for automatically loading seldom-used\n"
"                          functions.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:254
#, no-wrap
msgid ""
"Character Type\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:260
#, no-wrap
msgid ""
"* Basic Char Syntax::       Syntax for regular characters.\n"
"* General Escape Syntax::   How to specify characters by their codes.\n"
"* Ctl-Char Syntax::         Syntax for control characters.\n"
"* Meta-Char Syntax::        Syntax for meta-characters.\n"
"* Other Char Bits::         Syntax for hyper-, super-, and alt-characters.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:262
#, no-wrap
msgid ""
"Cons Cell and List Types\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:266
#, no-wrap
msgid ""
"* Box Diagrams::            Drawing pictures of lists.\n"
"* Dotted Pair Notation::    An alternative syntax for lists.\n"
"* Association List Type::   A specially constructed list.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:268
#, no-wrap
msgid ""
"String Type\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:273
#, no-wrap
msgid ""
"* Syntax for Strings::      How to specify Lisp strings.\n"
"* Non-ASCII in Strings::    International characters in strings.\n"
"* Nonprinting Characters::  Literal unprintable characters in strings.\n"
"* Text Props and Strings::  Strings with text properties.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:275
#, no-wrap
msgid ""
"Editing Types\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:286
#, no-wrap
msgid ""
"* Buffer Type::             The basic object of editing.\n"
"* Marker Type::             A position in a buffer.\n"
"* Window Type::             What makes buffers visible.\n"
"* Frame Type::\t\t    Windows subdivide frames.\n"
"* Window Configuration Type::  Recording the way a frame is subdivided.\n"
"* Frame Configuration Type::   Recording the status of all frames.\n"
"* Process Type::            A process running on the underlying OS.\n"
"* Stream Type::             Receive or send characters.\n"
"* Keymap Type::             What function a keystroke invokes.\n"
"* Overlay Type::            How an overlay is represented.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:288
#, no-wrap
msgid ""
"Numbers\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:299
#, no-wrap
msgid ""
"* Integer Basics::          Representation and range of integers.\n"
"* Float Basics::\t    Representation and range of floating point.\n"
"* Predicates on Numbers::   Testing for numbers.\n"
"* Comparison of Numbers::   Equality and inequality predicates.\n"
"* Numeric Conversions::\t    Converting float to integer and vice versa.\n"
"* Arithmetic Operations::   How to add, subtract, multiply and divide.\n"
"* Rounding Operations::     Explicitly rounding floating point numbers.\n"
"* Bitwise Operations::      Logical and, or, not, shifting.\n"
"* Math Functions::          Trig, exponential and logarithmic functions.\n"
"* Random Numbers::          Obtaining random integers, predictable or not.\n"
"\n"
msgstr ""
"* Entiers basiques::                     Représentation et champ des nombres entiers.\n"
"* Nombres à virgule flottante basiques:: Représentation et champ des monbres à virgule flottante.\n"
"* Attributs des nombres::                Tester les nombres.\n"
"* Comparaison des nombres::              Attributs d'égalité et d'inégalité.\n"
"* Conversions numériques::               Convertir des nombres à virgule flottante en nombres entiers et vice-versa.\n"
"* Opérations arithmétiques::             Comment additionner, soustraire, multiplier et diviser.\n"
"* Opérations d'arrondissage::            Arrondir explicitement les nombres à virgule flottante.\n"
"* Opérations de bits::                   and, or, not logique et décalage.\n"
"* Fonctions mathématiques::              Fonctions trigonométrique, exponentielle et logarithmique.\n"
"* Nombres aléatoires::                   Obtention des nombres entiers aléatoires, prévisibles ou pas.\n"
"\n"

# type: detailmenu
#: lispref/elisp.texi:301
#, no-wrap
msgid ""
"Strings and Characters\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:311
#, no-wrap
msgid ""
"* String Basics::           Basic properties of strings and characters.\n"
"* Predicates for Strings::  Testing whether an object is a string or char.\n"
"* Creating Strings::        Functions to allocate new strings.\n"
"* Modifying Strings::         Altering the contents of an existing string.\n"
"* Text Comparison::         Comparing characters or strings.\n"
"* String Conversion::       Converting characters to strings and vice versa.\n"
"* Formatting Strings::      @code{format}: Emacs's analogue of @code{printf}.\n"
"* Case Conversion::         Case conversion functions.\n"
"* Case Tables::\t\t    Customizing case conversion.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:313
#, no-wrap
msgid ""
"Lists\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:323
#, no-wrap
msgid ""
"* Cons Cells::              How lists are made out of cons cells.\n"
"* List-related Predicates:: Is this object a list?  Comparing two lists.\n"
"* List Elements::           Extracting the pieces of a list.\n"
"* Building Lists::          Creating list structure.\n"
"* List Variables::          Modifying lists stored in variables.\n"
"* Modifying Lists::         Storing new pieces into an existing list.\n"
"* Sets And Lists::          A list can represent a finite mathematical set.\n"
"* Association Lists::       A list can represent a finite relation or mapping.\n"
"* Rings::                   Managing a fixed-size ring of objects.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:325
#, no-wrap
msgid ""
"Modifying Existing List Structure\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:330
#, no-wrap
msgid ""
"* Setcar::                  Replacing an element in a list.\n"
"* Setcdr::                  Replacing part of the list backbone.\n"
"                              This can be used to remove or add elements.\n"
"* Rearrangement::           Reordering the elements in a list; combining lists.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:332
#, no-wrap
msgid ""
"Sequences, Arrays, and Vectors\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:340
#, no-wrap
msgid ""
"* Sequence Functions::      Functions that accept any kind of sequence.\n"
"* Arrays::                  Characteristics of arrays in Emacs Lisp.\n"
"* Array Functions::         Functions specifically for arrays.\n"
"* Vectors::                 Special characteristics of Emacs Lisp vectors.\n"
"* Vector Functions::        Functions specifically for vectors.\n"
"* Char-Tables::             How to work with char-tables.\n"
"* Bool-Vectors::            How to work with bool-vectors.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:342
#, no-wrap
msgid ""
"Hash Tables\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:347
#, no-wrap
msgid ""
"* Creating Hash::           Functions to create hash tables.\n"
"* Hash Access::             Reading and writing the hash table contents.\n"
"* Defining Hash::           Defining new comparison methods\n"
"* Other Hash::              Miscellaneous.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:349
#, no-wrap
msgid ""
"Symbols\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:356
#, no-wrap
msgid ""
"* Symbol Components::       Symbols have names, values, function definitions\n"
"                              and property lists.\n"
"* Definitions::             A definition says how a symbol will be used.\n"
"* Creating Symbols::        How symbols are kept unique.\n"
"* Property Lists::          Each symbol has a property list\n"
"                              for recording miscellaneous information.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:358
#, no-wrap
msgid ""
"Property Lists\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:363
#, no-wrap
msgid ""
"* Plists and Alists::       Comparison of the advantages of property\n"
"                              lists and association lists.\n"
"* Symbol Plists::           Functions to access symbols' property lists.\n"
"* Other Plists::            Accessing property lists stored elsewhere.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:365
#, no-wrap
msgid ""
"Evaluation\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:371
#, no-wrap
msgid ""
"* Intro Eval::              Evaluation in the scheme of things.\n"
"* Forms::                   How various sorts of objects are evaluated.\n"
"* Quoting::                 Avoiding evaluation (to put constants in\n"
"                              the program).\n"
"* Eval::                    How to invoke the Lisp interpreter explicitly.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:373
#, no-wrap
msgid ""
"Kinds of Forms\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:385
#, no-wrap
msgid ""
"* Self-Evaluating Forms::   Forms that evaluate to themselves.\n"
"* Symbol Forms::            Symbols evaluate as variables.\n"
"* Classifying Lists::       How to distinguish various sorts of list forms.\n"
"* Function Indirection::    When a symbol appears as the car of a list,\n"
"\t\t\t      we find the real function via the symbol.\n"
"* Function Forms::          Forms that call functions.\n"
"* Macro Forms::             Forms that call macros.\n"
"* Special Forms::           \"Special forms\" are idiosyncratic primitives,\n"
"                              most of them extremely important.\n"
"* Autoloading::             Functions set up to load files\n"
"                              containing their real definitions.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:387
#, no-wrap
msgid ""
"Control Structures\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:393
#, no-wrap
msgid ""
"* Sequencing::              Evaluation in textual order.\n"
"* Conditionals::            @code{if}, @code{cond}, @code{when}, @code{unless}.\n"
"* Combining Conditions::    @code{and}, @code{or}, @code{not}.\n"
"* Iteration::               @code{while} loops.\n"
"* Nonlocal Exits::          Jumping out of a sequence.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:395
#, no-wrap
msgid ""
"Nonlocal Exits\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:401
#, no-wrap
msgid ""
"* Catch and Throw::         Nonlocal exits for the program's own purposes.\n"
"* Examples of Catch::       Showing how such nonlocal exits can be written.\n"
"* Errors::                  How errors are signaled and handled.\n"
"* Cleanups::                Arranging to run a cleanup form if an\n"
"                              error happens.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:403
#, no-wrap
msgid ""
"Errors\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:409
#, no-wrap
msgid ""
"* Signaling Errors::        How to report an error.\n"
"* Processing of Errors::    What Emacs does when you report an error.\n"
"* Handling Errors::         How you can trap errors and continue execution.\n"
"* Error Symbols::           How errors are classified for trapping them.\n"
"* Standard Errors::         List of all error symbols.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:411
#, no-wrap
msgid ""
"Variables\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:432
#, no-wrap
msgid ""
"* Global Variables::        Variable values that exist permanently, everywhere.\n"
"* Constant Variables::      Certain \"variables\" have values that never change.\n"
"* Local Variables::         Variable values that exist only temporarily.\n"
"* Void Variables::          Symbols that lack values.\n"
"* Defining Variables::      A definition says a symbol is used as a variable.\n"
"* Tips for Defining::       Things you should think about when you\n"
"                              define a variable.\n"
"* Accessing Variables::     Examining values of variables whose names\n"
"                              are known only at run time.\n"
"* Setting Variables::       Storing new values in variables.\n"
"* Variable Scoping::        How Lisp chooses among local and global values.\n"
"* Buffer-Local Variables::  Variable values in effect only in one buffer.\n"
"* Frame-Local Variables::   Variable values in effect only in one frame.\n"
"* Future Local Variables::  New kinds of local values we might add some day.\n"
"* File Local Variables::    Handling local variable lists in files.\n"
"* Variable Aliases::        Variables that are aliases for other variables.\n"
"* Variables with Restricted Values::  Non-constant variables whose value can\n"
"                                        @emph{not} be an arbitrary Lisp object.\n"
"* Standard Buffer-Local Variables::\n"
"                            List of variables buffer-local in all buffers.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:434
#, no-wrap
msgid ""
"Scoping Rules for Variable Bindings\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:441
#, no-wrap
msgid ""
"* Scope::                   Scope means where in the program a value\n"
"                              is visible.  Comparison with other languages.\n"
"* Extent::                  Extent means how long in time a value exists.\n"
"* Impl of Scope::           Two ways to implement dynamic scoping.\n"
"* Using Scoping::           How to use dynamic scoping carefully and\n"
"                              avoid problems.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:443
#, no-wrap
msgid ""
"Buffer-Local Variables\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:448
#, no-wrap
msgid ""
"* Intro to Buffer-Local::   Introduction and concepts.\n"
"* Creating Buffer-Local::   Creating and destroying buffer-local bindings.\n"
"* Default Value::           The default value is seen in buffers\n"
"                              that don't have their own buffer-local values.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:450
#, no-wrap
msgid ""
"Functions\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:466
#, no-wrap
msgid ""
"* What Is a Function::      Lisp functions vs primitives; terminology.\n"
"* Lambda Expressions::      How functions are expressed as Lisp objects.\n"
"* Function Names::          A symbol can serve as the name of a function.\n"
"* Defining Functions::      Lisp expressions for defining functions.\n"
"* Calling Functions::       How to use an existing function.\n"
"* Mapping Functions::       Applying a function to each element of a list, etc.\n"
"* Anonymous Functions::     Lambda-expressions are functions with no names.\n"
"* Function Cells::          Accessing or setting the function definition\n"
"                              of a symbol.\n"
"* Obsolete Functions::      Declaring functions obsolete.\n"
"* Inline Functions::\t    Defining functions that the compiler will open code.\n"
"* Function Safety::         Determining whether a function is safe to call.\n"
"* Related Topics::          Cross-references to specific Lisp primitives\n"
"                              that have a special bearing on how\n"
"                              functions work.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:468
#, no-wrap
msgid ""
"Lambda Expressions\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:473
#, no-wrap
msgid ""
"* Lambda Components::       The parts of a lambda expression.\n"
"* Simple Lambda::           A simple example.\n"
"* Argument List::           Details and special features of argument lists.\n"
"* Function Documentation::  How to put documentation in a function.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:475
#, no-wrap
msgid ""
"Macros\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:484
#, no-wrap
msgid ""
"* Simple Macro::            A basic example.\n"
"* Expansion::               How, when and why macros are expanded.\n"
"* Compiling Macros::        How macros are expanded by the compiler.\n"
"* Defining Macros::         How to write a macro definition.\n"
"* Backquote::               Easier construction of list structure.\n"
"* Problems with Macros::    Don't evaluate the macro arguments too many times.\n"
"                              Don't hide the user's variables.\n"
"* Indenting Macros::        Specifying how to indent macro calls.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:486
#, no-wrap
msgid ""
"Common Problems Using Macros\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:493
#, no-wrap
msgid ""
"* Wrong Time::             Do the work in the expansion, not in the macro.\n"
"* Argument Evaluation::    The expansion should evaluate each macro arg once.\n"
"* Surprising Local Vars::  Local variable bindings in the expansion\n"
"                              require special care.\n"
"* Eval During Expansion::  Don't evaluate them; put them in the expansion.\n"
"* Repeated Expansion::     Avoid depending on how many times expansion is done.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:495
#, no-wrap
msgid ""
"Writing Customization Definitions\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:501
#, no-wrap
msgid ""
"* Common Keywords::         Common keyword arguments for all kinds of\n"
"                              customization declarations.\n"
"* Group Definitions::       Writing customization group definitions.\n"
"* Variable Definitions::    Declaring user options.\n"
"* Customization Types::     Specifying the type of a user option.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:503
#, no-wrap
msgid ""
"Customization Types\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:510
#, no-wrap
msgid ""
"* Simple Types::            Simple customization types: sexp, integer, number,\n"
"                              string, file, directory, alist.\n"
"* Composite Types::         Build new types from other types or data.\n"
"* Splicing into Lists::     Splice elements into list with @code{:inline}.\n"
"* Type Keywords::           Keyword-argument pairs in a customization type.\n"
"* Defining New Types::      Give your type a name.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:512
#, no-wrap
msgid ""
"Loading\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:524
#, no-wrap
msgid ""
"* How Programs Do Loading:: The @code{load} function and others.\n"
"* Load Suffixes::           Details about the suffixes that @code{load} tries.\n"
"* Library Search::          Finding a library to load.\n"
"* Loading Non-ASCII::       Non-@acronym{ASCII} characters in Emacs Lisp files.\n"
"* Autoload::                Setting up a function to autoload.\n"
"* Repeated Loading::        Precautions about loading a file twice.\n"
"* Named Features::          Loading a library if it isn't already loaded.\n"
"* Where Defined::           Finding which file defined a certain symbol.\n"
"* Unloading::\t\t    How to \"unload\" a library that was loaded.\n"
"* Hooks for Loading::\t    Providing code to be run when\n"
"\t\t\t      particular libraries are loaded.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:526
#, no-wrap
msgid ""
"Byte Compilation\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:535
#, no-wrap
msgid ""
"* Speed of Byte-Code::      An example of speedup from byte compilation.\n"
"* Compilation Functions::   Byte compilation functions.\n"
"* Docs and Compilation::    Dynamic loading of documentation strings.\n"
"* Dynamic Loading::         Dynamic loading of individual functions.\n"
"* Eval During Compile::     Code to be evaluated when you compile.\n"
"* Compiler Errors::         Handling compiler error messages.\n"
"* Byte-Code Objects::\t    The data type used for byte-compiled functions.\n"
"* Disassembly::             Disassembling byte-code; how to read byte-code.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:537
#, no-wrap
msgid ""
"Advising Emacs Lisp Functions\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:549
#, no-wrap
msgid ""
"* Simple Advice::           A simple example to explain the basics of advice.\n"
"* Defining Advice::         Detailed description of @code{defadvice}.\n"
"* Around-Advice::           Wrapping advice around a function's definition.\n"
"* Computed Advice::         ...is to @code{defadvice} as @code{fset} is to @code{defun}.\n"
"* Activation of Advice::    Advice doesn't do anything until you activate it.\n"
"* Enabling Advice::         You can enable or disable each piece of advice.\n"
"* Preactivation::           Preactivation is a way of speeding up the\n"
"                              loading of compiled advice.\n"
"* Argument Access in Advice:: How advice can access the function's arguments.\n"
"* Advising Primitives::     Accessing arguments when advising a primitive.\n"
"* Combined Definition::     How advice is implemented.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:551
#, no-wrap
msgid ""
"Debugging Lisp Programs\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:558
#, no-wrap
msgid ""
"* Debugger::                How the Emacs Lisp debugger is implemented.\n"
"* Edebug::                  A source-level Emacs Lisp debugger.\n"
"* Syntax Errors::           How to find syntax errors.\n"
"* Test Coverage::           Ensuring you have tested all branches in your code.\n"
"* Compilation Errors::      How to find errors that show up in\n"
"                              byte compilation.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:560
#, no-wrap
msgid ""
"The Lisp Debugger\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:569
#, no-wrap
msgid ""
"* Error Debugging::         Entering the debugger when an error happens.\n"
"* Infinite Loops::\t    Stopping and debugging a program that doesn't exit.\n"
"* Function Debugging::      Entering it when a certain function is called.\n"
"* Explicit Debug::          Entering it at a certain point in the program.\n"
"* Using Debugger::          What the debugger does; what you see while in it.\n"
"* Debugger Commands::       Commands used while in the debugger.\n"
"* Invoking the Debugger::   How to call the function @code{debug}.\n"
"* Internals of Debugger::   Subroutines of the debugger, and global variables.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:571
#, no-wrap
msgid ""
"Edebug\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:590
#, no-wrap
msgid ""
"* Using Edebug::\t    Introduction to use of Edebug.\n"
"* Instrumenting::\t    You must instrument your code\n"
"\t\t\t      in order to debug it with Edebug.\n"
"* Edebug Execution Modes::  Execution modes, stopping more or less often.\n"
"* Jumping::\t\t    Commands to jump to a specified place.\n"
"* Edebug Misc::\t\t    Miscellaneous commands.\n"
"* Breaks::\t\t    Setting breakpoints to make the program stop.\n"
"* Trapping Errors::\t    Trapping errors with Edebug.\n"
"* Edebug Views::\t    Views inside and outside of Edebug.\n"
"* Edebug Eval::\t\t    Evaluating expressions within Edebug.\n"
"* Eval List::\t\t    Expressions whose values are displayed\n"
"\t\t\t      each time you enter Edebug.\n"
"* Printing in Edebug::\t    Customization of printing.\n"
"* Trace Buffer::\t    How to produce trace output in a buffer.\n"
"* Coverage Testing::\t    How to test evaluation coverage.\n"
"* The Outside Context::\t    Data that Edebug saves and restores.\n"
"* Edebug and Macros::       Specifying how to handle macro calls.\n"
"* Edebug Options::\t    Option variables for customizing Edebug.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:592
#, no-wrap
msgid ""
"Debugging Invalid Lisp Syntax\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:595
#, no-wrap
msgid ""
"* Excess Open::             How to find a spurious open paren or missing close.\n"
"* Excess Close::            How to find a spurious close paren or missing open.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:597
#, no-wrap
msgid ""
"Reading and Printing Lisp Objects\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:607
#, no-wrap
msgid ""
"* Streams Intro::           Overview of streams, reading and printing.\n"
"* Input Streams::           Various data types that can be used as\n"
"                              input streams.\n"
"* Input Functions::         Functions to read Lisp objects from text.\n"
"* Output Streams::          Various data types that can be used as\n"
"                              output streams.\n"
"* Output Functions::        Functions to print Lisp objects as text.\n"
"* Output Variables::        Variables that control what the printing\n"
"                              functions do.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:609
#, no-wrap
msgid ""
"Minibuffers\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:625
#, no-wrap
msgid ""
"* Intro to Minibuffers::    Basic information about minibuffers.\n"
"* Text from Minibuffer::    How to read a straight text string.\n"
"* Object from Minibuffer::  How to read a Lisp object or expression.\n"
"* Minibuffer History::\t    Recording previous minibuffer inputs\n"
"\t\t\t      so the user can reuse them.\n"
"* Initial Input::           Specifying initial contents for the minibuffer.\n"
"* Completion::              How to invoke and customize completion.\n"
"* Yes-or-No Queries::       Asking a question with a simple answer.\n"
"* Multiple Queries::\t    Asking a series of similar questions.\n"
"* Reading a Password::\t    Reading a password from the terminal.\n"
"* Minibuffer Commands::     Commands used as key bindings in minibuffers.\n"
"* Minibuffer Contents::     How such commands access the minibuffer text.\n"
"* Minibuffer Windows::      Operating on the special minibuffer windows.\n"
"* Recursive Mini::          Whether recursive entry to minibuffer is allowed.\n"
"* Minibuffer Misc::         Various customization hooks and variables.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:627
#, no-wrap
msgid ""
"Completion\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:636
#, no-wrap
msgid ""
"* Basic Completion::        Low-level functions for completing strings.\n"
"                              (These are too low level to use the minibuffer.)\n"
"* Minibuffer Completion::   Invoking the minibuffer with completion.\n"
"* Completion Commands::     Minibuffer commands that do completion.\n"
"* High-Level Completion::   Convenient special cases of completion\n"
"                              (reading buffer name, file name, etc.)\n"
"* Reading File Names::      Using completion to read file names.\n"
"* Programmed Completion::   Finding the completions for a given file name.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:638
#, no-wrap
msgid ""
"Command Loop\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:655
#, no-wrap
msgid ""
"* Command Overview::    How the command loop reads commands.\n"
"* Defining Commands::   Specifying how a function should read arguments.\n"
"* Interactive Call::    Calling a command, so that it will read arguments.\n"
"* Command Loop Info::   Variables set by the command loop for you to examine.\n"
"* Adjusting Point::     Adjustment of point after a command.\n"
"* Input Events::\tWhat input looks like when you read it.\n"
"* Reading Input::       How to read input events from the keyboard or mouse.\n"
"* Special Events::      Events processed immediately and individually.\n"
"* Waiting::             Waiting for user input or elapsed time.\n"
"* Quitting::            How @kbd{C-g} works.  How to catch or defer quitting.\n"
"* Prefix Command Arguments::    How the commands to set prefix args work.\n"
"* Recursive Editing::   Entering a recursive edit,\n"
"                          and why you usually shouldn't.\n"
"* Disabling Commands::  How the command loop handles disabled commands.\n"
"* Command History::     How the command history is set up, and how accessed.\n"
"* Keyboard Macros::     How keyboard macros are implemented.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:657
#, no-wrap
msgid ""
"Defining Commands\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:662
#, no-wrap
msgid ""
"* Using Interactive::       General rules for @code{interactive}.\n"
"* Interactive Codes::       The standard letter-codes for reading arguments\n"
"                              in various ways.\n"
"* Interactive Examples::    Examples of how to read interactive arguments.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:664
#, no-wrap
msgid ""
"Input Events\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:680
#, no-wrap
msgid ""
"* Keyboard Events::         Ordinary characters--keys with symbols on them.\n"
"* Function Keys::           Function keys--keys with names, not symbols.\n"
"* Mouse Events::            Overview of mouse events.\n"
"* Click Events::            Pushing and releasing a mouse button.\n"
"* Drag Events::             Moving the mouse before releasing the button.\n"
"* Button-Down Events::      A button was pushed and not yet released.\n"
"* Repeat Events::           Double and triple click (or drag, or down).\n"
"* Motion Events::           Just moving the mouse, not pushing a button.\n"
"* Focus Events::            Moving the mouse between frames.\n"
"* Misc Events::             Other events the system can generate.\n"
"* Event Examples::          Examples of the lists for mouse events.\n"
"* Classifying Events::      Finding the modifier keys in an event symbol.\n"
"* Accessing Events::        Functions to extract info from events.\n"
"* Strings of Events::       Special considerations for putting\n"
"                              keyboard character events in a string.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:682
#, no-wrap
msgid ""
"Reading Input\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:689
#, no-wrap
msgid ""
"* Key Sequence Input::      How to read one key sequence.\n"
"* Reading One Event::       How to read just one event.\n"
"* Event Mod::               How Emacs modifies events as they are read.\n"
"* Invoking the Input Method::   How reading an event uses the input method.\n"
"* Quoted Character Input::  Asking the user to specify a character.\n"
"* Event Input Misc::        How to reread or throw away input events.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:691
#, no-wrap
msgid ""
"Keymaps\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:715
#, no-wrap
msgid ""
"* Key Sequences::           Key sequences as Lisp objects.\n"
"* Keymap Basics::           Basic concepts of keymaps.\n"
"* Format of Keymaps::       What a keymap looks like as a Lisp object.\n"
"* Creating Keymaps::        Functions to create and copy keymaps.\n"
"* Inheritance and Keymaps:: How one keymap can inherit the bindings\n"
"                              of another keymap.\n"
"* Prefix Keys::             Defining a key with a keymap as its definition.\n"
"* Active Keymaps::          How Emacs searches the active keymaps\n"
"                              for a key binding.\n"
"* Searching Keymaps::       A pseudo-Lisp summary of searching active maps.\n"
"* Controlling Active Maps:: Each buffer has a local keymap\n"
"                               to override the standard (global) bindings.\n"
"                               A minor mode can also override them.\n"
"* Key Lookup::              How extracting elements from keymaps works.\n"
"* Functions for Key Lookup::    How to request key lookup.\n"
"* Changing Key Bindings::   Redefining a key in a keymap.\n"
"* Remapping Commands::      A keymap can translate one command to another.\n"
"* Translation Keymaps::     Keymaps for translating sequences of events.\n"
"* Key Binding Commands::    Interactive interfaces for redefining keys.\n"
"* Scanning Keymaps::        Looking through all keymaps, for printing help.\n"
"* Menu Keymaps::            A keymap can define a menu for X\n"
"                              or for use from the terminal.\n"
"* Standard Keymaps::        List of standard keymaps.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:717 lispref/elisp.texi:750
#, no-wrap
msgid ""
"Major and Minor Modes\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:728
#, no-wrap
msgid ""
"* Hooks::                   How to use hooks; how to write code that\n"
"                              provides hooks.\n"
"* Major Modes::             Defining major modes.\n"
"* Minor Modes::             Defining minor modes.\n"
"* Mode Line Format::        Customizing the text that appears in the mode line.\n"
"* Imenu::                   How a mode can provide a menu\n"
"                              of definitions in the buffer.\n"
"* Font Lock Mode::          How modes can highlight text according to syntax.\n"
"* Desktop Save Mode::       How modes can have buffer state saved between\n"
"                              Emacs sessions.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:730
#, no-wrap
msgid ""
"Menu Keymaps\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:738
#, no-wrap
msgid ""
"* Defining Menus::          How to make a keymap that defines a menu.\n"
"* Mouse Menus::             How users actuate the menu with the mouse.\n"
"* Keyboard Menus::          How users actuate the menu with the keyboard.\n"
"* Menu Example::            Making a simple menu.\n"
"* Menu Bar::                How to customize the menu bar.\n"
"* Tool Bar::                A tool bar is a row of images.\n"
"* Modifying Menus::         How to add new items to a menu.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:740
#, no-wrap
msgid ""
"Defining Menus\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:748
#, no-wrap
msgid ""
"* Simple Menu Items::       A simple kind of menu key binding,\n"
"                              limited in capabilities.\n"
"* Extended Menu Items::     More powerful menu item definitions\n"
"                              let you specify keywords to enable\n"
"                              various features.\n"
"* Menu Separators::         Drawing a horizontal line through a menu.\n"
"* Alias Menu Items::        Using command aliases in menu items.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:760
#, no-wrap
msgid ""
"* Hooks::              How to use hooks; how to write code that provides hooks.\n"
"* Major Modes::        Defining major modes.\n"
"* Minor Modes::        Defining minor modes.\n"
"* Mode Line Format::   Customizing the text that appears in the mode line.\n"
"* Imenu::              How a mode can provide a menu\n"
"                         of definitions in the buffer.\n"
"* Font Lock Mode::     How modes can highlight text according to syntax.\n"
"* Desktop Save Mode::  How modes can have buffer state saved between\n"
"                         Emacs sessions.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:762
#, no-wrap
msgid ""
"Major Modes\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:773
#, no-wrap
msgid ""
"* Major Mode Basics::\n"
"* Major Mode Conventions::  Coding conventions for keymaps, etc.\n"
"* Example Major Modes::     Text mode and Lisp modes.\n"
"* Auto Major Mode::         How Emacs chooses the major mode automatically.\n"
"* Mode Help::               Finding out how to use a mode.\n"
"* Derived Modes::           Defining a new major mode based on another major\n"
"                              mode.\n"
"* Generic Modes::           Defining a simple major mode that supports\n"
"                              comment syntax and Font Lock mode.\n"
"* Mode Hooks::              Hooks run at the end of major mode functions.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:775
#, no-wrap
msgid ""
"Minor Modes\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:779
#, no-wrap
msgid ""
"* Minor Mode Conventions::  Tips for writing a minor mode.\n"
"* Keymaps and Minor Modes:: How a minor mode can have its own keymap.\n"
"* Defining Minor Modes::    A convenient facility for defining minor modes.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:781
#, no-wrap
msgid ""
"Mode Line Format\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:789
#, no-wrap
msgid ""
"* Mode Line Basics::\n"
"* Mode Line Data::          The data structure that controls the mode line.\n"
"* Mode Line Variables::     Variables used in that data structure.\n"
"* %-Constructs::            Putting information into a mode line.\n"
"* Properties in Mode::      Using text properties in the mode line.\n"
"* Header Lines::            Like a mode line, but at the top.\n"
"* Emulating Mode Line::     Formatting text as the mode line would.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:791
#, no-wrap
msgid ""
"Font Lock Mode\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:806
#, no-wrap
msgid ""
"* Font Lock Basics::        Overview of customizing Font Lock.\n"
"* Search-based Fontification::  Fontification based on regexps.\n"
"* Customizing Keywords::    Customizing search-based fontification.\n"
"* Other Font Lock Variables::   Additional customization facilities.\n"
"* Levels of Font Lock::     Each mode can define alternative levels\n"
"                              so that the user can select more or less.\n"
"* Precalculated Fontification:: How Lisp programs that produce the buffer\n"
"                                  contents can also specify how to fontify it.\n"
"* Faces for Font Lock::     Special faces specifically for Font Lock.\n"
"* Syntactic Font Lock::     Fontification based on syntax tables.\n"
"* Setting Syntax Properties::   Defining character syntax based on context\n"
"                                  using the Font Lock mechanism.\n"
"* Multiline Font Lock::     How to coerce Font Lock into properly\n"
"                              highlighting multiline constructs.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:808
#, no-wrap
msgid ""
"Multiline Font Lock Constructs\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:812
#, no-wrap
msgid ""
"* Font Lock Multiline::     Marking multiline chunks with a text property\n"
"* Region to Fontify::       Controlling which region gets refontified\n"
"                              after a buffer change.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:814
#, no-wrap
msgid ""
"Documentation\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:822
#, no-wrap
msgid ""
"* Documentation Basics::    Good style for doc strings.\n"
"                              Where to put them.  How Emacs stores them.\n"
"* Accessing Documentation:: How Lisp programs can access doc strings.\n"
"* Keys in Documentation::   Substituting current key bindings.\n"
"* Describing Characters::   Making printable descriptions of\n"
"                              non-printing characters and key sequences.\n"
"* Help Functions::          Subroutines used by Emacs help facilities.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:824
#, no-wrap
msgid ""
"Files\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:839
#, no-wrap
msgid ""
"* Visiting Files::          Reading files into Emacs buffers for editing.\n"
"* Saving Buffers::          Writing changed buffers back into files.\n"
"* Reading from Files::      Reading files into other buffers.\n"
"* Writing to Files::        Writing new files from parts of buffers.\n"
"* File Locks::              Locking and unlocking files, to prevent\n"
"                              simultaneous editing by two people.\n"
"* Information about Files:: Testing existence, accessibility, size of files.\n"
"* Changing Files::          Renaming files, changing protection, etc.\n"
"* File Names::              Decomposing and expanding file names.\n"
"* Contents of Directories:: Getting a list of the files in a directory.\n"
"* Create/Delete Dirs::\t    Creating and Deleting Directories.\n"
"* Magic File Names::\t    Defining \"magic\" special handling\n"
"\t\t\t      for certain file names.\n"
"* Format Conversion::       Conversion to and from various file formats.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:841
#, no-wrap
msgid ""
"Visiting Files\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:844
#, no-wrap
msgid ""
"* Visiting Functions::      The usual interface functions for visiting.\n"
"* Subroutines of Visiting:: Lower-level subroutines that they use.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:846
#, no-wrap
msgid ""
"Information about Files\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:852
#, no-wrap
msgid ""
"* Testing Accessibility::   Is a given file readable?  Writable?\n"
"* Kinds of Files::          Is it a directory?  A symbolic link?\n"
"* Truenames::\t\t    Eliminating symbolic links from a file name.\n"
"* File Attributes::         How large is it?  Any other names?  Etc.\n"
"* Locating Files::          How to find a file in standard places.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:854
#, no-wrap
msgid ""
"File Names\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:865
#, no-wrap
msgid ""
"* File Name Components::    The directory part of a file name, and the rest.\n"
"* Relative File Names::     Some file names are relative to a\n"
"                              current directory.\n"
"* Directory Names::         A directory's name as a directory\n"
"                              is different from its name as a file.\n"
"* File Name Expansion::     Converting relative file names to absolute ones.\n"
"* Unique File Names::       Generating names for temporary files.\n"
"* File Name Completion::    Finding the completions for a given file name.\n"
"* Standard File Names::     If your package uses a fixed file name,\n"
"                              how to handle various operating systems simply.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:867
#, no-wrap
msgid ""
"Backups and Auto-Saving\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:874
#, no-wrap
msgid ""
"* Backup Files::            How backup files are made; how their names\n"
"                              are chosen.\n"
"* Auto-Saving::             How auto-save files are made; how their\n"
"                              names are chosen.\n"
"* Reverting::               @code{revert-buffer}, and how to customize\n"
"                              what it does.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:876
#, no-wrap
msgid ""
"Backup Files\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:882
#, no-wrap
msgid ""
"* Making Backups::          How Emacs makes backup files, and when.\n"
"* Rename or Copy::          Two alternatives: renaming the old file\n"
"                              or copying it.\n"
"* Numbered Backups::        Keeping multiple backups for each source file.\n"
"* Backup Names::            How backup file names are computed; customization.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:884
#, no-wrap
msgid ""
"Buffers\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:902
#, no-wrap
msgid ""
"* Buffer Basics::           What is a buffer?\n"
"* Current Buffer::          Designating a buffer as current\n"
"                              so primitives will access its contents.\n"
"* Buffer Names::            Accessing and changing buffer names.\n"
"* Buffer File Name::        The buffer file name indicates which file\n"
"                              is visited.\n"
"* Buffer Modification::     A buffer is @dfn{modified} if it needs to be saved.\n"
"* Modification Time::       Determining whether the visited file was changed\n"
"                              ``behind Emacs's back''.\n"
"* Read Only Buffers::       Modifying text is not allowed in a\n"
"                              read-only buffer.\n"
"* The Buffer List::         How to look at all the existing buffers.\n"
"* Creating Buffers::        Functions that create buffers.\n"
"* Killing Buffers::         Buffers exist until explicitly killed.\n"
"* Indirect Buffers::        An indirect buffer shares text with some\n"
"                              other buffer.\n"
"* Buffer Gap::              The gap in the buffer.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:904
#, no-wrap
msgid ""
"Windows\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:928
#, no-wrap
msgid ""
"* Basic Windows::           Basic information on using windows.\n"
"* Splitting Windows::       Splitting one window into two windows.\n"
"* Deleting Windows::        Deleting a window gives its space to other windows.\n"
"* Selecting Windows::       The selected window is the one that you edit in.\n"
"* Cyclic Window Ordering::  Moving around the existing windows.\n"
"* Buffers and Windows::     Each window displays the contents of a buffer.\n"
"* Displaying Buffers::      Higher-level functions for displaying a buffer\n"
"                              and choosing a window for it.\n"
"* Choosing Window::\t    How to choose a window for displaying a buffer.\n"
"* Window Point::            Each window has its own location of point.\n"
"* Window Start::            The display-start position controls which text\n"
"                              is on-screen in the window.\n"
"* Textual Scrolling::       Moving text up and down through the window.\n"
"* Vertical Scrolling::      Moving the contents up and down on the window.\n"
"* Horizontal Scrolling::    Moving the contents sideways on the window.\n"
"* Size of Window::          Accessing the size of a window.\n"
"* Resizing Windows::        Changing the size of a window.\n"
"* Coordinates and Windows:: Converting coordinates to windows.\n"
"* Window Tree::             The layout and sizes of all windows in a frame.\n"
"* Window Configurations::   Saving and restoring the state of the screen.\n"
"* Window Hooks::            Hooks for scrolling, window size changes,\n"
"                              redisplay going past a certain point,\n"
"                              or window configuration changes.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:930
#, no-wrap
msgid ""
"Frames\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:956
#, no-wrap
msgid ""
"* Creating Frames::\t    Creating additional frames.\n"
"* Multiple Displays::       Creating frames on other displays.\n"
"* Frame Parameters::\t    Controlling frame size, position, font, etc.\n"
"* Frame Titles::            Automatic updating of frame titles.\n"
"* Deleting Frames::\t    Frames last until explicitly deleted.\n"
"* Finding All Frames::\t    How to examine all existing frames.\n"
"* Frames and Windows::\t    A frame contains windows;\n"
"\t\t\t      display of text always works through windows.\n"
"* Minibuffers and Frames::  How a frame finds the minibuffer to use.\n"
"* Input Focus::\t\t    Specifying the selected frame.\n"
"* Visibility of Frames::    Frames may be visible or invisible, or icons.\n"
"* Raising and Lowering::    Raising a frame makes it hide other windows;\n"
"\t\t\t      lowering it puts it underneath the others.\n"
"* Frame Configurations::    Saving the state of all frames.\n"
"* Mouse Tracking::\t    Getting events that say when the mouse moves.\n"
"* Mouse Position::\t    Asking where the mouse is, or moving it.\n"
"* Pop-Up Menus::\t    Displaying a menu for the user to select from.\n"
"* Dialog Boxes::            Displaying a box to ask yes or no.\n"
"* Pointer Shape::           Specifying the shape of the mouse pointer.\n"
"* Window System Selections::Transferring text to and from other windows.\n"
"* Drag and Drop::               Internals of Drag-and-Drop implementation.\n"
"* Color Names::\t            Getting the definitions of color names.\n"
"* Text Terminal Colors::    Defining colors for text-only terminals.\n"
"* Resources::\t\t    Getting resource values from the server.\n"
"* Display Feature Testing:: Determining the features of a terminal.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:958
#, no-wrap
msgid ""
"Frame Parameters\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:964
#, no-wrap
msgid ""
"* Parameter Access::        How to change a frame's parameters.\n"
"* Initial Parameters::\t    Specifying frame parameters when you make a frame.\n"
"* Window Frame Parameters:: List of frame parameters for window systems.\n"
"* Size and Position::       Changing the size and position of a frame.\n"
"* Geometry::                Parsing geometry specifications.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:966
#, no-wrap
msgid ""
"Window Frame Parameters\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:976
#, no-wrap
msgid ""
"* Basic Parameters::        Parameters that are fundamental.\n"
"* Position Parameters::     The position of the frame on the screen.\n"
"* Size Parameters::         Frame's size.\n"
"* Layout Parameters::       Size of parts of the frame, and\n"
"                              enabling or disabling some parts.\n"
"* Buffer Parameters::       Which buffers have been or should be shown.\n"
"* Management Parameters::   Communicating with the window manager.\n"
"* Cursor Parameters::       Controlling the cursor appearance.\n"
"* Color Parameters::        Colors of various parts of the frame.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:978
#, no-wrap
msgid ""
"Positions\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:983
#, no-wrap
msgid ""
"* Point::                   The special position where editing takes place.\n"
"* Motion::                  Changing point.\n"
"* Excursions::              Temporary motion and buffer changes.\n"
"* Narrowing::               Restricting editing to a portion of the buffer.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:985
#, no-wrap
msgid ""
"Motion\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:993
#, no-wrap
msgid ""
"* Character Motion::        Moving in terms of characters.\n"
"* Word Motion::             Moving in terms of words.\n"
"* Buffer End Motion::       Moving to the beginning or end of the buffer.\n"
"* Text Lines::              Moving in terms of lines of text.\n"
"* Screen Lines::            Moving in terms of lines as displayed.\n"
"* List Motion::             Moving by parsing lists and sexps.\n"
"* Skipping Characters::     Skipping characters belonging to a certain set.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:995
#, no-wrap
msgid ""
"Markers\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1006
#, no-wrap
msgid ""
"* Overview of Markers::     The components of a marker, and how it relocates.\n"
"* Predicates on Markers::   Testing whether an object is a marker.\n"
"* Creating Markers::        Making empty markers or markers at certain places.\n"
"* Information from Markers::Finding the marker's buffer or character\n"
"                              position.\n"
"* Marker Insertion Types::  Two ways a marker can relocate when you\n"
"                              insert where it points.\n"
"* Moving Markers::          Moving the marker to a new buffer or position.\n"
"* The Mark::                How \"the mark\" is implemented with a marker.\n"
"* The Region::              How to access \"the region\".\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1008
#, no-wrap
msgid ""
"Text\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1039
#, no-wrap
msgid ""
"* Near Point::              Examining text in the vicinity of point.\n"
"* Buffer Contents::         Examining text in a general fashion.\n"
"* Comparing Text::          Comparing substrings of buffers.\n"
"* Insertion::               Adding new text to a buffer.\n"
"* Commands for Insertion::  User-level commands to insert text.\n"
"* Deletion::                Removing text from a buffer.\n"
"* User-Level Deletion::     User-level commands to delete text.\n"
"* The Kill Ring::           Where removed text sometimes is saved for\n"
"                              later use.\n"
"* Undo::                    Undoing changes to the text of a buffer.\n"
"* Maintaining Undo::        How to enable and disable undo information.\n"
"\t\t\t      How to control how much information is kept.\n"
"* Filling::                 Functions for explicit filling.\n"
"* Margins::                 How to specify margins for filling commands.\n"
"* Adaptive Fill::           Adaptive Fill mode chooses a fill prefix\n"
"                              from context.\n"
"* Auto Filling::            How auto-fill mode is implemented to break lines.\n"
"* Sorting::                 Functions for sorting parts of the buffer.\n"
"* Columns::                 Computing horizontal positions, and using them.\n"
"* Indentation::             Functions to insert or adjust indentation.\n"
"* Case Changes::            Case conversion of parts of the buffer.\n"
"* Text Properties::         Assigning Lisp property lists to text characters.\n"
"* Substitution::            Replacing a given character wherever it appears.\n"
"* Transposition::           Swapping two portions of a buffer.\n"
"* Registers::               How registers are implemented.  Accessing\n"
"                              the text or position stored in a register.\n"
"* Base 64::                 Conversion to or from base 64 encoding.\n"
"* MD5 Checksum::            Compute the MD5 \"message digest\"/\"checksum\".\n"
"* Atomic Changes::          Installing several buffer changes \"atomically\".\n"
"* Change Hooks::            Supplying functions to be run when text is changed.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1041
#, no-wrap
msgid ""
"The Kill Ring\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1048
#, no-wrap
msgid ""
"* Kill Ring Concepts::      What text looks like in the kill ring.\n"
"* Kill Functions::          Functions that kill text.\n"
"* Yanking::                 How yanking is done.\n"
"* Yank Commands::           Commands that access the kill ring.\n"
"* Low-Level Kill Ring::\t    Functions and variables for kill ring access.\n"
"* Internals of Kill Ring::  Variables that hold kill-ring data.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1050
#, no-wrap
msgid ""
"Indentation\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1057
#, no-wrap
msgid ""
"* Primitive Indent::        Functions used to count and insert indentation.\n"
"* Mode-Specific Indent::    Customize indentation for different modes.\n"
"* Region Indent::           Indent all the lines in a region.\n"
"* Relative Indent::         Indent the current line based on previous lines.\n"
"* Indent Tabs::             Adjustable, typewriter-like tab stops.\n"
"* Motion by Indent::        Move to first non-blank character.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1059
#, no-wrap
msgid ""
"Text Properties\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1078
#, no-wrap
msgid ""
"* Examining Properties::    Looking at the properties of one character.\n"
"* Changing Properties::\t    Setting the properties of a range of text.\n"
"* Property Search::\t    Searching for where a property changes value.\n"
"* Special Properties::\t    Particular properties with special meanings.\n"
"* Format Properties::       Properties for representing formatting of text.\n"
"* Sticky Properties::       How inserted text gets properties from\n"
"                              neighboring text.\n"
"* Saving Properties::       Saving text properties in files, and reading\n"
"                              them back.\n"
"* Lazy Properties::         Computing text properties in a lazy fashion\n"
"                              only when text is examined.\n"
"* Clickable Text::          Using text properties to make regions of text\n"
"                              do something when you click on them.\n"
"* Links and Mouse-1::       How to make @key{Mouse-1} follow a link.\n"
"* Fields::                  The @code{field} property defines\n"
"                              fields within the buffer.\n"
"* Not Intervals::\t    Why text properties do not use\n"
"\t\t\t      Lisp-visible text intervals.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1080
#, no-wrap
msgid ""
"Non-ASCII Characters\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1096
#, no-wrap
msgid ""
"* Text Representations::    Unibyte and multibyte representations\n"
"* Converting Representations::  Converting unibyte to multibyte and vice versa.\n"
"* Selecting a Representation::  Treating a byte sequence as unibyte or multi.\n"
"* Character Codes::         How unibyte and multibyte relate to\n"
"                                codes of individual characters.\n"
"* Character Sets::          The space of possible character codes\n"
"                                is divided into various character sets.\n"
"* Chars and Bytes::         More information about multibyte encodings.\n"
"* Splitting Characters::    Converting a character to its byte sequence.\n"
"* Scanning Charsets::       Which character sets are used in a buffer?\n"
"* Translation of Characters::   Translation tables are used for conversion.\n"
"* Coding Systems::          Coding systems are conversions for saving files.\n"
"* Input Methods::           Input methods allow users to enter various\n"
"                                non-ASCII characters without special keyboards.\n"
"* Locales::                 Interacting with the POSIX locale.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1098
#, no-wrap
msgid ""
"Coding Systems\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1110
#, no-wrap
msgid ""
"* Coding System Basics::    Basic concepts.\n"
"* Encoding and I/O::        How file I/O functions handle coding systems.\n"
"* Lisp and Coding Systems:: Functions to operate on coding system names.\n"
"* User-Chosen Coding Systems::  Asking the user to choose a coding system.\n"
"* Default Coding Systems::  Controlling the default choices.\n"
"* Specifying Coding Systems::   Requesting a particular coding system\n"
"                                    for a single file operation.\n"
"* Explicit Encoding::       Encoding or decoding text without doing I/O.\n"
"* Terminal I/O Encoding::   Use of encoding for terminal I/O.\n"
"* MS-DOS File Types::       How DOS \"text\" and \"binary\" files\n"
"                                relate to coding systems.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1112
#, no-wrap
msgid ""
"Searching and Matching\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1122
#, no-wrap
msgid ""
"* String Search::           Search for an exact match.\n"
"* Searching and Case::      Case-independent or case-significant searching.\n"
"* Regular Expressions::     Describing classes of strings.\n"
"* Regexp Search::           Searching for a match for a regexp.\n"
"* POSIX Regexps::           Searching POSIX-style for the longest match.\n"
"* Match Data::              Finding out which part of the text matched,\n"
"                              after a string or regexp search.\n"
"* Search and Replace::\t    Commands that loop, searching and replacing.\n"
"* Standard Regexps::        Useful regexps for finding sentences, pages,...\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1124
#, no-wrap
msgid ""
"Regular Expressions\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1128
#, no-wrap
msgid ""
"* Syntax of Regexps::       Rules for writing regular expressions.\n"
"* Regexp Example::          Illustrates regular expression syntax.\n"
"* Regexp Functions::        Functions for operating on regular expressions.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1130
#, no-wrap
msgid ""
"Syntax of Regular Expressions\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1134
#, no-wrap
msgid ""
"* Regexp Special::          Special characters in regular expressions.\n"
"* Char Classes::            Character classes used in regular expressions.\n"
"* Regexp Backslash::        Backslash-sequences in regular expressions.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1136
#, no-wrap
msgid ""
"The Match Data\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1142
#, no-wrap
msgid ""
"* Replacing Match::\t    Replacing a substring that was matched.\n"
"* Simple Match Data::       Accessing single items of match data,\n"
"\t\t\t      such as where a particular subexpression started.\n"
"* Entire Match Data::       Accessing the entire match data at once, as a list.\n"
"* Saving Match Data::       Saving and restoring the match data.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1144
#, no-wrap
msgid ""
"Syntax Tables\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1155
#, no-wrap
msgid ""
"* Syntax Basics::           Basic concepts of syntax tables.\n"
"* Syntax Descriptors::      How characters are classified.\n"
"* Syntax Table Functions::  How to create, examine and alter syntax tables.\n"
"* Syntax Properties::       Overriding syntax with text properties.\n"
"* Motion and Syntax::\t    Moving over characters with certain syntaxes.\n"
"* Parsing Expressions::     Parsing balanced expressions\n"
"                              using the syntax table.\n"
"* Standard Syntax Tables::  Syntax tables used by various major modes.\n"
"* Syntax Table Internals::  How syntax table information is stored.\n"
"* Categories::              Another way of classifying character syntax.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1157
#, no-wrap
msgid ""
"Syntax Descriptors\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1160
#, no-wrap
msgid ""
"* Syntax Class Table::      Table of syntax classes.\n"
"* Syntax Flags::            Additional flags each character can have.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1162
#, no-wrap
msgid ""
"Parsing Expressions\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1168
#, no-wrap
msgid ""
"* Motion via Parsing::      Motion functions that work by parsing.\n"
"* Position Parse::          Determining the syntactic state of a position.\n"
"* Parser State::            How Emacs represents a syntactic state.\n"
"* Low-Level Parsing::       Parsing across a specified region.\n"
"* Control Parsing::         Parameters that affect parsing.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1170
#, no-wrap
msgid ""
"Abbrevs And Abbrev Expansion\n"
"\n"
msgstr "Abréviations et abréviations expansions\n\n"

# type: detailmenu
#: lispref/elisp.texi:1177
#, no-wrap
msgid ""
"* Abbrev Mode::             Setting up Emacs for abbreviation.\n"
"* Abbrev Tables::           Creating and working with abbrev tables.\n"
"* Defining Abbrevs::        Specifying abbreviations and their expansions.\n"
"* Abbrev Files::            Saving abbrevs in files.\n"
"* Abbrev Expansion::        Controlling expansion; expansion subroutines.\n"
"* Standard Abbrev Tables::  Abbrev tables used by various major modes.\n"
"\n"
msgstr ""
"* Mode abbrev::                 Configuration d'Emacs pour l'abréviation.\n"
"* Tables d'abréviations::       Créer et travailler avec des tables d'abréviations.\n"
"* Définir des abréviations::    Spécifier des abréviations et leurs expansions.\n"
"* Fichiers d'abréviations::     Sauver des abréviations dans les fichiers.\n"
"* Expansions d'abréviations::    Contrôler l'expansion ; sous-programmes d'expansions.\n"
"* Tables standard d'abréviations:: Tables d'abréviations employées par divers modes majeurs.\n"
"\n"

# type: detailmenu
#: lispref/elisp.texi:1179
#, no-wrap
msgid ""
"Processes\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1200
#, no-wrap
msgid ""
"* Subprocess Creation::     Functions that start subprocesses.\n"
"* Shell Arguments::         Quoting an argument to pass it to a shell.\n"
"* Synchronous Processes::   Details of using synchronous subprocesses.\n"
"* Asynchronous Processes::  Starting up an asynchronous subprocess.\n"
"* Deleting Processes::      Eliminating an asynchronous subprocess.\n"
"* Process Information::     Accessing run-status and other attributes.\n"
"* Input to Processes::      Sending input to an asynchronous subprocess.\n"
"* Signals to Processes::    Stopping, continuing or interrupting\n"
"                              an asynchronous subprocess.\n"
"* Output from Processes::   Collecting output from an asynchronous subprocess.\n"
"* Sentinels::               Sentinels run when process run-status changes.\n"
"* Query Before Exit::       Whether to query if exiting will kill a process.\n"
"* Transaction Queues::      Transaction-based communication with subprocesses.\n"
"* Network::                 Opening network connections.\n"
"* Network Servers::         Network servers let Emacs accept net connections.\n"
"* Datagrams::               UDP network connections.\n"
"* Low-Level Network::       Lower-level but more general function\n"
"                              to create connections and servers.\n"
"* Misc Network::            Additional relevant functions for network connections.\n"
"* Byte Packing::            Using bindat to pack and unpack binary data.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1202
#, no-wrap
msgid ""
"Receiving Output from Processes\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1207
#, no-wrap
msgid ""
"* Process Buffers::         If no filter, output is put in a buffer.\n"
"* Filter Functions::        Filter functions accept output from the process.\n"
"* Decoding Output::         Filters can get unibyte or multibyte strings.\n"
"* Accepting Output::        How to wait until process output arrives.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1209
#, no-wrap
msgid ""
"Low-Level Network Access\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1215
#, no-wrap
msgid ""
"* Proc: Network Processes.  Using @code{make-network-process}.\n"
"* Options: Network Options.  Further control over network connections.\n"
"* Features: Network Feature Testing.\n"
"                            Determining which network features work on\n"
"                              the machine you are using.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1217
#, no-wrap
msgid ""
"Packing and Unpacking Byte Arrays\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1221
#, no-wrap
msgid ""
"* Bindat Spec::             Describing data layout.\n"
"* Bindat Functions::        Doing the unpacking and packing.\n"
"* Bindat Examples::         Samples of what bindat.el can do for you!\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1223
#, no-wrap
msgid ""
"Emacs Display\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1248
#, no-wrap
msgid ""
"* Refresh Screen::          Clearing the screen and redrawing everything on it.\n"
"* Forcing Redisplay::       Forcing redisplay.\n"
"* Truncation::              Folding or wrapping long text lines.\n"
"* The Echo Area::           Displaying messages at the bottom of the screen.\n"
"* Warnings::                Displaying warning messages for the user.\n"
"* Invisible Text::          Hiding part of the buffer text.\n"
"* Selective Display::       Hiding part of the buffer text (the old way).\n"
"* Temporary Displays::      Displays that go away automatically.\n"
"* Overlays::\t\t    Use overlays to highlight parts of the buffer.\n"
"* Width::                   How wide a character or string is on the screen.\n"
"* Line Height::             Controlling the height of lines.\n"
"* Faces::\t\t    A face defines a graphics style\n"
"                              for text characters: font, colors, etc.\n"
"* Fringes::                 Controlling window fringes.\n"
"* Scroll Bars::             Controlling vertical scroll bars.\n"
"* Display Property::        Enabling special display features.\n"
"* Images::                  Displaying images in Emacs buffers.\n"
"* Buttons::                 Adding clickable buttons to Emacs buffers.\n"
"* Abstract Display::        Emacs' Widget for Object Collections.\n"
"* Blinking::                How Emacs shows the matching open parenthesis.\n"
"* Usual Display::\t    The usual conventions for displaying nonprinting chars.\n"
"* Display Tables::\t    How to specify other conventions.\n"
"* Beeping::                 Audible signal to the user.\n"
"* Window Systems::          Which window system is being used.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1250
#, no-wrap
msgid ""
"The Echo Area\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1255
#, no-wrap
msgid ""
"* Displaying Messages::     Explicitly displaying text in the echo area.\n"
"* Progress::                Informing user about progress of a long operation.\n"
"* Logging Messages::        Echo area messages are logged for the user.\n"
"* Echo Area Customization:: Controlling the echo area.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1257
#, no-wrap
msgid ""
"Reporting Warnings\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1261
#, no-wrap
msgid ""
"* Warning Basics::          Warnings concepts and functions to report them.\n"
"* Warning Variables::       Variables programs bind to customize their warnings.\n"
"* Warning Options::         Variables users set to control display of warnings.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1263
#, no-wrap
msgid ""
"Overlays\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1268
#, no-wrap
msgid ""
"* Managing Overlays::       Creating and moving overlays.\n"
"* Overlay Properties::      How to read and set properties.\n"
"\t\t\t    What properties do to the screen display.\n"
"* Finding Overlays::        Searching for overlays.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1270
#, no-wrap
msgid ""
"Faces\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1283
#, no-wrap
msgid ""
"* Defining Faces::          How to define a face with @code{defface}.\n"
"* Face Attributes::         What is in a face?\n"
"* Attribute Functions::     Functions to examine and set face attributes.\n"
"* Displaying Faces::        How Emacs combines the faces specified for\n"
"                              a character.\n"
"* Font Selection::          Finding the best available font for a face.\n"
"* Face Functions::          How to define and examine faces.\n"
"* Auto Faces::              Hook for automatic face assignment.\n"
"* Font Lookup::             Looking up the names of available fonts\n"
"                              and information about them.\n"
"* Fontsets::                A fontset is a collection of fonts\n"
"                              that handle a range of character sets.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1285
#, no-wrap
msgid ""
"Fringes\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1292
#, no-wrap
msgid ""
"* Fringe Size/Pos::         Specifying where to put the window fringes.\n"
"* Fringe Indicators::       Displaying indicator icons in the window fringes.\n"
"* Fringe Cursors::          Displaying cursors in the right fringe.\n"
"* Fringe Bitmaps::          Specifying bitmaps for fringe indicators.\n"
"* Customizing Bitmaps::     Specifying your own bitmaps to use in the fringes.\n"
"* Overlay Arrow::           Display of an arrow to indicate position.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1294
#, no-wrap
msgid ""
"The @code{display} Property\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1302
#, no-wrap
msgid ""
"* Specified Space::         Displaying one space with a specified width.\n"
"* Pixel Specification::     Specifying space width or height in pixels.\n"
"* Other Display Specs::     Displaying an image; magnifying text; moving it\n"
"                              up or down on the page; adjusting the width\n"
"                              of spaces within text.\n"
"* Display Margins::         Displaying text or images to the side of\n"
"                              the main text.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1304
#, no-wrap
msgid ""
"Images\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1315
#, no-wrap
msgid ""
"* Image Descriptors::       How to specify an image for use in @code{:display}.\n"
"* XBM Images::              Special features for XBM format.\n"
"* XPM Images::              Special features for XPM format.\n"
"* GIF Images::              Special features for GIF format.\n"
"* PostScript Images::       Special features for PostScript format.\n"
"* Other Image Types::       Various other formats are supported.\n"
"* Defining Images::         Convenient ways to define an image for later use.\n"
"* Showing Images::          Convenient ways to display an image once\n"
"                              it is defined.\n"
"* Image Cache::             Internal mechanisms of image display.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1317
#, no-wrap
msgid ""
"Buttons\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1323
#, no-wrap
msgid ""
"* Button Properties::       Button properties with special meanings.\n"
"* Button Types::            Defining common properties for classes of buttons.\n"
"* Making Buttons::          Adding buttons to Emacs buffers.\n"
"* Manipulating Buttons::    Getting and setting properties of buttons.\n"
"* Button Buffer Commands::  Buffer-wide commands and bindings for buttons.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1325
#, no-wrap
msgid ""
"Abstract Display\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1328
#, no-wrap
msgid ""
"* Abstract Display Functions::  Functions in the Ewoc package.\n"
"* Abstract Display Example::    Example of using Ewoc.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1330
#, no-wrap
msgid ""
"Display Tables\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1334
#, no-wrap
msgid ""
"* Display Table Format::    What a display table consists of.\n"
"* Active Display Table::    How Emacs selects a display table to use.\n"
"* Glyphs::                  How to define a glyph, and what glyphs mean.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1336
#, no-wrap
msgid ""
"Operating System Interface\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1357
#, no-wrap
msgid ""
"* Starting Up::             Customizing Emacs start-up processing.\n"
"* Getting Out::             How exiting works (permanent or temporary).\n"
"* System Environment::      Distinguish the name and kind of system.\n"
"* User Identification::     Finding the name and user id of the user.\n"
"* Time of Day::\t\t    Getting the current time.\n"
"* Time Conversion::         Converting a time from numeric form to a string, or\n"
"                              to calendrical data (or vice versa).\n"
"* Time Parsing::            Converting a time from numeric form to text\n"
"                              and vice versa.\n"
"* Processor Run Time::      Getting the run time used by Emacs.\n"
"* Time Calculations::       Adding, subtracting, comparing times, etc.\n"
"* Timers::\t\t    Setting a timer to call a function at a certain time.\n"
"* Idle Timers::             Setting a timer to call a function when Emacs has\n"
"                              been idle for a certain length of time.\n"
"* Terminal Input::          Accessing and recording terminal input.\n"
"* Terminal Output::         Controlling and recording terminal output.\n"
"* Sound Output::            Playing sounds on the computer's speaker.\n"
"* X11 Keysyms::             Operating on key symbols for X Windows\n"
"* Batch Mode::              Running Emacs without terminal interaction.\n"
"* Session Management::      Saving and restoring state with X Session Management.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1359
#, no-wrap
msgid ""
"Starting Up Emacs\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1365
#, no-wrap
msgid ""
"* Startup Summary::         Sequence of actions Emacs performs at start-up.\n"
"* Init File::               Details on reading the init file (@file{.emacs}).\n"
"* Terminal-Specific::       How the terminal-specific Lisp file is read.\n"
"* Command-Line Arguments::  How command-line arguments are processed,\n"
"                              and how you can customize them.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1367
#, no-wrap
msgid ""
"Getting Out of Emacs\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1370
#, no-wrap
msgid ""
"* Killing Emacs::           Exiting Emacs irreversibly.\n"
"* Suspending Emacs::        Exiting Emacs reversibly.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1372
#, no-wrap
msgid ""
"Terminal Input\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1375
#, no-wrap
msgid ""
"* Input Modes::\t\t    Options for how input is processed.\n"
"* Recording Input::\t    Saving histories of recent or all input events.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1377
#, no-wrap
msgid ""
"Tips and Conventions\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1386
#, no-wrap
msgid ""
"* Coding Conventions::      Conventions for clean and robust programs.\n"
"* Key Binding Conventions:: Which keys should be bound by which programs.\n"
"* Programming Tips::        Making Emacs code fit smoothly in Emacs.\n"
"* Compilation Tips::        Making compiled code run fast.\n"
"* Warning Tips::            Turning off compiler warnings.\n"
"* Documentation Tips::      Writing readable documentation strings.\n"
"* Comment Tips::\t    Conventions for writing comments.\n"
"* Library Headers::         Standard headers for library packages.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1388
#, no-wrap
msgid ""
"GNU Emacs Internals\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1395
#, no-wrap
msgid ""
"* Building Emacs::          How the dumped Emacs is made.\n"
"* Pure Storage::            A kludge to make preloaded Lisp functions sharable.\n"
"* Garbage Collection::      Reclaiming space for Lisp objects no longer used.\n"
"* Memory Usage::            Info about total size of Lisp objects made so far.\n"
"* Writing Emacs Primitives::  Writing C code for Emacs.\n"
"* Object Internals::        Data formats of buffers, windows, processes.\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1397
#, no-wrap
msgid ""
"Object Internals\n"
"\n"
msgstr ""

# type: detailmenu
#: lispref/elisp.texi:1401
#, no-wrap
msgid ""
"* Buffer Internals::        Components of a buffer structure.\n"
"* Window Internals::        Components of a window structure.\n"
"* Process Internals::       Components of a process structure.\n"
msgstr ""

# type: include
#: lispref/elisp.texi:1404 lispref/vol1.texi:946
#, no-wrap
msgid "intro.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1405 lispref/vol1.texi:947
#, no-wrap
msgid "objects.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1406 lispref/vol1.texi:948
#, no-wrap
msgid "numbers.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1407 lispref/vol1.texi:949
#, no-wrap
msgid "strings.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1409 lispref/vol1.texi:951
#, no-wrap
msgid "lists.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1410 lispref/vol1.texi:952
#, no-wrap
msgid "sequences.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1411
#, no-wrap
msgid "hash.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1412 lispref/vol1.texi:953
#, no-wrap
msgid "symbols.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1413 lispref/vol1.texi:954
#, no-wrap
msgid "eval.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1415 lispref/vol1.texi:956
#, no-wrap
msgid "control.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1416 lispref/vol1.texi:957
#, no-wrap
msgid "variables.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1417 lispref/vol1.texi:958
#, no-wrap
msgid "functions.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1418 lispref/vol1.texi:959
#, no-wrap
msgid "macros.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1420
#, no-wrap
msgid "customize.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1421 lispref/vol1.texi:961
#, no-wrap
msgid "loading.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1422 lispref/vol1.texi:962
#, no-wrap
msgid "compile.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1423
#, no-wrap
msgid "advice.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1425 lispref/vol1.texi:963
#, no-wrap
msgid "debugging.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1426 lispref/vol1.texi:964
#, no-wrap
msgid "streams.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1427 lispref/vol1.texi:966
#, no-wrap
msgid "minibuf.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1428 lispref/vol1.texi:967
#, no-wrap
msgid "commands.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1430 lispref/vol1.texi:968
#, no-wrap
msgid "keymaps.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1431 lispref/vol1.texi:969
#, no-wrap
msgid "modes.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1432 lispref/vol2.texi:974
#, no-wrap
msgid "help.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1433 lispref/vol2.texi:975
#, no-wrap
msgid "files.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1435 lispref/vol2.texi:976
#, no-wrap
msgid "backups.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1436 lispref/vol2.texi:977
#, no-wrap
msgid "buffers.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1437 lispref/vol2.texi:979
#, no-wrap
msgid "windows.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1438 lispref/vol2.texi:980
#, no-wrap
msgid "frames.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1440 lispref/vol2.texi:981
#, no-wrap
msgid "positions.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1441 lispref/vol2.texi:982
#, no-wrap
msgid "markers.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1442 lispref/vol2.texi:983
#, no-wrap
msgid "text.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1443
#, no-wrap
msgid "nonascii.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1445 lispref/vol2.texi:985
#, no-wrap
msgid "searching.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1446 lispref/vol2.texi:986
#, no-wrap
msgid "syntax.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1447 lispref/vol2.texi:987
#, no-wrap
msgid "abbrevs.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1448 lispref/vol2.texi:989
#, no-wrap
msgid "processes.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1450 lispref/vol2.texi:991
#, no-wrap
msgid "display.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1451 lispref/vol2.texi:990
#, no-wrap
msgid "os.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1459
#, no-wrap
msgid "anti.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1460
#, no-wrap
msgid "doclicense.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1461
#, no-wrap
msgid "gpl.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1462 lispref/vol2.texi:999
#, no-wrap
msgid "tips.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1463 lispref/vol2.texi:1000
#, no-wrap
msgid "internals.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1464 lispref/vol2.texi:1001
#, no-wrap
msgid "errors.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1465 lispref/vol2.texi:1002
#, no-wrap
msgid "locals.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1466 lispref/vol2.texi:1003
#, no-wrap
msgid "maps.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1467 lispref/vol2.texi:1004
#, no-wrap
msgid "hooks.texi"
msgstr ""

# type: include
#: lispref/elisp.texi:1469
#, no-wrap
msgid "index.texi"
msgstr ""

# type: node
#: lispref/elisp.texi:1472
#, no-wrap
msgid "New Symbols"
msgstr "Nouveaux symboles"

# type: unnumbered
#: lispref/elisp.texi:1473
#, no-wrap
msgid "New Symbols Since the Previous Edition"
msgstr ""

# type: Plain text
#: lispref/elisp.texi:1482 lispref/vol1.texi:1018 lispref/vol2.texi:1018
msgid "These words prevent \"local variables\" above from confusing Emacs."
msgstr ""

# type: ignore
#: lispref/elisp.texi:1485
#, no-wrap
msgid "   arch-tag: f7e9a219-a0e1-4776-b631-08eaa1d49b34\n"
msgstr "   arch-tag: f7e9a219-a0e1-4776-b631-08eaa1d49b34\n"

# type: cindex
#: lispref/errors.texi:9
#, no-wrap
msgid "standard errors"
msgstr ""

# type: Plain text
#: lispref/errors.texi:15
msgid ""
"Here is the complete list of the error symbols in standard Emacs, grouped by "
"concept.  The list includes each symbol's message (on the @code{error-"
"message} property of the symbol) and a cross reference to a description of "
"how the error can occur."
msgstr ""

# type: Plain text
#: lispref/errors.texi:24
msgid ""
"Each error symbol has an @code{error-conditions} property that is a list of "
"symbols.  Normally this list includes the error symbol itself and the symbol "
"@code{error}.  Occasionally it includes additional symbols, which are "
"intermediate classifications, narrower than @code{error} but broader than a "
"single error symbol.  For example, all the errors in accessing files have "
"the condition @code{file-error}.  If we do not say here that a certain error "
"symbol has additional error conditions, that means it has none."
msgstr ""

# type: Plain text
#: lispref/errors.texi:27
msgid ""
"As a special exception, the error symbol @code{quit} does not have the "
"condition @code{error}, because quitting is not considered an error."
msgstr ""

# type: Plain text
#: lispref/errors.texi:30
msgid ""
"@xref{Errors}, for an explanation of how errors are generated and handled."
msgstr ""

# type: table
#: lispref/errors.texi:34
msgid "@var{string}; @var{reference}."
msgstr ""

# type: table
#: lispref/errors.texi:38
msgid "@code{\"error\"}@* @xref{Errors}."
msgstr ""

# type: item
#: lispref/errors.texi:39 lispref/os.texi:1690 lispref/searching.texi:1687
#, no-wrap
msgid "quit"
msgstr ""

# type: table
#: lispref/errors.texi:42
msgid "@code{\"Quit\"}@* @xref{Quitting}."
msgstr ""

# type: item
#: lispref/errors.texi:43
#, no-wrap
msgid "args-out-of-range"
msgstr ""

# type: table
#: lispref/errors.texi:48
msgid ""
"@code{\"Args out of range\"}@* This happens when trying to access an element "
"beyond the range of a sequence or buffer.@* @xref{Sequences Arrays Vectors}, "
"@xref{Text}."
msgstr ""

# type: item
#: lispref/errors.texi:49
#, no-wrap
msgid "arith-error"
msgstr ""

# type: table
#: lispref/errors.texi:52
msgid "@code{\"Arithmetic error\"}@* @xref{Arithmetic Operations}."
msgstr ""

# type: item
#: lispref/errors.texi:53
#, no-wrap
msgid "beginning-of-buffer"
msgstr ""

# type: table
#: lispref/errors.texi:56
msgid "@code{\"Beginning of buffer\"}@* @xref{Character Motion}."
msgstr ""

# type: table
#: lispref/errors.texi:60
msgid "@code{\"Buffer is read-only\"}@* @xref{Read Only Buffers}."
msgstr ""

# type: item
#: lispref/errors.texi:61
#, no-wrap
msgid "coding-system-error"
msgstr ""

# type: table
#: lispref/errors.texi:64
msgid "@code{\"Invalid coding system\"}@* @xref{Lisp and Coding Systems}."
msgstr ""

# type: item
#: lispref/errors.texi:65
#, no-wrap
msgid "cyclic-function-indirection"
msgstr ""

# type: table
#: lispref/errors.texi:68
msgid ""
"@code{\"Symbol's chain of function indirections\\@* contains a loop\"}@* "
"@xref{Function Indirection}."
msgstr ""

# type: item
#: lispref/errors.texi:69
#, no-wrap
msgid "cyclic-variable-indirection"
msgstr ""

# type: table
#: lispref/errors.texi:72
msgid ""
"@code{\"Symbol's chain of variable indirections\\@* contains a loop\"}@* "
"@xref{Variable Aliases}."
msgstr ""

# type: item
#: lispref/errors.texi:73
#, no-wrap
msgid "end-of-buffer"
msgstr ""

# type: table
#: lispref/errors.texi:76
msgid "@code{\"End of buffer\"}@* @xref{Character Motion}."
msgstr ""

# type: kindex
#: lispref/errors.texi:77 lispref/streams.texi:286
#, no-wrap
msgid "end-of-file"
msgstr ""

# type: table
#: lispref/errors.texi:82
msgid ""
"@code{\"End of file during parsing\"}@* Note that this is not a subcategory "
"of @code{file-error}, because it pertains to the Lisp reader, not to file I/"
"O.@* @xref{Input Functions}."
msgstr ""

# type: kindex
#: lispref/errors.texi:83 lispref/files.texi:1464
#, no-wrap
msgid "file-already-exists"
msgstr ""

# type: table
#: lispref/errors.texi:86
msgid "This is a subcategory of @code{file-error}.@* @xref{Writing to Files}."
msgstr ""

# type: item
#: lispref/errors.texi:87
#, no-wrap
msgid "file-date-error"
msgstr ""

# type: table
#: lispref/errors.texi:92
msgid ""
"This is a subcategory of @code{file-error}.  It occurs when @code{copy-file} "
"tries and fails to set the last-modification time of the output file.@* @xref"
"{Changing Files}."
msgstr ""

# type: kindex
#: lispref/errors.texi:93 lispref/loading.texi:126
#, no-wrap
msgid "file-error"
msgstr ""

# type: table
#: lispref/errors.texi:101
msgid ""
"We do not list the error-strings of this error and its subcategories, "
"because the error message is normally constructed from the data items alone "
"when the error condition @code{file-error} is present.  Thus, the error-"
"strings are not very relevant.  However, these error symbols do have @code"
"{error-message} properties, and if no data is provided, the @code{error-"
"message} property @emph{is} used.@* @xref{Files}."
msgstr ""

# type: kindex
#: lispref/errors.texi:102 lispref/files.texi:721
#, no-wrap
msgid "file-locked"
msgstr ""

# type: table
#: lispref/errors.texi:105
msgid "This is a subcategory of @code{file-error}.@* @xref{File Locks}."
msgstr ""

# type: table
#: lispref/errors.texi:109
msgid "This is a subcategory of @code{file-error}.@* @xref{Modification Time}."
msgstr ""

# type: item
#: lispref/errors.texi:110
#, no-wrap
msgid "ftp-error"
msgstr ""

# type: table
#: lispref/errors.texi:114
msgid ""
"This is a subcategory of @code{file-error}, which results from problems in "
"accessing a remote file using ftp.@* @xref{Remote Files,,, emacs, The GNU "
"Emacs Manual}."
msgstr ""

# type: kindex
#: lispref/errors.texi:115 lispref/eval.texi:254
#, no-wrap
msgid "invalid-function"
msgstr ""

# type: table
#: lispref/errors.texi:118
msgid "@code{\"Invalid function\"}@* @xref{Function Indirection}."
msgstr ""

# type: kindex
#: lispref/errors.texi:119 lispref/objects.texi:94
#, no-wrap
msgid "invalid-read-syntax"
msgstr ""

# type: table
#: lispref/errors.texi:122
msgid "@code{\"Invalid read syntax\"}@* @xref{Printed Representation}."
msgstr ""

# type: kindex
#: lispref/errors.texi:123 lispref/searching.texi:783
#, no-wrap
msgid "invalid-regexp"
msgstr ""

# type: table
#: lispref/errors.texi:126
msgid "@code{\"Invalid regexp\"}@* @xref{Regular Expressions}."
msgstr ""

# type: item
#: lispref/errors.texi:127
#, no-wrap
msgid "mark-inactive"
msgstr ""

# type: table
#: lispref/errors.texi:130
msgid "@code{\"The mark is not active now\"}@* @xref{The Mark}."
msgstr ""

# type: table
#: lispref/errors.texi:134
msgid "@code{\"No catch for tag\"}@* @xref{Catch and Throw}."
msgstr ""

# type: item
#: lispref/errors.texi:135
#, no-wrap
msgid "scan-error"
msgstr ""

# type: table
#: lispref/errors.texi:140
msgid ""
"@code{\"Scan error\"}@* This happens when certain syntax-parsing functions "
"find invalid syntax or mismatched parentheses.@* @xref{List Motion}, and @ref"
"{Parsing Expressions}."
msgstr ""

# type: kindex
#: lispref/errors.texi:141 lispref/searching.texi:80
#, no-wrap
msgid "search-failed"
msgstr ""

# type: table
#: lispref/errors.texi:144
msgid "@code{\"Search failed\"}@* @xref{Searching and Matching}."
msgstr ""

# type: kindex
#: lispref/errors.texi:145 lispref/variables.texi:103
#, no-wrap
msgid "setting-constant"
msgstr ""

# type: table
#: lispref/errors.texi:151
msgid ""
"@code{\"Attempt to set a constant symbol\"}@* The values of the symbols @code"
"{nil} and @code{t}, and any symbols that start with @samp{:}, may not be "
"changed.@* @xref{Constant Variables, , Variables that Never Change}."
msgstr ""

# type: item
#: lispref/errors.texi:152
#, no-wrap
msgid "text-read-only"
msgstr ""

# type: table
#: lispref/errors.texi:156
msgid ""
"@code{\"Text is read-only\"}@* This is a subcategory of @code{buffer-read-"
"only}.@* @xref{Special Properties}."
msgstr ""

# type: item
#: lispref/errors.texi:157
#, no-wrap
msgid "undefined-color"
msgstr ""

# type: table
#: lispref/errors.texi:160
msgid "@code{\"Undefined color\"}@* @xref{Color Names}."
msgstr ""

# type: kindex
#: lispref/errors.texi:161 lispref/functions.texi:997
#, no-wrap
msgid "void-function"
msgstr ""

# type: table
#: lispref/errors.texi:164
msgid ""
"@code{\"Symbol's function definition is void\"}@* @xref{Function Cells}."
msgstr ""

# type: kindex
#: lispref/errors.texi:165 lispref/variables.texi:287
#, no-wrap
msgid "void-variable"
msgstr ""

# type: table
#: lispref/errors.texi:168
msgid ""
"@code{\"Symbol's value as variable is void\"}@* @xref{Accessing Variables}."
msgstr "@code{\"La valeur du symbole comme variable est vide\"}@* @xref{Accès aux variables}."

# type: kindex
#: lispref/errors.texi:169 lispref/functions.texi:293
#, no-wrap
msgid "wrong-number-of-arguments"
msgstr ""

# type: table
#: lispref/errors.texi:172
msgid "@code{\"Wrong number of arguments\"}@* @xref{Classifying Lists}."
msgstr ""

# type: kindex
#: lispref/errors.texi:173 lispref/objects.texi:1661
#, no-wrap
msgid "wrong-type-argument"
msgstr ""

# type: table
#: lispref/errors.texi:176
msgid "@code{\"Wrong type argument\"}@* @xref{Type Predicates}."
msgstr ""

# type: Plain text
#: lispref/errors.texi:181
msgid ""
"These kinds of error, which are classified as special cases of @code{arith-"
"error}, can occur on certain systems for invalid use of mathematical "
"functions."
msgstr ""

# type: item
#: lispref/errors.texi:183
#, no-wrap
msgid "domain-error"
msgstr ""

# type: table
#: lispref/errors.texi:186
msgid "@code{\"Arithmetic domain error\"}@* @xref{Math Functions}."
msgstr ""

# type: item
#: lispref/errors.texi:187
#, no-wrap
msgid "overflow-error"
msgstr ""

# type: table
#: lispref/errors.texi:191
msgid ""
"@code{\"Arithmetic overflow error\"}@* This is a subcategory of @code{domain-"
"error}.@* @xref{Math Functions}."
msgstr ""

# type: item
#: lispref/errors.texi:192
#, no-wrap
msgid "range-error"
msgstr ""

# type: table
#: lispref/errors.texi:195
msgid "@code{\"Arithmetic range error\"}@* @xref{Math Functions}."
msgstr ""

# type: item
#: lispref/errors.texi:196
#, no-wrap
msgid "singularity-error"
msgstr ""

# type: table
#: lispref/errors.texi:200
msgid ""
"@code{\"Arithmetic singularity error\"}@* This is a subcategory of @code"
"{domain-error}.@* @xref{Math Functions}."
msgstr ""

# type: item
#: lispref/errors.texi:201
#, no-wrap
msgid "underflow-error"
msgstr ""

# type: table
#: lispref/errors.texi:205
msgid ""
"@code{\"Arithmetic underflow error\"}@* This is a subcategory of @code"
"{domain-error}.@* @xref{Math Functions}."
msgstr ""

# type: ignore
#: lispref/errors.texi:209
#, no-wrap
msgid "   arch-tag: 717c6048-5d9d-4c7d-9a62-df57390b6f19\n"
msgstr "   arch-tag: 717c6048-5d9d-4c7d-9a62-df57390b6f19\n"

# type: cindex
#: lispref/eval.texi:9
#, no-wrap
msgid "evaluation"
msgstr ""

# type: cindex
#: lispref/eval.texi:10 lispref/eval.texi:11
#, no-wrap
msgid "interpreter"
msgstr ""

# type: cindex
#: lispref/eval.texi:12
#, no-wrap
msgid "value of expression"
msgstr ""

# type: Plain text
#: lispref/eval.texi:21
msgid ""
"The @dfn{evaluation} of expressions in Emacs Lisp is performed by the @dfn"
"{Lisp interpreter}---a program that receives a Lisp object as input and "
"computes its @dfn{value as an expression}.  How it does this depends on the "
"data type of the object, according to rules described in this chapter.  The "
"interpreter runs automatically to evaluate portions of your program, but can "
"also be called explicitly via the Lisp primitive function @code{eval}."
msgstr ""

# type: menu
#: lispref/eval.texi:28 lispref/eval.texi:30 lispref/vol1.texi:411
#: lispref/vol2.texi:412
#, no-wrap
msgid "Intro Eval"
msgstr ""

# type: menu
#: lispref/eval.texi:28 lispref/vol1.texi:411 lispref/vol2.texi:412
msgid "Evaluation in the scheme of things."
msgstr ""

# type: menu
#: lispref/eval.texi:28 lispref/eval.texi:103 lispref/vol1.texi:411
#: lispref/vol2.texi:412
#, no-wrap
msgid "Forms"
msgstr ""

# type: menu
#: lispref/eval.texi:28 lispref/vol1.texi:411 lispref/vol2.texi:412
msgid "How various sorts of objects are evaluated."
msgstr ""

# type: menu
#: lispref/eval.texi:28 lispref/eval.texi:475 lispref/eval.texi:530
#: lispref/eval.texi:531 lispref/vol1.texi:411 lispref/vol2.texi:412
#, no-wrap
msgid "Quoting"
msgstr ""

# type: menu
#: lispref/eval.texi:28
msgid "Avoiding evaluation (to put constants in the program)."
msgstr ""

# type: menu
#: lispref/eval.texi:28 lispref/eval.texi:586 lispref/eval.texi:587
#: lispref/vol1.texi:411 lispref/vol2.texi:412
#, no-wrap
msgid "Eval"
msgstr ""

# type: menu
#: lispref/eval.texi:28 lispref/vol1.texi:411 lispref/vol2.texi:412
msgid "How to invoke the Lisp interpreter explicitly."
msgstr ""

# type: section
#: lispref/eval.texi:31
#, no-wrap
msgid "Introduction to Evaluation"
msgstr ""

# type: ifnottex
#: lispref/eval.texi:38
msgid ""
"The Lisp interpreter, or evaluator, is the program that computes the value "
"of an expression that is given to it.  When a function written in Lisp is "
"called, the evaluator computes the value of the function by evaluating the "
"expressions in the function body.  Thus, running any Lisp program really "
"means running the Lisp interpreter."
msgstr ""

# type: ifnottex
#: lispref/eval.texi:41
msgid ""
"How the evaluator handles an object depends primarily on the data type of "
"the object."
msgstr ""

# type: cindex
#: lispref/eval.texi:43
#, no-wrap
msgid "forms"
msgstr ""

# type: cindex
#: lispref/eval.texi:44
#, no-wrap
msgid "expression"
msgstr ""

# type: Plain text
#: lispref/eval.texi:51
msgid ""
"A Lisp object that is intended for evaluation is called an @dfn{expression} "
"or a @dfn{form}.  The fact that expressions are data objects and not merely "
"text is one of the fundamental differences between Lisp-like languages and "
"typical programming languages.  Any object can be evaluated, but in practice "
"only numbers, symbols, lists and strings are evaluated very often."
msgstr ""

# type: Plain text
#: lispref/eval.texi:59
msgid ""
"It is very common to read a Lisp expression and then evaluate the "
"expression, but reading and evaluation are separate activities, and either "
"can be performed alone.  Reading per se does not evaluate anything; it "
"converts the printed representation of a Lisp object to the object itself.  "
"It is up to the caller of @code{read} whether this object is a form to be "
"evaluated, or serves some entirely different purpose.  @xref{Input "
"Functions}."
msgstr ""

# type: Plain text
#: lispref/eval.texi:67
msgid ""
"Do not confuse evaluation with command key interpretation.  The editor "
"command loop translates keyboard input into a command (an interactively "
"callable function) using the active keymaps, and then uses @code{call-"
"interactively} to invoke the command.  The execution of the command itself "
"involves evaluation if the command is written in Lisp, but that is not a "
"part of command key interpretation itself.  @xref{Command Loop}."
msgstr ""

# type: cindex
#: lispref/eval.texi:68
#, no-wrap
msgid "recursive evaluation"
msgstr ""

# type: Plain text
#: lispref/eval.texi:76
msgid ""
"Evaluation is a recursive process.  That is, evaluation of a form may call "
"@code{eval} to evaluate parts of the form.  For example, evaluation of a "
"function call first evaluates each argument of the function call, and then "
"evaluates each form in the function body.  Consider evaluation of the form "
"@code{(car x)}: the subform @code{x} must first be evaluated recursively, so "
"that its value can be passed as an argument to the function @code{car}."
msgstr ""

# type: Plain text
#: lispref/eval.texi:82
msgid ""
"Evaluation of a function call ultimately calls the function specified in "
"it.  @xref{Functions}.  The execution of the function may itself work by "
"evaluating the function definition; or the function may be a Lisp primitive "
"implemented in C, or it may be a byte-compiled function (@pxref{Byte "
"Compilation})."
msgstr ""

# type: cindex
#: lispref/eval.texi:83
#, no-wrap
msgid "environment"
msgstr ""

# type: Plain text
#: lispref/eval.texi:91
msgid ""
"The evaluation of forms takes place in a context called the @dfn"
"{environment}, which consists of the current values and bindings of all Lisp "
"variables.@footnote{This definition of ``environment'' is specifically not "
"intended to include all the data that can affect the result of a program.} "
"Whenever a form refers to a variable without creating a new binding for it, "
"the value of the variable's binding in the current environment is used.  "
"@xref{Variables}."
msgstr ""

# type: cindex
#: lispref/eval.texi:92
#, no-wrap
msgid "side effect"
msgstr ""

# type: Plain text
#: lispref/eval.texi:99
msgid ""
"Evaluation of a form may create new environments for recursive evaluation by "
"binding variables (@pxref{Local Variables}).  These environments are "
"temporary and vanish by the time evaluation of the form is complete.  The "
"form may also make changes that persist; these changes are called @dfn{side "
"effects}.  An example of a form that produces side effects is @code{(setq "
"foo 1)}."
msgstr ""

# type: Plain text
#: lispref/eval.texi:102
msgid ""
"The details of what evaluation means for each kind of form are described "
"below (@pxref{Forms})."
msgstr ""

# type: menu
#: lispref/eval.texi:104 lispref/vol1.texi:413 lispref/vol2.texi:414
#, no-wrap
msgid "Kinds of Forms"
msgstr ""

# type: Plain text
#: lispref/eval.texi:112
msgid ""
"A Lisp object that is intended to be evaluated is called a @dfn{form}.  How "
"Emacs evaluates a form depends on its data type.  Emacs has three different "
"kinds of form that are evaluated differently: symbols, lists, and ``all "
"other types.'' This section describes all three kinds, one by one, starting "
"with the ``all other types'' which are self-evaluating forms."
msgstr ""

# type: menu
#: lispref/eval.texi:125 lispref/eval.texi:127 lispref/eval.texi:128
#: lispref/vol1.texi:423 lispref/vol2.texi:424
#, no-wrap
msgid "Self-Evaluating Forms"
msgstr ""

# type: menu
#: lispref/eval.texi:125 lispref/vol1.texi:423 lispref/vol2.texi:424
msgid "Forms that evaluate to themselves."
msgstr ""

# type: menu
#: lispref/eval.texi:125 lispref/eval.texi:181 lispref/eval.texi:182
#: lispref/vol1.texi:423 lispref/vol2.texi:424
#, no-wrap
msgid "Symbol Forms"
msgstr ""

# type: menu
#: lispref/eval.texi:125 lispref/vol1.texi:423 lispref/vol2.texi:424
msgid "Symbols evaluate as variables."
msgstr ""

# type: menu
#: lispref/eval.texi:125 lispref/eval.texi:217 lispref/vol1.texi:423
#: lispref/vol2.texi:424
#, no-wrap
msgid "Classifying Lists"
msgstr ""

# type: menu
#: lispref/eval.texi:125 lispref/vol1.texi:423 lispref/vol2.texi:424
msgid "How to distinguish various sorts of list forms."
msgstr ""

# type: node
#: lispref/eval.texi:125 lispref/eval.texi:233
#, no-wrap
msgid "Function Indirection"
msgstr ""

# type: menu
#: lispref/eval.texi:125
msgid "When a symbol appears as the car of a list,"
msgstr ""

# type: menu
#: lispref/eval.texi:125
msgid "we find the real function via the symbol."
msgstr ""

# type: menu
#: lispref/eval.texi:125 lispref/eval.texi:341 lispref/vol1.texi:423
#: lispref/vol2.texi:424
#, no-wrap
msgid "Function Forms"
msgstr ""

# type: menu
#: lispref/eval.texi:125 lispref/vol1.texi:423 lispref/vol2.texi:424
msgid "Forms that call functions."
msgstr ""

# type: menu
#: lispref/eval.texi:125 lispref/eval.texi:365 lispref/vol1.texi:423
#: lispref/vol2.texi:424
#, no-wrap
msgid "Macro Forms"
msgstr ""

# type: menu
#: lispref/eval.texi:125 lispref/vol1.texi:423 lispref/vol2.texi:424
msgid "Forms that call macros."
msgstr ""

# type: menu
#: lispref/eval.texi:125 lispref/eval.texi:411 lispref/eval.texi:412
#: lispref/vol1.texi:423 lispref/vol2.texi:424
#, no-wrap
msgid "Special Forms"
msgstr ""

# type: menu
#: lispref/eval.texi:125 lispref/vol1.texi:423 lispref/vol2.texi:424
msgid "\"Special forms\" are idiosyncratic primitives,"
msgstr ""

# type: menu
#: lispref/eval.texi:125 lispref/vol1.texi:423 lispref/vol2.texi:424
msgid "most of them extremely important."
msgstr ""

# type: menu
#: lispref/eval.texi:125 lispref/eval.texi:520 lispref/eval.texi:521
#: lispref/vol1.texi:423 lispref/vol2.texi:424
#, no-wrap
msgid "Autoloading"
msgstr ""

# type: menu
#: lispref/eval.texi:125 lispref/vol1.texi:423 lispref/vol2.texi:424
msgid "Functions set up to load files"
msgstr ""

# type: menu
#: lispref/eval.texi:125 lispref/vol1.texi:423 lispref/vol2.texi:424
msgid "containing their real definitions."
msgstr ""

# type: cindex
#: lispref/eval.texi:129
#, no-wrap
msgid "vector evaluation"
msgstr ""

# type: cindex
#: lispref/eval.texi:130
#, no-wrap
msgid "literal evaluation"
msgstr ""

# type: cindex
#: lispref/eval.texi:131
#, no-wrap
msgid "self-evaluating form"
msgstr ""

# type: Plain text
#: lispref/eval.texi:140
msgid ""
"A @dfn{self-evaluating form} is any form that is not a list or symbol.  Self-"
"evaluating forms evaluate to themselves: the result of evaluation is the "
"same object that was evaluated.  Thus, the number 25 evaluates to 25, and "
"the string @code{\"foo\"} evaluates to the string @code{\"foo\"}.  Likewise, "
"evaluation of a vector does not cause evaluation of the elements of the "
"vector---it returns the same vector with its contents unchanged."
msgstr ""

# type: group
#: lispref/eval.texi:145
#, no-wrap
msgid ""
"'123               ; @r{A number, shown without evaluation.}\n"
"     @result{} 123\n"
msgstr ""

# type: group
#: lispref/eval.texi:149
#, no-wrap
msgid ""
"123                ; @r{Evaluated as usual---result is the same.}\n"
"     @result{} 123\n"
msgstr ""

# type: group
#: lispref/eval.texi:153
#, no-wrap
msgid ""
"(eval '123)        ; @r{Evaluated ``by hand''---result is the same.}\n"
"     @result{} 123\n"
msgstr ""

# type: group
#: lispref/eval.texi:157
#, no-wrap
msgid ""
"(eval (eval '123)) ; @r{Evaluating twice changes nothing.}\n"
"     @result{} 123\n"
msgstr ""

# type: Plain text
#: lispref/eval.texi:166
msgid ""
"It is common to write numbers, characters, strings, and even vectors in Lisp "
"code, taking advantage of the fact that they self-evaluate.  However, it is "
"quite unusual to do this for types that lack a read syntax, because there's "
"no way to write them textually.  It is possible to construct Lisp "
"expressions containing these types by means of a Lisp program.  Here is an "
"example:"
msgstr ""

# type: group
#: lispref/eval.texi:172
#, no-wrap
msgid ""
";; @r{Build an expression containing a buffer object.}\n"
"(setq print-exp (list 'print (current-buffer)))\n"
"     @result{} (print #<buffer eval.texi>)\n"
msgstr ""

# type: group
#: lispref/eval.texi:178
#, no-wrap
msgid ""
";; @r{Evaluate it.}\n"
"(eval print-exp)\n"
"     @print{} #<buffer eval.texi>\n"
"     @result{} #<buffer eval.texi>\n"
msgstr ""

# type: cindex
#: lispref/eval.texi:183
#, no-wrap
msgid "symbol evaluation"
msgstr ""

# type: Plain text
#: lispref/eval.texi:189
msgid ""
"When a symbol is evaluated, it is treated as a variable.  The result is the "
"variable's value, if it has one.  If it has none (if its value cell is "
"void), an error is signaled.  For more information on the use of variables, "
"see @ref{Variables}."
msgstr ""

# type: Plain text
#: lispref/eval.texi:193
msgid ""
"In the following example, we set the value of a symbol with @code{setq}.  "
"Then we evaluate the symbol, and get back the value that @code{setq} stored."
msgstr ""

# type: group
#: lispref/eval.texi:198
#, no-wrap
msgid ""
"(setq a 123)\n"
"     @result{} 123\n"
msgstr ""

# type: group
#: lispref/eval.texi:202
#, no-wrap
msgid ""
"(eval 'a)\n"
"     @result{} 123\n"
msgstr ""

# type: group
#: lispref/eval.texi:206
#, no-wrap
msgid ""
"a\n"
"     @result{} 123\n"
msgstr ""

# type: Plain text
#: lispref/eval.texi:216
msgid ""
"The symbols @code{nil} and @code{t} are treated specially, so that the value "
"of @code{nil} is always @code{nil}, and the value of @code{t} is always @code"
"{t}; you cannot set or bind them to any other values.  Thus, these two "
"symbols act like self-evaluating forms, even though @code{eval} treats them "
"like any other symbol.  A symbol whose name starts with @samp{:} also self-"
"evaluates in the same way; likewise, its value ordinarily cannot be "
"changed.  @xref{Constant Variables}."
msgstr ""

# type: subsection
#: lispref/eval.texi:218
#, no-wrap
msgid "Classification of List Forms"
msgstr ""

# type: cindex
#: lispref/eval.texi:219
#, no-wrap
msgid "list form evaluation"
msgstr ""

# type: Plain text
#: lispref/eval.texi:226
msgid ""
"A form that is a nonempty list is either a function call, a macro call, or a "
"special form, according to its first element.  These three kinds of forms "
"are evaluated in different ways, described below.  The remaining list "
"elements constitute the @dfn{arguments} for the function, macro, or special "
"form."
msgstr ""

# type: Plain text
#: lispref/eval.texi:232
msgid ""
"The first step in evaluating a nonempty list is to examine its first "
"element.  This element alone determines what kind of form the list is and "
"how the rest of the list is to be processed.  The first element is @emph"
"{not} evaluated, as it would be in some Lisp dialects such as Scheme."
msgstr ""

# type: subsection
#: lispref/eval.texi:234
#, no-wrap
msgid "Symbol Function Indirection"
msgstr ""

# type: cindex
#: lispref/eval.texi:235
#, no-wrap
msgid "symbol function indirection"
msgstr ""

# type: cindex
#: lispref/eval.texi:236
#, no-wrap
msgid "indirection for functions"
msgstr ""

# type: cindex
#: lispref/eval.texi:237
#, no-wrap
msgid "void function"
msgstr ""

# type: Plain text
#: lispref/eval.texi:246
msgid ""
"If the first element of the list is a symbol then evaluation examines the "
"symbol's function cell, and uses its contents instead of the original "
"symbol.  If the contents are another symbol, this process, called @dfn"
"{symbol function indirection}, is repeated until it obtains a non-symbol.  "
"@xref{Function Names}, for more information about using a symbol as a name "
"for a function stored in the function cell of the symbol."
msgstr ""

# type: Plain text
#: lispref/eval.texi:253
msgid ""
"One possible consequence of this process is an infinite loop, in the event "
"that a symbol's function cell refers to the same symbol.  Or a symbol may "
"have a void function cell, in which case the subroutine @code{symbol-"
"function} signals a @code{void-function} error.  But if neither of these "
"things happens, we eventually obtain a non-symbol, which ought to be a "
"function or other suitable object."
msgstr ""

# type: Plain text
#: lispref/eval.texi:260
msgid ""
"More precisely, we should now have a Lisp function (a lambda expression), a "
"byte-code function, a primitive function, a Lisp macro, a special form, or "
"an autoload object.  Each of these types is a case described in one of the "
"following sections.  If the object is not one of these types, the error @code"
"{invalid-function} is signaled."
msgstr ""

# type: Plain text
#: lispref/eval.texi:267
msgid ""
"The following example illustrates the symbol indirection process.  We use "
"@code{fset} to set the function cell of a symbol and @code{symbol-function} "
"to get the function cell contents (@pxref{Function Cells}).  Specifically, "
"we store the symbol @code{car} into the function cell of @code{first}, and "
"the symbol @code{first} into the function cell of @code{erste}."
msgstr ""

# type: group
#: lispref/eval.texi:274
#, no-wrap
msgid ""
";; @r{Build this function cell linkage:}\n"
";;   -------------       -----        -------        -------\n"
";;  | #<subr car> | <-- | car |  <-- | first |  <-- | erste |\n"
";;   -------------       -----        -------        -------\n"
msgstr ""

# type: group
#: lispref/eval.texi:281
#, no-wrap
msgid ""
"(symbol-function 'car)\n"
"     @result{} #<subr car>\n"
msgstr ""

# type: group
#: lispref/eval.texi:285
#, no-wrap
msgid ""
"(fset 'first 'car)\n"
"     @result{} car\n"
msgstr ""

# type: group
#: lispref/eval.texi:289
#, no-wrap
msgid ""
"(fset 'erste 'first)\n"
"     @result{} first\n"
msgstr ""

# type: group
#: lispref/eval.texi:293
#, no-wrap
msgid ""
"(erste '(1 2 3))   ; @r{Call the function referenced by @code{erste}.}\n"
"     @result{} 1\n"
msgstr ""

# type: Plain text
#: lispref/eval.texi:299
msgid ""
"By contrast, the following example calls a function without any symbol "
"function indirection, because the first element is an anonymous Lisp "
"function, not a symbol."
msgstr ""

# type: group
#: lispref/eval.texi:305
#, no-wrap
msgid ""
"((lambda (arg) (erste arg))\n"
" '(1 2 3))\n"
"     @result{} 1\n"
msgstr ""

# type: Plain text
#: lispref/eval.texi:311
msgid ""
"Executing the function itself evaluates its body; this does involve symbol "
"function indirection when calling @code{erste}."
msgstr ""

# type: Plain text
#: lispref/eval.texi:314
msgid ""
"The built-in function @code{indirect-function} provides an easy way to "
"perform symbol function indirection explicitly."
msgstr ""

# type: defun
#: lispref/eval.texi:316
#, no-wrap
msgid "indirect-function function &optional noerror"
msgstr ""

# type: anchor{#1}
#: lispref/eval.texi:322
msgid "Definition of indirect-function"
msgstr ""

# type: defun
#: lispref/eval.texi:322
msgid ""
"This function returns the meaning of @var{function} as a function.  If @var"
"{function} is a symbol, then it finds @var{function}'s function definition "
"and starts over with that value.  If @var{function} is not a symbol, then it "
"returns @var{function} itself."
msgstr ""

# type: defun
#: lispref/eval.texi:327
msgid ""
"This function signals a @code{void-function} error if the final symbol is "
"unbound and optional argument @var{noerror} is @code{nil} or omitted.  "
"Otherwise, if @var{noerror} is non-@code{nil}, it returns @code{nil} if the "
"final symbol is unbound."
msgstr ""

# type: defun
#: lispref/eval.texi:330
msgid ""
"It signals a @code{cyclic-function-indirection} error if there is a loop in "
"the chain of symbols."
msgstr ""

# type: defun
#: lispref/eval.texi:332
msgid "Here is how you could define @code{indirect-function} in Lisp:"
msgstr ""

# type: smallexample
#: lispref/eval.texi:338
#, no-wrap
msgid ""
"(defun indirect-function (function)\n"
"  (if (symbolp function)\n"
"      (indirect-function (symbol-function function))\n"
"    function))\n"
msgstr ""

# type: subsection
#: lispref/eval.texi:342
#, no-wrap
msgid "Evaluation of Function Forms"
msgstr ""

# type: cindex
#: lispref/eval.texi:343
#, no-wrap
msgid "function form evaluation"
msgstr ""

# type: cindex
#: lispref/eval.texi:344
#, no-wrap
msgid "function call"
msgstr ""

# type: Plain text
#: lispref/eval.texi:350
msgid ""
"If the first element of a list being evaluated is a Lisp function object, "
"byte-code object or primitive function object, then that list is a @dfn"
"{function call}.  For example, here is a call to the function @code{+}:"
msgstr ""

# type: example
#: lispref/eval.texi:353
#, no-wrap
msgid "(+ 1 x)\n"
msgstr ""

# type: Plain text
#: lispref/eval.texi:364
msgid ""
"The first step in evaluating a function call is to evaluate the remaining "
"elements of the list from left to right.  The results are the actual "
"argument values, one value for each list element.  The next step is to call "
"the function with this list of arguments, effectively using the function "
"@code{apply} (@pxref{Calling Functions}).  If the function is written in "
"Lisp, the arguments are used to bind the argument variables of the function "
"(@pxref{Lambda Expressions}); then the forms in the function body are "
"evaluated in order, and the value of the last body form becomes the value of "
"the function call."
msgstr ""

# type: subsection
#: lispref/eval.texi:366
#, no-wrap
msgid "Lisp Macro Evaluation"
msgstr ""

# type: cindex
#: lispref/eval.texi:367
#, no-wrap
msgid "macro call evaluation"
msgstr ""

# type: Plain text
#: lispref/eval.texi:378
msgid ""
"If the first element of a list being evaluated is a macro object, then the "
"list is a @dfn{macro call}.  When a macro call is evaluated, the elements of "
"the rest of the list are @emph{not} initially evaluated.  Instead, these "
"elements themselves are used as the arguments of the macro.  The macro "
"definition computes a replacement form, called the @dfn{expansion} of the "
"macro, to be evaluated in place of the original form.  The expansion may be "
"any sort of form: a self-evaluating constant, a symbol, or a list.  If the "
"expansion is itself a macro call, this process of expansion repeats until "
"some other sort of form results."
msgstr ""

# type: Plain text
#: lispref/eval.texi:383
msgid ""
"Ordinary evaluation of a macro call finishes by evaluating the expansion.  "
"However, the macro expansion is not necessarily evaluated right away, or at "
"all, because other programs also expand macro calls, and they may or may not "
"evaluate the expansions."
msgstr ""

# type: Plain text
#: lispref/eval.texi:387
msgid ""
"Normally, the argument expressions are not evaluated as part of computing "
"the macro expansion, but instead appear as part of the expansion, so they "
"are computed when the expansion is evaluated."
msgstr ""

# type: Plain text
#: lispref/eval.texi:389
msgid "For example, given a macro defined as follows:"
msgstr ""

# type: group
#: lispref/eval.texi:394
#, no-wrap
msgid ""
"(defmacro cadr (x)\n"
"  (list 'car (list 'cdr x)))\n"
msgstr ""

# type: Plain text
#: lispref/eval.texi:400
msgid ""
"an expression such as @code{(cadr (assq 'handler list))} is a macro call, "
"and its expansion is:"
msgstr ""

# type: example
#: lispref/eval.texi:403
#, no-wrap
msgid "(car (cdr (assq 'handler list)))\n"
msgstr ""

# type: Plain text
#: lispref/eval.texi:408
msgid ""
"Note that the argument @code{(assq 'handler list)} appears in the expansion."
msgstr ""

# type: Plain text
#: lispref/eval.texi:410
msgid "@xref{Macros}, for a complete description of Emacs Lisp macros."
msgstr ""

# type: cindex
#: lispref/eval.texi:413
#, no-wrap
msgid "special form evaluation"
msgstr ""

# type: Plain text
#: lispref/eval.texi:419
msgid ""
"A @dfn{special form} is a primitive function specially marked so that its "
"arguments are not all evaluated.  Most special forms define control "
"structures or perform variable bindings---things which functions cannot do."
msgstr ""

# type: Plain text
#: lispref/eval.texi:423
msgid ""
"Each special form has its own rules for which arguments are evaluated and "
"which are used without evaluation.  Whether a particular argument is "
"evaluated may depend on the results of evaluating other arguments."
msgstr ""

# type: Plain text
#: lispref/eval.texi:426
msgid ""
"Here is a list, in alphabetical order, of all of the special forms in Emacs "
"Lisp with a reference to where each is described."
msgstr ""

# type: defun
#: lispref/eval.texi:428 lispref/loading.texi:304 lispref/numbers.texi:1062
#: lispref/numbers.texi:1093
#, no-wrap
msgid "and"
msgstr "et"

# type: item
#: lispref/eval.texi:431
#, no-wrap
msgid "catch"
msgstr ""

# type: item
#: lispref/eval.texi:434
#, no-wrap
msgid "cond"
msgstr ""

# type: item
#: lispref/eval.texi:437
#, no-wrap
msgid "condition-case"
msgstr ""

# type: item
#: lispref/eval.texi:440
#, no-wrap
msgid "defconst"
msgstr ""

# type: menu
#: lispref/eval.texi:442 lispref/eval.texi:451 lispref/variables.texi:48
#: lispref/variables.texi:398 lispref/vol1.texi:459 lispref/vol2.texi:460
#, no-wrap
msgid "Defining Variables"
msgstr ""

# type: item
#: lispref/eval.texi:443
#, no-wrap
msgid "defmacro"
msgstr ""

# type: menu
#: lispref/eval.texi:445 lispref/macros.texi:35 lispref/macros.texi:194
#: lispref/macros.texi:195 lispref/vol1.texi:507 lispref/vol2.texi:508
#, no-wrap
msgid "Defining Macros"
msgstr ""

# type: code{#1}
#: lispref/eval.texi:446 lispref/macros.texi:712
#, no-wrap
msgid "defun"
msgstr ""

# type: menu
#: lispref/eval.texi:448 lispref/functions.texi:29 lispref/functions.texi:508
#: lispref/functions.texi:509 lispref/vol1.texi:490 lispref/vol2.texi:491
#, no-wrap
msgid "Defining Functions"
msgstr ""

# type: item
#: lispref/eval.texi:449
#, no-wrap
msgid "defvar"
msgstr ""

# type: menu
#: lispref/eval.texi:454 lispref/functions.texi:29 lispref/functions.texi:843
#: lispref/functions.texi:844 lispref/vol1.texi:490 lispref/vol2.texi:491
#, no-wrap
msgid "Anonymous Functions"
msgstr ""

# type: item
#: lispref/eval.texi:455
#, no-wrap
msgid "if"
msgstr ""

# type: item
#: lispref/eval.texi:461
#, no-wrap
msgid "let"
msgstr ""

# type: itemx
#: lispref/eval.texi:462
#, no-wrap
msgid "let*"
msgstr ""

# type: menu
#: lispref/eval.texi:464 lispref/variables.texi:48 lispref/variables.texi:136
#: lispref/variables.texi:137 lispref/vol1.texi:459 lispref/vol2.texi:460
#, no-wrap
msgid "Local Variables"
msgstr ""

# type: Plain text
#: lispref/eval.texi:465 lispref/keymaps.texi:1640 lispref/keymaps.texi:1647
#: lispref/keymaps.texi:1675
#, no-wrap
msgid "or"
msgstr ""

# type: item
#: lispref/eval.texi:468
#, no-wrap
msgid "prog1"
msgstr ""

# type: itemx
#: lispref/eval.texi:469
#, no-wrap
msgid "prog2"
msgstr ""

# type: itemx
#: lispref/eval.texi:470
#, no-wrap
msgid "progn"
msgstr ""

# type: item
#: lispref/eval.texi:473
#, no-wrap
msgid "quote"
msgstr ""

# type: item
#: lispref/eval.texi:476
#, no-wrap
msgid "save-current-buffer"
msgstr ""

# type: item
#: lispref/eval.texi:479
#, no-wrap
msgid "save-excursion"
msgstr ""

# type: menu
#: lispref/eval.texi:481 lispref/positions.texi:38 lispref/positions.texi:815
#: lispref/positions.texi:816 lispref/vol1.texi:772 lispref/vol2.texi:773
#, no-wrap
msgid "Excursions"
msgstr ""

# type: item
#: lispref/eval.texi:482
#, no-wrap
msgid "save-restriction"
msgstr ""

# type: menu
#: lispref/eval.texi:484 lispref/positions.texi:38 lispref/positions.texi:887
#: lispref/positions.texi:888 lispref/vol1.texi:772 lispref/vol2.texi:773
#, no-wrap
msgid "Narrowing"
msgstr ""

# type: item
#: lispref/eval.texi:485
#, no-wrap
msgid "save-window-excursion"
msgstr ""

# type: section
#: lispref/eval.texi:487 lispref/vol1.texi:739 lispref/vol2.texi:740
#: lispref/windows.texi:38 lispref/windows.texi:2237 lispref/windows.texi:2238
#, no-wrap
msgid "Window Configurations"
msgstr ""

# type: item
#: lispref/eval.texi:488
#, no-wrap
msgid "setq"
msgstr ""

# type: menu
#: lispref/eval.texi:490 lispref/variables.texi:48 lispref/variables.texi:749
#: lispref/vol1.texi:459 lispref/vol2.texi:460
#, no-wrap
msgid "Setting Variables"
msgstr ""

# type: item
#: lispref/eval.texi:491
#, no-wrap
msgid "setq-default"
msgstr ""

# type: menu
#: lispref/eval.texi:493 lispref/variables.texi:1104
#: lispref/variables.texi:1197 lispref/vol1.texi:475 lispref/vol2.texi:476
#, no-wrap
msgid "Creating Buffer-Local"
msgstr ""

# type: item
#: lispref/eval.texi:494
#, no-wrap
msgid "track-mouse"
msgstr ""

# type: menu
#: lispref/eval.texi:496 lispref/frames.texi:78 lispref/frames.texi:1327
#: lispref/frames.texi:1328 lispref/vol1.texi:765 lispref/vol2.texi:766
#, no-wrap
msgid "Mouse Tracking"
msgstr ""

# type: item
#: lispref/eval.texi:497
#, no-wrap
msgid "unwind-protect"
msgstr ""

# type: item
#: lispref/eval.texi:500
#, no-wrap
msgid "while"
msgstr ""

# type: item
#: lispref/eval.texi:503
#, no-wrap
msgid "with-output-to-temp-buffer"
msgstr ""

# type: cindex
#: lispref/eval.texi:507
#, no-wrap
msgid "CL note---special forms compared"
msgstr ""

# type: quotation
#: lispref/eval.texi:518
msgid ""
"@b{Common Lisp note:} Here are some comparisons of special forms in GNU "
"Emacs Lisp and Common Lisp.  @code{setq}, @code{if}, and @code{catch} are "
"special forms in both Emacs Lisp and Common Lisp.  @code{defun} is a special "
"form in Emacs Lisp, but a macro in Common Lisp.  @code{save-excursion} is a "
"special form in Emacs Lisp, but doesn't exist in Common Lisp.  @code{throw} "
"is a special form in Common Lisp (because it must be able to throw multiple "
"values), but it is a function in Emacs Lisp (which doesn't have multiple "
"values)."
msgstr ""

# type: Plain text
#: lispref/eval.texi:529
msgid ""
"The @dfn{autoload} feature allows you to call a function or macro whose "
"function definition has not yet been loaded into Emacs.  It specifies which "
"file contains the definition.  When an autoload object appears as a symbol's "
"function definition, calling that symbol as a function automatically loads "
"the specified file; then it calls the real definition loaded from that "
"file.  @xref{Autoload}."
msgstr ""

# type: Plain text
#: lispref/eval.texi:538
msgid ""
"The special form @code{quote} returns its single argument, as written, "
"without evaluating it.  This provides a way to include constant symbols and "
"lists, which are not self-evaluating objects, in a program.  (It is not "
"necessary to quote self-evaluating objects such as numbers, strings, and "
"vectors.)"
msgstr ""

# type: defspec
#: lispref/eval.texi:539
#, no-wrap
msgid "quote object"
msgstr ""

# type: defspec
#: lispref/eval.texi:541
msgid "This special form returns @var{object}, without evaluating it."
msgstr ""

# type: cindex
#: lispref/eval.texi:543
#, no-wrap
msgid "@samp{'} for quoting"
msgstr ""

# type: cindex
#: lispref/eval.texi:544
#, no-wrap
msgid "quoting using apostrophe"
msgstr ""

# type: cindex
#: lispref/eval.texi:545
#, no-wrap
msgid "apostrophe for quoting"
msgstr ""

# type: Plain text
#: lispref/eval.texi:551
msgid ""
"Because @code{quote} is used so often in programs, Lisp provides a "
"convenient read syntax for it.  An apostrophe character (@samp{'})  followed "
"by a Lisp object (in read syntax) expands to a list whose first element is "
"@code{quote}, and whose second element is the object.  Thus, the read syntax "
"@code{'x} is an abbreviation for @code{(quote x)}."
msgstr ""

# type: Plain text
#: lispref/eval.texi:553
msgid "Here are some examples of expressions that use @code{quote}:"
msgstr ""

# type: group
#: lispref/eval.texi:558
#, no-wrap
msgid ""
"(quote (+ 1 2))\n"
"     @result{} (+ 1 2)\n"
msgstr ""

# type: group
#: lispref/eval.texi:562
#, no-wrap
msgid ""
"(quote foo)\n"
"     @result{} foo\n"
msgstr ""

# type: group
#: lispref/eval.texi:566
#, no-wrap
msgid ""
"'foo\n"
"     @result{} foo\n"
msgstr ""

# type: group
#: lispref/eval.texi:570
#, no-wrap
msgid ""
"''foo\n"
"     @result{} (quote foo)\n"
msgstr ""

# type: group
#: lispref/eval.texi:574
#, no-wrap
msgid ""
"'(quote foo)\n"
"     @result{} (quote foo)\n"
msgstr ""

# type: group
#: lispref/eval.texi:578
#, no-wrap
msgid ""
"['foo]\n"
"     @result{} [(quote foo)]\n"
msgstr ""

# type: Plain text
#: lispref/eval.texi:585
msgid ""
"Other quoting constructs include @code{function} (@pxref{Anonymous "
"Functions}), which causes an anonymous lambda expression written in Lisp to "
"be compiled, and @samp{`} (@pxref{Backquote}), which is used to quote only "
"part of a list, while computing and substituting other parts."
msgstr ""

# type: Plain text
#: lispref/eval.texi:594
msgid ""
"Most often, forms are evaluated automatically, by virtue of their occurrence "
"in a program being run.  On rare occasions, you may need to write code that "
"evaluates a form that is computed at run time, such as after reading a form "
"from text being edited or getting one from a property list.  On these "
"occasions, use the @code{eval} function."
msgstr ""

# type: Plain text
#: lispref/eval.texi:598
msgid ""
"The functions and variables described in this section evaluate forms, "
"specify limits to the evaluation process, or record recently returned "
"values.  Loading a file also does evaluation (@pxref{Loading})."
msgstr ""

# type: Plain text
#: lispref/eval.texi:604
msgid ""
"It is generally cleaner and more flexible to store a function in a data "
"structure, and call it with @code{funcall} or @code{apply}, than to store an "
"expression in the data structure and evaluate it.  Using functions provides "
"the ability to pass information to them as arguments."
msgstr ""

# type: defun
#: lispref/eval.texi:605
#, no-wrap
msgid "eval form"
msgstr ""

# type: defun
#: lispref/eval.texi:609
msgid ""
"This is the basic function evaluating an expression.  It evaluates @var"
"{form} in the current environment and returns the result.  How the "
"evaluation proceeds depends on the type of the object (@pxref{Forms})."
msgstr ""

# type: defun
#: lispref/eval.texi:614
msgid ""
"Since @code{eval} is a function, the argument expression that appears in a "
"call to @code{eval} is evaluated twice: once as preparation before @code"
"{eval} is called, and again by the @code{eval} function itself.  Here is an "
"example:"
msgstr ""

# type: group
#: lispref/eval.texi:619
#, no-wrap
msgid ""
"(setq foo 'bar)\n"
"     @result{} bar\n"
msgstr ""

# type: group
#: lispref/eval.texi:629
#, no-wrap
msgid ""
"(setq bar 'baz)\n"
"     @result{} baz\n"
";; @r{Here @code{eval} receives argument @code{foo}}\n"
"(eval 'foo)\n"
"     @result{} bar\n"
";; @r{Here @code{eval} receives argument @code{bar}, which is the value of @code{foo}}\n"
"(eval foo)\n"
"     @result{} baz\n"
msgstr ""

# type: defun
#: lispref/eval.texi:634
msgid ""
"The number of currently active calls to @code{eval} is limited to @code{max-"
"lisp-eval-depth} (see below)."
msgstr ""

# type: deffn
#: lispref/eval.texi:636
#, no-wrap
msgid "Command eval-region start end &optional stream read-function"
msgstr ""

# type: anchor{#1}
#: lispref/eval.texi:642
msgid "Definition of eval-region"
msgstr ""

# type: deffn
#: lispref/eval.texi:642
msgid ""
"This function evaluates the forms in the current buffer in the region "
"defined by the positions @var{start} and @var{end}.  It reads forms from the "
"region and calls @code{eval} on them until the end of the region is reached, "
"or until an error is signaled and not handled."
msgstr ""

# type: deffn
#: lispref/eval.texi:648
msgid ""
"By default, @code{eval-region} does not produce any output.  However, if @var"
"{stream} is non-@code{nil}, any output produced by output functions (@pxref"
"{Output Functions}), as well as the values that result from evaluating the "
"expressions in the region are printed using @var{stream}.  @xref{Output "
"Streams}."
msgstr ""

# type: deffn
#: lispref/eval.texi:656
msgid ""
"If @var{read-function} is non-@code{nil}, it should be a function, which is "
"used instead of @code{read} to read expressions one by one.  This function "
"is called with one argument, the stream for reading input.  You can also use "
"the variable @code{load-read-function} (@pxref{Definition of load-read-"
"function,, How Programs Do Loading})  to specify this function, but it is "
"more robust to use the @var{read-function} argument."
msgstr ""

# type: deffn
#: lispref/eval.texi:658
msgid "@code{eval-region} does not move point.  It always returns @code{nil}."
msgstr ""

# type: cindex
#: lispref/eval.texi:660
#, no-wrap
msgid "evaluation of buffer contents"
msgstr ""

# type: deffn
#: lispref/eval.texi:661
#, no-wrap
msgid "Command eval-buffer &optional buffer-or-name stream filename unibyte print"
msgstr ""

# type: deffn
#: lispref/eval.texi:675
msgid ""
"This is similar to @code{eval-region}, but the arguments provide different "
"optional features.  @code{eval-buffer} operates on the entire accessible "
"portion of buffer @var{buffer-or-name}.  @var{buffer-or-name} can be a "
"buffer, a buffer name (a string), or @code{nil} (or omitted), which means to "
"use the current buffer.  @var{stream} is used as in @code{eval-region}, "
"unless @var{stream} is @code{nil} and @var{print} non-@code{nil}.  In that "
"case, values that result from evaluating the expressions are still "
"discarded, but the output of the output functions is printed in the echo "
"area.  @var{filename} is the file name to use for @code{load-history} (@pxref"
"{Unloading}), and defaults to @code{buffer-file-name} (@pxref{Buffer File "
"Name}).  If @var{unibyte} is non-@code{nil}, @code{read} converts strings to "
"unibyte whenever possible."
msgstr ""

# type: findex
#: lispref/eval.texi:676
#, no-wrap
msgid "eval-current-buffer"
msgstr "eval-current-buffer"

# type: deffn
#: lispref/eval.texi:678
msgid "@code{eval-current-buffer} is an alias for this command."
msgstr ""

# type: defvar
#: lispref/eval.texi:680
#, no-wrap
msgid "max-lisp-eval-depth"
msgstr ""

# type: anchor{#1}
#: lispref/eval.texi:685
msgid "Definition of max-lisp-eval-depth"
msgstr ""

# type: defvar
#: lispref/eval.texi:685
msgid ""
"This variable defines the maximum depth allowed in calls to @code{eval}, "
"@code{apply}, and @code{funcall} before an error is signaled (with error "
"message @code{\"Lisp nesting exceeds max-lisp-eval-depth\"})."
msgstr ""

# type: defvar
#: lispref/eval.texi:690
msgid ""
"This limit, with the associated error when it is exceeded, is one way Emacs "
"Lisp avoids infinite recursion on an ill-defined function.  If you increase "
"the value of @code{max-lisp-eval-depth} too much, such code can cause stack "
"overflow instead."
msgstr ""

# type: cindex
#: lispref/eval.texi:690
#, no-wrap
msgid "Lisp nesting error"
msgstr ""

# type: defvar
#: lispref/eval.texi:696
msgid ""
"The depth limit counts internal uses of @code{eval}, @code{apply}, and @code"
"{funcall}, such as for calling the functions mentioned in Lisp expressions, "
"and recursive evaluation of function call arguments and function body forms, "
"as well as explicit calls in Lisp code."
msgstr ""

# type: defvar
#: lispref/eval.texi:701
msgid ""
"The default value of this variable is 300.  If you set it to a value less "
"than 100, Lisp will reset it to 100 if the given value is reached.  Entry to "
"the Lisp debugger increases the value, if there is little room left, to make "
"sure the debugger itself has room to execute."
msgstr ""

# type: defvar
#: lispref/eval.texi:704
msgid ""
"@code{max-specpdl-size} provides another limit on nesting.  @xref{Definition "
"of max-specpdl-size,, Local Variables}."
msgstr ""

# type: defvar
#: lispref/eval.texi:706
#, no-wrap
msgid "values"
msgstr ""

# type: defvar
#: lispref/eval.texi:714
msgid ""
"The value of this variable is a list of the values returned by all the "
"expressions that were read, evaluated, and printed from buffers (including "
"the minibuffer) by the standard Emacs commands which do this.  (Note that "
"this does @emph{not} include evaluation in @samp{*ielm*} buffers, nor "
"evaluation using @kbd{C-j} in @code{lisp-interaction-mode}.)  The elements "
"are ordered most recent first."
msgstr ""

# type: group
#: lispref/eval.texi:719
#, no-wrap
msgid ""
"(setq x 1)\n"
"     @result{} 1\n"
msgstr ""

# type: group
#: lispref/eval.texi:723
#, no-wrap
msgid ""
"(list 'A (1+ 2) auto-save-default)\n"
"     @result{} (A 3 t)\n"
msgstr ""

# type: group
#: lispref/eval.texi:727
#, no-wrap
msgid ""
"values\n"
"     @result{} ((A 3 t) 1 @dots{})\n"
msgstr ""

# type: defvar
#: lispref/eval.texi:734
msgid ""
"This variable is useful for referring back to values of forms recently "
"evaluated.  It is generally a bad idea to print the value of @code{values} "
"itself, since this may be very long.  Instead, examine particular elements, "
"like this:"
msgstr ""

# type: group
#: lispref/eval.texi:740
#, no-wrap
msgid ""
";; @r{Refer to the most recent evaluation result.}\n"
"(nth 0 values)\n"
"     @result{} (A 3 t)\n"
msgstr ""

# type: group
#: lispref/eval.texi:746
#, no-wrap
msgid ""
";; @r{That put a new element on,}\n"
";;   @r{so all elements move back one.}\n"
"(nth 1 values)\n"
"     @result{} (A 3 t)\n"
msgstr ""

# type: group
#: lispref/eval.texi:752
#, no-wrap
msgid ""
";; @r{This gets the element that was next-to-most-recent}\n"
";;   @r{before this example.}\n"
"(nth 3 values)\n"
"     @result{} 1\n"
msgstr ""

# type: ignore
#: lispref/eval.texi:758
#, no-wrap
msgid "   arch-tag: f723a4e0-31b3-453f-8afc-0bf8fd276d57\n"
msgstr "   arch-tag: f723a4e0-31b3-453f-8afc-0bf8fd276d57\n"

# type: Plain text
#: lispref/files.texi:16
msgid ""
"In Emacs, you can find, create, view, save, and otherwise work with files "
"and file directories.  This chapter describes most of the file-related "
"functions of Emacs Lisp, but a few others are described in @ref{Buffers}, "
"and those related to backups and auto-saving are described in @ref{Backups "
"and Auto-Saving}."
msgstr ""

# type: Plain text
#: lispref/files.texi:23
msgid ""
"Many of the file functions take one or more arguments that are file names.  "
"A file name is actually a string.  Most of these functions expand file name "
"arguments by calling @code{expand-file-name}, so that @file{~} is handled "
"correctly, as are relative file names (including @samp{../}).  These "
"functions don't recognize environment variable substitutions such as @samp"
"{$HOME}.  @xref{File Name Expansion}."
msgstr ""

# type: Plain text
#: lispref/files.texi:29
msgid ""
"When file I/O functions signal Lisp errors, they usually use the condition "
"@code{file-error} (@pxref{Handling Errors}).  The error message is in most "
"cases obtained from the operating system, according to locale @code{system-"
"message-locale}, and decoded using coding system @code{locale-coding-system} "
"(@pxref{Locales})."
msgstr ""

# type: menu
#: lispref/files.texi:45 lispref/files.texi:47 lispref/files.texi:48
#: lispref/vol1.texi:664 lispref/vol1.texi:666 lispref/vol2.texi:665
#: lispref/vol2.texi:667
#, no-wrap
msgid "Visiting Files"
msgstr ""

# type: menu
#: lispref/files.texi:45 lispref/vol1.texi:664 lispref/vol2.texi:665
msgid "Reading files into Emacs buffers for editing."
msgstr ""

# type: menu
#: lispref/files.texi:45 lispref/files.texi:297 lispref/files.texi:298
#: lispref/vol1.texi:664 lispref/vol2.texi:665
#, no-wrap
msgid "Saving Buffers"
msgstr ""

# type: menu
#: lispref/files.texi:45 lispref/vol1.texi:664 lispref/vol2.texi:665
msgid "Writing changed buffers back into files."
msgstr ""

# type: menu
#: lispref/files.texi:45 lispref/files.texi:482 lispref/files.texi:484
#: lispref/vol1.texi:664 lispref/vol2.texi:665
#, no-wrap
msgid "Reading from Files"
msgstr ""

# type: menu
#: lispref/files.texi:45
msgid "Reading files into buffers without visiting."
msgstr ""

# type: menu
#: lispref/files.texi:45 lispref/files.texi:546 lispref/files.texi:548
#: lispref/vol1.texi:664 lispref/vol2.texi:665
#, no-wrap
msgid "Writing to Files"
msgstr ""

# type: menu
#: lispref/files.texi:45 lispref/vol1.texi:664 lispref/vol2.texi:665
msgid "Writing new files from parts of buffers."
msgstr ""

# type: menu
#: lispref/files.texi:45 lispref/files.texi:650 lispref/files.texi:651
#: lispref/vol1.texi:664 lispref/vol2.texi:665
#, no-wrap
msgid "File Locks"
msgstr ""

# type: menu
#: lispref/files.texi:45 lispref/vol1.texi:664 lispref/vol2.texi:665
msgid "Locking and unlocking files, to prevent"
msgstr ""

# type: menu
#: lispref/files.texi:45 lispref/vol1.texi:664 lispref/vol2.texi:665
msgid "simultaneous editing by two people."
msgstr ""

# type: menu
#: lispref/files.texi:45 lispref/files.texi:741 lispref/files.texi:742
#: lispref/vol1.texi:664 lispref/vol1.texi:671 lispref/vol2.texi:665
#: lispref/vol2.texi:672
#, no-wrap
msgid "Information about Files"
msgstr ""

# type: menu
#: lispref/files.texi:45 lispref/vol1.texi:664 lispref/vol2.texi:665
msgid "Testing existence, accessibility, size of files."
msgstr ""

# type: node
#: lispref/files.texi:45 lispref/files.texi:1329
#, no-wrap
msgid "Changing Files"
msgstr ""

# type: menu
#: lispref/files.texi:45 lispref/vol1.texi:664 lispref/vol2.texi:665
msgid "Renaming files, changing protection, etc."
msgstr ""

# type: menu
#: lispref/files.texi:45 lispref/files.texi:1548 lispref/files.texi:1549
#: lispref/vol1.texi:664 lispref/vol1.texi:677 lispref/vol2.texi:665
#: lispref/vol2.texi:678
#, no-wrap
msgid "File Names"
msgstr ""

# type: menu
#: lispref/files.texi:45 lispref/vol1.texi:664 lispref/vol2.texi:665
msgid "Decomposing and expanding file names."
msgstr ""

# type: menu
#: lispref/files.texi:45 lispref/files.texi:2363 lispref/files.texi:2364
#: lispref/vol1.texi:664 lispref/vol2.texi:665
#, no-wrap
msgid "Contents of Directories"
msgstr ""

# type: menu
#: lispref/files.texi:45 lispref/vol1.texi:664 lispref/vol2.texi:665
msgid "Getting a list of the files in a directory."
msgstr ""

# type: node
#: lispref/files.texi:45 lispref/files.texi:2479
#, no-wrap
msgid "Create/Delete Dirs"
msgstr ""

# type: menu
#: lispref/files.texi:45
msgid "Creating and Deleting Directories."
msgstr ""

# type: node
#: lispref/files.texi:45 lispref/files.texi:2506
#, no-wrap
msgid "Magic File Names"
msgstr ""

# type: menu
#: lispref/files.texi:45
msgid "Defining \"magic\" special handling"
msgstr ""

# type: menu
#: lispref/files.texi:45
msgid "for certain file names."
msgstr ""

# type: node
#: lispref/files.texi:45 lispref/files.texi:2799
#, no-wrap
msgid "Format Conversion"
msgstr ""

# type: menu
#: lispref/files.texi:45
msgid "Conversion to and from various file formats."
msgstr ""

# type: cindex
#: lispref/files.texi:49
#, no-wrap
msgid "finding files"
msgstr ""

# type: cindex
#: lispref/files.texi:50
#, no-wrap
msgid "visiting files"
msgstr ""

# type: Plain text
#: lispref/files.texi:55
msgid ""
"Visiting a file means reading a file into a buffer.  Once this is done, we "
"say that the buffer is @dfn{visiting} that file, and call the file ``the "
"visited file'' of the buffer."
msgstr ""

# type: Plain text
#: lispref/files.texi:66
msgid ""
"A file and a buffer are two different things.  A file is information "
"recorded permanently in the computer (unless you delete it).  A buffer, on "
"the other hand, is information inside of Emacs that will vanish at the end "
"of the editing session (or when you kill the buffer).  Usually, a buffer "
"contains information that you have copied from a file; then we say the "
"buffer is visiting that file.  The copy in the buffer is what you modify "
"with editing commands.  Such changes to the buffer do not change the file; "
"therefore, to make the changes permanent, you must @dfn{save} the buffer, "
"which means copying the altered buffer contents back into the file."
msgstr ""

# type: Plain text
#: lispref/files.texi:73
msgid ""
"In spite of the distinction between files and buffers, people often refer to "
"a file when they mean a buffer and vice-versa.  Indeed, we say, ``I am "
"editing a file,'' rather than, ``I am editing a buffer that I will soon save "
"as a file of the same name.'' Humans do not usually need to make the "
"distinction explicit.  When dealing with a computer program, however, it is "
"good to keep the distinction in mind."
msgstr ""

# type: menu
#: lispref/files.texi:77 lispref/files.texi:79 lispref/vol1.texi:669
#: lispref/vol2.texi:670
#, no-wrap
msgid "Visiting Functions"
msgstr ""

# type: menu
#: lispref/files.texi:77 lispref/vol1.texi:669 lispref/vol2.texi:670
msgid "The usual interface functions for visiting."
msgstr ""

# type: menu
#: lispref/files.texi:77 lispref/files.texi:227 lispref/files.texi:229
#: lispref/vol1.texi:669 lispref/vol2.texi:670
#, no-wrap
msgid "Subroutines of Visiting"
msgstr ""

# type: menu
#: lispref/files.texi:77 lispref/vol1.texi:669 lispref/vol2.texi:670
msgid "Lower-level subroutines that they use."
msgstr ""

# type: subsection
#: lispref/files.texi:80
#, no-wrap
msgid "Functions for Visiting Files"
msgstr ""

# type: Plain text
#: lispref/files.texi:87
msgid ""
"This section describes the functions normally used to visit files.  For "
"historical reasons, these functions have names starting with @samp{find-} "
"rather than @samp{visit-}.  @xref{Buffer File Name}, for functions and "
"variables that access the visited file name of a buffer or that find an "
"existing buffer by its visited file name."
msgstr ""

# type: Plain text
#: lispref/files.texi:92
msgid ""
"In a Lisp program, if you want to look at the contents of a file but not "
"alter it, the fastest way is to use @code{insert-file-contents} in a "
"temporary buffer.  Visiting the file is not necessary and takes longer.  "
"@xref{Reading from Files}."
msgstr ""

# type: deffn
#: lispref/files.texi:93
#, no-wrap
msgid "Command find-file filename &optional wildcards"
msgstr ""

# type: deffn
#: lispref/files.texi:97
msgid ""
"This command selects a buffer visiting the file @var{filename}, using an "
"existing buffer if there is one, and otherwise creating a new buffer and "
"reading the file into it.  It also returns that buffer."
msgstr ""

# type: deffn
#: lispref/files.texi:100
msgid ""
"Aside from some technical details, the body of the @code{find-file} function "
"is basically equivalent to:"
msgstr ""

# type: smallexample
#: lispref/files.texi:103
#, no-wrap
msgid "(switch-to-buffer (find-file-noselect filename nil nil wildcards))\n"
msgstr ""

# type: deffn
#: lispref/files.texi:107
msgid "(See @code{switch-to-buffer} in @ref{Displaying Buffers}.)"
msgstr ""

# type: deffn
#: lispref/files.texi:111
msgid ""
"If @var{wildcards} is non-@code{nil}, which is always true in an interactive "
"call, then @code{find-file} expands wildcard characters in @var{filename} "
"and visits all the matching files."
msgstr ""

# type: deffn
#: lispref/files.texi:114
msgid ""
"When @code{find-file} is called interactively, it prompts for @var{filename} "
"in the minibuffer."
msgstr ""

# type: defun
#: lispref/files.texi:116
#, no-wrap
msgid "find-file-noselect filename &optional nowarn rawfile wildcards"
msgstr ""

# type: defun
#: lispref/files.texi:121
msgid ""
"This function is the guts of all the file-visiting functions.  It returns a "
"buffer visiting the file @var{filename}.  You may make the buffer current or "
"display it in a window if you wish, but this function does not do so."
msgstr ""

# type: defun
#: lispref/files.texi:129
msgid ""
"The function returns an existing buffer if there is one; otherwise it "
"creates a new buffer and reads the file into it.  When @code{find-file-"
"noselect} uses an existing buffer, it first verifies that the file has not "
"changed since it was last visited or saved in that buffer.  If the file has "
"changed, this function asks the user whether to reread the changed file.  If "
"the user says @samp{yes}, any edits previously made in the buffer are lost."
msgstr ""

# type: defun
#: lispref/files.texi:135
msgid ""
"Reading the file involves decoding the file's contents (@pxref{Coding "
"Systems}), including end-of-line conversion, and format conversion (@pxref"
"{Format Conversion}).  If @var{wildcards} is non-@code{nil}, then @code{find-"
"file-noselect} expands wildcard characters in @var{filename} and visits all "
"the matching files."
msgstr ""

# type: defun
#: lispref/files.texi:141
msgid ""
"This function displays warning or advisory messages in various peculiar "
"cases, unless the optional argument @var{nowarn} is non-@code{nil}.  For "
"example, if it needs to create a buffer, and there is no file named @var"
"{filename}, it displays the message @samp{(New file)} in the echo area, and "
"leaves the buffer empty."
msgstr ""

# type: defun
#: lispref/files.texi:148
msgid ""
"The @code{find-file-noselect} function normally calls @code{after-find-file} "
"after reading the file (@pxref{Subroutines of Visiting}).  That function "
"sets the buffer major mode, parses local variables, warns the user if there "
"exists an auto-save file more recent than the file just visited, and "
"finishes by running the functions in @code{find-file-hook}."
msgstr ""

# type: defun
#: lispref/files.texi:154
msgid ""
"If the optional argument @var{rawfile} is non-@code{nil}, then @code{after-"
"find-file} is not called, and the @code{find-file-not-found-functions} are "
"not run in case of failure.  What's more, a non-@code{nil} @var{rawfile} "
"value suppresses coding system conversion and format conversion."
msgstr ""

# type: defun
#: lispref/files.texi:159
msgid ""
"The @code{find-file-noselect} function usually returns the buffer that is "
"visiting the file @var{filename}.  But, if wildcards are actually used and "
"expanded, it returns a list of buffers that are visiting the various files."
msgstr ""

# type: group
#: lispref/files.texi:164
#, no-wrap
msgid ""
"(find-file-noselect \"/etc/fstab\")\n"
"     @result{} #<buffer fstab>\n"
msgstr ""

# type: deffn
#: lispref/files.texi:168
#, no-wrap
msgid "Command find-file-other-window filename &optional wildcards"
msgstr ""

# type: deffn
#: lispref/files.texi:172
msgid ""
"This command selects a buffer visiting the file @var{filename}, but does so "
"in a window other than the selected window.  It may use another existing "
"window or split a window; see @ref{Displaying Buffers}."
msgstr ""

# type: deffn
#: lispref/files.texi:175 lispref/files.texi:184
msgid ""
"When this command is called interactively, it prompts for @var{filename}."
msgstr ""

# type: deffn
#: lispref/files.texi:177
#, no-wrap
msgid "Command find-file-read-only filename &optional wildcards"
msgstr ""

# type: deffn
#: lispref/files.texi:181
msgid ""
"This command selects a buffer visiting the file @var{filename}, like @code"
"{find-file}, but it marks the buffer as read-only.  @xref{Read Only "
"Buffers}, for related functions and variables."
msgstr ""

# type: deffn
#: lispref/files.texi:186
#, no-wrap
msgid "Command view-file filename"
msgstr ""

# type: deffn
#: lispref/files.texi:192
msgid ""
"This command visits @var{filename} using View mode, returning to the "
"previous buffer when you exit View mode.  View mode is a minor mode that "
"provides commands to skim rapidly through the file, but does not let you "
"modify the text.  Entering View mode runs the normal hook @code{view-mode-"
"hook}.  @xref{Hooks}."
msgstr ""

# type: deffn
#: lispref/files.texi:195
msgid ""
"When @code{view-file} is called interactively, it prompts for @var{filename}."
msgstr ""

# type: defopt
#: lispref/files.texi:197
#, no-wrap
msgid "find-file-wildcards"
msgstr "find-file-wildcards"

# type: defopt
#: lispref/files.texi:204
msgid ""
"If this variable is non-@code{nil}, then the various @code{find-file} "
"commands check for wildcard characters and visit all the files that match "
"them (when invoked interactively or when their @var{wildcards} argument is "
"non-@code{nil}).  If this option is @code{nil}, then the @code{find-file} "
"commands ignore their @var{wildcards} argument and never treat wildcard "
"characters specially."
msgstr ""

# type: item
#: lispref/files.texi:206 lispref/hooks.texi:153
#, no-wrap
msgid "find-file-hook"
msgstr "find-file-hook"

# type: defvar
#: lispref/files.texi:211
msgid ""
"The value of this variable is a list of functions to be called after a file "
"is visited.  The file's local-variables specification (if any) will have "
"been processed before the hooks are run.  The buffer visiting the file is "
"current when the hook functions are run."
msgstr ""

# type: defvar
#: lispref/files.texi:213
msgid "This variable is a normal hook.  @xref{Hooks}."
msgstr ""

# type: item
#: lispref/files.texi:215 lispref/hooks.texi:156
#, no-wrap
msgid "find-file-not-found-functions"
msgstr ""

# type: defvar
#: lispref/files.texi:222
msgid ""
"The value of this variable is a list of functions to be called when @code"
"{find-file} or @code{find-file-noselect} is passed a nonexistent file name.  "
"@code{find-file-noselect} calls these functions as soon as it detects a "
"nonexistent file.  It calls them in the order of the list, until one of them "
"returns non-@code{nil}.  @code{buffer-file-name} is already set up."
msgstr ""

# type: defvar
#: lispref/files.texi:225
msgid ""
"This is not a normal hook because the values of the functions are used, and "
"in many cases only some of the functions are called."
msgstr ""

# type: Plain text
#: lispref/files.texi:234
msgid ""
"The @code{find-file-noselect} function uses two important subroutines which "
"are sometimes useful in user Lisp code: @code{create-file-buffer} and @code"
"{after-find-file}.  This section explains how to use them."
msgstr ""

# type: defun
#: lispref/files.texi:235
#, no-wrap
msgid "create-file-buffer filename"
msgstr ""

# type: defun
#: lispref/files.texi:240
msgid ""
"This function creates a suitably named buffer for visiting @var{filename}, "
"and returns it.  It uses @var{filename} (sans directory)  as the name if "
"that name is free; otherwise, it appends a string such as @samp{<2>} to get "
"an unused name.  See also @ref{Creating Buffers}."
msgstr ""

# type: defun
#: lispref/files.texi:244
msgid ""
"@strong{Please note:} @code{create-file-buffer} does @emph{not} associate "
"the new buffer with a file and does not select the buffer.  It also does not "
"use the default major mode."
msgstr ""

# type: group
#: lispref/files.texi:249
#, no-wrap
msgid ""
"(create-file-buffer \"foo\")\n"
"     @result{} #<buffer foo>\n"
msgstr ""

# type: group
#: lispref/files.texi:253
#, no-wrap
msgid ""
"(create-file-buffer \"foo\")\n"
"     @result{} #<buffer foo<2>>\n"
msgstr ""

# type: group
#: lispref/files.texi:257
#, no-wrap
msgid ""
"(create-file-buffer \"foo\")\n"
"     @result{} #<buffer foo<3>>\n"
msgstr ""

# type: defun
#: lispref/files.texi:262
msgid ""
"This function is used by @code{find-file-noselect}.  It uses @code{generate-"
"new-buffer} (@pxref{Creating Buffers})."
msgstr ""

# type: defun
#: lispref/files.texi:264
#, no-wrap
msgid "after-find-file &optional error warn noauto after-find-file-from-revert-buffer nomodes"
msgstr ""

# type: defun
#: lispref/files.texi:268
msgid ""
"This function sets the buffer major mode, and parses local variables (@pxref"
"{Auto Major Mode}).  It is called by @code{find-file-noselect} and by the "
"default revert function (@pxref{Reverting})."
msgstr ""

# type: cindex
#: lispref/files.texi:269
#, no-wrap
msgid "new file message"
msgstr ""

# type: cindex
#: lispref/files.texi:270
#, no-wrap
msgid "file open error"
msgstr ""

# type: defun
#: lispref/files.texi:276
msgid ""
"If reading the file got an error because the file does not exist, but its "
"directory does exist, the caller should pass a non-@code{nil} value for @var"
"{error}.  In that case, @code{after-find-file} issues a warning: @samp{(New "
"file)}.  For more serious errors, the caller should usually not call @code"
"{after-find-file}."
msgstr ""

# type: defun
#: lispref/files.texi:279
msgid ""
"If @var{warn} is non-@code{nil}, then this function issues a warning if an "
"auto-save file exists and is more recent than the visited file."
msgstr ""

# type: defun
#: lispref/files.texi:282
msgid ""
"If @var{noauto} is non-@code{nil}, that says not to enable or disable Auto-"
"Save mode.  The mode remains enabled if it was enabled before."
msgstr ""

# type: defun
#: lispref/files.texi:287
msgid ""
"If @var{after-find-file-from-revert-buffer} is non-@code{nil}, that means "
"this call was from @code{revert-buffer}.  This has no direct effect, but "
"some mode functions and hook functions check the value of this variable."
msgstr ""

# type: defun
#: lispref/files.texi:292
msgid ""
"If @var{nomodes} is non-@code{nil}, that means don't alter the buffer's "
"major mode, don't process local variables specifications in the file, and "
"don't run @code{find-file-hook}.  This feature is used by @code{revert-"
"buffer} in some cases."
msgstr ""

# type: defun
#: lispref/files.texi:295
msgid ""
"The last thing @code{after-find-file} does is call all the functions in the "
"list @code{find-file-hook}."
msgstr ""

# type: cindex
#: lispref/files.texi:299
#, no-wrap
msgid "saving buffers"
msgstr ""

# type: Plain text
#: lispref/files.texi:306
msgid ""
"When you edit a file in Emacs, you are actually working on a buffer that is "
"visiting that file---that is, the contents of the file are copied into the "
"buffer and the copy is what you edit.  Changes to the buffer do not change "
"the file until you @dfn{save} the buffer, which means copying the contents "
"of the buffer into the file."
msgstr ""

# type: deffn
#: lispref/files.texi:307
#, no-wrap
msgid "Command save-buffer &optional backup-option"
msgstr ""

# type: deffn
#: lispref/files.texi:311
msgid ""
"This function saves the contents of the current buffer in its visited file "
"if the buffer has been modified since it was last visited or saved.  "
"Otherwise it does nothing."
msgstr ""

# type: deffn
#: lispref/files.texi:317
msgid ""
"@code{save-buffer} is responsible for making backup files.  Normally, @var"
"{backup-option} is @code{nil}, and @code{save-buffer} makes a backup file "
"only if this is the first save since visiting the file.  Other values for "
"@var{backup-option} request the making of backup files in other "
"circumstances:"
msgstr ""

# type: itemize
#: lispref/files.texi:323
msgid ""
"With an argument of 4 or 64, reflecting 1 or 3 @kbd{C-u}'s, the @code{save-"
"buffer} function marks this version of the file to be backed up when the "
"buffer is next saved."
msgstr ""

# type: itemize
#: lispref/files.texi:328
msgid ""
"With an argument of 16 or 64, reflecting 2 or 3 @kbd{C-u}'s, the @code{save-"
"buffer} function unconditionally backs up the previous version of the file "
"before saving it."
msgstr ""

# type: itemize
#: lispref/files.texi:331
msgid ""
"With an argument of 0, unconditionally do @emph{not} make any backup file."
msgstr ""

# type: deffn
#: lispref/files.texi:334
#, no-wrap
msgid "Command save-some-buffers &optional save-silently-p pred"
msgstr ""

# type: anchor{#1}
#: lispref/files.texi:340
msgid "Definition of save-some-buffers"
msgstr ""

# type: deffn
#: lispref/files.texi:340
msgid ""
"This command saves some modified file-visiting buffers.  Normally it asks "
"the user about each buffer.  But if @var{save-silently-p} is non-@code{nil}, "
"it saves all the file-visiting buffers without querying the user."
msgstr ""

# type: deffn
#: lispref/files.texi:350
msgid ""
"The optional @var{pred} argument controls which buffers to ask about (or to "
"save silently if @var{save-silently-p} is non-@code{nil}).  If it is @code"
"{nil}, that means to ask only about file-visiting buffers.  If it is @code"
"{t}, that means also offer to save certain other non-file buffers---those "
"that have a non-@code{nil} buffer-local value of @code{buffer-offer-save} "
"(@pxref{Killing Buffers}).  A user who says @samp{yes} to saving a non-file "
"buffer is asked to specify the file name to use.  The @code{save-buffers-"
"kill-emacs} function passes the value @code{t} for @var{pred}."
msgstr ""

# type: deffn
#: lispref/files.texi:355
msgid ""
"If @var{pred} is neither @code{t} nor @code{nil}, then it should be a "
"function of no arguments.  It will be called in each buffer to decide "
"whether to offer to save that buffer.  If it returns a non-@code{nil} value "
"in a certain buffer, that means do offer to save that buffer."
msgstr ""

# type: deffn
#: lispref/files.texi:357
#, no-wrap
msgid "Command write-file filename &optional confirm"
msgstr ""

# type: anchor{#1}
#: lispref/files.texi:365
msgid "Definition of write-file"
msgstr ""

# type: deffn
#: lispref/files.texi:365
msgid ""
"This function writes the current buffer into file @var{filename}, makes the "
"buffer visit that file, and marks it not modified.  Then it renames the "
"buffer based on @var{filename}, appending a string like @samp{<2>} if "
"necessary to make a unique buffer name.  It does most of this work by "
"calling @code{set-visited-file-name} (@pxref{Buffer File Name}) and @code"
"{save-buffer}."
msgstr ""

# type: deffn
#: lispref/files.texi:369
msgid ""
"If @var{confirm} is non-@code{nil}, that means to ask for confirmation "
"before overwriting an existing file.  Interactively, confirmation is "
"required, unless the user supplies a prefix argument."
msgstr ""

# type: deffn
#: lispref/files.texi:374
msgid ""
"If @var{filename} is an existing directory, or a symbolic link to one, @code"
"{write-file} uses the name of the visited file, in directory @var"
"{filename}.  If the buffer is not visiting a file, it uses the buffer name "
"instead."
msgstr ""

# type: Plain text
#: lispref/files.texi:379
msgid ""
"Saving a buffer runs several hooks.  It also performs format conversion "
"(@pxref{Format Conversion}), and may save text properties in "
"``annotations'' (@pxref{Saving Properties})."
msgstr ""

# type: item
#: lispref/files.texi:380 lispref/hooks.texi:329
#, no-wrap
msgid "write-file-functions"
msgstr "write-file-functions"

# type: defvar
#: lispref/files.texi:386
msgid ""
"The value of this variable is a list of functions to be called before "
"writing out a buffer to its visited file.  If one of them returns non-@code"
"{nil}, the file is considered already written and the rest of the functions "
"are not called, nor is the usual code for writing the file executed."
msgstr ""

# type: defvar
#: lispref/files.texi:390
msgid ""
"If a function in @code{write-file-functions} returns non-@code{nil}, it is "
"responsible for making a backup file (if that is appropriate).  To do so, "
"execute the following code:"
msgstr ""

# type: example
#: lispref/files.texi:393
#, no-wrap
msgid "(or buffer-backed-up (backup-buffer))\n"
msgstr ""

# type: defvar
#: lispref/files.texi:399
msgid ""
"You might wish to save the file modes value returned by @code{backup-buffer} "
"and use that (if non-@code{nil}) to set the mode bits of the file that you "
"write.  This is what @code{save-buffer} normally does. @xref{Making "
"Backups,, Making Backup Files}."
msgstr ""

# type: defvar
#: lispref/files.texi:406
msgid ""
"The hook functions in @code{write-file-functions} are also responsible for "
"encoding the data (if desired): they must choose a suitable coding system "
"and end-of-line conversion (@pxref{Lisp and Coding Systems}), perform the "
"encoding (@pxref{Explicit Encoding}), and set @code{last-coding-system-used} "
"to the coding system that was used (@pxref{Encoding and I/O})."
msgstr ""

# type: defvar
#: lispref/files.texi:414
msgid ""
"If you set this hook locally in a buffer, it is assumed to be associated "
"with the file or the way the contents of the buffer were obtained.  Thus the "
"variable is marked as a permanent local, so that changing the major mode "
"does not alter a buffer-local value.  On the other hand, calling @code{set-"
"visited-file-name} will reset it.  If this is not what you want, you might "
"like to use @code{write-contents-functions} instead."
msgstr ""

# type: defvar
#: lispref/files.texi:417
msgid ""
"Even though this is not a normal hook, you can use @code{add-hook} and @code"
"{remove-hook} to manipulate the list.  @xref{Hooks}."
msgstr ""

# type: item
#: lispref/files.texi:420 lispref/hooks.texi:326 lispref/locals.texi:225
#, no-wrap
msgid "write-contents-functions"
msgstr "write-contents-functions"

# type: defvar
#: lispref/files.texi:428
msgid ""
"This works just like @code{write-file-functions}, but it is intended for "
"hooks that pertain to the buffer's contents, not to the particular visited "
"file or its location.  Such hooks are usually set up by major modes, as "
"buffer-local bindings for this variable.  This variable automatically "
"becomes buffer-local whenever it is set; switching to a new major mode "
"always resets this variable, but calling @code{set-visited-file-name} does "
"not."
msgstr ""

# type: defvar
#: lispref/files.texi:432
msgid ""
"If any of the functions in this hook returns non-@code{nil}, the file is "
"considered already written and the rest are not called and neither are the "
"functions in @code{write-file-functions}."
msgstr ""

# type: item
#: lispref/files.texi:434 lispref/hooks.texi:80
#, no-wrap
msgid "before-save-hook"
msgstr "before-save-hook"

# type: defopt
#: lispref/files.texi:440
msgid ""
"This normal hook runs before a buffer is saved in its visited file, "
"regardless of whether that is done normally or by one of the hooks described "
"above.  For instance, the @file{copyright.el} program uses this hook to make "
"sure the file you are saving has the current year in its copyright notice."
msgstr ""

# type: item
#: lispref/files.texi:443 lispref/hooks.texi:59
#, no-wrap
msgid "after-save-hook"
msgstr "after-save-hook"

# type: defopt
#: lispref/files.texi:447
msgid ""
"This normal hook runs after a buffer has been saved in its visited file.  "
"One use of this hook is in Fast Lock mode; it uses this hook to save the "
"highlighting information in a cache file."
msgstr ""

# type: defopt
#: lispref/files.texi:449
#, no-wrap
msgid "file-precious-flag"
msgstr "file-precious-flag"

# type: defopt
#: lispref/files.texi:456
msgid ""
"If this variable is non-@code{nil}, then @code{save-buffer} protects against "
"I/O errors while saving by writing the new file to a temporary name instead "
"of the name it is supposed to have, and then renaming it to the intended "
"name after it is clear there are no errors.  This procedure prevents "
"problems such as a lack of disk space from resulting in an invalid file."
msgstr ""

# type: defopt
#: lispref/files.texi:460
msgid ""
"As a side effect, backups are necessarily made by copying.  @xref{Rename or "
"Copy}.  Yet, at the same time, saving a precious file always breaks all hard "
"links between the file you save and other file names."
msgstr ""

# type: defopt
#: lispref/files.texi:463
msgid ""
"Some modes give this variable a non-@code{nil} buffer-local value in "
"particular buffers."
msgstr ""

# type: defopt
#: lispref/files.texi:465
#, no-wrap
msgid "require-final-newline"
msgstr "require-final-newline"

# type: defopt
#: lispref/files.texi:473
msgid ""
"This variable determines whether files may be written out that do @emph{not} "
"end with a newline.  If the value of the variable is @code{t}, then @code"
"{save-buffer} silently adds a newline at the end of the file whenever the "
"buffer being saved does not already end in one.  If the value of the "
"variable is non-@code{nil}, but not @code{t}, then @code{save-buffer} asks "
"the user whether to add a newline each time the case arises."
msgstr ""

# type: defopt
#: lispref/files.texi:477
msgid ""
"If the value of the variable is @code{nil}, then @code{save-buffer} doesn't "
"add newlines at all.  @code{nil} is the default value, but a few major modes "
"set it to @code{t} in particular buffers."
msgstr ""

# type: Plain text
#: lispref/files.texi:481
msgid ""
"See also the function @code{set-visited-file-name} (@pxref{Buffer File "
"Name})."
msgstr ""

# type: cindex
#: lispref/files.texi:485
#, no-wrap
msgid "reading from files"
msgstr ""

# type: Plain text
#: lispref/files.texi:490
msgid ""
"You can copy a file from the disk and insert it into a buffer using the @code"
"{insert-file-contents} function.  Don't use the user-level command @code"
"{insert-file} in a Lisp program, as that sets the mark."
msgstr ""

# type: defun
#: lispref/files.texi:491
#, no-wrap
msgid "insert-file-contents filename &optional visit beg end replace"
msgstr ""

# type: defun
#: lispref/files.texi:496
msgid ""
"This function inserts the contents of file @var{filename} into the current "
"buffer after point.  It returns a list of the absolute file name and the "
"length of the data inserted.  An error is signaled if @var{filename} is not "
"the name of a file that can be read."
msgstr ""

# type: defun
#: lispref/files.texi:505
msgid ""
"The function @code{insert-file-contents} checks the file contents against "
"the defined file formats, and converts the file contents if appropriate.  "
"@xref{Format Conversion}.  It also calls the functions in the list @code"
"{after-insert-file-functions}; see @ref{Saving Properties}.  Normally, one "
"of the functions in the @code{after-insert-file-functions} list determines "
"the coding system (@pxref{Coding Systems}) used for decoding the file's "
"contents, including end-of-line conversion."
msgstr ""

# type: defun
#: lispref/files.texi:511
msgid ""
"If @var{visit} is non-@code{nil}, this function additionally marks the "
"buffer as unmodified and sets up various fields in the buffer so that it is "
"visiting the file @var{filename}: these include the buffer's visited file "
"name and its last save file modtime.  This feature is used by @code{find-"
"file-noselect} and you probably should not use it yourself."
msgstr ""

# type: defun
#: lispref/files.texi:515
msgid ""
"If @var{beg} and @var{end} are non-@code{nil}, they should be integers "
"specifying the portion of the file to insert.  In this case, @var{visit} "
"must be @code{nil}.  For example,"
msgstr ""

# type: example
#: lispref/files.texi:518
#, no-wrap
msgid "(insert-file-contents filename nil 0 500)\n"
msgstr ""

# type: defun
#: lispref/files.texi:522
msgid "inserts the first 500 characters of a file."
msgstr ""

# type: defun
#: lispref/files.texi:528
msgid ""
"If the argument @var{replace} is non-@code{nil}, it means to replace the "
"contents of the buffer (actually, just the accessible portion) with the "
"contents of the file.  This is better than simply deleting the buffer "
"contents and inserting the whole file, because (1) it preserves some marker "
"positions and (2) it puts less data in the undo list."
msgstr ""

# type: defun
#: lispref/files.texi:532
msgid ""
"It is possible to read a special file (such as a FIFO or an I/O device)  "
"with @code{insert-file-contents}, as long as @var{replace} and @var{visit} "
"are @code{nil}."
msgstr ""

# type: defun
#: lispref/files.texi:534
#, no-wrap
msgid "insert-file-contents-literally filename &optional visit beg end replace"
msgstr ""

# type: defun
#: lispref/files.texi:540
msgid ""
"This function works like @code{insert-file-contents} except that it does not "
"do format decoding (@pxref{Format Conversion}), does not do character code "
"conversion (@pxref{Coding Systems}), does not run @code{find-file-hook}, "
"does not perform automatic uncompression, and so on."
msgstr ""

# type: Plain text
#: lispref/files.texi:545
msgid ""
"If you want to pass a file name to another process so that another program "
"can read the file, use the function @code{file-local-copy}; see @ref{Magic "
"File Names}."
msgstr ""

# type: cindex
#: lispref/files.texi:549
#, no-wrap
msgid "writing to files"
msgstr ""

# type: Plain text
#: lispref/files.texi:556
msgid ""
"You can write the contents of a buffer, or part of a buffer, directly to a "
"file on disk using the @code{append-to-file} and @code{write-region} "
"functions.  Don't use these functions to write to files that are being "
"visited; that could cause confusion in the mechanisms for visiting."
msgstr ""

# type: deffn
#: lispref/files.texi:557
#, no-wrap
msgid "Command append-to-file start end filename"
msgstr ""

# type: deffn
#: lispref/files.texi:562
msgid ""
"This function appends the contents of the region delimited by @var{start} "
"and @var{end} in the current buffer to the end of file @var{filename}.  If "
"that file does not exist, it is created.  This function returns @code{nil}."
msgstr ""

# type: deffn
#: lispref/files.texi:565
msgid ""
"An error is signaled if @var{filename} specifies a nonwritable file, or a "
"nonexistent file in a directory where files cannot be created."
msgstr ""

# type: deffn
#: lispref/files.texi:567
msgid "When called from Lisp, this function is completely equivalent to:"
msgstr ""

# type: example
#: lispref/files.texi:570
#, no-wrap
msgid "(write-region start end filename t)\n"
msgstr ""

# type: deffn
#: lispref/files.texi:573
#, no-wrap
msgid "Command write-region start end filename &optional append visit lockname mustbenew"
msgstr ""

# type: deffn
#: lispref/files.texi:576
msgid ""
"This function writes the region delimited by @var{start} and @var{end} in "
"the current buffer into the file specified by @var{filename}."
msgstr ""

# type: deffn
#: lispref/files.texi:580
msgid ""
"If @var{start} is @code{nil}, then the command writes the entire buffer "
"contents (@emph{not} just the accessible portion) to the file and ignores "
"@var{end}."
msgstr ""

# type: deffn
#: lispref/files.texi:585
msgid ""
"If @var{start} is a string, then @code{write-region} writes or appends that "
"string, rather than text from the buffer.  @var{end} is ignored in this case."
msgstr ""

# type: deffn
#: lispref/files.texi:590
msgid ""
"If @var{append} is non-@code{nil}, then the specified text is appended to "
"the existing file contents (if any).  If @var{append} is an integer, @code"
"{write-region} seeks to that byte offset from the start of the file and "
"writes the data from there."
msgstr ""

# type: deffn
#: lispref/files.texi:596
msgid ""
"If @var{mustbenew} is non-@code{nil}, then @code{write-region} asks for "
"confirmation if @var{filename} names an existing file.  If @var{mustbenew} "
"is the symbol @code{excl}, then @code{write-region} does not ask for "
"confirmation, but instead it signals an error @code{file-already-exists} if "
"the file already exists."
msgstr ""

# type: deffn
#: lispref/files.texi:601
msgid ""
"The test for an existing file, when @var{mustbenew} is @code{excl}, uses a "
"special system feature.  At least for files on a local disk, there is no "
"chance that some other program could create a file of the same name before "
"Emacs does, without Emacs's noticing."
msgstr ""

# type: deffn
#: lispref/files.texi:608
msgid ""
"If @var{visit} is @code{t}, then Emacs establishes an association between "
"the buffer and the file: the buffer is then visiting that file.  It also "
"sets the last file modification time for the current buffer to @var"
"{filename}'s modtime, and marks the buffer as not modified.  This feature is "
"used by @code{save-buffer}, but you probably should not use it yourself."
msgstr ""

# type: deffn
#: lispref/files.texi:617
msgid ""
"If @var{visit} is a string, it specifies the file name to visit.  This way, "
"you can write the data to one file (@var{filename}) while recording the "
"buffer as visiting another file (@var{visit}).  The argument @var{visit} is "
"used in the echo area message and also for file locking; @var{visit} is "
"stored in @code{buffer-file-name}.  This feature is used to implement @code"
"{file-precious-flag}; don't use it yourself unless you really know what "
"you're doing."
msgstr ""

# type: deffn
#: lispref/files.texi:621
msgid ""
"The optional argument @var{lockname}, if non-@code{nil}, specifies the file "
"name to use for purposes of locking and unlocking, overriding @var{filename} "
"and @var{visit} for that purpose."
msgstr ""

# type: deffn
#: lispref/files.texi:626
msgid ""
"The function @code{write-region} converts the data which it writes to the "
"appropriate file formats specified by @code{buffer-file-format}.  @xref"
"{Format Conversion}.  It also calls the functions in the list @code{write-"
"region-annotate-functions}; see @ref{Saving Properties}."
msgstr ""

# type: deffn
#: lispref/files.texi:632
msgid ""
"Normally, @code{write-region} displays the message @samp{Wrote @var"
"{filename}} in the echo area.  If @var{visit} is neither @code{t} nor @code"
"{nil} nor a string, then this message is inhibited.  This feature is useful "
"for programs that use files for internal purposes, files that the user does "
"not need to know about."
msgstr ""

# type: defmac
#: lispref/files.texi:634
#, no-wrap
msgid "with-temp-file file body@dots{}"
msgstr ""

# type: anchor{#1}
#: lispref/files.texi:642
msgid "Definition of with-temp-file"
msgstr ""

# type: defmac
#: lispref/files.texi:642
msgid ""
"The @code{with-temp-file} macro evaluates the @var{body} forms with a "
"temporary buffer as the current buffer; then, at the end, it writes the "
"buffer contents into file @var{file}.  It kills the temporary buffer when "
"finished, restoring the buffer that was current before the @code{with-temp-"
"file} form.  Then it returns the value of the last form in @var{body}."
msgstr ""

# type: defmac
#: lispref/files.texi:648
msgid ""
"See also @code{with-temp-buffer} in @ref{Definition of with-temp-buffer,, "
"The Current Buffer}."
msgstr ""

# type: cindex
#: lispref/files.texi:652
#, no-wrap
msgid "file locks"
msgstr ""

# type: cindex
#: lispref/files.texi:653
#, no-wrap
msgid "lock file"
msgstr ""

# type: Plain text
#: lispref/files.texi:663
msgid ""
"When two users edit the same file at the same time, they are likely to "
"interfere with each other.  Emacs tries to prevent this situation from "
"arising by recording a @dfn{file lock} when a file is being modified.  (File "
"locks are not implemented on Microsoft systems.)  Emacs can then detect the "
"first attempt to modify a buffer visiting a file that is locked by another "
"Emacs job, and ask the user what to do.  The file lock is really a file, a "
"symbolic link with a special name, stored in the same directory as the file "
"you are editing."
msgstr ""

# type: Plain text
#: lispref/files.texi:671
msgid ""
"When you access files using NFS, there may be a small probability that you "
"and another user will both lock the same file ``simultaneously.'' If this "
"happens, it is possible for the two users to make changes simultaneously, "
"but Emacs will still warn the user who saves second.  Also, the detection of "
"modification of a buffer visiting a file changed on disk catches some cases "
"of simultaneous editing; see @ref{Modification Time}."
msgstr ""

# type: defun
#: lispref/files.texi:672
#, no-wrap
msgid "file-locked-p filename"
msgstr ""

# type: defun
#: lispref/files.texi:677
msgid ""
"This function returns @code{nil} if the file @var{filename} is not locked.  "
"It returns @code{t} if it is locked by this Emacs process, and it returns "
"the name of the user who has locked it if it is locked by some other job."
msgstr ""

# type: group
#: lispref/files.texi:682
#, no-wrap
msgid ""
"(file-locked-p \"foo\")\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/files.texi:686
#, no-wrap
msgid "lock-buffer &optional filename"
msgstr ""

# type: defun
#: lispref/files.texi:691
msgid ""
"This function locks the file @var{filename}, if the current buffer is "
"modified.  The argument @var{filename} defaults to the current buffer's "
"visited file.  Nothing is done if the current buffer is not visiting a file, "
"or is not modified, or if the system does not support locking."
msgstr ""

# type: defun
#: lispref/files.texi:693
#, no-wrap
msgid "unlock-buffer"
msgstr ""

# type: defun
#: lispref/files.texi:699
msgid ""
"This function unlocks the file being visited in the current buffer, if the "
"buffer is modified.  If the buffer is not modified, then the file should not "
"be locked, so this function does nothing.  It also does nothing if the "
"current buffer is not visiting a file, or if the system does not support "
"locking."
msgstr ""

# type: Plain text
#: lispref/files.texi:704
msgid ""
"File locking is not supported on some systems.  On systems that do not "
"support it, the functions @code{lock-buffer}, @code{unlock-buffer} and @code"
"{file-locked-p} do nothing and return @code{nil}."
msgstr ""

# type: defun
#: lispref/files.texi:705
#, no-wrap
msgid "ask-user-about-lock file other-user"
msgstr ""

# type: defun
#: lispref/files.texi:710
msgid ""
"This function is called when the user tries to modify @var{file}, but it is "
"locked by another user named @var{other-user}.  The default definition of "
"this function asks the user to say what to do.  The value this function "
"returns determines what Emacs does next:"
msgstr ""

# type: itemize
#: lispref/files.texi:715
msgid ""
"A value of @code{t} says to grab the lock on the file.  Then this user may "
"edit the file and @var{other-user} loses the lock."
msgstr ""

# type: itemize
#: lispref/files.texi:719
msgid ""
"A value of @code{nil} says to ignore the lock and let this user edit the "
"file anyway."
msgstr ""

# type: itemize
#: lispref/files.texi:724
msgid ""
"This function may instead signal a @code{file-locked} error, in which case "
"the change that the user was about to make does not take place."
msgstr ""

# type: itemize
#: lispref/files.texi:726
msgid "The error message for this error looks like this:"
msgstr ""

# type: example
#: lispref/files.texi:729
#, no-wrap
msgid "@error{} File is locked: @var{file} @var{other-user}\n"
msgstr ""

# type: itemize
#: lispref/files.texi:734
msgid ""
"where @code{file} is the name of the file and @var{other-user} is the name "
"of the user who has locked the file."
msgstr ""

# type: defun
#: lispref/files.texi:739
msgid ""
"If you wish, you can replace the @code{ask-user-about-lock} function with "
"your own version that makes the decision in another way.  The code for its "
"usual definition is in @file{userlock.el}."
msgstr ""

# type: cindex
#: lispref/files.texi:743
#, no-wrap
msgid "file, information about"
msgstr ""

# type: Plain text
#: lispref/files.texi:751
msgid ""
"The functions described in this section all operate on strings that "
"designate file names.  With a few exceptions, all the functions have names "
"that begin with the word @samp{file}.  These functions all return "
"information about actual files or directories, so their arguments must all "
"exist as actual files or directories unless otherwise noted."
msgstr ""

# type: menu
#: lispref/files.texi:758 lispref/files.texi:760 lispref/files.texi:762
#: lispref/vol1.texi:675 lispref/vol2.texi:676
#, no-wrap
msgid "Testing Accessibility"
msgstr ""

# type: menu
#: lispref/files.texi:758 lispref/vol1.texi:675 lispref/vol2.texi:676
msgid "Is a given file readable"
msgstr ""

# type: menu
#: lispref/files.texi:758 lispref/vol1.texi:675 lispref/vol2.texi:676
msgid "Writable?"
msgstr ""

# type: menu
#: lispref/files.texi:758 lispref/files.texi:918 lispref/vol1.texi:675
#: lispref/vol2.texi:676
#, no-wrap
msgid "Kinds of Files"
msgstr ""

# type: menu
#: lispref/files.texi:758 lispref/vol1.texi:675 lispref/vol2.texi:676
msgid "Is it a directory"
msgstr ""

# type: menu
#: lispref/files.texi:758
msgid "A symbolic link?"
msgstr ""

# type: subsection
#: lispref/files.texi:758 lispref/files.texi:996 lispref/files.texi:997
#, no-wrap
msgid "Truenames"
msgstr ""

# type: menu
#: lispref/files.texi:758
msgid "Eliminating symbolic links from a file name."
msgstr ""

# type: menu
#: lispref/files.texi:758 lispref/files.texi:1056 lispref/vol1.texi:675
#: lispref/vol2.texi:676
#, no-wrap
msgid "File Attributes"
msgstr ""

# type: menu
#: lispref/files.texi:758 lispref/vol1.texi:675 lispref/vol2.texi:676
msgid "How large is it"
msgstr ""

# type: menu
#: lispref/files.texi:758 lispref/vol1.texi:675 lispref/vol2.texi:676
msgid "Any other names"
msgstr ""

# type: menu
#: lispref/files.texi:758 lispref/vol1.texi:675 lispref/vol2.texi:676
msgid "Etc."
msgstr ""

# type: node
#: lispref/files.texi:758 lispref/files.texi:1269
#, no-wrap
msgid "Locating Files"
msgstr ""

# type: menu
#: lispref/files.texi:758
msgid "How to find a file in standard places."
msgstr ""

# type: cindex
#: lispref/files.texi:763
#, no-wrap
msgid "accessibility of a file"
msgstr ""

# type: cindex
#: lispref/files.texi:764
#, no-wrap
msgid "file accessibility"
msgstr ""

# type: Plain text
#: lispref/files.texi:770
msgid ""
"These functions test for permission to access a file in specific ways.  "
"Unless explicitly stated otherwise, they recursively follow symbolic links "
"for their file name arguments, at all levels (at the level of the file "
"itself and at all levels of parent directories)."
msgstr ""

# type: defun
#: lispref/files.texi:771
#, no-wrap
msgid "file-exists-p filename"
msgstr ""

# type: defun
#: lispref/files.texi:778
msgid ""
"This function returns @code{t} if a file named @var{filename} appears to "
"exist.  This does not mean you can necessarily read the file, only that you "
"can find out its attributes.  (On Unix and GNU/Linux, this is true if the "
"file exists and you have execute permission on the containing directories, "
"regardless of the protection of the file itself.)"
msgstr ""

# type: defun
#: lispref/files.texi:782
msgid ""
"If the file does not exist, or if fascist access control policies prevent "
"you from finding the attributes of the file, this function returns @code"
"{nil}."
msgstr ""

# type: defun
#: lispref/files.texi:787
msgid ""
"Directories are files, so @code{file-exists-p} returns @code{t} when given a "
"directory name.  However, symbolic links are treated specially; @code{file-"
"exists-p} returns @code{t} for a symbolic link name only if the target file "
"exists."
msgstr ""

# type: defun
#: lispref/files.texi:789
#, no-wrap
msgid "file-readable-p filename"
msgstr ""

# type: defun
#: lispref/files.texi:792
msgid ""
"This function returns @code{t} if a file named @var{filename} exists and you "
"can read it.  It returns @code{nil} otherwise."
msgstr ""

# type: group
#: lispref/files.texi:797
#, no-wrap
msgid ""
"(file-readable-p \"files.texi\")\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/files.texi:801
#, no-wrap
msgid ""
"(file-exists-p \"/usr/spool/mqueue\")\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/files.texi:805
#, no-wrap
msgid ""
"(file-readable-p \"/usr/spool/mqueue\")\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/files.texi:810
#, no-wrap
msgid "file-executable-p filename"
msgstr ""

# type: defun
#: lispref/files.texi:816
msgid ""
"This function returns @code{t} if a file named @var{filename} exists and you "
"can execute it.  It returns @code{nil} otherwise.  On Unix and GNU/Linux, if "
"the file is a directory, execute permission means you can check the "
"existence and attributes of files inside the directory, and open those files "
"if their modes permit."
msgstr ""

# type: defun
#: lispref/files.texi:818
#, no-wrap
msgid "file-writable-p filename"
msgstr ""

# type: defun
#: lispref/files.texi:824
msgid ""
"This function returns @code{t} if the file @var{filename} can be written or "
"created by you, and @code{nil} otherwise.  A file is writable if the file "
"exists and you can write it.  It is creatable if it does not exist, but the "
"specified directory does exist and you can write in that directory."
msgstr ""

# type: defun
#: lispref/files.texi:828
msgid ""
"In the third example below, @file{foo} is not writable because the parent "
"directory does not exist, even though the user could create such a directory."
msgstr ""

# type: group
#: lispref/files.texi:833
#, no-wrap
msgid ""
"(file-writable-p \"~/foo\")\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/files.texi:837
#, no-wrap
msgid ""
"(file-writable-p \"/foo\")\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/files.texi:841
#, no-wrap
msgid ""
"(file-writable-p \"~/no-such-dir/foo\")\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/files.texi:846
#, no-wrap
msgid "file-accessible-directory-p dirname"
msgstr ""

# type: defun
#: lispref/files.texi:853
msgid ""
"This function returns @code{t} if you have permission to open existing files "
"in the directory whose name as a file is @var{dirname}; otherwise (or if "
"there is no such directory), it returns @code{nil}.  The value of @var"
"{dirname} may be either a directory name (such as @file{/foo/}) or the file "
"name of a file which is a directory (such as @file{/foo}, without the final "
"slash)."
msgstr ""

# type: defun
#: lispref/files.texi:855
msgid "Example: after the following,"
msgstr ""

# type: example
#: lispref/files.texi:859
#, no-wrap
msgid ""
"(file-accessible-directory-p \"/foo\")\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/files.texi:864
msgid ""
"we can deduce that any attempt to read a file in @file{/foo/} will give an "
"error."
msgstr ""

# type: defun
#: lispref/files.texi:866
#, no-wrap
msgid "access-file filename string"
msgstr ""

# type: defun
#: lispref/files.texi:870
msgid ""
"This function opens file @var{filename} for reading, then closes it and "
"returns @code{nil}.  However, if the open fails, it signals an error using "
"@var{string} as the error message text."
msgstr ""

# type: defun
#: lispref/files.texi:872
#, no-wrap
msgid "file-ownership-preserved-p filename"
msgstr ""

# type: defun
#: lispref/files.texi:876
msgid ""
"This function returns @code{t} if deleting the file @var{filename} and then "
"creating it anew would keep the file's owner unchanged.  It also returns "
"@code{t} for nonexistent files."
msgstr ""

# type: defun
#: lispref/files.texi:881
msgid ""
"If @var{filename} is a symbolic link, then, unlike the other functions "
"discussed here, @code{file-ownership-preserved-p} does @emph{not} replace "
"@var{filename} with its target.  However, it does recursively follow "
"symbolic links at all levels of parent directories."
msgstr ""

# type: defun
#: lispref/files.texi:883
#, no-wrap
msgid "file-newer-than-file-p filename1 filename2"
msgstr ""

# type: cindex
#: lispref/files.texi:884
#, no-wrap
msgid "file age"
msgstr ""

# type: cindex
#: lispref/files.texi:885
#, no-wrap
msgid "file modification time"
msgstr ""

# type: defun
#: lispref/files.texi:890
msgid ""
"This function returns @code{t} if the file @var{filename1} is newer than "
"file @var{filename2}.  If @var{filename1} does not exist, it returns @code"
"{nil}.  If @var{filename1} does exist, but @var{filename2} does not, it "
"returns @code{t}."
msgstr ""

# type: defun
#: lispref/files.texi:894
msgid ""
"In the following example, assume that the file @file{aug-19} was written on "
"the 19th, @file{aug-20} was written on the 20th, and the file @file{no-file} "
"doesn't exist at all."
msgstr ""

# type: group
#: lispref/files.texi:899
#, no-wrap
msgid ""
"(file-newer-than-file-p \"aug-19\" \"aug-20\")\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/files.texi:903
#, no-wrap
msgid ""
"(file-newer-than-file-p \"aug-20\" \"aug-19\")\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/files.texi:907
#, no-wrap
msgid ""
"(file-newer-than-file-p \"aug-19\" \"no-file\")\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/files.texi:911
#, no-wrap
msgid ""
"(file-newer-than-file-p \"no-file\" \"aug-19\")\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/files.texi:916
msgid ""
"You can use @code{file-attributes} to get a file's last modification time as "
"a list of two numbers.  @xref{File Attributes}."
msgstr ""

# type: subsection
#: lispref/files.texi:920
#, no-wrap
msgid "Distinguishing Kinds of Files"
msgstr ""

# type: Plain text
#: lispref/files.texi:924
msgid ""
"This section describes how to distinguish various kinds of files, such as "
"directories, symbolic links, and ordinary files."
msgstr ""

# type: defun
#: lispref/files.texi:925
#, no-wrap
msgid "file-symlink-p filename"
msgstr ""

# type: cindex
#: lispref/files.texi:926
#, no-wrap
msgid "file symbolic links"
msgstr ""

# type: defun
#: lispref/files.texi:932
msgid ""
"If the file @var{filename} is a symbolic link, the @code{file-symlink-p} "
"function returns the (non-recursive) link target as a string.  (Determining "
"the file name that the link points to from the target is nontrivial.)  "
"First, this function recursively follows symbolic links at all levels of "
"parent directories."
msgstr ""

# type: defun
#: lispref/files.texi:935
msgid ""
"If the file @var{filename} is not a symbolic link (or there is no such "
"file), @code{file-symlink-p} returns @code{nil}."
msgstr ""

# type: group
#: lispref/files.texi:940
#, no-wrap
msgid ""
"(file-symlink-p \"foo\")\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/files.texi:944
#, no-wrap
msgid ""
"(file-symlink-p \"sym-link\")\n"
"     @result{} \"foo\"\n"
msgstr ""

# type: group
#: lispref/files.texi:948
#, no-wrap
msgid ""
"(file-symlink-p \"sym-link2\")\n"
"     @result{} \"sym-link\"\n"
msgstr ""

# type: group
#: lispref/files.texi:952
#, no-wrap
msgid ""
"(file-symlink-p \"/bin\")\n"
"     @result{} \"/pub/bin\"\n"
msgstr ""

# type: Plain text
#: lispref/files.texi:960
msgid ""
"The next two functions recursively follow symbolic links at all levels for "
"@var{filename}."
msgstr ""

# type: defun
#: lispref/files.texi:961
#, no-wrap
msgid "file-directory-p filename"
msgstr ""

# type: defun
#: lispref/files.texi:964
msgid ""
"This function returns @code{t} if @var{filename} is the name of an existing "
"directory, @code{nil} otherwise."
msgstr ""

# type: group
#: lispref/files.texi:969
#, no-wrap
msgid ""
"(file-directory-p \"~rms\")\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/files.texi:973
#, no-wrap
msgid ""
"(file-directory-p \"~rms/lewis/files.texi\")\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/files.texi:977
#, no-wrap
msgid ""
"(file-directory-p \"~rms/lewis/no-such-file\")\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/files.texi:981
#, no-wrap
msgid ""
"(file-directory-p \"$HOME\")\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/files.texi:986
#, no-wrap
msgid ""
"(file-directory-p\n"
" (substitute-in-file-name \"$HOME\"))\n"
"     @result{} t\n"
msgstr ""

# type: defun
#: lispref/files.texi:990
#, no-wrap
msgid "file-regular-p filename"
msgstr ""

# type: defun
#: lispref/files.texi:994
msgid ""
"This function returns @code{t} if the file @var{filename} exists and is a "
"regular file (not a directory, named pipe, terminal, or other I/O device)."
msgstr ""

# type: cindex
#: lispref/files.texi:998
#, no-wrap
msgid "truename (of file)"
msgstr ""

# type: Plain text
#: lispref/files.texi:1008
msgid ""
"The @dfn{truename} of a file is the name that you get by following symbolic "
"links at all levels until none remain, then simplifying away @samp{.}@: and "
"@samp{..}@: appearing as name components.  This results in a sort of "
"canonical name for the file.  A file does not always have a unique truename; "
"the number of distinct truenames a file has is equal to the number of hard "
"links to the file.  However, truenames are useful because they eliminate "
"symbolic links as a cause of name variation."
msgstr ""

# type: defun
#: lispref/files.texi:1009
#, no-wrap
msgid "file-truename filename"
msgstr ""

# type: defun
#: lispref/files.texi:1012
msgid ""
"The function @code{file-truename} returns the truename of the file @var"
"{filename}.  The argument must be an absolute file name."
msgstr ""

# type: defun
#: lispref/files.texi:1016
msgid ""
"This function does not expand environment variables.  Only @code{substitute-"
"in-file-name} does that.  @xref{Definition of substitute-in-file-name}."
msgstr ""

# type: defun
#: lispref/files.texi:1026
msgid ""
"If you may need to follow symbolic links preceding @samp{..}@: appearing as "
"a name component, you should make sure to call @code{file-truename} without "
"prior direct or indirect calls to @code{expand-file-name}, as otherwise the "
"file name component immediately preceding @samp{..} will be ``simplified "
"away'' before @code{file-truename} is called.  To eliminate the need for a "
"call to @code{expand-file-name}, @code{file-truename} handles @samp{~} in "
"the same way that @code{expand-file-name} does.  @xref{File Name Expansion,, "
"Functions that Expand Filenames}."
msgstr ""

# type: defun
#: lispref/files.texi:1028
#, no-wrap
msgid "file-chase-links filename &optional limit"
msgstr ""

# type: defun
#: lispref/files.texi:1033
msgid ""
"This function follows symbolic links, starting with @var{filename}, until it "
"finds a file name which is not the name of a symbolic link.  Then it returns "
"that file name.  This function does @emph{not} follow symbolic links at the "
"level of parent directories."
msgstr ""

# type: defun
#: lispref/files.texi:1037
msgid ""
"If you specify a number for @var{limit}, then after chasing through that "
"many links, the function just returns what it has even if that is still a "
"symbolic link."
msgstr ""

# type: Plain text
#: lispref/files.texi:1044
msgid ""
"To illustrate the difference between @code{file-chase-links} and @code{file-"
"truename}, suppose that @file{/usr/foo} is a symbolic link to the directory "
"@file{/home/foo}, and @file{/home/foo/hello} is an ordinary file (or at "
"least, not a symbolic link) or nonexistent.  Then we would have:"
msgstr ""

# type: example
#: lispref/files.texi:1052
#, no-wrap
msgid ""
"(file-chase-links \"/usr/foo/hello\")\n"
"     ;; @r{This does not follow the links in the parent directories.}\n"
"     @result{} \"/usr/foo/hello\"\n"
"(file-truename \"/usr/foo/hello\")\n"
"     ;; @r{Assuming that @file{/home} is not a symbolic link.}\n"
"     @result{} \"/home/foo/hello\"\n"
msgstr ""

# type: Plain text
#: lispref/files.texi:1055
msgid "@xref{Buffer File Name}, for related information."
msgstr ""

# type: subsection
#: lispref/files.texi:1058
#, no-wrap
msgid "Other Information about Files"
msgstr ""

# type: Plain text
#: lispref/files.texi:1065
msgid ""
"This section describes the functions for getting detailed information about "
"a file, other than its contents.  This information includes the mode bits "
"that control access permission, the owner and group numbers, the number of "
"names, the inode number, the size, and the times of access and modification."
msgstr ""

# type: defun
#: lispref/files.texi:1066
#, no-wrap
msgid "file-modes filename"
msgstr ""

# type: cindex
#: lispref/files.texi:1067
#, no-wrap
msgid "permission"
msgstr ""

# type: cindex
#: lispref/files.texi:1068
#, no-wrap
msgid "file attributes"
msgstr ""

# type: defun
#: lispref/files.texi:1074
msgid ""
"This function returns the mode bits of @var{filename}, as an integer.  The "
"mode bits are also called the file permissions, and they specify access "
"control in the usual Unix fashion.  If the low-order bit is 1, then the file "
"is executable by all users, if the second-lowest-order bit is 1, then the "
"file is writable by all users, etc."
msgstr ""

# type: defun
#: lispref/files.texi:1078
msgid ""
"The highest value returnable is 4095 (7777 octal), meaning that everyone has "
"read, write, and execute permission, that the @acronym{SUID} bit is set for "
"both others and group, and that the sticky bit is set."
msgstr ""

# type: defun
#: lispref/files.texi:1080
msgid "If @var{filename} does not exist, @code{file-modes} returns @code{nil}."
msgstr ""

# type: defun
#: lispref/files.texi:1082
msgid "This function recursively follows symbolic links at all levels."
msgstr ""

# type: group
#: lispref/files.texi:1087
#, no-wrap
msgid ""
"(file-modes \"~/junk/diffs\")\n"
"     @result{} 492               ; @r{Decimal integer.}\n"
msgstr ""

# type: group
#: lispref/files.texi:1091
#, no-wrap
msgid ""
"(format \"%o\" 492)\n"
"     @result{} \"754\"             ; @r{Convert to octal.}\n"
msgstr ""

# type: group
#: lispref/files.texi:1096
#, no-wrap
msgid ""
"(set-file-modes \"~/junk/diffs\" 438)\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/files.texi:1101
#, no-wrap
msgid ""
"(format \"%o\" 438)\n"
"     @result{} \"666\"             ; @r{Convert to octal.}\n"
msgstr ""

# type: group
#: lispref/files.texi:1106
#, no-wrap
msgid ""
"% ls -l diffs\n"
"  -rw-rw-rw-  1 lewis 0 3063 Oct 30 16:00 diffs\n"
msgstr ""

# type: Plain text
#: lispref/files.texi:1114
msgid ""
"If the @var{filename} argument to the next two functions is a symbolic link, "
"then these function do @emph{not} replace it with its target.  However, they "
"both recursively follow symbolic links at all levels of parent directories."
msgstr ""

# type: defun
#: lispref/files.texi:1115
#, no-wrap
msgid "file-nlinks filename"
msgstr ""

# type: defun
#: lispref/files.texi:1121
msgid ""
"This functions returns the number of names (i.e., hard links) that file @var"
"{filename} has.  If the file does not exist, then this function returns @code"
"{nil}.  Note that symbolic links have no effect on this function, because "
"they are not considered to be names of the files they link to."
msgstr ""

# type: group
#: lispref/files.texi:1127
#, no-wrap
msgid ""
"% ls -l foo*\n"
"-rw-rw-rw-  2 rms       4 Aug 19 01:27 foo\n"
"-rw-rw-rw-  2 rms       4 Aug 19 01:27 foo1\n"
msgstr ""

# type: group
#: lispref/files.texi:1132
#, no-wrap
msgid ""
"(file-nlinks \"foo\")\n"
"     @result{} 2\n"
msgstr ""

# type: group
#: lispref/files.texi:1136
#, no-wrap
msgid ""
"(file-nlinks \"doesnt-exist\")\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/files.texi:1140
#, no-wrap
msgid "file-attributes filename &optional id-format"
msgstr ""

# type: anchor{#1}
#: lispref/files.texi:1150
msgid "Definition of file-attributes"
msgstr ""

# type: defun
#: lispref/files.texi:1150
msgid ""
"This function returns a list of attributes of file @var{filename}.  If the "
"specified file cannot be opened, it returns @code{nil}.  The optional "
"parameter @var{id-format} specifies the preferred format of attributes "
"@acronym{UID} and @acronym{GID} (see below)---the valid values are @code"
"{'string} and @code{'integer}.  The latter is the default, but we plan to "
"change that, so you should specify a non-@code{nil} value for @var{id-"
"format} if you use the returned @acronym{UID} or @acronym{GID}."
msgstr ""

# type: defun
#: lispref/files.texi:1152
msgid "The elements of the list, in order, are:"
msgstr ""

# type: enumerate
#: lispref/files.texi:1157
msgid ""
"@code{t} for a directory, a string for a symbolic link (the name linked to), "
"or @code{nil} for a text file."
msgstr ""

# type: enumerate
#: lispref/files.texi:1163
msgid ""
"The number of names the file has.  Alternate names, also known as hard "
"links, can be created by using the @code{add-name-to-file} function (@pxref"
"{Changing Files})."
msgstr ""

# type: enumerate
#: lispref/files.texi:1168
msgid ""
"The file's @acronym{UID}, normally as a string.  However, if it does not "
"correspond to a named user, the value is an integer or a floating point "
"number."
msgstr ""

# type: enumerate
#: lispref/files.texi:1171
msgid "The file's @acronym{GID}, likewise."
msgstr ""

# type: enumerate
#: lispref/files.texi:1177
msgid ""
"The time of last access, as a list of two integers.  The first integer has "
"the high-order 16 bits of time, the second has the low 16 bits.  (This is "
"similar to the value of @code{current-time}; see @ref{Time of Day}.)"
msgstr ""

# type: enumerate
#: lispref/files.texi:1180
msgid "The time of last modification as a list of two integers (as above)."
msgstr ""

# type: cindex
#: lispref/files.texi:1180
#, no-wrap
msgid "modification time of file"
msgstr ""

# type: enumerate
#: lispref/files.texi:1184
msgid "The time of last status change as a list of two integers (as above)."
msgstr ""

# type: enumerate
#: lispref/files.texi:1188
msgid ""
"The size of the file in bytes.  If the size is too large to fit in a Lisp "
"integer, this is a floating point number."
msgstr ""

# type: enumerate
#: lispref/files.texi:1192
msgid ""
"The file's modes, as a string of ten letters or dashes, as in @samp{ls -l}."
msgstr ""

# type: enumerate
#: lispref/files.texi:1196
msgid ""
"@code{t} if the file's @acronym{GID} would change if file were deleted and "
"recreated; @code{nil} otherwise."
msgstr ""

# type: enumerate
#: lispref/files.texi:1202
msgid ""
"The file's inode number.  If possible, this is an integer.  If the inode "
"number is too large to be represented as an integer in Emacs Lisp, then the "
"value has the form @code{(@var{high} . @var{low})}, where @var{low} holds "
"the low 16 bits."
msgstr ""

# type: enumerate
#: lispref/files.texi:1210
msgid ""
"The file system number of the file system that the file is in.  Depending on "
"the magnitude of the value, this can be either an integer or a cons cell, in "
"the same manner as the inode number.  This element and the file's inode "
"number together give enough information to distinguish any two files on the "
"system---no two files can have the same values for both of these numbers."
msgstr ""

# type: defun
#: lispref/files.texi:1213
msgid "For example, here are the file attributes for @file{files.texi}:"
msgstr ""

# type: group
#: lispref/files.texi:1223
#, no-wrap
msgid ""
"(file-attributes \"files.texi\" 'string)\n"
"     @result{}  (nil 1 \"lh\" \"users\"\n"
"          (8489 20284)\n"
"          (8489 20284)\n"
"          (8489 20285)\n"
"          14906 \"-rw-rw-rw-\"\n"
"          nil 129500 -32252)\n"
msgstr ""

# type: defun
#: lispref/files.texi:1228
msgid "and here is how the result is interpreted:"
msgstr ""

# type: table
#: lispref/files.texi:1232
msgid "is neither a directory nor a symbolic link."
msgstr ""

# type: table
#: lispref/files.texi:1236
msgid ""
"has only one name (the name @file{files.texi} in the current default "
"directory)."
msgstr ""

# type: item
#: lispref/files.texi:1237
#, no-wrap
msgid "\"lh\""
msgstr ""

# type: table
#: lispref/files.texi:1239
msgid "is owned by the user with name \"lh\"."
msgstr ""

# type: item
#: lispref/files.texi:1240
#, no-wrap
msgid "\"users\""
msgstr ""

# type: table
#: lispref/files.texi:1242
msgid "is in the group with name \"users\"."
msgstr ""

# type: item
#: lispref/files.texi:1243 lispref/files.texi:1246
#, no-wrap
msgid "(8489 20284)"
msgstr ""

# type: table
#: lispref/files.texi:1245
msgid "was last accessed on Aug 19 00:09."
msgstr ""

# type: table
#: lispref/files.texi:1248
msgid "was last modified on Aug 19 00:09."
msgstr ""

# type: item
#: lispref/files.texi:1249
#, no-wrap
msgid "(8489 20285)"
msgstr ""

# type: table
#: lispref/files.texi:1251
msgid "last had its inode changed on Aug 19 00:09."
msgstr ""

# type: item
#: lispref/files.texi:1252
#, no-wrap
msgid "14906"
msgstr ""

# type: table
#: lispref/files.texi:1255
msgid ""
"is 14906 bytes long.  (It may not contain 14906 characters, though, if some "
"of the bytes belong to multibyte sequences.)"
msgstr ""

# type: item
#: lispref/files.texi:1256
#, no-wrap
msgid "\"-rw-rw-rw-\""
msgstr ""

# type: table
#: lispref/files.texi:1258
msgid "has a mode of read and write access for the owner, group, and world."
msgstr ""

# type: table
#: lispref/files.texi:1261
msgid "would retain the same @acronym{GID} if it were recreated."
msgstr ""

# type: item
#: lispref/files.texi:1262
#, no-wrap
msgid "129500"
msgstr ""

# type: table
#: lispref/files.texi:1264
msgid "has an inode number of 129500."
msgstr ""

# type: item
#: lispref/files.texi:1264
#, no-wrap
msgid "-32252"
msgstr ""

# type: table
#: lispref/files.texi:1266
msgid "is on file system number -32252."
msgstr ""

# type: subsection
#: lispref/files.texi:1270
#, no-wrap
msgid "How to Locate Files in Standard Places"
msgstr ""

# type: cindex
#: lispref/files.texi:1271
#, no-wrap
msgid "locate file in path"
msgstr ""

# type: cindex
#: lispref/files.texi:1272
#, no-wrap
msgid "find file in path"
msgstr ""

# type: Plain text
#: lispref/files.texi:1282
msgid ""
"This section explains how to search for a file in a list of directories (a "
"@dfn{path}).  One example is when you need to look for a program's "
"executable file, e.g., to find out whether a given program is installed on "
"the user's system.  Another example is the search for Lisp libraries (@pxref"
"{Library Search}).  Such searches generally need to try various possible "
"file name extensions, in addition to various possible directories.  Emacs "
"provides a function for such a generalized search for a file."
msgstr ""

# type: defun
#: lispref/files.texi:1283
#, no-wrap
msgid "locate-file filename path &optional suffixes predicate"
msgstr ""

# type: defun
#: lispref/files.texi:1289
msgid ""
"This function searches for a file whose name is @var{filename} in a list of "
"directories given by @var{path}, trying the suffixes in @var{suffixes}.  If "
"it finds such a file, it returns the full @dfn{absolute file name} of the "
"file (@pxref{Relative File Names}); otherwise it returns @code{nil}."
msgstr ""

# type: defun
#: lispref/files.texi:1299
msgid ""
"The optional argument @var{suffixes} gives the list of file-name suffixes to "
"append to @var{filename} when searching.  @code{locate-file} tries each "
"possible directory with each of these suffixes.  If @var{suffixes} is @code"
"{nil}, or @code{(\"\")}, then there are no suffixes, and @var{filename} is "
"used only as-is.  Typical values of @var{suffixes} are @code{exec-suffixes} "
"(@pxref{Subprocess Creation, exec-suffixes}), @code{load-suffixes}, @code"
"{load-file-rep-suffixes} and the return value of the function @code{get-load-"
"suffixes} (@pxref{Load Suffixes})."
msgstr ""

# type: defun
#: lispref/files.texi:1305
msgid ""
"Typical values for @var{path} are @code{exec-path} (@pxref{Subprocess "
"Creation, exec-path}) when looking for executable programs or @code{load-"
"path} (@pxref{Library Search, load-path}) when looking for Lisp files.  If "
"@var{filename} is absolute, @var{path} has no effect, but the suffixes in "
"@var{suffixes} are still tried."
msgstr ""

# type: defun
#: lispref/files.texi:1314
msgid ""
"The optional argument @var{predicate}, if non-@code{nil}, specifies the "
"predicate function to use for testing whether a candidate file is suitable.  "
"The predicate function is passed the candidate file name as its single "
"argument.  If @var{predicate} is @code{nil} or unspecified, @code{locate-"
"file} uses @code{file-readable-p} as the default predicate.  Useful non-"
"default predicates include @code{file-executable-p}, @code{file-directory-"
"p}, and other predicates described in @ref{Kinds of Files}."
msgstr ""

# type: defun
#: lispref/files.texi:1318
msgid ""
"For compatibility, @var{predicate} can also be one of the symbols @code"
"{executable}, @code{readable}, @code{writable}, @code{exists}, or a list of "
"one or more of these symbols."
msgstr ""

# type: defun
#: lispref/files.texi:1320
#, no-wrap
msgid "executable-find program"
msgstr ""

# type: defun
#: lispref/files.texi:1327
msgid ""
"This function searches for the executable file of the named @var{program} "
"and returns the full absolute name of the executable, including its file-"
"name extensions, if any.  It returns @code{nil} if the file is not found.  "
"The functions searches in all the directories in @code{exec-path} and tries "
"all the file-name extensions in @code{exec-suffixes}."
msgstr ""

# type: section
#: lispref/files.texi:1330
#, no-wrap
msgid "Changing File Names and Attributes"
msgstr ""

# type: cindex
#: lispref/files.texi:1332
#, no-wrap
msgid "copying files"
msgstr ""

# type: cindex
#: lispref/files.texi:1333
#, no-wrap
msgid "deleting files"
msgstr ""

# type: cindex
#: lispref/files.texi:1334
#, no-wrap
msgid "linking files"
msgstr ""

# type: cindex
#: lispref/files.texi:1335
#, no-wrap
msgid "setting modes of files"
msgstr ""

# type: Plain text
#: lispref/files.texi:1339
msgid ""
"The functions in this section rename, copy, delete, link, and set the modes "
"of files."
msgstr ""

# type: Plain text
#: lispref/files.texi:1343
msgid ""
"In the functions that have an argument @var{newname}, if a file by the name "
"of @var{newname} already exists, the actions taken depend on the value of "
"the argument @var{ok-if-already-exists}:"
msgstr ""

# type: itemize
#: lispref/files.texi:1348
msgid ""
"Signal a @code{file-already-exists} error if @var{ok-if-already-exists} is "
"@code{nil}."
msgstr ""

# type: itemize
#: lispref/files.texi:1351
msgid "Request confirmation if @var{ok-if-already-exists} is a number."
msgstr ""

# type: itemize
#: lispref/files.texi:1355
msgid ""
"Replace the old file without confirmation if @var{ok-if-already-exists} is "
"any other value."
msgstr ""

# type: Plain text
#: lispref/files.texi:1361
msgid ""
"The next four commands all recursively follow symbolic links at all levels "
"of parent directories for their first argument, but, if that argument is "
"itself a symbolic link, then only @code{copy-file} replaces it with its "
"(recursive) target."
msgstr ""

# type: deffn
#: lispref/files.texi:1362
#, no-wrap
msgid "Command add-name-to-file oldname newname &optional ok-if-already-exists"
msgstr ""

# type: cindex
#: lispref/files.texi:1363
#, no-wrap
msgid "file with multiple names"
msgstr ""

# type: cindex
#: lispref/files.texi:1364
#, no-wrap
msgid "file hard link"
msgstr ""

# type: deffn
#: lispref/files.texi:1368
msgid ""
"This function gives the file named @var{oldname} the additional name @var"
"{newname}.  This means that @var{newname} becomes a new ``hard link'' to @var"
"{oldname}."
msgstr ""

# type: deffn
#: lispref/files.texi:1371
msgid ""
"In the first part of the following example, we list two files, @file{foo} "
"and @file{foo3}."
msgstr ""

# type: group
#: lispref/files.texi:1377
#, no-wrap
msgid ""
"% ls -li fo*\n"
"81908 -rw-rw-rw-  1 rms       29 Aug 18 20:32 foo\n"
"84302 -rw-rw-rw-  1 rms       24 Aug 18 20:31 foo3\n"
msgstr ""

# type: deffn
#: lispref/files.texi:1383
msgid ""
"Now we create a hard link, by calling @code{add-name-to-file}, then list the "
"files again.  This shows two names for one file, @file{foo} and @file{foo2}."
msgstr ""

# type: group
#: lispref/files.texi:1388
#, no-wrap
msgid ""
"(add-name-to-file \"foo\" \"foo2\")\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/files.texi:1395
#, no-wrap
msgid ""
"% ls -li fo*\n"
"81908 -rw-rw-rw-  2 rms       29 Aug 18 20:32 foo\n"
"81908 -rw-rw-rw-  2 rms       29 Aug 18 20:32 foo2\n"
"84302 -rw-rw-rw-  1 rms       24 Aug 18 20:31 foo3\n"
msgstr ""

# type: deffn
#: lispref/files.texi:1399
msgid "Finally, we evaluate the following:"
msgstr ""

# type: example
#: lispref/files.texi:1402
#, no-wrap
msgid "(add-name-to-file \"foo\" \"foo3\" t)\n"
msgstr ""

# type: deffn
#: lispref/files.texi:1408
msgid ""
"and list the files again.  Now there are three names for one file: @file"
"{foo}, @file{foo2}, and @file{foo3}.  The old contents of @file{foo3} are "
"lost."
msgstr ""

# type: group
#: lispref/files.texi:1413
#, no-wrap
msgid ""
"(add-name-to-file \"foo1\" \"foo3\")\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/files.texi:1420
#, no-wrap
msgid ""
"% ls -li fo*\n"
"81908 -rw-rw-rw-  3 rms       29 Aug 18 20:32 foo\n"
"81908 -rw-rw-rw-  3 rms       29 Aug 18 20:32 foo2\n"
"81908 -rw-rw-rw-  3 rms       29 Aug 18 20:32 foo3\n"
msgstr ""

# type: deffn
#: lispref/files.texi:1426
msgid ""
"This function is meaningless on operating systems where multiple names for "
"one file are not allowed.  Some systems implement multiple names by copying "
"the file instead."
msgstr ""

# type: deffn
#: lispref/files.texi:1428
msgid "See also @code{file-nlinks} in @ref{File Attributes}."
msgstr ""

# type: deffn
#: lispref/files.texi:1430
#, no-wrap
msgid "Command rename-file filename newname &optional ok-if-already-exists"
msgstr ""

# type: deffn
#: lispref/files.texi:1432
msgid "This command renames the file @var{filename} as @var{newname}."
msgstr ""

# type: deffn
#: lispref/files.texi:1437
msgid ""
"If @var{filename} has additional names aside from @var{filename}, it "
"continues to have those names.  In fact, adding the name @var{newname} with "
"@code{add-name-to-file} and then deleting @var{filename} has the same effect "
"as renaming, aside from momentary intermediate states."
msgstr ""

# type: deffn
#: lispref/files.texi:1439
#, no-wrap
msgid "Command copy-file oldname newname &optional ok-if-exists time preserve-uid-gid"
msgstr ""

# type: deffn
#: lispref/files.texi:1444
msgid ""
"This command copies the file @var{oldname} to @var{newname}.  An error is "
"signaled if @var{oldname} does not exist.  If @var{newname} names a "
"directory, it copies @var{oldname} into that directory, preserving its final "
"name component."
msgstr ""

# type: deffn
#: lispref/files.texi:1451
msgid ""
"If @var{time} is non-@code{nil}, then this function gives the new file the "
"same last-modified time that the old one has.  (This works on only some "
"operating systems.)  If setting the time gets an error, @code{copy-file} "
"signals a @code{file-date-error} error.  In an interactive call, a prefix "
"argument specifies a non-@code{nil} value for @var{time}."
msgstr ""

# type: deffn
#: lispref/files.texi:1453
msgid "This function copies the file modes, too."
msgstr ""

# type: deffn
#: lispref/files.texi:1460
msgid ""
"If argument @var{preserve-uid-gid} is @code{nil}, we let the operating "
"system decide the user and group ownership of the new file (this is usually "
"set to the user running Emacs).  If @var{preserve-uid-gid} is non-@code"
"{nil}, we attempt to copy the user and group ownership of the file.  This "
"works only on some operating systems, and only if you have the correct "
"permissions to do so."
msgstr ""

# type: deffn
#: lispref/files.texi:1462
#, no-wrap
msgid "Command make-symbolic-link filename newname  &optional ok-if-exists"
msgstr ""

# type: pindex
#: lispref/files.texi:1463
#, no-wrap
msgid "ln"
msgstr ""

# type: deffn
#: lispref/files.texi:1468
msgid ""
"This command makes a symbolic link to @var{filename}, named @var{newname}.  "
"This is like the shell command @samp{ln -s @var{filename} @var{newname}}."
msgstr ""

# type: deffn
#: lispref/files.texi:1471
msgid ""
"This function is not available on systems that don't support symbolic links."
msgstr ""

# type: deffn
#: lispref/files.texi:1473
#, no-wrap
msgid "Command delete-file filename"
msgstr ""

# type: pindex
#: lispref/files.texi:1474
#, no-wrap
msgid "rm"
msgstr ""

# type: deffn
#: lispref/files.texi:1478
msgid ""
"This command deletes the file @var{filename}, like the shell command @samp"
"{rm @var{filename}}.  If the file has multiple names, it continues to exist "
"under the other names."
msgstr ""

# type: deffn
#: lispref/files.texi:1482
msgid ""
"A suitable kind of @code{file-error} error is signaled if the file does not "
"exist, or is not deletable.  (On Unix and GNU/Linux, a file is deletable if "
"its directory is writable.)"
msgstr ""

# type: deffn
#: lispref/files.texi:1486
msgid ""
"If @var{filename} is a symbolic link, @code{delete-file} does not replace it "
"with its target, but it does follow symbolic links at all levels of parent "
"directories."
msgstr ""

# type: deffn
#: lispref/files.texi:1488
msgid "See also @code{delete-directory} in @ref{Create/Delete Dirs}."
msgstr ""

# type: defun
#: lispref/files.texi:1490
#, no-wrap
msgid "define-logical-name varname string"
msgstr ""

# type: defun
#: lispref/files.texi:1493
msgid ""
"This function defines the logical name @var{varname} to have the value @var"
"{string}.  It is available only on VMS."
msgstr ""

# type: defun
#: lispref/files.texi:1495
#, no-wrap
msgid "set-file-modes filename mode"
msgstr ""

# type: defun
#: lispref/files.texi:1500
msgid ""
"This function sets mode bits of @var{filename} to @var{mode} (which must be "
"an integer).  Only the low 12 bits of @var{mode} are used.  This function "
"recursively follows symbolic links at all levels for @var{filename}."
msgstr ""

# type: defun
#: lispref/files.texi:1503
#, no-wrap
msgid "set-default-file-modes mode"
msgstr ""

# type: cindex
#: lispref/files.texi:1504
#, no-wrap
msgid "umask"
msgstr ""

# type: defun
#: lispref/files.texi:1511
msgid ""
"This function sets the default file protection for new files created by "
"Emacs and its subprocesses.  Every file created with Emacs initially has "
"this protection, or a subset of it (@code{write-region} will not give a file "
"execute permission even if the default file protection allows execute "
"permission).  On Unix and GNU/Linux, the default protection is the bitwise "
"complement of the ``umask'' value."
msgstr ""

# type: defun
#: lispref/files.texi:1515
msgid ""
"The argument @var{mode} must be an integer.  On most systems, only the low 9 "
"bits of @var{mode} are meaningful.  You can use the Lisp construct for octal "
"character codes to enter @var{mode}; for example,"
msgstr ""

# type: example
#: lispref/files.texi:1518
#, no-wrap
msgid "(set-default-file-modes ?\\644)\n"
msgstr ""

# type: defun
#: lispref/files.texi:1523
msgid ""
"Saving a modified version of an existing file does not count as creating the "
"file; it preserves the existing file's mode, whatever that is.  So the "
"default file protection has no effect."
msgstr ""

# type: defun
#: lispref/files.texi:1525
#, no-wrap
msgid "default-file-modes"
msgstr ""

# type: defun
#: lispref/files.texi:1527
msgid "This function returns the current default protection value."
msgstr ""

# type: defun
#: lispref/files.texi:1529
#, no-wrap
msgid "set-file-times filename &optional time"
msgstr ""

# type: defun
#: lispref/files.texi:1535
msgid ""
"This function sets the access and modification times of @var{filename} to "
"@var{time}.  The return value is @code{t} if the times are successfully set, "
"otherwise it is @code{nil}.  @var{time} defaults to the current time and "
"must be in the format returned by @code{current-time} (@pxref{Time of Day})."
msgstr ""

# type: cindex
#: lispref/files.texi:1537
#, no-wrap
msgid "MS-DOS and file modes"
msgstr ""

# type: cindex
#: lispref/files.texi:1538
#, no-wrap
msgid "file modes and MS-DOS"
msgstr ""

# type: Plain text
#: lispref/files.texi:1547
msgid ""
"On MS-DOS, there is no such thing as an ``executable'' file mode bit.  So "
"Emacs considers a file executable if its name ends in one of the standard "
"executable extensions, such as @file{.com}, @file{.bat}, @file{.exe}, and "
"some others.  Files that begin with the Unix-standard @samp{#!} signature, "
"such as shell and Perl scripts, are also considered as executable files.  "
"This is reflected in the values returned by @code{file-modes} and @code{file-"
"attributes}.  Directories are also reported with executable bit set, for "
"compatibility with Unix."
msgstr ""

# type: cindex
#: lispref/files.texi:1550
#, no-wrap
msgid "file names"
msgstr ""

# type: Plain text
#: lispref/files.texi:1555
msgid ""
"Files are generally referred to by their names, in Emacs as elsewhere.  File "
"names in Emacs are represented as strings.  The functions that operate on a "
"file all expect a file name argument."
msgstr ""

# type: Plain text
#: lispref/files.texi:1560
msgid ""
"In addition to operating on files themselves, Emacs Lisp programs often need "
"to operate on file names; i.e., to take them apart and to use part of a name "
"to construct related file names.  This section describes how to manipulate "
"file names."
msgstr ""

# type: Plain text
#: lispref/files.texi:1564
msgid ""
"The functions in this section do not actually access files, so they can "
"operate on file names that do not refer to an existing file or directory."
msgstr ""

# type: Plain text
#: lispref/files.texi:1572
msgid ""
"On MS-DOS and MS-Windows, these functions (like the function that actually "
"operate on files) accept MS-DOS or MS-Windows file-name syntax, where "
"backslashes separate the components, as well as Unix syntax; but they always "
"return Unix syntax.  On VMS, these functions (and the ones that operate on "
"files) understand both VMS file-name syntax and Unix syntax.  This enables "
"Lisp programs to specify file names in Unix syntax and work properly on all "
"systems without change."
msgstr ""

# type: menu
#: lispref/files.texi:1583 lispref/files.texi:1585 lispref/files.texi:1586
#: lispref/vol1.texi:686 lispref/vol2.texi:687
#, no-wrap
msgid "File Name Components"
msgstr ""

# type: menu
#: lispref/files.texi:1583 lispref/vol1.texi:686 lispref/vol2.texi:687
msgid "The directory part of a file name, and the rest."
msgstr ""

# type: menu
#: lispref/files.texi:1583 lispref/files.texi:1747 lispref/vol1.texi:686
#: lispref/vol2.texi:687
#, no-wrap
msgid "Relative File Names"
msgstr ""

# type: menu
#: lispref/files.texi:1583
msgid "Some file names are relative to a current directory."
msgstr ""

# type: menu
#: lispref/files.texi:1583 lispref/files.texi:1810 lispref/files.texi:1812
#: lispref/vol1.texi:686 lispref/vol2.texi:687
#, no-wrap
msgid "Directory Names"
msgstr ""

# type: menu
#: lispref/files.texi:1583 lispref/vol1.texi:686 lispref/vol2.texi:687
msgid "A directory's name as a directory"
msgstr ""

# type: menu
#: lispref/files.texi:1583 lispref/vol1.texi:686 lispref/vol2.texi:687
msgid "is different from its name as a file."
msgstr ""

# type: menu
#: lispref/files.texi:1583 lispref/files.texi:1940 lispref/vol1.texi:686
#: lispref/vol2.texi:687
#, no-wrap
msgid "File Name Expansion"
msgstr ""

# type: menu
#: lispref/files.texi:1583 lispref/vol1.texi:686 lispref/vol2.texi:687
msgid "Converting relative file names to absolute ones."
msgstr ""

# type: menu
#: lispref/files.texi:1583 lispref/files.texi:2104 lispref/vol1.texi:686
#: lispref/vol2.texi:687
#, no-wrap
msgid "Unique File Names"
msgstr ""

# type: menu
#: lispref/files.texi:1583 lispref/vol1.texi:686 lispref/vol2.texi:687
msgid "Generating names for temporary files."
msgstr ""

# type: menu
#: lispref/files.texi:1583 lispref/files.texi:2216 lispref/files.texi:2217
#: lispref/vol1.texi:686 lispref/vol2.texi:687
#, no-wrap
msgid "File Name Completion"
msgstr ""

# type: menu
#: lispref/files.texi:1583 lispref/vol1.texi:572 lispref/vol1.texi:686
#: lispref/vol2.texi:573 lispref/vol2.texi:687
msgid "Finding the completions for a given file name."
msgstr ""

# type: subsection
#: lispref/files.texi:1583 lispref/files.texi:2316 lispref/files.texi:2317
#, no-wrap
msgid "Standard File Names"
msgstr ""

# type: menu
#: lispref/files.texi:1583
msgid "If your package uses a fixed file name,"
msgstr ""

# type: menu
#: lispref/files.texi:1583
msgid "how to handle various operating systems simply."
msgstr ""

# type: cindex
#: lispref/files.texi:1587
#, no-wrap
msgid "directory part (of file name)"
msgstr ""

# type: cindex
#: lispref/files.texi:1588
#, no-wrap
msgid "nondirectory part (of file name)"
msgstr ""

# type: cindex
#: lispref/files.texi:1589
#, no-wrap
msgid "version number (in file name)"
msgstr ""

# type: Plain text
#: lispref/files.texi:1597
msgid ""
"The operating system groups files into directories.  To specify a file, you "
"must specify the directory and the file's name within that directory.  "
"Therefore, Emacs considers a file name as having two main parts: the @dfn"
"{directory name} part, and the @dfn{nondirectory} part (or @dfn{file name "
"within the directory}).  Either part may be empty.  Concatenating these two "
"parts reproduces the original file name."
msgstr ""

# type: Plain text
#: lispref/files.texi:1602
msgid ""
"On most systems, the directory part is everything up to and including the "
"last slash (backslash is also allowed in input on MS-DOS or MS-Windows); the "
"nondirectory part is the rest.  The rules in VMS syntax are complicated."
msgstr ""

# type: Plain text
#: lispref/files.texi:1609
msgid ""
"For some purposes, the nondirectory part is further subdivided into the name "
"proper and the @dfn{version number}.  On most systems, only backup files "
"have version numbers in their names.  On VMS, every file has a version "
"number, but most of the time the file name actually used in Emacs omits the "
"version number, so that version numbers in Emacs are found mostly in "
"directory lists."
msgstr ""

# type: defun
#: lispref/files.texi:1610
#, no-wrap
msgid "file-name-directory filename"
msgstr ""

# type: defun
#: lispref/files.texi:1614
msgid ""
"This function returns the directory part of @var{filename}, as a directory "
"name (@pxref{Directory Names}), or @code{nil} if @var{filename} does not "
"include a directory part."
msgstr ""

# type: defun
#: lispref/files.texi:1619
msgid ""
"On GNU and Unix systems, a string returned by this function always ends in a "
"slash.  On MS-DOS it can also end in a colon.  On VMS, it returns a string "
"ending in one of the three characters @samp{:}, @samp{]}, or @samp{>}."
msgstr ""

# type: group
#: lispref/files.texi:1624
#, no-wrap
msgid ""
"(file-name-directory \"lewis/foo\")  ; @r{Unix example}\n"
"     @result{} \"lewis/\"\n"
msgstr ""

# type: group
#: lispref/files.texi:1628
#, no-wrap
msgid ""
"(file-name-directory \"foo\")        ; @r{Unix example}\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/files.texi:1632
#, no-wrap
msgid ""
"(file-name-directory \"[X]FOO.TMP\") ; @r{VMS example}\n"
"     @result{} \"[X]\"\n"
msgstr ""

# type: defun
#: lispref/files.texi:1636
#, no-wrap
msgid "file-name-nondirectory filename"
msgstr ""

# type: defun
#: lispref/files.texi:1638
msgid "This function returns the nondirectory part of @var{filename}."
msgstr ""

# type: group
#: lispref/files.texi:1643
#, no-wrap
msgid ""
"(file-name-nondirectory \"lewis/foo\")\n"
"     @result{} \"foo\"\n"
msgstr ""

# type: group
#: lispref/files.texi:1647
#, no-wrap
msgid ""
"(file-name-nondirectory \"foo\")\n"
"     @result{} \"foo\"\n"
msgstr ""

# type: group
#: lispref/files.texi:1651
#, no-wrap
msgid ""
"(file-name-nondirectory \"lewis/\")\n"
"     @result{} \"\"\n"
msgstr ""

# type: group
#: lispref/files.texi:1656
#, no-wrap
msgid ""
";; @r{The following example is accurate only on VMS.}\n"
"(file-name-nondirectory \"[X]FOO.TMP\")\n"
"     @result{} \"FOO.TMP\"\n"
msgstr ""

# type: defun
#: lispref/files.texi:1660
#, no-wrap
msgid "file-name-sans-versions filename &optional keep-backup-version"
msgstr ""

# type: defun
#: lispref/files.texi:1663
msgid ""
"This function returns @var{filename} with any file version numbers, backup "
"version numbers, or trailing tildes discarded."
msgstr ""

# type: defun
#: lispref/files.texi:1667
msgid ""
"If @var{keep-backup-version} is non-@code{nil}, then true file version "
"numbers understood as such by the file system are discarded from the return "
"value, but backup version numbers are kept."
msgstr ""

# type: group
#: lispref/files.texi:1672
#, no-wrap
msgid ""
"(file-name-sans-versions \"~rms/foo.~1~\")\n"
"     @result{} \"~rms/foo\"\n"
msgstr ""

# type: group
#: lispref/files.texi:1676
#, no-wrap
msgid ""
"(file-name-sans-versions \"~rms/foo~\")\n"
"     @result{} \"~rms/foo\"\n"
msgstr ""

# type: group
#: lispref/files.texi:1680
#, no-wrap
msgid ""
"(file-name-sans-versions \"~rms/foo\")\n"
"     @result{} \"~rms/foo\"\n"
msgstr ""

# type: group
#: lispref/files.texi:1685
#, no-wrap
msgid ""
";; @r{The following example applies to VMS only.}\n"
"(file-name-sans-versions \"foo;23\")\n"
"     @result{} \"foo\"\n"
msgstr ""

# type: defun
#: lispref/files.texi:1689
#, no-wrap
msgid "file-name-extension filename &optional period"
msgstr ""

# type: defun
#: lispref/files.texi:1695
msgid ""
"This function returns @var{filename}'s final ``extension,'' if any, after "
"applying @code{file-name-sans-versions} to remove any version/backup part.  "
"The extension, in a file name, is the part that starts with the last @samp"
"{.} in the last name component (minus any version/backup part)."
msgstr ""

# type: defun
#: lispref/files.texi:1702
msgid ""
"This function returns @code{nil} for extensionless file names such as @file"
"{foo}.  It returns @code{\"\"} for null extensions, as in @file{foo.}.  If "
"the last component of a file name begins with a @samp{.}, that @samp{.} "
"doesn't count as the beginning of an extension.  Thus, @file{.emacs}'s "
"``extension'' is @code{nil}, not @samp{.emacs}."
msgstr ""

# type: defun
#: lispref/files.texi:1706
msgid ""
"If @var{period} is non-@code{nil}, then the returned value includes the "
"period that delimits the extension, and if @var{filename} has no extension, "
"the value is @code{\"\"}."
msgstr ""

# type: defun
#: lispref/files.texi:1708
#, no-wrap
msgid "file-name-sans-extension filename"
msgstr ""

# type: defun
#: lispref/files.texi:1712
msgid ""
"This function returns @var{filename} minus its extension, if any.  The "
"version/backup part, if present, is only removed if the file has an "
"extension.  For example,"
msgstr ""

# type: example
#: lispref/files.texi:1726
#, no-wrap
msgid ""
"(file-name-sans-extension \"foo.lose.c\")\n"
"     @result{} \"foo.lose\"\n"
"(file-name-sans-extension \"big.hack/foo\")\n"
"     @result{} \"big.hack/foo\"\n"
"(file-name-sans-extension \"/my/home/.emacs\")\n"
"     @result{} \"/my/home/.emacs\"\n"
"(file-name-sans-extension \"/my/home/.emacs.el\")\n"
"     @result{} \"/my/home/.emacs\"\n"
"(file-name-sans-extension \"~/foo.el.~3~\")\n"
"     @result{} \"~/foo\"\n"
"(file-name-sans-extension \"~/foo.~3~\")\n"
"     @result{} \"~/foo.~3~\"\n"
msgstr ""

# type: defun
#: lispref/files.texi:1730
msgid ""
"Note that the @samp{.~3~} in the two last examples is the backup part, not "
"an extension."
msgstr ""

# type: ignore
#: lispref/files.texi:1734
#, no-wrap
msgid ""
"Andrew Innes says that this\n"
"\n"
msgstr ""

# type: ignore
#: lispref/files.texi:1740
#, no-wrap
msgid ""
"This variable holds the character that Emacs normally uses to separate\n"
"file name components.  The default value is @code{?/}, but on MS-Windows\n"
"you can set it to @code{?\\\\}; then the functions that transform file names\n"
"use backslashes in their output.\n"
"\n"
msgstr ""

# type: ignore
#: lispref/files.texi:1744
#, no-wrap
msgid ""
"File names using backslashes work as input to Lisp primitives even on\n"
"MS-DOS and MS-Windows, even if @code{directory-sep-char} has its default\n"
"value of @code{?/}.\n"
msgstr ""

# type: subsection
#: lispref/files.texi:1748
#, no-wrap
msgid "Absolute and Relative File Names"
msgstr ""

# type: cindex
#: lispref/files.texi:1749
#, no-wrap
msgid "absolute file name"
msgstr ""

# type: cindex
#: lispref/files.texi:1750
#, no-wrap
msgid "relative file name"
msgstr ""

# type: Plain text
#: lispref/files.texi:1762
msgid ""
"All the directories in the file system form a tree starting at the root "
"directory.  A file name can specify all the directory names starting from "
"the root of the tree; then it is called an @dfn{absolute} file name.  Or it "
"can specify the position of the file in the tree relative to a default "
"directory; then it is called a @dfn{relative} file name.  On Unix and GNU/"
"Linux, an absolute file name starts with a slash or a tilde (@samp{~}), and "
"a relative one does not.  On MS-DOS and MS-Windows, an absolute file name "
"starts with a slash or a backslash, or with a drive specification @samp{@var"
"{x}:/}, where @var{x} is the @dfn{drive letter}.  The rules on VMS are "
"complicated."
msgstr ""

# type: defun
#: lispref/files.texi:1763
#, no-wrap
msgid "file-name-absolute-p filename"
msgstr ""

# type: defun
#: lispref/files.texi:1767
msgid ""
"This function returns @code{t} if file @var{filename} is an absolute file "
"name, @code{nil} otherwise.  On VMS, this function understands both Unix "
"syntax and VMS syntax."
msgstr ""

# type: group
#: lispref/files.texi:1772
#, no-wrap
msgid ""
"(file-name-absolute-p \"~rms/foo\")\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/files.texi:1776
#, no-wrap
msgid ""
"(file-name-absolute-p \"rms/foo\")\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/files.texi:1780
#, no-wrap
msgid ""
"(file-name-absolute-p \"/user/rms/foo\")\n"
"     @result{} t\n"
msgstr ""

# type: Plain text
#: lispref/files.texi:1788
msgid ""
"Given a possibly relative file name, you can convert it to an absolute name "
"using @code{expand-file-name} (@pxref{File Name Expansion}).  This function "
"converts absolute file names to relative names:"
msgstr ""

# type: defun
#: lispref/files.texi:1789
#, no-wrap
msgid "file-relative-name filename &optional directory"
msgstr ""

# type: defun
#: lispref/files.texi:1795
msgid ""
"This function tries to return a relative name that is equivalent to @var"
"{filename}, assuming the result will be interpreted relative to @var"
"{directory} (an absolute directory name or directory file name).  If @var"
"{directory} is omitted or @code{nil}, it defaults to the current buffer's "
"default directory."
msgstr ""

# type: defun
#: lispref/files.texi:1801
msgid ""
"On some operating systems, an absolute file name begins with a device name.  "
"On such systems, @var{filename} has no relative equivalent based on @var"
"{directory} if they start with two different device names.  In this case, "
"@code{file-relative-name} returns @var{filename} in absolute form."
msgstr ""

# type: example
#: lispref/files.texi:1807
#, no-wrap
msgid ""
"(file-relative-name \"/foo/bar\" \"/foo/\")\n"
"     @result{} \"bar\"\n"
"(file-relative-name \"/foo/bar\" \"/hack/\")\n"
"     @result{} \"../foo/bar\"\n"
msgstr ""

# type: cindex
#: lispref/files.texi:1813
#, no-wrap
msgid "directory name"
msgstr ""

# type: cindex
#: lispref/files.texi:1814
#, no-wrap
msgid "file name of directory"
msgstr ""

# type: Plain text
#: lispref/files.texi:1824
msgid ""
"A @dfn{directory name} is the name of a directory.  A directory is actually "
"a kind of file, so it has a file name, which is related to the directory "
"name but not identical to it.  (This is not quite the same as the usual Unix "
"terminology.)  These two different names for the same entity are related by "
"a syntactic transformation.  On GNU and Unix systems, this is simple: a "
"directory name ends in a slash, whereas the directory's name as a file lacks "
"that slash.  On MS-DOS and VMS, the relationship is more complicated."
msgstr ""

# type: Plain text
#: lispref/files.texi:1830
msgid ""
"The difference between a directory name and its name as a file is subtle but "
"crucial.  When an Emacs variable or function argument is described as being "
"a directory name, a file name of a directory is not acceptable.  When @code"
"{file-name-directory} returns a string, that is always a directory name."
msgstr ""

# type: Plain text
#: lispref/files.texi:1834
msgid ""
"The following two functions convert between directory names and file names.  "
"They do nothing special with environment variable substitutions such as @samp"
"{$HOME}, and the constructs @samp{~}, @samp{.} and @samp{..}."
msgstr ""

# type: defun
#: lispref/files.texi:1835
#, no-wrap
msgid "file-name-as-directory filename"
msgstr ""

# type: defun
#: lispref/files.texi:1841
msgid ""
"This function returns a string representing @var{filename} in a form that "
"the operating system will interpret as the name of a directory.  On most "
"systems, this means appending a slash to the string (if it does not already "
"end in one).  On VMS, the function converts a string of the form @file{[X]Y."
"DIR.1} to the form @file{[X.Y]}."
msgstr ""

# type: group
#: lispref/files.texi:1846
#, no-wrap
msgid ""
"(file-name-as-directory \"~rms/lewis\")\n"
"     @result{} \"~rms/lewis/\"\n"
msgstr ""

# type: defun
#: lispref/files.texi:1850
#, no-wrap
msgid "directory-file-name dirname"
msgstr ""

# type: defun
#: lispref/files.texi:1856
msgid ""
"This function returns a string representing @var{dirname} in a form that the "
"operating system will interpret as the name of a file.  On most systems, "
"this means removing the final slash (or backslash) from the string.  On VMS, "
"the function converts a string of the form @file{[X.Y]} to @file{[X]Y.DIR.1}."
msgstr ""

# type: group
#: lispref/files.texi:1861
#, no-wrap
msgid ""
"(directory-file-name \"~lewis/\")\n"
"     @result{} \"~lewis\"\n"
msgstr ""

# type: Plain text
#: lispref/files.texi:1867
msgid ""
"Given a directory name, you can combine it with a relative file name using "
"@code{concat}:"
msgstr ""

# type: example
#: lispref/files.texi:1870
#, no-wrap
msgid "(concat @var{dirname} @var{relfile})\n"
msgstr ""

# type: Plain text
#: lispref/files.texi:1876
msgid ""
"Be sure to verify that the file name is relative before doing that.  If you "
"use an absolute file name, the results could be syntactically invalid or "
"refer to the wrong file."
msgstr ""

# type: Plain text
#: lispref/files.texi:1880
msgid ""
"If you want to use a directory file name in making such a combination, you "
"must first convert it to a directory name using @code{file-name-as-"
"directory}:"
msgstr ""

# type: example
#: lispref/files.texi:1883
#, no-wrap
msgid "(concat (file-name-as-directory @var{dirfile}) @var{relfile})\n"
msgstr ""

# type: Plain text
#: lispref/files.texi:1887
msgid "Don't try concatenating a slash by hand, as in"
msgstr ""

# type: example
#: lispref/files.texi:1891
#, no-wrap
msgid ""
";;; @r{Wrong!}\n"
"(concat @var{dirfile} \"/\" @var{relfile})\n"
msgstr ""

# type: Plain text
#: lispref/files.texi:1896
msgid ""
"because this is not portable.  Always use @code{file-name-as-directory}."
msgstr ""

# type: cindex
#: lispref/files.texi:1897
#, no-wrap
msgid "directory name abbreviation"
msgstr ""

# type: Plain text
#: lispref/files.texi:1904
msgid ""
"Directory name abbreviations are useful for directories that are normally "
"accessed through symbolic links.  Sometimes the users recognize primarily "
"the link's name as ``the name'' of the directory, and find it annoying to "
"see the directory's ``real'' name.  If you define the link name as an "
"abbreviation for the ``real'' name, Emacs shows users the abbreviation "
"instead."
msgstr ""

# type: defvar
#: lispref/files.texi:1905
#, no-wrap
msgid "directory-abbrev-alist"
msgstr ""

# type: defvar
#: lispref/files.texi:1914
msgid ""
"The variable @code{directory-abbrev-alist} contains an alist of "
"abbreviations to use for file directories.  Each element has the form @code"
"{(@var{from} . @var{to})}, and says to replace @var{from} with @var{to} when "
"it appears in a directory name.  The @var{from} string is actually a regular "
"expression; it should always start with @samp{^}.  The @var{to} string "
"should be an ordinary absolute directory name.  Do not use @samp{~} to stand "
"for a home directory in that string.  The function @code{abbreviate-file-"
"name} performs these substitutions."
msgstr ""

# type: defvar
#: lispref/files.texi:1917
msgid ""
"You can set this variable in @file{site-init.el} to describe the "
"abbreviations appropriate for your site."
msgstr ""

# type: defvar
#: lispref/files.texi:1921
msgid ""
"Here's an example, from a system on which file system @file{/home/fsf} and "
"so on are normally accessed through symbolic links named @file{/fsf} and so "
"on."
msgstr ""

# type: example
#: lispref/files.texi:1926
#, no-wrap
msgid ""
"((\"^/home/fsf\" . \"/fsf\")\n"
" (\"^/home/gp\" . \"/gp\")\n"
" (\"^/home/gd\" . \"/gd\"))\n"
msgstr ""

# type: Plain text
#: lispref/files.texi:1931
msgid "To convert a directory name to its abbreviation, use this function:"
msgstr ""

# type: defun
#: lispref/files.texi:1932
#, no-wrap
msgid "abbreviate-file-name filename"
msgstr ""

# type: anchor{#1}
#: lispref/files.texi:1938
msgid "Definition of abbreviate-file-name"
msgstr ""

# type: defun
#: lispref/files.texi:1938
msgid ""
"This function applies abbreviations from @code{directory-abbrev-alist} to "
"its argument, and substitutes @samp{~} for the user's home directory.  You "
"can use it for directory names and for file names, because it recognizes "
"abbreviations even as part of the name."
msgstr ""

# type: subsection
#: lispref/files.texi:1941
#, no-wrap
msgid "Functions that Expand Filenames"
msgstr ""

# type: cindex
#: lispref/files.texi:1942
#, no-wrap
msgid "expansion of file names"
msgstr ""

# type: Plain text
#: lispref/files.texi:1949
msgid ""
"@dfn{Expansion} of a file name means converting a relative file name to an "
"absolute one.  Since this is done relative to a default directory, you must "
"specify the default directory name as well as the file name to be expanded.  "
"Expansion also simplifies file names by eliminating redundancies such as "
"@file{./} and @file{@var{name}/../}."
msgstr ""

# type: defun
#: lispref/files.texi:1950
#, no-wrap
msgid "expand-file-name filename &optional directory"
msgstr ""

# type: defun
#: lispref/files.texi:1957
msgid ""
"This function converts @var{filename} to an absolute file name.  If @var"
"{directory} is supplied, it is the default directory to start with if @var"
"{filename} is relative.  (The value of @var{directory} should itself be an "
"absolute directory name or directory file name; it may start with @samp"
"{~}.)  Otherwise, the current buffer's value of @code{default-directory} is "
"used.  For example:"
msgstr ""

# type: group
#: lispref/files.texi:1962
#, no-wrap
msgid ""
"(expand-file-name \"foo\")\n"
"     @result{} \"/xcssun/users/rms/lewis/foo\"\n"
msgstr ""

# type: group
#: lispref/files.texi:1966
#, no-wrap
msgid ""
"(expand-file-name \"../foo\")\n"
"     @result{} \"/xcssun/users/rms/foo\"\n"
msgstr ""

# type: group
#: lispref/files.texi:1970
#, no-wrap
msgid ""
"(expand-file-name \"foo\" \"/usr/spool/\")\n"
"     @result{} \"/usr/spool/foo\"\n"
msgstr ""

# type: group
#: lispref/files.texi:1974
#, no-wrap
msgid ""
"(expand-file-name \"$HOME/foo\")\n"
"     @result{} \"/xcssun/users/rms/lewis/$HOME/foo\"\n"
msgstr ""

# type: defun
#: lispref/files.texi:1982
msgid ""
"If the part of the combined file name before the first slash is @samp{~}, it "
"expands to the value of the @env{HOME} environment variable (usually your "
"home directory).  If the part before the first slash is @samp{~@var{user}} "
"and if @var{user} is a valid login name, it expands to @var{user}'s home "
"directory."
msgstr ""

# type: defun
#: lispref/files.texi:1985
msgid ""
"Filenames containing @samp{.} or @samp{..} are simplified to their canonical "
"form:"
msgstr ""

# type: group
#: lispref/files.texi:1990
#, no-wrap
msgid ""
"(expand-file-name \"bar/../foo\")\n"
"     @result{} \"/xcssun/users/rms/lewis/foo\"\n"
msgstr ""

# type: defun
#: lispref/files.texi:1994
msgid "In some cases, a leading @samp{..} component can remain in the output:"
msgstr ""

# type: group
#: lispref/files.texi:1999
#, no-wrap
msgid ""
"(expand-file-name \"../home\" \"/\")\n"
"     @result{} \"/../home\"\n"
msgstr ""

# type: defun
#: lispref/files.texi:2006
msgid ""
"This is for the sake of filesystems that have the concept of a ``superroot'' "
"above the root directory @file{/}.  On other filesystems, @file{/../} is "
"interpreted exactly the same as @file{/}."
msgstr ""

# type: defun
#: lispref/files.texi:2009
msgid ""
"Note that @code{expand-file-name} does @emph{not} expand environment "
"variables; only @code{substitute-in-file-name} does that."
msgstr ""

# type: defun
#: lispref/files.texi:2015
msgid ""
"Note also that @code{expand-file-name} does not follow symbolic links at any "
"level.  This results in a difference between the way @code{file-truename} "
"and @code{expand-file-name} treat @samp{..}.  Assuming that @samp{/tmp/bar} "
"is a symbolic link to the directory @samp{/tmp/foo/bar} we get:"
msgstr ""

# type: group
#: lispref/files.texi:2020
#, no-wrap
msgid ""
"(file-truename \"/tmp/bar/../myfile\")\n"
"     @result{} \"/tmp/foo/myfile\"\n"
msgstr ""

# type: group
#: lispref/files.texi:2024
#, no-wrap
msgid ""
"(expand-file-name \"/tmp/bar/../myfile\")\n"
"     @result{} \"/tmp/myfile\"\n"
msgstr ""

# type: defun
#: lispref/files.texi:2030
msgid ""
"If you may need to follow symbolic links preceding @samp{..}, you should "
"make sure to call @code{file-truename} without prior direct or indirect "
"calls to @code{expand-file-name}.  @xref{Truenames}."
msgstr ""

# type: item
#: lispref/files.texi:2032 lispref/locals.texi:100
#, no-wrap
msgid "default-directory"
msgstr ""

# type: defvar
#: lispref/files.texi:2036
msgid ""
"The value of this buffer-local variable is the default directory for the "
"current buffer.  It should be an absolute directory name; it may start with "
"@samp{~}.  This variable is buffer-local in every buffer."
msgstr ""

# type: defvar
#: lispref/files.texi:2039
msgid ""
"@code{expand-file-name} uses the default directory when its second argument "
"is @code{nil}."
msgstr ""

# type: defvar
#: lispref/files.texi:2041
msgid "Aside from VMS, the value is always a string ending with a slash."
msgstr ""

# type: group
#: lispref/files.texi:2046
#, no-wrap
msgid ""
"default-directory\n"
"     @result{} \"/user/lewis/manual/\"\n"
msgstr ""

# type: defun
#: lispref/files.texi:2050
#, no-wrap
msgid "substitute-in-file-name filename"
msgstr ""

# type: anchor{#1}
#: lispref/files.texi:2058
msgid "Definition of substitute-in-file-name"
msgstr ""

# type: defun
#: lispref/files.texi:2058
msgid ""
"This function replaces environment variable references in @var{filename} "
"with the environment variable values.  Following standard Unix shell syntax, "
"@samp{$} is the prefix to substitute an environment variable value.  If the "
"input contains @samp{$$}, that is converted to @samp{$}; this gives the user "
"a way to ``quote'' a @samp{$}."
msgstr ""

# type: defun
#: lispref/files.texi:2063
msgid ""
"The environment variable name is the series of alphanumeric characters "
"(including underscores) that follow the @samp{$}.  If the character "
"following the @samp{$} is a @samp{@{}, then the variable name is everything "
"up to the matching @samp{@}}."
msgstr ""

# type: defun
#: lispref/files.texi:2072
msgid ""
"Calling @code{substitute-in-file-name} on output produced by @code"
"{substitute-in-file-name} tends to give incorrect results.  For instance, "
"use of @samp{$$} to quote a single @samp{$} won't work properly, and @samp"
"{$} in an environment variable's value could lead to repeated substitution.  "
"Therefore, programs that call this function and put the output where it will "
"be passed to this function need to double all @samp{$} characters to prevent "
"subsequent incorrect results."
msgstr ""

# type: defun
#: lispref/files.texi:2076
msgid ""
"Here we assume that the environment variable @code{HOME}, which holds the "
"user's home directory name, has value @samp{/xcssun/users/rms}."
msgstr ""

# type: group
#: lispref/files.texi:2081
#, no-wrap
msgid ""
"(substitute-in-file-name \"$HOME/foo\")\n"
"     @result{} \"/xcssun/users/rms/foo\"\n"
msgstr ""

# type: defun
#: lispref/files.texi:2087
msgid ""
"After substitution, if a @samp{~} or a @samp{/} appears immediately after "
"another @samp{/}, the function discards everything before it (up through the "
"immediately preceding @samp{/})."
msgstr ""

# type: group
#: lispref/files.texi:2092
#, no-wrap
msgid ""
"(substitute-in-file-name \"bar/~/foo\")\n"
"     @result{} \"~/foo\"\n"
msgstr ""

# type: group
#: lispref/files.texi:2097
#, no-wrap
msgid ""
"(substitute-in-file-name \"/usr/local/$HOME/foo\")\n"
"     @result{} \"/xcssun/users/rms/foo\"\n"
"     ;; @r{@file{/usr/local/} has been discarded.}\n"
msgstr ""

# type: defun
#: lispref/files.texi:2102
msgid ""
"On VMS, @samp{$} substitution is not done, so this function does nothing on "
"VMS except discard superfluous initial components as shown above."
msgstr ""

# type: subsection
#: lispref/files.texi:2105
#, no-wrap
msgid "Generating Unique File Names"
msgstr ""

# type: Plain text
#: lispref/files.texi:2109
msgid ""
"Some programs need to write temporary files.  Here is the usual way to "
"construct a name for such a file:"
msgstr ""

# type: example
#: lispref/files.texi:2112
#, no-wrap
msgid "(make-temp-file @var{name-of-application})\n"
msgstr ""

# type: Plain text
#: lispref/files.texi:2117
msgid ""
"The job of @code{make-temp-file} is to prevent two different users or two "
"different jobs from trying to use the exact same file name."
msgstr ""

# type: defun
#: lispref/files.texi:2118
#, no-wrap
msgid "make-temp-file prefix &optional dir-flag suffix"
msgstr ""

# type: defun
#: lispref/files.texi:2126
msgid ""
"This function creates a temporary file and returns its name.  Emacs creates "
"the temporary file's name by adding to @var{prefix} some random characters "
"that are different in each Emacs job.  The result is guaranteed to be a "
"newly created empty file.  On MS-DOS, this function can truncate the @var"
"{string} prefix to fit into the 8+3 file-name limits.  If @var{prefix} is a "
"relative file name, it is expanded against @code{temporary-file-directory}."
msgstr ""

# type: group
#: lispref/files.texi:2131
#, no-wrap
msgid ""
"(make-temp-file \"foo\")\n"
"     @result{} \"/tmp/foo232J6v\"\n"
msgstr ""

# type: defun
#: lispref/files.texi:2137
msgid ""
"When @code{make-temp-file} returns, the file has been created and is empty.  "
"At that point, you should write the intended contents into the file."
msgstr ""

# type: defun
#: lispref/files.texi:2141
msgid ""
"If @var{dir-flag} is non-@code{nil}, @code{make-temp-file} creates an empty "
"directory instead of an empty file.  It returns the file name, not the "
"directory name, of that directory.  @xref{Directory Names}."
msgstr ""

# type: defun
#: lispref/files.texi:2144
msgid ""
"If @var{suffix} is non-@code{nil}, @code{make-temp-file} adds it at the end "
"of the file name."
msgstr ""

# type: defun
#: lispref/files.texi:2151
msgid ""
"To prevent conflicts among different libraries running in the same Emacs, "
"each Lisp program that uses @code{make-temp-file} should have its own @var"
"{prefix}.  The number added to the end of @var{prefix} distinguishes between "
"the same application running in different Emacs jobs.  Additional added "
"characters permit a large number of distinct names even in one Emacs job."
msgstr ""

# type: Plain text
#: lispref/files.texi:2159
msgid ""
"The default directory for temporary files is controlled by the variable @code"
"{temporary-file-directory}.  This variable gives the user a uniform way to "
"specify the directory for all temporary files.  Some programs use @code"
"{small-temporary-file-directory} instead, if that is non-@code{nil}.  To use "
"it, you should expand the prefix against the proper directory before calling "
"@code{make-temp-file}."
msgstr ""

# type: Plain text
#: lispref/files.texi:2162
msgid ""
"In older Emacs versions where @code{make-temp-file} does not exist, you "
"should use @code{make-temp-name} instead:"
msgstr ""

# type: example
#: lispref/files.texi:2167
#, no-wrap
msgid ""
"(make-temp-name\n"
" (expand-file-name @var{name-of-application}\n"
"                   temporary-file-directory))\n"
msgstr ""

# type: defun
#: lispref/files.texi:2169
#, no-wrap
msgid "make-temp-name string"
msgstr ""

# type: defun
#: lispref/files.texi:2177
msgid ""
"This function generates a string that can be used as a unique file name.  "
"The name starts with @var{string}, and has several random characters "
"appended to it, which are different in each Emacs job.  It is like @code"
"{make-temp-file} except that it just constructs a name, and does not create "
"a file.  Another difference is that @var{string} should be an absolute file "
"name.  On MS-DOS, this function can truncate the @var{string} prefix to fit "
"into the 8+3 file-name limits."
msgstr ""

# type: defvar
#: lispref/files.texi:2179
#, no-wrap
msgid "temporary-file-directory"
msgstr ""

# type: cindex
#: lispref/files.texi:2180
#, no-wrap
msgid "@code{TMPDIR} environment variable"
msgstr ""

# type: cindex
#: lispref/files.texi:2181
#, no-wrap
msgid "@code{TMP} environment variable"
msgstr ""

# type: cindex
#: lispref/files.texi:2182
#, no-wrap
msgid "@code{TEMP} environment variable"
msgstr ""

# type: defvar
#: lispref/files.texi:2188
msgid ""
"This variable specifies the directory name for creating temporary files.  "
"Its value should be a directory name (@pxref{Directory Names}), but it is "
"good for Lisp programs to cope if the value is a directory's file name "
"instead.  Using the value as the second argument to @code{expand-file-name} "
"is a good way to achieve that."
msgstr ""

# type: defvar
#: lispref/files.texi:2193
msgid ""
"The default value is determined in a reasonable way for your operating "
"system; it is based on the @code{TMPDIR}, @code{TMP} and @code{TEMP} "
"environment variables, with a fall-back to a system-dependent name if none "
"of these variables is defined."
msgstr ""

# type: defvar
#: lispref/files.texi:2199
msgid ""
"Even if you do not use @code{make-temp-file} to create the temporary file, "
"you should still use this variable to decide which directory to put the file "
"in.  However, if you expect the file to be small, you should use @code{small-"
"temporary-file-directory} first if that is non-@code{nil}."
msgstr ""

# type: defvar
#: lispref/files.texi:2201
#, no-wrap
msgid "small-temporary-file-directory"
msgstr ""

# type: defvar
#: lispref/files.texi:2204
msgid ""
"This variable specifies the directory name for creating certain temporary "
"files, which are likely to be small."
msgstr ""

# type: defvar
#: lispref/files.texi:2207
msgid ""
"If you want to write a temporary file which is likely to be small, you "
"should compute the directory like this:"
msgstr ""

# type: example
#: lispref/files.texi:2213
#, no-wrap
msgid ""
"(make-temp-file\n"
"  (expand-file-name @var{prefix}\n"
"                    (or small-temporary-file-directory\n"
"                        temporary-file-directory)))\n"
msgstr ""

# type: cindex
#: lispref/files.texi:2218
#, no-wrap
msgid "file name completion subroutines"
msgstr ""

# type: cindex
#: lispref/files.texi:2219
#, no-wrap
msgid "completion, file name"
msgstr ""

# type: Plain text
#: lispref/files.texi:2223
msgid ""
"This section describes low-level subroutines for completing a file name.  "
"For higher level functions, see @ref{Reading File Names}."
msgstr ""

# type: defun
#: lispref/files.texi:2224
#, no-wrap
msgid "file-name-all-completions partial-filename directory"
msgstr ""

# type: defun
#: lispref/files.texi:2230
msgid ""
"This function returns a list of all possible completions for a file whose "
"name starts with @var{partial-filename} in directory @var{directory}.  The "
"order of the completions is the order of the files in the directory, which "
"is unpredictable and conveys no useful information."
msgstr ""

# type: defun
#: lispref/files.texi:2235
msgid ""
"The argument @var{partial-filename} must be a file name containing no "
"directory part and no slash (or backslash on some systems).  The current "
"buffer's default directory is prepended to @var{directory}, if @var"
"{directory} is not absolute."
msgstr ""

# type: defun
#: lispref/files.texi:2240
msgid ""
"In the following example, suppose that @file{~rms/lewis} is the current "
"default directory, and has five files whose names begin with @samp{f}: @file"
"{foo}, @file{file~}, @file{file.c}, @file{file.c.~1~}, and @file{file.c.~2~}."
msgstr ""

# type: group
#: lispref/files.texi:2246
#, no-wrap
msgid ""
"(file-name-all-completions \"f\" \"\")\n"
"     @result{} (\"foo\" \"file~\" \"file.c.~2~\"\n"
"                \"file.c.~1~\" \"file.c\")\n"
msgstr ""

# type: group
#: lispref/files.texi:2251
#, no-wrap
msgid ""
"(file-name-all-completions \"fo\" \"\")\n"
"     @result{} (\"foo\")\n"
msgstr ""

# type: defun
#: lispref/files.texi:2255
#, no-wrap
msgid "file-name-completion filename directory &optional predicate"
msgstr ""

# type: defun
#: lispref/files.texi:2262
msgid ""
"This function completes the file name @var{filename} in directory @var"
"{directory}.  It returns the longest prefix common to all file names in "
"directory @var{directory} that start with @var{filename}.  If @var"
"{predicate} is non-@code{nil} then it ignores possible completions that "
"don't satisfy @var{predicate}, after calling that function with one "
"argument, the expanded absolute file name."
msgstr ""

# type: defun
#: lispref/files.texi:2266
msgid ""
"If only one match exists and @var{filename} matches it exactly, the function "
"returns @code{t}.  The function returns @code{nil} if directory @var"
"{directory} contains no name starting with @var{filename}."
msgstr ""

# type: defun
#: lispref/files.texi:2271
msgid ""
"In the following example, suppose that the current default directory has "
"five files whose names begin with @samp{f}: @file{foo}, @file{file~}, @file"
"{file.c}, @file{file.c.~1~}, and @file{file.c.~2~}."
msgstr ""

# type: group
#: lispref/files.texi:2276
#, no-wrap
msgid ""
"(file-name-completion \"fi\" \"\")\n"
"     @result{} \"file\"\n"
msgstr ""

# type: group
#: lispref/files.texi:2281
#, no-wrap
msgid ""
"(file-name-completion \"file.c.~1\" \"\")\n"
"     @result{} \"file.c.~1~\"\n"
msgstr ""

# type: group
#: lispref/files.texi:2286
#, no-wrap
msgid ""
"(file-name-completion \"file.c.~1~\" \"\")\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/files.texi:2291
#, no-wrap
msgid ""
"(file-name-completion \"file.c.~3\" \"\")\n"
"     @result{} nil\n"
msgstr ""

# type: defopt
#: lispref/files.texi:2295
#, no-wrap
msgid "completion-ignored-extensions"
msgstr "completion-ignored-extensions"

# type: defopt
#: lispref/files.texi:2300
msgid ""
"@code{file-name-completion} usually ignores file names that end in any "
"string in this list.  It does not ignore them when all the possible "
"completions end in one of these suffixes.  This variable has no effect on "
"@code{file-name-all-completions}."
msgstr ""

# type: defopt
#: lispref/files.texi:2302
msgid "A typical value might look like this:"
msgstr ""

# type: group
#: lispref/files.texi:2307
#, no-wrap
msgid ""
"completion-ignored-extensions\n"
"     @result{} (\".o\" \".elc\" \"~\" \".dvi\")\n"
msgstr ""

# type: defopt
#: lispref/files.texi:2314
msgid ""
"If an element of @code{completion-ignored-extensions} ends in a slash @samp"
"{/}, it signals a directory.  The elements which do @emph{not} end in a "
"slash will never match a directory; thus, the above value will not filter "
"out a directory named @file{foo.elc}."
msgstr ""

# type: Plain text
#: lispref/files.texi:2327
msgid ""
"Most of the file names used in Lisp programs are entered by the user.  But "
"occasionally a Lisp program needs to specify a standard file name for a "
"particular use---typically, to hold customization information about each "
"user.  For example, abbrev definitions are stored (by default) in the file "
"@file{~/.abbrev_defs}; the @code{completion} package stores completions in "
"the file @file{~/.completions}.  These are two of the many standard file "
"names used by parts of Emacs for certain purposes."
msgstr ""

# type: Plain text
#: lispref/files.texi:2333
msgid ""
"Various operating systems have their own conventions for valid file names "
"and for which file names to use for user profile data.  A Lisp program which "
"reads a file using a standard file name ought to use, on each type of "
"system, a file name suitable for that system.  The function @code{convert-"
"standard-filename} makes this easy to do."
msgstr ""

# type: defun
#: lispref/files.texi:2334
#, no-wrap
msgid "convert-standard-filename filename"
msgstr "convert-standard-filename fichier"

# type: defun
#: lispref/files.texi:2337
msgid ""
"This function alters the file name @var{filename} to fit the conventions of "
"the operating system in use, and returns the result as a new string."
msgstr ""

# type: Plain text
#: lispref/files.texi:2344
msgid ""
"The recommended way to specify a standard file name in a Lisp program is to "
"choose a name which fits the conventions of GNU and Unix systems, usually "
"with a nondirectory part that starts with a period, and pass it to @code"
"{convert-standard-filename} instead of using it directly.  Here is an "
"example from the @code{completion} package:"
msgstr ""

# type: example
#: lispref/files.texi:2349
#, no-wrap
msgid ""
"(defvar save-completions-file-name\n"
"        (convert-standard-filename \"~/.completions\")\n"
"  \"*The file name to save completions to.\")\n"
msgstr ""

# type: Plain text
#: lispref/files.texi:2354
msgid ""
"On GNU and Unix systems, and on some other systems as well, @code{convert-"
"standard-filename} returns its argument unchanged.  On some other systems, "
"it alters the name to fit the system's conventions."
msgstr ""

# type: Plain text
#: lispref/files.texi:2362
msgid ""
"For example, on MS-DOS the alterations made by this function include "
"converting a leading @samp{.} to @samp{_}, converting a @samp{_} in the "
"middle of the name to @samp{.} if there is no other @samp{.}, inserting a "
"@samp{.} after eight characters if there is none, and truncating to three "
"characters after the @samp{.}.  (It makes other changes as well.)  Thus, "
"@file{.abbrev_defs} becomes @file{_abbrev.def}, and @file{.completions} "
"becomes @file{_complet.ion}."
msgstr ""

# type: cindex
#: lispref/files.texi:2365
#, no-wrap
msgid "directory-oriented functions"
msgstr "directory-oriented fonctions"

# type: cindex
#: lispref/files.texi:2366
#, no-wrap
msgid "file names in directory"
msgstr ""

# type: Plain text
#: lispref/files.texi:2370
msgid ""
"A directory is a kind of file that contains other files entered under "
"various names.  Directories are a feature of the file system."
msgstr ""

# type: Plain text
#: lispref/files.texi:2375
msgid ""
"Emacs can list the names of the files in a directory as a Lisp list, or "
"display the names in a buffer using the @code{ls} shell command.  In the "
"latter case, it can optionally display information about each file, "
"depending on the options passed to the @code{ls} command."
msgstr ""

# type: defun
#: lispref/files.texi:2376
#, no-wrap
msgid "directory-files directory &optional full-name match-regexp nosort"
msgstr ""

# type: defun
#: lispref/files.texi:2379
msgid ""
"This function returns a list of the names of the files in the directory @var"
"{directory}.  By default, the list is in alphabetical order."
msgstr ""

# type: defun
#: lispref/files.texi:2383
msgid ""
"If @var{full-name} is non-@code{nil}, the function returns the files' "
"absolute file names.  Otherwise, it returns the names relative to the "
"specified directory."
msgstr ""

# type: defun
#: lispref/files.texi:2388
msgid ""
"If @var{match-regexp} is non-@code{nil}, this function returns only those "
"file names that contain a match for that regular expression---the other file "
"names are excluded from the list.  On case-insensitive filesystems, the "
"regular expression matching is case-insensitive."
msgstr ""

# type: defun
#: lispref/files.texi:2395
msgid ""
"If @var{nosort} is non-@code{nil}, @code{directory-files} does not sort the "
"list, so you get the file names in no particular order.  Use this if you "
"want the utmost possible speed and don't care what order the files are "
"processed in.  If the order of processing is visible to the user, then the "
"user will probably be happier if you do sort the names."
msgstr ""

# type: group
#: lispref/files.texi:2402
#, no-wrap
msgid ""
"(directory-files \"~lewis\")\n"
"     @result{} (\"#foo#\" \"#foo.el#\" \".\" \"..\"\n"
"         \"dired-mods.el\" \"files.texi\"\n"
"         \"files.texi.~1~\")\n"
msgstr ""

# type: defun
#: lispref/files.texi:2407
msgid ""
"An error is signaled if @var{directory} is not the name of a directory that "
"can be read."
msgstr ""

# type: defun
#: lispref/files.texi:2409
#, no-wrap
msgid "directory-files-and-attributes directory &optional full-name match-regexp nosort id-format"
msgstr ""

# type: defun
#: lispref/files.texi:2418
msgid ""
"This is similar to @code{directory-files} in deciding which files to report "
"on and how to report their names.  However, instead of returning a list of "
"file names, it returns for each file a list @code{(@var{filename} . @var"
"{attributes})}, where @var{attributes} is what @code{file-attributes} would "
"return for that file.  The optional argument @var{id-format} has the same "
"meaning as the corresponding argument to @code{file-attributes} (@pxref"
"{Definition of file-attributes})."
msgstr ""

# type: defun
#: lispref/files.texi:2420
#, no-wrap
msgid "file-name-all-versions file dirname"
msgstr ""

# type: defun
#: lispref/files.texi:2423
msgid ""
"This function returns a list of all versions of the file named @var{file} in "
"directory @var{dirname}.  It is only available on VMS."
msgstr ""

# type: defun
#: lispref/files.texi:2425
#, no-wrap
msgid "file-expand-wildcards pattern &optional full"
msgstr ""

# type: defun
#: lispref/files.texi:2428
msgid ""
"This function expands the wildcard pattern @var{pattern}, returning a list "
"of file names that match it."
msgstr ""

# type: defun
#: lispref/files.texi:2431
msgid ""
"If @var{pattern} is written as an absolute file name, the values are "
"absolute also."
msgstr ""

# type: defun
#: lispref/files.texi:2436
msgid ""
"If @var{pattern} is written as a relative file name, it is interpreted "
"relative to the current default directory.  The file names returned are "
"normally also relative to the current default directory.  However, if @var"
"{full} is non-@code{nil}, they are absolute."
msgstr ""

# type: defun
#: lispref/files.texi:2438
#, no-wrap
msgid "insert-directory file switches &optional wildcard full-directory-p"
msgstr ""

# type: defun
#: lispref/files.texi:2444
msgid ""
"This function inserts (in the current buffer) a directory listing for "
"directory @var{file}, formatted with @code{ls} according to @var{switches}.  "
"It leaves point after the inserted text.  @var{switches} may be a string of "
"options, or a list of strings representing individual options."
msgstr ""

# type: defun
#: lispref/files.texi:2449
msgid ""
"The argument @var{file} may be either a directory name or a file "
"specification including wildcard characters.  If @var{wildcard} is non-@code"
"{nil}, that means treat @var{file} as a file specification with wildcards."
msgstr ""

# type: defun
#: lispref/files.texi:2456
msgid ""
"If @var{full-directory-p} is non-@code{nil}, that means the directory "
"listing is expected to show the full contents of a directory.  You should "
"specify @code{t} when @var{file} is a directory and switches do not contain "
"@samp{-d}.  (The @samp{-d} option to @code{ls} says to describe a directory "
"itself as a file, rather than showing its contents.)"
msgstr ""

# type: defun
#: lispref/files.texi:2461
msgid ""
"On most systems, this function works by running a directory listing program "
"whose name is in the variable @code{insert-directory-program}.  If @var"
"{wildcard} is non-@code{nil}, it also runs the shell specified by @code"
"{shell-file-name}, to expand the wildcards."
msgstr ""

# type: defun
#: lispref/files.texi:2465
msgid ""
"MS-DOS and MS-Windows systems usually lack the standard Unix program @code"
"{ls}, so this function emulates the standard Unix program @code{ls} with "
"Lisp code."
msgstr ""

# type: defun
#: lispref/files.texi:2471
msgid ""
"As a technical detail, when @var{switches} contains the long @samp{--dired} "
"option, @code{insert-directory} treats it specially, for the sake of dired.  "
"However, the normally equivalent short @samp{-D} option is just passed on to "
"@code{insert-directory-program}, as any other option."
msgstr ""

# type: defvar
#: lispref/files.texi:2473
#, no-wrap
msgid "insert-directory-program"
msgstr ""

# type: defvar
#: lispref/files.texi:2477
msgid ""
"This variable's value is the program to run to generate a directory listing "
"for the function @code{insert-directory}.  It is ignored on systems which "
"generate the listing with Lisp code."
msgstr ""

# type: section
#: lispref/files.texi:2480
#, no-wrap
msgid "Creating and Deleting Directories"
msgstr ""

# type: cindex
#: lispref/files.texi:2481
#, no-wrap
msgid "creating and deleting directories"
msgstr ""

# type: Plain text
#: lispref/files.texi:2488
msgid ""
"Most Emacs Lisp file-manipulation functions get errors when used on files "
"that are directories.  For example, you cannot delete a directory with @code"
"{delete-file}.  These special functions exist to create and delete "
"directories."
msgstr ""

# type: defun
#: lispref/files.texi:2489
#, no-wrap
msgid "make-directory dirname &optional parents"
msgstr ""

# type: defun
#: lispref/files.texi:2494
msgid ""
"This function creates a directory named @var{dirname}.  If @var{parents} is "
"non-@code{nil}, as is always the case in an interactive call, that means to "
"create the parent directories first, if they don't already exist."
msgstr ""

# type: defun
#: lispref/files.texi:2496
#, no-wrap
msgid "delete-directory dirname"
msgstr ""

# type: defun
#: lispref/files.texi:2501
msgid ""
"This function deletes the directory named @var{dirname}.  The function @code"
"{delete-file} does not work for files that are directories; you must use "
"@code{delete-directory} for them.  If the directory contains any files, @code"
"{delete-directory} signals an error."
msgstr ""

# type: defun
#: lispref/files.texi:2504
msgid ""
"This function only follows symbolic links at the level of parent directories."
msgstr ""

# type: section
#: lispref/files.texi:2507
#, no-wrap
msgid "Making Certain File Names ``Magic''"
msgstr ""

# type: cindex
#: lispref/files.texi:2508
#, no-wrap
msgid "magic file names"
msgstr ""

# type: Plain text
#: lispref/files.texi:2515
msgid ""
"You can implement special handling for certain file names.  This is called "
"making those names @dfn{magic}.  The principal use for this feature is in "
"implementing remote file names (@pxref{Remote Files,, Remote Files, emacs, "
"The GNU Emacs Manual})."
msgstr ""

# type: Plain text
#: lispref/files.texi:2520
msgid ""
"To define a kind of magic file name, you must supply a regular expression to "
"define the class of names (all those that match the regular expression), "
"plus a handler that implements all the primitive Emacs file operations for "
"file names that do match."
msgstr ""

# type: Plain text
#: lispref/files.texi:2524
msgid ""
"The variable @code{file-name-handler-alist} holds a list of handlers, "
"together with regular expressions that determine when to apply each "
"handler.  Each element has this form:"
msgstr ""

# type: example
#: lispref/files.texi:2527
#, no-wrap
msgid "(@var{regexp} . @var{handler})\n"
msgstr ""

# type: Plain text
#: lispref/files.texi:2534
msgid ""
"All the Emacs primitives for file access and file name transformation check "
"the given file name against @code{file-name-handler-alist}.  If the file "
"name matches @var{regexp}, the primitives handle that file by calling @var"
"{handler}."
msgstr ""

# type: Plain text
#: lispref/files.texi:2539
msgid ""
"The first argument given to @var{handler} is the name of the primitive, as a "
"symbol; the remaining arguments are the arguments that were passed to that "
"primitive.  (The first of these arguments is most often the file name "
"itself.)  For example, if you do this:"
msgstr ""

# type: example
#: lispref/files.texi:2542
#, no-wrap
msgid "(file-exists-p @var{filename})\n"
msgstr ""

# type: Plain text
#: lispref/files.texi:2547
msgid ""
"and @var{filename} has handler @var{handler}, then @var{handler} is called "
"like this:"
msgstr ""

# type: example
#: lispref/files.texi:2550
#, no-wrap
msgid "(funcall @var{handler} 'file-exists-p @var{filename})\n"
msgstr ""

# type: Plain text
#: lispref/files.texi:2555
msgid ""
"When a function takes two or more arguments that must be file names, it "
"checks each of those names for a handler.  For example, if you do this:"
msgstr ""

# type: example
#: lispref/files.texi:2558
#, no-wrap
msgid "(expand-file-name @var{filename} @var{dirname})\n"
msgstr ""

# type: Plain text
#: lispref/files.texi:2564
msgid ""
"then it checks for a handler for @var{filename} and then for a handler for "
"@var{dirname}.  In either case, the @var{handler} is called like this:"
msgstr ""

# type: example
#: lispref/files.texi:2567
#, no-wrap
msgid "(funcall @var{handler} 'expand-file-name @var{filename} @var{dirname})\n"
msgstr ""

# type: Plain text
#: lispref/files.texi:2572
msgid ""
"The @var{handler} then needs to figure out whether to handle @var{filename} "
"or @var{dirname}."
msgstr ""

# type: Plain text
#: lispref/files.texi:2577
msgid ""
"If the specified file name matches more than one handler, the one whose "
"match starts last in the file name gets precedence.  This rule is chosen so "
"that handlers for jobs such as uncompression are handled first, before "
"handlers for jobs such as remote file access."
msgstr ""

# type: Plain text
#: lispref/files.texi:2579
msgid "Here are the operations that a magic file name handler gets to handle:"
msgstr ""

# type: ifnottex
#: lispref/files.texi:2624
msgid ""
"@code{access-file}, @code{add-name-to-file}, @code{byte-compiler-base-file-"
"name},@* @code{copy-file}, @code{delete-directory}, @code{delete-file}, @code"
"{diff-latest-backup-file}, @code{directory-file-name}, @code{directory-"
"files}, @code{directory-files-and-attributes}, @code{dired-call-process}, "
"@code{dired-compress-file}, @code{dired-uncache},@* @code{expand-file-name}, "
"@code{file-accessible-directory-p}, @code{file-attributes}, @code{file-"
"directory-p}, @code{file-executable-p}, @code{file-exists-p}, @code{file-"
"local-copy}, @code{file-remote-p}, @code{file-modes}, @code{file-name-all-"
"completions}, @code{file-name-as-directory}, @code{file-name-completion}, "
"@code{file-name-directory}, @code{file-name-nondirectory}, @code{file-name-"
"sans-versions}, @code{file-newer-than-file-p}, @code{file-ownership-"
"preserved-p}, @code{file-readable-p}, @code{file-regular-p}, @code{file-"
"symlink-p}, @code{file-truename}, @code{file-writable-p}, @code{find-backup-"
"file-name}, @code{find-file-noselect},@* @code{get-file-buffer}, @code"
"{insert-directory}, @code{insert-file-contents},@* @code{load}, @code{make-"
"auto-save-file-name}, @code{make-directory}, @code{make-directory-internal}, "
"@code{make-symbolic-link},@* @code{rename-file}, @code{set-file-modes}, @code"
"{set-file-times}, @code{set-visited-file-modtime}, @code{shell-command}, "
"@code{substitute-in-file-name},@* @code{unhandled-file-name-directory}, @code"
"{vc-registered}, @code{verify-visited-file-modtime},@* @code{write-region}."
msgstr ""

# type: flushleft
#: lispref/files.texi:2668
#, no-wrap
msgid ""
"@code{access-file}, @code{add-name-to-file},\n"
"@code{byte-com@discretionary{}{}{}piler-base-file-name},\n"
"@code{copy-file}, @code{delete-directory},\n"
"@code{delete-file},\n"
"@code{diff-latest-backup-file},\n"
"@code{directory-file-name},\n"
"@code{directory-files},\n"
"@code{directory-files-and-at@discretionary{}{}{}tributes},\n"
"@code{dired-call-process},\n"
"@code{dired-compress-file}, @code{dired-uncache},\n"
"@code{expand-file-name},\n"
"@code{file-accessible-direc@discretionary{}{}{}tory-p},\n"
"@code{file-attributes},\n"
"@code{file-direct@discretionary{}{}{}ory-p},\n"
"@code{file-executable-p}, @code{file-exists-p},\n"
"@code{file-local-copy}, @code{file-remote-p},\n"
"@code{file-modes}, @code{file-name-all-completions},\n"
"@code{file-name-as-directory},\n"
"@code{file-name-completion},\n"
"@code{file-name-directory},\n"
"@code{file-name-nondirec@discretionary{}{}{}tory},\n"
"@code{file-name-sans-versions}, @code{file-newer-than-file-p},\n"
"@code{file-ownership-pre@discretionary{}{}{}served-p},\n"
"@code{file-readable-p}, @code{file-regular-p}, @code{file-symlink-p},\n"
"@code{file-truename}, @code{file-writable-p},\n"
"@code{find-backup-file-name},\n"
"@code{find-file-noselect},\n"
"@code{get-file-buffer},\n"
"@code{insert-directory},\n"
"@code{insert-file-contents},\n"
"@code{load}, @code{make-direc@discretionary{}{}{}tory},\n"
"@code{make-direc@discretionary{}{}{}tory-internal},\n"
"@code{make-symbolic-link},\n"
"@code{rename-file}, @code{set-file-modes},\n"
"@code{set-visited-file-modtime}, @code{shell-command},\n"
"@code{substitute-in-file-name},\n"
"@code{unhandled-file-name-directory},\n"
"@code{vc-regis@discretionary{}{}{}tered},\n"
"@code{verify-visited-file-modtime},\n"
"@code{write-region}.\n"
msgstr ""

# type: Plain text
#: lispref/files.texi:2675
msgid ""
"Handlers for @code{insert-file-contents} typically need to clear the "
"buffer's modified flag, with @code{(set-buffer-modified-p nil)}, if the @var"
"{visit} argument is non-@code{nil}.  This also has the effect of unlocking "
"the buffer if it is locked."
msgstr ""

# type: Plain text
#: lispref/files.texi:2682
msgid ""
"The handler function must handle all of the above operations, and possibly "
"others to be added in the future.  It need not implement all these "
"operations itself---when it has nothing special to do for a certain "
"operation, it can reinvoke the primitive, to handle the operation ``in the "
"usual way.'' It should always reinvoke the primitive for an operation it "
"does not recognize.  Here's one way to do this:"
msgstr ""

# type: smallexample
#: lispref/files.texi:2697
#, no-wrap
msgid ""
"(defun my-file-handler (operation &rest args)\n"
"  ;; @r{First check for the specific operations}\n"
"  ;; @r{that we have special handling for.}\n"
"  (cond ((eq operation 'insert-file-contents) @dots{})\n"
"        ((eq operation 'write-region) @dots{})\n"
"        @dots{}\n"
"        ;; @r{Handle any operation we don't know about.}\n"
"        (t (let ((inhibit-file-name-handlers\n"
"                  (cons 'my-file-handler\n"
"                        (and (eq inhibit-file-name-operation operation)\n"
"                             inhibit-file-name-handlers)))\n"
"                 (inhibit-file-name-operation operation))\n"
"             (apply operation args)))))\n"
msgstr ""

# type: Plain text
#: lispref/files.texi:2708
msgid ""
"When a handler function decides to call the ordinary Emacs primitive for the "
"operation at hand, it needs to prevent the primitive from calling the same "
"handler once again, thus leading to an infinite recursion.  The example "
"above shows how to do this, with the variables @code{inhibit-file-name-"
"handlers} and @code{inhibit-file-name-operation}.  Be careful to use them "
"exactly as shown above; the details are crucial for proper behavior in the "
"case of multiple handlers, and for operations that have two file names that "
"may each have handlers."
msgstr ""

# type: kindex
#: lispref/files.texi:2709
#, no-wrap
msgid "safe-magic (@r{property})"
msgstr ""

# type: Plain text
#: lispref/files.texi:2718
msgid ""
"Handlers that don't really do anything special for actual access to the "
"file---such as the ones that implement completion of host names for remote "
"file names---should have a non-@code{nil} @code{safe-magic} property.  For "
"instance, Emacs normally ``protects'' directory names it finds in @code"
"{PATH} from becoming magic, if they look like magic file names, by prefixing "
"them with @samp{/:}.  But if the handler that would be used for them has a "
"non-@code{nil} @code{safe-magic} property, the @samp{/:} is not added."
msgstr ""

# type: kindex
#: lispref/files.texi:2719
#, no-wrap
msgid "operations (@r{property})"
msgstr ""

# type: Plain text
#: lispref/files.texi:2727
msgid ""
"A file name handler can have an @code{operations} property to declare which "
"operations it handles in a nontrivial way.  If this property has a non-@code"
"{nil} value, it should be a list of operations; then only those operations "
"will call the handler.  This avoids inefficiency, but its main purpose is "
"for autoloaded handler functions, so that they won't be loaded except when "
"they have real work to do."
msgstr ""

# type: Plain text
#: lispref/files.texi:2735
msgid ""
"Simply deferring all operations to the usual primitives does not work.  For "
"instance, if the file name handler applies to @code{file-exists-p}, then it "
"must handle @code{load} itself, because the usual @code{load} code won't "
"work properly in that case.  However, if the handler uses the @code"
"{operations} property to say it doesn't handle @code{file-exists-p}, then it "
"need not handle @code{load} nontrivially."
msgstr ""

# type: defvar
#: lispref/files.texi:2736
#, no-wrap
msgid "inhibit-file-name-handlers"
msgstr ""

# type: defvar
#: lispref/files.texi:2739
msgid ""
"This variable holds a list of handlers whose use is presently inhibited for "
"a certain operation."
msgstr ""

# type: defvar
#: lispref/files.texi:2741
#, no-wrap
msgid "inhibit-file-name-operation"
msgstr ""

# type: defvar
#: lispref/files.texi:2743
msgid "The operation for which certain handlers are presently inhibited."
msgstr ""

# type: defun
#: lispref/files.texi:2745
#, no-wrap
msgid "find-file-name-handler file operation"
msgstr ""

# type: defun
#: lispref/files.texi:2753
msgid ""
"This function returns the handler function for file name @var{file}, or @code"
"{nil} if there is none.  The argument @var{operation} should be the "
"operation to be performed on the file---the value you will pass to the "
"handler as its first argument when you call it.  If @var{operation} equals "
"@code{inhibit-file-name-operation}, or if it is not found in the @code"
"{operations} property of the handler, this function returns @code{nil}."
msgstr ""

# type: defun
#: lispref/files.texi:2755
#, no-wrap
msgid "file-local-copy filename"
msgstr ""

# type: defun
#: lispref/files.texi:2763
msgid ""
"This function copies file @var{filename} to an ordinary non-magic file on "
"the local machine, if it isn't on the local machine already.  Magic file "
"names should handle the @code{file-local-copy} operation if they refer to "
"files on other machines.  A magic file name that is used for other purposes "
"than remote file access should not handle @code{file-local-copy}; then this "
"function will treat the file as local."
msgstr ""

# type: defun
#: lispref/files.texi:2767
msgid ""
"If @var{filename} is local, whether magic or not, this function does nothing "
"and returns @code{nil}.  Otherwise it returns the file name of the local "
"copy file."
msgstr ""

# type: defun
#: lispref/files.texi:2769
#, no-wrap
msgid "file-remote-p filename"
msgstr ""

# type: defun
#: lispref/files.texi:2774
msgid ""
"This function tests whether @var{filename} is a remote file.  If @var"
"{filename} is local (not remote), the return value is @code{nil}.  If @var"
"{filename} is indeed remote, the return value is a string that identifies "
"the remote system."
msgstr ""

# type: defun
#: lispref/files.texi:2779
msgid ""
"This identifier string can include a host name and a user name, as well as "
"characters designating the method used to access the remote system.  For "
"example, the remote identifier string for the filename @code{/ssh:"
"user@@host:/some/file} is @code{/ssh:user@@host:}."
msgstr ""

# type: defun
#: lispref/files.texi:2786
msgid ""
"If @code{file-remote-p} returns the same identifier for two different "
"filenames, that means they are stored on the same file system and can be "
"accessed locally with respect to each other.  This means, for example, that "
"it is possible to start a remote process accessing both files at the same "
"time.  Implementors of file handlers need to ensure this principle is valid."
msgstr ""

# type: defun
#: lispref/files.texi:2788
#, no-wrap
msgid "unhandled-file-name-directory filename"
msgstr ""

# type: defun
#: lispref/files.texi:2793
msgid ""
"This function returns the name of a directory that is not magic.  It uses "
"the directory part of @var{filename} if that is not magic.  For a magic file "
"name, it invokes the file name handler, which therefore decides what value "
"to return."
msgstr ""

# type: defun
#: lispref/files.texi:2797
msgid ""
"This is useful for running a subprocess; every subprocess must have a non-"
"magic directory to serve as its current directory, and this function is a "
"good way to come up with one."
msgstr ""

# type: section
#: lispref/files.texi:2800
#, no-wrap
msgid "File Format Conversion"
msgstr ""

# type: cindex
#: lispref/files.texi:2802
#, no-wrap
msgid "file format conversion"
msgstr ""

# type: cindex
#: lispref/files.texi:2803
#, no-wrap
msgid "encoding file formats"
msgstr ""

# type: cindex
#: lispref/files.texi:2804
#, no-wrap
msgid "decoding file formats"
msgstr ""

# type: Plain text
#: lispref/files.texi:2810
msgid ""
"The variable @code{format-alist} defines a list of @dfn{file formats}, which "
"describe textual representations used in files for the data (text, text-"
"properties, and possibly other information) in an Emacs buffer.  Emacs "
"performs format conversion if appropriate when reading and writing files."
msgstr ""

# type: defvar
#: lispref/files.texi:2811
#, no-wrap
msgid "format-alist"
msgstr ""

# type: defvar
#: lispref/files.texi:2813
msgid "This list contains one format definition for each defined file format."
msgstr ""

# type: cindex
#: lispref/files.texi:2815
#, no-wrap
msgid "format definition"
msgstr ""

# type: Plain text
#: lispref/files.texi:2817
msgid "Each format definition is a list of this form:"
msgstr ""

# type: example
#: lispref/files.texi:2820
#, no-wrap
msgid "(@var{name} @var{doc-string} @var{regexp} @var{from-fn} @var{to-fn} @var{modify} @var{mode-fn})\n"
msgstr ""

# type: Plain text
#: lispref/files.texi:2823
msgid "Here is what the elements in a format definition mean:"
msgstr ""

# type: table
#: lispref/files.texi:2827
msgid "The name of this format."
msgstr ""

# type: item
#: lispref/files.texi:2828
#, no-wrap
msgid "doc-string"
msgstr ""

# type: table
#: lispref/files.texi:2830
msgid "A documentation string for the format."
msgstr ""

# type: table
#: lispref/files.texi:2834
msgid ""
"A regular expression which is used to recognize files represented in this "
"format."
msgstr ""

# type: item
#: lispref/files.texi:2835
#, no-wrap
msgid "from-fn"
msgstr ""

# type: table
#: lispref/files.texi:2838
msgid ""
"A shell command or function to decode data in this format (to convert file "
"data into the usual Emacs data representation)."
msgstr ""

# type: table
#: lispref/files.texi:2841
msgid ""
"A shell command is represented as a string; Emacs runs the command as a "
"filter to perform the conversion."
msgstr ""

# type: table
#: lispref/files.texi:2847
msgid ""
"If @var{from-fn} is a function, it is called with two arguments, @var{begin} "
"and @var{end}, which specify the part of the buffer it should convert.  It "
"should convert the text by editing it in place.  Since this can change the "
"length of the text, @var{from-fn} should return the modified end position."
msgstr ""

# type: table
#: lispref/files.texi:2851
msgid ""
"One responsibility of @var{from-fn} is to make sure that the beginning of "
"the file no longer matches @var{regexp}.  Otherwise it is likely to get "
"called again."
msgstr ""

# type: item
#: lispref/files.texi:2852
#, no-wrap
msgid "to-fn"
msgstr ""

# type: table
#: lispref/files.texi:2855
msgid ""
"A shell command or function to encode data in this format---that is, to "
"convert the usual Emacs data representation into this format."
msgstr ""

# type: table
#: lispref/files.texi:2858
msgid ""
"If @var{to-fn} is a string, it is a shell command; Emacs runs the command as "
"a filter to perform the conversion."
msgstr ""

# type: table
#: lispref/files.texi:2863
msgid ""
"If @var{to-fn} is a function, it is called with three arguments: @var{begin} "
"and @var{end}, which specify the part of the buffer it should convert, and "
"@var{buffer}, which specifies which buffer.  There are two ways it can do "
"the conversion:"
msgstr ""

# type: itemize
#: lispref/files.texi:2868
msgid ""
"By editing the buffer in place.  In this case, @var{to-fn} should return the "
"end-position of the range of text, as modified."
msgstr ""

# type: itemize
#: lispref/files.texi:2875
msgid ""
"By returning a list of annotations.  This is a list of elements of the form "
"@code{(@var{position} . @var{string})}, where @var{position} is an integer "
"specifying the relative position in the text to be written, and @var{string} "
"is the annotation to add there.  The list must be sorted in order of "
"position when @var{to-fn} returns it."
msgstr ""

# type: defvar
#: lispref/files.texi:2879 lispref/text.texi:3427
msgid ""
"When @code{write-region} actually writes the text from the buffer to the "
"file, it intermixes the specified annotations at the corresponding "
"positions.  All this takes place without modifying the buffer."
msgstr ""

# type: item
#: lispref/files.texi:2881
#, no-wrap
msgid "modify"
msgstr ""

# type: table
#: lispref/files.texi:2884
msgid ""
"A flag, @code{t} if the encoding function modifies the buffer, and @code"
"{nil} if it works by returning a list of annotations."
msgstr ""

# type: item
#: lispref/files.texi:2885
#, no-wrap
msgid "mode-fn"
msgstr ""

# type: table
#: lispref/files.texi:2889
msgid ""
"A minor-mode function to call after visiting a file converted from this "
"format.  The function is called with one argument, the integer 1; that tells "
"a minor-mode function to enable the mode."
msgstr ""

# type: Plain text
#: lispref/files.texi:2897
msgid ""
"The function @code{insert-file-contents} automatically recognizes file "
"formats when it reads the specified file.  It checks the text of the "
"beginning of the file against the regular expressions of the format "
"definitions, and if it finds a match, it calls the decoding function for "
"that format.  Then it checks all the known formats over again.  It keeps "
"checking them until none of them is applicable."
msgstr ""

# type: Plain text
#: lispref/files.texi:2903
msgid ""
"Visiting a file, with @code{find-file-noselect} or the commands that use it, "
"performs conversion likewise (because it calls @code{insert-file-contents}); "
"it also calls the mode function for each format that it decodes.  It stores "
"a list of the format names in the buffer-local variable @code{buffer-file-"
"format}."
msgstr ""

# type: item
#: lispref/files.texi:2904 lispref/locals.texi:49
#, no-wrap
msgid "buffer-file-format"
msgstr ""

# type: defvar
#: lispref/files.texi:2909
msgid ""
"This variable states the format of the visited file.  More precisely, this "
"is a list of the file format names that were decoded in the course of "
"visiting the current buffer's file.  It is always buffer-local in all "
"buffers."
msgstr ""

# type: Plain text
#: lispref/files.texi:2914
msgid ""
"When @code{write-region} writes data into a file, it first calls the "
"encoding functions for the formats listed in @code{buffer-file-format}, in "
"the order of appearance in the list."
msgstr ""

# type: deffn
#: lispref/files.texi:2915
#, no-wrap
msgid "Command format-write-file file format &optional confirm"
msgstr ""

# type: deffn
#: lispref/files.texi:2923
msgid ""
"This command writes the current buffer contents into the file @var{file} in "
"format @var{format}, and makes that format the default for future saves of "
"the buffer.  The argument @var{format} is a list of format names.  Except "
"for the @var{format} argument, this command is similar to @code{write-"
"file}.  In particular, @var{confirm} has the same meaning and interactive "
"treatment as the corresponding argument to @code{write-file}.  @xref"
"{Definition of write-file}."
msgstr ""

# type: deffn
#: lispref/files.texi:2925
#, no-wrap
msgid "Command format-find-file file format"
msgstr ""

# type: deffn
#: lispref/files.texi:2929
msgid ""
"This command finds the file @var{file}, converting it according to format "
"@var{format}.  It also makes @var{format} the default if the buffer is saved "
"later."
msgstr ""

# type: deffn
#: lispref/files.texi:2933 lispref/files.texi:2948
msgid ""
"The argument @var{format} is a list of format names.  If @var{format} is "
"@code{nil}, no conversion takes place.  Interactively, typing just @key{RET} "
"for @var{format} specifies @code{nil}."
msgstr ""

# type: deffn
#: lispref/files.texi:2935
#, no-wrap
msgid "Command format-insert-file file format &optional beg end"
msgstr ""

# type: deffn
#: lispref/files.texi:2940
msgid ""
"This command inserts the contents of file @var{file}, converting it "
"according to format @var{format}.  If @var{beg} and @var{end} are non-@code"
"{nil}, they specify which part of the file to read, as in @code{insert-file-"
"contents} (@pxref{Reading from Files})."
msgstr ""

# type: deffn
#: lispref/files.texi:2944
msgid ""
"The return value is like what @code{insert-file-contents} returns: a list of "
"the absolute file name and the length of the data inserted (after "
"conversion)."
msgstr ""

# type: item
#: lispref/files.texi:2950 lispref/locals.texi:28
#, no-wrap
msgid "buffer-auto-save-file-format"
msgstr ""

# type: defvar
#: lispref/files.texi:2958
msgid ""
"This variable specifies the format to use for auto-saving.  Its value is a "
"list of format names, just like the value of @code{buffer-file-format}; "
"however, it is used instead of @code{buffer-file-format} for writing auto-"
"save files.  If the value is @code{t}, the default, auto-saving uses the "
"same format as a regular save in the same buffer.  This variable is always "
"buffer-local in all buffers."
msgstr ""

# type: ignore
#: lispref/files.texi:2962
#, no-wrap
msgid "   arch-tag: 141f74ce-6ae3-40dc-a6c4-ef83fc4ec35c\n"
msgstr "   arch-tag: 141f74ce-6ae3-40dc-a6c4-ef83fc4ec35c\n"

# type: item
#: lispref/frames.texi:9 lispref/internals.texi:1204
#, no-wrap
msgid "frame"
msgstr ""

# type: Plain text
#: lispref/frames.texi:16
msgid ""
"In Emacs editing, A @dfn{frame} is a screen object that contains one or more "
"Emacs windows.  It's the kind of object that is called a ``window'' in the "
"terminology of graphical environments; but we can't call it a ``window'' "
"here, because Emacs uses that word in a different way."
msgstr ""

# type: Plain text
#: lispref/frames.texi:21
msgid ""
"A frame initially contains a single main window and/or a minibuffer window; "
"you can subdivide the main window vertically or horizontally into smaller "
"windows.  In Emacs Lisp, a @dfn{frame object} is a Lisp object that "
"represents a frame on the screen."
msgstr ""

# type: cindex
#: lispref/frames.texi:22
#, no-wrap
msgid "terminal frame"
msgstr ""

# type: Plain text
#: lispref/frames.texi:26
msgid ""
"When Emacs runs on a text-only terminal, it starts with one @dfn{terminal "
"frame}.  If you create additional ones, Emacs displays one and only one at "
"any given time---on the terminal screen, of course."
msgstr ""

# type: cindex
#: lispref/frames.texi:27
#, no-wrap
msgid "window frame"
msgstr ""

# type: Plain text
#: lispref/frames.texi:32
msgid ""
"When Emacs communicates directly with a supported window system, such as X, "
"it does not have a terminal frame; instead, it starts with a single @dfn"
"{window frame}, but you can create more, and Emacs can display several such "
"frames at once as is usual for window systems."
msgstr ""

# type: defun
#: lispref/frames.texi:33
#, no-wrap
msgid "framep object"
msgstr ""

# type: defun
#: lispref/frames.texi:37
msgid ""
"This predicate returns a non-@code{nil} value if @var{object} is a frame, "
"and @code{nil} otherwise.  For a frame, the value indicates which kind of "
"display the frame uses:"
msgstr ""

# type: table
#: lispref/frames.texi:41
msgid "The frame is displayed in an X window."
msgstr ""

# type: table
#: lispref/frames.texi:43
msgid "A terminal frame on a character display."
msgstr ""

# type: table
#: lispref/frames.texi:45
msgid "The frame is displayed on a Macintosh."
msgstr ""

# type: table
#: lispref/frames.texi:47
msgid "The frame is displayed on MS-Windows 9X/NT."
msgstr ""

# type: table
#: lispref/frames.texi:49
msgid "The frame is displayed on an MS-DOS terminal."
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/frames.texi:83 lispref/frames.texi:84
#: lispref/vol1.texi:765 lispref/vol2.texi:766
#, no-wrap
msgid "Creating Frames"
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "Creating additional frames."
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/frames.texi:121 lispref/frames.texi:122
#: lispref/vol1.texi:765 lispref/vol2.texi:766
#, no-wrap
msgid "Multiple Displays"
msgstr ""

# type: menu
#: lispref/frames.texi:78
msgid "Creating frames on other displays."
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/frames.texi:201 lispref/frames.texi:202
#: lispref/vol1.texi:765 lispref/vol2.texi:766
#, no-wrap
msgid "Frame Parameters"
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "Controlling frame size, position, font, etc."
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/frames.texi:896 lispref/frames.texi:897
#: lispref/vol1.texi:765 lispref/vol2.texi:766
#, no-wrap
msgid "Frame Titles"
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "Automatic updating of frame titles."
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/frames.texi:936 lispref/frames.texi:937
#: lispref/vol1.texi:765 lispref/vol2.texi:766
#, no-wrap
msgid "Deleting Frames"
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "Frames last until explicitly deleted."
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/frames.texi:968 lispref/frames.texi:969
#: lispref/vol1.texi:765 lispref/vol2.texi:766
#, no-wrap
msgid "Finding All Frames"
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "How to examine all existing frames."
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/frames.texi:1018 lispref/frames.texi:1019
#: lispref/vol1.texi:765 lispref/vol2.texi:766
#, no-wrap
msgid "Frames and Windows"
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "A frame contains windows;"
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "display of text always works through windows."
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/frames.texi:1063 lispref/frames.texi:1064
#: lispref/vol1.texi:765 lispref/vol2.texi:766
#, no-wrap
msgid "Minibuffers and Frames"
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "How a frame finds the minibuffer to use."
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/frames.texi:1089 lispref/frames.texi:1090
#: lispref/vol1.texi:765 lispref/vol2.texi:766
#, no-wrap
msgid "Input Focus"
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "Specifying the selected frame."
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/frames.texi:1210 lispref/frames.texi:1211
#: lispref/vol1.texi:765 lispref/vol2.texi:766
#, no-wrap
msgid "Visibility of Frames"
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "Frames may be visible or invisible, or icons."
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/frames.texi:1265 lispref/vol1.texi:765
#: lispref/vol2.texi:766
#, no-wrap
msgid "Raising and Lowering"
msgstr ""

# type: menu
#: lispref/frames.texi:78
msgid "Raising a frame makes it hide other windows;"
msgstr ""

# type: menu
#: lispref/frames.texi:78
msgid "lowering it makes the others hide it."
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/frames.texi:1304 lispref/frames.texi:1305
#: lispref/vol1.texi:765 lispref/vol2.texi:766
#, no-wrap
msgid "Frame Configurations"
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "Saving the state of all frames."
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "Getting events that say when the mouse moves."
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/frames.texi:1400 lispref/frames.texi:1401
#: lispref/vol1.texi:765 lispref/vol2.texi:766
#, no-wrap
msgid "Mouse Position"
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "Asking where the mouse is, or moving it."
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/frames.texi:1449 lispref/frames.texi:1450
#: lispref/vol1.texi:765 lispref/vol2.texi:766
#, no-wrap
msgid "Pop-Up Menus"
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "Displaying a menu for the user to select from."
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/frames.texi:1532 lispref/frames.texi:1533
#: lispref/vol1.texi:765 lispref/vol2.texi:766
#, no-wrap
msgid "Dialog Boxes"
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "Displaying a box to ask yes or no."
msgstr ""

# type: section
#: lispref/frames.texi:78 lispref/frames.texi:1588 lispref/frames.texi:1589
#, no-wrap
msgid "Pointer Shape"
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "Specifying the shape of the mouse pointer."
msgstr ""

# type: section
#: lispref/frames.texi:78 lispref/frames.texi:1635 lispref/frames.texi:1636
#, no-wrap
msgid "Window System Selections"
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "Transferring text to and from other X clients."
msgstr ""

# type: section
#: lispref/frames.texi:78 lispref/frames.texi:1749 lispref/frames.texi:1750
#, no-wrap
msgid "Drag and Drop"
msgstr ""

# type: menu
#: lispref/frames.texi:78
msgid "Internals of Drag-and-Drop implementation."
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/frames.texi:1778 lispref/frames.texi:1779
#: lispref/vol1.texi:765 lispref/vol2.texi:766
#, no-wrap
msgid "Color Names"
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "Getting the definitions of color names."
msgstr ""

# type: section
#: lispref/frames.texi:78 lispref/frames.texi:1884 lispref/frames.texi:1885
#, no-wrap
msgid "Text Terminal Colors"
msgstr ""

# type: menu
#: lispref/frames.texi:78
msgid "Defining colors for text-only terminals."
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/frames.texi:1947 lispref/vol1.texi:765
#: lispref/vol2.texi:766
#, no-wrap
msgid "Resources"
msgstr ""

# type: menu
#: lispref/frames.texi:78 lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "Getting resource values from the server."
msgstr ""

# type: section
#: lispref/frames.texi:78 lispref/frames.texi:2005 lispref/frames.texi:2006
#, no-wrap
msgid "Display Feature Testing"
msgstr ""

# type: menu
#: lispref/frames.texi:78
msgid "Determining the features of a terminal."
msgstr ""

# type: Plain text
#: lispref/frames.texi:82
msgid ""
"@xref{Display}, for information about the related topic of controlling Emacs "
"redisplay."
msgstr ""

# type: Plain text
#: lispref/frames.texi:87
msgid "To create a new frame, call the function @code{make-frame}."
msgstr ""

# type: defun
#: lispref/frames.texi:88
#, no-wrap
msgid "make-frame &optional alist"
msgstr ""

# type: defun
#: lispref/frames.texi:92
msgid ""
"This function creates and returns a new frame, displaying the current "
"buffer.  If you are using a supported window system, it makes a window "
"frame; otherwise, it makes a terminal frame."
msgstr ""

# type: defun
#: lispref/frames.texi:98
msgid ""
"The argument is an alist specifying frame parameters.  Any parameters not "
"mentioned in @var{alist} default according to the value of the variable @code"
"{default-frame-alist}; parameters not specified even there default from the "
"standard X resources or whatever is used instead on your system."
msgstr ""

# type: defun
#: lispref/frames.texi:102
msgid ""
"The set of possible parameters depends in principle on what kind of window "
"system Emacs uses to display its frames.  @xref{Window Frame Parameters}, "
"for documentation of individual parameters you can specify."
msgstr ""

# type: defun
#: lispref/frames.texi:108
msgid ""
"This function itself does not make the new frame the selected frame.  @xref"
"{Input Focus}.  The previously selected frame remains selected.  However, "
"the window system may select the new frame for its own reasons, for instance "
"if the frame appears under the mouse pointer and your setup is for focus to "
"follow the pointer."
msgstr ""

# type: item
#: lispref/frames.texi:110 lispref/hooks.texi:74
#, no-wrap
msgid "before-make-frame-hook"
msgstr ""

# type: defvar
#: lispref/frames.texi:113
msgid ""
"A normal hook run by @code{make-frame} before it actually creates the frame."
msgstr ""

# type: item
#: lispref/frames.texi:115 lispref/hooks.texi:53
#, no-wrap
msgid "after-make-frame-functions"
msgstr ""

# type: defvar
#: lispref/frames.texi:119
msgid ""
"An abnormal hook run by @code{make-frame} after it creates the frame.  Each "
"function in @code{after-make-frame-functions} receives one argument, the "
"frame just created."
msgstr ""

# type: cindex
#: lispref/frames.texi:123
#, no-wrap
msgid "multiple X displays"
msgstr ""

# type: cindex
#: lispref/frames.texi:124
#, no-wrap
msgid "displays, multiple"
msgstr ""

# type: Plain text
#: lispref/frames.texi:132
msgid ""
"A single Emacs can talk to more than one X display.  Initially, Emacs uses "
"just one display---the one chosen with the @code{DISPLAY} environment "
"variable or with the @samp{--display} option (@pxref{Initial Options,,, "
"emacs, The GNU Emacs Manual}).  To connect to another display, use the "
"command @code{make-frame-on-display} or specify the @code{display} frame "
"parameter when you create the frame."
msgstr ""

# type: Plain text
#: lispref/frames.texi:137
msgid ""
"Emacs treats each X server as a separate terminal, giving each one its own "
"selected frame and its own minibuffer windows.  However, only one of those "
"frames is ``@emph{the} selected frame'' at any given moment, see @ref{Input "
"Focus}."
msgstr ""

# type: Plain text
#: lispref/frames.texi:145
msgid ""
"A few Lisp variables are @dfn{terminal-local}; that is, they have a separate "
"binding for each terminal.  The binding in effect at any time is the one for "
"the terminal that the currently selected frame belongs to.  These variables "
"include @code{default-minibuffer-frame}, @code{defining-kbd-macro}, @code"
"{last-kbd-macro}, and @code{system-key-alist}.  They are always terminal-"
"local, and can never be buffer-local (@pxref{Buffer-Local Variables}) or "
"frame-local."
msgstr ""

# type: Plain text
#: lispref/frames.texi:152
msgid ""
"A single X server can handle more than one screen.  A display name @samp{@var"
"{host}:@var{server}.@var{screen}} has three parts; the last part specifies "
"the screen number for a given server.  When you use two screens belonging to "
"one server, Emacs knows by the similarity in their names that they share a "
"single keyboard, and it treats them as a single terminal."
msgstr ""

# type: Plain text
#: lispref/frames.texi:159
msgid ""
"Note that some graphical terminals can output to more than a one monitor (or "
"other output device) at the same time.  On these ``multi-monitor'' setups, a "
"single @var{display} value controls the output to all the physical "
"monitors.  In this situation, there is currently no platform-independent way "
"for Emacs to distinguish between the different physical monitors."
msgstr ""

# type: deffn
#: lispref/frames.texi:160
#, no-wrap
msgid "Command make-frame-on-display display &optional parameters"
msgstr ""

# type: deffn
#: lispref/frames.texi:165
msgid ""
"This creates and returns a new frame on display @var{display}, taking the "
"other frame parameters from @var{parameters}.  Aside from the @var{display} "
"argument, it is like @code{make-frame} (@pxref{Creating Frames})."
msgstr ""

# type: defun
#: lispref/frames.texi:167
#, no-wrap
msgid "x-display-list"
msgstr ""

# type: defun
#: lispref/frames.texi:171
msgid ""
"This returns a list that indicates which X displays Emacs has a connection "
"to.  The elements of the list are strings, and each one is a display name."
msgstr ""

# type: defun
#: lispref/frames.texi:173
#, no-wrap
msgid "x-open-connection display &optional xrm-string must-succeed"
msgstr ""

# type: defun
#: lispref/frames.texi:177
msgid ""
"This function opens a connection to the X display @var{display}.  It does "
"not create a frame on that display, but it permits you to check that "
"communication can be established with that display."
msgstr ""

# type: defun
#: lispref/frames.texi:184
msgid ""
"The optional argument @var{xrm-string}, if not @code{nil}, is a string of "
"resource names and values, in the same format used in the @file{.Xresources} "
"file.  The values you specify override the resource values recorded in the X "
"server itself; they apply to all Emacs frames created on this display.  "
"Here's an example of what this string might look like:"
msgstr ""

# type: example
#: lispref/frames.texi:187
#, no-wrap
msgid "\"*BorderWidth: 3\\n*InternalBorder: 2\\n\"\n"
msgstr ""

# type: Plain text
#: lispref/frames.texi:190 lispref/frames.texi:2004
msgid "@xref{X Resources,, X Resources, emacs, The GNU Emacs Manual}."
msgstr ""

# type: defun
#: lispref/frames.texi:193
msgid ""
"If @var{must-succeed} is non-@code{nil}, failure to open the connection "
"terminates Emacs.  Otherwise, it is an ordinary Lisp error."
msgstr ""

# type: defun
#: lispref/frames.texi:195
#, no-wrap
msgid "x-close-connection display"
msgstr ""

# type: defun
#: lispref/frames.texi:199
msgid ""
"This function closes the connection to display @var{display}.  Before you "
"can do this, you must first delete all the frames that were open on that "
"display (@pxref{Deleting Frames})."
msgstr ""

# type: cindex
#: lispref/frames.texi:203
#, no-wrap
msgid "frame parameters"
msgstr ""

# type: Plain text
#: lispref/frames.texi:208
msgid ""
"A frame has many parameters that control its appearance and behavior.  Just "
"what parameters a frame has depends on what display mechanism it uses."
msgstr ""

# type: Plain text
#: lispref/frames.texi:216
msgid ""
"Frame parameters exist mostly for the sake of window systems.  A terminal "
"frame has a few parameters, mostly for compatibility's sake; only the @code"
"{height}, @code{width}, @code{name}, @code{title}, @code{menu-bar-lines}, "
"@code{buffer-list} and @code{buffer-predicate} parameters do something "
"special.  If the terminal supports colors, the parameters @code{foreground-"
"color}, @code{background-color}, @code{background-mode} and @code{display-"
"type} are also meaningful."
msgstr ""

# type: node
#: lispref/frames.texi:223 lispref/frames.texi:225
#, no-wrap
msgid "Parameter Access"
msgstr ""

# type: menu
#: lispref/frames.texi:223
msgid "How to change a frame's parameters."
msgstr ""

# type: node
#: lispref/frames.texi:223 lispref/frames.texi:260
#, no-wrap
msgid "Initial Parameters"
msgstr ""

# type: menu
#: lispref/frames.texi:223
msgid "Specifying frame parameters when you make a frame."
msgstr ""

# type: subsection
#: lispref/frames.texi:223 lispref/frames.texi:324 lispref/frames.texi:325
#, no-wrap
msgid "Window Frame Parameters"
msgstr ""

# type: menu
#: lispref/frames.texi:223
msgid "List of frame parameters for window systems."
msgstr ""

# type: node
#: lispref/frames.texi:223 lispref/frames.texi:749
#, no-wrap
msgid "Size and Position"
msgstr ""

# type: menu
#: lispref/frames.texi:223
msgid "Changing the size and position of a frame."
msgstr ""

# type: subsection
#: lispref/frames.texi:223 lispref/frames.texi:844 lispref/frames.texi:845
#, no-wrap
msgid "Geometry"
msgstr ""

# type: menu
#: lispref/frames.texi:223
msgid "Parsing geometry specifications."
msgstr ""

# type: subsection
#: lispref/frames.texi:226
#, no-wrap
msgid "Access to Frame Parameters"
msgstr ""

# type: Plain text
#: lispref/frames.texi:230
msgid ""
"These functions let you read and change the parameter values of a frame."
msgstr ""

# type: defun
#: lispref/frames.texi:231
#, no-wrap
msgid "frame-parameter frame parameter"
msgstr ""

# type: defun
#: lispref/frames.texi:236
msgid ""
"This function returns the value of the parameter @var{parameter} (a symbol) "
"of @var{frame}.  If @var{frame} is @code{nil}, it returns the selected "
"frame's parameter.  If @var{frame} has no setting for @var{parameter}, this "
"function returns @code{nil}."
msgstr ""

# type: defun
#: lispref/frames.texi:238
#, no-wrap
msgid "frame-parameters &optional frame"
msgstr ""

# type: defun
#: lispref/frames.texi:242
msgid ""
"The function @code{frame-parameters} returns an alist listing all the "
"parameters of @var{frame} and their values.  If @var{frame} is @code{nil} or "
"omitted, this returns the selected frame's parameters"
msgstr ""

# type: defun
#: lispref/frames.texi:244
#, no-wrap
msgid "modify-frame-parameters frame alist"
msgstr ""

# type: defun
#: lispref/frames.texi:251
msgid ""
"This function alters the parameters of frame @var{frame} based on the "
"elements of @var{alist}.  Each element of @var{alist} has the form @code"
"{(@var{parm} . @var{value})}, where @var{parm} is a symbol naming a "
"parameter.  If you don't mention a parameter in @var{alist}, its value "
"doesn't change.  If @var{frame} is @code{nil}, it defaults to the selected "
"frame."
msgstr ""

# type: defun
#: lispref/frames.texi:253
#, no-wrap
msgid "modify-all-frames-parameters alist"
msgstr ""

# type: defun
#: lispref/frames.texi:258
msgid ""
"This function alters the frame parameters of all existing frames according "
"to @var{alist}, then modifies @code{default-frame-alist} (and, if necessary, "
"@code{initial-frame-alist}) to apply the same parameter values to frames "
"that will be created henceforth."
msgstr ""

# type: subsection
#: lispref/frames.texi:261
#, no-wrap
msgid "Initial Frame Parameters"
msgstr ""

# type: Plain text
#: lispref/frames.texi:265
msgid ""
"You can specify the parameters for the initial startup frame by setting @code"
"{initial-frame-alist} in your init file (@pxref{Init File})."
msgstr ""

# type: defvar
#: lispref/frames.texi:266
#, no-wrap
msgid "initial-frame-alist"
msgstr ""

# type: defvar
#: lispref/frames.texi:271
msgid ""
"This variable's value is an alist of parameter values used when creating the "
"initial window frame.  You can set this variable to specify the appearance "
"of the initial frame without altering subsequent frames.  Each element has "
"the form:"
msgstr ""

# type: example
#: lispref/frames.texi:274
#, no-wrap
msgid "(@var{parameter} . @var{value})\n"
msgstr ""

# type: defvar
#: lispref/frames.texi:280
msgid ""
"Emacs creates the initial frame before it reads your init file.  After "
"reading that file, Emacs checks @code{initial-frame-alist}, and applies the "
"parameter settings in the altered value to the already created initial frame."
msgstr ""

# type: defvar
#: lispref/frames.texi:286
msgid ""
"If these settings affect the frame geometry and appearance, you'll see the "
"frame appear with the wrong ones and then change to the specified ones.  If "
"that bothers you, you can specify the same geometry and appearance with X "
"resources; those do take effect before the frame is created.  @xref{X "
"Resources,, X Resources, emacs, The GNU Emacs Manual}."
msgstr ""

# type: defvar
#: lispref/frames.texi:294
msgid ""
"X resource settings typically apply to all frames.  If you want to specify "
"some X resources solely for the sake of the initial frame, and you don't "
"want them to apply to subsequent frames, here's how to achieve this.  "
"Specify parameters in @code{default-frame-alist} to override the X resources "
"for subsequent frames; then, to prevent these from affecting the initial "
"frame, specify the same parameters in @code{initial-frame-alist} with values "
"that match the X resources."
msgstr ""

# type: Plain text
#: lispref/frames.texi:299
msgid ""
"If these parameters specify a separate minibuffer-only frame with @code"
"{(minibuffer . nil)}, and you have not created one, Emacs creates one for "
"you."
msgstr ""

# type: defvar
#: lispref/frames.texi:300
#, no-wrap
msgid "minibuffer-frame-alist"
msgstr ""

# type: defvar
#: lispref/frames.texi:304
msgid ""
"This variable's value is an alist of parameter values used when creating an "
"initial minibuffer-only frame---if such a frame is needed, according to the "
"parameters for the main initial frame."
msgstr ""

# type: defvar
#: lispref/frames.texi:306
#, no-wrap
msgid "default-frame-alist"
msgstr ""

# type: defvar
#: lispref/frames.texi:311
msgid ""
"This is an alist specifying default values of frame parameters for all Emacs "
"frames---the first frame, and subsequent frames.  When using the X Window "
"System, you can get the same results by means of X resources in many cases."
msgstr ""

# type: defvar
#: lispref/frames.texi:313
msgid "Setting this variable does not affect existing frames."
msgstr ""

# type: Plain text
#: lispref/frames.texi:317
msgid ""
"See also @code{special-display-frame-alist}.  @xref{Definition of special-"
"display-frame-alist}."
msgstr ""

# type: Plain text
#: lispref/frames.texi:323
msgid ""
"If you use options that specify window appearance when you invoke Emacs, "
"they take effect by adding elements to @code{default-frame-alist}.  One "
"exception is @samp{-geometry}, which adds the specified position to @code"
"{initial-frame-alist} instead.  @xref{Emacs Invocation,, Command Line "
"Arguments for Emacs Invocation, emacs, The GNU Emacs Manual}."
msgstr ""

# type: Plain text
#: lispref/frames.texi:334
msgid ""
"Just what parameters a frame has depends on what display mechanism it uses.  "
"This section describes the parameters that have special meanings on some or "
"all kinds of terminals.  Of these, @code{name}, @code{title}, @code{height}, "
"@code{width}, @code{buffer-list} and @code{buffer-predicate} provide "
"meaningful information in terminal frames, and @code{tty-color-mode} is "
"meaningful @emph{only} in terminal frames."
msgstr ""

# type: subsubsection
#: lispref/frames.texi:345 lispref/frames.texi:347 lispref/frames.texi:348
#, no-wrap
msgid "Basic Parameters"
msgstr ""

# type: menu
#: lispref/frames.texi:345
msgid "Parameters that are fundamental."
msgstr ""

# type: subsubsection
#: lispref/frames.texi:345 lispref/frames.texi:383 lispref/frames.texi:384
#, no-wrap
msgid "Position Parameters"
msgstr ""

# type: menu
#: lispref/frames.texi:345
msgid "The position of the frame on the screen."
msgstr ""

# type: subsubsection
#: lispref/frames.texi:345 lispref/frames.texi:446 lispref/frames.texi:447
#, no-wrap
msgid "Size Parameters"
msgstr ""

# type: menu
#: lispref/frames.texi:345
msgid "Frame's size."
msgstr ""

# type: subsubsection
#: lispref/frames.texi:345 lispref/frames.texi:474 lispref/frames.texi:475
#, no-wrap
msgid "Layout Parameters"
msgstr ""

# type: menu
#: lispref/frames.texi:345
msgid "Size of parts of the frame, and"
msgstr ""

# type: menu
#: lispref/frames.texi:345
msgid "enabling or disabling some parts."
msgstr ""

# type: subsubsection
#: lispref/frames.texi:345 lispref/frames.texi:535 lispref/frames.texi:536
#, no-wrap
msgid "Buffer Parameters"
msgstr ""

# type: menu
#: lispref/frames.texi:345
msgid "Which buffers have been or should be shown."
msgstr ""

# type: node
#: lispref/frames.texi:345 lispref/frames.texi:564
#, no-wrap
msgid "Management Parameters"
msgstr ""

# type: menu
#: lispref/frames.texi:345
msgid "Communicating with the window manager."
msgstr ""

# type: subsubsection
#: lispref/frames.texi:345 lispref/frames.texi:616 lispref/frames.texi:617
#, no-wrap
msgid "Cursor Parameters"
msgstr ""

# type: menu
#: lispref/frames.texi:345
msgid "Controlling the cursor appearance."
msgstr ""

# type: subsubsection
#: lispref/frames.texi:345 lispref/frames.texi:662 lispref/frames.texi:663
#, no-wrap
msgid "Color Parameters"
msgstr ""

# type: menu
#: lispref/frames.texi:345
msgid "Colors of various parts of the frame."
msgstr ""

# type: Plain text
#: lispref/frames.texi:352
msgid ""
"These frame parameters give the most basic information about the frame.  "
"@code{title} and @code{name} are meaningful on all terminals."
msgstr ""

# type: table
#: lispref/frames.texi:358
msgid ""
"The display on which to open this frame.  It should be a string of the form "
"@code{\"@var{host}:@var{dpy}.@var{screen}\"}, just like the @code{DISPLAY} "
"environment variable."
msgstr ""

# type: item
#: lispref/frames.texi:359
#, no-wrap
msgid "display-type"
msgstr ""

# type: table
#: lispref/frames.texi:363
msgid ""
"This parameter describes the range of possible colors that can be used in "
"this frame.  Its value is @code{color}, @code{grayscale} or @code{mono}."
msgstr ""

# type: item
#: lispref/frames.texi:364
#, no-wrap
msgid "title"
msgstr ""

# type: table
#: lispref/frames.texi:371
msgid ""
"If a frame has a non-@code{nil} title, it appears in the window system's "
"border for the frame, and also in the mode line of windows in that frame if "
"@code{mode-line-frame-identification} uses @samp{%F} (@pxref{%-"
"Constructs}).  This is normally the case when Emacs is not using a window "
"system, and can only display one frame at a time.  @xref{Frame Titles}."
msgstr ""

# type: table
#: lispref/frames.texi:377
msgid ""
"The name of the frame.  The frame name serves as a default for the frame "
"title, if the @code{title} parameter is unspecified or @code{nil}.  If you "
"don't specify a name, Emacs sets the frame name automatically (@pxref{Frame "
"Titles})."
msgstr ""

# type: table
#: lispref/frames.texi:381
msgid ""
"If you specify the frame name explicitly when you create the frame, the name "
"is also used (instead of the name of the Emacs executable) when looking up X "
"resources for the frame."
msgstr ""

# type: Plain text
#: lispref/frames.texi:388
msgid ""
"Position parameters' values are normally measured in pixels, but on text-"
"only terminals they count characters or lines instead."
msgstr ""

# type: table
#: lispref/frames.texi:395
msgid ""
"The screen position of the left edge, in pixels, with respect to the left "
"edge of the screen.  The value may be a positive number @var{pos}, or a list "
"of the form @code{(+ @var{pos})} which permits specifying a negative @var"
"{pos} value."
msgstr ""

# type: table
#: lispref/frames.texi:402
msgid ""
"A negative number @minus{}@var{pos}, or a list of the form @code{(- @var"
"{pos})}, actually specifies the position of the right edge of the window "
"with respect to the right edge of the screen.  A positive value of @var{pos} "
"counts toward the left.  @strong{Reminder:} if the parameter is a negative "
"integer @minus{}@var{pos}, then @var{pos} is positive."
msgstr ""

# type: table
#: lispref/frames.texi:406
msgid ""
"Some window managers ignore program-specified positions.  If you want to be "
"sure the position you specify is not ignored, specify a non-@code{nil} value "
"for the @code{user-position} parameter as well."
msgstr ""

# type: item
#: lispref/frames.texi:407 lispref/internals.texi:1242
#, no-wrap
msgid "top"
msgstr ""

# type: table
#: lispref/frames.texi:411
msgid ""
"The screen position of the top edge, in pixels, with respect to the top edge "
"of the screen.  It works just like @code{left}, except vertically instead of "
"horizontally."
msgstr ""

# type: item
#: lispref/frames.texi:412
#, no-wrap
msgid "icon-left"
msgstr ""

# type: table
#: lispref/frames.texi:416
msgid ""
"The screen position of the left edge @emph{of the frame's icon}, in pixels, "
"counting from the left edge of the screen.  This takes effect if and when "
"the frame is iconified."
msgstr ""

# type: table
#: lispref/frames.texi:420
msgid ""
"If you specify a value for this parameter, then you must also specify a "
"value for @code{icon-top} and vice versa.  The window manager may ignore "
"these two parameters."
msgstr ""

# type: item
#: lispref/frames.texi:421
#, no-wrap
msgid "icon-top"
msgstr ""

# type: table
#: lispref/frames.texi:425
msgid ""
"The screen position of the top edge @emph{of the frame's icon}, in pixels, "
"counting from the top edge of the screen.  This takes effect if and when the "
"frame is iconified."
msgstr ""

# type: item
#: lispref/frames.texi:426
#, no-wrap
msgid "user-position"
msgstr ""

# type: table
#: lispref/frames.texi:432
msgid ""
"When you create a frame and specify its screen position with the @code{left} "
"and @code{top} parameters, use this parameter to say whether the specified "
"position was user-specified (explicitly requested in some way by a human "
"user) or merely program-specified (chosen by a program).  A non-@code{nil} "
"value says the position was user-specified."
msgstr ""

# type: table
#: lispref/frames.texi:439
msgid ""
"Window managers generally heed user-specified positions, and some heed "
"program-specified positions too.  But many ignore program-specified "
"positions, placing the window in a default fashion or letting the user place "
"it with the mouse.  Some window managers, including @code{twm}, let the user "
"specify whether to obey program-specified positions or ignore them."
msgstr ""

# type: table
#: lispref/frames.texi:444
msgid ""
"When you call @code{make-frame}, you should specify a non-@code{nil} value "
"for this parameter if the values of the @code{left} and @code{top} "
"parameters represent the user's stated preference; otherwise, use @code{nil}."
msgstr ""

# type: Plain text
#: lispref/frames.texi:451
msgid ""
"Size parameters' values are normally measured in pixels, but on text-only "
"terminals they count characters or lines instead."
msgstr ""

# type: item
#: lispref/frames.texi:453 lispref/internals.texi:1246
#, no-wrap
msgid "height"
msgstr ""

# type: table
#: lispref/frames.texi:456
msgid ""
"The height of the frame contents, in characters.  (To get the height in "
"pixels, call @code{frame-pixel-height}; see @ref{Size and Position}.)"
msgstr ""

# type: item
#: lispref/frames.texi:457 lispref/internals.texi:1249
#, no-wrap
msgid "width"
msgstr ""

# type: table
#: lispref/frames.texi:460
msgid ""
"The width of the frame contents, in characters.  (To get the height in "
"pixels, call @code{frame-pixel-width}; see @ref{Size and Position}.)"
msgstr ""

# type: item
#: lispref/frames.texi:461
#, no-wrap
msgid "user-size"
msgstr ""

# type: table
#: lispref/frames.texi:465
msgid ""
"This does for the size parameters @code{height} and @code{width} what the "
"@code{user-position} parameter (see above) does for the position parameters "
"@code{top} and @code{left}."
msgstr ""

# type: item
#: lispref/frames.texi:466
#, no-wrap
msgid "fullscreen"
msgstr ""

# type: table
#: lispref/frames.texi:472
msgid ""
"Specify that width, height or both shall be set to the size of the screen.  "
"The value @code{fullwidth} specifies that width shall be the size of the "
"screen.  The value @code{fullheight} specifies that height shall be the size "
"of the screen.  The value @code{fullboth} specifies that both the width and "
"the height shall be set to the size of the screen."
msgstr ""

# type: Plain text
#: lispref/frames.texi:479
msgid ""
"These frame parameters enable or disable various parts of the frame, or "
"control their sizes."
msgstr ""

# type: item
#: lispref/frames.texi:481
#, no-wrap
msgid "border-width"
msgstr ""

# type: table
#: lispref/frames.texi:483
msgid "The width in pixels of the frame's border."
msgstr ""

# type: item
#: lispref/frames.texi:484
#, no-wrap
msgid "internal-border-width"
msgstr ""

# type: table
#: lispref/frames.texi:486
msgid "The distance in pixels between text (or fringe) and the frame's border."
msgstr ""

# type: item
#: lispref/frames.texi:487
#, no-wrap
msgid "vertical-scroll-bars"
msgstr ""

# type: table
#: lispref/frames.texi:491
msgid ""
"Whether the frame has scroll bars for vertical scrolling, and which side of "
"the frame they should be on.  The possible values are @code{left}, @code"
"{right}, and @code{nil} for no scroll bars."
msgstr ""

# type: item
#: lispref/frames.texi:493
#, no-wrap
msgid "horizontal-scroll-bars"
msgstr ""

# type: ignore
#: lispref/frames.texi:497
#, no-wrap
msgid ""
"Whether the frame has scroll bars for horizontal scrolling\n"
"(non-@code{nil} means yes).  Horizontal scroll bars are not currently\n"
"implemented.\n"
msgstr ""

# type: table
#: lispref/frames.texi:502
msgid ""
"The width of vertical scroll bars, in pixels, or @code{nil} meaning to use "
"the default width."
msgstr ""

# type: item
#: lispref/frames.texi:503 lispref/windows.texi:2195
#, no-wrap
msgid "left-fringe"
msgstr ""

# type: itemx
#: lispref/frames.texi:504 lispref/windows.texi:2196
#, no-wrap
msgid "right-fringe"
msgstr ""

# type: table
#: lispref/frames.texi:510
msgid ""
"The default width of the left and right fringes of windows in this frame "
"(@pxref{Fringes}).  If either of these is zero, that effectively removes the "
"corresponding fringe.  A value of @code{nil} stands for the standard fringe "
"width, which is the width needed to display the fringe bitmaps."
msgstr ""

# type: table
#: lispref/frames.texi:518
msgid ""
"The combined fringe widths must add up to an integral number of columns, so "
"the actual default fringe widths for the frame may be larger than the "
"specified values.  The extra width needed to reach an acceptable total is "
"distributed evenly between the left and right fringe.  However, you can "
"force one fringe or the other to a precise width by specifying that width as "
"a negative integer.  If both widths are negative, only the left fringe gets "
"the specified width."
msgstr ""

# type: item
#: lispref/frames.texi:519
#, no-wrap
msgid "menu-bar-lines"
msgstr ""

# type: table
#: lispref/frames.texi:524
msgid ""
"The number of lines to allocate at the top of the frame for a menu bar.  The "
"default is 1.  A value of @code{nil} means don't display a menu bar.  @xref"
"{Menu Bar}.  (The X toolkit and GTK allow at most one menu bar line; they "
"treat larger values as 1.)"
msgstr ""

# type: item
#: lispref/frames.texi:525
#, no-wrap
msgid "tool-bar-lines"
msgstr ""

# type: table
#: lispref/frames.texi:529
msgid ""
"The number of lines to use for the tool bar.  A value of @code{nil} means "
"don't display a tool bar.  (GTK allows at most one tool bar line; it treats "
"larger values as 1.)"
msgstr ""

# type: table
#: lispref/frames.texi:533
msgid ""
"Additional space to leave below each text line, in pixels (a positive "
"integer).  @xref{Line Height}, for more information."
msgstr ""

# type: Plain text
#: lispref/frames.texi:540
msgid ""
"These frame parameters, meaningful on all kinds of terminals, deal with "
"which buffers have been, or should, be displayed in the frame."
msgstr ""

# type: cindex
#: lispref/frames.texi:542 lispref/minibuf.texi:11
#, no-wrap
msgid "minibuffer"
msgstr ""

# type: table
#: lispref/frames.texi:547
msgid ""
"Whether this frame has its own minibuffer.  The value @code{t} means yes, "
"@code{nil} means no, @code{only} means this frame is just a minibuffer.  If "
"the value is a minibuffer window (in some other frame), the new frame uses "
"that minibuffer."
msgstr ""

# type: item
#: lispref/frames.texi:548
#, no-wrap
msgid "buffer-predicate"
msgstr ""

# type: table
#: lispref/frames.texi:555
msgid ""
"The buffer-predicate function for this frame.  The function @code{other-"
"buffer} uses this predicate (from the selected frame) to decide which "
"buffers it should consider, if the predicate is not @code{nil}.  It calls "
"the predicate with one argument, a buffer, once for each buffer; if the "
"predicate returns a non-@code{nil} value, it considers that buffer."
msgstr ""

# type: item
#: lispref/frames.texi:556
#, no-wrap
msgid "buffer-list"
msgstr ""

# type: table
#: lispref/frames.texi:559
msgid ""
"A list of buffers that have been selected in this frame, ordered most-"
"recently-selected first."
msgstr ""

# type: item
#: lispref/frames.texi:560
#, no-wrap
msgid "unsplittable"
msgstr ""

# type: table
#: lispref/frames.texi:562
msgid "If non-@code{nil}, this frame's window is never split automatically."
msgstr ""

# type: subsubsection
#: lispref/frames.texi:565
#, no-wrap
msgid "Window Management Parameters"
msgstr ""

# type: cindex
#: lispref/frames.texi:566
#, no-wrap
msgid "window manager, and frame parameters"
msgstr ""

# type: Plain text
#: lispref/frames.texi:570
msgid ""
"These frame parameters, meaningful only on window system displays, interact "
"with the window manager."
msgstr ""

# type: item
#: lispref/frames.texi:572
#, no-wrap
msgid "visibility"
msgstr ""

# type: table
#: lispref/frames.texi:576
msgid ""
"The state of visibility of the frame.  There are three possibilities: @code"
"{nil} for invisible, @code{t} for visible, and @code{icon} for iconified.  "
"@xref{Visibility of Frames}."
msgstr ""

# type: item
#: lispref/frames.texi:577
#, no-wrap
msgid "auto-raise"
msgstr ""

# type: table
#: lispref/frames.texi:579
msgid "Whether selecting the frame raises it (non-@code{nil} means yes)."
msgstr ""

# type: item
#: lispref/frames.texi:580
#, no-wrap
msgid "auto-lower"
msgstr ""

# type: table
#: lispref/frames.texi:582
msgid "Whether deselecting the frame lowers it (non-@code{nil} means yes)."
msgstr ""

# type: item
#: lispref/frames.texi:583
#, no-wrap
msgid "icon-type"
msgstr ""

# type: table
#: lispref/frames.texi:588
msgid ""
"The type of icon to use for this frame when it is iconified.  If the value "
"is a string, that specifies a file containing a bitmap to use.  Any other "
"non-@code{nil} value specifies the default bitmap icon (a picture of a gnu); "
"@code{nil} specifies a text icon."
msgstr ""

# type: item
#: lispref/frames.texi:589
#, no-wrap
msgid "icon-name"
msgstr ""

# type: table
#: lispref/frames.texi:592
msgid ""
"The name to use in the icon for this frame, when and if the icon appears.  "
"If this is @code{nil}, the frame's title is used."
msgstr ""

# type: item
#: lispref/frames.texi:593
#, no-wrap
msgid "window-id"
msgstr ""

# type: table
#: lispref/frames.texi:596
msgid ""
"The number of the window-system window used by the frame to contain the "
"actual Emacs windows."
msgstr ""

# type: item
#: lispref/frames.texi:597
#, no-wrap
msgid "outer-window-id"
msgstr ""

# type: table
#: lispref/frames.texi:599
msgid ""
"The number of the outermost window-system window used for the whole frame."
msgstr ""

# type: item
#: lispref/frames.texi:600
#, no-wrap
msgid "wait-for-wm"
msgstr ""

# type: table
#: lispref/frames.texi:605
msgid ""
"If non-@code{nil}, tell Xt to wait for the window manager to confirm "
"geometry changes.  Some window managers, including versions of Fvwm2 and "
"KDE, fail to confirm, so Xt hangs.  Set this to @code{nil} to prevent "
"hanging with those window managers."
msgstr ""

# type: item
#: lispref/frames.texi:607
#, no-wrap
msgid "parent-id"
msgstr ""

# type: ignore
#: lispref/frames.texi:613
#, no-wrap
msgid ""
"The X window number of the window that should be the parent of this one.\n"
"Specifying this lets you create an Emacs window inside some other\n"
"application's window.  (It is not certain this will be implemented; try\n"
"it and see if it works.)\n"
msgstr ""

# type: Plain text
#: lispref/frames.texi:620
msgid "This frame parameter controls the way the cursor looks."
msgstr ""

# type: item
#: lispref/frames.texi:622 lispref/frames.texi:643 lispref/locals.texi:91
#, no-wrap
msgid "cursor-type"
msgstr ""

# type: table
#: lispref/frames.texi:624
msgid "How to display the cursor.  Legitimate values are:"
msgstr ""

# type: item
#: lispref/frames.texi:626
#, no-wrap
msgid "box"
msgstr ""

# type: table
#: lispref/frames.texi:628
msgid "Display a filled box.  (This is the default.)"
msgstr ""

# type: item
#: lispref/frames.texi:628
#, no-wrap
msgid "hollow"
msgstr ""

# type: table
#: lispref/frames.texi:630
msgid "Display a hollow box."
msgstr ""

# type: table
#: lispref/frames.texi:632
msgid "Don't display a cursor."
msgstr ""

# type: item
#: lispref/frames.texi:632
#, no-wrap
msgid "bar"
msgstr ""

# type: table
#: lispref/frames.texi:634
msgid "Display a vertical bar between characters."
msgstr ""

# type: item
#: lispref/frames.texi:634
#, no-wrap
msgid "(bar . @var{width})"
msgstr ""

# type: table
#: lispref/frames.texi:636
msgid "Display a vertical bar @var{width} pixels wide between characters."
msgstr ""

# type: item
#: lispref/frames.texi:636
#, no-wrap
msgid "hbar"
msgstr ""

# type: table
#: lispref/frames.texi:638
msgid "Display a horizontal bar."
msgstr ""

# type: item
#: lispref/frames.texi:638
#, no-wrap
msgid "(hbar . @var{height})"
msgstr ""

# type: table
#: lispref/frames.texi:640
msgid "Display a horizontal bar @var{height} pixels high."
msgstr ""

# type: Plain text
#: lispref/frames.texi:647
msgid ""
"The buffer-local variable @code{cursor-type} overrides the value of the @code"
"{cursor-type} frame parameter, but if it is @code{t}, that means to use the "
"cursor specified for the frame."
msgstr ""

# type: defvar
#: lispref/frames.texi:648
#, no-wrap
msgid "blink-cursor-alist"
msgstr ""

# type: defvar
#: lispref/frames.texi:655
msgid ""
"This variable specifies how to blink the cursor.  Each element has the form "
"@code{(@var{on-state} . @var{off-state})}.  Whenever the cursor type equals "
"@var{on-state} (comparing using @code{equal}), the corresponding @var{off-"
"state} specifies what the cursor looks like when it blinks ``off.'' Both @var"
"{on-state} and @var{off-state} should be suitable values for the @code"
"{cursor-type} frame parameter."
msgstr ""

# type: defvar
#: lispref/frames.texi:660
msgid ""
"There are various defaults for how to blink each type of cursor, if the type "
"is not mentioned as an @var{on-state} here.  Changes in this variable do not "
"take effect immediately, because the variable is examined only when you "
"specify the @code{cursor-type} parameter."
msgstr ""

# type: Plain text
#: lispref/frames.texi:666
msgid "These frame parameters control the use of colors."
msgstr ""

# type: item
#: lispref/frames.texi:668
#, no-wrap
msgid "background-mode"
msgstr ""

# type: table
#: lispref/frames.texi:671
msgid ""
"This parameter is either @code{dark} or @code{light}, according to whether "
"the background color is a light one or a dark one."
msgstr ""

# type: item
#: lispref/frames.texi:672
#, no-wrap
msgid "tty-color-mode"
msgstr ""

# type: cindex
#: lispref/frames.texi:673
#, no-wrap
msgid "standard colors for character terminals"
msgstr ""

# type: table
#: lispref/frames.texi:682
msgid ""
"This parameter overrides the terminal's color support as given by the "
"system's terminal capabilities database in that this parameter's value "
"specifies the color mode to use in terminal frames.  The value can be either "
"a symbol or a number.  A number specifies the number of colors to use (and, "
"indirectly, what commands to issue to produce each color).  For example, "
"@code{(tty-color-mode . 8)} specifies use of the ANSI escape sequences for 8 "
"standard text colors.  A value of -1 turns off color support."
msgstr ""

# type: table
#: lispref/frames.texi:686
msgid ""
"If the parameter's value is a symbol, it specifies a number through the "
"value of @code{tty-color-mode-alist}, and the associated number is used "
"instead."
msgstr ""

# type: item
#: lispref/frames.texi:687
#, no-wrap
msgid "screen-gamma"
msgstr ""

# type: cindex
#: lispref/frames.texi:688
#, no-wrap
msgid "gamma correction"
msgstr ""

# type: table
#: lispref/frames.texi:692
msgid ""
"If this is a number, Emacs performs ``gamma correction'' which adjusts the "
"brightness of all colors.  The value should be the screen gamma of your "
"display, a floating point number."
msgstr ""

# type: table
#: lispref/frames.texi:700
msgid ""
"Usual PC monitors have a screen gamma of 2.2, so color values in Emacs, and "
"in X windows generally, are calibrated to display properly on a monitor with "
"that gamma value.  If you specify 2.2 for @code{screen-gamma}, that means no "
"correction is needed.  Other values request correction, designed to make the "
"corrected colors appear on your screen the way they would have appeared "
"without correction on an ordinary monitor with a gamma value of 2.2."
msgstr ""

# type: table
#: lispref/frames.texi:705
msgid ""
"If your monitor displays colors too light, you should specify a @code{screen-"
"gamma} value smaller than 2.2.  This requests correction that makes colors "
"darker.  A screen gamma value of 1.5 may give good results for LCD color "
"displays."
msgstr ""

# type: Plain text
#: lispref/frames.texi:710
msgid ""
"These frame parameters are semi-obsolete in that they are automatically "
"equivalent to particular face attributes of particular faces.  @xref"
"{Standard Faces,,, emacs, The Emacs Manual}."
msgstr ""

# type: item
#: lispref/frames.texi:712
#, no-wrap
msgid "font"
msgstr ""

# type: table
#: lispref/frames.texi:717
msgid ""
"The name of the font for displaying text in the frame.  This is a string, "
"either a valid font name for your system or the name of an Emacs fontset "
"(@pxref{Fontsets}).  It is equivalent to the @code{font} attribute of the "
"@code{default} face."
msgstr ""

# type: item
#: lispref/frames.texi:718
#, no-wrap
msgid "foreground-color"
msgstr ""

# type: table
#: lispref/frames.texi:721
msgid ""
"The color to use for the image of a character.  It is equivalent to the @code"
"{:foreground} attribute of the @code{default} face."
msgstr ""

# type: item
#: lispref/frames.texi:722
#, no-wrap
msgid "background-color"
msgstr ""

# type: table
#: lispref/frames.texi:725
msgid ""
"The color to use for the background of characters.  It is equivalent to the "
"@code{:background} attribute of the @code{default} face."
msgstr ""

# type: item
#: lispref/frames.texi:726
#, no-wrap
msgid "mouse-color"
msgstr ""

# type: table
#: lispref/frames.texi:729
msgid ""
"The color for the mouse pointer.  It is equivalent to the @code{:background} "
"attribute of the @code{mouse} face."
msgstr ""

# type: item
#: lispref/frames.texi:730
#, no-wrap
msgid "cursor-color"
msgstr ""

# type: table
#: lispref/frames.texi:733
msgid ""
"The color for the cursor that shows point.  It is equivalent to the @code{:"
"background} attribute of the @code{cursor} face."
msgstr ""

# type: item
#: lispref/frames.texi:734
#, no-wrap
msgid "border-color"
msgstr ""

# type: table
#: lispref/frames.texi:737
msgid ""
"The color for the border of the frame.  It is equivalent to the @code{:"
"background} attribute of the @code{border} face."
msgstr ""

# type: item
#: lispref/frames.texi:738
#, no-wrap
msgid "scroll-bar-foreground"
msgstr ""

# type: table
#: lispref/frames.texi:742
msgid ""
"If non-@code{nil}, the color for the foreground of scroll bars.  It is "
"equivalent to the @code{:foreground} attribute of the @code{scroll-bar} face."
msgstr ""

# type: item
#: lispref/frames.texi:743
#, no-wrap
msgid "scroll-bar-background"
msgstr ""

# type: table
#: lispref/frames.texi:747
msgid ""
"If non-@code{nil}, the color for the background of scroll bars.  It is "
"equivalent to the @code{:background} attribute of the @code{scroll-bar} face."
msgstr ""

# type: subsection
#: lispref/frames.texi:750
#, no-wrap
msgid "Frame Size And Position"
msgstr ""

# type: cindex
#: lispref/frames.texi:751
#, no-wrap
msgid "size of frame"
msgstr ""

# type: cindex
#: lispref/frames.texi:752
#, no-wrap
msgid "screen size"
msgstr ""

# type: cindex
#: lispref/frames.texi:753
#, no-wrap
msgid "frame size"
msgstr ""

# type: cindex
#: lispref/frames.texi:754
#, no-wrap
msgid "resize frame"
msgstr ""

# type: Plain text
#: lispref/frames.texi:760
msgid ""
"You can read or change the size and position of a frame using the frame "
"parameters @code{left}, @code{top}, @code{height}, and @code{width}.  "
"Whatever geometry parameters you don't specify are chosen by the window "
"manager in its usual fashion."
msgstr ""

# type: Plain text
#: lispref/frames.texi:764
msgid ""
"Here are some special features for working with sizes and positions.  (For "
"the precise meaning of ``selected frame'' used by these functions, see @ref"
"{Input Focus}.)"
msgstr ""

# type: defun
#: lispref/frames.texi:765
#, no-wrap
msgid "set-frame-position frame left top"
msgstr ""

# type: defun
#: lispref/frames.texi:769
msgid ""
"This function sets the position of the top left corner of @var{frame} to @var"
"{left} and @var{top}.  These arguments are measured in pixels, and normally "
"count from the top left corner of the screen."
msgstr ""

# type: defun
#: lispref/frames.texi:776
msgid ""
"Negative parameter values position the bottom edge of the window up from the "
"bottom edge of the screen, or the right window edge to the left of the right "
"edge of the screen.  It would probably be better if the values were always "
"counted from the left and top, so that negative arguments would position the "
"frame partly off the top or left edge of the screen, but it seems "
"inadvisable to change that now."
msgstr ""

# type: defun
#: lispref/frames.texi:778
#, no-wrap
msgid "frame-height &optional frame"
msgstr ""

# type: defunx
#: lispref/frames.texi:779
#, no-wrap
msgid "frame-width &optional frame"
msgstr ""

# type: defun
#: lispref/frames.texi:783
msgid ""
"These functions return the height and width of @var{frame}, measured in "
"lines and columns.  If you don't supply @var{frame}, they use the selected "
"frame."
msgstr ""

# type: defun
#: lispref/frames.texi:785
#, no-wrap
msgid "screen-height"
msgstr ""

# type: defunx
#: lispref/frames.texi:786
#, no-wrap
msgid "screen-width"
msgstr ""

# type: defun
#: lispref/frames.texi:790
msgid ""
"These functions are old aliases for @code{frame-height} and @code{frame-"
"width}.  When you are using a non-window terminal, the size of the frame is "
"normally the same as the size of the terminal screen."
msgstr ""

# type: defun
#: lispref/frames.texi:792
#, no-wrap
msgid "frame-pixel-height &optional frame"
msgstr ""

# type: defunx
#: lispref/frames.texi:793
#, no-wrap
msgid "frame-pixel-width &optional frame"
msgstr ""

# type: defun
#: lispref/frames.texi:796
msgid ""
"These functions return the height and width of @var{frame}, measured in "
"pixels.  If you don't supply @var{frame}, they use the selected frame."
msgstr ""

# type: defun
#: lispref/frames.texi:798
#, no-wrap
msgid "frame-char-height &optional frame"
msgstr ""

# type: defunx
#: lispref/frames.texi:799
#, no-wrap
msgid "frame-char-width &optional frame"
msgstr ""

# type: defun
#: lispref/frames.texi:804
msgid ""
"These functions return the height and width of a character in @var{frame}, "
"measured in pixels.  The values depend on the choice of font.  If you don't "
"supply @var{frame}, these functions use the selected frame."
msgstr ""

# type: defun
#: lispref/frames.texi:806
#, no-wrap
msgid "set-frame-size frame cols rows"
msgstr ""

# type: defun
#: lispref/frames.texi:809
msgid ""
"This function sets the size of @var{frame}, measured in characters; @var"
"{cols} and @var{rows} specify the new width and height."
msgstr ""

# type: defun
#: lispref/frames.texi:813
msgid ""
"To set the size based on values measured in pixels, use @code{frame-char-"
"height} and @code{frame-char-width} to convert them to units of characters."
msgstr ""

# type: defun
#: lispref/frames.texi:815
#, no-wrap
msgid "set-frame-height frame lines &optional pretend"
msgstr ""

# type: defun
#: lispref/frames.texi:819
msgid ""
"This function resizes @var{frame} to a height of @var{lines} lines.  The "
"sizes of existing windows in @var{frame} are altered proportionally to fit."
msgstr ""

# type: defun
#: lispref/frames.texi:829
msgid ""
"If @var{pretend} is non-@code{nil}, then Emacs displays @var{lines} lines of "
"output in @var{frame}, but does not change its value for the actual height "
"of the frame.  This is only useful for a terminal frame.  Using a smaller "
"height than the terminal actually implements may be useful to reproduce "
"behavior observed on a smaller screen, or if the terminal malfunctions when "
"using its whole screen.  Setting the frame height ``for real'' does not "
"always work, because knowing the correct actual size may be necessary for "
"correct cursor positioning on a terminal frame."
msgstr ""

# type: defun
#: lispref/frames.texi:831
#, no-wrap
msgid "set-frame-width frame width &optional pretend"
msgstr ""

# type: defun
#: lispref/frames.texi:835
msgid ""
"This function sets the width of @var{frame}, measured in characters.  The "
"argument @var{pretend} has the same meaning as in @code{set-frame-height}."
msgstr ""

# type: findex
#: lispref/frames.texi:837
#, no-wrap
msgid "set-screen-height"
msgstr "set-screen-height"

# type: findex
#: lispref/frames.texi:838
#, no-wrap
msgid "set-screen-width"
msgstr "set-screen-width"

# type: Plain text
#: lispref/frames.texi:843
msgid ""
"The older functions @code{set-screen-height} and @code{set-screen-width} "
"were used to specify the height and width of the screen, in Emacs versions "
"that did not support multiple frames.  They are semi-obsolete, but still "
"work; they apply to the selected frame."
msgstr ""

# type: Plain text
#: lispref/frames.texi:849
msgid ""
"Here's how to examine the data in an X-style window geometry specification:"
msgstr ""

# type: defun
#: lispref/frames.texi:850
#, no-wrap
msgid "x-parse-geometry geom"
msgstr ""

# type: cindex
#: lispref/frames.texi:851
#, no-wrap
msgid "geometry specification"
msgstr ""

# type: defun
#: lispref/frames.texi:855
msgid ""
"The function @code{x-parse-geometry} converts a standard X window geometry "
"string to an alist that you can use as part of the argument to @code{make-"
"frame}."
msgstr ""

# type: defun
#: lispref/frames.texi:860
msgid ""
"The alist describes which parameters were specified in @var{geom}, and gives "
"the values specified for them.  Each element looks like @code{(@var"
"{parameter} . @var{value})}.  The possible @var{parameter} values are @code"
"{left}, @code{top}, @code{width}, and @code{height}."
msgstr ""

# type: defun
#: lispref/frames.texi:866
msgid ""
"For the size parameters, the value must be an integer.  The position "
"parameter names @code{left} and @code{top} are not totally accurate, because "
"some values indicate the position of the right or bottom edges instead.  "
"These are the @var{value} possibilities for the position parameters:"
msgstr ""

# type: item
#: lispref/frames.texi:868
#, no-wrap
msgid "an integer"
msgstr ""

# type: table
#: lispref/frames.texi:873
msgid ""
"A positive integer relates the left edge or top edge of the window to the "
"left or top edge of the screen.  A negative integer relates the right or "
"bottom edge of the window to the right or bottom edge of the screen."
msgstr ""

# type: code{#1}
#: lispref/frames.texi:874
#, no-wrap
msgid "(+ @var{position})"
msgstr ""

# type: table
#: lispref/frames.texi:879
msgid ""
"This specifies the position of the left or top edge of the window relative "
"to the left or top edge of the screen.  The integer @var{position} may be "
"positive or negative; a negative value specifies a position outside the "
"screen."
msgstr ""

# type: code{#1}
#: lispref/frames.texi:880
#, no-wrap
msgid "(- @var{position})"
msgstr ""

# type: table
#: lispref/frames.texi:885
msgid ""
"This specifies the position of the right or bottom edge of the window "
"relative to the right or bottom edge of the screen.  The integer @var"
"{position} may be positive or negative; a negative value specifies a "
"position outside the screen."
msgstr ""

# type: defun
#: lispref/frames.texi:888 lispref/internals.texi:286
#: lispref/keymaps.texi:2760 lispref/minibuf.texi:1307
#: lispref/minibuf.texi:1600 lispref/windows.texi:1382
msgid "Here is an example:"
msgstr ""

# type: example
#: lispref/frames.texi:893
#, no-wrap
msgid ""
"(x-parse-geometry \"35x70+0-0\")\n"
"     @result{} ((height . 70) (width . 35)\n"
"         (top - 0) (left . 0))\n"
msgstr ""

# type: cindex
#: lispref/frames.texi:898
#, no-wrap
msgid "frame title"
msgstr ""

# type: Plain text
#: lispref/frames.texi:904
msgid ""
"Every frame has a @code{name} parameter; this serves as the default for the "
"frame title which window systems typically display at the top of the frame.  "
"You can specify a name explicitly by setting the @code{name} frame property."
msgstr ""

# type: Plain text
#: lispref/frames.texi:909
msgid ""
"Normally you don't specify the name explicitly, and Emacs computes the frame "
"name automatically based on a template stored in the variable @code{frame-"
"title-format}.  Emacs recomputes the name each time the frame is redisplayed."
msgstr ""

# type: defvar
#: lispref/frames.texi:910
#, no-wrap
msgid "frame-title-format"
msgstr ""

# type: defvar
#: lispref/frames.texi:916
msgid ""
"This variable specifies how to compute a name for a frame when you have not "
"explicitly specified one.  The variable's value is actually a mode line "
"construct, just like @code{mode-line-format}, except that the @samp{%c} and "
"@samp{%l} constructs are ignored.  @xref{Mode Line Data}."
msgstr ""

# type: defvar
#: lispref/frames.texi:918
#, no-wrap
msgid "icon-title-format"
msgstr ""

# type: defvar
#: lispref/frames.texi:922
msgid ""
"This variable specifies how to compute the name for an iconified frame, when "
"you have not explicitly specified the frame title.  This title appears in "
"the icon itself."
msgstr ""

# type: defvar
#: lispref/frames.texi:924
#, no-wrap
msgid "multiple-frames"
msgstr ""

# type: defvar
#: lispref/frames.texi:930
msgid ""
"This variable is set automatically by Emacs.  Its value is @code{t} when "
"there are two or more frames (not counting minibuffer-only frames or "
"invisible frames).  The default value of @code{frame-title-format} uses @code"
"{multiple-frames} so as to put the buffer name in the frame title only when "
"there is more than one frame."
msgstr ""

# type: defvar
#: lispref/frames.texi:934
msgid ""
"The value of this variable is not guaranteed to be accurate except while "
"processing @code{frame-title-format} or @code{icon-title-format}."
msgstr ""

# type: cindex
#: lispref/frames.texi:938
#, no-wrap
msgid "deleting frames"
msgstr ""

# type: Plain text
#: lispref/frames.texi:943
msgid ""
"Frames remain potentially visible until you explicitly @dfn{delete} them.  A "
"deleted frame cannot appear on the screen, but continues to exist as a Lisp "
"object until there are no references to it."
msgstr ""

# type: deffn
#: lispref/frames.texi:944
#, no-wrap
msgid "Command delete-frame &optional frame force"
msgstr ""

# type: vindex
#: lispref/frames.texi:945
#, no-wrap
msgid "delete-frame-functions"
msgstr ""

# type: deffn
#: lispref/frames.texi:950
msgid ""
"This function deletes the frame @var{frame}.  Unless @var{frame} is a "
"tooltip, it first runs the hook @code{delete-frame-functions} (each function "
"gets one argument, @var{frame}).  By default, @var{frame} is the selected "
"frame."
msgstr ""

# type: deffn
#: lispref/frames.texi:954
msgid ""
"A frame cannot be deleted if its minibuffer is used by other frames.  "
"Normally, you cannot delete a frame if all other frames are invisible, but "
"if the @var{force} is non-@code{nil}, then you are allowed to do so."
msgstr ""

# type: defun
#: lispref/frames.texi:956
#, no-wrap
msgid "frame-live-p frame"
msgstr ""

# type: defun
#: lispref/frames.texi:960
msgid ""
"The function @code{frame-live-p} returns non-@code{nil} if the frame @var"
"{frame} has not been deleted.  The possible non-@code{nil} return values are "
"like those of @code{framep}.  @xref{Frames}."
msgstr ""

# type: Plain text
#: lispref/frames.texi:967
msgid ""
"Some window managers provide a command to delete a window.  These work by "
"sending a special message to the program that operates the window.  When "
"Emacs gets one of these commands, it generates a @code{delete-frame} event, "
"whose normal definition is a command that calls the function @code{delete-"
"frame}.  @xref{Misc Events}."
msgstr ""

# type: cindex
#: lispref/frames.texi:970
#, no-wrap
msgid "frames, scanning all"
msgstr ""

# type: defun
#: lispref/frames.texi:972
#, no-wrap
msgid "frame-list"
msgstr ""

# type: defun
#: lispref/frames.texi:978
msgid ""
"The function @code{frame-list} returns a list of all the frames that have "
"not been deleted.  It is analogous to @code{buffer-list} for buffers, and "
"includes frames on all terminals.  The list that you get is newly created, "
"so modifying the list doesn't have any effect on the internals of Emacs."
msgstr ""

# type: defun
#: lispref/frames.texi:980
#, no-wrap
msgid "visible-frame-list"
msgstr ""

# type: defun
#: lispref/frames.texi:984
msgid ""
"This function returns a list of just the currently visible frames.  @xref"
"{Visibility of Frames}.  (Terminal frames always count as ``visible,'' even "
"though only the selected one is actually displayed.)"
msgstr ""

# type: defun
#: lispref/frames.texi:986
#, no-wrap
msgid "next-frame &optional frame minibuf"
msgstr ""

# type: defun
#: lispref/frames.texi:992
msgid ""
"The function @code{next-frame} lets you cycle conveniently through all the "
"frames on the current display from an arbitrary starting point.  It returns "
"the ``next'' frame after @var{frame} in the cycle.  If @var{frame} is "
"omitted or @code{nil}, it defaults to the selected frame (@pxref{Input "
"Focus})."
msgstr ""

# type: defun
#: lispref/frames.texi:994
msgid "The second argument, @var{minibuf}, says which frames to consider:"
msgstr ""

# type: table
#: lispref/frames.texi:998
msgid "Exclude minibuffer-only frames."
msgstr ""

# type: code{#1}
#: lispref/frames.texi:998 lispref/windows.texi:345 lispref/windows.texi:607
#, no-wrap
msgid "visible"
msgstr ""

# type: table
#: lispref/frames.texi:1000
msgid "Consider all visible frames."
msgstr ""

# type: table
#: lispref/frames.texi:1002
msgid "Consider all visible or iconified frames."
msgstr ""

# type: item
#: lispref/frames.texi:1002
#, no-wrap
msgid "a window"
msgstr ""

# type: table
#: lispref/frames.texi:1005
msgid ""
"Consider only the frames using that particular window as their minibuffer."
msgstr ""

# type: table
#: lispref/frames.texi:1007
msgid "Consider all frames."
msgstr ""

# type: defun
#: lispref/frames.texi:1010
#, no-wrap
msgid "previous-frame &optional frame minibuf"
msgstr ""

# type: defun
#: lispref/frames.texi:1013
msgid ""
"Like @code{next-frame}, but cycles through all frames in the opposite "
"direction."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1017
msgid ""
"See also @code{next-window} and @code{previous-window}, in @ref{Cyclic "
"Window Ordering}."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1023
msgid ""
"Each window is part of one and only one frame; you can get the frame with "
"@code{window-frame}."
msgstr ""

# type: defun
#: lispref/frames.texi:1024
#, no-wrap
msgid "window-frame window"
msgstr ""

# type: defun
#: lispref/frames.texi:1026
msgid "This function returns the frame that @var{window} is on."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1033
msgid ""
"All the non-minibuffer windows in a frame are arranged in a cyclic order.  "
"The order runs from the frame's top window, which is at the upper left "
"corner, down and to the right, until it reaches the window at the lower "
"right corner (always the minibuffer window, if the frame has one), and then "
"it moves back to the top.  @xref{Cyclic Window Ordering}."
msgstr ""

# type: defun
#: lispref/frames.texi:1034
#, no-wrap
msgid "frame-first-window &optional frame"
msgstr ""

# type: defun
#: lispref/frames.texi:1037
msgid ""
"This returns the topmost, leftmost window of frame @var{frame}.  If omitted "
"or @code{nil}, @var{frame} defaults to the selected frame."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1043
msgid ""
"At any time, exactly one window on any frame is @dfn{selected within the "
"frame}.  The significance of this designation is that selecting the frame "
"also selects this window.  You can get the frame's current selected window "
"with @code{frame-selected-window}."
msgstr ""

# type: defun
#: lispref/frames.texi:1044
#, no-wrap
msgid "frame-selected-window  &optional frame"
msgstr ""

# type: defun
#: lispref/frames.texi:1048
msgid ""
"This function returns the window on @var{frame} that is selected within @var"
"{frame}.  If omitted or @code{nil}, @var{frame} defaults to the selected "
"frame."
msgstr ""

# type: defun
#: lispref/frames.texi:1050
#, no-wrap
msgid "set-frame-selected-window frame window"
msgstr ""

# type: defun
#: lispref/frames.texi:1055
msgid ""
"This sets the selected window of frame @var{frame} to @var{window}.  If @var"
"{frame} is @code{nil}, it operates on the selected frame.  If @var{frame} is "
"the selected frame, this makes @var{window} the selected window.  This "
"function returns @var{window}."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1059
msgid ""
"Conversely, selecting a window for Emacs with @code{select-window} also "
"makes that window selected within its frame.  @xref{Selecting Windows}."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1062
msgid ""
"Another function that (usually) returns one of the windows in a given frame "
"is @code{minibuffer-window}.  @xref{Definition of minibuffer-window}."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1070
msgid ""
"Normally, each frame has its own minibuffer window at the bottom, which is "
"used whenever that frame is selected.  If the frame has a minibuffer, you "
"can get it with @code{minibuffer-window} (@pxref{Definition of minibuffer-"
"window})."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1077
msgid ""
"However, you can also create a frame with no minibuffer.  Such a frame must "
"use the minibuffer window of some other frame.  When you create the frame, "
"you can specify explicitly the minibuffer window to use (in some other "
"frame).  If you don't, then the minibuffer is found in the frame which is "
"the value of the variable @code{default-minibuffer-frame}.  Its value should "
"be a frame that does have a minibuffer."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1081
msgid ""
"If you use a minibuffer-only frame, you might want that frame to raise when "
"you enter the minibuffer.  If so, set the variable @code{minibuffer-auto-"
"raise} to @code{t}.  @xref{Raising and Lowering}."
msgstr ""

# type: defvar
#: lispref/frames.texi:1082
#, no-wrap
msgid "default-minibuffer-frame"
msgstr ""

# type: defvar
#: lispref/frames.texi:1087
msgid ""
"This variable specifies the frame to use for the minibuffer window, by "
"default.  It does not affect existing frames.  It is always local to the "
"current terminal and cannot be buffer-local.  @xref{Multiple Displays}."
msgstr ""

# type: cindex
#: lispref/frames.texi:1091
#, no-wrap
msgid "input focus"
msgstr ""

# type: Plain text
#: lispref/frames.texi:1096
msgid ""
"At any time, one frame in Emacs is the @dfn{selected frame}.  The selected "
"window always resides on the selected frame."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1107
msgid ""
"When Emacs displays its frames on several terminals (@pxref{Multiple "
"Displays}), each terminal has its own selected frame.  But only one of these "
"is ``@emph{the} selected frame'': it's the frame that belongs to the "
"terminal from which the most recent input came.  That is, when Emacs runs a "
"command that came from a certain terminal, the selected frame is the one of "
"that terminal.  Since Emacs runs only a single command at any given time, it "
"needs to consider only one selected frame at a time; this frame is what we "
"call @dfn{the selected frame} in this manual.  The display on which the "
"selected frame is displayed is the @dfn{selected frame's display}."
msgstr ""

# type: defun
#: lispref/frames.texi:1108
#, no-wrap
msgid "selected-frame"
msgstr ""

# type: defun
#: lispref/frames.texi:1110
msgid "This function returns the selected frame."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1118
msgid ""
"Some window systems and window managers direct keyboard input to the window "
"object that the mouse is in; others require explicit clicks or commands to "
"@dfn{shift the focus} to various window objects.  Either way, Emacs "
"automatically keeps track of which frame has the focus.  To switch to a "
"different frame from a Lisp function, call @code{select-frame-set-input-"
"focus}."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1123
msgid ""
"Lisp programs can also switch frames ``temporarily'' by calling the function "
"@code{select-frame}.  This does not alter the window system's concept of "
"focus; rather, it escapes from the window manager's control until that "
"control is somehow reasserted."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1131
msgid ""
"When using a text-only terminal, only one frame can be displayed at a time "
"on the terminal, so after a call to @code{select-frame}, the next redisplay "
"actually displays the newly selected frame.  This frame remains selected "
"until a subsequent call to @code{select-frame} or @code{select-frame-set-"
"input-focus}.  Each terminal frame has a number which appears in the mode "
"line before the buffer name (@pxref{Mode Line Variables})."
msgstr ""

# type: defun
#: lispref/frames.texi:1132
#, no-wrap
msgid "select-frame-set-input-focus frame"
msgstr ""

# type: defun
#: lispref/frames.texi:1138
msgid ""
"This function makes @var{frame} the selected frame, raises it (should it "
"happen to be obscured by other frames) and tries to give it the X server's "
"focus.  On a text-only terminal, the next redisplay displays the new frame "
"on the entire terminal screen.  The return value of this function is not "
"significant."
msgstr ""

# type: defun
#: lispref/frames.texi:1141
#, no-wrap
msgid "select-frame frame"
msgstr ""

# type: defun
#: lispref/frames.texi:1152
msgid ""
"This function selects frame @var{frame}, temporarily disregarding the focus "
"of the X server if any.  The selection of @var{frame} lasts until the next "
"time the user does something to select a different frame, or until the next "
"time this function is called.  (If you are using a window system, the "
"previously selected frame may be restored as the selected frame after return "
"to the command loop, because it still may have the window system's input "
"focus.)  The specified @var{frame} becomes the selected frame, as explained "
"above, and the terminal that @var{frame} is on becomes the selected "
"terminal.  This function returns @var{frame}, or @code{nil} if @var{frame} "
"has been deleted."
msgstr ""

# type: defun
#: lispref/frames.texi:1155
msgid ""
"In general, you should never use @code{select-frame} in a way that could "
"switch to a different terminal without switching back when you're done."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1162
msgid ""
"Emacs cooperates with the window system by arranging to select frames as the "
"server and window manager request.  It does so by generating a special kind "
"of input event, called a @dfn{focus} event, when appropriate.  The command "
"loop handles a focus event by calling @code{handle-switch-frame}.  @xref"
"{Focus Events}."
msgstr ""

# type: deffn
#: lispref/frames.texi:1163
#, no-wrap
msgid "Command handle-switch-frame frame"
msgstr ""

# type: deffn
#: lispref/frames.texi:1165
msgid "This function handles a focus event by selecting frame @var{frame}."
msgstr ""

# type: deffn
#: lispref/frames.texi:1168
msgid ""
"Focus events normally do their job by invoking this command.  Don't call it "
"for any other reason."
msgstr ""

# type: defun
#: lispref/frames.texi:1170
#, no-wrap
msgid "redirect-frame-focus frame &optional focus-frame"
msgstr ""

# type: defun
#: lispref/frames.texi:1176
msgid ""
"This function redirects focus from @var{frame} to @var{focus-frame}.  This "
"means that @var{focus-frame} will receive subsequent keystrokes and events "
"intended for @var{frame}.  After such an event, the value of @code{last-"
"event-frame} will be @var{focus-frame}.  Also, switch-frame events "
"specifying @var{frame} will instead select @var{focus-frame}."
msgstr ""

# type: defun
#: lispref/frames.texi:1180
msgid ""
"If @var{focus-frame} is omitted or @code{nil}, that cancels any existing "
"redirection for @var{frame}, which therefore once again receives its own "
"events."
msgstr ""

# type: defun
#: lispref/frames.texi:1186
msgid ""
"One use of focus redirection is for frames that don't have minibuffers.  "
"These frames use minibuffers on other frames.  Activating a minibuffer on "
"another frame redirects focus to that frame.  This puts the focus on the "
"minibuffer's frame, where it belongs, even though the mouse remains in the "
"frame that activated the minibuffer."
msgstr ""

# type: defun
#: lispref/frames.texi:1192
msgid ""
"Selecting a frame can also change focus redirections.  Selecting frame @code"
"{bar}, when @code{foo} had been selected, changes any redirections pointing "
"to @code{foo} so that they point to @code{bar} instead.  This allows focus "
"redirection to work properly when the user switches from one frame to "
"another using @code{select-window}."
msgstr ""

# type: defun
#: lispref/frames.texi:1196
msgid ""
"This means that a frame whose focus is redirected to itself is treated "
"differently from a frame whose focus is not redirected.  @code{select-frame} "
"affects the former but not the latter."
msgstr ""

# type: defun
#: lispref/frames.texi:1199
msgid ""
"The redirection lasts until @code{redirect-frame-focus} is called to change "
"it."
msgstr ""

# type: defopt
#: lispref/frames.texi:1201
#, no-wrap
msgid "focus-follows-mouse"
msgstr "focus-follows-mouse"

# type: defopt
#: lispref/frames.texi:1208
msgid ""
"This option is how you inform Emacs whether the window manager transfers "
"focus when the user moves the mouse.  Non-@code{nil} says that it does.  "
"When this is so, the command @code{other-frame} moves the mouse to a "
"position consistent with the new selected frame.  (This option has no effect "
"on MS-Windows, where the mouse pointer is always automatically moved by the "
"OS to the selected frame.)"
msgstr ""

# type: cindex
#: lispref/frames.texi:1212
#, no-wrap
msgid "visible frame"
msgstr ""

# type: cindex
#: lispref/frames.texi:1213
#, no-wrap
msgid "invisible frame"
msgstr ""

# type: cindex
#: lispref/frames.texi:1214
#, no-wrap
msgid "iconified frame"
msgstr ""

# type: cindex
#: lispref/frames.texi:1215
#, no-wrap
msgid "frame visibility"
msgstr ""

# type: Plain text
#: lispref/frames.texi:1222
msgid ""
"A window frame may be @dfn{visible}, @dfn{invisible}, or @dfn{iconified}.  "
"If it is visible, you can see its contents, unless other windows cover it.  "
"If it is iconified, the frame's contents do not appear on the screen, but an "
"icon does.  If the frame is invisible, it doesn't show on the screen, not "
"even as an icon."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1225
msgid ""
"Visibility is meaningless for terminal frames, since only the selected one "
"is actually displayed in any case."
msgstr ""

# type: deffn
#: lispref/frames.texi:1226
#, no-wrap
msgid "Command make-frame-visible &optional frame"
msgstr ""

# type: deffn
#: lispref/frames.texi:1231
msgid ""
"This function makes frame @var{frame} visible.  If you omit @var{frame}, it "
"makes the selected frame visible.  This does not raise the frame, but you "
"can do that with @code{raise-frame} if you wish (@pxref{Raising and "
"Lowering})."
msgstr ""

# type: deffn
#: lispref/frames.texi:1233
#, no-wrap
msgid "Command make-frame-invisible &optional frame force"
msgstr ""

# type: deffn
#: lispref/frames.texi:1236
msgid ""
"This function makes frame @var{frame} invisible.  If you omit @var{frame}, "
"it makes the selected frame invisible."
msgstr ""

# type: deffn
#: lispref/frames.texi:1239
msgid ""
"Unless @var{force} is non-@code{nil}, this function refuses to make @var"
"{frame} invisible if all other frames are invisible.."
msgstr ""

# type: deffn
#: lispref/frames.texi:1241
#, no-wrap
msgid "Command iconify-frame &optional frame"
msgstr ""

# type: deffn
#: lispref/frames.texi:1244
msgid ""
"This function iconifies frame @var{frame}.  If you omit @var{frame}, it "
"iconifies the selected frame."
msgstr ""

# type: defun
#: lispref/frames.texi:1246
#, no-wrap
msgid "frame-visible-p frame"
msgstr ""

# type: defun
#: lispref/frames.texi:1250
msgid ""
"This returns the visibility status of frame @var{frame}.  The value is @code"
"{t} if @var{frame} is visible, @code{nil} if it is invisible, and @code"
"{icon} if it is iconified."
msgstr ""

# type: defun
#: lispref/frames.texi:1254
msgid ""
"On a text-only terminal, all frames are considered visible, whether they are "
"currently being displayed or not, and this function returns @code{t} for all "
"frames."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1259
msgid ""
"The visibility status of a frame is also available as a frame parameter.  "
"You can read or change it as such.  @xref{Management Parameters}."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1264
msgid ""
"The user can iconify and deiconify frames with the window manager.  This "
"happens below the level at which Emacs can exert any control, but Emacs does "
"provide events that you can use to keep track of such changes.  @xref{Misc "
"Events}."
msgstr ""

# type: section
#: lispref/frames.texi:1266
#, no-wrap
msgid "Raising and Lowering Frames"
msgstr ""

# type: Plain text
#: lispref/frames.texi:1274
msgid ""
"Most window systems use a desktop metaphor.  Part of this metaphor is the "
"idea that windows are stacked in a notional third dimension perpendicular to "
"the screen surface, and thus ordered from ``highest'' to ``lowest.'' Where "
"two windows overlap, the one higher up covers the one underneath.  Even a "
"window at the bottom of the stack can be seen if no other window overlaps it."
msgstr ""

# type: cindex
#: lispref/frames.texi:1276
#, no-wrap
msgid "lowering a frame"
msgstr ""

# type: Plain text
#: lispref/frames.texi:1283
msgid ""
"A window's place in this ordering is not fixed; in fact, users tend to "
"change the order frequently.  @dfn{Raising} a window means moving it ``up,'' "
"to the top of the stack.  @dfn{Lowering} a window means moving it to the "
"bottom of the stack.  This motion is in the notional third dimension only, "
"and does not change the position of the window on the screen."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1285
msgid "You can raise and lower Emacs frame Windows with these functions:"
msgstr ""

# type: deffn
#: lispref/frames.texi:1286
#, no-wrap
msgid "Command raise-frame &optional frame"
msgstr ""

# type: deffn
#: lispref/frames.texi:1289
msgid ""
"This function raises frame @var{frame} (default, the selected frame).  If "
"@var{frame} is invisible or iconified, this makes it visible."
msgstr ""

# type: deffn
#: lispref/frames.texi:1291
#, no-wrap
msgid "Command lower-frame &optional frame"
msgstr ""

# type: deffn
#: lispref/frames.texi:1293
msgid "This function lowers frame @var{frame} (default, the selected frame)."
msgstr ""

# type: defopt
#: lispref/frames.texi:1295
#, no-wrap
msgid "minibuffer-auto-raise"
msgstr "minibuffer-auto-raise"

# type: defopt
#: lispref/frames.texi:1298
msgid ""
"If this is non-@code{nil}, activation of the minibuffer raises the frame "
"that the minibuffer window is in."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1303
msgid ""
"You can also enable auto-raise (raising automatically when a frame is "
"selected) or auto-lower (lowering automatically when it is deselected)  for "
"any frame using frame parameters.  @xref{Management Parameters}."
msgstr ""

# type: cindex
#: lispref/frames.texi:1306
#, no-wrap
msgid "frame configuration"
msgstr ""

# type: Plain text
#: lispref/frames.texi:1311
msgid ""
"A @dfn{frame configuration} records the current arrangement of frames, all "
"their properties, and the window configuration of each one.  (@xref{Window "
"Configurations}.)"
msgstr ""

# type: defun
#: lispref/frames.texi:1312
#, no-wrap
msgid "current-frame-configuration"
msgstr ""

# type: defun
#: lispref/frames.texi:1315
msgid ""
"This function returns a frame configuration list that describes the current "
"arrangement of frames and their contents."
msgstr ""

# type: defun
#: lispref/frames.texi:1317
#, no-wrap
msgid "set-frame-configuration configuration &optional nodelete"
msgstr ""

# type: defun
#: lispref/frames.texi:1321
msgid ""
"This function restores the state of frames described in @var"
"{configuration}.  However, this function does not restore deleted frames."
msgstr ""

# type: defun
#: lispref/frames.texi:1325
msgid ""
"Ordinarily, this function deletes all existing frames not listed in @var"
"{configuration}.  But if @var{nodelete} is non-@code{nil}, the unwanted "
"frames are iconified instead."
msgstr ""

# type: cindex
#: lispref/frames.texi:1329
#, no-wrap
msgid "mouse tracking"
msgstr ""

# type: Plain text
#: lispref/frames.texi:1336
msgid ""
"Sometimes it is useful to @dfn{track} the mouse, which means to display "
"something to indicate where the mouse is and move the indicator as the mouse "
"moves.  For efficient mouse tracking, you need a way to wait until the mouse "
"actually moves."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1343
msgid ""
"The convenient way to track the mouse is to ask for events to represent "
"mouse motion.  Then you can wait for motion by waiting for an event.  In "
"addition, you can easily handle any other sorts of events that may occur.  "
"That is useful, because normally you don't want to track the mouse forever---"
"only until some other event, such as the release of a button."
msgstr ""

# type: defspec
#: lispref/frames.texi:1344
#, no-wrap
msgid "track-mouse body@dots{}"
msgstr ""

# type: defspec
#: lispref/frames.texi:1349
msgid ""
"This special form executes @var{body}, with generation of mouse motion "
"events enabled.  Typically @var{body} would use @code{read-event} to read "
"the motion events and modify the display accordingly.  @xref{Motion Events}, "
"for the format of mouse motion events."
msgstr ""

# type: defspec
#: lispref/frames.texi:1354
msgid ""
"The value of @code{track-mouse} is that of the last form in @var{body}.  You "
"should design @var{body} to return when it sees the up-event that indicates "
"the release of the button, or whatever kind of event means it is time to "
"stop tracking."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1359
msgid ""
"The usual purpose of tracking mouse motion is to indicate on the screen the "
"consequences of pushing or releasing a button at the current position."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1364
msgid ""
"In many cases, you can avoid the need to track the mouse by using the @code"
"{mouse-face} text property (@pxref{Special Properties}).  That works at a "
"much lower level and runs more smoothly than Lisp-level mouse tracking."
msgstr ""

# type: ignore
#: lispref/frames.texi:1373
#, no-wrap
msgid ""
"These functions change the screen appearance instantaneously.  The\n"
"effect is transient, only until the next ordinary Emacs redisplay.  That\n"
"is OK for mouse tracking, since it doesn't make sense for mouse tracking\n"
"to change the text, and the body of @code{track-mouse} normally reads\n"
"the events itself and does not do redisplay.\n"
"\n"
msgstr ""

# type: defun
#: lispref/frames.texi:1374
#, no-wrap
msgid "x-contour-region window beg end"
msgstr ""

# type: defun
#: lispref/frames.texi:1377
#, no-wrap
msgid ""
"This function draws lines to make a box around the text from @var{beg}\n"
"to @var{end}, in window @var{window}.\n"
msgstr ""

# type: defun
#: lispref/frames.texi:1379
#, no-wrap
msgid "x-uncontour-region window beg end"
msgstr ""

# type: defun
#: lispref/frames.texi:1383
#, no-wrap
msgid ""
"This function erases the lines that would make a box around the text\n"
"from @var{beg} to @var{end}, in window @var{window}.  Use it to remove\n"
"a contour that you previously made by calling @code{x-contour-region}.\n"
msgstr ""

# type: defun
#: lispref/frames.texi:1385
#, no-wrap
msgid "x-draw-rectangle frame left top right bottom"
msgstr ""

# type: defun
#: lispref/frames.texi:1390
#, no-wrap
msgid ""
"This function draws a hollow rectangle on frame @var{frame} with the\n"
"specified edge coordinates, all measured in pixels from the inside top\n"
"left corner.  It uses the cursor color, the one used for indicating the\n"
"location of point.\n"
msgstr ""

# type: defun
#: lispref/frames.texi:1392
#, no-wrap
msgid "x-erase-rectangle frame left top right bottom"
msgstr ""

# type: defun
#: lispref/frames.texi:1397
#, no-wrap
msgid ""
"This function erases a hollow rectangle on frame @var{frame} with the\n"
"specified edge coordinates, all measured in pixels from the inside top\n"
"left corner.  Erasure means redrawing the text and background that\n"
"normally belong in the specified rectangle.\n"
msgstr ""

# type: cindex
#: lispref/frames.texi:1402
#, no-wrap
msgid "mouse position"
msgstr ""

# type: cindex
#: lispref/frames.texi:1403
#, no-wrap
msgid "position of mouse"
msgstr ""

# type: Plain text
#: lispref/frames.texi:1407
msgid ""
"The functions @code{mouse-position} and @code{set-mouse-position} give "
"access to the current position of the mouse."
msgstr ""

# type: defun
#: lispref/frames.texi:1408
#, no-wrap
msgid "mouse-position"
msgstr ""

# type: defun
#: lispref/frames.texi:1413
msgid ""
"This function returns a description of the position of the mouse.  The value "
"looks like @code{(@var{frame} @var{x} . @var{y})}, where @var{x} and @var{y} "
"are integers giving the position in characters relative to the top left "
"corner of the inside of @var{frame}."
msgstr ""

# type: item
#: lispref/frames.texi:1415 lispref/hooks.texi:237
#, no-wrap
msgid "mouse-position-function"
msgstr ""

# type: defvar
#: lispref/frames.texi:1420
msgid ""
"If non-@code{nil}, the value of this variable is a function for @code{mouse-"
"position} to call.  @code{mouse-position} calls this function just before "
"returning, with its normal return value as the sole argument, and it returns "
"whatever this function returns to it."
msgstr ""

# type: defvar
#: lispref/frames.texi:1423
msgid ""
"This abnormal hook exists for the benefit of packages like @file{xt-mouse."
"el} that need to do mouse handling at the Lisp level."
msgstr ""

# type: defun
#: lispref/frames.texi:1425
#, no-wrap
msgid "set-mouse-position frame x y"
msgstr ""

# type: defun
#: lispref/frames.texi:1431
msgid ""
"This function @dfn{warps the mouse} to position @var{x}, @var{y} in frame "
"@var{frame}.  The arguments @var{x} and @var{y} are integers, giving the "
"position in characters relative to the top left corner of the inside of @var"
"{frame}.  If @var{frame} is not visible, this function does nothing.  The "
"return value is not significant."
msgstr ""

# type: defun
#: lispref/frames.texi:1433
#, no-wrap
msgid "mouse-pixel-position"
msgstr ""

# type: defun
#: lispref/frames.texi:1436
msgid ""
"This function is like @code{mouse-position} except that it returns "
"coordinates in units of pixels rather than units of characters."
msgstr ""

# type: defun
#: lispref/frames.texi:1438
#, no-wrap
msgid "set-mouse-pixel-position frame x y"
msgstr ""

# type: defun
#: lispref/frames.texi:1442
msgid ""
"This function warps the mouse like @code{set-mouse-position} except that @var"
"{x} and @var{y} are in units of pixels rather than units of characters.  "
"These coordinates are not required to be within the frame."
msgstr ""

# type: defun
#: lispref/frames.texi:1445
msgid ""
"If @var{frame} is not visible, this function does nothing.  The return value "
"is not significant."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1454
msgid ""
"When using a window system, a Lisp program can pop up a menu so that the "
"user can choose an alternative with the mouse."
msgstr ""

# type: defun
#: lispref/frames.texi:1455
#, no-wrap
msgid "x-popup-menu position menu"
msgstr ""

# type: defun
#: lispref/frames.texi:1458
msgid ""
"This function displays a pop-up menu and returns an indication of what "
"selection the user makes."
msgstr ""

# type: defun
#: lispref/frames.texi:1463
msgid ""
"The argument @var{position} specifies where on the screen to put the top "
"left corner of the menu.  It can be either a mouse button event (which says "
"to put the menu where the user actuated the button) or a list of this form:"
msgstr ""

# type: example
#: lispref/frames.texi:1466
#, no-wrap
msgid "((@var{xoffset} @var{yoffset}) @var{window})\n"
msgstr ""

# type: defun
#: lispref/frames.texi:1472
msgid ""
"where @var{xoffset} and @var{yoffset} are coordinates, measured in pixels, "
"counting from the top left corner of @var{window}.  @var{window} may be a "
"window or a frame."
msgstr ""

# type: defun
#: lispref/frames.texi:1477
msgid ""
"If @var{position} is @code{t}, it means to use the current mouse position.  "
"If @var{position} is @code{nil}, it means to precompute the key binding "
"equivalents for the keymaps specified in @var{menu}, without actually "
"displaying or popping up the menu."
msgstr ""

# type: defun
#: lispref/frames.texi:1484
msgid ""
"The argument @var{menu} says what to display in the menu.  It can be a "
"keymap or a list of keymaps (@pxref{Menu Keymaps}).  In this case, the "
"return value is the list of events corresponding to the user's choice.  "
"(This list has more than one element if the choice occurred in a submenu.)  "
"Note that @code{x-popup-menu} does not actually execute the command bound to "
"that sequence of events."
msgstr ""

# type: defun
#: lispref/frames.texi:1486
msgid "Alternatively, @var{menu} can have the following form:"
msgstr ""

# type: example
#: lispref/frames.texi:1489
#, no-wrap
msgid "(@var{title} @var{pane1} @var{pane2}...)\n"
msgstr ""

# type: defun
#: lispref/frames.texi:1493
msgid "where each pane is a list of form"
msgstr ""

# type: example
#: lispref/frames.texi:1496
#, no-wrap
msgid "(@var{title} @var{item1} @var{item2}...)\n"
msgstr ""

# type: defun
#: lispref/frames.texi:1502
msgid ""
"Each item should normally be a cons cell @code{(@var{line} . @var{value})}, "
"where @var{line} is a string, and @var{value} is the value to return if that "
"@var{line} is chosen.  An item can also be a string; this makes a non-"
"selectable line in the menu."
msgstr ""

# type: defun
#: lispref/frames.texi:1509
msgid ""
"If the user gets rid of the menu without making a valid choice, for instance "
"by clicking the mouse away from a valid choice or by typing keyboard input, "
"then this normally results in a quit and @code{x-popup-menu} does not "
"return.  But if @var{position} is a mouse button event (indicating that the "
"user invoked the menu with the mouse) then no quit occurs and @code{x-popup-"
"menu} returns @code{nil}."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1518
msgid ""
"@strong{Usage note:} Don't use @code{x-popup-menu} to display a menu if you "
"could do the job with a prefix key defined with a menu keymap.  If you use a "
"menu keymap to implement a menu, @kbd{C-h c} and @kbd{C-h a} can see the "
"individual items in that menu and provide help for them.  If instead you "
"implement the menu by defining a command that calls @code{x-popup-menu}, the "
"help facilities cannot know what happens inside that command, so they cannot "
"give any help for the menu's items."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1526
msgid ""
"The menu bar mechanism, which lets you switch between submenus by moving the "
"mouse, cannot look within the definition of a command to see that it calls "
"@code{x-popup-menu}.  Therefore, if you try to implement a submenu using "
"@code{x-popup-menu}, it cannot work with the menu bar in an integrated "
"fashion.  This is why all menu bar submenus are implemented with menu "
"keymaps within the parent menu, and never with @code{x-popup-menu}.  @xref"
"{Menu Bar}."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1531
msgid ""
"If you want a menu bar submenu to have contents that vary, you should still "
"use a menu keymap to implement it.  To make the contents vary, add a hook "
"function to @code{menu-bar-update-hook} to update the contents of the menu "
"keymap as necessary."
msgstr ""

# type: cindex
#: lispref/frames.texi:1534
#, no-wrap
msgid "dialog boxes"
msgstr ""

# type: Plain text
#: lispref/frames.texi:1544
msgid ""
"A dialog box is a variant of a pop-up menu---it looks a little different, it "
"always appears in the center of a frame, and it has just one level and one "
"or more buttons.  The main use of dialog boxes is for asking questions that "
"the user can answer with ``yes,'' ``no,'' and a few other alternatives.  "
"With a single button, they can also force the user to acknowledge important "
"information.  The functions @code{y-or-n-p} and @code{yes-or-no-p} use "
"dialog boxes instead of the keyboard, when called from commands invoked by "
"mouse clicks."
msgstr ""

# type: defun
#: lispref/frames.texi:1545
#, no-wrap
msgid "x-popup-dialog position contents &optional header"
msgstr ""

# type: defun
#: lispref/frames.texi:1549
msgid ""
"This function displays a pop-up dialog box and returns an indication of what "
"selection the user makes.  The argument @var{contents} specifies the "
"alternatives to offer; it has this format:"
msgstr ""

# type: example
#: lispref/frames.texi:1552
#, no-wrap
msgid "(@var{title} (@var{string} . @var{value})@dots{})\n"
msgstr ""

# type: defun
#: lispref/frames.texi:1557
msgid ""
"which looks like the list that specifies a single pane for @code{x-popup-"
"menu}."
msgstr ""

# type: defun
#: lispref/frames.texi:1559
msgid "The return value is @var{value} from the chosen alternative."
msgstr ""

# type: defun
#: lispref/frames.texi:1563
msgid ""
"As for @code{x-popup-menu}, an element of the list may be just a string "
"instead of a cons cell @code{(@var{string} . @var{value})}.  That makes a "
"box that cannot be selected."
msgstr ""

# type: defun
#: lispref/frames.texi:1569
msgid ""
"If @code{nil} appears in the list, it separates the left-hand items from the "
"right-hand items; items that precede the @code{nil} appear on the left, and "
"items that follow the @code{nil} appear on the right.  If you don't include "
"a @code{nil} in the list, then approximately half the items appear on each "
"side."
msgstr ""

# type: defun
#: lispref/frames.texi:1574
msgid ""
"Dialog boxes always appear in the center of a frame; the argument @var"
"{position} specifies which frame.  The possible values are as in @code{x-"
"popup-menu}, but the precise coordinates or the individual window don't "
"matter; only the frame matters."
msgstr ""

# type: defun
#: lispref/frames.texi:1578
msgid ""
"If @var{header} is non-@code{nil}, the frame title for the box is @samp"
"{Information}, otherwise it is @samp{Question}.  The former is used for @code"
"{message-box} (@pxref{message-box})."
msgstr ""

# type: defun
#: lispref/frames.texi:1582
msgid ""
"In some configurations, Emacs cannot display a real dialog box; so instead "
"it displays the same items in a pop-up menu in the center of the frame."
msgstr ""

# type: defun
#: lispref/frames.texi:1586
msgid ""
"If the user gets rid of the dialog box without making a valid choice, for "
"instance using the window manager, then this produces a quit and @code{x-"
"popup-dialog} does not return."
msgstr ""

# type: cindex
#: lispref/frames.texi:1590
#, no-wrap
msgid "pointer shape"
msgstr ""

# type: cindex
#: lispref/frames.texi:1591
#, no-wrap
msgid "mouse pointer shape"
msgstr ""

# type: Plain text
#: lispref/frames.texi:1600
msgid ""
"You can specify the mouse pointer style for particular text or images using "
"the @code{pointer} text property, and for images with the @code{:pointer} "
"and @code{:map} image properties.  The values you can use in these "
"properties are @code{text} (or @code{nil}), @code{arrow}, @code{hand}, @code"
"{vdrag}, @code{hdrag}, @code{modeline}, and @code{hourglass}.  @code{text} "
"stands for the usual mouse pointer style used over text."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1605
msgid ""
"Over void parts of the window (parts that do not correspond to any of the "
"buffer contents), the mouse pointer usually uses the @code{arrow} style, but "
"you can specify a different style (one of those above) by setting @code{void-"
"text-area-pointer}."
msgstr ""

# type: defvar
#: lispref/frames.texi:1606
#, no-wrap
msgid "void-text-area-pointer"
msgstr ""

# type: defvar
#: lispref/frames.texi:1611
msgid ""
"This variable specifies the mouse pointer style for void text areas.  These "
"include the areas after the end of a line or below the last line in the "
"buffer.  The default is to use the @code{arrow} (non-text)  pointer style."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1615
msgid ""
"You can specify what the @code{text} pointer style really looks like by "
"setting the variable @code{x-pointer-shape}."
msgstr ""

# type: defvar
#: lispref/frames.texi:1616
#, no-wrap
msgid "x-pointer-shape"
msgstr ""

# type: defvar
#: lispref/frames.texi:1619
msgid ""
"This variable specifies the pointer shape to use ordinarily in the Emacs "
"frame, for the @code{text} pointer style."
msgstr ""

# type: defvar
#: lispref/frames.texi:1621
#, no-wrap
msgid "x-sensitive-text-pointer-shape"
msgstr ""

# type: defvar
#: lispref/frames.texi:1624
msgid ""
"This variable specifies the pointer shape to use when the mouse is over "
"mouse-sensitive text."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1630
msgid ""
"These variables affect newly created frames.  They do not normally affect "
"existing frames; however, if you set the mouse color of a frame, that also "
"installs the current value of those two variables.  @xref{Color Parameters}."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1634
msgid ""
"The values you can use, to specify either of these pointer shapes, are "
"defined in the file @file{lisp/term/x-win.el}.  Use @kbd{M-x apropos @key"
"{RET} x-pointer @key{RET}} to see a list of them."
msgstr ""

# type: cindex
#: lispref/frames.texi:1637
#, no-wrap
msgid "selection (for window systems)"
msgstr ""

# type: Plain text
#: lispref/frames.texi:1644
msgid ""
"The X server records a set of @dfn{selections} which permit transfer of data "
"between application programs.  The various selections are distinguished by "
"@dfn{selection types}, represented in Emacs by symbols.  X clients including "
"Emacs can read or set the selection for any given type."
msgstr ""

# type: deffn
#: lispref/frames.texi:1645
#, no-wrap
msgid "Command x-set-selection type data"
msgstr ""

# type: deffn
#: lispref/frames.texi:1653
msgid ""
"This function sets a ``selection'' in the X server.  It takes two arguments: "
"a selection type @var{type}, and the value to assign to it, @var{data}.  If "
"@var{data} is @code{nil}, it means to clear out the selection.  Otherwise, "
"@var{data} may be a string, a symbol, an integer (or a cons of two integers "
"or list of two integers), an overlay, or a cons of two markers pointing to "
"the same buffer.  An overlay or a pair of markers stands for text in the "
"overlay or between the markers."
msgstr ""

# type: deffn
#: lispref/frames.texi:1656
msgid ""
"The argument @var{data} may also be a vector of valid non-vector selection "
"values."
msgstr ""

# type: deffn
#: lispref/frames.texi:1662
msgid ""
"Each possible @var{type} has its own selection value, which changes "
"independently.  The usual values of @var{type} are @code{PRIMARY}, @code"
"{SECONDARY} and @code{CLIPBOARD}; these are symbols with upper-case names, "
"in accord with X Window System conventions.  If @var{type} is @code{nil}, "
"that stands for @code{PRIMARY}."
msgstr ""

# type: deffn
#: lispref/frames.texi:1664
msgid "This function returns @var{data}."
msgstr ""

# type: defun
#: lispref/frames.texi:1666
#, no-wrap
msgid "x-get-selection &optional type data-type"
msgstr ""

# type: defun
#: lispref/frames.texi:1671
msgid ""
"This function accesses selections set up by Emacs or by other X clients.  It "
"takes two optional arguments, @var{type} and @var{data-type}.  The default "
"for @var{type}, the selection type, is @code{PRIMARY}."
msgstr ""

# type: defun
#: lispref/frames.texi:1682
msgid ""
"The @var{data-type} argument specifies the form of data conversion to use, "
"to convert the raw data obtained from another X client into Lisp data.  "
"Meaningful values include @code{TEXT}, @code{STRING}, @code{UTF8_STRING}, "
"@code{TARGETS}, @code{LENGTH}, @code{DELETE}, @code{FILE_NAME}, @code"
"{CHARACTER_POSITION}, @code{NAME}, @code{LINE_NUMBER}, @code{COLUMN_NUMBER}, "
"@code{OWNER_OS}, @code{HOST_NAME}, @code{USER}, @code{CLASS}, @code{ATOM}, "
"and @code{INTEGER}.  (These are symbols with upper-case names in accord with "
"X conventions.)  The default for @var{data-type} is @code{STRING}."
msgstr ""

# type: cindex
#: lispref/frames.texi:1684
#, no-wrap
msgid "cut buffer"
msgstr ""

# type: Plain text
#: lispref/frames.texi:1689
msgid ""
"The X server also has a set of eight numbered @dfn{cut buffers} which can "
"store text or other data being moved between applications.  Cut buffers are "
"considered obsolete, but Emacs supports them for the sake of X clients that "
"still use them.  Cut buffers are numbered from 0 to 7."
msgstr ""

# type: defun
#: lispref/frames.texi:1690
#, no-wrap
msgid "x-get-cut-buffer &optional n"
msgstr ""

# type: defun
#: lispref/frames.texi:1693
msgid ""
"This function returns the contents of cut buffer number @var{n}.  If omitted "
"@var{n} defaults to 0."
msgstr ""

# type: defun
#: lispref/frames.texi:1695
#, no-wrap
msgid "x-set-cut-buffer string &optional push"
msgstr ""

# type: anchor{#1}
#: lispref/frames.texi:1704
msgid "Definition of x-set-cut-buffer"
msgstr ""

# type: defun
#: lispref/frames.texi:1704
msgid ""
"This function stores @var{string} into the first cut buffer (cut buffer 0).  "
"If @var{push} is @code{nil}, only the first cut buffer is changed.  If @var"
"{push} is non-@code{nil}, that says to move the values down through the "
"series of cut buffers, much like the way successive kills in Emacs move down "
"the kill ring.  In other words, the previous value of the first cut buffer "
"moves into the second cut buffer, and the second to the third, and so on "
"through all eight cut buffers."
msgstr ""

# type: defvar
#: lispref/frames.texi:1706
#, no-wrap
msgid "selection-coding-system"
msgstr ""

# type: defvar
#: lispref/frames.texi:1711
msgid ""
"This variable specifies the coding system to use when reading and writing "
"selections or the clipboard.  @xref{Coding Systems}.  The default is @code"
"{compound-text-with-extensions}, which converts to the text representation "
"that X11 normally uses."
msgstr ""

# type: cindex
#: lispref/frames.texi:1713
#, no-wrap
msgid "clipboard support (for MS-Windows)"
msgstr ""

# type: Plain text
#: lispref/frames.texi:1719
msgid ""
"When Emacs runs on MS-Windows, it does not implement X selections in "
"general, but it does support the clipboard.  @code{x-get-selection} and @code"
"{x-set-selection} on MS-Windows support the text data type only; if the "
"clipboard holds other types of data, Emacs treats the clipboard as empty."
msgstr ""

# type: cindex
#: lispref/frames.texi:1720
#, no-wrap
msgid "scrap support (for Mac OS)"
msgstr ""

# type: Plain text
#: lispref/frames.texi:1728
msgid ""
"On Mac OS, selection-like data transfer between applications is performed "
"through a mechanism called @dfn{scraps}.  The clipboard is a particular "
"scrap named @code{com.apple.scrap.clipboard}.  Types of scrap data are "
"called @dfn{scrap flavor types}, which are identified by four-char codes "
"such as @code{TEXT}.  Emacs associates a selection with a scrap, and a "
"selection type with a scrap flavor type via @code{mac-scrap-name} and @code"
"{mac-ostype} properties, respectively."
msgstr ""

# type: example
#: lispref/frames.texi:1734
#, no-wrap
msgid ""
"(get 'CLIPBOARD 'mac-scrap-name)\n"
"     @result{} \"com.apple.scrap.clipboard\"\n"
"(get 'com.apple.traditional-mac-plain-text 'mac-ostype)\n"
"     @result{} \"TEXT\"\n"
msgstr ""

# type: Plain text
#: lispref/frames.texi:1740
msgid ""
"Conventionally, selection types for scrap flavor types on Mac OS have the "
"form of @acronym{UTI, Uniform Type Identifier} such as @code{com.apple."
"traditional-mac-plain-text}, @code{public.utf16-plain-text}, and @code"
"{public.file-url}."
msgstr ""

# type: defopt
#: lispref/frames.texi:1741
#, no-wrap
msgid "x-select-enable-clipboard"
msgstr "x-select-enable-clipboard"

# type: defopt
#: lispref/frames.texi:1747
msgid ""
"If this is non-@code{nil}, the Emacs yank functions consult the clipboard "
"before the primary selection, and the kill functions store in the clipboard "
"as well as the primary selection.  Otherwise they do not access the "
"clipboard at all.  The default is @code{nil} on most systems, but @code{t} "
"on MS-Windows and Mac."
msgstr ""

# type: vindex
#: lispref/frames.texi:1752
#, no-wrap
msgid "x-dnd-test-function"
msgstr ""

# type: vindex
#: lispref/frames.texi:1753
#, no-wrap
msgid "x-dnd-known-types"
msgstr ""

# type: Plain text
#: lispref/frames.texi:1762
msgid ""
"When a user drags something from another application over Emacs, that other "
"application expects Emacs to tell it if Emacs can handle the data that is "
"dragged.  The variable @code{x-dnd-test-function} is used by Emacs to "
"determine what to reply.  The default value is @code{x-dnd-default-test-"
"function} which accepts drops if the type of the data to be dropped is "
"present in @code{x-dnd-known-types}.  You can customize @code{x-dnd-test-"
"function} and/or @code{x-dnd-known-types} if you want Emacs to accept or "
"reject drops based on some other criteria."
msgstr ""

# type: vindex
#: lispref/frames.texi:1763
#, no-wrap
msgid "x-dnd-types-alist"
msgstr ""

# type: Plain text
#: lispref/frames.texi:1768
msgid ""
"If you want to change the way Emacs handles drop of different types or add a "
"new type, customize @code{x-dnd-types-alist}.  This requires detailed "
"knowledge of what types other applications use for drag and drop."
msgstr ""

# type: vindex
#: lispref/frames.texi:1769
#, no-wrap
msgid "dnd-protocol-alist"
msgstr ""

# type: Plain text
#: lispref/frames.texi:1777
msgid ""
"When an URL is dropped on Emacs it may be a file, but it may also be another "
"URL type (ftp, http, etc.).  Emacs first checks @code{dnd-protocol-alist} to "
"determine what to do with the URL.  If there is no match there and if @code"
"{browse-url-browser-function} is an alist, Emacs looks for a match there.  "
"If no match is found the text for the URL is inserted.  If you want to alter "
"Emacs behavior, you can customize these variables."
msgstr ""

# type: cindex
#: lispref/frames.texi:1781
#, no-wrap
msgid "color names"
msgstr ""

# type: cindex
#: lispref/frames.texi:1782
#, no-wrap
msgid "specify color"
msgstr ""

# type: cindex
#: lispref/frames.texi:1783
#, no-wrap
msgid "numerical RGB color specification"
msgstr ""

# type: Plain text
#: lispref/frames.texi:1796
msgid ""
"A color name is text (usually in a string) that specifies a color.  Symbolic "
"names such as @samp{black}, @samp{white}, @samp{red}, etc., are allowed; use "
"@kbd{M-x list-colors-display} to see a list of defined names.  You can also "
"specify colors numerically in forms such as @samp{#@var{rgb}} and @samp{RGB:"
"@var{r}/@var{g}/@var{b}}, where @var{r} specifies the red level, @var{g} "
"specifies the green level, and @var{b} specifies the blue level.  You can "
"use either one, two, three, or four hex digits for @var{r}; then you must "
"use the same number of hex digits for all @var{g} and @var{b} as well, "
"making either 3, 6, 9 or 12 hex digits in all.  (See the documentation of "
"the X Window System for more details about numerical RGB specification of "
"colors.)"
msgstr ""

# type: Plain text
#: lispref/frames.texi:1801
msgid ""
"These functions provide a way to determine which color names are valid, and "
"what they look like.  In some cases, the value depends on the @dfn{selected "
"frame}, as described below; see @ref{Input Focus}, for the meaning of the "
"term ``selected frame.''"
msgstr ""

# type: defun
#: lispref/frames.texi:1802
#, no-wrap
msgid "color-defined-p color &optional frame"
msgstr ""

# type: defun
#: lispref/frames.texi:1807
msgid ""
"This function reports whether a color name is meaningful.  It returns @code"
"{t} if so; otherwise, @code{nil}.  The argument @var{frame} says which "
"frame's display to ask about; if @var{frame} is omitted or @code{nil}, the "
"selected frame is used."
msgstr ""

# type: defun
#: lispref/frames.texi:1813
msgid ""
"Note that this does not tell you whether the display you are using really "
"supports that color.  When using X, you can ask for any defined color on any "
"kind of display, and you will get some result---typically, the closest it "
"can do.  To determine whether a frame can really display a certain color, "
"use @code{color-supported-p} (see below)."
msgstr ""

# type: findex
#: lispref/frames.texi:1814
#, no-wrap
msgid "x-color-defined-p"
msgstr "x-color-defined-p"

# type: defun
#: lispref/frames.texi:1817
msgid ""
"This function used to be called @code{x-color-defined-p}, and that name is "
"still supported as an alias."
msgstr ""

# type: defun
#: lispref/frames.texi:1819
#, no-wrap
msgid "defined-colors &optional frame"
msgstr ""

# type: defun
#: lispref/frames.texi:1823
msgid ""
"This function returns a list of the color names that are defined and "
"supported on frame @var{frame} (default, the selected frame).  If @var"
"{frame} does not support colors, the value is @code{nil}."
msgstr ""

# type: findex
#: lispref/frames.texi:1824
#, no-wrap
msgid "x-defined-colors"
msgstr "x-defined-colors"

# type: defun
#: lispref/frames.texi:1827
msgid ""
"This function used to be called @code{x-defined-colors}, and that name is "
"still supported as an alias."
msgstr ""

# type: defun
#: lispref/frames.texi:1829
#, no-wrap
msgid "color-supported-p color &optional frame background-p"
msgstr ""

# type: defun
#: lispref/frames.texi:1833
msgid ""
"This returns @code{t} if @var{frame} can really display the color @var"
"{color} (or at least something close to it).  If @var{frame} is omitted or "
"@code{nil}, the question applies to the selected frame."
msgstr ""

# type: defun
#: lispref/frames.texi:1838
msgid ""
"Some terminals support a different set of colors for foreground and "
"background.  If @var{background-p} is non-@code{nil}, that means you are "
"asking whether @var{color} can be used as a background; otherwise you are "
"asking whether it can be used as a foreground."
msgstr ""

# type: defun
#: lispref/frames.texi:1840
msgid "The argument @var{color} must be a valid color name."
msgstr ""

# type: defun
#: lispref/frames.texi:1842
#, no-wrap
msgid "color-gray-p color &optional frame"
msgstr ""

# type: defun
#: lispref/frames.texi:1847
msgid ""
"This returns @code{t} if @var{color} is a shade of gray, as defined on @var"
"{frame}'s display.  If @var{frame} is omitted or @code{nil}, the question "
"applies to the selected frame.  If @var{color} is not a valid color name, "
"this function returns @code{nil}."
msgstr ""

# type: defun
#: lispref/frames.texi:1849
#, no-wrap
msgid "color-values color &optional frame"
msgstr ""

# type: cindex
#: lispref/frames.texi:1850
#, no-wrap
msgid "rgb value"
msgstr ""

# type: defun
#: lispref/frames.texi:1858
msgid ""
"This function returns a value that describes what @var{color} should ideally "
"look like on @var{frame}.  If @var{color} is defined, the value is a list of "
"three integers, which give the amount of red, the amount of green, and the "
"amount of blue.  Each integer ranges in principle from 0 to 65535, but some "
"displays may not use the full range.  This three-element list is called the "
"@dfn{rgb values} of the color."
msgstr ""

# type: defun
#: lispref/frames.texi:1860
msgid "If @var{color} is not defined, the value is @code{nil}."
msgstr ""

# type: example
#: lispref/frames.texi:1872
#, no-wrap
msgid ""
"(color-values \"black\")\n"
"     @result{} (0 0 0)\n"
"(color-values \"white\")\n"
"     @result{} (65280 65280 65280)\n"
"(color-values \"red\")\n"
"     @result{} (65280 0 0)\n"
"(color-values \"pink\")\n"
"     @result{} (65280 49152 51968)\n"
"(color-values \"hungry\")\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/frames.texi:1878
msgid ""
"The color values are returned for @var{frame}'s display.  If @var{frame} is "
"omitted or @code{nil}, the information is returned for the selected frame's "
"display.  If the frame cannot display colors, the value is @code{nil}."
msgstr ""

# type: findex
#: lispref/frames.texi:1879
#, no-wrap
msgid "x-color-values"
msgstr "x-color-values"

# type: defun
#: lispref/frames.texi:1882
msgid ""
"This function used to be called @code{x-color-values}, and that name is "
"still supported as an alias."
msgstr ""

# type: cindex
#: lispref/frames.texi:1886
#, no-wrap
msgid "colors on text-only terminals"
msgstr ""

# type: Plain text
#: lispref/frames.texi:1894
msgid ""
"Text-only terminals usually support only a small number of colors, and the "
"computer uses small integers to select colors on the terminal.  This means "
"that the computer cannot reliably tell what the selected color looks like; "
"instead, you have to inform your application which small integers correspond "
"to which colors.  However, Emacs does know the standard set of colors and "
"will try to use them automatically."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1897
msgid ""
"The functions described in this section control how terminal colors are used "
"by Emacs."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1900
msgid ""
"Several of these functions use or return @dfn{rgb values}, described in @ref"
"{Color Names}."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1907
msgid ""
"These functions accept a display (either a frame or the name of a terminal) "
"as an optional argument.  We hope in the future to make Emacs support more "
"than one text-only terminal at one time; then this argument will specify "
"which terminal to operate on (the default being the selected frame's "
"terminal; @pxref{Input Focus}).  At present, though, the @var{frame} "
"argument has no effect."
msgstr ""

# type: defun
#: lispref/frames.texi:1908
#, no-wrap
msgid "tty-color-define name number &optional rgb frame"
msgstr ""

# type: defun
#: lispref/frames.texi:1911
msgid ""
"This function associates the color name @var{name} with color number @var"
"{number} on the terminal."
msgstr ""

# type: defun
#: lispref/frames.texi:1917
msgid ""
"The optional argument @var{rgb}, if specified, is an rgb value, a list of "
"three numbers that specify what the color actually looks like.  If you do "
"not specify @var{rgb}, then this color cannot be used by @code{tty-color-"
"approximate} to approximate other colors, because Emacs will not know what "
"it looks like."
msgstr ""

# type: defun
#: lispref/frames.texi:1919
#, no-wrap
msgid "tty-color-clear &optional frame"
msgstr ""

# type: defun
#: lispref/frames.texi:1921
msgid ""
"This function clears the table of defined colors for a text-only terminal."
msgstr ""

# type: defun
#: lispref/frames.texi:1923
#, no-wrap
msgid "tty-color-alist &optional frame"
msgstr ""

# type: defun
#: lispref/frames.texi:1926
msgid ""
"This function returns an alist recording the known colors supported by a "
"text-only terminal."
msgstr ""

# type: defun
#: lispref/frames.texi:1932
msgid ""
"Each element has the form @code{(@var{name} @var{number} . @var{rgb})} or "
"@code{(@var{name} @var{number})}.  Here, @var{name} is the color name, @var"
"{number} is the number used to specify it to the terminal.  If present, @var"
"{rgb} is a list of three color values (for red, green, and blue) that says "
"what the color actually looks like."
msgstr ""

# type: defun
#: lispref/frames.texi:1934
#, no-wrap
msgid "tty-color-approximate rgb &optional frame"
msgstr ""

# type: defun
#: lispref/frames.texi:1939
msgid ""
"This function finds the closest color, among the known colors supported for "
"@var{display}, to that described by the rgb value @var{rgb} (a list of color "
"values).  The return value is an element of @code{tty-color-alist}."
msgstr ""

# type: defun
#: lispref/frames.texi:1941
#, no-wrap
msgid "tty-color-translate color &optional frame"
msgstr ""

# type: defun
#: lispref/frames.texi:1945
msgid ""
"This function finds the closest color to @var{color} among the known colors "
"supported for @var{display} and returns its index (an integer).  If the name "
"@var{color} is not defined, the value is @code{nil}."
msgstr ""

# type: section
#: lispref/frames.texi:1948
#, no-wrap
msgid "X Resources"
msgstr ""

# type: defun
#: lispref/frames.texi:1950
#, no-wrap
msgid "x-get-resource attribute class &optional component subclass"
msgstr ""

# type: defun
#: lispref/frames.texi:1953
msgid ""
"The function @code{x-get-resource} retrieves a resource value from the X "
"Window defaults database."
msgstr ""

# type: defun
#: lispref/frames.texi:1959
msgid ""
"Resources are indexed by a combination of a @dfn{key} and a @dfn{class}.  "
"This function searches using a key of the form @samp{@var{instance}.@var"
"{attribute}} (where @var{instance} is the name under which Emacs was "
"invoked), and using @samp{Emacs.@var{class}} as the class."
msgstr ""

# type: defun
#: lispref/frames.texi:1965
msgid ""
"The optional arguments @var{component} and @var{subclass} add to the key and "
"the class, respectively.  You must specify both of them or neither.  If you "
"specify them, the key is @samp{@var{instance}.@var{component}.@var"
"{attribute}}, and the class is @samp{Emacs.@var{class}.@var{subclass}}."
msgstr ""

# type: defvar
#: lispref/frames.texi:1967
#, no-wrap
msgid "x-resource-class"
msgstr ""

# type: defvar
#: lispref/frames.texi:1972
msgid ""
"This variable specifies the application name that @code{x-get-resource} "
"should look up.  The default value is @code{\"Emacs\"}.  You can examine X "
"resources for application names other than ``Emacs'' by binding this "
"variable to some other string, around a call to @code{x-get-resource}."
msgstr ""

# type: defvar
#: lispref/frames.texi:1974
#, no-wrap
msgid "x-resource-name"
msgstr ""

# type: defvar
#: lispref/frames.texi:1978
msgid ""
"This variable specifies the instance name that @code{x-get-resource} should "
"look up.  The default value is the name Emacs was invoked with, or the value "
"specified with the @samp{-name} or @samp{-rn} switches."
msgstr ""

# type: Plain text
#: lispref/frames.texi:1981
msgid "To illustrate some of the above, suppose that you have the line:"
msgstr ""

# type: example
#: lispref/frames.texi:1984
#, no-wrap
msgid "xterm.vt100.background: yellow\n"
msgstr ""

# type: Plain text
#: lispref/frames.texi:1989
msgid ""
"in your X resources file (whose name is usually @file{~/.Xdefaults} or @file"
"{~/.Xresources}).  Then:"
msgstr ""

# type: group
#: lispref/frames.texi:1995
#, no-wrap
msgid ""
"(let ((x-resource-class \"XTerm\") (x-resource-name \"xterm\"))\n"
"  (x-get-resource \"vt100.background\" \"VT100.Background\"))\n"
"     @result{} \"yellow\"\n"
msgstr ""

# type: group
#: lispref/frames.texi:2000
#, no-wrap
msgid ""
"(let ((x-resource-class \"XTerm\") (x-resource-name \"xterm\"))\n"
"  (x-get-resource \"background\" \"VT100\" \"vt100\" \"Background\"))\n"
"     @result{} \"yellow\"\n"
msgstr ""

# type: cindex
#: lispref/frames.texi:2007
#, no-wrap
msgid "display feature testing"
msgstr ""

# type: Plain text
#: lispref/frames.texi:2013
msgid ""
"The functions in this section describe the basic capabilities of a "
"particular display.  Lisp programs can use them to adapt their behavior to "
"what the display can do.  For example, a program that ordinarily uses a "
"popup menu could use the minibuffer if popup menus are not supported."
msgstr ""

# type: Plain text
#: lispref/frames.texi:2018
msgid ""
"The optional argument @var{display} in these functions specifies which "
"display to ask the question about.  It can be a display name, a frame (which "
"designates the display that frame is on), or @code{nil} (which refers to the "
"selected frame's display, @pxref{Input Focus})."
msgstr ""

# type: Plain text
#: lispref/frames.texi:2021
msgid ""
"@xref{Color Names}, @ref{Text Terminal Colors}, for other functions to "
"obtain information about displays."
msgstr ""

# type: defun
#: lispref/frames.texi:2022
#, no-wrap
msgid "display-popup-menus-p &optional display"
msgstr ""

# type: defun
#: lispref/frames.texi:2027
msgid ""
"This function returns @code{t} if popup menus are supported on @var"
"{display}, @code{nil} if not.  Support for popup menus requires that the "
"mouse be available, since the user cannot choose menu items without a mouse."
msgstr ""

# type: defun
#: lispref/frames.texi:2029
#, no-wrap
msgid "display-graphic-p &optional display"
msgstr ""

# type: defun
#: lispref/frames.texi:2034
msgid ""
"This function returns @code{t} if @var{display} is a graphic display capable "
"of displaying several frames and several different fonts at once.  This is "
"true for displays that use a window system such as X, and false for text-"
"only terminals."
msgstr ""

# type: defun
#: lispref/frames.texi:2036
#, no-wrap
msgid "display-mouse-p &optional display"
msgstr ""

# type: cindex
#: lispref/frames.texi:2037
#, no-wrap
msgid "mouse, availability"
msgstr ""

# type: defun
#: lispref/frames.texi:2040
msgid ""
"This function returns @code{t} if @var{display} has a mouse available, @code"
"{nil} if not."
msgstr ""

# type: defun
#: lispref/frames.texi:2042
#, no-wrap
msgid "display-color-p &optional display"
msgstr ""

# type: findex
#: lispref/frames.texi:2043
#, no-wrap
msgid "x-display-color-p"
msgstr "x-display-color-p"

# type: defun
#: lispref/frames.texi:2047
msgid ""
"This function returns @code{t} if the screen is a color screen.  It used to "
"be called @code{x-display-color-p}, and that name is still supported as an "
"alias."
msgstr ""

# type: defun
#: lispref/frames.texi:2049
#, no-wrap
msgid "display-grayscale-p &optional display"
msgstr ""

# type: defun
#: lispref/frames.texi:2052
msgid ""
"This function returns @code{t} if the screen can display shades of gray.  "
"(All color displays can do this.)"
msgstr ""

# type: defun
#: lispref/frames.texi:2054
#, no-wrap
msgid "display-supports-face-attributes-p attributes &optional display"
msgstr ""

# type: anchor{#1}
#: lispref/frames.texi:2058
msgid "Display Face Attribute Testing"
msgstr ""

# type: defun
#: lispref/frames.texi:2058
msgid ""
"This function returns non-@code{nil} if all the face attributes in @var"
"{attributes} are supported (@pxref{Face Attributes})."
msgstr ""

# type: defun
#: lispref/frames.texi:2063
msgid ""
"The definition of `supported' is somewhat heuristic, but basically means "
"that a face containing all the attributes in @var{attributes}, when merged "
"with the default face for display, can be represented in a way that's"
msgstr ""

# type: enumerate
#: lispref/frames.texi:2067
msgid "different in appearance than the default face, and"
msgstr ""

# type: enumerate
#: lispref/frames.texi:2070
msgid "`close in spirit' to what the attributes specify, if not exact."
msgstr ""

# type: defun
#: lispref/frames.texi:2078
msgid ""
"Point (2) implies that a @code{:weight black} attribute will be satisfied by "
"any display that can display bold, as will @code{:foreground \"yellow\"} as "
"long as some yellowish color can be displayed, but @code{:slant italic} will "
"@emph{not} be satisfied by the tty display code's automatic substitution of "
"a `dim' face for italic."
msgstr ""

# type: defun
#: lispref/frames.texi:2080
#, no-wrap
msgid "display-selections-p &optional display"
msgstr ""

# type: defun
#: lispref/frames.texi:2084
msgid ""
"This function returns @code{t} if @var{display} supports selections.  "
"Windowed displays normally support selections, but they may also be "
"supported in some other cases."
msgstr ""

# type: defun
#: lispref/frames.texi:2086
#, no-wrap
msgid "display-images-p &optional display"
msgstr ""

# type: defun
#: lispref/frames.texi:2091
msgid ""
"This function returns @code{t} if @var{display} can display images.  "
"Windowed displays ought in principle to handle images, but some systems lack "
"the support for that.  On a display that does not support images, Emacs "
"cannot display a tool bar."
msgstr ""

# type: defun
#: lispref/frames.texi:2093
#, no-wrap
msgid "display-screens &optional display"
msgstr ""

# type: defun
#: lispref/frames.texi:2095
msgid ""
"This function returns the number of screens associated with the display."
msgstr ""

# type: defun
#: lispref/frames.texi:2097
#, no-wrap
msgid "display-pixel-height &optional display"
msgstr ""

# type: defun
#: lispref/frames.texi:2100
msgid ""
"This function returns the height of the screen in pixels.  On a character "
"terminal, it gives the height in characters."
msgstr ""

# type: defun
#: lispref/frames.texi:2104 lispref/frames.texi:2113
msgid ""
"For graphical terminals, note that on ``multi-monitor'' setups this refers "
"to the pixel width for all physical monitors associated with @var{display}.  "
"@xref{Multiple Displays}."
msgstr ""

# type: defun
#: lispref/frames.texi:2106
#, no-wrap
msgid "display-pixel-width &optional display"
msgstr ""

# type: defun
#: lispref/frames.texi:2109
msgid ""
"This function returns the width of the screen in pixels.  On a character "
"terminal, it gives the width in characters."
msgstr ""

# type: defun
#: lispref/frames.texi:2115
#, no-wrap
msgid "display-mm-height &optional display"
msgstr ""

# type: defun
#: lispref/frames.texi:2118
msgid ""
"This function returns the height of the screen in millimeters, or @code{nil} "
"if Emacs cannot get that information."
msgstr ""

# type: defun
#: lispref/frames.texi:2120
#, no-wrap
msgid "display-mm-width &optional display"
msgstr ""

# type: defun
#: lispref/frames.texi:2123
msgid ""
"This function returns the width of the screen in millimeters, or @code{nil} "
"if Emacs cannot get that information."
msgstr ""

# type: defvar
#: lispref/frames.texi:2125
#, no-wrap
msgid "display-mm-dimensions-alist"
msgstr ""

# type: defvar
#: lispref/frames.texi:2129
msgid ""
"This variable allows the user to specify the dimensions of graphical "
"displays returned by @code{display-mm-height} and @code{display-mm-width} in "
"case the system provides incorrect values."
msgstr ""

# type: defun
#: lispref/frames.texi:2131
#, no-wrap
msgid "display-backing-store &optional display"
msgstr ""

# type: defun
#: lispref/frames.texi:2136
msgid ""
"This function returns the backing store capability of the display.  Backing "
"store means recording the pixels of windows (and parts of windows) that are "
"not exposed, so that when exposed they can be displayed very quickly."
msgstr ""

# type: defun
#: lispref/frames.texi:2140
msgid ""
"Values can be the symbols @code{always}, @code{when-mapped}, or @code{not-"
"useful}.  The function can also return @code{nil} when the question is "
"inapplicable to a certain kind of display."
msgstr ""

# type: defun
#: lispref/frames.texi:2142
#, no-wrap
msgid "display-save-under &optional display"
msgstr ""

# type: defun
#: lispref/frames.texi:2147
msgid ""
"This function returns non-@code{nil} if the display supports the SaveUnder "
"feature.  That feature is used by pop-up windows to save the pixels they "
"obscure, so that they can pop down quickly."
msgstr ""

# type: defun
#: lispref/frames.texi:2149
#, no-wrap
msgid "display-planes &optional display"
msgstr ""

# type: defun
#: lispref/frames.texi:2153
msgid ""
"This function returns the number of planes the display supports.  This is "
"typically the number of bits per pixel.  For a tty display, it is log to "
"base two of the number of colors supported."
msgstr ""

# type: defun
#: lispref/frames.texi:2155
#, no-wrap
msgid "display-visual-class &optional display"
msgstr ""

# type: defun
#: lispref/frames.texi:2160
msgid ""
"This function returns the visual class for the screen.  The value is one of "
"the symbols @code{static-gray}, @code{gray-scale}, @code{static-color}, @code"
"{pseudo-color}, @code{true-color}, and @code{direct-color}."
msgstr ""

# type: defun
#: lispref/frames.texi:2162
#, no-wrap
msgid "display-color-cells &optional display"
msgstr ""

# type: defun
#: lispref/frames.texi:2164
msgid "This function returns the number of color cells the screen supports."
msgstr ""

# type: Plain text
#: lispref/frames.texi:2168
msgid ""
"These functions obtain additional information specifically about X displays."
msgstr ""

# type: defun
#: lispref/frames.texi:2169
#, no-wrap
msgid "x-server-version &optional display"
msgstr ""

# type: defun
#: lispref/frames.texi:2174
msgid ""
"This function returns the list of version numbers of the X server running "
"the display.  The value is a list of three integers: the major and minor "
"version numbers of the X protocol, and the distributor-specific release "
"number of the X server software itself."
msgstr ""

# type: defun
#: lispref/frames.texi:2176
#, no-wrap
msgid "x-server-vendor &optional display"
msgstr ""

# type: defun
#: lispref/frames.texi:2180
msgid ""
"This function returns the ``vendor'' that provided the X server software (as "
"a string).  Really this means whoever distributes the X server."
msgstr ""

# type: defun
#: lispref/frames.texi:2184
msgid ""
"When the developers of X labelled software distributors as ``vendors,'' they "
"showed their false assumption that no system could ever be developed and "
"distributed noncommercially."
msgstr ""

# type: defvar
#: lispref/frames.texi:2187
#, no-wrap
msgid "x-no-window-manager"
msgstr ""

# type: defvar
#: lispref/frames.texi:2189
#, no-wrap
msgid "This variable's value is @code{t} if no X window manager is in use.\n"
msgstr ""

# type: ignore
#: lispref/frames.texi:2196
#, no-wrap
msgid ""
"The functions @code{x-pixel-width} and @code{x-pixel-height} return the\n"
"width and height of an X Window frame, measured in pixels.\n"
msgstr ""

# type: ignore
#: lispref/frames.texi:2200
#, no-wrap
msgid "   arch-tag: 94977df6-3dca-4730-b57b-c6329e9282ba\n"
msgstr "   arch-tag: 94977df6-3dca-4730-b57b-c6329e9282ba\n"

# type: center
#: lispref/front-cover-1.texi:21 lispref/front-cover-1.texi:42
#: lispref/vol1.texi:154 lispref/vol2.texi:155
#, no-wrap
msgid "GNU Emacs Version 19.29"
msgstr ""

# type: center
#: lispref/front-cover-1.texi:23 lispref/front-cover-1.texi:44
#: lispref/vol1.texi:157 lispref/vol2.texi:158
#, no-wrap
msgid "Edition 2.4, June 1995"
msgstr ""

# type: ignore
#: lispref/front-cover-1.texi:56
#, no-wrap
msgid "   arch-tag: 5182b306-c403-4e4f-ba24-e1911bc6da9d\n"
msgstr "   arch-tag: 5182b306-c403-4e4f-ba24-e1911bc6da9d\n"

# type: Plain text
#: lispref/functions.texi:13
msgid ""
"A Lisp program is composed mainly of Lisp functions.  This chapter explains "
"what functions are, how they accept arguments, and how to define them."
msgstr ""

# type: menu
#: lispref/functions.texi:29 lispref/functions.texi:31 lispref/vol1.texi:490
#: lispref/vol2.texi:491
#, no-wrap
msgid "What Is a Function"
msgstr ""

# type: menu
#: lispref/functions.texi:29
msgid "Lisp functions vs. primitives; terminology."
msgstr ""

# type: menu
#: lispref/functions.texi:29 lispref/functions.texi:163
#: lispref/functions.texi:164 lispref/vol1.texi:490 lispref/vol1.texi:492
#: lispref/vol2.texi:491 lispref/vol2.texi:493
#, no-wrap
msgid "Lambda Expressions"
msgstr ""

# type: menu
#: lispref/functions.texi:29 lispref/vol1.texi:490 lispref/vol2.texi:491
msgid "How functions are expressed as Lisp objects."
msgstr ""

# type: menu
#: lispref/functions.texi:29 lispref/functions.texi:452 lispref/vol1.texi:490
#: lispref/vol2.texi:491
#, no-wrap
msgid "Function Names"
msgstr ""

# type: menu
#: lispref/functions.texi:29 lispref/vol1.texi:490 lispref/vol2.texi:491
msgid "A symbol can serve as the name of a function."
msgstr ""

# type: menu
#: lispref/functions.texi:29 lispref/vol1.texi:490 lispref/vol2.texi:491
msgid "Lisp expressions for defining functions."
msgstr ""

# type: menu
#: lispref/functions.texi:29 lispref/functions.texi:623
#: lispref/functions.texi:624 lispref/vol1.texi:490 lispref/vol2.texi:491
#, no-wrap
msgid "Calling Functions"
msgstr ""

# type: menu
#: lispref/functions.texi:29 lispref/vol1.texi:490 lispref/vol2.texi:491
msgid "How to use an existing function."
msgstr ""

# type: menu
#: lispref/functions.texi:29 lispref/functions.texi:745
#: lispref/functions.texi:746 lispref/vol1.texi:490 lispref/vol2.texi:491
#, no-wrap
msgid "Mapping Functions"
msgstr ""

# type: menu
#: lispref/functions.texi:29 lispref/vol1.texi:490 lispref/vol2.texi:491
msgid "Applying a function to each element of a list, etc."
msgstr ""

# type: menu
#: lispref/functions.texi:29
msgid "Lambda expressions are functions with no names."
msgstr ""

# type: menu
#: lispref/functions.texi:29 lispref/functions.texi:986 lispref/vol1.texi:490
#: lispref/vol2.texi:491
#, no-wrap
msgid "Function Cells"
msgstr ""

# type: menu
#: lispref/functions.texi:29 lispref/vol1.texi:490 lispref/vol2.texi:491
msgid "Accessing or setting the function definition"
msgstr ""

# type: menu
#: lispref/functions.texi:29 lispref/vol1.texi:490 lispref/vol2.texi:491
msgid "of a symbol."
msgstr ""

# type: node
#: lispref/functions.texi:29 lispref/functions.texi:1152
#, no-wrap
msgid "Obsolete Functions"
msgstr ""

# type: menu
#: lispref/functions.texi:29
msgid "Declaring functions obsolete."
msgstr ""

# type: section
#: lispref/functions.texi:29 lispref/functions.texi:1185
#: lispref/functions.texi:1186
#, no-wrap
msgid "Inline Functions"
msgstr ""

# type: menu
#: lispref/functions.texi:29
msgid "Defining functions that the compiler will open code."
msgstr ""

# type: node
#: lispref/functions.texi:29 lispref/functions.texi:1225
#, no-wrap
msgid "Function Safety"
msgstr ""

# type: menu
#: lispref/functions.texi:29
msgid "Determining whether a function is safe to call."
msgstr ""

# type: menu
#: lispref/functions.texi:29 lispref/functions.texi:1312 lispref/vol1.texi:490
#: lispref/vol2.texi:491
#, no-wrap
msgid "Related Topics"
msgstr ""

# type: menu
#: lispref/functions.texi:29 lispref/vol1.texi:490 lispref/vol2.texi:491
msgid "Cross-references to specific Lisp primitives"
msgstr ""

# type: menu
#: lispref/functions.texi:29
msgid "that have a special bearing on how functions work."
msgstr ""

# type: section
#: lispref/functions.texi:32
#, no-wrap
msgid "What Is a Function?"
msgstr ""

# type: Plain text
#: lispref/functions.texi:39
msgid ""
"In a general sense, a function is a rule for carrying on a computation given "
"several values called @dfn{arguments}.  The result of the computation is "
"called the value of the function.  The computation can also have side "
"effects: lasting changes in the values of variables or the contents of data "
"structures."
msgstr ""

# type: Plain text
#: lispref/functions.texi:42
msgid ""
"Here are important terms for functions in Emacs Lisp and for other function-"
"like objects."
msgstr ""

# type: table
#: lispref/functions.texi:50
msgid ""
"In Emacs Lisp, a @dfn{function} is anything that can be applied to arguments "
"in a Lisp program.  In some cases, we use it more specifically to mean a "
"function written in Lisp.  Special forms and macros are not functions."
msgstr ""

# type: cindex
#: lispref/functions.texi:51 lispref/functions.texi:52
#, no-wrap
msgid "primitive"
msgstr ""

# type: cindex
#: lispref/functions.texi:53
#, no-wrap
msgid "subr"
msgstr ""

# type: cindex
#: lispref/functions.texi:54
#, no-wrap
msgid "built-in function"
msgstr ""

# type: table
#: lispref/functions.texi:59
msgid ""
"A @dfn{primitive} is a function callable from Lisp that is written in C, "
"such as @code{car} or @code{append}.  These functions are also called @dfn"
"{built-in functions}, or @dfn{subrs}.  (Special forms are also considered "
"primitives.)"
msgstr ""

# type: table
#: lispref/functions.texi:65
msgid ""
"Usually the reason we implement a function as a primitive is either because "
"it is fundamental, because it provides a low-level interface to operating "
"system services, or because it needs to run fast.  Primitives can be "
"modified or added only by changing the C sources and recompiling the "
"editor.  See @ref{Writing Emacs Primitives}."
msgstr ""

# type: cindex
#: lispref/functions.texi:66 lispref/functions.texi:165
#, no-wrap
msgid "lambda expression"
msgstr ""

# type: table
#: lispref/functions.texi:69
msgid ""
"A @dfn{lambda expression} is a function written in Lisp.  These are "
"described in the following section."
msgstr ""

# type: ifnottex
#: lispref/functions.texi:71
msgid "@xref{Lambda Expressions}."
msgstr ""

# type: item
#: lispref/functions.texi:73
#, no-wrap
msgid "special form"
msgstr ""

# type: table
#: lispref/functions.texi:79
msgid ""
"A @dfn{special form} is a primitive that is like a function but does not "
"evaluate all of its arguments in the usual way.  It may evaluate only some "
"of the arguments, or may evaluate them in an unusual order, or several "
"times.  Many special forms are described in @ref{Control Structures}."
msgstr ""

# type: cindex
#: lispref/functions.texi:80 lispref/functions.texi:81
#, no-wrap
msgid "macro"
msgstr ""

# type: table
#: lispref/functions.texi:88
msgid ""
"A @dfn{macro} is a construct defined in Lisp by the programmer.  It differs "
"from a function in that it translates a Lisp expression that you write into "
"an equivalent expression to be evaluated instead of the original "
"expression.  Macros enable Lisp programmers to do the sorts of things that "
"special forms can do.  @xref{Macros}, for how to define and use macros."
msgstr ""

# type: var{#1}
#: lispref/functions.texi:89 lispref/functions.texi:90
#: lispref/internals.texi:1434 lispref/keymaps.texi:958
#, no-wrap
msgid "command"
msgstr ""

# type: table
#: lispref/functions.texi:97
msgid ""
"A @dfn{command} is an object that @code{command-execute} can invoke; it is a "
"possible definition for a key sequence.  Some functions are commands; a "
"function written in Lisp is a command if it contains an interactive "
"declaration (@pxref{Defining Commands}).  Such a function can be called from "
"Lisp expressions like other functions; in this case, the fact that the "
"function is a command makes no difference."
msgstr ""

# type: table
#: lispref/functions.texi:103
msgid ""
"Keyboard macros (strings and vectors) are commands also, even though they "
"are not functions.  A symbol is a command if its function definition is a "
"command; such symbols can be invoked with @kbd{M-x}.  The symbol is a "
"function as well if the definition is a function.  @xref{Interactive Call}."
msgstr ""

# type: cindex
#: lispref/functions.texi:104 lispref/functions.texi:105
#, no-wrap
msgid "keystroke command"
msgstr ""

# type: table
#: lispref/functions.texi:110
msgid ""
"A @dfn{keystroke command} is a command that is bound to a key sequence "
"(typically one to three keystrokes).  The distinction is made here merely to "
"avoid confusion with the meaning of ``command'' in non-Emacs editors; for "
"Lisp programs, the distinction is normally unimportant."
msgstr ""

# type: table
#: lispref/functions.texi:114
msgid ""
"A @dfn{byte-code function} is a function that has been compiled by the byte "
"compiler.  @xref{Byte-Code Type}."
msgstr ""

# type: defun
#: lispref/functions.texi:116
#, no-wrap
msgid "functionp object"
msgstr ""

# type: defun
#: lispref/functions.texi:121
msgid ""
"This function returns @code{t} if @var{object} is any kind of function, or a "
"special form, or, recursively, a symbol whose function definition is a "
"function or special form.  (This does not include macros.)"
msgstr ""

# type: Plain text
#: lispref/functions.texi:125
msgid ""
"Unlike @code{functionp}, the next three functions do @emph{not} treat a "
"symbol as its function definition."
msgstr ""

# type: defun
#: lispref/functions.texi:126
#, no-wrap
msgid "subrp object"
msgstr ""

# type: defun
#: lispref/functions.texi:129
msgid ""
"This function returns @code{t} if @var{object} is a built-in function (i.e., "
"a Lisp primitive)."
msgstr ""

# type: group
#: lispref/functions.texi:134
#, no-wrap
msgid ""
"(subrp 'message)            ; @r{@code{message} is a symbol,}\n"
"     @result{} nil                 ;   @r{not a subr object.}\n"
msgstr ""

# type: group
#: lispref/functions.texi:138
#, no-wrap
msgid ""
"(subrp (symbol-function 'message))\n"
"     @result{} t\n"
msgstr ""

# type: defun
#: lispref/functions.texi:142
#, no-wrap
msgid "byte-code-function-p object"
msgstr ""

# type: defun
#: lispref/functions.texi:145
msgid ""
"This function returns @code{t} if @var{object} is a byte-code function.  For "
"example:"
msgstr ""

# type: group
#: lispref/functions.texi:150
#, no-wrap
msgid ""
"(byte-code-function-p (symbol-function 'next-line))\n"
"     @result{} t\n"
msgstr ""

# type: defun
#: lispref/functions.texi:154
#, no-wrap
msgid "subr-arity subr"
msgstr ""

# type: defun
#: lispref/functions.texi:161
msgid ""
"This function provides information about the argument list of a primitive, "
"@var{subr}.  The returned value is a pair @code{(@var{min} . @var{max})}.  "
"@var{min} is the minimum number of args.  @var{max} is the maximum number or "
"the symbol @code{many}, for a function with @code{&rest} arguments, or the "
"symbol @code{unevalled} if @var{subr} is a special form."
msgstr ""

# type: Plain text
#: lispref/functions.texi:168
msgid "A function written in Lisp is a list that looks like this:"
msgstr ""

# type: example
#: lispref/functions.texi:174
#, no-wrap
msgid ""
"(lambda (@var{arg-variables}@dots{})\n"
"  @r{[}@var{documentation-string}@r{]}\n"
"  @r{[}@var{interactive-declaration}@r{]}\n"
"  @var{body-forms}@dots{})\n"
msgstr ""

# type: Plain text
#: lispref/functions.texi:182
msgid ""
"Such a list is called a @dfn{lambda expression}.  In Emacs Lisp, it actually "
"is valid as an expression---it evaluates to itself.  In some other Lisp "
"dialects, a lambda expression is not a valid expression at all.  In either "
"case, its main use is not to be evaluated as an expression, but to be called "
"as a function."
msgstr ""

# type: menu
#: lispref/functions.texi:188 lispref/functions.texi:190 lispref/vol1.texi:497
#: lispref/vol2.texi:498
#, no-wrap
msgid "Lambda Components"
msgstr ""

# type: menu
#: lispref/functions.texi:188 lispref/vol1.texi:497 lispref/vol2.texi:498
msgid "The parts of a lambda expression."
msgstr ""

# type: menu
#: lispref/functions.texi:188 lispref/functions.texi:237 lispref/vol1.texi:497
#: lispref/vol2.texi:498
#, no-wrap
msgid "Simple Lambda"
msgstr ""

# type: menu
#: lispref/functions.texi:188 lispref/vol1.texi:497 lispref/vol2.texi:498
msgid "A simple example."
msgstr ""

# type: menu
#: lispref/functions.texi:188 lispref/functions.texi:291 lispref/vol1.texi:497
#: lispref/vol2.texi:498
#, no-wrap
msgid "Argument List"
msgstr ""

# type: menu
#: lispref/functions.texi:188 lispref/vol1.texi:497 lispref/vol2.texi:498
msgid "Details and special features of argument lists."
msgstr ""

# type: menu
#: lispref/functions.texi:188 lispref/functions.texi:396 lispref/vol1.texi:497
#: lispref/vol2.texi:498
#, no-wrap
msgid "Function Documentation"
msgstr ""

# type: menu
#: lispref/functions.texi:188 lispref/vol1.texi:497 lispref/vol2.texi:498
msgid "How to put documentation in a function."
msgstr ""

# type: subsection
#: lispref/functions.texi:191
#, no-wrap
msgid "Components of a Lambda Expression"
msgstr ""

# type: ifnottex
#: lispref/functions.texi:197
msgid ""
"A function written in Lisp (a ``lambda expression'') is a list that looks "
"like this:"
msgstr ""

# type: example
#: lispref/functions.texi:203
#, no-wrap
msgid ""
"(lambda (@var{arg-variables}@dots{})\n"
"  [@var{documentation-string}]\n"
"  [@var{interactive-declaration}]\n"
"  @var{body-forms}@dots{})\n"
msgstr ""

# type: cindex
#: lispref/functions.texi:206
#, no-wrap
msgid "lambda list"
msgstr ""

# type: Plain text
#: lispref/functions.texi:212
msgid ""
"The first element of a lambda expression is always the symbol @code"
"{lambda}.  This indicates that the list represents a function.  The reason "
"functions are defined to start with @code{lambda} is so that other lists, "
"intended for other uses, will not accidentally be valid as functions."
msgstr ""

# type: Plain text
#: lispref/functions.texi:218
msgid ""
"The second element is a list of symbols---the argument variable names.  This "
"is called the @dfn{lambda list}.  When a Lisp function is called, the "
"argument values are matched up against the variables in the lambda list, "
"which are given local bindings with the values provided.  @xref{Local "
"Variables}."
msgstr ""

# type: Plain text
#: lispref/functions.texi:222
msgid ""
"The documentation string is a Lisp string object placed within the function "
"definition to describe the function for the Emacs help facilities.  @xref"
"{Function Documentation}."
msgstr ""

# type: Plain text
#: lispref/functions.texi:230
msgid ""
"The interactive declaration is a list of the form @code{(interactive @var"
"{code-string})}.  This declares how to provide arguments if the function is "
"used interactively.  Functions with this declaration are called @dfn"
"{commands}; they can be called using @kbd{M-x} or bound to a key.  Functions "
"not intended to be called in this way should not have interactive "
"declarations.  @xref{Defining Commands}, for how to write an interactive "
"declaration."
msgstr ""

# type: cindex
#: lispref/functions.texi:231
#, no-wrap
msgid "body of function"
msgstr ""

# type: Plain text
#: lispref/functions.texi:236
msgid ""
"The rest of the elements are the @dfn{body} of the function: the Lisp code "
"to do the work of the function (or, as a Lisp programmer would say, ``a list "
"of Lisp forms to evaluate'').  The value returned by the function is the "
"value returned by the last element of the body."
msgstr ""

# type: subsection
#: lispref/functions.texi:238
#, no-wrap
msgid "A Simple Lambda-Expression Example"
msgstr ""

# type: Plain text
#: lispref/functions.texi:241
msgid "Consider for example the following function:"
msgstr ""

# type: example
#: lispref/functions.texi:244
#, no-wrap
msgid "(lambda (a b c) (+ a b c))\n"
msgstr ""

# type: Plain text
#: lispref/functions.texi:249
msgid ""
"We can call this function by writing it as the @sc{car} of an expression, "
"like this:"
msgstr ""

# type: group
#: lispref/functions.texi:254
#, no-wrap
msgid ""
"((lambda (a b c) (+ a b c))\n"
" 1 2 3)\n"
msgstr ""

# type: Plain text
#: lispref/functions.texi:262
msgid ""
"This call evaluates the body of the lambda expression with the variable @code"
"{a} bound to 1, @code{b} bound to 2, and @code{c} bound to 3.  Evaluation of "
"the body adds these three numbers, producing the result 6; therefore, this "
"call to the function returns the value 6."
msgstr ""

# type: Plain text
#: lispref/functions.texi:265
msgid ""
"Note that the arguments can be the results of other function calls, as in "
"this example:"
msgstr ""

# type: group
#: lispref/functions.texi:270
#, no-wrap
msgid ""
"((lambda (a b c) (+ a b c))\n"
" 1 (* 2 3) (- 5 4))\n"
msgstr ""

# type: Plain text
#: lispref/functions.texi:277
msgid ""
"This evaluates the arguments @code{1}, @code{(* 2 3)}, and @code{(- 5 4)} "
"from left to right.  Then it applies the lambda expression to the argument "
"values 1, 6 and 1 to produce the value 8."
msgstr ""

# type: Plain text
#: lispref/functions.texi:285
msgid ""
"It is not often useful to write a lambda expression as the @sc{car} of a "
"form in this way.  You can get the same result, of making local variables "
"and giving them values, using the special form @code{let} (@pxref{Local "
"Variables}).  And @code{let} is clearer and easier to use.  In practice, "
"lambda expressions are either stored as the function definitions of symbols, "
"to produce named functions, or passed as arguments to other functions (@pxref"
"{Anonymous Functions})."
msgstr ""

# type: Plain text
#: lispref/functions.texi:290
msgid ""
"However, calls to explicit lambda expressions were very useful in the old "
"days of Lisp, before the special form @code{let} was invented.  At that "
"time, they were the only way to bind and initialize local variables."
msgstr ""

# type: subsection
#: lispref/functions.texi:292
#, no-wrap
msgid "Other Features of Argument Lists"
msgstr ""

# type: cindex
#: lispref/functions.texi:294
#, no-wrap
msgid "argument binding"
msgstr ""

# type: cindex
#: lispref/functions.texi:295
#, no-wrap
msgid "binding arguments"
msgstr ""

# type: cindex
#: lispref/functions.texi:296
#, no-wrap
msgid "argument lists, features"
msgstr ""

# type: Plain text
#: lispref/functions.texi:302
msgid ""
"Our simple sample function, @code{(lambda (a b c) (+ a b c))}, specifies "
"three argument variables, so it must be called with three arguments: if you "
"try to call it with only two arguments or four arguments, you get a @code"
"{wrong-number-of-arguments} error."
msgstr ""

# type: Plain text
#: lispref/functions.texi:310
msgid ""
"It is often convenient to write a function that allows certain arguments to "
"be omitted.  For example, the function @code{substring} accepts three "
"arguments---a string, the start index and the end index---but the third "
"argument defaults to the @var{length} of the string if you omit it.  It is "
"also convenient for certain functions to accept an indefinite number of "
"arguments, as the functions @code{list} and @code{+} do."
msgstr ""

# type: cindex
#: lispref/functions.texi:311
#, no-wrap
msgid "optional arguments"
msgstr ""

# type: cindex
#: lispref/functions.texi:312
#, no-wrap
msgid "rest arguments"
msgstr ""

# type: Plain text
#: lispref/functions.texi:319
msgid ""
"To specify optional arguments that may be omitted when a function is called, "
"simply include the keyword @code{&optional} before the optional arguments.  "
"To specify a list of zero or more extra arguments, include the keyword @code"
"{&rest} before one final argument."
msgstr ""

# type: Plain text
#: lispref/functions.texi:321
msgid "Thus, the complete syntax for an argument list is as follows:"
msgstr ""

# type: group
#: lispref/functions.texi:327
#, no-wrap
msgid ""
"(@var{required-vars}@dots{}\n"
" @r{[}&optional @var{optional-vars}@dots{}@r{]}\n"
" @r{[}&rest @var{rest-var}@r{]})\n"
msgstr ""

# type: Plain text
#: lispref/functions.texi:333
msgid ""
"The square brackets indicate that the @code{&optional} and @code{&rest} "
"clauses, and the variables that follow them, are optional."
msgstr ""

# type: Plain text
#: lispref/functions.texi:339
msgid ""
"A call to the function requires one actual argument for each of the @var"
"{required-vars}.  There may be actual arguments for zero or more of the @var"
"{optional-vars}, and there cannot be any actual arguments beyond that unless "
"the lambda list uses @code{&rest}.  In that case, there may be any number of "
"extra actual arguments."
msgstr ""

# type: Plain text
#: lispref/functions.texi:347
msgid ""
"If actual arguments for the optional and rest variables are omitted, then "
"they always default to @code{nil}.  There is no way for the function to "
"distinguish between an explicit argument of @code{nil} and an omitted "
"argument.  However, the body of the function is free to consider @code{nil} "
"an abbreviation for some other meaningful value.  This is what @code"
"{substring} does; @code{nil} as the third argument to @code{substring} means "
"to use the length of the string supplied."
msgstr ""

# type: cindex
#: lispref/functions.texi:348
#, no-wrap
msgid "CL note---default optional arg"
msgstr ""

# type: quotation
#: lispref/functions.texi:354
msgid ""
"@b{Common Lisp note:} Common Lisp allows the function to specify what "
"default value to use when an optional argument is omitted; Emacs Lisp always "
"uses @code{nil}.  Emacs Lisp does not support ``supplied-p'' variables that "
"tell you whether an argument was explicitly passed."
msgstr ""

# type: Plain text
#: lispref/functions.texi:357
msgid "For example, an argument list that looks like this:"
msgstr ""

# type: example
#: lispref/functions.texi:360
#, no-wrap
msgid "(a b &optional c d &rest e)\n"
msgstr ""

# type: Plain text
#: lispref/functions.texi:370
msgid ""
"binds @code{a} and @code{b} to the first two actual arguments, which are "
"required.  If one or two more arguments are provided, @code{c} and @code{d} "
"are bound to them respectively; any arguments after the first four are "
"collected into a list and @code{e} is bound to that list.  If there are only "
"two arguments, @code{c} is @code{nil}; if two or three arguments, @code{d} "
"is @code{nil}; if four arguments or fewer, @code{e} is @code{nil}."
msgstr ""

# type: Plain text
#: lispref/functions.texi:379
msgid ""
"There is no way to have required arguments following optional ones---it "
"would not make sense.  To see why this must be so, suppose that @code{c} in "
"the example were optional and @code{d} were required.  Suppose three actual "
"arguments are given; which variable would the third argument be for? Would "
"it be used for the @var{c}, or for @var{d}? One can argue for both "
"possibilities.  Similarly, it makes no sense to have any more arguments "
"(either required or optional)  after a @code{&rest} argument."
msgstr ""

# type: Plain text
#: lispref/functions.texi:381
msgid "Here are some examples of argument lists and proper calls:"
msgstr ""

# type: smallexample
#: lispref/functions.texi:394
#, no-wrap
msgid ""
"((lambda (n) (1+ n))                ; @r{One required:}\n"
" 1)                                 ; @r{requires exactly one argument.}\n"
"     @result{} 2\n"
"((lambda (n &optional n1)           ; @r{One required and one optional:}\n"
"         (if n1 (+ n n1) (1+ n)))   ; @r{1 or 2 arguments.}\n"
" 1 2)\n"
"     @result{} 3\n"
"((lambda (n &rest ns)               ; @r{One required and one rest:}\n"
"         (+ n (apply '+ ns)))       ; @r{1 or more arguments.}\n"
" 1 2 3 4 5)\n"
"     @result{} 15\n"
msgstr ""

# type: subsection
#: lispref/functions.texi:397
#, no-wrap
msgid "Documentation Strings of Functions"
msgstr ""

# type: cindex
#: lispref/functions.texi:398
#, no-wrap
msgid "documentation of function"
msgstr ""

# type: Plain text
#: lispref/functions.texi:406
msgid ""
"A lambda expression may optionally have a @dfn{documentation string} just "
"after the lambda list.  This string does not affect execution of the "
"function; it is a kind of comment, but a systematized comment which actually "
"appears inside the Lisp world and can be used by the Emacs help facilities.  "
"@xref{Documentation}, for how the @var{documentation-string} is accessed."
msgstr ""

# type: Plain text
#: lispref/functions.texi:411
msgid ""
"It is a good idea to provide documentation strings for all the functions in "
"your program, even those that are called only from within your program.  "
"Documentation strings are like comments, except that they are easier to "
"access."
msgstr ""

# type: Plain text
#: lispref/functions.texi:415
msgid ""
"The first line of the documentation string should stand on its own, because "
"@code{apropos} displays just this first line.  It should consist of one or "
"two complete sentences that summarize the function's purpose."
msgstr ""

# type: Plain text
#: lispref/functions.texi:424
msgid ""
"The start of the documentation string is usually indented in the source "
"file, but since these spaces come before the starting double-quote, they are "
"not part of the string.  Some people make a practice of indenting any "
"additional lines of the string so that the text lines up in the program "
"source.  @emph{That is a mistake.} The indentation of the following lines is "
"inside the string; what looks nice in the source code will look ugly when "
"displayed by the help commands."
msgstr ""

# type: Plain text
#: lispref/functions.texi:432
msgid ""
"You may wonder how the documentation string could be optional, since there "
"are required components of the function that follow it (the body).  Since "
"evaluation of a string returns that string, without any side effects, it has "
"no effect if it is not the last form in the body.  Thus, in practice, there "
"is no confusion between the first form of the body and the documentation "
"string; if the only body form is a string then it serves both as the return "
"value and as the documentation."
msgstr ""

# type: Plain text
#: lispref/functions.texi:436
msgid ""
"The last line of the documentation string can specify calling conventions "
"different from the actual function arguments.  Write text like this:"
msgstr ""

# type: example
#: lispref/functions.texi:439
#, no-wrap
msgid "\\(fn @var{arglist})\n"
msgstr ""

# type: Plain text
#: lispref/functions.texi:447
msgid ""
"following a blank line, at the beginning of the line, with no newline "
"following it inside the documentation string.  (The @samp{\\} is used to "
"avoid confusing the Emacs motion commands.)  The calling convention "
"specified in this way appears in help messages in place of the one derived "
"from the actual arguments of the function."
msgstr ""

# type: Plain text
#: lispref/functions.texi:451
msgid ""
"This feature is particularly useful for macro definitions, since the "
"arguments written in a macro definition often do not correspond to the way "
"users think of the parts of the macro call."
msgstr ""

# type: section
#: lispref/functions.texi:453
#, no-wrap
msgid "Naming a Function"
msgstr ""

# type: cindex
#: lispref/functions.texi:454
#, no-wrap
msgid "function definition"
msgstr ""

# type: cindex
#: lispref/functions.texi:455
#, no-wrap
msgid "named function"
msgstr ""

# type: cindex
#: lispref/functions.texi:456
#, no-wrap
msgid "function name"
msgstr ""

# type: Plain text
#: lispref/functions.texi:462
msgid ""
"In most computer languages, every function has a name; the idea of a "
"function without a name is nonsensical.  In Lisp, a function in the "
"strictest sense has no name.  It is simply a list whose first element is "
"@code{lambda}, a byte-code function object, or a primitive subr-object."
msgstr ""

# type: Plain text
#: lispref/functions.texi:471
msgid ""
"However, a symbol can serve as the name of a function.  This happens when "
"you put the function in the symbol's @dfn{function cell} (@pxref{Symbol "
"Components}).  Then the symbol itself becomes a valid, callable function, "
"equivalent to the list or subr-object that its function cell refers to.  The "
"contents of the function cell are also called the symbol's @dfn{function "
"definition}.  The procedure of using a symbol's function definition in place "
"of the symbol is called @dfn{symbol function indirection}; see @ref{Function "
"Indirection}."
msgstr ""

# type: Plain text
#: lispref/functions.texi:476
msgid ""
"In practice, nearly all functions are given names in this way and referred "
"to through their names.  For example, the symbol @code{car} works as a "
"function and does what it does because the primitive subr-object @code"
"{#<subr car>} is stored in its function cell."
msgstr ""

# type: Plain text
#: lispref/functions.texi:487
msgid ""
"We give functions names because it is convenient to refer to them by their "
"names in Lisp expressions.  For primitive subr-objects such as @code{#<subr "
"car>}, names are the only way you can refer to them: there is no read syntax "
"for such objects.  For functions written in Lisp, the name is more "
"convenient to use in a call than an explicit lambda expression.  Also, a "
"function with a name can refer to itself---it can be recursive.  Writing the "
"function's name in its own definition is much more convenient than making "
"the function definition point to itself (something that is not impossible "
"but that has various disadvantages in practice)."
msgstr ""

# type: Plain text
#: lispref/functions.texi:493
msgid ""
"We often identify functions with the symbols used to name them.  For "
"example, we often speak of ``the function @code{car},'' not distinguishing "
"between the symbol @code{car} and the primitive subr-object that is its "
"function definition.  For most purposes, the distinction is not important."
msgstr ""

# type: Plain text
#: lispref/functions.texi:499
msgid ""
"Even so, keep in mind that a function need not have a unique name.  While a "
"given function object @emph{usually} appears in the function cell of only "
"one symbol, this is just a matter of convenience.  It is easy to store it in "
"several symbols using @code{fset}; then each of the symbols is equally well "
"a name for the same function."
msgstr ""

# type: Plain text
#: lispref/functions.texi:507
msgid ""
"A symbol used as a function name may also be used as a variable; these two "
"uses of a symbol are independent and do not conflict.  (Some Lisp dialects, "
"such as Scheme, do not distinguish between a symbol's value and its function "
"definition; a symbol's value as a variable is also its function "
"definition.)  If you have not given a symbol a function definition, you "
"cannot use it as a function; whether the symbol has a value as a variable "
"makes no difference to this."
msgstr ""

# type: cindex
#: lispref/functions.texi:510
#, no-wrap
msgid "defining a function"
msgstr ""

# type: Plain text
#: lispref/functions.texi:515
msgid ""
"We usually give a name to a function when it is first created.  This is "
"called @dfn{defining a function}, and it is done with the @code{defun} "
"special form."
msgstr ""

# type: defspec
#: lispref/functions.texi:516
#, no-wrap
msgid "defun name argument-list body-forms"
msgstr ""

# type: defspec
#: lispref/functions.texi:519
msgid ""
"@code{defun} is the usual way to define new Lisp functions.  It defines the "
"symbol @var{name} as a function that looks like this:"
msgstr ""

# type: example
#: lispref/functions.texi:522
#, no-wrap
msgid "(lambda @var{argument-list} . @var{body-forms})\n"
msgstr ""

# type: defspec
#: lispref/functions.texi:527
msgid ""
"@code{defun} stores this lambda expression in the function cell of @var"
"{name}.  It returns the value @var{name}, but usually we ignore this value."
msgstr ""

# type: defspec
#: lispref/functions.texi:533
msgid ""
"As described previously, @var{argument-list} is a list of argument names and "
"may include the keywords @code{&optional} and @code{&rest} (@pxref{Lambda "
"Expressions}).  Also, the first two of the @var{body-forms} may be a "
"documentation string and an interactive declaration."
msgstr ""

# type: defspec
#: lispref/functions.texi:537
msgid ""
"There is no conflict if the same symbol @var{name} is also used as a "
"variable, since the symbol's value cell is independent of the function "
"cell.  @xref{Symbol Components}."
msgstr ""

# type: group
#: lispref/functions.texi:544
#, no-wrap
msgid ""
"(defun foo () 5)\n"
"     @result{} foo\n"
msgstr ""

# type: group
#: lispref/functions.texi:548
#, no-wrap
msgid ""
"(foo)\n"
"     @result{} 5\n"
msgstr ""

# type: group
#: lispref/functions.texi:554
#, no-wrap
msgid ""
"(defun bar (a &optional b &rest c)\n"
"    (list a b c))\n"
"     @result{} bar\n"
msgstr ""

# type: group
#: lispref/functions.texi:558
#, no-wrap
msgid ""
"(bar 1 2 3 4 5)\n"
"     @result{} (1 2 (3 4 5))\n"
msgstr ""

# type: group
#: lispref/functions.texi:562
#, no-wrap
msgid ""
"(bar 1)\n"
"     @result{} (1 nil nil)\n"
msgstr ""

# type: group
#: lispref/functions.texi:566
#, no-wrap
msgid ""
"(bar)\n"
"@error{} Wrong number of arguments.\n"
msgstr ""

# type: group
#: lispref/functions.texi:577
#, no-wrap
msgid ""
"(defun capitalize-backwards ()\n"
"  \"Upcase the last letter of a word.\"\n"
"  (interactive)\n"
"  (backward-word 1)\n"
"  (forward-word 1)\n"
"  (backward-char 1)\n"
"  (capitalize-word 1))\n"
"     @result{} capitalize-backwards\n"
msgstr ""

# type: defspec
#: lispref/functions.texi:585
msgid ""
"Be careful not to redefine existing functions unintentionally.  @code{defun} "
"redefines even primitive functions such as @code{car} without any hesitation "
"or notification.  Redefining a function already defined is often done "
"deliberately, and there is no way to distinguish deliberate redefinition "
"from unintentional redefinition."
msgstr ""

# type: cindex
#: lispref/functions.texi:587
#, no-wrap
msgid "function aliases"
msgstr ""

# type: defun
#: lispref/functions.texi:588
#, no-wrap
msgid "defalias name definition &optional docstring"
msgstr ""

# type: anchor{#1}
#: lispref/functions.texi:593
msgid "Definition of defalias"
msgstr ""

# type: defun
#: lispref/functions.texi:593
msgid ""
"This special form defines the symbol @var{name} as a function, with "
"definition @var{definition} (which can be any valid Lisp function).  It "
"returns @var{definition}."
msgstr ""

# type: defun
#: lispref/functions.texi:597
msgid ""
"If @var{docstring} is non-@code{nil}, it becomes the function documentation "
"of @var{name}.  Otherwise, any documentation provided by @var{definition} is "
"used."
msgstr ""

# type: defun
#: lispref/functions.texi:603
msgid ""
"The proper place to use @code{defalias} is where a specific function name is "
"being defined---especially where that name appears explicitly in the source "
"file being loaded.  This is because @code{defalias} records which file "
"defined the function, just like @code{defun} (@pxref{Unloading})."
msgstr ""

# type: defun
#: lispref/functions.texi:607
msgid ""
"By contrast, in programs that manipulate function definitions for other "
"purposes, it is better to use @code{fset}, which does not keep such "
"records.  @xref{Function Cells}."
msgstr ""

# type: Plain text
#: lispref/functions.texi:619
msgid ""
"You cannot create a new primitive function with @code{defun} or @code"
"{defalias}, but you can use them to change the function definition of any "
"symbol, even one such as @code{car} or @code{x-popup-menu} whose normal "
"definition is a primitive.  However, this is risky: for instance, it is next "
"to impossible to redefine @code{car} without breaking Lisp completely.  "
"Redefining an obscure function such as @code{x-popup-menu} is less "
"dangerous, but it still may not work as you expect.  If there are calls to "
"the primitive from C code, they call the primitive's C definition directly, "
"so changing the symbol's definition will have no effect on them."
msgstr ""

# type: Plain text
#: lispref/functions.texi:622
msgid ""
"See also @code{defsubst}, which defines a function like @code{defun} and "
"tells the Lisp compiler to open-code it.  @xref{Inline Functions}."
msgstr ""

# type: cindex
#: lispref/functions.texi:625
#, no-wrap
msgid "function invocation"
msgstr ""

# type: cindex
#: lispref/functions.texi:626
#, no-wrap
msgid "calling a function"
msgstr ""

# type: Plain text
#: lispref/functions.texi:631
msgid ""
"Defining functions is only half the battle.  Functions don't do anything "
"until you @dfn{call} them, i.e., tell them to run.  Calling a function is "
"also known as @dfn{invocation}."
msgstr ""

# type: Plain text
#: lispref/functions.texi:636
msgid ""
"The most common way of invoking a function is by evaluating a list.  For "
"example, evaluating the list @code{(concat \"a\" \"b\")} calls the function "
"@code{concat} with arguments @code{\"a\"} and @code{\"b\"}.  @xref"
"{Evaluation}, for a description of evaluation."
msgstr ""

# type: Plain text
#: lispref/functions.texi:643
msgid ""
"When you write a list as an expression in your program, you specify which "
"function to call, and how many arguments to give it, in the text of the "
"program.  Usually that's just what you want.  Occasionally you need to "
"compute at run time which function to call.  To do that, use the function "
"@code{funcall}.  When you also need to determine at run time how many "
"arguments to pass, use @code{apply}."
msgstr ""

# type: defun
#: lispref/functions.texi:644
#, no-wrap
msgid "funcall function &rest arguments"
msgstr ""

# type: defun
#: lispref/functions.texi:647
msgid ""
"@code{funcall} calls @var{function} with @var{arguments}, and returns "
"whatever @var{function} returns."
msgstr ""

# type: defun
#: lispref/functions.texi:657
msgid ""
"Since @code{funcall} is a function, all of its arguments, including @var"
"{function}, are evaluated before @code{funcall} is called.  This means that "
"you can use any expression to obtain the function to be called.  It also "
"means that @code{funcall} does not see the expressions you write for the @var"
"{arguments}, only their values.  These values are @emph{not} evaluated a "
"second time in the act of calling @var{function}; the operation of @code"
"{funcall} is like the normal procedure for calling a function, once its "
"arguments have already been evaluated."
msgstr ""

# type: defun
#: lispref/functions.texi:663
msgid ""
"The argument @var{function} must be either a Lisp function or a primitive "
"function.  Special forms and macros are not allowed, because they make sense "
"only when given the ``unevaluated'' argument expressions.  @code{funcall} "
"cannot provide these because, as we saw above, it never knows them in the "
"first place."
msgstr ""

# type: group
#: lispref/functions.texi:668 lispref/functions.texi:703
#, no-wrap
msgid ""
"(setq f 'list)\n"
"     @result{} list\n"
msgstr ""

# type: group
#: lispref/functions.texi:672
#, no-wrap
msgid ""
"(funcall f 'x 'y 'z)\n"
"     @result{} (x y z)\n"
msgstr ""

# type: group
#: lispref/functions.texi:676
#, no-wrap
msgid ""
"(funcall f 'x 'y '(z))\n"
"     @result{} (x y (z))\n"
msgstr ""

# type: group
#: lispref/functions.texi:680
#, no-wrap
msgid ""
"(funcall 'and t nil)\n"
"@error{} Invalid function: #<subr and>\n"
msgstr ""

# type: defun
#: lispref/functions.texi:684
msgid "Compare these examples with the examples of @code{apply}."
msgstr ""

# type: defun
#: lispref/functions.texi:686
#, no-wrap
msgid "apply function &rest arguments"
msgstr ""

# type: defun
#: lispref/functions.texi:693
msgid ""
"@code{apply} calls @var{function} with @var{arguments}, just like @code"
"{funcall} but with one difference: the last of @var{arguments} is a list of "
"objects, which are passed to @var{function} as separate arguments, rather "
"than a single list.  We say that @code{apply} @dfn{spreads} this list so "
"that each individual element becomes an argument."
msgstr ""

# type: defun
#: lispref/functions.texi:698
msgid ""
"@code{apply} returns the result of calling @var{function}.  As with @code"
"{funcall}, @var{function} must either be a Lisp function or a primitive "
"function; special forms and macros do not make sense in @code{apply}."
msgstr ""

# type: group
#: lispref/functions.texi:707
#, no-wrap
msgid ""
"(apply f 'x 'y 'z)\n"
"@error{} Wrong type argument: listp, z\n"
msgstr ""

# type: group
#: lispref/functions.texi:711
#, no-wrap
msgid ""
"(apply '+ 1 2 '(3 4))\n"
"     @result{} 10\n"
msgstr ""

# type: group
#: lispref/functions.texi:715
#, no-wrap
msgid ""
"(apply '+ '(1 2 3 4))\n"
"     @result{} 10\n"
msgstr ""

# type: group
#: lispref/functions.texi:720 lispref/lists.texi:586
#, no-wrap
msgid ""
"(apply 'append '((a b c) nil (x y z) nil))\n"
"     @result{} (a b c x y z)\n"
msgstr ""

# type: defun
#: lispref/functions.texi:725
msgid ""
"For an interesting example of using @code{apply}, see @ref{Definition of "
"mapcar}."
msgstr ""

# type: cindex
#: lispref/functions.texi:727
#, no-wrap
msgid "functionals"
msgstr ""

# type: Plain text
#: lispref/functions.texi:732
msgid ""
"It is common for Lisp functions to accept functions as arguments or find "
"them in data structures (especially in hook variables and property lists) "
"and call them using @code{funcall} or @code{apply}.  Functions that accept "
"function arguments are often called @dfn{functionals}."
msgstr ""

# type: Plain text
#: lispref/functions.texi:736
msgid ""
"Sometimes, when you call a functional, it is useful to supply a no-op "
"function as the argument.  Here are two different kinds of no-op function:"
msgstr ""

# type: defun
#: lispref/functions.texi:737
#, no-wrap
msgid "identity arg"
msgstr ""

# type: defun
#: lispref/functions.texi:739
msgid "This function returns @var{arg} and has no side effects."
msgstr ""

# type: defun
#: lispref/functions.texi:741
#, no-wrap
msgid "ignore &rest args"
msgstr ""

# type: defun
#: lispref/functions.texi:743
msgid "This function ignores any arguments and returns @code{nil}."
msgstr ""

# type: cindex
#: lispref/functions.texi:747
#, no-wrap
msgid "mapping functions"
msgstr ""

# type: Plain text
#: lispref/functions.texi:757
msgid ""
"A @dfn{mapping function} applies a given function (@emph{not} a special form "
"or macro) to each element of a list or other collection.  Emacs Lisp has "
"several such functions; @code{mapcar} and @code{mapconcat}, which scan a "
"list, are described here.  @xref{Definition of mapatoms}, for the function "
"@code{mapatoms} which maps over the symbols in an obarray.  @xref{Definition "
"of maphash}, for the function @code{maphash} which maps over key/value "
"associations in a hash table."
msgstr ""

# type: Plain text
#: lispref/functions.texi:762
msgid ""
"These mapping functions do not allow char-tables because a char-table is a "
"sparse array whose nominal range of indices is very large.  To map over a "
"char-table in a way that deals properly with its sparse nature, use the "
"function @code{map-char-table} (@pxref{Char-Tables})."
msgstr ""

# type: defun
#: lispref/functions.texi:763
#, no-wrap
msgid "mapcar function sequence"
msgstr ""

# type: anchor{#1}
#: lispref/functions.texi:767
msgid "Definition of mapcar"
msgstr ""

# type: defun
#: lispref/functions.texi:767
msgid ""
"@code{mapcar} applies @var{function} to each element of @var{sequence} in "
"turn, and returns a list of the results."
msgstr ""

# type: defun
#: lispref/functions.texi:772
msgid ""
"The argument @var{sequence} can be any kind of sequence except a char-table; "
"that is, a list, a vector, a bool-vector, or a string.  The result is always "
"a list.  The length of the result is the same as the length of @var"
"{sequence}.  For example:"
msgstr ""

# type: group
#: lispref/functions.texi:781
#, no-wrap
msgid ""
"(mapcar 'car '((a b) (c d) (e f)))\n"
"     @result{} (a c e)\n"
"(mapcar '1+ [1 2 3])\n"
"     @result{} (2 3 4)\n"
"(mapcar 'char-to-string \"abc\")\n"
"     @result{} (\"a\" \"b\" \"c\")\n"
msgstr ""

# type: group
#: lispref/functions.texi:786
#, no-wrap
msgid ""
";; @r{Call each function in @code{my-hooks}.}\n"
"(mapcar 'funcall my-hooks)\n"
msgstr ""

# type: group
#: lispref/functions.texi:799
#, no-wrap
msgid ""
"(defun mapcar* (function &rest args)\n"
"  \"Apply FUNCTION to successive cars of all ARGS.\n"
"Return the list of results.\"\n"
"  ;; @r{If no list is exhausted,}\n"
"  (if (not (memq nil args))\n"
"      ;; @r{apply function to @sc{car}s.}\n"
"      (cons (apply function (mapcar 'car args))\n"
"            (apply 'mapcar* function\n"
"                   ;; @r{Recurse for rest of elements.}\n"
"                   (mapcar 'cdr args)))))\n"
msgstr ""

# type: group
#: lispref/functions.texi:804
#, no-wrap
msgid ""
"(mapcar* 'cons '(a b c) '(1 2 3 4))\n"
"     @result{} ((a . 1) (b . 2) (c . 3))\n"
msgstr ""

# type: defun
#: lispref/functions.texi:808
#, no-wrap
msgid "mapc function sequence"
msgstr ""

# type: defun
#: lispref/functions.texi:812
msgid ""
"@code{mapc} is like @code{mapcar} except that @var{function} is used for "
"side-effects only---the values it returns are ignored, not collected into a "
"list.  @code{mapc} always returns @var{sequence}."
msgstr ""

# type: defun
#: lispref/functions.texi:814
#, no-wrap
msgid "mapconcat function sequence separator"
msgstr ""

# type: defun
#: lispref/functions.texi:820
msgid ""
"@code{mapconcat} applies @var{function} to each element of @var{sequence}: "
"the results, which must be strings, are concatenated.  Between each pair of "
"result strings, @code{mapconcat} inserts the string @var{separator}.  "
"Usually @var{separator} contains a space or comma or other suitable "
"punctuation."
msgstr ""

# type: defun
#: lispref/functions.texi:825
msgid ""
"The argument @var{function} must be a function that can take one argument "
"and return a string.  The argument @var{sequence} can be any kind of "
"sequence except a char-table; that is, a list, a vector, a bool-vector, or a "
"string."
msgstr ""

# type: group
#: lispref/functions.texi:832
#, no-wrap
msgid ""
"(mapconcat 'symbol-name\n"
"           '(The cat in the hat)\n"
"           \" \")\n"
"     @result{} \"The cat in the hat\"\n"
msgstr ""

# type: group
#: lispref/functions.texi:839
#, no-wrap
msgid ""
"(mapconcat (function (lambda (x) (format \"%c\" (1+ x))))\n"
"           \"HAL-8000\"\n"
"           \"\")\n"
"     @result{} \"IBM.9111\"\n"
msgstr ""

# type: cindex
#: lispref/functions.texi:845
#, no-wrap
msgid "anonymous function"
msgstr ""

# type: Plain text
#: lispref/functions.texi:853
msgid ""
"In Lisp, a function is a list that starts with @code{lambda}, a byte-code "
"function compiled from such a list, or alternatively a primitive subr-"
"object; names are ``extra.'' Although usually functions are defined with "
"@code{defun} and given names at the same time, it is occasionally more "
"concise to use an explicit lambda expression---an anonymous function.  Such "
"a list is valid wherever a function name is."
msgstr ""

# type: Plain text
#: lispref/functions.texi:855
msgid "Any method of creating such a list makes a valid function.  Even this:"
msgstr ""

# type: group
#: lispref/functions.texi:860
#, no-wrap
msgid ""
"(setq silly (append '(lambda (x)) (list (list '+ (* 3 4) 'x))))\n"
"@result{} (lambda (x) (+ 12 x))\n"
msgstr ""

# type: Plain text
#: lispref/functions.texi:867
msgid ""
"This computes a list that looks like @code{(lambda (x) (+ 12 x))} and makes "
"it the value (@emph{not} the function definition!) of @code{silly}."
msgstr ""

# type: Plain text
#: lispref/functions.texi:869
msgid "Here is how we might call this function:"
msgstr ""

# type: group
#: lispref/functions.texi:874
#, no-wrap
msgid ""
"(funcall silly 1)\n"
"@result{} 13\n"
msgstr ""

# type: Plain text
#: lispref/functions.texi:881
msgid ""
"(It does @emph{not} work to write @code{(silly 1)}, because this function is "
"not the @emph{function definition} of @code{silly}.  We have not given @code"
"{silly} any function definition, just a value as a variable.)"
msgstr ""

# type: Plain text
#: lispref/functions.texi:886
msgid ""
"Most of the time, anonymous functions are constants that appear in your "
"program.  For example, you might want to pass one as an argument to the "
"function @code{mapcar}, which applies any given function to each element of "
"a list."
msgstr ""

# type: Plain text
#: lispref/functions.texi:889
msgid ""
"Here we define a function @code{change-property} which uses a function as "
"its third argument:"
msgstr ""

# type: group
#: lispref/functions.texi:895
#, no-wrap
msgid ""
"(defun change-property (symbol prop function)\n"
"  (let ((value (get symbol prop)))\n"
"    (put symbol prop (funcall function value))))\n"
msgstr ""

# type: Plain text
#: lispref/functions.texi:901
msgid ""
"Here we define a function that uses @code{change-property}, passing it a "
"function to double a number:"
msgstr ""

# type: group
#: lispref/functions.texi:906
#, no-wrap
msgid ""
"(defun double-property (symbol prop)\n"
"  (change-property symbol prop '(lambda (x) (* 2 x))))\n"
msgstr ""

# type: Plain text
#: lispref/functions.texi:912
msgid ""
"In such cases, we usually use the special form @code{function} instead of "
"simple quotation to quote the anonymous function, like this:"
msgstr ""

# type: group
#: lispref/functions.texi:918
#, no-wrap
msgid ""
"(defun double-property (symbol prop)\n"
"  (change-property symbol prop\n"
"                   (function (lambda (x) (* 2 x)))))\n"
msgstr ""

# type: Plain text
#: lispref/functions.texi:927
msgid ""
"Using @code{function} instead of @code{quote} makes a difference if you "
"compile the function @code{double-property}.  For example, if you compile "
"the second definition of @code{double-property}, the anonymous function is "
"compiled as well.  By contrast, if you compile the first definition which "
"uses ordinary @code{quote}, the argument passed to @code{change-property} is "
"the precise list shown:"
msgstr ""

# type: example
#: lispref/functions.texi:930
#, no-wrap
msgid "(lambda (x) (* x 2))\n"
msgstr ""

# type: Plain text
#: lispref/functions.texi:938
msgid ""
"The Lisp compiler cannot assume this list is a function, even though it "
"looks like one, since it does not know what @code{change-property} will do "
"with the list.  Perhaps it will check whether the @sc{car} of the third "
"element is the symbol @code{*}! Using @code{function} tells the compiler it "
"is safe to go ahead and compile the constant function."
msgstr ""

# type: Plain text
#: lispref/functions.texi:940
msgid "Nowadays it is possible to omit @code{function} entirely, like this:"
msgstr ""

# type: group
#: lispref/functions.texi:945
#, no-wrap
msgid ""
"(defun double-property (symbol prop)\n"
"  (change-property symbol prop (lambda (x) (* 2 x))))\n"
msgstr ""

# type: Plain text
#: lispref/functions.texi:950
msgid "This is because @code{lambda} itself implies @code{function}."
msgstr ""

# type: Plain text
#: lispref/functions.texi:954
msgid ""
"We sometimes write @code{function} instead of @code{quote} when quoting the "
"name of a function, but this usage is just a sort of comment:"
msgstr ""

# type: example
#: lispref/functions.texi:957
#, no-wrap
msgid "(function @var{symbol}) @equiv{} (quote @var{symbol}) @equiv{} '@var{symbol}\n"
msgstr ""

# type: cindex
#: lispref/functions.texi:959
#, no-wrap
msgid "@samp{#'} syntax"
msgstr ""

# type: Plain text
#: lispref/functions.texi:962
msgid ""
"The read syntax @code{#'} is a short-hand for using @code{function}.  For "
"example,"
msgstr ""

# type: example
#: lispref/functions.texi:965
#, no-wrap
msgid "#'(lambda (x) (* x x))\n"
msgstr ""

# type: Plain text
#: lispref/functions.texi:969
msgid "is equivalent to"
msgstr ""

# type: example
#: lispref/functions.texi:972
#, no-wrap
msgid "(function (lambda (x) (* x x)))\n"
msgstr ""

# type: defspec
#: lispref/functions.texi:974
#, no-wrap
msgid "function function-object"
msgstr ""

# type: cindex
#: lispref/functions.texi:975
#, no-wrap
msgid "function quoting"
msgstr ""

# type: defspec
#: lispref/functions.texi:981
msgid ""
"This special form returns @var{function-object} without evaluating it.  In "
"this, it is equivalent to @code{quote}.  However, it serves as a note to the "
"Emacs Lisp compiler that @var{function-object} is intended to be used only "
"as a function, and therefore can safely be compiled.  Contrast this with "
"@code{quote}, in @ref{Quoting}."
msgstr ""

# type: Plain text
#: lispref/functions.texi:985
msgid ""
"@xref{describe-symbols example}, for a realistic example using @code"
"{function} and an anonymous function."
msgstr ""

# type: section
#: lispref/functions.texi:987
#, no-wrap
msgid "Accessing Function Cell Contents"
msgstr ""

# type: Plain text
#: lispref/functions.texi:992
msgid ""
"The @dfn{function definition} of a symbol is the object stored in the "
"function cell of the symbol.  The functions described here access, test, and "
"set the function cell of symbols."
msgstr ""

# type: Plain text
#: lispref/functions.texi:995
msgid ""
"See also the function @code{indirect-function}.  @xref{Definition of "
"indirect-function}."
msgstr ""

# type: defun
#: lispref/functions.texi:996
#, no-wrap
msgid "symbol-function symbol"
msgstr ""

# type: defun
#: lispref/functions.texi:1001
msgid ""
"This returns the object in the function cell of @var{symbol}.  If the "
"symbol's function cell is void, a @code{void-function} error is signaled."
msgstr ""

# type: defun
#: lispref/functions.texi:1004
msgid ""
"This function does not check that the returned object is a legitimate "
"function."
msgstr ""

# type: group
#: lispref/functions.texi:1009
#, no-wrap
msgid ""
"(defun bar (n) (+ n 2))\n"
"     @result{} bar\n"
msgstr ""

# type: group
#: lispref/functions.texi:1013
#, no-wrap
msgid ""
"(symbol-function 'bar)\n"
"     @result{} (lambda (n) (+ n 2))\n"
msgstr ""

# type: group
#: lispref/functions.texi:1017
#, no-wrap
msgid ""
"(fset 'baz 'bar)\n"
"     @result{} bar\n"
msgstr ""

# type: group
#: lispref/functions.texi:1021
#, no-wrap
msgid ""
"(symbol-function 'baz)\n"
"     @result{} bar\n"
msgstr ""

# type: cindex
#: lispref/functions.texi:1025
#, no-wrap
msgid "void function cell"
msgstr ""

# type: Plain text
#: lispref/functions.texi:1030
msgid ""
"If you have never given a symbol any function definition, we say that that "
"symbol's function cell is @dfn{void}.  In other words, the function cell "
"does not have any Lisp object in it.  If you try to call such a symbol as a "
"function, it signals a @code{void-function} error."
msgstr ""

# type: Plain text
#: lispref/functions.texi:1036
msgid ""
"Note that void is not the same as @code{nil} or the symbol @code{void}.  The "
"symbols @code{nil} and @code{void} are Lisp objects, and can be stored into "
"a function cell just as any other object can be (and they can be valid "
"functions if you define them in turn with @code{defun}).  A void function "
"cell contains no object whatsoever."
msgstr ""

# type: Plain text
#: lispref/functions.texi:1040
msgid ""
"You can test the voidness of a symbol's function definition with @code"
"{fboundp}.  After you have given a symbol a function definition, you can "
"make it void once more using @code{fmakunbound}."
msgstr ""

# type: defun
#: lispref/functions.texi:1041
#, no-wrap
msgid "fboundp symbol"
msgstr ""

# type: defun
#: lispref/functions.texi:1045
msgid ""
"This function returns @code{t} if the symbol has an object in its function "
"cell, @code{nil} otherwise.  It does not check that the object is a "
"legitimate function."
msgstr ""

# type: defun
#: lispref/functions.texi:1047
#, no-wrap
msgid "fmakunbound symbol"
msgstr ""

# type: defun
#: lispref/functions.texi:1052
msgid ""
"This function makes @var{symbol}'s function cell void, so that a subsequent "
"attempt to access this cell will cause a @code{void-function} error.  It "
"returns @var{symbol}.  (See also @code{makunbound}, in @ref{Void Variables}.)"
msgstr ""

# type: group
#: lispref/functions.texi:1057
#, no-wrap
msgid ""
"(defun foo (x) x)\n"
"     @result{} foo\n"
msgstr ""

# type: group
#: lispref/functions.texi:1061
#, no-wrap
msgid ""
"(foo 1)\n"
"     @result{}1\n"
msgstr ""

# type: group
#: lispref/functions.texi:1065
#, no-wrap
msgid ""
"(fmakunbound 'foo)\n"
"     @result{} foo\n"
msgstr ""

# type: group
#: lispref/functions.texi:1069
#, no-wrap
msgid ""
"(foo 1)\n"
"@error{} Symbol's function definition is void: foo\n"
msgstr ""

# type: defun
#: lispref/functions.texi:1073
#, no-wrap
msgid "fset symbol definition"
msgstr ""

# type: defun
#: lispref/functions.texi:1079
msgid ""
"This function stores @var{definition} in the function cell of @var{symbol}.  "
"The result is @var{definition}.  Normally @var{definition} should be a "
"function or the name of a function, but this is not checked.  The argument "
"@var{symbol} is an ordinary evaluated argument."
msgstr ""

# type: defun
#: lispref/functions.texi:1081
msgid "There are three normal uses of this function:"
msgstr ""

# type: itemize
#: lispref/functions.texi:1088
msgid ""
"Copying one symbol's function definition to another---in other words, making "
"an alternate name for a function.  (If you think of this as the definition "
"of the new name, you should use @code{defalias} instead of @code{fset}; see "
"@ref{Definition of defalias}.)"
msgstr ""

# type: itemize
#: lispref/functions.texi:1096
msgid ""
"Giving a symbol a function definition that is not a list and therefore "
"cannot be made with @code{defun}.  For example, you can use @code{fset} to "
"give a symbol @code{s1} a function definition which is another symbol @code"
"{s2}; then @code{s1} serves as an alias for whatever definition @code{s2} "
"presently has.  (Once again use @code{defalias} instead of @code{fset} if "
"you think of this as the definition of @code{s1}.)"
msgstr ""

# type: itemize
#: lispref/functions.texi:1101
msgid ""
"In constructs for defining or altering functions.  If @code{defun} were not "
"a primitive, it could be written in Lisp (as a macro) using @code{fset}."
msgstr ""

# type: defun
#: lispref/functions.texi:1104
msgid "Here are examples of these uses:"
msgstr ""

# type: group
#: lispref/functions.texi:1109
#, no-wrap
msgid ""
";; @r{Save @code{foo}'s definition in @code{old-foo}.}\n"
"(fset 'old-foo (symbol-function 'foo))\n"
msgstr ""

# type: group
#: lispref/functions.texi:1116
#, no-wrap
msgid ""
";; @r{Make the symbol @code{car} the function definition of @code{xfirst}.}\n"
";; @r{(Most likely, @code{defalias} would be better than @code{fset} here.)}\n"
"(fset 'xfirst 'car)\n"
"     @result{} car\n"
msgstr ""

# type: group
#: lispref/functions.texi:1120
#, no-wrap
msgid ""
"(xfirst '(1 2 3))\n"
"     @result{} 1\n"
msgstr ""

# type: group
#: lispref/functions.texi:1124
#, no-wrap
msgid ""
"(symbol-function 'xfirst)\n"
"     @result{} car\n"
msgstr ""

# type: group
#: lispref/functions.texi:1128
#, no-wrap
msgid ""
"(symbol-function (symbol-function 'xfirst))\n"
"     @result{} #<subr car>\n"
msgstr ""

# type: group
#: lispref/functions.texi:1134
#, no-wrap
msgid ""
";; @r{Define a named keyboard macro.}\n"
"(fset 'kill-two-lines \"\\^u2\\^k\")\n"
"     @result{} \"\\^u2\\^k\"\n"
msgstr ""

# type: group
#: lispref/functions.texi:1141
#, no-wrap
msgid ""
";; @r{Here is a function that alters other functions.}\n"
"(defun copy-function-definition (new old)\n"
"  \"Define NEW with the same function definition as OLD.\"\n"
"  (fset new (symbol-function old)))\n"
msgstr ""

# type: Plain text
#: lispref/functions.texi:1151
msgid ""
"@code{fset} is sometimes used to save the old definition of a function "
"before redefining it.  That permits the new definition to invoke the old "
"definition.  But it is unmodular and unclean for a Lisp file to redefine a "
"function defined elsewhere.  If you want to modify a function defined by "
"another package, it is cleaner to use @code{defadvice} (@pxref{Advising "
"Functions})."
msgstr ""

# type: section
#: lispref/functions.texi:1153
#, no-wrap
msgid "Declaring Functions Obsolete"
msgstr ""

# type: Plain text
#: lispref/functions.texi:1157
msgid ""
"You can use @code{make-obsolete} to declare a function obsolete.  This "
"indicates that the function may be removed at some stage in the future."
msgstr ""

# type: defun
#: lispref/functions.texi:1158
#, no-wrap
msgid "make-obsolete obsolete-name current-name &optional when"
msgstr ""

# type: defun
#: lispref/functions.texi:1166
msgid ""
"This function makes the byte compiler warn that the function @var{obsolete-"
"name} is obsolete.  If @var{current-name} is a symbol, the warning message "
"says to use @var{current-name} instead of @var{obsolete-name}.  @var{current-"
"name} does not need to be an alias for @var{obsolete-name}; it can be a "
"different function with similar functionality.  If @var{current-name} is a "
"string, it is the warning message."
msgstr ""

# type: defun
#: lispref/functions.texi:1169
msgid ""
"If provided, @var{when} should be a string indicating when the function was "
"first made obsolete---for example, a date or a release number."
msgstr ""

# type: Plain text
#: lispref/functions.texi:1173
msgid ""
"You can define a function as an alias and declare it obsolete at the same "
"time using the macro @code{define-obsolete-function-alias}."
msgstr ""

# type: defmac
#: lispref/functions.texi:1174
#, no-wrap
msgid "define-obsolete-function-alias obsolete-name current-name &optional when docstring"
msgstr ""

# type: defmac
#: lispref/functions.texi:1178
msgid ""
"This macro marks the function @var{obsolete-name} obsolete and also defines "
"it as an alias for the function @var{current-name}.  It is equivalent to the "
"following:"
msgstr ""

# type: example
#: lispref/functions.texi:1182
#, no-wrap
msgid ""
"(defalias @var{obsolete-name} @var{current-name} @var{docstring})\n"
"(make-obsolete @var{obsolete-name} @var{current-name} @var{when})\n"
msgstr ""

# type: cindex
#: lispref/functions.texi:1187
#, no-wrap
msgid "inline functions"
msgstr ""

# type: findex
#: lispref/functions.texi:1189
#, no-wrap
msgid "defsubst"
msgstr "defsubst"

# type: Plain text
#: lispref/functions.texi:1194
msgid ""
"You can define an @dfn{inline function} by using @code{defsubst} instead of "
"@code{defun}.  An inline function works just like an ordinary function "
"except for one thing: when you compile a call to the function, the "
"function's definition is open-coded into the caller."
msgstr ""

# type: Plain text
#: lispref/functions.texi:1199
msgid ""
"Making a function inline makes explicit calls run faster.  But it also has "
"disadvantages.  For one thing, it reduces flexibility; if you change the "
"definition of the function, calls already inlined still use the old "
"definition until you recompile them."
msgstr ""

# type: Plain text
#: lispref/functions.texi:1204
msgid ""
"Another disadvantage is that making a large function inline can increase the "
"size of compiled code both in files and in memory.  Since the speed "
"advantage of inline functions is greatest for small functions, you generally "
"should not make large functions inline."
msgstr ""

# type: Plain text
#: lispref/functions.texi:1211
msgid ""
"Also, inline functions do not behave well with respect to debugging, "
"tracing, and advising (@pxref{Advising Functions}).  Since ease of debugging "
"and the flexibility of redefining functions are important features of Emacs, "
"you should not make a function inline, even if it's small, unless its speed "
"is really crucial, and you've timed the code to verify that using @code"
"{defun} actually has performance problems."
msgstr ""

# type: Plain text
#: lispref/functions.texi:1221
msgid ""
"It's possible to define a macro to expand into the same code that an inline "
"function would execute.  (@xref{Macros}.)  But the macro would be limited to "
"direct use in expressions---a macro cannot be called with @code{apply}, @code"
"{mapcar} and so on.  Also, it takes some work to convert an ordinary "
"function into a macro.  To convert it into an inline function is very easy; "
"simply replace @code{defun} with @code{defsubst}.  Since each argument of an "
"inline function is evaluated exactly once, you needn't worry about how many "
"times the body uses the arguments, as you do for macros.  (@xref{Argument "
"Evaluation}.)"
msgstr ""

# type: Plain text
#: lispref/functions.texi:1224
msgid ""
"Inline functions can be used and open-coded later on in the same file, "
"following the definition, just like macros."
msgstr ""

# type: section
#: lispref/functions.texi:1226
#, no-wrap
msgid "Determining whether a Function is Safe to Call"
msgstr ""

# type: cindex
#: lispref/functions.texi:1227
#, no-wrap
msgid "function safety"
msgstr ""

# type: cindex
#: lispref/functions.texi:1228
#, no-wrap
msgid "safety of functions"
msgstr ""

# type: Plain text
#: lispref/functions.texi:1236
msgid ""
"Some major modes such as SES call functions that are stored in user files.  "
"(@inforef{Top, ,ses}, for more information on SES.)  User files sometimes "
"have poor pedigrees---you can get a spreadsheet from someone you've just "
"met, or you can get one through email from someone you've never met.  So it "
"is risky to call a function whose source code is stored in a user file until "
"you have determined that it is safe."
msgstr ""

# type: defun
#: lispref/functions.texi:1237
#, no-wrap
msgid "unsafep form &optional unsafep-vars"
msgstr ""

# type: defun
#: lispref/functions.texi:1244
msgid ""
"Returns @code{nil} if @var{form} is a @dfn{safe} Lisp expression, or returns "
"a list that describes why it might be unsafe.  The argument @var{unsafep-"
"vars} is a list of symbols known to have temporary bindings at this point; "
"it is mainly used for internal recursive calls.  The current buffer is an "
"implicit argument, which provides a list of buffer-local bindings."
msgstr ""

# type: Plain text
#: lispref/functions.texi:1255
msgid ""
"Being quick and simple, @code{unsafep} does a very light analysis and "
"rejects many Lisp expressions that are actually safe.  There are no known "
"cases where @code{unsafep} returns @code{nil} for an unsafe expression.  "
"However, a ``safe'' Lisp expression can return a string with a @code"
"{display} property, containing an associated Lisp expression to be executed "
"after the string is inserted into a buffer.  This associated expression can "
"be a virus.  In order to be safe, you must delete properties from all "
"strings calculated by user code before inserting them into buffers."
msgstr ""

# type: ignore
#: lispref/functions.texi:1261
#, no-wrap
msgid ""
"What is a safe Lisp expression?  Basically, it's an expression that\n"
"calls only built-in functions with no side effects (or only innocuous\n"
"ones).  Innocuous side effects include displaying messages and\n"
"altering non-risky buffer-local variables (but not global variables).\n"
"\n"
msgstr ""

# type: item
#: lispref/functions.texi:1263
#, no-wrap
msgid "Safe expression"
msgstr ""

# type: itemize
#: lispref/functions.texi:1267
#, no-wrap
msgid "An atom or quoted thing.\n"
msgstr ""

# type: itemize
#: lispref/functions.texi:1270
#, no-wrap
msgid ""
"A call to a safe function (see below), if all its arguments are\n"
"safe expressions.\n"
msgstr ""

# type: itemize
#: lispref/functions.texi:1275
#, no-wrap
msgid ""
"One of the special forms @code{and}, @code{catch}, @code{cond},\n"
"@code{if}, @code{or}, @code{prog1}, @code{prog2}, @code{progn},\n"
"@code{while}, and @code{unwind-protect}], if all its arguments are\n"
"safe.\n"
msgstr ""

# type: itemize
#: lispref/functions.texi:1280
#, no-wrap
msgid ""
"A form that creates temporary bindings (@code{condition-case},\n"
"@code{dolist}, @code{dotimes}, @code{lambda}, @code{let}, or\n"
"@code{let*}), if all args are safe and the symbols to be bound are not\n"
"explicitly risky (see @pxref{File Local Variables}).\n"
msgstr ""

# type: itemize
#: lispref/functions.texi:1285
#, no-wrap
msgid ""
"An assignment using @code{add-to-list}, @code{setq}, @code{push}, or\n"
"@code{pop}, if all args are safe and the symbols to be assigned are\n"
"not explicitly risky and they already have temporary or buffer-local\n"
"bindings.\n"
msgstr ""

# type: itemize
#: lispref/functions.texi:1288
#, no-wrap
msgid ""
"One of [apply, mapc, mapcar, mapconcat] if the first argument is a\n"
"safe explicit lambda and the other args are safe expressions.\n"
msgstr ""

# type: item
#: lispref/functions.texi:1290
#, no-wrap
msgid "Safe function"
msgstr ""

# type: itemize
#: lispref/functions.texi:1294
#, no-wrap
msgid "A lambda containing safe expressions.\n"
msgstr ""

# type: itemize
#: lispref/functions.texi:1296
#, no-wrap
msgid "A symbol on the list @code{safe-functions}, so the user says it's safe.\n"
msgstr ""

# type: itemize
#: lispref/functions.texi:1298
#, no-wrap
msgid "A symbol with a non-@code{nil} @code{side-effect-free} property.\n"
msgstr ""

# type: itemize
#: lispref/functions.texi:1303
#, no-wrap
msgid ""
"A symbol with a non-@code{nil} @code{safe-function} property.  Value t\n"
"indicates a function that is safe but has innocuous side effects.\n"
"Other values will someday indicate functions with classes of side\n"
"effects that are not always safe.\n"
msgstr ""

# type: table
#: lispref/functions.texi:1309
#, no-wrap
msgid ""
"The @code{side-effect-free} and @code{safe-function} properties are\n"
"provided for built-in functions and for low-level functions and macros\n"
"defined in @file{subr.el}.  You can assign these properties for the\n"
"functions you write.\n"
msgstr ""

# type: section
#: lispref/functions.texi:1313
#, no-wrap
msgid "Other Topics Related to Functions"
msgstr ""

# type: Plain text
#: lispref/functions.texi:1318
msgid ""
"Here is a table of several functions that do things related to function "
"calling and function definitions.  They are documented elsewhere, but we "
"provide cross references here."
msgstr ""

# type: item
#: lispref/functions.texi:1320
#, no-wrap
msgid "apply"
msgstr ""

# type: table
#: lispref/functions.texi:1322 lispref/functions.texi:1340
#: lispref/functions.texi:1346
msgid "See @ref{Calling Functions}."
msgstr ""

# type: cindex
#: lispref/functions.texi:1323 lispref/loading.texi:395
#, no-wrap
msgid "autoload"
msgstr ""

# type: table
#: lispref/functions.texi:1325
msgid "See @ref{Autoload}."
msgstr ""

# type: item
#: lispref/functions.texi:1326
#, no-wrap
msgid "call-interactively"
msgstr ""

# type: table
#: lispref/functions.texi:1328 lispref/functions.texi:1331
#: lispref/functions.texi:1355
msgid "See @ref{Interactive Call}."
msgstr ""

# type: item
#: lispref/functions.texi:1329 lispref/objects.texi:1739
#, no-wrap
msgid "commandp"
msgstr ""

# type: item
#: lispref/functions.texi:1332
#, no-wrap
msgid "documentation"
msgstr ""

# type: table
#: lispref/functions.texi:1334
msgid "See @ref{Accessing Documentation}."
msgstr ""

# type: item
#: lispref/functions.texi:1335
#, no-wrap
msgid "eval"
msgstr ""

# type: table
#: lispref/functions.texi:1337
msgid "See @ref{Eval}."
msgstr ""

# type: item
#: lispref/functions.texi:1338
#, no-wrap
msgid "funcall"
msgstr ""

# type: table
#: lispref/functions.texi:1343
msgid "See @ref{Anonymous Functions}."
msgstr ""

# type: item
#: lispref/functions.texi:1344
#, no-wrap
msgid "ignore"
msgstr ""

# type: item
#: lispref/functions.texi:1347
#, no-wrap
msgid "indirect-function"
msgstr ""

# type: table
#: lispref/functions.texi:1349
msgid "See @ref{Function Indirection}."
msgstr ""

# type: table
#: lispref/functions.texi:1352
msgid "See @ref{Using Interactive}."
msgstr ""

# type: item
#: lispref/functions.texi:1356
#, no-wrap
msgid "mapatoms"
msgstr ""

# type: table
#: lispref/functions.texi:1358
msgid "See @ref{Creating Symbols}."
msgstr ""

# type: item
#: lispref/functions.texi:1359
#, no-wrap
msgid "mapcar"
msgstr ""

# type: table
#: lispref/functions.texi:1361 lispref/functions.texi:1367
msgid "See @ref{Mapping Functions}."
msgstr ""

# type: item
#: lispref/functions.texi:1362
#, no-wrap
msgid "map-char-table"
msgstr ""

# type: table
#: lispref/functions.texi:1364
msgid "See @ref{Char-Tables}."
msgstr ""

# type: item
#: lispref/functions.texi:1365
#, no-wrap
msgid "mapconcat"
msgstr ""

# type: item
#: lispref/functions.texi:1368
#, no-wrap
msgid "undefined"
msgstr ""

# type: table
#: lispref/functions.texi:1370
msgid "See @ref{Functions for Key Lookup}."
msgstr ""

# type: ignore
#: lispref/functions.texi:1374
#, no-wrap
msgid "   arch-tag: 39100cdf-8a55-4898-acba-595db619e8e2\n"
msgstr "   arch-tag: 39100cdf-8a55-4898-acba-595db619e8e2\n"

# type: appendix
#: lispref/gpl.texi:6
#, no-wrap
msgid "GNU General Public License"
msgstr ""

# type: center
#: lispref/gpl.texi:7
#, no-wrap
msgid "Version 2, June 1991"
msgstr ""

# type: display
#: lispref/gpl.texi:12
#, no-wrap
msgid ""
"Copyright @copyright{} 1989, 1991 Free Software Foundation, Inc.\n"
"51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA\n"
"\n"
msgstr ""

# type: unnumberedsec
#: lispref/gpl.texi:17
#, no-wrap
msgid "Preamble"
msgstr ""

# type: Plain text
#: lispref/gpl.texi:28
msgid ""
"The licenses for most software are designed to take away your freedom to "
"share and change it.  By contrast, the GNU General Public License is "
"intended to guarantee your freedom to share and change free software---to "
"make sure the software is free for all its users.  This General Public "
"License applies to most of the Free Software Foundation's software and to "
"any other program whose authors commit to using it.  (Some other Free "
"Software Foundation software is covered by the GNU Lesser General Public "
"License instead.)  You can apply it to your programs, too."
msgstr ""

# type: Plain text
#: lispref/gpl.texi:35
msgid ""
"When we speak of free software, we are referring to freedom, not price.  Our "
"General Public Licenses are designed to make sure that you have the freedom "
"to distribute copies of free software (and charge for this service if you "
"wish), that you receive source code or can get it if you want it, that you "
"can change the software or use pieces of it in new free programs; and that "
"you know you can do these things."
msgstr ""

# type: Plain text
#: lispref/gpl.texi:40
msgid ""
"To protect your rights, we need to make restrictions that forbid anyone to "
"deny you these rights or to ask you to surrender the rights.  These "
"restrictions translate to certain responsibilities for you if you distribute "
"copies of the software, or if you modify it."
msgstr ""

# type: Plain text
#: lispref/gpl.texi:46
msgid ""
"For example, if you distribute copies of such a program, whether gratis or "
"for a fee, you must give the recipients all the rights that you have.  You "
"must make sure that they, too, receive or can get the source code.  And you "
"must show them these terms so they know their rights."
msgstr ""

# type: Plain text
#: lispref/gpl.texi:50
msgid ""
"We protect your rights with two steps: (1) copyright the software, and (2) "
"offer you this license which gives you legal permission to copy, distribute "
"and/or modify the software."
msgstr ""

# type: Plain text
#: lispref/gpl.texi:57
msgid ""
"Also, for each author's protection and ours, we want to make certain that "
"everyone understands that there is no warranty for this free software.  If "
"the software is modified by someone else and passed on, we want its "
"recipients to know that what they have is not the original, so that any "
"problems introduced by others will not reflect on the original authors' "
"reputations."
msgstr ""

# type: Plain text
#: lispref/gpl.texi:63
msgid ""
"Finally, any free program is threatened constantly by software patents.  We "
"wish to avoid the danger that redistributors of a free program will "
"individually obtain patent licenses, in effect making the program "
"proprietary.  To prevent this, we have made it clear that any patent must be "
"licensed for everyone's free use or not licensed at all."
msgstr ""

# type: Plain text
#: lispref/gpl.texi:66
msgid ""
"The precise terms and conditions for copying, distribution and modification "
"follow."
msgstr ""

# type: unnumberedsec
#: lispref/gpl.texi:68
#, no-wrap
msgid "Terms and Conditions for Copying, Distribution and Modification"
msgstr ""

# type: center
#: lispref/gpl.texi:71
#, no-wrap
msgid "TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION"
msgstr ""

# type: enumerate
#: lispref/gpl.texi:85
msgid ""
"This License applies to any program or other work which contains a notice "
"placed by the copyright holder saying it may be distributed under the terms "
"of this General Public License.  The ``Program'', below, refers to any such "
"program or work, and a ``work based on the Program'' means either the "
"Program or any derivative work under copyright law: that is to say, a work "
"containing the Program or a portion of it, either verbatim or with "
"modifications and/or translated into another language.  (Hereinafter, "
"translation is included without limitation in the term ``modification''.)  "
"Each licensee is addressed as ``you''."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:92
msgid ""
"Activities other than copying, distribution and modification are not covered "
"by this License; they are outside its scope.  The act of running the Program "
"is not restricted, and the output from the Program is covered only if its "
"contents constitute a work based on the Program (independent of having been "
"made by running the Program).  Whether that is true depends on what the "
"Program does."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:101
msgid ""
"You may copy and distribute verbatim copies of the Program's source code as "
"you receive it, in any medium, provided that you conspicuously and "
"appropriately publish on each copy an appropriate copyright notice and "
"disclaimer of warranty; keep intact all the notices that refer to this "
"License and to the absence of any warranty; and give any other recipients of "
"the Program a copy of this License along with the Program."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:104
msgid ""
"You may charge a fee for the physical act of transferring a copy, and you "
"may at your option offer warranty protection in exchange for a fee."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:110
msgid ""
"You may modify your copy or copies of the Program or any portion of it, thus "
"forming a work based on the Program, and copy and distribute such "
"modifications or work under the terms of Section 1 above, provided that you "
"also meet all of these conditions:"
msgstr ""

# type: enumerate
#: lispref/gpl.texi:115
msgid ""
"You must cause the modified files to carry prominent notices stating that "
"you changed the files and the date of any change."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:121
msgid ""
"You must cause any work that you distribute or publish, that in whole or in "
"part contains or is derived from the Program or any part thereof, to be "
"licensed as a whole at no charge to all third parties under the terms of "
"this License."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:133
msgid ""
"If the modified program normally reads commands interactively when run, you "
"must cause it, when started running for such interactive use in the most "
"ordinary way, to print or display an announcement including an appropriate "
"copyright notice and a notice that there is no warranty (or else, saying "
"that you provide a warranty) and that users may redistribute the program "
"under these conditions, and telling the user how to view a copy of this "
"License.  (Exception: if the Program itself is interactive but does not "
"normally print such an announcement, your work based on the Program is not "
"required to print an announcement.)"
msgstr ""

# type: enumerate
#: lispref/gpl.texi:144
msgid ""
"These requirements apply to the modified work as a whole.  If identifiable "
"sections of that work are not derived from the Program, and can be "
"reasonably considered independent and separate works in themselves, then "
"this License, and its terms, do not apply to those sections when you "
"distribute them as separate works.  But when you distribute the same "
"sections as part of a whole which is a work based on the Program, the "
"distribution of the whole must be on the terms of this License, whose "
"permissions for other licensees extend to the entire whole, and thus to each "
"and every part regardless of who wrote it."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:149
msgid ""
"Thus, it is not the intent of this section to claim rights or contest your "
"rights to work written entirely by you; rather, the intent is to exercise "
"the right to control the distribution of derivative or collective works "
"based on the Program."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:154
msgid ""
"In addition, mere aggregation of another work not based on the Program with "
"the Program (or with a work based on the Program) on a volume of a storage "
"or distribution medium does not bring the other work under the scope of this "
"License."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:159
msgid ""
"You may copy and distribute the Program (or a work based on it, under "
"Section 2) in object code or executable form under the terms of Sections 1 "
"and 2 above provided that you also do one of the following:"
msgstr ""

# type: enumerate
#: lispref/gpl.texi:165
msgid ""
"Accompany it with the complete corresponding machine-readable source code, "
"which must be distributed under the terms of Sections 1 and 2 above on a "
"medium customarily used for software interchange; or,"
msgstr ""

# type: enumerate
#: lispref/gpl.texi:173
msgid ""
"Accompany it with a written offer, valid for at least three years, to give "
"any third party, for a charge no more than your cost of physically "
"performing source distribution, a complete machine-readable copy of the "
"corresponding source code, to be distributed under the terms of Sections 1 "
"and 2 above on a medium customarily used for software interchange; or,"
msgstr ""

# type: enumerate
#: lispref/gpl.texi:180
msgid ""
"Accompany it with the information you received as to the offer to distribute "
"corresponding source code.  (This alternative is allowed only for "
"noncommercial distribution and only if you received the program in object "
"code or executable form with such an offer, in accord with Subsection b "
"above.)"
msgstr ""

# type: enumerate
#: lispref/gpl.texi:192
msgid ""
"The source code for a work means the preferred form of the work for making "
"modifications to it.  For an executable work, complete source code means all "
"the source code for all modules it contains, plus any associated interface "
"definition files, plus the scripts used to control compilation and "
"installation of the executable.  However, as a special exception, the source "
"code distributed need not include anything that is normally distributed (in "
"either source or binary form) with the major components (compiler, kernel, "
"and so on) of the operating system on which the executable runs, unless that "
"component itself accompanies the executable."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:198
msgid ""
"If distribution of executable or object code is made by offering access to "
"copy from a designated place, then offering equivalent access to copy the "
"source code from the same place counts as distribution of the source code, "
"even though third parties are not compelled to copy the source along with "
"the object code."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:207
msgid ""
"You may not copy, modify, sublicense, or distribute the Program except as "
"expressly provided under this License.  Any attempt otherwise to copy, "
"modify, sublicense or distribute the Program is void, and will automatically "
"terminate your rights under this License.  However, parties who have "
"received copies, or rights, from you under this License will not have their "
"licenses terminated so long as such parties remain in full compliance."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:217
msgid ""
"You are not required to accept this License, since you have not signed it.  "
"However, nothing else grants you permission to modify or distribute the "
"Program or its derivative works.  These actions are prohibited by law if you "
"do not accept this License.  Therefore, by modifying or distributing the "
"Program (or any work based on the Program), you indicate your acceptance of "
"this License to do so, and all its terms and conditions for copying, "
"distributing or modifying the Program or works based on it."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:226
msgid ""
"Each time you redistribute the Program (or any work based on the Program), "
"the recipient automatically receives a license from the original licensor to "
"copy, distribute or modify the Program subject to these terms and "
"conditions.  You may not impose any further restrictions on the recipients' "
"exercise of the rights granted herein.  You are not responsible for "
"enforcing compliance by third parties to this License."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:240
msgid ""
"If, as a consequence of a court judgment or allegation of patent "
"infringement or for any other reason (not limited to patent issues), "
"conditions are imposed on you (whether by court order, agreement or "
"otherwise) that contradict the conditions of this License, they do not "
"excuse you from the conditions of this License.  If you cannot distribute so "
"as to satisfy simultaneously your obligations under this License and any "
"other pertinent obligations, then as a consequence you may not distribute "
"the Program at all.  For example, if a patent license would not permit "
"royalty-free redistribution of the Program by all those who receive copies "
"directly or indirectly through you, then the only way you could satisfy both "
"it and this License would be to refrain entirely from distribution of the "
"Program."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:245
msgid ""
"If any portion of this section is held invalid or unenforceable under any "
"particular circumstance, the balance of the section is intended to apply and "
"the section as a whole is intended to apply in other circumstances."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:256
msgid ""
"It is not the purpose of this section to induce you to infringe any patents "
"or other property right claims or to contest validity of any such claims; "
"this section has the sole purpose of protecting the integrity of the free "
"software distribution system, which is implemented by public license "
"practices.  Many people have made generous contributions to the wide range "
"of software distributed through that system in reliance on consistent "
"application of that system; it is up to the author/donor to decide if he or "
"she is willing to distribute software through any other system and a "
"licensee cannot impose that choice."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:259
msgid ""
"This section is intended to make thoroughly clear what is believed to be a "
"consequence of the rest of this License."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:268
msgid ""
"If the distribution and/or use of the Program is restricted in certain "
"countries either by patents or by copyrighted interfaces, the original "
"copyright holder who places the Program under this License may add an "
"explicit geographical distribution limitation excluding those countries, so "
"that distribution is permitted only in or among countries not thus "
"excluded.  In such case, this License incorporates the limitation as if "
"written in the body of this License."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:274
msgid ""
"The Free Software Foundation may publish revised and/or new versions of the "
"General Public License from time to time.  Such new versions will be similar "
"in spirit to the present version, but may differ in detail to address new "
"problems or concerns."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:282
msgid ""
"Each version is given a distinguishing version number.  If the Program "
"specifies a version number of this License which applies to it and ``any "
"later version'', you have the option of following the terms and conditions "
"either of that version or of any later version published by the Free "
"Software Foundation.  If the Program does not specify a version number of "
"this License, you may choose any version ever published by the Free Software "
"Foundation."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:291
msgid ""
"If you wish to incorporate parts of the Program into other free programs "
"whose distribution conditions are different, write to the author to ask for "
"permission.  For software which is copyrighted by the Free Software "
"Foundation, write to the Free Software Foundation; we sometimes make "
"exceptions for this.  Our decision will be guided by the two goals of "
"preserving the free status of all derivatives of our free software and of "
"promoting the sharing and reuse of software generally."
msgstr ""

# type: center
#: lispref/gpl.texi:293 lispref/gpl.texi:296
#, no-wrap
msgid "NO WARRANTY"
msgstr ""

# type: enumerate
#: lispref/gpl.texi:309
msgid ""
"BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE "
"PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW@.  EXCEPT WHEN OTHERWISE "
"STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE "
"PROGRAM ``AS IS'' WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, "
"INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND "
"FITNESS FOR A PARTICULAR PURPOSE@.  THE ENTIRE RISK AS TO THE QUALITY AND "
"PERFORMANCE OF THE PROGRAM IS WITH YOU@.  SHOULD THE PROGRAM PROVE "
"DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR "
"CORRECTION."
msgstr ""

# type: enumerate
#: lispref/gpl.texi:320
msgid ""
"IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL "
"ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE "
"THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY "
"GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE "
"OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA "
"OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD "
"PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), "
"EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF "
"SUCH DAMAGES."
msgstr ""

# type: center
#: lispref/gpl.texi:323 lispref/gpl.texi:326
#, no-wrap
msgid "END OF TERMS AND CONDITIONS"
msgstr ""

# type: unnumberedsec
#: lispref/gpl.texi:330
#, no-wrap
msgid "How to Apply These Terms to Your New Programs"
msgstr ""

# type: Plain text
#: lispref/gpl.texi:335
msgid ""
"If you develop a new program, and you want it to be of the greatest possible "
"use to the public, the best way to achieve this is to make it free software "
"which everyone can redistribute and change under these terms."
msgstr ""

# type: Plain text
#: lispref/gpl.texi:340
msgid ""
"To do so, attach the following notices to the program.  It is safest to "
"attach them to the start of each source file to most effectively convey the "
"exclusion of warranty; and each file should have at least the ``copyright'' "
"line and a pointer to where the full notice is found."
msgstr ""

# type: smallexample
#: lispref/gpl.texi:344
#, no-wrap
msgid ""
"@var{one line to give the program's name and a brief idea of what it does.}\n"
"Copyright (C) @var{yyyy}  @var{name of author}\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/gpl.texi:349
#, no-wrap
msgid ""
"This program is free software; you can redistribute it and/or\n"
"modify it under the terms of the GNU General Public License\n"
"as published by the Free Software Foundation; either version 2\n"
"of the License, or (at your option) any later version.\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/gpl.texi:354
#, no-wrap
msgid ""
"This program is distributed in the hope that it will be useful,\n"
"but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE@.  See the\n"
"GNU General Public License for more details.\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/gpl.texi:359
#, no-wrap
msgid ""
"You should have received a copy of the GNU General Public License\n"
"along with this program; if not, write to the Free Software\n"
"Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,\n"
"MA 02110-1301, USA.\n"
msgstr ""

# type: Plain text
#: lispref/gpl.texi:362
msgid ""
"Also add information on how to contact you by electronic and paper mail."
msgstr ""

# type: Plain text
#: lispref/gpl.texi:365
msgid ""
"If the program is interactive, make it output a short notice like this when "
"it starts in an interactive mode:"
msgstr ""

# type: smallexample
#: lispref/gpl.texi:371
#, no-wrap
msgid ""
"Gnomovision version 69, Copyright (C) @var{yyyy} @var{name of author}\n"
"Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n"
"This is free software, and you are welcome to redistribute it \n"
"under certain conditions; type `show c' for details.\n"
msgstr ""

# type: Plain text
#: lispref/gpl.texi:378
msgid ""
"The hypothetical commands @samp{show w} and @samp{show c} should show the "
"appropriate parts of the General Public License.  Of course, the commands "
"you use may be called something other than @samp{show w} and @samp{show c}; "
"they could even be mouse-clicks or menu items---whatever suits your program."
msgstr ""

# type: Plain text
#: lispref/gpl.texi:382
msgid ""
"You should also get your employer (if you work as a programmer) or your "
"school, if any, to sign a ``copyright disclaimer'' for the program, if "
"necessary.  Here is a sample; alter the names:"
msgstr ""

# type: group
#: lispref/gpl.texi:389
#, no-wrap
msgid ""
"Yoyodyne, Inc., hereby disclaims all copyright\n"
"interest in the program `Gnomovision'\n"
"(which makes passes at compilers) written\n"
"by James Hacker.\n"
"\n"
msgstr ""

# type: group
#: lispref/gpl.texi:392
#, no-wrap
msgid ""
"@var{signature of Ty Coon}, 1 April 1989\n"
"Ty Coon, President of Vice\n"
msgstr ""

# type: Plain text
#: lispref/gpl.texi:400
msgid ""
"This General Public License does not permit incorporating your program into "
"proprietary programs.  If your program is a subroutine library, you may "
"consider it more useful to permit linking proprietary applications with the "
"library.  If this is what you want to do, use the GNU Lesser General Public "
"License instead of this License."
msgstr ""

# type: ignore
#: lispref/gpl.texi:403
#, no-wrap
msgid "   arch-tag: d00ac830-e120-41fb-bbc5-7ca3eeaa227f\n"
msgstr "   arch-tag: d00ac830-e120-41fb-bbc5-7ca3eeaa227f\n"

# type: cindex
#: lispref/hash.texi:9
#, no-wrap
msgid "hash tables"
msgstr ""

# type: cindex
#: lispref/hash.texi:10
#, no-wrap
msgid "lookup tables"
msgstr ""

# type: Plain text
#: lispref/hash.texi:15
msgid ""
"A hash table is a very fast kind of lookup table, somewhat like an alist "
"(@pxref{Association Lists}) in that it maps keys to corresponding values.  "
"It differs from an alist in these ways:"
msgstr ""

# type: itemize
#: lispref/hash.texi:23
msgid ""
"Lookup in a hash table is extremely fast for large tables---in fact, the "
"time required is essentially @emph{independent} of how many elements are "
"stored in the table.  For smaller tables (a few tens of elements)  alists "
"may still be faster because hash tables have a more-or-less constant "
"overhead."
msgstr ""

# type: itemize
#: lispref/hash.texi:26
msgid "The correspondences in a hash table are in no particular order."
msgstr ""

# type: itemize
#: lispref/hash.texi:30
msgid ""
"There is no way to share structure between two hash tables, the way two "
"alists can share a common tail."
msgstr ""

# type: Plain text
#: lispref/hash.texi:35
msgid ""
"Emacs Lisp provides a general-purpose hash table data type, along with a "
"series of functions for operating on them.  Hash tables have no read syntax, "
"and print in hash notation, like this:"
msgstr ""

# type: example
#: lispref/hash.texi:39 lispref/objects.texi:1224
#, no-wrap
msgid ""
"(make-hash-table)\n"
"     @result{} #<hash-table 'eql nil 0/65 0x83af980>\n"
msgstr ""

# type: Plain text
#: lispref/hash.texi:45
msgid ""
"(The term ``hash notation'' refers to the initial @samp{#} character---@pxref"
"{Printed Representation}---and has nothing to do with the term ``hash "
"table.'')"
msgstr ""

# type: Plain text
#: lispref/hash.texi:49
msgid ""
"Obarrays are also a kind of hash table, but they are a different type of "
"object and are used only for recording interned symbols (@pxref{Creating "
"Symbols})."
msgstr ""

# type: node
#: lispref/hash.texi:55 lispref/hash.texi:57
#, no-wrap
msgid "Creating Hash"
msgstr ""

# type: menu
#: lispref/hash.texi:55
msgid "Functions to create hash tables."
msgstr ""

# type: node
#: lispref/hash.texi:55 lispref/hash.texi:167
#, no-wrap
msgid "Hash Access"
msgstr ""

# type: menu
#: lispref/hash.texi:55
msgid "Reading and writing the hash table contents."
msgstr ""

# type: node
#: lispref/hash.texi:55 lispref/hash.texi:214
#, no-wrap
msgid "Defining Hash"
msgstr ""

# type: menu
#: lispref/hash.texi:55
msgid "Defining new comparison methods"
msgstr ""

# type: node
#: lispref/hash.texi:55 lispref/hash.texi:294
#, no-wrap
msgid "Other Hash"
msgstr ""

# type: menu
#: lispref/hash.texi:55
msgid "Miscellaneous."
msgstr ""

# type: section
#: lispref/hash.texi:58
#, no-wrap
msgid "Creating Hash Tables"
msgstr ""

# type: cindex
#: lispref/hash.texi:59
#, no-wrap
msgid "creating hash tables"
msgstr ""

# type: Plain text
#: lispref/hash.texi:63
msgid ""
"The principal function for creating a hash table is @code{make-hash-table}."
msgstr ""

# type: defun
#: lispref/hash.texi:64
#, no-wrap
msgid "make-hash-table &rest keyword-args"
msgstr ""

# type: defun
#: lispref/hash.texi:69
msgid ""
"This function creates a new hash table according to the specified "
"arguments.  The arguments should consist of alternating keywords (particular "
"symbols recognized specially) and values corresponding to them."
msgstr ""

# type: defun
#: lispref/hash.texi:72
msgid ""
"Several keywords make sense in @code{make-hash-table}, but the only two that "
"you really need to know about are @code{:test} and @code{:weakness}."
msgstr ""

# type: item
#: lispref/hash.texi:74
#, no-wrap
msgid ":test @var{test}"
msgstr ""

# type: table
#: lispref/hash.texi:78
msgid ""
"This specifies the method of key lookup for this hash table.  The default is "
"@code{eql}; @code{eq} and @code{equal} are other alternatives:"
msgstr ""

# type: item
#: lispref/hash.texi:80
#, no-wrap
msgid "eql"
msgstr ""

# type: table
#: lispref/hash.texi:85
msgid ""
"Keys which are numbers are ``the same'' if they are @code{equal}, that is, "
"if they are equal in value and either both are integers or both are floating "
"point numbers; otherwise, two distinct objects are never ``the same.''"
msgstr ""

# type: item
#: lispref/hash.texi:86
#, no-wrap
msgid "eq"
msgstr ""

# type: table
#: lispref/hash.texi:88
msgid "Any two distinct Lisp objects are ``different'' as keys."
msgstr ""

# type: item
#: lispref/hash.texi:89
#, no-wrap
msgid "equal"
msgstr ""

# type: table
#: lispref/hash.texi:92
msgid ""
"Two Lisp objects are ``the same,'' as keys, if they are equal according to "
"@code{equal}."
msgstr ""

# type: table
#: lispref/hash.texi:96
msgid ""
"You can use @code{define-hash-table-test} (@pxref{Defining Hash}) to define "
"additional possibilities for @var{test}."
msgstr ""

# type: item
#: lispref/hash.texi:97
#, no-wrap
msgid ":weakness @var{weak}"
msgstr ""

# type: table
#: lispref/hash.texi:100
msgid ""
"The weakness of a hash table specifies whether the presence of a key or "
"value in the hash table preserves it from garbage collection."
msgstr ""

# type: table
#: lispref/hash.texi:108
msgid ""
"The value, @var{weak}, must be one of @code{nil}, @code{key}, @code{value}, "
"@code{key-or-value}, @code{key-and-value}, or @code{t} which is an alias for "
"@code{key-and-value}.  If @var{weak} is @code{key} then the hash table does "
"not prevent its keys from being collected as garbage (if they are not "
"referenced anywhere else); if a particular key does get collected, the "
"corresponding association is removed from the hash table."
msgstr ""

# type: table
#: lispref/hash.texi:113
msgid ""
"If @var{weak} is @code{value}, then the hash table does not prevent values "
"from being collected as garbage (if they are not referenced anywhere else); "
"if a particular value does get collected, the corresponding association is "
"removed from the hash table."
msgstr ""

# type: table
#: lispref/hash.texi:119
msgid ""
"If @var{weak} is @code{key-and-value} or @code{t}, both the key and the "
"value must be live in order to preserve the association.  Thus, the hash "
"table does not protect either keys or values from garbage collection; if "
"either one is collected as garbage, that removes the association."
msgstr ""

# type: table
#: lispref/hash.texi:124
msgid ""
"If @var{weak} is @code{key-or-value}, either the key or the value can "
"preserve the association.  Thus, associations are removed from the hash "
"table when both their key and value would be collected as garbage (if not "
"for references from weak hash tables)."
msgstr ""

# type: table
#: lispref/hash.texi:127
msgid ""
"The default for @var{weak} is @code{nil}, so that all keys and values "
"referenced in the hash table are preserved from garbage collection."
msgstr ""

# type: item
#: lispref/hash.texi:128
#, no-wrap
msgid ":size @var{size}"
msgstr ""

# type: table
#: lispref/hash.texi:134
msgid ""
"This specifies a hint for how many associations you plan to store in the "
"hash table.  If you know the approximate number, you can make things a "
"little more efficient by specifying it this way.  If you specify too small a "
"size, the hash table will grow automatically when necessary, but doing that "
"takes some extra time."
msgstr ""

# type: table
#: lispref/hash.texi:136
msgid "The default size is 65."
msgstr ""

# type: item
#: lispref/hash.texi:137
#, no-wrap
msgid ":rehash-size @var{rehash-size}"
msgstr ""

# type: table
#: lispref/hash.texi:141
msgid ""
"When you add an association to a hash table and the table is ``full,'' it "
"grows automatically.  This value specifies how to make the hash table "
"larger, at that time."
msgstr ""

# type: table
#: lispref/hash.texi:147
msgid ""
"If @var{rehash-size} is an integer, it should be positive, and the hash "
"table grows by adding that much to the nominal size.  If @var{rehash-size} "
"is a floating point number, it had better be greater than 1, and the hash "
"table grows by multiplying the old size by that number."
msgstr ""

# type: table
#: lispref/hash.texi:149
msgid "The default value is 1.5."
msgstr ""

# type: item
#: lispref/hash.texi:150
#, no-wrap
msgid ":rehash-threshold @var{threshold}"
msgstr ""

# type: table
#: lispref/hash.texi:156
msgid ""
"This specifies the criterion for when the hash table is ``full'' (so it "
"should be made larger).  The value, @var{threshold}, should be a positive "
"floating point number, no greater than 1.  The hash table is ``full'' "
"whenever the actual number of entries exceeds this fraction of the nominal "
"size.  The default for @var{threshold} is 0.8."
msgstr ""

# type: defun
#: lispref/hash.texi:159
#, no-wrap
msgid "makehash &optional test"
msgstr ""

# type: defun
#: lispref/hash.texi:163
msgid ""
"This is equivalent to @code{make-hash-table}, but with a different style "
"argument list.  The argument @var{test} specifies the method of key lookup."
msgstr ""

# type: defun
#: lispref/hash.texi:165
msgid "This function is obsolete. Use @code{make-hash-table} instead."
msgstr ""

# type: section
#: lispref/hash.texi:168
#, no-wrap
msgid "Hash Table Access"
msgstr ""

# type: Plain text
#: lispref/hash.texi:174
msgid ""
"This section describes the functions for accessing and storing associations "
"in a hash table.  In general, any Lisp object can be used as a hash key, "
"unless the comparison method imposes limits.  Any Lisp object can also be "
"used as the value."
msgstr ""

# type: defun
#: lispref/hash.texi:175
#, no-wrap
msgid "gethash key table &optional default"
msgstr ""

# type: defun
#: lispref/hash.texi:179
msgid ""
"This function looks up @var{key} in @var{table}, and returns its associated "
"@var{value}---or @var{default}, if @var{key} has no association in @var"
"{table}."
msgstr ""

# type: defun
#: lispref/hash.texi:181
#, no-wrap
msgid "puthash key value table"
msgstr ""

# type: defun
#: lispref/hash.texi:185
msgid ""
"This function enters an association for @var{key} in @var{table}, with value "
"@var{value}.  If @var{key} already has an association in @var{table}, @var"
"{value} replaces the old associated value."
msgstr ""

# type: defun
#: lispref/hash.texi:187
#, no-wrap
msgid "remhash key table"
msgstr ""

# type: defun
#: lispref/hash.texi:191
msgid ""
"This function removes the association for @var{key} from @var{table}, if "
"there is one.  If @var{key} has no association, @code{remhash} does nothing."
msgstr ""

# type: defun
#: lispref/hash.texi:195
msgid ""
"@b{Common Lisp note:} In Common Lisp, @code{remhash} returns non-@code{nil} "
"if it actually removed an association and @code{nil} otherwise.  In Emacs "
"Lisp, @code{remhash} always returns @code{nil}."
msgstr ""

# type: defun
#: lispref/hash.texi:197
#, no-wrap
msgid "clrhash table"
msgstr ""

# type: defun
#: lispref/hash.texi:201
msgid ""
"This function removes all the associations from hash table @var{table}, so "
"that it becomes empty.  This is also called @dfn{clearing} the hash table."
msgstr ""

# type: defun
#: lispref/hash.texi:204
msgid ""
"@b{Common Lisp note:} In Common Lisp, @code{clrhash} returns the empty @var"
"{table}.  In Emacs Lisp, it returns @code{nil}."
msgstr ""

# type: defun
#: lispref/hash.texi:206
#, no-wrap
msgid "maphash function table"
msgstr ""

# type: anchor{#1}
#: lispref/hash.texi:212
msgid "Definition of maphash"
msgstr ""

# type: defun
#: lispref/hash.texi:212
msgid ""
"This function calls @var{function} once for each of the associations in @var"
"{table}.  The function @var{function} should accept two arguments---a @var"
"{key} listed in @var{table}, and its associated @var{value}.  @code{maphash} "
"returns @code{nil}."
msgstr ""

# type: section
#: lispref/hash.texi:215
#, no-wrap
msgid "Defining Hash Comparisons"
msgstr ""

# type: cindex
#: lispref/hash.texi:216
#, no-wrap
msgid "hash code"
msgstr ""

# type: cindex
#: lispref/hash.texi:217
#, no-wrap
msgid "define hash comparisons"
msgstr ""

# type: Plain text
#: lispref/hash.texi:222
msgid ""
"You can define new methods of key lookup by means of @code{define-hash-table-"
"test}.  In order to use this feature, you need to understand how hash tables "
"work, and what a @dfn{hash code} means."
msgstr ""

# type: Plain text
#: lispref/hash.texi:229
msgid ""
"You can think of a hash table conceptually as a large array of many slots, "
"each capable of holding one association.  To look up a key, @code{gethash} "
"first computes an integer, the hash code, from the key.  It reduces this "
"integer modulo the length of the array, to produce an index in the array.  "
"Then it looks in that slot, and if necessary in other nearby slots, to see "
"if it has found the key being sought."
msgstr ""

# type: Plain text
#: lispref/hash.texi:233
msgid ""
"Thus, to define a new method of key lookup, you need to specify both a "
"function to compute the hash code from a key, and a function to compare two "
"keys directly."
msgstr ""

# type: defun
#: lispref/hash.texi:234
#, no-wrap
msgid "define-hash-table-test name test-fn hash-fn"
msgstr ""

# type: defun
#: lispref/hash.texi:236
msgid "This function defines a new hash table test, named @var{name}."
msgstr ""

# type: defun
#: lispref/hash.texi:241
msgid ""
"After defining @var{name} in this way, you can use it as the @var{test} "
"argument in @code{make-hash-table}.  When you do that, the hash table will "
"use @var{test-fn} to compare key values, and @var{hash-fn} to compute a "
"``hash code'' from a key value."
msgstr ""

# type: defun
#: lispref/hash.texi:244
msgid ""
"The function @var{test-fn} should accept two arguments, two keys, and return "
"non-@code{nil} if they are considered ``the same.''"
msgstr ""

# type: defun
#: lispref/hash.texi:249
msgid ""
"The function @var{hash-fn} should accept one argument, a key, and return an "
"integer that is the ``hash code'' of that key.  For good results, the "
"function should use the whole range of integer values for hash codes, "
"including negative integers."
msgstr ""

# type: defun
#: lispref/hash.texi:253
msgid ""
"The specified functions are stored in the property list of @var{name} under "
"the property @code{hash-table-test}; the property value's form is @code{(@var"
"{test-fn} @var{hash-fn})}."
msgstr ""

# type: defun
#: lispref/hash.texi:255
#, no-wrap
msgid "sxhash obj"
msgstr ""

# type: defun
#: lispref/hash.texi:259
msgid ""
"This function returns a hash code for Lisp object @var{obj}.  This is an "
"integer which reflects the contents of @var{obj} and the other Lisp objects "
"it points to."
msgstr ""

# type: defun
#: lispref/hash.texi:262
msgid ""
"If two objects @var{obj1} and @var{obj2} are equal, then @code{(sxhash @var"
"{obj1})} and @code{(sxhash @var{obj2})} are the same integer."
msgstr ""

# type: defun
#: lispref/hash.texi:267
msgid ""
"If the two objects are not equal, the values returned by @code{sxhash} are "
"usually different, but not always; once in a rare while, by luck, you will "
"encounter two distinct-looking objects that give the same result from @code"
"{sxhash}."
msgstr ""

# type: Plain text
#: lispref/hash.texi:271
msgid ""
"This example creates a hash table whose keys are strings that are compared "
"case-insensitively."
msgstr ""

# type: example
#: lispref/hash.texi:277
#, no-wrap
msgid ""
"(defun case-fold-string= (a b)\n"
"  (compare-strings a nil nil b nil nil t))\n"
"(defun case-fold-string-hash (a)\n"
"  (sxhash (upcase a)))\n"
"\n"
msgstr ""

# type: example
#: lispref/hash.texi:280
#, no-wrap
msgid ""
"(define-hash-table-test 'case-fold\n"
"  'case-fold-string= 'case-fold-string-hash)\n"
"\n"
msgstr ""

# type: example
#: lispref/hash.texi:282
#, no-wrap
msgid "(make-hash-table :test 'case-fold)\n"
msgstr ""

# type: Plain text
#: lispref/hash.texi:287
msgid ""
"Here is how you could define a hash table test equivalent to the predefined "
"test value @code{equal}.  The keys can be any Lisp object, and equal-looking "
"objects are considered the same key."
msgstr ""

# type: example
#: lispref/hash.texi:290
#, no-wrap
msgid ""
"(define-hash-table-test 'contents-hash 'equal 'sxhash)\n"
"\n"
msgstr ""

# type: example
#: lispref/hash.texi:292
#, no-wrap
msgid "(make-hash-table :test 'contents-hash)\n"
msgstr ""

# type: section
#: lispref/hash.texi:295
#, no-wrap
msgid "Other Hash Table Functions"
msgstr ""

# type: Plain text
#: lispref/hash.texi:298
msgid "Here are some other functions for working with hash tables."
msgstr ""

# type: defun
#: lispref/hash.texi:299
#, no-wrap
msgid "hash-table-p table"
msgstr ""

# type: defun
#: lispref/hash.texi:301
msgid "This returns non-@code{nil} if @var{table} is a hash table object."
msgstr ""

# type: defun
#: lispref/hash.texi:303
#, no-wrap
msgid "copy-hash-table table"
msgstr ""

# type: defun
#: lispref/hash.texi:306
msgid ""
"This function creates and returns a copy of @var{table}.  Only the table "
"itself is copied---the keys and values are shared."
msgstr ""

# type: defun
#: lispref/hash.texi:308
#, no-wrap
msgid "hash-table-count table"
msgstr ""

# type: defun
#: lispref/hash.texi:310
msgid "This function returns the actual number of entries in @var{table}."
msgstr ""

# type: defun
#: lispref/hash.texi:312
#, no-wrap
msgid "hash-table-test table"
msgstr ""

# type: defun
#: lispref/hash.texi:316
msgid ""
"This returns the @var{test} value that was given when @var{table} was "
"created, to specify how to hash and compare keys.  See @code{make-hash-"
"table} (@pxref{Creating Hash})."
msgstr ""

# type: defun
#: lispref/hash.texi:318
#, no-wrap
msgid "hash-table-weakness table"
msgstr ""

# type: defun
#: lispref/hash.texi:321
msgid ""
"This function returns the @var{weak} value that was specified for hash table "
"@var{table}."
msgstr ""

# type: defun
#: lispref/hash.texi:323
#, no-wrap
msgid "hash-table-rehash-size table"
msgstr ""

# type: defun
#: lispref/hash.texi:325
msgid "This returns the rehash size of @var{table}."
msgstr ""

# type: defun
#: lispref/hash.texi:327
#, no-wrap
msgid "hash-table-rehash-threshold table"
msgstr ""

# type: defun
#: lispref/hash.texi:329
msgid "This returns the rehash threshold of @var{table}."
msgstr ""

# type: defun
#: lispref/hash.texi:331
#, no-wrap
msgid "hash-table-size table"
msgstr ""

# type: defun
#: lispref/hash.texi:333
msgid "This returns the current nominal size of @var{table}."
msgstr ""

# type: ignore
#: lispref/hash.texi:337
#, no-wrap
msgid "   arch-tag: 3b5107f9-d2f0-47d5-ad61-3498496bea0e\n"
msgstr "   arch-tag: 3b5107f9-d2f0-47d5-ad61-3498496bea0e\n"

# type: cindex
#: lispref/help.texi:9
#, no-wrap
msgid "documentation strings"
msgstr ""

# type: Plain text
#: lispref/help.texi:16
msgid ""
"GNU Emacs Lisp has convenient on-line help facilities, most of which derive "
"their information from the documentation strings associated with functions "
"and variables.  This chapter describes how to write good documentation "
"strings for your Lisp programs, as well as how to write programs to access "
"documentation."
msgstr ""

# type: Plain text
#: lispref/help.texi:24
msgid ""
"Note that the documentation strings for Emacs are not the same thing as the "
"Emacs manual.  Manuals have their own source files, written in the Texinfo "
"language; documentation strings are specified in the definitions of the "
"functions and variables they apply to.  A collection of documentation "
"strings is not sufficient as a manual because a good manual is not organized "
"in that fashion; it is organized in terms of topics of discussion."
msgstr ""

# type: Plain text
#: lispref/help.texi:28
msgid ""
"For commands to display documentation strings, see @ref{Help, , Help, emacs, "
"The GNU Emacs Manual}.  For the conventions for writing documentation "
"strings, see @ref{Documentation Tips}."
msgstr ""

# type: menu
#: lispref/help.texi:37 lispref/help.texi:39 lispref/help.texi:41
#: lispref/vol1.texi:651 lispref/vol2.texi:652
#, no-wrap
msgid "Documentation Basics"
msgstr ""

# type: menu
#: lispref/help.texi:37 lispref/vol1.texi:651 lispref/vol2.texi:652
msgid "Good style for doc strings."
msgstr ""

# type: menu
#: lispref/help.texi:37 lispref/vol1.texi:651 lispref/vol2.texi:652
msgid "Where to put them"
msgstr ""

# type: menu
#: lispref/help.texi:37 lispref/vol1.texi:651 lispref/vol2.texi:652
msgid "How Emacs stores them."
msgstr ""

# type: menu
#: lispref/help.texi:37 lispref/help.texi:115 lispref/vol1.texi:651
#: lispref/vol2.texi:652
#, no-wrap
msgid "Accessing Documentation"
msgstr ""

# type: menu
#: lispref/help.texi:37 lispref/vol1.texi:651 lispref/vol2.texi:652
msgid "How Lisp programs can access doc strings."
msgstr ""

# type: menu
#: lispref/help.texi:37 lispref/help.texi:310 lispref/vol1.texi:651
#: lispref/vol2.texi:652
#, no-wrap
msgid "Keys in Documentation"
msgstr ""

# type: menu
#: lispref/help.texi:37 lispref/vol1.texi:651 lispref/vol2.texi:652
msgid "Substituting current key bindings."
msgstr ""

# type: menu
#: lispref/help.texi:37 lispref/help.texi:391 lispref/vol1.texi:651
#: lispref/vol2.texi:652
#, no-wrap
msgid "Describing Characters"
msgstr ""

# type: menu
#: lispref/help.texi:37 lispref/vol1.texi:651 lispref/vol2.texi:652
msgid "Making printable descriptions of"
msgstr ""

# type: menu
#: lispref/help.texi:37 lispref/vol1.texi:651 lispref/vol2.texi:652
msgid "non-printing characters and key sequences."
msgstr ""

# type: menu
#: lispref/help.texi:37 lispref/help.texi:512 lispref/help.texi:513
#: lispref/vol1.texi:651 lispref/vol2.texi:652
#, no-wrap
msgid "Help Functions"
msgstr ""

# type: menu
#: lispref/help.texi:37 lispref/vol1.texi:651 lispref/vol2.texi:652
msgid "Subroutines used by Emacs help facilities."
msgstr ""

# type: cindex
#: lispref/help.texi:42
#, no-wrap
msgid "documentation conventions"
msgstr ""

# type: cindex
#: lispref/help.texi:43
#, no-wrap
msgid "writing a documentation string"
msgstr ""

# type: cindex
#: lispref/help.texi:44
#, no-wrap
msgid "string, writing a doc string"
msgstr ""

# type: Plain text
#: lispref/help.texi:53
msgid ""
"A documentation string is written using the Lisp syntax for strings, with "
"double-quote characters surrounding the text of the string.  This is because "
"it really is a Lisp string object.  The string serves as documentation when "
"it is written in the proper place in the definition of a function or "
"variable.  In a function definition, the documentation string follows the "
"argument list.  In a variable definition, the documentation string follows "
"the initial value of the variable."
msgstr ""

# type: Plain text
#: lispref/help.texi:63
msgid ""
"When you write a documentation string, make the first line a complete "
"sentence (or two complete sentences) since some commands, such as @code"
"{apropos}, show only the first line of a multi-line documentation string.  "
"Also, you should not indent the second line of a documentation string, if it "
"has one, because that looks odd when you use @kbd{C-h f} (@code{describe-"
"function}) or @kbd{C-h v} (@code{describe-variable}) to view the "
"documentation string.  There are many other conventions for doc strings; see "
"@ref{Documentation Tips}."
msgstr ""

# type: Plain text
#: lispref/help.texi:69
msgid ""
"Documentation strings can contain several special substrings, which stand "
"for key bindings to be looked up in the current keymaps when the "
"documentation is displayed.  This allows documentation strings to refer to "
"the keys for related commands and be accurate even when a user rearranges "
"the key bindings.  (@xref{Keys in Documentation}.)"
msgstr ""

# type: vindex
#: lispref/help.texi:70
#, no-wrap
msgid "emacs-lisp-docstring-fill-column"
msgstr ""

# type: Plain text
#: lispref/help.texi:73
msgid ""
"Emacs Lisp mode fills documentation strings to the width specified by @code"
"{emacs-lisp-docstring-fill-column}."
msgstr ""

# type: Plain text
#: lispref/help.texi:76
msgid ""
"In Emacs Lisp, a documentation string is accessible through the function or "
"variable that it describes:"
msgstr ""

# type: kindex
#: lispref/help.texi:79
#, no-wrap
msgid "function-documentation"
msgstr ""

# type: itemize
#: lispref/help.texi:86
msgid ""
"The documentation for a function is usually stored in the function "
"definition itself (@pxref{Lambda Expressions}).  The function @code"
"{documentation} knows how to extract it.  You can also put function "
"documentation in the @code{function-documentation} property of the function "
"name.  That is useful with definitions such as keyboard macros that can't "
"hold a documentation string."
msgstr ""

# type: kindex
#: lispref/help.texi:88
#, no-wrap
msgid "variable-documentation"
msgstr ""

# type: itemize
#: lispref/help.texi:92
msgid ""
"The documentation for a variable is stored in the variable's property list "
"under the property name @code{variable-documentation}.  The function @code"
"{documentation-property} knows how to retrieve it."
msgstr ""

# type: cindex
#: lispref/help.texi:94
#, no-wrap
msgid "@file{DOC-@var{version}} (documentation) file"
msgstr ""

# type: Plain text
#: lispref/help.texi:101
msgid ""
"To save space, the documentation for preloaded functions and variables "
"(including primitive functions and autoloaded functions) is stored in the "
"file @file{emacs/etc/DOC-@var{version}}---not inside Emacs.  The "
"documentation strings for functions and variables loaded during the Emacs "
"session from byte-compiled files are stored in those files (@pxref{Docs and "
"Compilation})."
msgstr ""

# type: Plain text
#: lispref/help.texi:108
msgid ""
"The data structure inside Emacs has an integer offset into the file, or a "
"list containing a file name and an integer, in place of the documentation "
"string.  The functions @code{documentation} and @code{documentation-"
"property} use that information to fetch the documentation string from the "
"appropriate file; this is transparent to the user."
msgstr ""

# type: Plain text
#: lispref/help.texi:114
msgid ""
"The @file{emacs/lib-src} directory contains two utilities that you can use "
"to print nice-looking hardcopy for the file @file{emacs/etc/DOC-@var"
"{version}}.  These are @file{sorted-doc} and @file{digest-doc}."
msgstr ""

# type: section
#: lispref/help.texi:116
#, no-wrap
msgid "Access to Documentation Strings"
msgstr ""

# type: defun
#: lispref/help.texi:118
#, no-wrap
msgid "documentation-property symbol property &optional verbatim"
msgstr ""

# type: defun
#: lispref/help.texi:124
msgid ""
"This function returns the documentation string that is recorded in @var"
"{symbol}'s property list under property @var{property}.  It retrieves the "
"text from a file if the value calls for that.  If the property value isn't "
"@code{nil}, isn't a string, and doesn't refer to text in a file, then it is "
"evaluated to obtain a string."
msgstr ""

# type: defun
#: lispref/help.texi:128
msgid ""
"The last thing this function does is pass the string through @code"
"{substitute-command-keys} to substitute actual key bindings, unless @var"
"{verbatim} is non-@code{nil}."
msgstr ""

# type: group
#: lispref/help.texi:134
#, no-wrap
msgid ""
"(documentation-property 'command-line-processed\n"
"   'variable-documentation)\n"
"     @result{} \"Non-nil once command line has been processed\"\n"
msgstr ""

# type: group
#: lispref/help.texi:138
#, no-wrap
msgid ""
"(symbol-plist 'command-line-processed)\n"
"     @result{} (variable-documentation 188902)\n"
msgstr ""

# type: group
#: lispref/help.texi:142
#, no-wrap
msgid ""
"(documentation-property 'emacs 'group-documentation)\n"
"     @result{} \"Customization of the One True Editor.\"\n"
msgstr ""

# type: defun
#: lispref/help.texi:146
#, no-wrap
msgid "documentation function &optional verbatim"
msgstr ""

# type: defun
#: lispref/help.texi:150
msgid ""
"This function returns the documentation string of @var{function}.  @code"
"{documentation} handles macros, named keyboard macros, and special forms, as "
"well as ordinary functions."
msgstr ""

# type: defun
#: lispref/help.texi:158
msgid ""
"If @var{function} is a symbol, this function first looks for the @code"
"{function-documentation} property of that symbol; if that has a non-@code"
"{nil} value, the documentation comes from that value (if the value is not a "
"string, it is evaluated).  If @var{function} is not a symbol, or if it has "
"no @code{function-documentation} property, then @code{documentation} "
"extracts the documentation string from the actual function definition, "
"reading it from a file if called for."
msgstr ""

# type: defun
#: lispref/help.texi:162
msgid ""
"Finally, unless @var{verbatim} is non-@code{nil}, it calls @code{substitute-"
"command-keys} so as to return a value containing the actual (current) key "
"bindings."
msgstr ""

# type: defun
#: lispref/help.texi:167
msgid ""
"The function @code{documentation} signals a @code{void-function} error if "
"@var{function} has no function definition.  However, it is OK if the "
"function definition has no documentation string.  In that case, @code"
"{documentation} returns @code{nil}."
msgstr ""

# type: defun
#: lispref/help.texi:172
msgid "This function returns the documentation string of @var{face} as a face."
msgstr ""

# type: Plain text
#: lispref/help.texi:178
msgid ""
"Here is an example of using the two functions, @code{documentation} and @code"
"{documentation-property}, to display the documentation strings for several "
"symbols in a @samp{*Help*} buffer."
msgstr ""

# type: anchor{#1}
#: lispref/help.texi:180
msgid "describe-symbols example"
msgstr ""

# type: group
#: lispref/help.texi:190
#, no-wrap
msgid ""
"(defun describe-symbols (pattern)\n"
"  \"Describe the Emacs Lisp symbols matching PATTERN.\n"
"All symbols that have PATTERN in their name are described\n"
"in the `*Help*' buffer.\"\n"
"  (interactive \"sDescribe symbols matching: \")\n"
"  (let ((describe-func\n"
"         (function\n"
"          (lambda (s)\n"
msgstr ""

# type: group
#: lispref/help.texi:205
#, no-wrap
msgid ""
"            ;; @r{Print description of symbol.}\n"
"            (if (fboundp s)             ; @r{It is a function.}\n"
"                (princ\n"
"                 (format \"%s\\t%s\\n%s\\n\\n\" s\n"
"                   (if (commandp s)\n"
"                       (let ((keys (where-is-internal s)))\n"
"                         (if keys\n"
"                             (concat\n"
"                              \"Keys: \"\n"
"                              (mapconcat 'key-description\n"
"                                         keys \" \"))\n"
"                           \"Keys: none\"))\n"
"                     \"Function\")\n"
msgstr ""

# type: group
#: lispref/help.texi:209
#, no-wrap
msgid ""
"                   (or (documentation s)\n"
"                       \"not documented\"))))\n"
"\n"
msgstr ""

# type: group
#: lispref/help.texi:211
#, no-wrap
msgid "            (if (boundp s)              ; @r{It is a variable.}\n"
msgstr ""

# type: group
#: lispref/help.texi:217
#, no-wrap
msgid ""
"                (princ\n"
"                 (format \"%s\\t%s\\n%s\\n\\n\" s\n"
"                   (if (user-variable-p s)\n"
"                       \"Option \" \"Variable\")\n"
msgstr ""

# type: group
#: lispref/help.texi:223
#, no-wrap
msgid ""
"                   (or (documentation-property\n"
"                         s 'variable-documentation)\n"
"                       \"not documented\")))))))\n"
"        sym-list)\n"
msgstr ""

# type: group
#: lispref/help.texi:231
#, no-wrap
msgid ""
"    ;; @r{Build a list of symbols that match pattern.}\n"
"    (mapatoms (function\n"
"               (lambda (sym)\n"
"                 (if (string-match pattern (symbol-name sym))\n"
"                     (setq sym-list (cons sym sym-list))))))\n"
msgstr ""

# type: group
#: lispref/help.texi:238
#, no-wrap
msgid ""
"    ;; @r{Display the data.}\n"
"    (with-output-to-temp-buffer \"*Help*\"\n"
"      (mapcar describe-func (sort sym-list 'string<))\n"
"      (print-help-return-message))))\n"
msgstr ""

# type: Plain text
#: lispref/help.texi:243
msgid ""
"The @code{describe-symbols} function works like @code{apropos}, but provides "
"more information."
msgstr ""

# type: group
#: lispref/help.texi:247
#, no-wrap
msgid ""
"(describe-symbols \"goal\")\n"
"\n"
msgstr ""

# type: group
#: lispref/help.texi:251
#, no-wrap
msgid ""
"---------- Buffer: *Help* ----------\n"
"goal-column     Option\n"
"*Semipermanent goal column for vertical motion, as set by @dots{}\n"
msgstr ""

# type: group
#: lispref/help.texi:258
#, no-wrap
msgid ""
"set-goal-column Keys: C-x C-n\n"
"Set the current horizontal position as a goal for C-n and C-p.\n"
msgstr ""

# type: group
#: lispref/help.texi:266
#, no-wrap
msgid ""
"Those commands will move to this position in the line moved to\n"
"rather than trying to keep the same horizontal position.\n"
"With a non-nil argument, clears out the goal column\n"
"so that C-n and C-p resume vertical motion.\n"
"The goal column is stored in the variable `goal-column'.\n"
msgstr ""

# type: group
#: lispref/help.texi:275
#, no-wrap
msgid ""
"temporary-goal-column   Variable\n"
"Current goal column for vertical motion.\n"
"It is the column where point was\n"
"at the start of current run of vertical motion commands.\n"
"When the `track-eol' feature is doing its job, the value is 9999.\n"
"---------- Buffer: *Help* ----------\n"
msgstr ""

# type: Plain text
#: lispref/help.texi:282
msgid ""
"The asterisk @samp{*} as the first character of a variable's doc string, as "
"shown above for the @code{goal-column} variable, means that it is a user "
"option; see the description of @code{defvar} in @ref{Defining Variables}."
msgstr ""

# type: defun
#: lispref/help.texi:283
#, no-wrap
msgid "Snarf-documentation filename"
msgstr ""

# type: anchor{#1}
#: lispref/help.texi:290
msgid "Definition of Snarf-documentation"
msgstr ""

# type: defun
#: lispref/help.texi:290
msgid ""
"This function is used only during Emacs initialization, just before the "
"runnable Emacs is dumped.  It finds the file offsets of the documentation "
"strings stored in the file @var{filename}, and records them in the in-core "
"function definitions and variable property lists in place of the actual "
"strings.  @xref{Building Emacs}."
msgstr ""

# type: defun
#: lispref/help.texi:295
msgid ""
"Emacs reads the file @var{filename} from the @file{emacs/etc} directory.  "
"When the dumped Emacs is later executed, the same file will be looked for in "
"the directory @code{doc-directory}.  Usually @var{filename} is @code{\"DOC-"
"@var{version}\"}."
msgstr ""

# type: defvar
#: lispref/help.texi:298
#, no-wrap
msgid "doc-directory"
msgstr ""

# type: defvar
#: lispref/help.texi:302
msgid ""
"This variable holds the name of the directory which should contain the file "
"@code{\"DOC-@var{version}\"} that contains documentation strings for built-"
"in and preloaded functions and variables."
msgstr ""

# type: defvar
#: lispref/help.texi:306
msgid ""
"In most cases, this is the same as @code{data-directory}.  They may be "
"different when you run Emacs from the directory where you built it, without "
"actually installing it.  @xref{Definition of data-directory}."
msgstr ""

# type: defvar
#: lispref/help.texi:308
msgid "In older Emacs versions, @code{exec-directory} was used for this."
msgstr ""

# type: section
#: lispref/help.texi:311
#, no-wrap
msgid "Substituting Key Bindings in Documentation"
msgstr ""

# type: cindex
#: lispref/help.texi:312
#, no-wrap
msgid "documentation, keys in"
msgstr ""

# type: cindex
#: lispref/help.texi:313
#, no-wrap
msgid "keys in documentation strings"
msgstr ""

# type: cindex
#: lispref/help.texi:314
#, no-wrap
msgid "substituting keys in documentation"
msgstr ""

# type: Plain text
#: lispref/help.texi:322
msgid ""
"When documentation strings refer to key sequences, they should use the "
"current, actual key bindings.  They can do so using certain special text "
"sequences described below.  Accessing documentation strings in the usual way "
"substitutes current key binding information for these special sequences.  "
"This works by calling @code{substitute-command-keys}.  You can also call "
"that function yourself."
msgstr ""

# type: Plain text
#: lispref/help.texi:324
msgid "Here is a list of the special sequences and what they mean:"
msgstr ""

# type: item
#: lispref/help.texi:326
#, no-wrap
msgid "\\[@var{command}]"
msgstr ""

# type: table
#: lispref/help.texi:329
msgid ""
"stands for a key sequence that will invoke @var{command}, or @samp{M-x @var"
"{command}} if @var{command} has no key bindings."
msgstr ""

# type: item
#: lispref/help.texi:330
#, no-wrap
msgid "\\@{@var{mapvar}@}"
msgstr ""

# type: table
#: lispref/help.texi:333
msgid ""
"stands for a summary of the keymap which is the value of the variable @var"
"{mapvar}.  The summary is made using @code{describe-bindings}."
msgstr ""

# type: item
#: lispref/help.texi:334
#, no-wrap
msgid "\\<@var{mapvar}>"
msgstr ""

# type: table
#: lispref/help.texi:338
msgid ""
"stands for no text itself.  It is used only for a side effect: it specifies "
"@var{mapvar}'s value as the keymap for any following @samp{\\[@var"
"{command}]} sequences in this documentation string."
msgstr ""

# type: item
#: lispref/help.texi:339 lispref/searching.texi:737
#, no-wrap
msgid "\\="
msgstr ""

# type: table
#: lispref/help.texi:343
msgid ""
"quotes the following character and is discarded; thus, @samp{\\=\\[} puts "
"@samp{\\[} into the output, and @samp{\\=\\=} puts @samp{\\=} into the "
"output."
msgstr ""

# type: Plain text
#: lispref/help.texi:347
msgid ""
"@strong{Please note:} Each @samp{\\} must be doubled when written in a "
"string in Emacs Lisp."
msgstr ""

# type: defun
#: lispref/help.texi:348
#, no-wrap
msgid "substitute-command-keys string"
msgstr ""

# type: defun
#: lispref/help.texi:353
msgid ""
"This function scans @var{string} for the above special sequences and "
"replaces them by what they stand for, returning the result as a string.  "
"This permits display of documentation that refers accurately to the user's "
"own customized key bindings."
msgstr ""

# type: Plain text
#: lispref/help.texi:356
msgid "Here are examples of the special sequences:"
msgstr ""

# type: group
#: lispref/help.texi:362
#, no-wrap
msgid ""
"(substitute-command-keys\n"
"   \"To abort recursive edit, type: \\\\[abort-recursive-edit]\")\n"
"@result{} \"To abort recursive edit, type: C-]\"\n"
msgstr ""

# type: group
#: lispref/help.texi:369
#, no-wrap
msgid ""
"(substitute-command-keys\n"
"   \"The keys that are defined for the minibuffer here are:\n"
"  \\\\@{minibuffer-local-must-match-map@}\")\n"
"@result{} \"The keys that are defined for the minibuffer here are:\n"
msgstr ""

# type: smallexample
#: lispref/help.texi:378
#, no-wrap
msgid ""
"?               minibuffer-completion-help\n"
"SPC             minibuffer-complete-word\n"
"TAB             minibuffer-complete\n"
"C-j             minibuffer-complete-and-exit\n"
"RET             minibuffer-complete-and-exit\n"
"C-g             abort-recursive-edit\n"
"\"\n"
"\n"
msgstr ""

# type: group
#: lispref/help.texi:384
#, no-wrap
msgid ""
"(substitute-command-keys\n"
"   \"To abort a recursive edit from the minibuffer, type\\\n"
"\\\\<minibuffer-local-must-match-map>\\\\[abort-recursive-edit].\")\n"
"@result{} \"To abort a recursive edit from the minibuffer, type C-g.\"\n"
msgstr ""

# type: Plain text
#: lispref/help.texi:390
msgid ""
"There are other special conventions for the text in documentation strings---"
"for instance, you can refer to functions, variables, and sections of this "
"manual.  @xref{Documentation Tips}, for details."
msgstr ""

# type: section
#: lispref/help.texi:392
#, no-wrap
msgid "Describing Characters for Help Messages"
msgstr ""

# type: cindex
#: lispref/help.texi:393
#, no-wrap
msgid "describe characters and events"
msgstr ""

# type: Plain text
#: lispref/help.texi:401
msgid ""
"These functions convert events, key sequences, or characters to textual "
"descriptions.  These descriptions are useful for including arbitrary text "
"characters or key sequences in messages, because they convert non-printing "
"and whitespace characters to sequences of printing characters.  The "
"description of a non-whitespace printing character is the character itself."
msgstr ""

# type: defun
#: lispref/help.texi:402
#, no-wrap
msgid "key-description sequence &optional prefix"
msgstr ""

# type: cindex
#: lispref/help.texi:403
#, no-wrap
msgid "Emacs event standard notation"
msgstr ""

# type: defun
#: lispref/help.texi:410
msgid ""
"This function returns a string containing the Emacs standard notation for "
"the input events in @var{sequence}.  If @var{prefix} is non-@code{nil}, it "
"is a sequence of input events leading up to @var{sequence} and is included "
"in the return value.  Both arguments may be strings, vectors or lists.  @xref"
"{Input Events}, for more information about valid events."
msgstr ""

# type: group
#: lispref/help.texi:415
#, no-wrap
msgid ""
"(key-description [?\\M-3 delete])\n"
"     @result{} \"M-3 <delete>\"\n"
msgstr ""

# type: group
#: lispref/help.texi:419
#, no-wrap
msgid ""
"(key-description [delete] \"\\M-3\")\n"
"     @result{} \"M-3 <delete>\"\n"
msgstr ""

# type: defun
#: lispref/help.texi:423
msgid "See also the examples for @code{single-key-description}, below."
msgstr ""

# type: defun
#: lispref/help.texi:425
#, no-wrap
msgid "single-key-description event &optional no-angles"
msgstr ""

# type: cindex
#: lispref/help.texi:426
#, no-wrap
msgid "event printing"
msgstr ""

# type: cindex
#: lispref/help.texi:427
#, no-wrap
msgid "character printing"
msgstr ""

# type: cindex
#: lispref/help.texi:428
#, no-wrap
msgid "control character printing"
msgstr ""

# type: cindex
#: lispref/help.texi:429
#, no-wrap
msgid "meta character printing"
msgstr ""

# type: defun
#: lispref/help.texi:438
msgid ""
"This function returns a string describing @var{event} in the standard Emacs "
"notation for keyboard input.  A normal printing character appears as itself, "
"but a control character turns into a string starting with @samp{C-}, a meta "
"character turns into a string starting with @samp{M-}, and space, tab, etc."
"@: appear as @samp{SPC}, @samp{TAB}, etc.  A function key symbol appears "
"inside angle brackets @samp{<@dots{}>}.  An event that is a list appears as "
"the name of the symbol in the @sc{car} of the list, inside angle brackets."
msgstr ""

# type: defun
#: lispref/help.texi:443
msgid ""
"If the optional argument @var{no-angles} is non-@code{nil}, the angle "
"brackets around function keys and event symbols are omitted; this is for "
"compatibility with old versions of Emacs which didn't use the brackets."
msgstr ""

# type: group
#: lispref/help.texi:448
#, no-wrap
msgid ""
"(single-key-description ?\\C-x)\n"
"     @result{} \"C-x\"\n"
msgstr ""

# type: group
#: lispref/help.texi:452
#, no-wrap
msgid ""
"(key-description \"\\C-x \\M-y \\n \\t \\r \\f123\")\n"
"     @result{} \"C-x SPC M-y SPC C-j SPC TAB SPC RET SPC C-l 1 2 3\"\n"
msgstr ""

# type: group
#: lispref/help.texi:456
#, no-wrap
msgid ""
"(single-key-description 'delete)\n"
"     @result{} \"<delete>\"\n"
msgstr ""

# type: group
#: lispref/help.texi:460
#, no-wrap
msgid ""
"(single-key-description 'C-mouse-1)\n"
"     @result{} \"<C-mouse-1>\"\n"
msgstr ""

# type: group
#: lispref/help.texi:464
#, no-wrap
msgid ""
"(single-key-description 'C-mouse-1 t)\n"
"     @result{} \"C-mouse-1\"\n"
msgstr ""

# type: defun
#: lispref/help.texi:468
#, no-wrap
msgid "text-char-description character"
msgstr ""

# type: defun
#: lispref/help.texi:477
msgid ""
"This function returns a string describing @var{character} in the standard "
"Emacs notation for characters that appear in text---like @code{single-key-"
"description}, except that control characters are represented with a leading "
"caret (which is how control characters in Emacs buffers are usually "
"displayed).  Another difference is that @code{text-char-description} "
"recognizes the 2**7 bit as the Meta character, whereas @code{single-key-"
"description} uses the 2**27 bit for Meta."
msgstr ""

# type: group
#: lispref/help.texi:482
#, no-wrap
msgid ""
"(text-char-description ?\\C-c)\n"
"     @result{} \"^C\"\n"
msgstr ""

# type: group
#: lispref/help.texi:486
#, no-wrap
msgid ""
"(text-char-description ?\\M-m)\n"
"     @result{} \"\\xed\"\n"
msgstr ""

# type: group
#: lispref/help.texi:490
#, no-wrap
msgid ""
"(text-char-description ?\\C-\\M-m)\n"
"     @result{} \"\\x8d\"\n"
msgstr ""

# type: group
#: lispref/help.texi:494
#, no-wrap
msgid ""
"(text-char-description (+ 128 ?m))\n"
"     @result{} \"M-m\"\n"
msgstr ""

# type: group
#: lispref/help.texi:498
#, no-wrap
msgid ""
"(text-char-description (+ 128 ?\\C-m))\n"
"     @result{} \"M-^M\"\n"
msgstr ""

# type: defun
#: lispref/help.texi:502
#, no-wrap
msgid "read-kbd-macro string &optional need-vector"
msgstr ""

# type: defun
#: lispref/help.texi:510
msgid ""
"This function is used mainly for operating on keyboard macros, but it can "
"also be used as a rough inverse for @code{key-description}.  You call it "
"with a string containing key descriptions, separated by spaces; it returns a "
"string or vector containing the corresponding events.  (This may or may not "
"be a single valid key sequence, depending on what events you use; @pxref{Key "
"Sequences}.)  If @var{need-vector} is non-@code{nil}, the return value is "
"always a vector."
msgstr ""

# type: Plain text
#: lispref/help.texi:519
msgid ""
"Emacs provides a variety of on-line help functions, all accessible to the "
"user as subcommands of the prefix @kbd{C-h}.  For more information about "
"them, see @ref{Help, , Help, emacs, The GNU Emacs Manual}.  Here we describe "
"some program-level interfaces to the same information."
msgstr ""

# type: deffn
#: lispref/help.texi:520
#, no-wrap
msgid "Command apropos pattern &optional do-all"
msgstr ""

# type: deffn
#: lispref/help.texi:527
msgid ""
"This function finds all ``meaningful'' symbols whose names contain a match "
"for the apropos pattern @var{pattern}.  An apropos pattern is either a word "
"to match, a space-separated list of words of which at least two must match, "
"or a regular expression (if any special regular expression characters "
"occur).  A symbol is ``meaningful'' if it has a definition as a function, "
"variable, or face, or has properties."
msgstr ""

# type: deffn
#: lispref/help.texi:529
msgid "The function returns a list of elements that look like this:"
msgstr ""

# type: example
#: lispref/help.texi:533
#, no-wrap
msgid ""
"(@var{symbol} @var{score} @var{fn-doc} @var{var-doc}\n"
" @var{plist-doc} @var{widget-doc} @var{face-doc} @var{group-doc})\n"
msgstr ""

# type: deffn
#: lispref/help.texi:538
msgid ""
"Here, @var{score} is an integer measure of how important the symbol seems to "
"be as a match, and the remaining elements are documentation strings for @var"
"{symbol}'s various roles (or @code{nil})."
msgstr ""

# type: deffn
#: lispref/help.texi:542
msgid ""
"It also displays the symbols in a buffer named @samp{*Apropos*}, each with a "
"one-line description taken from the beginning of its documentation string."
msgstr ""

# type: deffn
#: lispref/help.texi:549
msgid ""
"If @var{do-all} is non-@code{nil}, or if the user option @code{apropos-do-"
"all} is non-@code{nil}, then @code{apropos} also shows key bindings for the "
"functions that are found; it also shows @emph{all} interned symbols, not "
"just meaningful ones (and it lists them in the return value as well)."
msgstr ""

# type: item
#: lispref/help.texi:551 lispref/maps.texi:133
#, no-wrap
msgid "help-map"
msgstr ""

# type: defvar
#: lispref/help.texi:554
msgid ""
"The value of this variable is a local keymap for characters following the "
"Help key, @kbd{C-h}."
msgstr ""

# type: deffn
#: lispref/help.texi:556
#, no-wrap
msgid "{Prefix Command} help-command"
msgstr ""

# type: deffn
#: lispref/help.texi:560
msgid ""
"This symbol is not a function; its function definition cell holds the keymap "
"known as @code{help-map}.  It is defined in @file{help.el} as follows:"
msgstr ""

# type: group
#: lispref/help.texi:565
#, no-wrap
msgid ""
"(define-key global-map (char-to-string help-char) 'help-command)\n"
"(fset 'help-command help-map)\n"
msgstr ""

# type: defun
#: lispref/help.texi:569
#, no-wrap
msgid "print-help-return-message &optional function"
msgstr ""

# type: defun
#: lispref/help.texi:574
msgid ""
"This function builds a string that explains how to restore the previous "
"state of the windows after a help command.  After building the message, it "
"applies @var{function} to it if @var{function} is non-@code{nil}.  Otherwise "
"it calls @code{message} to display it in the echo area."
msgstr ""

# type: defun
#: lispref/help.texi:580
msgid ""
"This function expects to be called inside a @code{with-output-to-temp-"
"buffer} special form, and expects @code{standard-output} to have the value "
"bound by that special form.  For an example of its use, see the long example "
"in @ref{Accessing Documentation}."
msgstr ""

# type: defvar
#: lispref/help.texi:582
#, no-wrap
msgid "help-char"
msgstr ""

# type: defvar
#: lispref/help.texi:588
msgid ""
"The value of this variable is the help character---the character that Emacs "
"recognizes as meaning Help.  By default, its value is 8, which stands for "
"@kbd{C-h}.  When Emacs reads this character, if @code{help-form} is a non-"
"@code{nil} Lisp expression, it evaluates that expression, and displays the "
"result in a window if it is a string."
msgstr ""

# type: defvar
#: lispref/help.texi:594
msgid ""
"Usually the value of @code{help-form} is @code{nil}.  Then the help "
"character has no special meaning at the level of command input, and it "
"becomes part of a key sequence in the normal way.  The standard key binding "
"of @kbd{C-h} is a prefix key for several general-purpose help features."
msgstr ""

# type: defvar
#: lispref/help.texi:599
msgid ""
"The help character is special after prefix keys, too.  If it has no binding "
"as a subcommand of the prefix key, it runs @code{describe-prefix-bindings}, "
"which displays a list of all the subcommands of the prefix key."
msgstr ""

# type: defvar
#: lispref/help.texi:601
#, no-wrap
msgid "help-event-list"
msgstr ""

# type: defvar
#: lispref/help.texi:605
msgid ""
"The value of this variable is a list of event types that serve as "
"alternative ``help characters.'' These events are handled just like the "
"event specified by @code{help-char}."
msgstr ""

# type: defvar
#: lispref/help.texi:607
#, no-wrap
msgid "help-form"
msgstr ""

# type: defvar
#: lispref/help.texi:611
msgid ""
"If this variable is non-@code{nil}, its value is a form to evaluate whenever "
"the character @code{help-char} is read.  If evaluating the form produces a "
"string, that string is displayed."
msgstr ""

# type: defvar
#: lispref/help.texi:617
msgid ""
"A command that calls @code{read-event} or @code{read-char} probably should "
"bind @code{help-form} to a non-@code{nil} expression while it does input.  "
"(The time when you should not do this is when @kbd{C-h} has some other "
"meaning.)  Evaluating this expression should result in a string that "
"explains what the input is for and how to enter it properly."
msgstr ""

# type: defvar
#: lispref/help.texi:620
msgid ""
"Entry to the minibuffer binds this variable to the value of @code{minibuffer-"
"help-form} (@pxref{Definition of minibuffer-help-form})."
msgstr ""

# type: defvar
#: lispref/help.texi:622
#, no-wrap
msgid "prefix-help-command"
msgstr ""

# type: defvar
#: lispref/help.texi:627
msgid ""
"This variable holds a function to print help for a prefix key.  The function "
"is called when the user types a prefix key followed by the help character, "
"and the help character has no binding after that prefix.  The variable's "
"default value is @code{describe-prefix-bindings}."
msgstr ""

# type: defun
#: lispref/help.texi:629
#, no-wrap
msgid "describe-prefix-bindings"
msgstr ""

# type: defun
#: lispref/help.texi:634
msgid ""
"This function calls @code{describe-bindings} to display a list of all the "
"subcommands of the prefix key of the most recent key sequence.  The prefix "
"described consists of all but the last event of that key sequence.  (The "
"last event is, presumably, the help character.)"
msgstr ""

# type: Plain text
#: lispref/help.texi:640
msgid ""
"The following two functions are meant for modes that want to provide help "
"without relinquishing control, such as the ``electric'' modes.  Their names "
"begin with @samp{Helper} to distinguish them from the ordinary help "
"functions."
msgstr ""

# type: deffn
#: lispref/help.texi:641
#, no-wrap
msgid "Command Helper-describe-bindings"
msgstr ""

# type: deffn
#: lispref/help.texi:645
msgid ""
"This command pops up a window displaying a help buffer containing a listing "
"of all of the key bindings from both the local and global keymaps.  It works "
"by calling @code{describe-bindings}."
msgstr ""

# type: deffn
#: lispref/help.texi:647
#, no-wrap
msgid "Command Helper-help"
msgstr ""

# type: deffn
#: lispref/help.texi:652
msgid ""
"This command provides help for the current mode.  It prompts the user in the "
"minibuffer with the message @samp{Help (Type ? for further options)}, and "
"then provides assistance in finding out what the key bindings are, and what "
"the mode is intended for.  It returns @code{nil}."
msgstr ""

# type: deffn
#: lispref/help.texi:654
msgid "This can be customized by changing the map @code{Helper-help-map}."
msgstr ""

# type: defvar
#: lispref/help.texi:657
#, no-wrap
msgid "data-directory"
msgstr ""

# type: anchor{#1}
#: lispref/help.texi:662
msgid "Definition of data-directory"
msgstr ""

# type: defvar
#: lispref/help.texi:662
msgid ""
"This variable holds the name of the directory in which Emacs finds certain "
"documentation and text files that come with Emacs.  In older Emacs versions, "
"@code{exec-directory} was used for this."
msgstr ""

# type: defmac
#: lispref/help.texi:665
#, no-wrap
msgid "make-help-screen fname help-line help-text help-map"
msgstr ""

# type: defmac
#: lispref/help.texi:668
msgid ""
"This macro defines a help command named @var{fname} that acts like a prefix "
"key that shows a list of the subcommands it offers."
msgstr ""

# type: defmac
#: lispref/help.texi:673
msgid ""
"When invoked, @var{fname} displays @var{help-text} in a window, then reads "
"and executes a key sequence according to @var{help-map}.  The string @var"
"{help-text} should describe the bindings available in @var{help-map}."
msgstr ""

# type: defmac
#: lispref/help.texi:680
msgid ""
"The command @var{fname} is defined to handle a few events itself, by "
"scrolling the display of @var{help-text}.  When @var{fname} reads one of "
"those special events, it does the scrolling and then reads another event.  "
"When it reads an event that is not one of those few, and which has a binding "
"in @var{help-map}, it executes that key's binding and then returns."
msgstr ""

# type: defmac
#: lispref/help.texi:685
msgid ""
"The argument @var{help-line} should be a single-line summary of the "
"alternatives in @var{help-map}.  In the current version of Emacs, this "
"argument is used only if you set the option @code{three-step-help} to @code"
"{t}."
msgstr ""

# type: defmac
#: lispref/help.texi:688
msgid ""
"This macro is used in the command @code{help-for-help} which is the binding "
"of @kbd{C-h C-h}."
msgstr ""

# type: defopt
#: lispref/help.texi:690
#, no-wrap
msgid "three-step-help"
msgstr "three-step-help"

# type: defopt
#: lispref/help.texi:695
msgid ""
"If this variable is non-@code{nil}, commands defined with @code{make-help-"
"screen} display their @var{help-line} strings in the echo area at first, and "
"display the longer @var{help-text} strings only if the user types the help "
"character again."
msgstr ""

# type: ignore
#: lispref/help.texi:699
#, no-wrap
msgid "   arch-tag: ba36b4c2-e60f-49e2-bc25-61158fdcd815\n"
msgstr "   arch-tag: ba36b4c2-e60f-49e2-bc25-61158fdcd815\n"

# type: cindex
#: lispref/hooks.texi:9
#, no-wrap
msgid "standard hooks"
msgstr ""

# type: cindex
#: lispref/hooks.texi:10
#, no-wrap
msgid "hook variables, list of"
msgstr ""

# type: Plain text
#: lispref/hooks.texi:14
msgid ""
"The following is a list of hook variables that let you provide functions to "
"be called from within Emacs on suitable occasions."
msgstr ""

# type: Plain text
#: lispref/hooks.texi:21
msgid ""
"Most of these variables have names ending with @samp{-hook}.  They are @dfn"
"{normal hooks}, run by means of @code{run-hooks}.  The value of such a hook "
"is a list of functions; the functions are called with no arguments and their "
"values are completely ignored.  The recommended way to put a new function on "
"such a hook is to call @code{add-hook}.  @xref{Hooks}, for more information "
"about using hooks."
msgstr ""

# type: Plain text
#: lispref/hooks.texi:27
msgid ""
"Every major mode defines a mode hook named @samp{@var{modename}-mode-hook}.  "
"The major mode command runs this normal hook with @code{run-mode-hooks} as "
"the very last thing it does.  @xref{Mode Hooks}.  Most minor modes have mode "
"hooks too.  Mode hooks are omitted in the list below."
msgstr ""

# type: Plain text
#: lispref/hooks.texi:33
msgid ""
"The variables whose names end in @samp{-hooks} or @samp{-functions} are "
"usually @dfn{abnormal hooks}; their values are lists of functions, but these "
"functions are called in a special way (they are passed arguments, or their "
"values are used). The variables whose names end in @samp{-function} have "
"single functions as their values."
msgstr ""

# type: defvar
#: lispref/hooks.texi:38 lispref/markers.texi:601
#, no-wrap
msgid "activate-mark-hook"
msgstr ""

# type: table
#: lispref/hooks.texi:40 lispref/hooks.texi:116 lispref/locals.texi:167
#: lispref/locals.texi:170
msgid "@xref{The Mark}."
msgstr ""

# type: defvar
#: lispref/hooks.texi:41 lispref/text.texi:4329
#, no-wrap
msgid "after-change-functions"
msgstr ""

# type: table
#: lispref/hooks.texi:43 lispref/hooks.texi:70 lispref/hooks.texi:161
msgid "@xref{Change Hooks}."
msgstr ""

# type: defvar
#: lispref/hooks.texi:44 lispref/modes.texi:897
#, no-wrap
msgid "after-change-major-mode-hook"
msgstr ""

# type: table
#: lispref/hooks.texi:46
msgid "@xref{Mode Hooks}."
msgstr ""

# type: defvar
#: lispref/hooks.texi:47 lispref/os.texi:243
#, no-wrap
msgid "after-init-hook"
msgstr ""

# type: table
#: lispref/hooks.texi:49 lispref/hooks.texi:73 lispref/hooks.texi:152
msgid "@xref{Init File}."
msgstr ""

# type: defvar
#: lispref/hooks.texi:50 lispref/text.texi:3429
#, no-wrap
msgid "after-insert-file-functions"
msgstr ""

# type: table
#: lispref/hooks.texi:52 lispref/hooks.texi:334
msgid "@xref{Saving Properties}."
msgstr ""

# type: table
#: lispref/hooks.texi:55 lispref/hooks.texi:76
msgid "@xref{Creating Frames}."
msgstr ""

# type: table
#: lispref/hooks.texi:58 lispref/hooks.texi:79
msgid "@xref{Reverting}."
msgstr ""

# type: table
#: lispref/hooks.texi:61 lispref/hooks.texi:82 lispref/hooks.texi:328
#: lispref/hooks.texi:331 lispref/locals.texi:227
msgid "@xref{Saving Buffers}."
msgstr ""

# type: defvar
#: lispref/hooks.texi:62 lispref/locals.texi:25 lispref/text.texi:1783
#, no-wrap
msgid "auto-fill-function"
msgstr ""

# type: table
#: lispref/hooks.texi:64 lispref/locals.texi:27
msgid "@xref{Auto Filling}."
msgstr ""

# type: table
#: lispref/hooks.texi:67 lispref/locals.texi:33 lispref/locals.texi:78
msgid "@xref{Auto-Saving}."
msgstr ""

# type: defvar
#: lispref/hooks.texi:68 lispref/text.texi:4322
#, no-wrap
msgid "before-change-functions"
msgstr ""

# type: defvar
#: lispref/hooks.texi:71 lispref/os.texi:237
#, no-wrap
msgid "before-init-hook"
msgstr ""

# type: table
#: lispref/hooks.texi:85
msgid "@xref{Blinking}."
msgstr ""

# type: defvar
#: lispref/hooks.texi:86 lispref/text.texi:3475
#, no-wrap
msgid "buffer-access-fontify-functions"
msgstr ""

# type: table
#: lispref/hooks.texi:88
msgid "@xref{Lazy Properties}."
msgstr ""

# type: item
#: lispref/hooks.texi:89
#, no-wrap
msgid "calendar-load-hook"
msgstr ""

# type: iftex
#: lispref/hooks.texi:92 lispref/hooks.texi:186 lispref/hooks.texi:301
#: lispref/hooks.texi:309
msgid "@inforef{Calendar Customizing,, emacs-xtra}."
msgstr ""

# type: ifnottex
#: lispref/hooks.texi:95 lispref/hooks.texi:189 lispref/hooks.texi:304
#: lispref/hooks.texi:312
msgid "@xref{Calendar Customizing,,, emacs}."
msgstr ""

# type: defvar
#: lispref/hooks.texi:98 lispref/variables.texi:1385
#, no-wrap
msgid "change-major-mode-hook"
msgstr ""

# type: table
#: lispref/hooks.texi:100
msgid "@xref{Creating Buffer-Local}."
msgstr ""

# type: defvar
#: lispref/hooks.texi:101 lispref/os.texi:423
#, no-wrap
msgid "command-line-functions"
msgstr ""

# type: table
#: lispref/hooks.texi:103
msgid "@xref{Command-Line Arguments}."
msgstr ""

# type: item
#: lispref/hooks.texi:104
#, no-wrap
msgid "comment-indent-function"
msgstr ""

# type: table
#: lispref/hooks.texi:107
msgid ""
"@xref{Options for Comments,, Options Controlling Comments, emacs, the GNU "
"Emacs Manual}."
msgstr ""

# type: item
#: lispref/hooks.texi:108
#, no-wrap
msgid "compilation-finish-functions"
msgstr ""

# type: table
#: lispref/hooks.texi:110
msgid "Functions to call when a compilation process finishes."
msgstr ""

# type: item
#: lispref/hooks.texi:111
#, no-wrap
msgid "custom-define-hook"
msgstr ""

# type: table
#: lispref/hooks.texi:113
msgid "Hook called after defining each customize option."
msgstr ""

# type: defvarx
#: lispref/hooks.texi:114 lispref/markers.texi:602
#, no-wrap
msgid "deactivate-mark-hook"
msgstr ""

# type: item
#: lispref/hooks.texi:117
#, no-wrap
msgid "desktop-after-read-hook"
msgstr ""

# type: table
#: lispref/hooks.texi:121
msgid ""
"Normal hook run after a successful @code{desktop-read}.  May be used to show "
"a buffer list.  @xref{Saving Emacs Sessions,, Saving Emacs Sessions, emacs, "
"the GNU Emacs Manual}."
msgstr ""

# type: item
#: lispref/hooks.texi:122
#, no-wrap
msgid "desktop-no-desktop-file-hook"
msgstr ""

# type: table
#: lispref/hooks.texi:126
msgid ""
"Normal hook run when @code{desktop-read} can't find a desktop file.  May be "
"used to show a dired buffer.  @xref{Saving Emacs Sessions,, Saving Emacs "
"Sessions, emacs, the GNU Emacs Manual}."
msgstr ""

# type: item
#: lispref/hooks.texi:127
#, no-wrap
msgid "desktop-save-hook"
msgstr ""

# type: table
#: lispref/hooks.texi:131
msgid ""
"Normal hook run before the desktop is saved in a desktop file.  This is "
"useful for truncating history lists, for example.  @xref{Saving Emacs "
"Sessions,, Saving Emacs Sessions, emacs, the GNU Emacs Manual}."
msgstr ""

# type: item
#: lispref/hooks.texi:132
#, no-wrap
msgid "diary-display-hook"
msgstr ""

# type: iftex
#: lispref/hooks.texi:135 lispref/hooks.texi:211 lispref/hooks.texi:223
msgid "@inforef{Fancy Diary Display,, emacs-xtra}."
msgstr ""

# type: ifnottex
#: lispref/hooks.texi:138 lispref/hooks.texi:214 lispref/hooks.texi:226
msgid "@xref{Fancy Diary Display,,, emacs}."
msgstr ""

# type: item
#: lispref/hooks.texi:140
#, no-wrap
msgid "diary-hook"
msgstr ""

# type: table
#: lispref/hooks.texi:143
msgid ""
"List of functions called after the display of the diary.  Can be used for "
"appointment notification."
msgstr ""

# type: table
#: lispref/hooks.texi:146
msgid "@xref{Disabling Commands}."
msgstr ""

# type: table
#: lispref/hooks.texi:149
msgid "@xref{Echo Area Customization}."
msgstr ""

# type: defvar
#: lispref/hooks.texi:150 lispref/os.texi:250
#, no-wrap
msgid "emacs-startup-hook"
msgstr ""

# type: table
#: lispref/hooks.texi:155 lispref/hooks.texi:158
msgid "@xref{Visiting Functions}."
msgstr ""

# type: defvar
#: lispref/hooks.texi:159 lispref/text.texi:4396
#, no-wrap
msgid "first-change-hook"
msgstr ""

# type: defvar
#: lispref/hooks.texi:162 lispref/modes.texi:2967
#, no-wrap
msgid "font-lock-beginning-of-syntax-function"
msgstr ""

# type: table
#: lispref/hooks.texi:164 lispref/hooks.texi:176
msgid "@xref{Syntactic Font Lock}."
msgstr ""

# type: defvar
#: lispref/hooks.texi:165 lispref/modes.texi:2787
#, no-wrap
msgid "font-lock-fontify-buffer-function"
msgstr ""

# type: table
#: lispref/hooks.texi:167 lispref/hooks.texi:170 lispref/hooks.texi:173
#: lispref/hooks.texi:179 lispref/hooks.texi:182
msgid "@xref{Other Font Lock Variables}."
msgstr ""

# type: defvar
#: lispref/hooks.texi:168 lispref/modes.texi:2798
#, no-wrap
msgid "font-lock-fontify-region-function"
msgstr ""

# type: defvar
#: lispref/hooks.texi:171 lispref/modes.texi:2764
#, no-wrap
msgid "font-lock-mark-block-function"
msgstr ""

# type: defvar
#: lispref/hooks.texi:174 lispref/modes.texi:2988
#, no-wrap
msgid "font-lock-syntactic-face-function"
msgstr ""

# type: defvar
#: lispref/hooks.texi:177 lispref/modes.texi:2792
#, no-wrap
msgid "font-lock-unfontify-buffer-function"
msgstr ""

# type: defvar
#: lispref/hooks.texi:180 lispref/modes.texi:2806
#, no-wrap
msgid "font-lock-unfontify-region-function"
msgstr ""

# type: item
#: lispref/hooks.texi:183
#, no-wrap
msgid "initial-calendar-window-hook"
msgstr ""

# type: table
#: lispref/hooks.texi:193
msgid "@xref{Keyboard Macros}."
msgstr ""

# type: table
#: lispref/hooks.texi:196 lispref/hooks.texi:199 lispref/locals.texi:69
#: lispref/locals.texi:72
msgid "@xref{Killing Buffers}."
msgstr ""

# type: defvar
#: lispref/hooks.texi:200 lispref/os.texi:499
#, no-wrap
msgid "kill-emacs-hook"
msgstr ""

# type: table
#: lispref/hooks.texi:202 lispref/hooks.texi:205
msgid "@xref{Killing Emacs}."
msgstr ""

# type: defvar
#: lispref/hooks.texi:203 lispref/os.texi:489
#, no-wrap
msgid "kill-emacs-query-functions"
msgstr ""

# type: item
#: lispref/hooks.texi:206
#, no-wrap
msgid "lisp-indent-function"
msgstr ""

# type: item
#: lispref/hooks.texi:208
#, no-wrap
msgid "list-diary-entries-hook"
msgstr ""

# type: item
#: lispref/hooks.texi:216
#, no-wrap
msgid "mail-setup-hook"
msgstr ""

# type: table
#: lispref/hooks.texi:219
msgid ""
"@xref{Mail Mode Misc,, Mail Mode Miscellany, emacs, the GNU Emacs Manual}."
msgstr ""

# type: item
#: lispref/hooks.texi:220
#, no-wrap
msgid "mark-diary-entries-hook"
msgstr ""

# type: defvar
#: lispref/hooks.texi:228 lispref/keymaps.texi:2531
#, no-wrap
msgid "menu-bar-update-hook"
msgstr ""

# type: table
#: lispref/hooks.texi:230
msgid "@xref{Menu Bar}."
msgstr ""

# type: defvar
#: lispref/hooks.texi:231 lispref/minibuf.texi:1921
#, no-wrap
msgid "minibuffer-setup-hook"
msgstr ""

# type: table
#: lispref/hooks.texi:233 lispref/hooks.texi:236
msgid "@xref{Minibuffer Misc}."
msgstr ""

# type: defvar
#: lispref/hooks.texi:234 lispref/minibuf.texi:1926
#, no-wrap
msgid "minibuffer-exit-hook"
msgstr ""

# type: table
#: lispref/hooks.texi:239
msgid "@xref{Mouse Position}."
msgstr ""

# type: item
#: lispref/hooks.texi:240
#, no-wrap
msgid "nongregorian-diary-listing-hook"
msgstr ""

# type: iftex
#: lispref/hooks.texi:243 lispref/hooks.texi:251
msgid "@inforef{Hebrew/Islamic Entries,, emacs-xtra}."
msgstr ""

# type: ifnottex
#: lispref/hooks.texi:246 lispref/hooks.texi:254
msgid "@xref{Hebrew/Islamic Entries,,, emacs}."
msgstr ""

# type: item
#: lispref/hooks.texi:248
#, no-wrap
msgid "nongregorian-diary-marking-hook"
msgstr ""

# type: item
#: lispref/hooks.texi:256
#, no-wrap
msgid "occur-hook"
msgstr ""

# type: table
#: lispref/hooks.texi:260 lispref/hooks.texi:266
msgid "@xref{Command Overview}."
msgstr ""

# type: table
#: lispref/hooks.texi:263
msgid "@xref{Abbrev Expansion}."
msgstr ""

# type: item
#: lispref/hooks.texi:267
#, no-wrap
msgid "print-diary-entries-hook"
msgstr ""

# type: iftex
#: lispref/hooks.texi:270
msgid "@inforef{Diary Customizing,, emacs-xtra}."
msgstr ""

# type: ifnottex
#: lispref/hooks.texi:273
msgid "@xref{Diary Customizing,,, emacs}."
msgstr ""

# type: defvar
#: lispref/hooks.texi:275 lispref/windows.texi:2410
#, no-wrap
msgid "redisplay-end-trigger-functions"
msgstr ""

# type: table
#: lispref/hooks.texi:277 lispref/hooks.texi:316 lispref/hooks.texi:319
#: lispref/hooks.texi:325
msgid "@xref{Window Hooks}."
msgstr ""

# type: item
#: lispref/hooks.texi:278
#, no-wrap
msgid "scheme-indent-function"
msgstr ""

# type: defvar
#: lispref/hooks.texi:280 lispref/os.texi:601
#, no-wrap
msgid "suspend-hook"
msgstr ""

# type: table
#: lispref/hooks.texi:282 lispref/hooks.texi:285
msgid "@xref{Suspending Emacs}."
msgstr ""

# type: defvar
#: lispref/hooks.texi:283 lispref/os.texi:605
#, no-wrap
msgid "suspend-resume-hook"
msgstr ""

# type: table
#: lispref/hooks.texi:288 lispref/hooks.texi:291 lispref/hooks.texi:294
msgid "@xref{Temporary Displays}."
msgstr ""

# type: defvar
#: lispref/hooks.texi:295 lispref/os.texi:325
#, no-wrap
msgid "term-setup-hook"
msgstr ""

# type: table
#: lispref/hooks.texi:297
msgid "@xref{Terminal-Specific}."
msgstr ""

# type: item
#: lispref/hooks.texi:298
#, no-wrap
msgid "today-visible-calendar-hook"
msgstr ""

# type: item
#: lispref/hooks.texi:306
#, no-wrap
msgid "today-invisible-calendar-hook"
msgstr ""

# type: defvar
#: lispref/hooks.texi:314 lispref/windows.texi:2430
#, no-wrap
msgid "window-configuration-change-hook"
msgstr ""

# type: defvar
#: lispref/hooks.texi:317 lispref/windows.texi:2370
#, no-wrap
msgid "window-scroll-functions"
msgstr ""

# type: table
#: lispref/hooks.texi:322
msgid "@xref{Window Systems}."
msgstr ""

# type: defvar
#: lispref/hooks.texi:323 lispref/windows.texi:2387
#, no-wrap
msgid "window-size-change-functions"
msgstr ""

# type: defvar
#: lispref/hooks.texi:332 lispref/text.texi:3404
#, no-wrap
msgid "write-region-annotate-functions"
msgstr ""

# type: ignore
#: lispref/hooks.texi:338
#, no-wrap
msgid "   arch-tag: 55fd0296-d906-4551-b300-979d3846aa88\n"
msgstr "   arch-tag: 55fd0296-d906-4551-b300-979d3846aa88\n"

# type: Plain text
#: lispref/internals.texi:14
msgid ""
"This chapter describes how the runnable Emacs executable is dumped with the "
"preloaded Lisp libraries in it, how storage is allocated, and some internal "
"aspects of GNU Emacs that may be of interest to C programmers."
msgstr ""

# type: menu
#: lispref/internals.texi:22 lispref/internals.texi:24
#: lispref/internals.texi:25 lispref/vol1.texi:936 lispref/vol2.texi:937
#, no-wrap
msgid "Building Emacs"
msgstr ""

# type: menu
#: lispref/internals.texi:22
msgid "How the dumped Emacs is made."
msgstr ""

# type: menu
#: lispref/internals.texi:22 lispref/internals.texi:144
#: lispref/internals.texi:145 lispref/vol1.texi:936 lispref/vol2.texi:937
#, no-wrap
msgid "Pure Storage"
msgstr ""

# type: menu
#: lispref/internals.texi:22 lispref/vol1.texi:936 lispref/vol2.texi:937
msgid "A kludge to make preloaded Lisp functions sharable."
msgstr ""

# type: menu
#: lispref/internals.texi:22 lispref/internals.texi:205
#: lispref/internals.texi:206 lispref/vol1.texi:936 lispref/vol2.texi:937
#, no-wrap
msgid "Garbage Collection"
msgstr ""

# type: menu
#: lispref/internals.texi:22 lispref/vol1.texi:936 lispref/vol2.texi:937
msgid "Reclaiming space for Lisp objects no longer used."
msgstr ""

# type: section
#: lispref/internals.texi:22 lispref/internals.texi:442
#: lispref/internals.texi:443
#, no-wrap
msgid "Memory Usage"
msgstr ""

# type: menu
#: lispref/internals.texi:22
msgid "Info about total size of Lisp objects made so far."
msgstr ""

# type: menu
#: lispref/internals.texi:22 lispref/internals.texi:494
#: lispref/internals.texi:495 lispref/vol1.texi:936 lispref/vol2.texi:937
#, no-wrap
msgid "Writing Emacs Primitives"
msgstr ""

# type: menu
#: lispref/internals.texi:22 lispref/vol1.texi:936 lispref/vol2.texi:937
msgid "Writing C code for Emacs."
msgstr ""

# type: menu
#: lispref/internals.texi:22 lispref/internals.texi:811
#: lispref/internals.texi:812 lispref/vol1.texi:936 lispref/vol1.texi:938
#: lispref/vol2.texi:937 lispref/vol2.texi:939
#, no-wrap
msgid "Object Internals"
msgstr ""

# type: menu
#: lispref/internals.texi:22 lispref/vol1.texi:936 lispref/vol2.texi:937
msgid "Data formats of buffers, windows, processes."
msgstr ""

# type: cindex
#: lispref/internals.texi:26
#, no-wrap
msgid "building Emacs"
msgstr ""

# type: pindex
#: lispref/internals.texi:27
#, no-wrap
msgid "temacs"
msgstr ""

# type: Plain text
#: lispref/internals.texi:33
msgid ""
"This section explains the steps involved in building the Emacs executable.  "
"You don't have to know this material to build and install Emacs, since the "
"makefiles do all these things automatically.  This information is pertinent "
"to Emacs maintenance."
msgstr ""

# type: Plain text
#: lispref/internals.texi:38
msgid ""
"Compilation of the C source files in the @file{src} directory produces an "
"executable file called @file{temacs}, also called a @dfn{bare impure "
"Emacs}.  It contains the Emacs Lisp interpreter and I/O routines, but not "
"the editing commands."
msgstr ""

# type: file{#1}
#: lispref/internals.texi:39
#, no-wrap
msgid "loadup.el"
msgstr ""

# type: Plain text
#: lispref/internals.texi:46
msgid ""
"The command @w{@samp{temacs -l loadup}} uses @file{temacs} to create the "
"real runnable Emacs executable.  These arguments direct @file{temacs} to "
"evaluate the Lisp files specified in the file @file{loadup.el}.  These files "
"set up the normal Emacs editing environment, resulting in an Emacs that is "
"still impure but no longer bare."
msgstr ""

# type: cindex
#: lispref/internals.texi:47
#, no-wrap
msgid "dumping Emacs"
msgstr ""

# type: Plain text
#: lispref/internals.texi:54
msgid ""
"It takes a substantial time to load the standard Lisp files.  Luckily, you "
"don't have to do this each time you run Emacs; @file{temacs} can dump out an "
"executable program called @file{emacs} that has these files preloaded.  @file"
"{emacs} starts more quickly because it does not need to load the files.  "
"This is the Emacs executable that is normally installed."
msgstr ""

# type: Plain text
#: lispref/internals.texi:61
msgid ""
"To create @file{emacs}, use the command @samp{temacs -batch -l loadup "
"dump}.  The purpose of @samp{-batch} here is to prevent @file{temacs} from "
"trying to initialize any of its data on the terminal; this ensures that the "
"tables of terminal information are empty in the dumped Emacs.  The argument "
"@samp{dump} tells @file{loadup.el} to dump a new executable named @file"
"{emacs}."
msgstr ""

# type: Plain text
#: lispref/internals.texi:67
msgid ""
"Some operating systems don't support dumping.  On those systems, you must "
"start Emacs with the @samp{temacs -l loadup} command each time you use it.  "
"This takes a substantial time, but since you need to start Emacs once a day "
"at most---or once a week if you never log out---the extra time is not too "
"severe a problem."
msgstr ""

# type: file{#1}
#: lispref/internals.texi:68
#, no-wrap
msgid "site-load.el"
msgstr ""

# type: Plain text
#: lispref/internals.texi:72
msgid ""
"You can specify additional files to preload by writing a library named @file"
"{site-load.el} that loads them.  You may need to add a definition"
msgstr ""

# type: example
#: lispref/internals.texi:75
#, no-wrap
msgid "#define SITELOAD_PURESIZE_EXTRA @var{n}\n"
msgstr ""

# type: Plain text
#: lispref/internals.texi:82
msgid ""
"to make @var{n} added bytes of pure space to hold the additional files.  "
"(Try adding increments of 20000 until it is big enough.)  However, the "
"advantage of preloading additional files decreases as machines get faster.  "
"On modern machines, it is usually not advisable."
msgstr ""

# type: Plain text
#: lispref/internals.texi:88
msgid ""
"After @file{loadup.el} reads @file{site-load.el}, it finds the documentation "
"strings for primitive and preloaded functions (and variables) in the file "
"@file{etc/DOC} where they are stored, by calling @code{Snarf-documentation} "
"(@pxref{Definition of Snarf-documentation,, Accessing Documentation})."
msgstr ""

# type: file{#1}
#: lispref/internals.texi:89
#, no-wrap
msgid "site-init.el"
msgstr ""

# type: cindex
#: lispref/internals.texi:90
#, no-wrap
msgid "preloading additional functions and variables"
msgstr ""

# type: Plain text
#: lispref/internals.texi:94
msgid ""
"You can specify other Lisp expressions to execute just before dumping by "
"putting them in a library named @file{site-init.el}.  This file is executed "
"after the documentation strings are found."
msgstr ""

# type: Plain text
#: lispref/internals.texi:98
msgid ""
"If you want to preload function or variable definitions, there are three "
"ways you can do this and make their documentation strings accessible when "
"you subsequently run Emacs:"
msgstr ""

# type: itemize
#: lispref/internals.texi:103
msgid ""
"Arrange to scan these files when producing the @file{etc/DOC} file, and load "
"them with @file{site-load.el}."
msgstr ""

# type: itemize
#: lispref/internals.texi:107
msgid ""
"Load the files with @file{site-init.el}, then copy the files into the "
"installation directory for Lisp files when you install Emacs."
msgstr ""

# type: itemize
#: lispref/internals.texi:114
msgid ""
"Specify a non-@code{nil} value for @code{byte-compile-dynamic-docstrings} as "
"a local variable in each of these files, and load them with either @file"
"{site-load.el} or @file{site-init.el}.  (This method has the drawback that "
"the documentation strings take up space in Emacs all the time.)"
msgstr ""

# type: Plain text
#: lispref/internals.texi:121
msgid ""
"It is not advisable to put anything in @file{site-load.el} or @file{site-"
"init.el} that would alter any of the features that users expect in an "
"ordinary unmodified Emacs.  If you feel you must override normal features "
"for your site, do it with @file{default.el}, so that users can override your "
"changes if they wish.  @xref{Startup Summary}."
msgstr ""

# type: Plain text
#: lispref/internals.texi:125
msgid ""
"In a package that can be preloaded, it is sometimes useful to specify a "
"computation to be done when Emacs subsequently starts up.  For this, use "
"@code{eval-at-startup}:"
msgstr ""

# type: defmac
#: lispref/internals.texi:126
#, no-wrap
msgid "eval-at-startup body@dots{}"
msgstr ""

# type: defmac
#: lispref/internals.texi:132
msgid ""
"This evaluates the @var{body} forms, either immediately if running in an "
"Emacs that has already started up, or later when Emacs does start up.  Since "
"the value of the @var{body} forms is not necessarily available when the @code"
"{eval-at-startup} form is run, that form always returns @code{nil}."
msgstr ""

# type: defun
#: lispref/internals.texi:134
#, no-wrap
msgid "dump-emacs to-file from-file"
msgstr ""

# type: cindex
#: lispref/internals.texi:135
#, no-wrap
msgid "unexec"
msgstr ""

# type: defun
#: lispref/internals.texi:139
msgid ""
"This function dumps the current state of Emacs into an executable file @var"
"{to-file}.  It takes symbols from @var{from-file} (this is normally the "
"executable file @file{temacs})."
msgstr ""

# type: defun
#: lispref/internals.texi:142
msgid ""
"If you want to use this function in an Emacs that was already dumped, you "
"must run Emacs with @samp{-batch}."
msgstr ""

# type: cindex
#: lispref/internals.texi:146
#, no-wrap
msgid "pure storage"
msgstr ""

# type: Plain text
#: lispref/internals.texi:154
msgid ""
"Emacs Lisp uses two kinds of storage for user-created Lisp objects: @dfn"
"{normal storage} and @dfn{pure storage}.  Normal storage is where all the "
"new data created during an Emacs session are kept; see the following section "
"for information on normal storage.  Pure storage is used for certain data in "
"the preloaded standard Lisp files---data that should never change during "
"actual use of Emacs."
msgstr ""

# type: Plain text
#: lispref/internals.texi:170
msgid ""
"Pure storage is allocated only while @file{temacs} is loading the standard "
"preloaded Lisp libraries.  In the file @file{emacs}, it is marked as read-"
"only (on operating systems that permit this), so that the memory space can "
"be shared by all the Emacs jobs running on the machine at once.  Pure "
"storage is not expandable; a fixed amount is allocated when Emacs is "
"compiled, and if that is not sufficient for the preloaded libraries, @file"
"{temacs} allocates dynamic memory for the part that didn't fit.  If that "
"happens, you should increase the compilation parameter @code{PURESIZE} in "
"the file @file{src/puresize.h} and rebuild Emacs, even though the resulting "
"image will work: garbage collection is disabled in this situation, causing a "
"memory leak.  Such an overflow normally won't happen unless you try to "
"preload additional libraries or add features to the standard ones.  Emacs "
"will display a warning about the overflow when it starts."
msgstr ""

# type: defun
#: lispref/internals.texi:171
#, no-wrap
msgid "purecopy object"
msgstr ""

# type: defun
#: lispref/internals.texi:178
msgid ""
"This function makes a copy in pure storage of @var{object}, and returns it.  "
"It copies a string by simply making a new string with the same characters, "
"but without text properties, in pure storage.  It recursively copies the "
"contents of vectors and cons cells.  It does not make copies of other "
"objects such as symbols, but just returns them unchanged.  It signals an "
"error if asked to copy markers."
msgstr ""

# type: defun
#: lispref/internals.texi:182
msgid ""
"This function is a no-op except while Emacs is being built and dumped; it is "
"usually called only in the file @file{emacs/lisp/loaddefs.el}, but a few "
"packages call it just in case you decide to preload them."
msgstr ""

# type: defvar
#: lispref/internals.texi:184
#, no-wrap
msgid "pure-bytes-used"
msgstr ""

# type: defvar
#: lispref/internals.texi:189
msgid ""
"The value of this variable is the number of bytes of pure storage allocated "
"so far.  Typically, in a dumped Emacs, this number is very close to the "
"total amount of pure storage available---if it were not, we would "
"preallocate less."
msgstr ""

# type: defvar
#: lispref/internals.texi:191
#, no-wrap
msgid "purify-flag"
msgstr ""

# type: defvar
#: lispref/internals.texi:195
msgid ""
"This variable determines whether @code{defun} should make a copy of the "
"function definition in pure storage.  If it is non-@code{nil}, then the "
"function definition is copied into pure storage."
msgstr ""

# type: defvar
#: lispref/internals.texi:201
msgid ""
"This flag is @code{t} while loading all of the basic functions for building "
"Emacs initially (allowing those functions to be sharable and non-"
"collectible).  Dumping Emacs as an executable always writes @code{nil} in "
"this variable, regardless of the value it actually has before and after "
"dumping."
msgstr ""

# type: defvar
#: lispref/internals.texi:203
msgid "You should not change this flag in a running Emacs."
msgstr ""

# type: cindex
#: lispref/internals.texi:207
#, no-wrap
msgid "garbage collection"
msgstr ""

# type: cindex
#: lispref/internals.texi:209
#, no-wrap
msgid "memory allocation"
msgstr ""

# type: Plain text
#: lispref/internals.texi:219
msgid ""
"When a program creates a list or the user defines a new function (such as by "
"loading a library), that data is placed in normal storage.  If normal "
"storage runs low, then Emacs asks the operating system to allocate more "
"memory in blocks of 1k bytes.  Each block is used for one type of Lisp "
"object, so symbols, cons cells, markers, etc., are segregated in distinct "
"blocks in memory.  (Vectors, long strings, buffers and certain other editing "
"types, which are fairly large, are allocated in individual blocks, one per "
"object, while small strings are packed into blocks of 8k bytes.)"
msgstr ""

# type: Plain text
#: lispref/internals.texi:225
msgid ""
"It is quite common to use some storage for a while, then release it by (for "
"example) killing a buffer or deleting the last pointer to an object.  Emacs "
"provides a @dfn{garbage collector} to reclaim this abandoned storage.  (This "
"name is traditional, but ``garbage recycler'' might be a more intuitive "
"metaphor for this facility.)"
msgstr ""

# type: Plain text
#: lispref/internals.texi:232
msgid ""
"The garbage collector operates by finding and marking all Lisp objects that "
"are still accessible to Lisp programs.  To begin with, it assumes all the "
"symbols, their values and associated function definitions, and any data "
"presently on the stack, are accessible.  Any objects that can be reached "
"indirectly through other accessible objects are also accessible."
msgstr ""

# type: Plain text
#: lispref/internals.texi:238
msgid ""
"When marking is finished, all objects still unmarked are garbage.  No matter "
"what the Lisp program or the user does, it is impossible to refer to them, "
"since there is no longer a way to reach them.  Their space might as well be "
"reused, since no one will miss them.  The second (``sweep'') phase of the "
"garbage collector arranges to reuse them."
msgstr ""

# type: cindex
#: lispref/internals.texi:241
#, no-wrap
msgid "free list"
msgstr ""

# type: Plain text
#: lispref/internals.texi:247
msgid ""
"The sweep phase puts unused cons cells onto a @dfn{free list} for future "
"allocation; likewise for symbols and markers.  It compacts the accessible "
"strings so they occupy fewer 8k blocks; then it frees the other 8k blocks.  "
"Vectors, buffers, windows, and other large objects are individually "
"allocated and freed using @code{malloc} and @code{free}."
msgstr ""

# type: cindex
#: lispref/internals.texi:248
#, no-wrap
msgid "CL note---allocate more storage"
msgstr ""

# type: quotation
#: lispref/internals.texi:255
msgid ""
"@b{Common Lisp note:} Unlike other Lisps, GNU Emacs Lisp does not call the "
"garbage collector when the free list is empty.  Instead, it simply requests "
"the operating system to allocate more storage, and processing continues "
"until @code{gc-cons-threshold} bytes have been used."
msgstr ""

# type: quotation
#: lispref/internals.texi:261
msgid ""
"This means that you can make sure that the garbage collector will not run "
"during a certain portion of a Lisp program by calling the garbage collector "
"explicitly just before it (provided that portion of the program does not use "
"so much space as to force a second garbage collection)."
msgstr ""

# type: deffn
#: lispref/internals.texi:263
#, no-wrap
msgid "Command garbage-collect"
msgstr ""

# type: deffn
#: lispref/internals.texi:268
msgid ""
"This command runs a garbage collection, and returns information on the "
"amount of space in use.  (Garbage collection can also occur spontaneously if "
"you use more than @code{gc-cons-threshold} bytes of Lisp data since the "
"previous garbage collection.)"
msgstr ""

# type: deffn
#: lispref/internals.texi:271
msgid ""
"@code{garbage-collect} returns a list containing the following information:"
msgstr ""

# type: group
#: lispref/internals.texi:276
#, no-wrap
msgid ""
"((@var{used-conses} . @var{free-conses})\n"
" (@var{used-syms} . @var{free-syms})\n"
msgstr ""

# type: example
#: lispref/internals.texi:283
#, no-wrap
msgid ""
" (@var{used-miscs} . @var{free-miscs})\n"
" @var{used-string-chars}\n"
" @var{used-vector-slots}\n"
" (@var{used-floats} . @var{free-floats})\n"
" (@var{used-intervals} . @var{free-intervals})\n"
" (@var{used-strings} . @var{free-strings}))\n"
msgstr ""

# type: group
#: lispref/internals.texi:294
#, no-wrap
msgid ""
"(garbage-collect)\n"
"     @result{} ((106886 . 13184) (9769 . 0)\n"
"                (7731 . 4651) 347543 121628\n"
"                (31 . 94) (1273 . 168)\n"
"                (25474 . 3569))\n"
msgstr ""

# type: deffn
#: lispref/internals.texi:298
msgid "Here is a table explaining each element:"
msgstr ""

# type: item
#: lispref/internals.texi:300
#, no-wrap
msgid "used-conses"
msgstr ""

# type: table
#: lispref/internals.texi:302
msgid "The number of cons cells in use."
msgstr ""

# type: item
#: lispref/internals.texi:303
#, no-wrap
msgid "free-conses"
msgstr ""

# type: table
#: lispref/internals.texi:306
msgid ""
"The number of cons cells for which space has been obtained from the "
"operating system, but that are not currently being used."
msgstr ""

# type: item
#: lispref/internals.texi:307
#, no-wrap
msgid "used-syms"
msgstr ""

# type: table
#: lispref/internals.texi:309
msgid "The number of symbols in use."
msgstr ""

# type: item
#: lispref/internals.texi:310
#, no-wrap
msgid "free-syms"
msgstr ""

# type: table
#: lispref/internals.texi:313
msgid ""
"The number of symbols for which space has been obtained from the operating "
"system, but that are not currently being used."
msgstr ""

# type: item
#: lispref/internals.texi:314
#, no-wrap
msgid "used-miscs"
msgstr ""

# type: table
#: lispref/internals.texi:317
msgid ""
"The number of miscellaneous objects in use.  These include markers and "
"overlays, plus certain objects not visible to users."
msgstr ""

# type: item
#: lispref/internals.texi:318
#, no-wrap
msgid "free-miscs"
msgstr ""

# type: table
#: lispref/internals.texi:321
msgid ""
"The number of miscellaneous objects for which space has been obtained from "
"the operating system, but that are not currently being used."
msgstr ""

# type: item
#: lispref/internals.texi:322
#, no-wrap
msgid "used-string-chars"
msgstr ""

# type: table
#: lispref/internals.texi:324
msgid "The total size of all strings, in characters."
msgstr ""

# type: item
#: lispref/internals.texi:325
#, no-wrap
msgid "used-vector-slots"
msgstr ""

# type: table
#: lispref/internals.texi:327
msgid "The total number of elements of existing vectors."
msgstr ""

# type: item
#: lispref/internals.texi:328
#, no-wrap
msgid "used-floats"
msgstr ""

# type: table
#: lispref/internals.texi:331
msgid "The number of floats in use."
msgstr ""

# type: item
#: lispref/internals.texi:332
#, no-wrap
msgid "free-floats"
msgstr ""

# type: table
#: lispref/internals.texi:336
msgid ""
"The number of floats for which space has been obtained from the operating "
"system, but that are not currently being used."
msgstr ""

# type: item
#: lispref/internals.texi:337
#, no-wrap
msgid "used-intervals"
msgstr ""

# type: table
#: lispref/internals.texi:340
msgid ""
"The number of intervals in use.  Intervals are an internal data structure "
"used for representing text properties."
msgstr ""

# type: item
#: lispref/internals.texi:341
#, no-wrap
msgid "free-intervals"
msgstr ""

# type: table
#: lispref/internals.texi:344
msgid ""
"The number of intervals for which space has been obtained from the operating "
"system, but that are not currently being used."
msgstr ""

# type: item
#: lispref/internals.texi:345
#, no-wrap
msgid "used-strings"
msgstr ""

# type: table
#: lispref/internals.texi:347
msgid "The number of strings in use."
msgstr ""

# type: item
#: lispref/internals.texi:348
#, no-wrap
msgid "free-strings"
msgstr ""

# type: table
#: lispref/internals.texi:353
msgid ""
"The number of string headers for which the space was obtained from the "
"operating system, but which are currently not in use.  (A string object "
"consists of a header and the storage for the string text itself; the latter "
"is only allocated when the string is created.)"
msgstr ""

# type: deffn
#: lispref/internals.texi:358
msgid ""
"If there was overflow in pure space (see the previous section), @code"
"{garbage-collect} returns @code{nil}, because a real garbage collection can "
"not be done in this situation."
msgstr ""

# type: defopt
#: lispref/internals.texi:360
#, no-wrap
msgid "garbage-collection-messages"
msgstr "garbage-collection-messages"

# type: defopt
#: lispref/internals.texi:364
msgid ""
"If this variable is non-@code{nil}, Emacs displays a message at the "
"beginning and end of garbage collection.  The default value is @code{nil}, "
"meaning there are no such messages."
msgstr ""

# type: defvar
#: lispref/internals.texi:366
#, no-wrap
msgid "post-gc-hook"
msgstr "post-gc-hook"

# type: defvar
#: lispref/internals.texi:370
msgid ""
"This is a normal hook that is run at the end of garbage collection.  Garbage "
"collection is inhibited while the hook functions run, so be careful writing "
"them."
msgstr ""

# type: defopt
#: lispref/internals.texi:372
#, no-wrap
msgid "gc-cons-threshold"
msgstr "gc-cons-threshold"

# type: defopt
#: lispref/internals.texi:381
msgid ""
"The value of this variable is the number of bytes of storage that must be "
"allocated for Lisp objects after one garbage collection in order to trigger "
"another garbage collection.  A cons cell counts as eight bytes, a string as "
"one byte per character plus a few bytes of overhead, and so on; space "
"allocated to the contents of buffers does not count.  Note that the "
"subsequent garbage collection does not happen immediately when the threshold "
"is exhausted, but only the next time the Lisp evaluator is called."
msgstr ""

# type: defopt
#: lispref/internals.texi:387
msgid ""
"The initial threshold value is 400,000.  If you specify a larger value, "
"garbage collection will happen less often.  This reduces the amount of time "
"spent garbage collecting, but increases total memory use.  You may want to "
"do this when running a program that creates lots of Lisp data."
msgstr ""

# type: defopt
#: lispref/internals.texi:392
msgid ""
"You can make collections more frequent by specifying a smaller value, down "
"to 10,000.  A value less than 10,000 will remain in effect only until the "
"subsequent garbage collection, at which time @code{garbage-collect} will set "
"the threshold back to 10,000."
msgstr ""

# type: defopt
#: lispref/internals.texi:394
#, no-wrap
msgid "gc-cons-percentage"
msgstr "gc-cons-percentage"

# type: defopt
#: lispref/internals.texi:399
msgid ""
"The value of this variable specifies the amount of consing before a garbage "
"collection occurs, as a fraction of the current heap size.  This criterion "
"and @code{gc-cons-threshold} apply in parallel, and garbage collection "
"occurs only when both criteria are satisfied."
msgstr ""

# type: defopt
#: lispref/internals.texi:403
msgid ""
"As the heap size increases, the time to perform a garbage collection "
"increases.  Thus, it can be desirable to do them less frequently in "
"proportion."
msgstr ""

# type: Plain text
#: lispref/internals.texi:409
msgid ""
"The value returned by @code{garbage-collect} describes the amount of memory "
"used by Lisp data, broken down by data type.  By contrast, the function @code"
"{memory-limit} provides information on the total amount of memory Emacs is "
"currently using."
msgstr ""

# type: defun
#: lispref/internals.texi:411
#, no-wrap
msgid "memory-limit"
msgstr "memory-limit"

# type: defun
#: lispref/internals.texi:415
msgid ""
"This function returns the address of the last byte Emacs has allocated, "
"divided by 1024.  We divide the value by 1024 to make sure it fits in a Lisp "
"integer."
msgstr ""

# type: defun
#: lispref/internals.texi:418
msgid ""
"You can use this to get a general idea of how your actions affect the memory "
"usage."
msgstr ""

# type: defvar
#: lispref/internals.texi:420
#, no-wrap
msgid "memory-full"
msgstr "memory-full"

# type: defvar
#: lispref/internals.texi:423
msgid ""
"This variable is @code{t} if Emacs is close to out of memory for Lisp "
"objects, and @code{nil} otherwise."
msgstr ""

# type: defun
#: lispref/internals.texi:425
#, no-wrap
msgid "memory-use-counts"
msgstr "memory-use-counts"

# type: defun
#: lispref/internals.texi:429
msgid ""
"This returns a list of numbers that count the number of objects created in "
"this Emacs session.  Each of these counters increments for a certain kind of "
"object.  See the documentation string for details."
msgstr ""

# type: defvar
#: lispref/internals.texi:431
#, no-wrap
msgid "gcs-done"
msgstr "gcs-done"

# type: defvar
#: lispref/internals.texi:434
msgid ""
"This variable contains the total number of garbage collections done so far "
"in this Emacs session."
msgstr ""

# type: defvar
#: lispref/internals.texi:436
#, no-wrap
msgid "gc-elapsed"
msgstr "gc-elapsed"

# type: defvar
#: lispref/internals.texi:440
msgid ""
"This variable contains the total number of seconds of elapsed time during "
"garbage collection so far in this Emacs session, as a floating point number."
msgstr ""

# type: cindex
#: lispref/internals.texi:444
#, no-wrap
msgid "memory usage"
msgstr ""

# type: Plain text
#: lispref/internals.texi:452
msgid ""
"These functions and variables give information about the total amount of "
"memory allocation that Emacs has done, broken down by data type.  Note the "
"difference between these and the values returned by @code{(garbage-"
"collect)}; those count objects that currently exist, but these count the "
"number or size of all allocations, including those for objects that have "
"since been freed."
msgstr ""

# type: defvar
#: lispref/internals.texi:453
#, no-wrap
msgid "cons-cells-consed"
msgstr "cons-cells-consed"

# type: defvar
#: lispref/internals.texi:456
msgid ""
"The total number of cons cells that have been allocated so far in this Emacs "
"session."
msgstr ""

# type: defvar
#: lispref/internals.texi:458
#, no-wrap
msgid "floats-consed"
msgstr "floats-consed"

# type: defvar
#: lispref/internals.texi:461
msgid ""
"The total number of floats that have been allocated so far in this Emacs "
"session."
msgstr ""

# type: defvar
#: lispref/internals.texi:463
#, no-wrap
msgid "vector-cells-consed"
msgstr "vector-cells-consed"

# type: defvar
#: lispref/internals.texi:466
msgid ""
"The total number of vector cells that have been allocated so far in this "
"Emacs session."
msgstr ""

# type: defvar
#: lispref/internals.texi:468
#, no-wrap
msgid "symbols-consed"
msgstr "symbols-consed"

# type: defvar
#: lispref/internals.texi:471
msgid ""
"The total number of symbols that have been allocated so far in this Emacs "
"session."
msgstr ""

# type: defvar
#: lispref/internals.texi:473
#, no-wrap
msgid "string-chars-consed"
msgstr "string-chars-consed"

# type: defvar
#: lispref/internals.texi:476
msgid ""
"The total number of string characters that have been allocated so far in "
"this Emacs session."
msgstr ""

# type: defvar
#: lispref/internals.texi:478
#, no-wrap
msgid "misc-objects-consed"
msgstr "misc-objects-consed"

# type: defvar
#: lispref/internals.texi:482
msgid ""
"The total number of miscellaneous objects that have been allocated so far in "
"this Emacs session.  These include markers and overlays, plus certain "
"objects not visible to users."
msgstr ""

# type: defvar
#: lispref/internals.texi:484
#, no-wrap
msgid "intervals-consed"
msgstr "intervals-consed"

# type: defvar
#: lispref/internals.texi:487
msgid ""
"The total number of intervals that have been allocated so far in this Emacs "
"session."
msgstr ""

# type: defvar
#: lispref/internals.texi:489
#, no-wrap
msgid "strings-consed"
msgstr "strings-consed"

# type: defvar
#: lispref/internals.texi:492
msgid ""
"The total number of strings that have been allocated so far in this Emacs "
"session."
msgstr ""

# type: cindex
#: lispref/internals.texi:496
#, no-wrap
msgid "primitive function internals"
msgstr ""

# type: cindex
#: lispref/internals.texi:497
#, no-wrap
msgid "writing Emacs primitives"
msgstr ""

# type: Plain text
#: lispref/internals.texi:503
msgid ""
"Lisp primitives are Lisp functions implemented in C.  The details of "
"interfacing the C function so that Lisp can call it are handled by a few C "
"macros.  The only way to really understand how to write new C code is to "
"read the source, but we can explain some things here."
msgstr ""

# type: Plain text
#: lispref/internals.texi:507
msgid ""
"An example of a special form is the definition of @code{or}, from @file{eval."
"c}.  (An ordinary function would have the same general appearance.)"
msgstr ""

# type: cindex
#: lispref/internals.texi:508
#, no-wrap
msgid "garbage collection protection"
msgstr ""

# type: group
#: lispref/internals.texi:515
#, no-wrap
msgid ""
"DEFUN (\"or\", For, Sor, 0, UNEVALLED, 0,\n"
"  doc: /* Eval args until one of them yields non-nil, then return that\n"
"value. The remaining args are not evalled at all.\n"
"If all args return nil, return nil.\n"
msgstr ""

# type: group
#: lispref/internals.texi:523
#, no-wrap
msgid ""
"usage: (or CONDITIONS ...)  */)\n"
"  (args)\n"
"     Lisp_Object args;\n"
"@{\n"
"  register Lisp_Object val = Qnil;\n"
"  struct gcpro gcpro1;\n"
msgstr ""

# type: group
#: lispref/internals.texi:527
#, no-wrap
msgid "  GCPRO1 (args);\n"
msgstr ""

# type: group
#: lispref/internals.texi:537
#, no-wrap
msgid ""
"  while (CONSP (args))\n"
"    @{\n"
"      val = Feval (XCAR (args));\n"
"      if (!NILP (val))\n"
"        break;\n"
"      args = XCDR (args);\n"
"    @}\n"
msgstr ""

# type: group
#: lispref/internals.texi:543
#, no-wrap
msgid ""
"  UNGCPRO;\n"
"  return val;\n"
"@}\n"
msgstr ""

# type: cindex
#: lispref/internals.texi:546
#, no-wrap
msgid "@code{DEFUN}, C macro to define Lisp primitives"
msgstr ""

# type: Plain text
#: lispref/internals.texi:549
msgid ""
"Let's start with a precise explanation of the arguments to the @code{DEFUN} "
"macro.  Here is a template for them:"
msgstr ""

# type: example
#: lispref/internals.texi:552
#, no-wrap
msgid "DEFUN (@var{lname}, @var{fname}, @var{sname}, @var{min}, @var{max}, @var{interactive}, @var{doc})\n"
msgstr ""

# type: item
#: lispref/internals.texi:555
#, no-wrap
msgid "lname"
msgstr ""

# type: table
#: lispref/internals.texi:558
msgid ""
"This is the name of the Lisp symbol to define as the function name; in the "
"example above, it is @code{or}."
msgstr ""

# type: item
#: lispref/internals.texi:559
#, no-wrap
msgid "fname"
msgstr ""

# type: table
#: lispref/internals.texi:568
msgid ""
"This is the C function name for this function.  This is the name that is "
"used in C code for calling the function.  The name is, by convention, @samp"
"{F} prepended to the Lisp name, with all dashes (@samp{-}) in the Lisp name "
"changed to underscores.  Thus, to call this function from C code, call @code"
"{For}.  Remember that the arguments must be of type @code{Lisp_Object}; "
"various macros and functions for creating values of type @code{Lisp_Object} "
"are declared in the file @file{lisp.h}."
msgstr ""

# type: item
#: lispref/internals.texi:569
#, no-wrap
msgid "sname"
msgstr ""

# type: table
#: lispref/internals.texi:576
msgid ""
"This is a C variable name to use for a structure that holds the data for the "
"subr object that represents the function in Lisp.  This structure conveys "
"the Lisp symbol name to the initialization routine that will create the "
"symbol and store the subr object as its definition.  By convention, this "
"name is always @var{fname} with @samp{F} replaced with @samp{S}."
msgstr ""

# type: item
#: lispref/internals.texi:577
#, no-wrap
msgid "min"
msgstr ""

# type: table
#: lispref/internals.texi:580
msgid ""
"This is the minimum number of arguments that the function requires.  The "
"function @code{or} allows a minimum of zero arguments."
msgstr ""

# type: item
#: lispref/internals.texi:581
#, no-wrap
msgid "max"
msgstr ""

# type: table
#: lispref/internals.texi:589
msgid ""
"This is the maximum number of arguments that the function accepts, if there "
"is a fixed maximum.  Alternatively, it can be @code{UNEVALLED}, indicating a "
"special form that receives unevaluated arguments, or @code{MANY}, indicating "
"an unlimited number of evaluated arguments (the equivalent of @code"
"{&rest}).  Both @code{UNEVALLED} and @code{MANY} are macros.  If @var{max} "
"is a number, it may not be less than @var{min} and it may not be greater "
"than eight."
msgstr ""

# type: table
#: lispref/internals.texi:596
msgid ""
"This is an interactive specification, a string such as might be used as the "
"argument of @code{interactive} in a Lisp function.  In the case of @code"
"{or}, it is 0 (a null pointer), indicating that @code{or} cannot be called "
"interactively.  A value of @code{\"\"} indicates a function that should "
"receive no arguments when called interactively."
msgstr ""

# type: item
#: lispref/internals.texi:597
#, no-wrap
msgid "doc"
msgstr ""

# type: table
#: lispref/internals.texi:604
msgid ""
"This is the documentation string.  It uses C comment syntax rather than C "
"string syntax because comment syntax requires nothing special to include "
"multiple lines.  The @samp{doc:} identifies the comment that follows as the "
"documentation string.  The @samp{/*} and @samp{*/} delimiters that begin and "
"end the comment are not part of the documentation string."
msgstr ""

# type: table
#: lispref/internals.texi:611
msgid ""
"If the last line of the documentation string begins with the keyword @samp"
"{usage:}, the rest of the line is treated as the argument list for "
"documentation purposes.  This way, you can use different argument names in "
"the documentation string from the ones used in the C code.  @samp{usage:} is "
"required if the function has an unlimited number of arguments."
msgstr ""

# type: table
#: lispref/internals.texi:615
msgid ""
"All the usual rules for documentation strings in Lisp code (@pxref"
"{Documentation Tips}) apply to C code documentation strings too."
msgstr ""

# type: Plain text
#: lispref/internals.texi:626
msgid ""
"After the call to the @code{DEFUN} macro, you must write the argument name "
"list that every C function must have, followed by ordinary C declarations "
"for the arguments.  For a function with a fixed maximum number of arguments, "
"declare a C argument for each Lisp argument, and give them all type @code"
"{Lisp_Object}.  When a Lisp function has no upper limit on the number of "
"arguments, its implementation in C actually receives exactly two arguments: "
"the first is the number of Lisp arguments, and the second is the address of "
"a block containing their values.  They have types @code{int} and @w{@code"
"{Lisp_Object *}}."
msgstr ""

# type: cindex
#: lispref/internals.texi:627
#, no-wrap
msgid "@code{GCPRO} and @code{UNGCPRO}"
msgstr ""

# type: cindex
#: lispref/internals.texi:628
#, no-wrap
msgid "protect C variables from garbage collection"
msgstr ""

# type: Plain text
#: lispref/internals.texi:637
msgid ""
"Within the function @code{For} itself, note the use of the macros @code"
"{GCPRO1} and @code{UNGCPRO}.  @code{GCPRO1} is used to ``protect'' a "
"variable from garbage collection---to inform the garbage collector that it "
"must look in that variable and regard its contents as an accessible object.  "
"GC protection is necessary whenever you call @code{Feval} or anything that "
"can directly or indirectly call @code{Feval}.  At such a time, any Lisp "
"object that this function may refer to again must be protected somehow."
msgstr ""

# type: Plain text
#: lispref/internals.texi:647
msgid ""
"It suffices to ensure that at least one pointer to each object is GC-"
"protected; that way, the object cannot be recycled, so all pointers to it "
"remain valid.  Thus, a particular local variable can do without protection "
"if it is certain that the object it points to will be preserved by some "
"other pointer (such as another local variable which has a @code{GCPRO})"
"@footnote{Formerly, strings were a special exception; in older Emacs "
"versions, every local variable that might point to a string needed a @code"
"{GCPRO}.}.  Otherwise, the local variable needs a @code{GCPRO}."
msgstr ""

# type: Plain text
#: lispref/internals.texi:656
msgid ""
"The macro @code{GCPRO1} protects just one local variable.  If you want to "
"protect two variables, use @code{GCPRO2} instead; repeating @code{GCPRO1} "
"will not work.  Macros @code{GCPRO3}, @code{GCPRO4}, @code{GCPRO5}, and @code"
"{GCPRO6} also exist.  All these macros implicitly use local variables such "
"as @code{gcpro1}; you must declare these explicitly, with type @code{struct "
"gcpro}.  Thus, if you use @code{GCPRO2}, you must declare @code{gcpro1} and "
"@code{gcpro2}.  Alas, we can't explain all the tricky details here."
msgstr ""

# type: Plain text
#: lispref/internals.texi:660
msgid ""
"@code{UNGCPRO} cancels the protection of the variables that are protected in "
"the current function.  It is necessary to do this explicitly."
msgstr ""

# type: Plain text
#: lispref/internals.texi:668
msgid ""
"Built-in functions that take a variable number of arguments actually accept "
"two arguments at the C level: the number of Lisp arguments, and a @code"
"{Lisp_Object *} pointer to a C vector containing those Lisp arguments.  This "
"C vector may be part of a Lisp vector, but it need not be.  The "
"responsibility for using @code{GCPRO} to protect the Lisp arguments from GC "
"if necessary rests with the caller in this case, since the caller allocated "
"or found the storage for them."
msgstr ""

# type: Plain text
#: lispref/internals.texi:674
msgid ""
"You must not use C initializers for static or global variables unless the "
"variables are never written once Emacs is dumped.  These variables with "
"initializers are allocated in an area of memory that becomes read-only (on "
"certain operating systems) as a result of dumping Emacs.  @xref{Pure "
"Storage}."
msgstr ""

# type: Plain text
#: lispref/internals.texi:681
msgid ""
"Do not use static variables within functions---place all static variables at "
"top level in the file.  This is necessary because Emacs on some operating "
"systems defines the keyword @code{static} as a null macro.  (This definition "
"is used because those systems put all variables declared static in a place "
"that becomes read-only after dumping, whether they have initializers or not.)"
msgstr ""

# type: cindex
#: lispref/internals.texi:682
#, no-wrap
msgid "@code{defsubr}, Lisp symbol for a primitive"
msgstr ""

# type: Plain text
#: lispref/internals.texi:687
msgid ""
"Defining the C function is not enough to make a Lisp primitive available; "
"you must also create the Lisp symbol for the primitive and store a suitable "
"subr object in its function cell.  The code looks like this:"
msgstr ""

# type: example
#: lispref/internals.texi:690
#, no-wrap
msgid "defsubr (&@var{subr-structure-name});\n"
msgstr ""

# type: Plain text
#: lispref/internals.texi:695
msgid ""
"Here @var{subr-structure-name} is the name you used as the third argument to "
"@code{DEFUN}."
msgstr ""

# type: Plain text
#: lispref/internals.texi:704
msgid ""
"If you add a new primitive to a file that already has Lisp primitives "
"defined in it, find the function (near the end of the file) named @code"
"{syms_of_@var{something}}, and add the call to @code{defsubr} there.  If the "
"file doesn't have this function, or if you create a new file, add to it a "
"@code{syms_of_@var{filename}} (e.g., @code{syms_of_myfile}).  Then find the "
"spot in @file{emacs.c} where all of these functions are called, and add a "
"call to @code{syms_of_@var{filename}} there."
msgstr ""

# type: anchor{#1}
#: lispref/internals.texi:706
msgid "Defining Lisp variables in C"
msgstr ""

# type: defvar
#: lispref/internals.texi:706 lispref/variables.texi:1894
#, no-wrap
msgid "byte-boolean-vars"
msgstr ""

# type: cindex
#: lispref/internals.texi:707
#, no-wrap
msgid "defining Lisp variables in C"
msgstr ""

# type: cindex
#: lispref/internals.texi:708
#, no-wrap
msgid "@code{DEFVAR_INT}, @code{DEFVAR_LISP}, @code{DEFVAR_BOOL}"
msgstr ""

# type: Plain text
#: lispref/internals.texi:718
msgid ""
"The function @code{syms_of_@var{filename}} is also the place to define any C "
"variables that are to be visible as Lisp variables.  @code{DEFVAR_LISP} "
"makes a C variable of type @code{Lisp_Object} visible in Lisp.  @code"
"{DEFVAR_INT} makes a C variable of type @code{int} visible in Lisp with a "
"value that is always an integer.  @code{DEFVAR_BOOL} makes a C variable of "
"type @code{int} visible in Lisp with a value that is either @code{t} or @code"
"{nil}.  Note that variables defined with @code{DEFVAR_BOOL} are "
"automatically added to the list @code{byte-boolean-vars} used by the byte "
"compiler."
msgstr ""

# type: cindex
#: lispref/internals.texi:719
#, no-wrap
msgid "@code{staticpro}, protection from GC"
msgstr ""

# type: Plain text
#: lispref/internals.texi:723
msgid ""
"If you define a file-scope C variable of type @code{Lisp_Object}, you must "
"protect it from garbage-collection by calling @code{staticpro} in @code"
"{syms_of_@var{filename}}, like this:"
msgstr ""

# type: example
#: lispref/internals.texi:726
#, no-wrap
msgid "staticpro (&@var{variable});\n"
msgstr ""

# type: Plain text
#: lispref/internals.texi:731
msgid ""
"Here is another example function, with more complicated arguments.  This "
"comes from the code in @file{window.c}, and it demonstrates the use of "
"macros and functions to manipulate Lisp objects."
msgstr ""

# type: group
#: lispref/internals.texi:740
#, no-wrap
msgid ""
"DEFUN (\"coordinates-in-window-p\", Fcoordinates_in_window_p,\n"
"  Scoordinates_in_window_p, 2, 2,\n"
"  \"xSpecify coordinate pair: \\nXExpression which evals to window: \",\n"
"  \"Return non-nil if COORDINATES is in WINDOW.\\n\\\n"
"COORDINATES is a cons of the form (X . Y), X and Y being distances\\n\\\n"
"...\n"
msgstr ""

# type: group
#: lispref/internals.texi:748
#, no-wrap
msgid ""
"If they are on the border between WINDOW and its right sibling,\\n\\\n"
"   `vertical-line' is returned.\")\n"
"  (coordinates, window)\n"
"     register Lisp_Object coordinates, window;\n"
"@{\n"
"  int x, y;\n"
msgstr ""

# type: group
#: lispref/internals.texi:755
#, no-wrap
msgid ""
"  CHECK_LIVE_WINDOW (window, 0);\n"
"  CHECK_CONS (coordinates, 1);\n"
"  x = XINT (Fcar (coordinates));\n"
"  y = XINT (Fcdr (coordinates));\n"
msgstr ""

# type: group
#: lispref/internals.texi:762
#, no-wrap
msgid ""
"  switch (coordinates_in_window (XWINDOW (window), &x, &y))\n"
"    @{\n"
"    case 0:\t\t\t/* NOT in window at all. */\n"
"      return Qnil;\n"
msgstr ""

# type: group
#: lispref/internals.texi:767
#, no-wrap
msgid ""
"    case 1:\t\t\t/* In text part of window. */\n"
"      return Fcons (make_number (x), make_number (y));\n"
msgstr ""

# type: group
#: lispref/internals.texi:772
#, no-wrap
msgid ""
"    case 2:\t\t\t/* In mode line of window. */\n"
"      return Qmode_line;\n"
msgstr ""

# type: group
#: lispref/internals.texi:777
#, no-wrap
msgid ""
"    case 3:\t\t\t/* On right border of window.  */\n"
"      return Qvertical_line;\n"
msgstr ""

# type: group
#: lispref/internals.texi:784
#, no-wrap
msgid ""
"    default:\n"
"      abort ();\n"
"    @}\n"
"@}\n"
msgstr ""

# type: Plain text
#: lispref/internals.texi:797
msgid ""
"Note that C code cannot call functions by name unless they are defined in "
"C.  The way to call a function written in Lisp is to use @code{Ffuncall}, "
"which embodies the Lisp function @code{funcall}.  Since the Lisp function "
"@code{funcall} accepts an unlimited number of arguments, in C it takes two: "
"the number of Lisp-level arguments, and a one-dimensional array containing "
"their values.  The first Lisp-level argument is the Lisp function to call, "
"and the rest are the arguments to pass to it.  Since @code{Ffuncall} can "
"call the evaluator, you must protect pointers from garbage collection around "
"the call to @code{Ffuncall}."
msgstr ""

# type: Plain text
#: lispref/internals.texi:801
msgid ""
"The C functions @code{call0}, @code{call1}, @code{call2}, and so on, provide "
"handy ways to call a Lisp function conveniently with a fixed number of "
"arguments.  They work by calling @code{Ffuncall}."
msgstr ""

# type: Plain text
#: lispref/internals.texi:805
msgid ""
"@file{eval.c} is a very good file to look through for examples; @file{lisp."
"h} contains the definitions for some important macros and functions."
msgstr ""

# type: Plain text
#: lispref/internals.texi:810
msgid ""
"If you define a function which is side-effect free, update the code in @file"
"{byte-opt.el} which binds @code{side-effect-free-fns} and @code{side-effect-"
"and-error-free-fns} so that the compiler optimizer knows about it."
msgstr ""

# type: cindex
#: lispref/internals.texi:813
#, no-wrap
msgid "object internals"
msgstr ""

# type: Plain text
#: lispref/internals.texi:822
msgid ""
"GNU Emacs Lisp manipulates many different types of data.  The actual data "
"are stored in a heap and the only access that programs have to it is through "
"pointers.  Pointers are thirty-two bits wide in most implementations.  "
"Depending on the operating system and type of machine for which you compile "
"Emacs, twenty-nine bits are used to address the object, and the remaining "
"three bits are used for the tag that identifies the object's type."
msgstr ""

# type: Plain text
#: lispref/internals.texi:831
msgid ""
"Because Lisp objects are represented as tagged pointers, it is always "
"possible to determine the Lisp data type of any object.  The C data type "
"@code{Lisp_Object} can hold any Lisp object of any data type.  Ordinary "
"variables have type @code{Lisp_Object}, which means they can hold any type "
"of Lisp value; you can determine the actual data type only at run time.  The "
"same is true for function arguments; if you want a function to accept only a "
"certain type of argument, you must check the type explicitly using a "
"suitable predicate (@pxref{Type Predicates})."
msgstr ""

# type: cindex
#: lispref/internals.texi:831
#, no-wrap
msgid "type checking internals"
msgstr ""

# type: menu
#: lispref/internals.texi:837 lispref/internals.texi:839
#: lispref/internals.texi:840 lispref/vol1.texi:942 lispref/vol2.texi:943
#, no-wrap
msgid "Buffer Internals"
msgstr ""

# type: menu
#: lispref/internals.texi:837 lispref/vol1.texi:942 lispref/vol2.texi:943
msgid "Components of a buffer structure."
msgstr ""

# type: menu
#: lispref/internals.texi:837 lispref/internals.texi:1196
#: lispref/internals.texi:1197 lispref/vol1.texi:942 lispref/vol2.texi:943
#, no-wrap
msgid "Window Internals"
msgstr ""

# type: menu
#: lispref/internals.texi:837 lispref/vol1.texi:942 lispref/vol2.texi:943
msgid "Components of a window structure."
msgstr ""

# type: menu
#: lispref/internals.texi:837 lispref/internals.texi:1423
#: lispref/internals.texi:1424 lispref/vol1.texi:942 lispref/vol2.texi:943
#, no-wrap
msgid "Process Internals"
msgstr ""

# type: menu
#: lispref/internals.texi:837 lispref/vol1.texi:942 lispref/vol2.texi:943
msgid "Components of a process structure."
msgstr ""

# type: cindex
#: lispref/internals.texi:841
#, no-wrap
msgid "internals, of buffer"
msgstr ""

# type: cindex
#: lispref/internals.texi:842
#, no-wrap
msgid "buffer internals"
msgstr ""

# type: Plain text
#: lispref/internals.texi:847
msgid ""
"Buffers contain fields not directly accessible by the Lisp programmer.  We "
"describe them here, naming them by the names used in the C code.  Many are "
"accessible indirectly in Lisp programs via Lisp primitives."
msgstr ""

# type: Plain text
#: lispref/internals.texi:853
msgid ""
"Two structures are used to represent buffers in C.  The @code{buffer_text} "
"structure contains fields describing the text of a buffer; the @code{buffer} "
"structure holds other fields.  In the case of indirect buffers, two or more "
"@code{buffer} structures reference the same @code{buffer_text} structure."
msgstr ""

# type: Plain text
#: lispref/internals.texi:855
msgid "Here is a list of the @code{struct buffer_text} fields:"
msgstr ""

# type: item
#: lispref/internals.texi:857
#, no-wrap
msgid "beg"
msgstr ""

# type: table
#: lispref/internals.texi:859
msgid "This field contains the actual address of the buffer contents."
msgstr ""

# type: item
#: lispref/internals.texi:860
#, no-wrap
msgid "gpt"
msgstr ""

# type: table
#: lispref/internals.texi:863
msgid ""
"This holds the character position of the gap in the buffer.  @xref{Buffer "
"Gap}."
msgstr ""

# type: table
#: lispref/internals.texi:867
msgid ""
"This field contains the character position of the end of the buffer text."
msgstr ""

# type: item
#: lispref/internals.texi:868
#, no-wrap
msgid "gpt_byte"
msgstr ""

# type: table
#: lispref/internals.texi:870
msgid "Contains the byte position of the gap."
msgstr ""

# type: item
#: lispref/internals.texi:871
#, no-wrap
msgid "z_byte"
msgstr ""

# type: table
#: lispref/internals.texi:873
msgid "Holds the byte position of the end of the buffer text."
msgstr ""

# type: item
#: lispref/internals.texi:874
#, no-wrap
msgid "gap_size"
msgstr ""

# type: table
#: lispref/internals.texi:876
msgid "Contains the size of buffer's gap.  @xref{Buffer Gap}."
msgstr ""

# type: item
#: lispref/internals.texi:877
#, no-wrap
msgid "modiff"
msgstr ""

# type: table
#: lispref/internals.texi:880
msgid ""
"This field counts buffer-modification events for this buffer.  It is "
"incremented for each such event, and never otherwise changed."
msgstr ""

# type: item
#: lispref/internals.texi:881
#, no-wrap
msgid "save_modiff"
msgstr ""

# type: table
#: lispref/internals.texi:884
msgid ""
"Contains the previous value of @code{modiff}, as of the last time a buffer "
"was visited or saved in a file."
msgstr ""

# type: item
#: lispref/internals.texi:885
#, no-wrap
msgid "overlay_modiff"
msgstr ""

# type: table
#: lispref/internals.texi:887
msgid "Counts modifications to overlays analogous to @code{modiff}."
msgstr ""

# type: item
#: lispref/internals.texi:888
#, no-wrap
msgid "beg_unchanged"
msgstr ""

# type: table
#: lispref/internals.texi:891
msgid ""
"Holds the number of characters at the start of the text that are known to be "
"unchanged since the last redisplay that finished."
msgstr ""

# type: item
#: lispref/internals.texi:892
#, no-wrap
msgid "end_unchanged"
msgstr ""

# type: table
#: lispref/internals.texi:895
msgid ""
"Holds the number of characters at the end of the text that are known to be "
"unchanged since the last redisplay that finished."
msgstr ""

# type: item
#: lispref/internals.texi:896
#, no-wrap
msgid "unchanged_modified"
msgstr ""

# type: table
#: lispref/internals.texi:901
msgid ""
"Contains the value of @code{modiff} at the time of the last redisplay that "
"finished.  If this value matches @code{modiff}, @code{beg_unchanged} and "
"@code{end_unchanged} contain no useful information."
msgstr ""

# type: item
#: lispref/internals.texi:902
#, no-wrap
msgid "overlay_unchanged_modified"
msgstr ""

# type: table
#: lispref/internals.texi:907
msgid ""
"Contains the value of @code{overlay_modiff} at the time of the last "
"redisplay that finished.  If this value matches @code{overlay_modiff}, @code"
"{beg_unchanged} and @code{end_unchanged} contain no useful information."
msgstr ""

# type: cindex
#: lispref/internals.texi:908 lispref/markers.texi:9
#, no-wrap
msgid "markers"
msgstr ""

# type: table
#: lispref/internals.texi:912
msgid ""
"The markers that refer to this buffer.  This is actually a single marker, "
"and successive elements in its marker @code{chain} are the other markers "
"referring to this buffer text."
msgstr ""

# type: cindex
#: lispref/internals.texi:913 lispref/text.texi:3842
#, no-wrap
msgid "intervals"
msgstr ""

# type: table
#: lispref/internals.texi:916
msgid ""
"Contains the interval tree which records the text properties of this buffer."
msgstr ""

# type: Plain text
#: lispref/internals.texi:919
msgid "The fields of @code{struct buffer} are:"
msgstr ""

# type: item
#: lispref/internals.texi:921 lispref/internals.texi:1230
#, no-wrap
msgid "next"
msgstr ""

# type: table
#: lispref/internals.texi:927
msgid ""
"Points to the next buffer, in the chain of all buffers including killed "
"buffers.  This chain is used only for garbage collection, in order to "
"collect killed buffers properly.  Note that vectors, and most kinds of "
"objects allocated as vectors, are all on one chain, but buffers are on a "
"separate chain of their own."
msgstr ""

# type: item
#: lispref/internals.texi:928
#, no-wrap
msgid "own_text"
msgstr ""

# type: table
#: lispref/internals.texi:932
msgid ""
"This is a @code{struct buffer_text} structure.  In an ordinary buffer, it "
"holds the buffer contents.  In indirect buffers, this field is not used."
msgstr ""

# type: cindex
#: lispref/internals.texi:933 lispref/text.texi:9
#, no-wrap
msgid "text"
msgstr ""

# type: table
#: lispref/internals.texi:938
msgid ""
"This points to the @code{buffer_text} structure that is used for this "
"buffer.  In an ordinary buffer, this is the @code{own_text} field above.  In "
"an indirect buffer, this is the @code{own_text} field of the base buffer."
msgstr ""

# type: item
#: lispref/internals.texi:939
#, no-wrap
msgid "pt"
msgstr ""

# type: table
#: lispref/internals.texi:941
msgid "Contains the character position of point in a buffer."
msgstr ""

# type: item
#: lispref/internals.texi:942
#, no-wrap
msgid "pt_byte"
msgstr ""

# type: table
#: lispref/internals.texi:944
msgid "Contains the byte position of point in a buffer."
msgstr ""

# type: item
#: lispref/internals.texi:945
#, no-wrap
msgid "begv"
msgstr ""

# type: table
#: lispref/internals.texi:948
msgid ""
"This field contains the character position of the beginning of the "
"accessible range of text in the buffer."
msgstr ""

# type: item
#: lispref/internals.texi:949
#, no-wrap
msgid "begv_byte"
msgstr ""

# type: table
#: lispref/internals.texi:952
msgid ""
"This field contains the byte position of the beginning of the accessible "
"range of text in the buffer."
msgstr ""

# type: item
#: lispref/internals.texi:953
#, no-wrap
msgid "zv"
msgstr ""

# type: table
#: lispref/internals.texi:956
msgid ""
"This field contains the character position of the end of the accessible "
"range of text in the buffer."
msgstr ""

# type: item
#: lispref/internals.texi:957
#, no-wrap
msgid "zv_byte"
msgstr ""

# type: table
#: lispref/internals.texi:960
msgid ""
"This field contains the byte position of the end of the accessible range of "
"text in the buffer."
msgstr ""

# type: item
#: lispref/internals.texi:961
#, no-wrap
msgid "base_buffer"
msgstr ""

# type: table
#: lispref/internals.texi:964
msgid ""
"In an indirect buffer, this points to the base buffer.  In an ordinary "
"buffer, it is null."
msgstr ""

# type: item
#: lispref/internals.texi:965
#, no-wrap
msgid "local_var_flags"
msgstr ""

# type: table
#: lispref/internals.texi:971
msgid ""
"This field contains flags indicating that certain variables are local in "
"this buffer.  Such variables are declared in the C code using @code"
"{DEFVAR_PER_BUFFER}, and their buffer-local bindings are stored in fields in "
"the buffer structure itself.  (Some of these fields are described in this "
"table.)"
msgstr ""

# type: item
#: lispref/internals.texi:972
#, no-wrap
msgid "modtime"
msgstr ""

# type: table
#: lispref/internals.texi:977
msgid ""
"This field contains the modification time of the visited file.  It is set "
"when the file is written or read.  Before writing the buffer into a file, "
"this field is compared to the modification time of the file to see if the "
"file has changed on disk.  @xref{Buffer Modification}."
msgstr ""

# type: item
#: lispref/internals.texi:978
#, no-wrap
msgid "auto_save_modified"
msgstr ""

# type: table
#: lispref/internals.texi:980
msgid "This field contains the time when the buffer was last auto-saved."
msgstr ""

# type: item
#: lispref/internals.texi:981
#, no-wrap
msgid "auto_save_failure_time"
msgstr ""

# type: table
#: lispref/internals.texi:984
msgid ""
"The time at which we detected a failure to auto-save, or -1 if we didn't "
"have a failure."
msgstr ""

# type: item
#: lispref/internals.texi:985
#, no-wrap
msgid "last_window_start"
msgstr ""

# type: table
#: lispref/internals.texi:988
msgid ""
"This field contains the @code{window-start} position in the buffer as of the "
"last time the buffer was displayed in a window."
msgstr ""

# type: item
#: lispref/internals.texi:989
#, no-wrap
msgid "clip_changed"
msgstr ""

# type: table
#: lispref/internals.texi:991
msgid "This flag is set when narrowing changes in a buffer."
msgstr ""

# type: item
#: lispref/internals.texi:992
#, no-wrap
msgid "prevent_redisplay_optimizations_p"
msgstr ""

# type: table
#: lispref/internals.texi:995
msgid ""
"this flag indicates that redisplay optimizations should not be used to "
"display this buffer."
msgstr ""

# type: item
#: lispref/internals.texi:996
#, no-wrap
msgid "undo_list"
msgstr ""

# type: table
#: lispref/internals.texi:998
msgid "This field points to the buffer's undo list.  @xref{Undo}."
msgstr ""

# type: table
#: lispref/internals.texi:1002
msgid ""
"The buffer name is a string that names the buffer.  It is guaranteed to be "
"unique.  @xref{Buffer Names}."
msgstr ""

# type: item
#: lispref/internals.texi:1003
#, no-wrap
msgid "filename"
msgstr ""

# type: table
#: lispref/internals.texi:1005
msgid "The name of the file visited in this buffer, or @code{nil}."
msgstr ""

# type: table
#: lispref/internals.texi:1008
msgid "The directory for expanding relative file names."
msgstr ""

# type: item
#: lispref/internals.texi:1009
#, no-wrap
msgid "save_length"
msgstr ""

# type: table
#: lispref/internals.texi:1013
msgid ""
"Length of the file this buffer is visiting, when last read or saved.  This "
"and other fields concerned with saving are not kept in the @code"
"{buffer_text} structure because indirect buffers are never saved."
msgstr ""

# type: item
#: lispref/internals.texi:1014
#, no-wrap
msgid "auto_save_file_name"
msgstr ""

# type: table
#: lispref/internals.texi:1017
msgid ""
"File name used for auto-saving this buffer.  This is not in the @code"
"{buffer_text} because it's not used in indirect buffers at all."
msgstr ""

# type: item
#: lispref/internals.texi:1018
#, no-wrap
msgid "read_only"
msgstr ""

# type: table
#: lispref/internals.texi:1020
msgid "Non-@code{nil} means this buffer is read-only."
msgstr ""

# type: item
#: lispref/internals.texi:1021 lispref/internals.texi:1455
#, no-wrap
msgid "mark"
msgstr ""

# type: table
#: lispref/internals.texi:1024
msgid ""
"This field contains the mark for the buffer.  The mark is a marker, hence it "
"is also included on the list @code{markers}.  @xref{The Mark}."
msgstr ""

# type: item
#: lispref/internals.texi:1025
#, no-wrap
msgid "local_var_alist"
msgstr ""

# type: table
#: lispref/internals.texi:1031
msgid ""
"This field contains the association list describing the buffer-local "
"variable bindings of this buffer, not including the built-in buffer-local "
"bindings that have special slots in the buffer object.  (Those slots are "
"omitted from this table.)  @xref{Buffer-Local Variables}."
msgstr ""

# type: item
#: lispref/internals.texi:1032
#, no-wrap
msgid "major_mode"
msgstr ""

# type: table
#: lispref/internals.texi:1034
msgid "Symbol naming the major mode of this buffer, e.g., @code{lisp-mode}."
msgstr ""

# type: item
#: lispref/internals.texi:1035
#, no-wrap
msgid "mode_name"
msgstr ""

# type: table
#: lispref/internals.texi:1037
msgid "Pretty name of major mode, e.g., @code{\"Lisp\"}."
msgstr ""

# type: item
#: lispref/internals.texi:1038
#, no-wrap
msgid "mode_line_format"
msgstr ""

# type: table
#: lispref/internals.texi:1041
msgid ""
"Mode line element that controls the format of the mode line.  If this is "
"@code{nil}, no mode line will be displayed."
msgstr ""

# type: item
#: lispref/internals.texi:1042
#, no-wrap
msgid "header_line_format"
msgstr ""

# type: table
#: lispref/internals.texi:1045
msgid ""
"This field is analogous to @code{mode_line_format} for the mode line "
"displayed at the top of windows."
msgstr ""

# type: table
#: lispref/internals.texi:1048
msgid "This field holds the buffer's local keymap.  @xref{Keymaps}."
msgstr ""

# type: item
#: lispref/internals.texi:1049
#, no-wrap
msgid "abbrev_table"
msgstr ""

# type: table
#: lispref/internals.texi:1051
msgid "This buffer's local abbrevs."
msgstr ""

# type: item
#: lispref/internals.texi:1052
#, no-wrap
msgid "syntax_table"
msgstr ""

# type: table
#: lispref/internals.texi:1054
msgid ""
"This field contains the syntax table for the buffer.  @xref{Syntax Tables}."
msgstr ""

# type: item
#: lispref/internals.texi:1055
#, no-wrap
msgid "category_table"
msgstr ""

# type: table
#: lispref/internals.texi:1057
msgid "This field contains the category table for the buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1058
#, no-wrap
msgid "case_fold_search"
msgstr ""

# type: table
#: lispref/internals.texi:1060
msgid "The value of @code{case-fold-search} in this buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1061
#, no-wrap
msgid "tab_width"
msgstr ""

# type: table
#: lispref/internals.texi:1063
msgid "The value of @code{tab-width} in this buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1064
#, no-wrap
msgid "fill_column"
msgstr ""

# type: table
#: lispref/internals.texi:1066
msgid "The value of @code{fill-column} in this buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1067
#, no-wrap
msgid "left_margin"
msgstr ""

# type: table
#: lispref/internals.texi:1069
msgid "The value of @code{left-margin} in this buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1070
#, no-wrap
msgid "auto_fill_function"
msgstr ""

# type: table
#: lispref/internals.texi:1072
msgid "The value of @code{auto-fill-function} in this buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1073
#, no-wrap
msgid "downcase_table"
msgstr ""

# type: table
#: lispref/internals.texi:1076
msgid ""
"This field contains the conversion table for converting text to lower case.  "
"@xref{Case Tables}."
msgstr ""

# type: item
#: lispref/internals.texi:1077
#, no-wrap
msgid "upcase_table"
msgstr ""

# type: table
#: lispref/internals.texi:1080
msgid ""
"This field contains the conversion table for converting text to upper case.  "
"@xref{Case Tables}."
msgstr ""

# type: item
#: lispref/internals.texi:1081
#, no-wrap
msgid "case_canon_table"
msgstr ""

# type: table
#: lispref/internals.texi:1084
msgid ""
"This field contains the conversion table for canonicalizing text for case-"
"folding search.  @xref{Case Tables}."
msgstr ""

# type: item
#: lispref/internals.texi:1085
#, no-wrap
msgid "case_eqv_table"
msgstr ""

# type: table
#: lispref/internals.texi:1088
msgid ""
"This field contains the equivalence table for case-folding search.  @xref"
"{Case Tables}."
msgstr ""

# type: item
#: lispref/internals.texi:1089
#, no-wrap
msgid "truncate_lines"
msgstr ""

# type: table
#: lispref/internals.texi:1091
msgid "The value of @code{truncate-lines} in this buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1092
#, no-wrap
msgid "ctl_arrow"
msgstr ""

# type: table
#: lispref/internals.texi:1094
msgid "The value of @code{ctl-arrow} in this buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1095
#, no-wrap
msgid "selective_display"
msgstr ""

# type: table
#: lispref/internals.texi:1097
msgid "The value of @code{selective-display} in this buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1098
#, no-wrap
msgid "selective_display_ellipsis"
msgstr ""

# type: table
#: lispref/internals.texi:1100
msgid "The value of @code{selective-display-ellipsis} in this buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1101
#, no-wrap
msgid "minor_modes"
msgstr ""

# type: table
#: lispref/internals.texi:1103
msgid "An alist of the minor modes of this buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1104
#, no-wrap
msgid "overwrite_mode"
msgstr ""

# type: table
#: lispref/internals.texi:1106
msgid "The value of @code{overwrite_mode} in this buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1107
#, no-wrap
msgid "abbrev_mode"
msgstr ""

# type: table
#: lispref/internals.texi:1109
msgid "The value of @code{abbrev-mode} in this buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1110 lispref/internals.texi:1393
#, no-wrap
msgid "display_table"
msgstr ""

# type: table
#: lispref/internals.texi:1113
msgid ""
"This field contains the buffer's display table, or @code{nil} if it doesn't "
"have one.  @xref{Display Tables}."
msgstr ""

# type: item
#: lispref/internals.texi:1114
#, no-wrap
msgid "save_modified"
msgstr ""

# type: table
#: lispref/internals.texi:1117
msgid ""
"This field contains the time when the buffer was last saved, as an integer.  "
"@xref{Buffer Modification}."
msgstr ""

# type: item
#: lispref/internals.texi:1118
#, no-wrap
msgid "mark_active"
msgstr ""

# type: table
#: lispref/internals.texi:1120
msgid "This field is non-@code{nil} if the buffer's mark is active."
msgstr ""

# type: item
#: lispref/internals.texi:1121
#, no-wrap
msgid "overlays_before"
msgstr ""

# type: table
#: lispref/internals.texi:1125
msgid ""
"This field holds a list of the overlays in this buffer that end at or before "
"the current overlay center position.  They are sorted in order of decreasing "
"end position."
msgstr ""

# type: item
#: lispref/internals.texi:1126
#, no-wrap
msgid "overlays_after"
msgstr ""

# type: table
#: lispref/internals.texi:1130
msgid ""
"This field holds a list of the overlays in this buffer that end after the "
"current overlay center position.  They are sorted in order of increasing "
"beginning position."
msgstr ""

# type: item
#: lispref/internals.texi:1131
#, no-wrap
msgid "overlay_center"
msgstr ""

# type: table
#: lispref/internals.texi:1133
msgid "This field holds the current overlay center position.  @xref{Overlays}."
msgstr ""

# type: item
#: lispref/internals.texi:1134
#, no-wrap
msgid "enable_multibyte_characters"
msgstr ""

# type: table
#: lispref/internals.texi:1137
msgid ""
"This field holds the buffer's local value of @code{enable-multibyte-"
"characters}---either @code{t} or @code{nil}."
msgstr ""

# type: item
#: lispref/internals.texi:1138
#, no-wrap
msgid "buffer_file_coding_system"
msgstr ""

# type: table
#: lispref/internals.texi:1140
msgid "The value of @code{buffer-file-coding-system} in this buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1141
#, no-wrap
msgid "file_format"
msgstr ""

# type: table
#: lispref/internals.texi:1143
msgid "The value of @code{buffer-file-format} in this buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1144
#, no-wrap
msgid "auto_save_file_format"
msgstr ""

# type: table
#: lispref/internals.texi:1146
msgid "The value of @code{buffer-auto-save-file-format} in this buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1147
#, no-wrap
msgid "pt_marker"
msgstr ""

# type: table
#: lispref/internals.texi:1151
msgid ""
"In an indirect buffer, or a buffer that is the base of an indirect buffer, "
"this holds a marker that records point for this buffer when the buffer is "
"not current."
msgstr ""

# type: item
#: lispref/internals.texi:1152
#, no-wrap
msgid "begv_marker"
msgstr ""

# type: table
#: lispref/internals.texi:1156
msgid ""
"In an indirect buffer, or a buffer that is the base of an indirect buffer, "
"this holds a marker that records @code{begv} for this buffer when the buffer "
"is not current."
msgstr ""

# type: item
#: lispref/internals.texi:1157
#, no-wrap
msgid "zv_marker"
msgstr ""

# type: table
#: lispref/internals.texi:1161
msgid ""
"In an indirect buffer, or a buffer that is the base of an indirect buffer, "
"this holds a marker that records @code{zv} for this buffer when the buffer "
"is not current."
msgstr ""

# type: item
#: lispref/internals.texi:1162
#, no-wrap
msgid "file_truename"
msgstr ""

# type: table
#: lispref/internals.texi:1164
msgid "The truename of the visited file, or @code{nil}."
msgstr ""

# type: item
#: lispref/internals.texi:1165
#, no-wrap
msgid "invisibility_spec"
msgstr ""

# type: table
#: lispref/internals.texi:1167
msgid "The value of @code{buffer-invisibility-spec} in this buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1168
#, no-wrap
msgid "last_selected_window"
msgstr ""

# type: table
#: lispref/internals.texi:1171
msgid ""
"This is the last window that was selected with this buffer in it, or @code"
"{nil} if that window no longer displays this buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1172
#, no-wrap
msgid "display_count"
msgstr ""

# type: table
#: lispref/internals.texi:1174
msgid ""
"This field is incremented each time the buffer is displayed in a window."
msgstr ""

# type: item
#: lispref/internals.texi:1175 lispref/internals.texi:1316
#, no-wrap
msgid "left_margin_width"
msgstr ""

# type: table
#: lispref/internals.texi:1177
msgid "The value of @code{left-margin-width} in this buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1178 lispref/internals.texi:1321
#, no-wrap
msgid "right_margin_width"
msgstr ""

# type: table
#: lispref/internals.texi:1180
msgid "The value of @code{right-margin-width} in this buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1181
#, no-wrap
msgid "indicate_empty_lines"
msgstr ""

# type: table
#: lispref/internals.texi:1184
msgid ""
"Non-@code{nil} means indicate empty lines (lines with no text) with a small "
"bitmap in the fringe, when using a window system that can do it."
msgstr ""

# type: item
#: lispref/internals.texi:1185
#, no-wrap
msgid "display_time"
msgstr ""

# type: table
#: lispref/internals.texi:1188
msgid ""
"This holds a time stamp that is updated each time this buffer is displayed "
"in a window."
msgstr ""

# type: item
#: lispref/internals.texi:1189
#, no-wrap
msgid "scroll_up_aggressively"
msgstr ""

# type: table
#: lispref/internals.texi:1191
msgid "The value of @code{scroll-up-aggressively} in this buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1192
#, no-wrap
msgid "scroll_down_aggressively"
msgstr ""

# type: table
#: lispref/internals.texi:1194
msgid "The value of @code{scroll-down-aggressively} in this buffer."
msgstr ""

# type: cindex
#: lispref/internals.texi:1198
#, no-wrap
msgid "internals, of window"
msgstr ""

# type: cindex
#: lispref/internals.texi:1199
#, no-wrap
msgid "window internals"
msgstr ""

# type: Plain text
#: lispref/internals.texi:1202
msgid "Windows have the following accessible fields:"
msgstr ""

# type: table
#: lispref/internals.texi:1206
msgid "The frame that this window is on."
msgstr ""

# type: item
#: lispref/internals.texi:1207
#, no-wrap
msgid "mini_p"
msgstr ""

# type: table
#: lispref/internals.texi:1209
msgid "Non-@code{nil} if this window is a minibuffer window."
msgstr ""

# type: item
#: lispref/internals.texi:1210
#, no-wrap
msgid "parent"
msgstr ""

# type: table
#: lispref/internals.texi:1214
msgid ""
"Internally, Emacs arranges windows in a tree; each group of siblings has a "
"parent window whose area includes all the siblings.  This field points to a "
"window's parent."
msgstr ""

# type: table
#: lispref/internals.texi:1219
msgid ""
"Parent windows do not display buffers, and play little role in display "
"except to shape their child windows.  Emacs Lisp programs usually have no "
"access to the parent windows; they operate on the windows at the leaves of "
"the tree, which actually display buffers."
msgstr ""

# type: table
#: lispref/internals.texi:1221
msgid "The following four fields also describe the window tree structure."
msgstr ""

# type: item
#: lispref/internals.texi:1222
#, no-wrap
msgid "hchild"
msgstr ""

# type: table
#: lispref/internals.texi:1225
msgid ""
"In a window subdivided horizontally by child windows, the leftmost child.  "
"Otherwise, @code{nil}."
msgstr ""

# type: item
#: lispref/internals.texi:1226
#, no-wrap
msgid "vchild"
msgstr ""

# type: table
#: lispref/internals.texi:1229
msgid ""
"In a window subdivided vertically by child windows, the topmost child.  "
"Otherwise, @code{nil}."
msgstr ""

# type: table
#: lispref/internals.texi:1233
msgid ""
"The next sibling of this window.  It is @code{nil} in a window that is the "
"rightmost or bottommost of a group of siblings."
msgstr ""

# type: item
#: lispref/internals.texi:1234
#, no-wrap
msgid "prev"
msgstr ""

# type: table
#: lispref/internals.texi:1237
msgid ""
"The previous sibling of this window.  It is @code{nil} in a window that is "
"the leftmost or topmost of a group of siblings."
msgstr ""

# type: table
#: lispref/internals.texi:1241
msgid ""
"This is the left-hand edge of the window, measured in columns.  (The "
"leftmost column on the screen is @w{column 0}.)"
msgstr ""

# type: table
#: lispref/internals.texi:1245
msgid ""
"This is the top edge of the window, measured in lines.  (The top line on the "
"screen is @w{line 0}.)"
msgstr ""

# type: table
#: lispref/internals.texi:1248
msgid "The height of the window, measured in lines."
msgstr ""

# type: table
#: lispref/internals.texi:1253
msgid ""
"The width of the window, measured in columns.  This width includes the "
"scroll bar and fringes, and/or the separator line on the right of the window "
"(if any)."
msgstr ""

# type: table
#: lispref/internals.texi:1257
msgid ""
"The buffer that the window is displaying.  This may change often during the "
"life of the window."
msgstr ""

# type: item
#: lispref/internals.texi:1258
#, no-wrap
msgid "start"
msgstr ""

# type: table
#: lispref/internals.texi:1261
msgid ""
"The position in the buffer that is the first character to be displayed in "
"the window."
msgstr ""

# type: item
#: lispref/internals.texi:1262
#, no-wrap
msgid "pointm"
msgstr ""

# type: cindex
#: lispref/internals.texi:1263
#, no-wrap
msgid "window point internals"
msgstr ""

# type: table
#: lispref/internals.texi:1266
msgid ""
"This is the value of point in the current buffer when this window is "
"selected; when it is not selected, it retains its previous value."
msgstr ""

# type: item
#: lispref/internals.texi:1267
#, no-wrap
msgid "force_start"
msgstr ""

# type: table
#: lispref/internals.texi:1273
msgid ""
"If this flag is non-@code{nil}, it says that the window has been scrolled "
"explicitly by the Lisp program.  This affects what the next redisplay does "
"if point is off the screen: instead of scrolling the window to show the text "
"around point, it moves point to a location that is on the screen."
msgstr ""

# type: item
#: lispref/internals.texi:1274
#, no-wrap
msgid "frozen_window_start_p"
msgstr ""

# type: table
#: lispref/internals.texi:1278
msgid ""
"This field is set temporarily to 1 to indicate to redisplay that @code"
"{start} of this window should not be changed, even if point gets invisible."
msgstr ""

# type: item
#: lispref/internals.texi:1279
#, no-wrap
msgid "start_at_line_beg"
msgstr ""

# type: table
#: lispref/internals.texi:1282
msgid ""
"Non-@code{nil} means current value of @code{start} was the beginning of a "
"line when it was chosen."
msgstr ""

# type: item
#: lispref/internals.texi:1283
#, no-wrap
msgid "too_small_ok"
msgstr ""

# type: table
#: lispref/internals.texi:1285
msgid ""
"Non-@code{nil} means don't delete this window for becoming ``too small.''"
msgstr ""

# type: item
#: lispref/internals.texi:1286
#, no-wrap
msgid "height_fixed_p"
msgstr ""

# type: table
#: lispref/internals.texi:1289
msgid ""
"This field is temporarily set to 1 to fix the height of the selected window "
"when the echo area is resized."
msgstr ""

# type: item
#: lispref/internals.texi:1290
#, no-wrap
msgid "use_time"
msgstr ""

# type: table
#: lispref/internals.texi:1293
msgid ""
"This is the last time that the window was selected.  The function @code{get-"
"lru-window} uses this field."
msgstr ""

# type: item
#: lispref/internals.texi:1294
#, no-wrap
msgid "sequence_number"
msgstr ""

# type: table
#: lispref/internals.texi:1296
msgid "A unique number assigned to this window when it was created."
msgstr ""

# type: item
#: lispref/internals.texi:1297
#, no-wrap
msgid "last_modified"
msgstr ""

# type: table
#: lispref/internals.texi:1300
msgid ""
"The @code{modiff} field of the window's buffer, as of the last time a "
"redisplay completed in this window."
msgstr ""

# type: item
#: lispref/internals.texi:1301
#, no-wrap
msgid "last_overlay_modified"
msgstr ""

# type: table
#: lispref/internals.texi:1304
msgid ""
"The @code{overlay_modiff} field of the window's buffer, as of the last time "
"a redisplay completed in this window."
msgstr ""

# type: item
#: lispref/internals.texi:1305
#, no-wrap
msgid "last_point"
msgstr ""

# type: table
#: lispref/internals.texi:1308
msgid ""
"The buffer's value of point, as of the last time a redisplay completed in "
"this window."
msgstr ""

# type: item
#: lispref/internals.texi:1309
#, no-wrap
msgid "last_had_star"
msgstr ""

# type: table
#: lispref/internals.texi:1312
msgid ""
"A non-@code{nil} value means the window's buffer was ``modified'' when the "
"window was last updated."
msgstr ""

# type: item
#: lispref/internals.texi:1313
#, no-wrap
msgid "vertical_scroll_bar"
msgstr ""

# type: table
#: lispref/internals.texi:1315
msgid "This window's vertical scroll bar."
msgstr ""

# type: table
#: lispref/internals.texi:1320
msgid ""
"The width of the left margin in this window, or @code{nil} not to specify it "
"(in which case the buffer's value of @code{left-margin-width} is used."
msgstr ""

# type: table
#: lispref/internals.texi:1323
msgid "Likewise for the right margin."
msgstr ""

# type: item
#: lispref/internals.texi:1325
#, no-wrap
msgid "last_mark_x"
msgstr ""

# type: item
#: lispref/internals.texi:1326
#, no-wrap
msgid "last_mark_y"
msgstr ""

# type: ignore
#: lispref/internals.texi:1328
#, no-wrap
msgid "???Not used.\n"
msgstr ""

# type: item
#: lispref/internals.texi:1330
#, no-wrap
msgid "window_end_pos"
msgstr ""

# type: table
#: lispref/internals.texi:1334
msgid ""
"This is computed as @code{z} minus the buffer position of the last glyph in "
"the current matrix of the window.  The value is only valid if @code"
"{window_end_valid} is not @code{nil}."
msgstr ""

# type: item
#: lispref/internals.texi:1335
#, no-wrap
msgid "window_end_bytepos"
msgstr ""

# type: table
#: lispref/internals.texi:1337
msgid "The byte position corresponding to @code{window_end_pos}."
msgstr ""

# type: item
#: lispref/internals.texi:1338
#, no-wrap
msgid "window_end_vpos"
msgstr ""

# type: table
#: lispref/internals.texi:1341
msgid ""
"The window-relative vertical position of the line containing @code"
"{window_end_pos}."
msgstr ""

# type: item
#: lispref/internals.texi:1342
#, no-wrap
msgid "window_end_valid"
msgstr ""

# type: table
#: lispref/internals.texi:1347
msgid ""
"This field is set to a non-@code{nil} value if @code{window_end_pos} is "
"truly valid.  This is @code{nil} if nontrivial redisplay is preempted since "
"in that case the display that @code{window_end_pos} was computed for did not "
"get onto the screen."
msgstr ""

# type: item
#: lispref/internals.texi:1348
#, no-wrap
msgid "redisplay_end_trigger"
msgstr ""

# type: table
#: lispref/internals.texi:1351
msgid ""
"If redisplay in this window goes beyond this buffer position, it runs the "
"@code{redisplay-end-trigger-hook}."
msgstr ""

# type: item
#: lispref/internals.texi:1353
#, no-wrap
msgid "orig_height"
msgstr ""

# type: item
#: lispref/internals.texi:1354
#, no-wrap
msgid "orig_top"
msgstr ""

# type: ignore
#: lispref/internals.texi:1356
#, no-wrap
msgid "??? Are temporary storage areas.\n"
msgstr ""

# type: cindex
#: lispref/internals.texi:1358 lispref/text.texi:3149
#: lispref/windows.texi:1198
#, no-wrap
msgid "cursor"
msgstr ""

# type: table
#: lispref/internals.texi:1360
msgid "A structure describing where the cursor is in this window."
msgstr ""

# type: item
#: lispref/internals.texi:1361
#, no-wrap
msgid "last_cursor"
msgstr ""

# type: table
#: lispref/internals.texi:1363
msgid "The value of @code{cursor} as of the last redisplay that finished."
msgstr ""

# type: item
#: lispref/internals.texi:1364
#, no-wrap
msgid "phys_cursor"
msgstr ""

# type: table
#: lispref/internals.texi:1366
msgid "A structure describing where the cursor of this window physically is."
msgstr ""

# type: item
#: lispref/internals.texi:1367
#, no-wrap
msgid "phys_cursor_type"
msgstr ""

# type: table
#: lispref/internals.texi:1369
msgid "The type of cursor that was last displayed on this window."
msgstr ""

# type: item
#: lispref/internals.texi:1370
#, no-wrap
msgid "phys_cursor_on_p"
msgstr ""

# type: table
#: lispref/internals.texi:1372
msgid "This field is non-zero if the cursor is physically on."
msgstr ""

# type: item
#: lispref/internals.texi:1373
#, no-wrap
msgid "cursor_off_p"
msgstr ""

# type: table
#: lispref/internals.texi:1375
msgid "Non-zero means the cursor in this window is logically on."
msgstr ""

# type: item
#: lispref/internals.texi:1376
#, no-wrap
msgid "last_cursor_off_p"
msgstr ""

# type: table
#: lispref/internals.texi:1379
msgid ""
"This field contains the value of @code{cursor_off_p} as of the time of the "
"last redisplay."
msgstr ""

# type: item
#: lispref/internals.texi:1380
#, no-wrap
msgid "must_be_updated_p"
msgstr ""

# type: table
#: lispref/internals.texi:1382
msgid "This is set to 1 during redisplay when this window must be updated."
msgstr ""

# type: item
#: lispref/internals.texi:1383
#, no-wrap
msgid "hscroll"
msgstr ""

# type: table
#: lispref/internals.texi:1386
msgid ""
"This is the number of columns that the display in the window is scrolled "
"horizontally to the left.  Normally, this is 0."
msgstr ""

# type: item
#: lispref/internals.texi:1387
#, no-wrap
msgid "vscroll"
msgstr ""

# type: table
#: lispref/internals.texi:1389
msgid "Vertical scroll amount, in pixels.  Normally, this is 0."
msgstr ""

# type: item
#: lispref/internals.texi:1390
#, no-wrap
msgid "dedicated"
msgstr ""

# type: table
#: lispref/internals.texi:1392
msgid "Non-@code{nil} if this window is dedicated to its buffer."
msgstr ""

# type: table
#: lispref/internals.texi:1395
msgid "The window's display table, or @code{nil} if none is specified for it."
msgstr ""

# type: item
#: lispref/internals.texi:1396
#, no-wrap
msgid "update_mode_line"
msgstr ""

# type: table
#: lispref/internals.texi:1398
msgid "Non-@code{nil} means this window's mode line needs to be updated."
msgstr ""

# type: item
#: lispref/internals.texi:1399
#, no-wrap
msgid "base_line_number"
msgstr ""

# type: table
#: lispref/internals.texi:1402
msgid ""
"The line number of a certain position in the buffer, or @code{nil}.  This is "
"used for displaying the line number of point in the mode line."
msgstr ""

# type: item
#: lispref/internals.texi:1403
#, no-wrap
msgid "base_line_pos"
msgstr ""

# type: table
#: lispref/internals.texi:1406
msgid ""
"The position in the buffer for which the line number is known, or @code{nil} "
"meaning none is known."
msgstr ""

# type: item
#: lispref/internals.texi:1407
#, no-wrap
msgid "region_showing"
msgstr ""

# type: table
#: lispref/internals.texi:1411
msgid ""
"If the region (or part of it) is highlighted in this window, this field "
"holds the mark position that made one end of that region.  Otherwise, this "
"field is @code{nil}."
msgstr ""

# type: item
#: lispref/internals.texi:1412
#, no-wrap
msgid "column_number_displayed"
msgstr ""

# type: table
#: lispref/internals.texi:1415
msgid ""
"The column number currently displayed in this window's mode line, or @code"
"{nil} if column numbers are not being displayed."
msgstr ""

# type: item
#: lispref/internals.texi:1416
#, no-wrap
msgid "current_matrix"
msgstr ""

# type: table
#: lispref/internals.texi:1418
msgid "A glyph matrix describing the current display of this window."
msgstr ""

# type: item
#: lispref/internals.texi:1419
#, no-wrap
msgid "desired_matrix"
msgstr ""

# type: table
#: lispref/internals.texi:1421
msgid "A glyph matrix describing the desired display of this window."
msgstr ""

# type: cindex
#: lispref/internals.texi:1425
#, no-wrap
msgid "internals, of process"
msgstr ""

# type: cindex
#: lispref/internals.texi:1426
#, no-wrap
msgid "process internals"
msgstr ""

# type: Plain text
#: lispref/internals.texi:1429
msgid "The fields of a process are:"
msgstr ""

# type: table
#: lispref/internals.texi:1433
msgid "A string, the name of the process."
msgstr ""

# type: table
#: lispref/internals.texi:1437
msgid ""
"A list containing the command arguments that were used to start this process."
msgstr ""

# type: item
#: lispref/internals.texi:1438
#, no-wrap
msgid "filter"
msgstr ""

# type: table
#: lispref/internals.texi:1441
msgid ""
"A function used to accept output from the process instead of a buffer, or "
"@code{nil}."
msgstr ""

# type: item
#: lispref/internals.texi:1442
#, no-wrap
msgid "sentinel"
msgstr ""

# type: table
#: lispref/internals.texi:1444
msgid ""
"A function called whenever the process receives a signal, or @code{nil}."
msgstr ""

# type: table
#: lispref/internals.texi:1447
msgid "The associated buffer of the process."
msgstr ""

# type: item
#: lispref/internals.texi:1448
#, no-wrap
msgid "pid"
msgstr ""

# type: table
#: lispref/internals.texi:1450
msgid "An integer, the operating system's process @acronym{ID}."
msgstr ""

# type: item
#: lispref/internals.texi:1451
#, no-wrap
msgid "childp"
msgstr ""

# type: table
#: lispref/internals.texi:1454
msgid ""
"A flag, non-@code{nil} if this is really a child process.  It is @code{nil} "
"for a network connection."
msgstr ""

# type: table
#: lispref/internals.texi:1459
msgid ""
"A marker indicating the position of the end of the last output from this "
"process inserted into the buffer.  This is often but not always the end of "
"the buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1460
#, no-wrap
msgid "kill_without_query"
msgstr ""

# type: table
#: lispref/internals.texi:1463
msgid ""
"If this is non-@code{nil}, killing Emacs while this process is still running "
"does not ask for confirmation about killing the process."
msgstr ""

# type: item
#: lispref/internals.texi:1464
#, no-wrap
msgid "raw_status_low"
msgstr ""

# type: itemx
#: lispref/internals.texi:1465
#, no-wrap
msgid "raw_status_high"
msgstr ""

# type: table
#: lispref/internals.texi:1468
msgid ""
"These two fields record 16 bits each of the process status returned by the "
"@code{wait} system call."
msgstr ""

# type: item
#: lispref/internals.texi:1469
#, no-wrap
msgid "status"
msgstr ""

# type: table
#: lispref/internals.texi:1471
msgid "The process status, as @code{process-status} should return it."
msgstr ""

# type: item
#: lispref/internals.texi:1472
#, no-wrap
msgid "tick"
msgstr ""

# type: itemx
#: lispref/internals.texi:1473
#, no-wrap
msgid "update_tick"
msgstr ""

# type: table
#: lispref/internals.texi:1477
msgid ""
"If these two fields are not equal, a change in the status of the process "
"needs to be reported, either by running the sentinel or by inserting a "
"message in the process buffer."
msgstr ""

# type: item
#: lispref/internals.texi:1478
#, no-wrap
msgid "pty_flag"
msgstr ""

# type: table
#: lispref/internals.texi:1481
msgid ""
"Non-@code{nil} if communication with the subprocess uses a @acronym{PTY}; "
"@code{nil} if it uses a pipe."
msgstr ""

# type: item
#: lispref/internals.texi:1482
#, no-wrap
msgid "infd"
msgstr ""

# type: table
#: lispref/internals.texi:1484
msgid "The file descriptor for input from the process."
msgstr ""

# type: item
#: lispref/internals.texi:1485
#, no-wrap
msgid "outfd"
msgstr ""

# type: table
#: lispref/internals.texi:1487
msgid "The file descriptor for output to the process."
msgstr ""

# type: item
#: lispref/internals.texi:1488
#, no-wrap
msgid "subtty"
msgstr ""

# type: table
#: lispref/internals.texi:1492
msgid ""
"The file descriptor for the terminal that the subprocess is using.  (On some "
"systems, there is no need to record this, so the value is @code{nil}.)"
msgstr ""

# type: item
#: lispref/internals.texi:1493
#, no-wrap
msgid "tty_name"
msgstr ""

# type: table
#: lispref/internals.texi:1496
msgid ""
"The name of the terminal that the subprocess is using, or @code{nil} if it "
"is using pipes."
msgstr ""

# type: item
#: lispref/internals.texi:1497
#, no-wrap
msgid "decode_coding_system"
msgstr ""

# type: table
#: lispref/internals.texi:1499
msgid "Coding-system for decoding the input from this process."
msgstr ""

# type: item
#: lispref/internals.texi:1500
#, no-wrap
msgid "decoding_buf"
msgstr ""

# type: table
#: lispref/internals.texi:1502
msgid "A working buffer for decoding."
msgstr ""

# type: item
#: lispref/internals.texi:1503
#, no-wrap
msgid "decoding_carryover"
msgstr ""

# type: table
#: lispref/internals.texi:1505
msgid "Size of carryover in decoding."
msgstr ""

# type: item
#: lispref/internals.texi:1506
#, no-wrap
msgid "encode_coding_system"
msgstr ""

# type: table
#: lispref/internals.texi:1508
msgid "Coding-system for encoding the output to this process."
msgstr ""

# type: item
#: lispref/internals.texi:1509
#, no-wrap
msgid "encoding_buf"
msgstr ""

# type: table
#: lispref/internals.texi:1511
msgid "A working buffer for encoding."
msgstr ""

# type: item
#: lispref/internals.texi:1512
#, no-wrap
msgid "encoding_carryover"
msgstr ""

# type: table
#: lispref/internals.texi:1514
msgid "Size of carryover in encoding."
msgstr ""

# type: item
#: lispref/internals.texi:1515
#, no-wrap
msgid "inherit_coding_system_flag"
msgstr ""

# type: table
#: lispref/internals.texi:1518
msgid ""
"Flag to set @code{coding-system} of the process buffer from the coding "
"system used to decode process output."
msgstr ""

# type: ignore
#: lispref/internals.texi:1522
#, no-wrap
msgid "   arch-tag: 4b2c33bc-d7e4-43f5-bc20-27c0db52a53e\n"
msgstr "   arch-tag: 4b2c33bc-d7e4-43f5-bc20-27c0db52a53e\n"

# type: Plain text
#: lispref/intro.texi:32
msgid ""
"This manual attempts to be a full description of Emacs Lisp.  For a "
"beginner's introduction to Emacs Lisp, see @cite{An Introduction to Emacs "
"Lisp Programming}, by Bob Chassell, also published by the Free Software "
"Foundation.  This manual presumes considerable familiarity with the use of "
"Emacs for editing; see @cite{The GNU Emacs Manual} for this basic "
"information."
msgstr ""
"Ce manuel essaye d'être une description complète d'Emacs Lisp. Pour la\n"
"présentation à un débutant d'Emacs Lisp, voir @cite{An Introduction to\n"
"Emacs Lisp Programming}, par Bob Chassell, également édité par la Free\n"
"Software Foundation. Ce manuel suppose la connaissance parfaite de\n"
"l'utilisation d'Emacs pour l'édition ; voir @cite{The GNU Emacs\n"
"Manual} pour cette information de base."

# type: Plain text
#: lispref/intro.texi:37
msgid ""
"Generally speaking, the earlier chapters describe features of Emacs Lisp "
"that have counterparts in many programming languages, and later chapters "
"describe features that are peculiar to Emacs Lisp or relate specifically to "
"editing."
msgstr ""
"D'une manière générale, les premiers chapitres décrivent les\n"
"caractéristiques d'Emacs Lisp qui ont des équivalences dans beaucoup\n"
"de langages de programmation, et les chapitres postérieurs décrivent\n"
"les caractéristiques qui sont particulières au Emacs Lisp ou se\n"
"relient spécifiquement à l'édition."

# type: Plain text
#: lispref/intro.texi:40
msgid ""
"This is edition @value{VERSION} of the GNU Emacs Lisp Reference Manual, "
"corresponding to Emacs version @value{EMACSVER}."
msgstr ""
"C'est l'édition @value{VERSION} du manuel de référence de GNU Emacs\n"
"Lisp, correspondant à la version d'Emacs @value{EMACSVER}."

# type: section
#: lispref/intro.texi:47 lispref/intro.texi:49 lispref/intro.texi:50
#: lispref/vol1.texi:286 lispref/vol2.texi:287
#, no-wrap
msgid "Caveats"
msgstr "Avertissements"

# type: menu
#: lispref/intro.texi:47 lispref/vol1.texi:286 lispref/vol2.texi:287
msgid "Flaws and a request for help."
msgstr "Erreurs et demande d'aide."

# type: section
#: lispref/intro.texi:47 lispref/intro.texi:103 lispref/intro.texi:104
#: lispref/vol1.texi:286 lispref/vol2.texi:287
#, no-wrap
msgid "Lisp History"
msgstr "L'histoire de Lisp"

# type: menu
#: lispref/intro.texi:47 lispref/vol1.texi:286 lispref/vol2.texi:287
msgid "Emacs Lisp is descended from Maclisp."
msgstr "Emacs Lisp descend de Maclisp."

# type: section
#: lispref/intro.texi:47 lispref/intro.texi:139 lispref/intro.texi:140
#: lispref/vol1.texi:286 lispref/vol1.texi:288 lispref/vol2.texi:287
#: lispref/vol2.texi:289
#, no-wrap
msgid "Conventions"
msgstr "Conventions"

# type: menu
#: lispref/intro.texi:47 lispref/vol1.texi:286 lispref/vol2.texi:287
msgid "How the manual is formatted."
msgstr "Comment le manuel est composé."

# type: node
#: lispref/intro.texi:47 lispref/intro.texi:476
#, no-wrap
msgid "Version Info"
msgstr "Information de version"

# type: menu
#: lispref/intro.texi:47
msgid "Which Emacs version is running?"
msgstr "Quelle version d'Emacs fonctionne?"

# type: section
#: lispref/intro.texi:47 lispref/intro.texi:534 lispref/intro.texi:535
#: lispref/vol1.texi:286 lispref/vol2.texi:287
#, no-wrap
msgid "Acknowledgements"
msgstr "Remerciements"

# type: menu
#: lispref/intro.texi:47 lispref/vol1.texi:286 lispref/vol2.texi:287
msgid "The authors, editors, and sponsors of this manual."
msgstr "Les auteurs, les rédacteurs, et les commanditaires de ce manuel."

# type: cindex
#: lispref/intro.texi:51
#, no-wrap
msgid "bugs in this manual"
msgstr ""

# type: Plain text
#: lispref/intro.texi:59
msgid ""
"This manual has gone through numerous drafts.  It is nearly complete but not "
"flawless.  There are a few topics that are not covered, either because we "
"consider them secondary (such as most of the individual modes) or because "
"they are yet to be written.  Because we are not able to deal with them "
"completely, we have left out several parts intentionally.  This includes "
"most information about usage on VMS."
msgstr ""
"Ce manuel est passé par de nombreuses ébauches. Il est presque complet\n"
"mais non impeccable. Il y a quelques matières qui ne sont pas\n"
"couvertes parce que nous les considérons secondaires (comme la plupart\n"
"des différents modes) ou parce qu'elles doivent encore être\n"
"écrites. Puisque nous ne pouvons pas les traiter complètement, nous\n"
"avons omis plusieurs parties intentionnellement. Ceci inclut la\n"
"plupart des informations sur l'utilisation de VMS."

# type: Plain text
#: lispref/intro.texi:66
msgid ""
"The manual should be fully correct in what it does cover, and it is "
"therefore open to criticism on anything it says---from specific examples and "
"descriptive text, to the ordering of chapters and sections.  If something is "
"confusing, or you find that you have to look at the sources or experiment to "
"learn something not covered in the manual, then perhaps the manual should be "
"fixed.  Please let us know."
msgstr ""
"Le manuel devrait être entièrement correct dans ce qu'il couvre, et il\n"
"est donc soumis à la critique sur tout ce qu'il indique---des exemples\n"
"spécifiques et du texte descriptif, à l'ordre des chapitres et des\n"
"sections---. Si quelque chose est embrouillé, ou si vous constatez que\n"
"vous devez regarder les sources ou expérimenter pour apprendre quelque\n"
"chose non couvert dans le manuel, alors peut-être faudrait-il\n"
"l'inclure dans le manuel. Merci de nous faire le savoir."

# type: Plain text
#: lispref/intro.texi:76
msgid ""
"As you use this manual, we ask that you mark pages with corrections so you "
"can later look them up and send them to us.  If you think of a simple, real-"
"life example for a function or group of functions, please make an effort to "
"write it up and send it in.  Please reference any comments to the chapter "
"name, section name, and function name, as appropriate, since page numbers "
"and chapter and section numbers will change and we may have trouble finding "
"the text you are talking about.  Also state the number of the edition you "
"are criticizing."
msgstr ""
"Quand vous employez ce manuel, nous vous demandons de marquer\n"
"les pages avec les corrections ainsi vous pouvez plus tard les\n"
"rechercher et nous les envoyer. Si vous pensez à un exemple simple et\n"
"réel pour une fonction ou au groupe de fonctions, merci de faire\n"
"l'effort de l'écrire et de l'envoyer. Veuillez mettre en référence\n"
"tous les commentaires au nom de chapitre, nom de section, et le nom de\n"
"fonction, comme approprié, puisque les numéros de page et les nombres\n"
"de chapitre et de section changeront et nous aurions des problèmes\n"
"pour trouver le texte dont vous parlez. Énoncer en outre le numéro de\n"
"l'édition que vous critiquez."

# type: Plain text
#: lispref/intro.texi:85
msgid ""
"As you use this manual, we ask that you send corrections as soon as you find "
"them.  If you think of a simple, real life example for a function or group "
"of functions, please make an effort to write it up and send it in.  Please "
"reference any comments to the node name and function or variable name, as "
"appropriate.  Also state the number of the edition you are criticizing."
msgstr ""
"Quand vous vous servez de ce manuel, nous vous demandons d'envoyez les\n"
"corrections dès que vous en trouverez. Si vous pensez à un exemple\n"
"simple et réel pour une fonction ou au groupe de fonctions, merci de\n"
"faire l'effort de l'écrire et de l'envoyer. Veuillez mettre en\n"
"référence tous les commentaires du nom du noeud et la fonction ou le\n"
"nom de la variable, comme approprié. Énoncer en outre le numéro de\n"
"l'édition que vous critiquez."

# type: cindex
#: lispref/intro.texi:87
#, no-wrap
msgid "bugs"
msgstr ""

# type: cindex
#: lispref/intro.texi:88
#, no-wrap
msgid "suggestions"
msgstr ""

# type: Plain text
#: lispref/intro.texi:90
msgid "Please mail comments and corrections to"
msgstr "Merci d'envoyer vos commentaires et corrections à"

# type: example
#: lispref/intro.texi:93
#, no-wrap
msgid "bug-lisp-manual@@gnu.org\n"
msgstr "bug-lisp-manual@@gnu.org\n"

# type: Plain text
#: lispref/intro.texi:102
msgid ""
"We let mail to this list accumulate unread until someone decides to apply "
"the corrections.  Months, and sometimes years, go by between updates.  So "
"please attach no significance to the lack of a reply---your mail @emph{will} "
"be acted on in due time.  If you want to contact the Emacs maintainers more "
"quickly, send mail to @code{bug-gnu-emacs@@gnu.org}."
msgstr ""
"Nous laissons le courrier non lu de cette liste s'accumuler\n"
"jusqu'à ce que quelqu'un décide d'appliquer les corrections. Les mois,\n"
"et parfois les années, s'écoulent entre les mises à jour. Veuillez ne\n"
"pas attacher de signification au manque d'une réponse---votre courrier\n"
"@emph{devrait} être pris en compte en temps voulu. Si vous voulez\n"
"contacter la maintenance d'Emacs plus rapidement, envoyer le courrier\n"
"à @code{bug-gnu-emacs@@gnu.org}."

# type: cindex
#: lispref/intro.texi:105
#, no-wrap
msgid "Lisp history"
msgstr ""

# type: Plain text
#: lispref/intro.texi:111
msgid ""
"Lisp (LISt Processing language) was first developed in the late 1950s at the "
"Massachusetts Institute of Technology for research in artificial "
"intelligence.  The great power of the Lisp language makes it ideal for other "
"purposes as well, such as writing editing commands."
msgstr ""
"Lisp (LISt Processing language) a été développé la première fois vers\n"
"la fin des années 50 au Massachusetts Institute of Technology pour la\n"
"recherche en intelligence artificielle. La grande puissance du langage\n"
"Lisp le rend idéal pour d'autres buts aussi bien, comme l'écriture de\n"
"commandes d'édition."

# type: cindex
#: lispref/intro.texi:112
#, no-wrap
msgid "Maclisp"
msgstr "Maclisp"

# type: cindex
#: lispref/intro.texi:113
#, no-wrap
msgid "Common Lisp"
msgstr "Common Lisp"

# type: Plain text
#: lispref/intro.texi:121
msgid ""
"Dozens of Lisp implementations have been built over the years, each with its "
"own idiosyncrasies.  Many of them were inspired by Maclisp, which was "
"written in the 1960s at MIT's Project MAC.  Eventually the implementors of "
"the descendants of Maclisp came together and developed a standard for Lisp "
"systems, called Common Lisp.  In the meantime, Gerry Sussman and Guy Steele "
"at MIT developed a simplified but very powerful dialect of Lisp, called "
"Scheme."
msgstr ""
"Des douzaines de réalisations de Lisp ont été établies au cours des\n"
"années, chacune avec ses propres particularités. Bon nombre d'entre\n"
"elles ont été inspirées par Maclisp, qui a été écrit dans les années\n"
"60 au MIT's Project MAC. Par la suite les programmeurs des descendants\n"
"de Maclisp se sont réunis et ont développé une norme pour des systèmes\n"
"Lisp, appelée Common Lisp. En attendant, Gerry Sussman et Guy Steele\n"
"au MIT ont développé un dialecte simplifié mais très puissant de Lisp,\n"
"appelé Scheme."

# type: Plain text
#: lispref/intro.texi:130
msgid ""
"GNU Emacs Lisp is largely inspired by Maclisp, and a little by Common Lisp.  "
"If you know Common Lisp, you will notice many similarities.  However, many "
"features of Common Lisp have been omitted or simplified in order to reduce "
"the memory requirements of GNU Emacs.  Sometimes the simplifications are so "
"drastic that a Common Lisp user might be very confused.  We will "
"occasionally point out how GNU Emacs Lisp differs from Common Lisp.  If you "
"don't know Common Lisp, don't worry about it; this manual is self-contained."
msgstr ""
"GNU Emacs Lisp est en grande partie inspiré par Maclisp, et par Common\n"
"Lisp. Si vous connaissez le Common Lisp, vous noterez beaucoup de\n"
"similitudes. Cependant, beaucoup de dispositifs de Common Lisp ont été\n"
"omis ou simplifié afin de réduire les conditions de mémoire de GNU\n"
"Emacs. Parfois les simplifications sont si importantes qu'un\n"
"utilisateur Lisp Common pourrait être très dérouté. Nous préciserons\n"
"de temps en temps comment le GNU Emacs Lisp diffère du Common Lisp. Si\n"
"vous ne connaissez pas le Common Lisp, ne vous inquiétez à son sujet;\n"
"ce manuel est indépendant."

# type: pindex
#: lispref/intro.texi:131
#, no-wrap
msgid "cl"
msgstr ""

# type: Plain text
#: lispref/intro.texi:134
msgid ""
"A certain amount of Common Lisp emulation is available via the @file{cl} "
"library.  @inforef{Top, Overview, cl}."
msgstr ""
"Une certaine quantité de programmes Lisp Common est disponible par\n"
"l'intermédiaire de la @file{cl} bibliothèque. @inforef{Top, Overview,\n"
"cl}."

# type: Plain text
#: lispref/intro.texi:138
msgid ""
"Emacs Lisp is not at all influenced by Scheme; but the GNU project has an "
"implementation of Scheme, called Guile.  We use Guile in all new GNU "
"software that calls for extensibility."
msgstr ""
"Emacs Lisp n'est pas du tout influencé par Scheme; mais le projet GNU\n"
"a une implémentation, appelée Guile. Nous employons Guile dans tout\n"
"nouveau logiciel de GNU qui réclame l'extensibilité."

# type: Plain text
#: lispref/intro.texi:144
msgid ""
"This section explains the notational conventions that are used in this "
"manual.  You may want to skip this section and refer back to it later."
msgstr ""
"Cette section explique les conventions d'écriture qui sont employées\n"
"dans ce manuel. Vous pouvez sauter cette section et vous y référer\n"
"plus tard."

# type: subsection
#: lispref/intro.texi:153 lispref/intro.texi:155 lispref/intro.texi:156
#: lispref/vol1.texi:296 lispref/vol2.texi:297
#, no-wrap
msgid "Some Terms"
msgstr "Quelques termes"

# type: menu
#: lispref/intro.texi:153 lispref/vol1.texi:296 lispref/vol2.texi:297
msgid "Explanation of terms we use in this manual."
msgstr "Explication des termes que nous employons en ce manuel."

# type: node
#: lispref/intro.texi:153 lispref/intro.texi:171 lispref/vol1.texi:296
#: lispref/vol2.texi:297
#, no-wrap
msgid "nil and t"
msgstr "nil et t"

# type: menu
#: lispref/intro.texi:153 lispref/vol1.texi:296 lispref/vol2.texi:297
msgid "How the symbols @code{nil} and @code{t} are used."
msgstr "Comment les symboles @code{nil} et @code{t} sont employés."

# type: subsection
#: lispref/intro.texi:153 lispref/intro.texi:220 lispref/intro.texi:221
#: lispref/vol1.texi:296 lispref/vol2.texi:297
#, no-wrap
msgid "Evaluation Notation"
msgstr "Notation d'évaluation"

# type: menu
#: lispref/intro.texi:153 lispref/vol1.texi:296 lispref/vol2.texi:297
msgid "The format we use for examples of evaluation."
msgstr "Le format que nous employons pour des exemples de l'évaluation."

# type: subsection
#: lispref/intro.texi:153 lispref/intro.texi:257 lispref/intro.texi:258
#: lispref/vol1.texi:296 lispref/vol2.texi:297
#, no-wrap
msgid "Printing Notation"
msgstr "Notation d'affichage"

# type: menu
#: lispref/intro.texi:153
msgid "The format we use when examples print text."
msgstr "Le format que nous employons quand les exemples affichent du texte."

# type: subsection
#: lispref/intro.texi:153 lispref/intro.texi:282 lispref/intro.texi:283
#: lispref/vol1.texi:296 lispref/vol2.texi:297
#, no-wrap
msgid "Error Messages"
msgstr "Messages d'erreur"

# type: menu
#: lispref/intro.texi:153 lispref/vol1.texi:296 lispref/vol2.texi:297
msgid "The format we use for examples of errors."
msgstr "Le format que nous employons pour des exemples d'erreurs."

# type: subsection
#: lispref/intro.texi:153 lispref/intro.texi:296 lispref/intro.texi:297
#: lispref/vol1.texi:296 lispref/vol2.texi:297
#, no-wrap
msgid "Buffer Text Notation"
msgstr "Notation des textes de tampon"

# type: menu
#: lispref/intro.texi:153 lispref/vol1.texi:296 lispref/vol2.texi:297
msgid "The format we use for buffer contents in examples."
msgstr "Le format que nous employons pour le contenu de tampons dans les exemples."

# type: subsection
#: lispref/intro.texi:153 lispref/intro.texi:320 lispref/intro.texi:321
#: lispref/vol1.texi:296 lispref/vol1.texi:298 lispref/vol2.texi:297
#: lispref/vol2.texi:299
#, no-wrap
msgid "Format of Descriptions"
msgstr "Format des descriptions"

# type: menu
#: lispref/intro.texi:153 lispref/vol1.texi:296 lispref/vol2.texi:297
msgid "Notation for describing functions, variables, etc."
msgstr "Notation pour décrire des fonctions, des variables, etc."

# type: Plain text
#: lispref/intro.texi:165
msgid ""
"Throughout this manual, the phrases ``the Lisp reader'' and ``the Lisp "
"printer'' refer to those routines in Lisp that convert textual "
"representations of Lisp objects into actual Lisp objects, and vice versa.  "
"@xref{Printed Representation}, for more details.  You, the person reading "
"this manual, are thought of as ``the programmer'' and are addressed as "
"``you.'' ``The user'' is the person who uses Lisp programs, including those "
"you write."
msgstr ""
"Dans tout ce manuel, les expressions ``le lecteur de Lisp'' et\n"
"``l'afficheur de Lisp'' se rapportent à ces routines en Lisp qui\n"
"convertissent les représentations textuelles du Lisp object en objets\n"
"réels de Lisp, et vice-versa. @xref{Printed Representation}, pour plus\n"
"de détails. Vous, la personne lisant ce manuel, êtes considérée comme\n"
"``programmeur'' et êtes nommée en tant que ``vous''.\n"
"``L'utilisateur'' est la personne qui emploie le Lisp des programmes,\n"
"y compris ceux que vous écrivez."

# type: cindex
#: lispref/intro.texi:166
#, no-wrap
msgid "fonts in this manual"
msgstr ""

# type: Plain text
#: lispref/intro.texi:170
msgid ""
"Examples of Lisp code are formatted like this: @code{(list 1 2 3)}.  Names "
"that represent metasyntactic variables, or arguments to a function being "
"described, are formatted like this: @var{first-number}."
msgstr ""
"Des exemples du code de Lisp sont composés comme ceci : @code{(list 1\n"
"2 3)}. Des noms qui représentent des variables, ou des arguments à une\n"
"fonction décrite, sont composés comme ceci : @var{first-number}."

# type: subsection
#: lispref/intro.texi:172
#, no-wrap
msgid "@code{nil} and @code{t}"
msgstr ""

# type: cindex
#: lispref/intro.texi:173
#, no-wrap
msgid "truth value"
msgstr ""

# type: cindex
#: lispref/intro.texi:177
#, no-wrap
msgid "false"
msgstr ""

# type: Plain text
#: lispref/intro.texi:182
msgid ""
"In Lisp, the symbol @code{nil} has three separate meanings: it is a symbol "
"with the name @samp{nil}; it is the logical truth value @var{false}; and it "
"is the empty list---the list of zero elements.  When used as a variable, "
"@code{nil} always has the value @code{nil}."
msgstr ""
"En Lisp, le symbole @code{nil} a trois significations distinctes: il\n"
"est un symbole nommé @samp{nil} ; c'est la vraie valeur logique\n"
"@var{false} ; et c'est la liste vide---la liste de zéro élément. Une\n"
"fois utilisé comme variable, @code{nil} a toujours la valeur\n"
"@code{nil}."

# type: Plain text
#: lispref/intro.texi:189
msgid ""
"As far as the Lisp reader is concerned, @samp{()} and @samp{nil} are "
"identical: they stand for the same object, the symbol @code{nil}.  The "
"different ways of writing the symbol are intended entirely for human "
"readers.  After the Lisp reader has read either @samp{()} or @samp{nil}, "
"there is no way to determine which representation was actually written by "
"the programmer."
msgstr ""
"En ce qui concerne le lecteur Lisp, @samp{()} et @samp{nil} sont\n"
"identiques : ils représentent le même objet, le symbole\n"
"@code{nil}. Les différentes manières d'écrire le symbole sont prévues\n"
"entièrement pour les lecteurs humains. Après que le lecteur Lisp ait\n"
"lu l'un ou l'autre, @samp{()} ou @samp{nil}, il n'y a aucune manière\n"
"de déterminer quelle représentation a été écrite réellement par le\n"
"programmeur."

# type: Plain text
#: lispref/intro.texi:194
msgid ""
"In this manual, we write @code{()} when we wish to emphasize that it means "
"the empty list, and we write @code{nil} when we wish to emphasize that it "
"means the truth value @var{false}.  That is a good convention to use in Lisp "
"programs also."
msgstr ""
"Dans ce manuel, nous écrivons @code{()} quand nous souhaitons\n"
"souligner qu'il signifie la liste vide, et nous écrivons @code{nil}\n"
"quand nous souhaitons souligner qu'il signifie la vraie valeur\n"
"@var{false}. C'est une bonne convention à employer dans des programmes\n"
"de Lisp également."

# type: example
#: lispref/intro.texi:198
#, no-wrap
msgid ""
"(cons 'foo ())                ; @r{Emphasize the empty list}\n"
"(setq foo-flag nil)           ; @r{Emphasize the truth value @var{false}}\n"
msgstr ""

# type: cindex
#: lispref/intro.texi:201
#, no-wrap
msgid "true"
msgstr ""

# type: Plain text
#: lispref/intro.texi:208
msgid ""
"In contexts where a truth value is expected, any non-@code{nil} value is "
"considered to be @var{true}.  However, @code{t} is the preferred way to "
"represent the truth value @var{true}.  When you need to choose a value which "
"represents @var{true}, and there is no other basis for choosing, use @code"
"{t}.  The symbol @code{t} always has the value @code{t}."
msgstr ""
"Dans les contextes où une vraie valeur est prévue, n'importe quelle\n"
"valeur non-@code{nil} est considérée comme @var{true}. Cependant,\n"
"@code{t} est la manière préférée de représenter la vraie valeur\n"
"@var{true}. Quand vous devez choisir une valeur qui représente\n"
"@var{true}, et que vous n'avez aucun autre choix, employer\n"
"@code{t}. Le symbole @code{t} a toujours la valeur @code{t}."

# type: Plain text
#: lispref/intro.texi:214
msgid ""
"In Emacs Lisp, @code{nil} and @code{t} are special symbols that always "
"evaluate to themselves.  This is so that you do not need to quote them to "
"use them as constants in a program.  An attempt to change their values "
"results in a @code{setting-constant} error.  @xref{Constant Variables}."
msgstr ""
"En Emacs Lisp, @code{nil} et @code{t} sont des symboles spéciaux qui\n"
"s'évaluent toujours eux-mêmes. De sorte que vous n'avez pas besoin de\n"
"les citer pour les employer comme constantes dans un programme. Une\n"
"tentative de changer leurs valeurs a comme conséquence une erreur\n"
"@code{setting-constant}. @xref{Constant Variables}."

# type: defun
#: lispref/intro.texi:215
#, no-wrap
msgid "booleanp object"
msgstr ""

# type: Plain text
#: lispref/intro.texi:218
msgid ""
"Return non-nil iff @var{object} is one of the two canonical boolean values: "
"@code{t} or @code{nil}."
msgstr ""
"Retourne non-nil si @var{objet} est une des deux valeurs booléennes\n"
"canoniques : @code{t} ou @code{nil}."

# type: cindex
#: lispref/intro.texi:222
#, no-wrap
msgid "evaluation notation"
msgstr ""

# type: cindex
#: lispref/intro.texi:223
#, no-wrap
msgid "documentation notation"
msgstr ""

# type: cindex
#: lispref/intro.texi:224
#, no-wrap
msgid "notation"
msgstr ""

# type: Plain text
#: lispref/intro.texi:229
msgid ""
"A Lisp expression that you can evaluate is called a @dfn{form}.  Evaluating "
"a form always produces a result, which is a Lisp object.  In the examples in "
"this manual, this is indicated with @samp{@result{}}:"
msgstr ""
"Une expression de Lisp que vous pouvez évaluer s'appelle une\n"
"@dfn{form}. L'évaluation d'un formulaire produit toujours un résultat,\n"
"qui est un objet de Lisp. Dans les exemples en ce manuel, ceci est\n"
"indiqué avec @samp{@result{}} :"

# type: example
#: lispref/intro.texi:233
#, no-wrap
msgid ""
"(car '(1 2))\n"
"     @result{} 1\n"
msgstr ""

# type: Plain text
#: lispref/intro.texi:237
msgid "You can read this as ``@code{(car '(1 2))} evaluates to 1.''"
msgstr ""
"Vous pouvez lire ceci en tant que ``@code{(car '(1 2))} est évalué à\n"
"1.''"

# type: Plain text
#: lispref/intro.texi:242
msgid ""
"When a form is a macro call, it expands into a new form for Lisp to "
"evaluate.  We show the result of the expansion with @samp{@expansion{}}.  We "
"may or may not show the result of the evaluation of the expanded form."
msgstr ""
"Quand un formulaire est appellé par une macro, il augmente d'un\n"
"nouveau formulaire pour que le Lisp l'évalue. Nous montrons le\n"
"résultat de l'expansion avec @samp{@expansion{}}. Nous pouvons ou non\n"
"montrer le résultat de l'évaluation du formulaire augmenté."

# type: example
#: lispref/intro.texi:247
#, no-wrap
msgid ""
"(third '(a b c))\n"
"     @expansion{} (car (cdr (cdr '(a b c))))\n"
"     @result{} c\n"
msgstr ""

# type: Plain text
#: lispref/intro.texi:252
msgid ""
"Sometimes to help describe one form we show another form that produces "
"identical results.  The exact equivalence of two forms is indicated with "
"@samp{@equiv{}}."
msgstr ""
"Parfois pour aider à décrire un formulaire, nous montrons un autre\n"
"formulaire qui produit des résultats identiques. L'équivalence exacte\n"
"de deux formulaires est indiquée avec le @samp{@equiv{}}."

# type: example
#: lispref/intro.texi:255
#, no-wrap
msgid "(make-sparse-keymap) @equiv{} (list 'keymap)\n"
msgstr ""

# type: cindex
#: lispref/intro.texi:259
#, no-wrap
msgid "printing notation"
msgstr ""

# type: Plain text
#: lispref/intro.texi:267
msgid ""
"Many of the examples in this manual print text when they are evaluated.  If "
"you execute example code in a Lisp Interaction buffer (such as the buffer "
"@samp{*scratch*}), the printed text is inserted into the buffer.  If you "
"execute the example by other means (such as by evaluating the function @code"
"{eval-region}), the printed text is displayed in the echo area."
msgstr ""
"Plusieurs des exemples de ce manuel affichent du texte quand ils sont\n"
"évalués. Si vous exécutez le code d'exemple dans un tampon\n"
"d'interaction de Lisp (tel que le tampon @samp{*scratch*}), le texte\n"
"affiché est inséré dans le tampon. Si vous exécutez l'exemple par\n"
"d'autres moyens (comme pour évaluer la fonction @code{eval-région}),\n"
"le texte affiché est montré dans le secteur d'écho."

# type: Plain text
#: lispref/intro.texi:272
msgid ""
"Examples in this manual indicate printed text with @samp{@print{}}, "
"irrespective of where that text goes.  The value returned by evaluating the "
"form (here @code{bar}) follows on a separate line with @samp{@result{}}."
msgstr ""
"Les exemples de ce manuel indiquent le texte affiché avec\n"
"@samp{@print{}}, indépendamment de la destination du texte. La valeur\n"
"retournée par l'évaluation du formulaire (ici @code{bar}) suit sur une\n"
"ligne séparée avec @samp{@result{}}."

# type: group
#: lispref/intro.texi:279
#, no-wrap
msgid ""
"(progn (prin1 'foo) (princ \"\\n\") (prin1 'bar))\n"
"     @print{} foo\n"
"     @print{} bar\n"
"     @result{} bar\n"
msgstr ""

# type: cindex
#: lispref/intro.texi:284
#, no-wrap
msgid "error message notation"
msgstr ""

# type: Plain text
#: lispref/intro.texi:290
msgid ""
"Some examples signal errors.  This normally displays an error message in the "
"echo area.  We show the error message on a line starting with @samp{@error"
"{}}.  Note that @samp{@error{}} itself does not appear in the echo area."
msgstr ""
"Quelques exemples de signal d'erreurs. Ceci montre normalement un\n"
"message d'erreur dans le secteur d'écho. Nous montrons le message\n"
"d'erreur sur une ligne commençant par @samp{@error{}}. Noter que\n"
"@samp{@error{}} lui-même n'apparaît pas dans le secteur d'écho."

# type: example
#: lispref/intro.texi:294
#, no-wrap
msgid ""
"(+ 23 'x)\n"
"@error{} Wrong type argument: number-or-marker-p, x\n"
msgstr ""

# type: cindex
#: lispref/intro.texi:298
#, no-wrap
msgid "buffer text notation"
msgstr ""

# type: Plain text
#: lispref/intro.texi:307
msgid ""
"Some examples describe modifications to the contents of a buffer, by showing "
"the ``before'' and ``after'' versions of the text.  These examples show the "
"contents of the buffer in question between two lines of dashes containing "
"the buffer name.  In addition, @samp{@point{}} indicates the location of "
"point.  (The symbol for point, of course, is not part of the text in the "
"buffer; it indicates the place @emph{between} two characters where point is "
"currently located.)"
msgstr ""
"Quelques exemples décrivent des modifications du contenu d'un tampon,\n"
"en montrant ``l'avant'' et ``l'après'' des versions du texte. Ces\n"
"exemples montrent le contenu du tampon en question entre deux lignes\n"
"de tirets contenant le nom du tampon. En outre, le @samp{@point{}}\n"
"indique l'endroit du point. (Le symbole pour le point, naturellement,\n"
"n'est pas une partie du texte dans le tampon ; il indique l'endroit\n"
"@emph{entre} deux caractères où le point est actuellement localisé.)"

# type: example
#: lispref/intro.texi:312
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the @point{}contents of foo.\n"
"---------- Buffer: foo ----------\n"
"\n"
msgstr ""

# type: example
#: lispref/intro.texi:318
#, no-wrap
msgid ""
"(insert \"changed \")\n"
"     @result{} nil\n"
"---------- Buffer: foo ----------\n"
"This is the changed @point{}contents of foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: cindex
#: lispref/intro.texi:322
#, no-wrap
msgid "description format"
msgstr ""

# type: Plain text
#: lispref/intro.texi:328
msgid ""
"Functions, variables, macros, commands, user options, and special forms are "
"described in this manual in a uniform format.  The first line of a "
"description contains the name of the item followed by its arguments, if any."
msgstr ""
"Des fonctions, les variables, les macros, les commandes, les options\n"
"d'utilisateur, et les formulaires spéciaux sont décrits dans ce manuel\n"
"dans un format uniforme. La première ligne de la description contient\n"
"le nom de l'article suivi de ses arguments, s'il y a."

# type: Plain text
#: lispref/intro.texi:331
msgid ""
"The category---function, variable, or whatever---appears at the beginning of "
"the line."
msgstr ""
"La catégorie---fonction, variable, ou quoi que soit---est\n"
"imprimé à côté de la marge."

# type: Plain text
#: lispref/intro.texi:335
msgid ""
"The category---function, variable, or whatever---is printed next to the "
"right margin."
msgstr ""
"La catégorie---fonction, variable, ou quoi que soit---est\n"
"imprimé à côté de la marge."

# type: Plain text
#: lispref/intro.texi:337
msgid "The description follows on succeeding lines, sometimes with examples."
msgstr "La description suit les lignes réussies, parfois avec des exemples."

# type: subsubsection
#: lispref/intro.texi:344 lispref/intro.texi:346 lispref/intro.texi:347
#: lispref/vol1.texi:301 lispref/vol2.texi:302
#, no-wrap
msgid "A Sample Function Description"
msgstr "Un exemple d'une description de fonction"

# type: menu
#: lispref/intro.texi:344
msgid "A description of an imaginary"
msgstr "Une description d'une imaginaire"

# type: menu
#: lispref/intro.texi:344
msgid "function, @code{foo}."
msgstr "fonction, @code{foo}."

# type: subsubsection
#: lispref/intro.texi:344 lispref/intro.texi:453 lispref/intro.texi:454
#: lispref/vol1.texi:301 lispref/vol2.texi:302
#, no-wrap
msgid "A Sample Variable Description"
msgstr "Un exemple d'une description de variable"

# type: menu
#: lispref/intro.texi:344
msgid "variable,"
msgstr "variable,"

# type: menu
#: lispref/intro.texi:344
msgid "@code{electric-future-map}."
msgstr "@code{electric-future-map}."

# type: cindex
#: lispref/intro.texi:348
#, no-wrap
msgid "function descriptions"
msgstr ""

# type: cindex
#: lispref/intro.texi:349
#, no-wrap
msgid "command descriptions"
msgstr ""

# type: cindex
#: lispref/intro.texi:350
#, no-wrap
msgid "macro descriptions"
msgstr ""

# type: cindex
#: lispref/intro.texi:351
#, no-wrap
msgid "special form descriptions"
msgstr ""

# type: Plain text
#: lispref/intro.texi:357
msgid ""
"In a function description, the name of the function being described appears "
"first.  It is followed on the same line by a list of argument names.  These "
"names are also used in the body of the description, to stand for the values "
"of the arguments."
msgstr ""
"Dans une description de fonction, le nom de la fonction étant décrite\n"
"apparaît d'abord. Il est suivi sur la même ligne d'une liste de noms\n"
"d'argument. Ces noms sont également employés dans le corps de la\n"
"description, pour représenter les valeurs des arguments."

# type: Plain text
#: lispref/intro.texi:362
msgid ""
"The appearance of the keyword @code{&optional} in the argument list "
"indicates that the subsequent arguments may be omitted (omitted arguments "
"default to @code{nil}).  Do not write @code{&optional} when you call the "
"function."
msgstr ""
"L'apparition du mot-clé @code{&optional} dans la liste d'argument\n"
"indique que les arguments suivants peuvent être omis (les arguments\n"
"omis se transfèrent comme @code{nil}). Ne pas écrire @code{&optional}\n"
"quand vous appelez la fonction."

# type: Plain text
#: lispref/intro.texi:368
msgid ""
"The keyword @code{&rest} (which must be followed by a single argument name) "
"indicates that any number of arguments can follow.  The single argument name "
"following @code{&rest} will receive, as its value, a list of all the "
"remaining arguments passed to the function.  Do not write @code{&rest} when "
"you call the function."
msgstr ""
"Le mot-clé @code{&rest} (qui doit être suivi d'un nom d'argument\n"
"simple) indique qu'un certain nombre d'arguments va suivre. Le nom\n"
"d'argument simple suivant @code{&rest} recevra, comme valeur, une\n"
"liste de tous arguments restants à passer à la fonction. Ne pas écrire\n"
"@code{&rest} quand vous appelez la fonction."

# type: Plain text
#: lispref/intro.texi:370
msgid "Here is a description of an imaginary function @code{foo}:"
msgstr "Voici une description de fonction imaginaire @code{foo}:"

# type: defun
#: lispref/intro.texi:371
#, no-wrap
msgid "foo integer1 &optional integer2 &rest integers"
msgstr ""

# type: Plain text
#: lispref/intro.texi:375
msgid ""
"The function @code{foo} subtracts @var{integer1} from @var{integer2}, then "
"adds all the rest of the arguments to the result.  If @var{integer2} is not "
"supplied, then the number 19 is used by default."
msgstr ""
"La fonction @code{foo} soustrait @var{integer1} de @var{integer2},\n"
"puis ajoute tout reste des arguments au résultat. Si @var{integer2}\n"
"n'est pas fourni, alors le numéro 19 est appliqué par défaut."

# type: example
#: lispref/intro.texi:381
#, no-wrap
msgid ""
"(foo 1 5 3 9)\n"
"     @result{} 16\n"
"(foo 5)\n"
"     @result{} 14\n"
msgstr ""

# type: defun
#: lispref/intro.texi:385
msgid "More generally,"
msgstr ""

# type: example
#: lispref/intro.texi:390
#, no-wrap
msgid ""
"(foo @var{w} @var{x} @var{y}@dots{})\n"
"@equiv{}\n"
"(+ (- @var{x} @var{w}) @var{y}@dots{})\n"
msgstr ""

# type: Plain text
#: lispref/intro.texi:402
msgid ""
"Any argument whose name contains the name of a type (e.g., @var{integer}, "
"@var{integer1} or @var{buffer}) is expected to be of that type.  A plural of "
"a type (such as @var{buffers}) often means a list of objects of that type.  "
"Arguments named @var{object} may be of any type.  (@xref{Lisp Data Types}, "
"for a list of Emacs object types.)  Arguments with other sorts of names (e."
"g., @var{new-file}) are discussed specifically in the description of the "
"function.  In some sections, features common to the arguments of several "
"functions are described at the beginning."
msgstr ""
"Tout argument dont le nom contient le nom d'un type (par exemple,\n"
"@var{integer}, @var{integer1} ou @var{buffer}) est prévu pour être de\n"
"ce type. Un pluriel d'un type (tel que @var{buffers}) signifie souvent\n"
"une liste d'objets de ce type. Les arguments appelés @var{object}\n"
"peuvent être de n'importe quel type. (@xref{Lisp Data Types}, pour une\n"
"liste des types d'objet d'Emacs.) Des arguments avec d'autres sortes\n"
"de noms (par exemple, @var{new-file}) sont discutés spécialement dans\n"
"la description de la fonction. Dans quelques sections, des dispositifs\n"
"communs aux arguments de plusieurs fonctions sont décrits du\n"
"commencement."

# type: Plain text
#: lispref/intro.texi:405
msgid ""
"@xref{Lambda Expressions}, for a more complete description of optional and "
"rest arguments."
msgstr ""
"@xref{Lambda Expressions}, pour une description plus complète des\n"
"arguments optionnels et restants."

# type: Plain text
#: lispref/intro.texi:411
msgid ""
"Command, macro, and special form descriptions have the same format, but the "
"word `Function' is replaced by `Command', `Macro', or `Special Form', "
"respectively.  Commands are simply functions that may be called "
"interactively; macros process their arguments differently from functions "
"(the arguments are not evaluated), but are presented the same way."
msgstr ""
"Commande, macro, et descriptions de formulaire spécial ont le même\n"
"format, mais le mot `Function' est remplacé par `Command', `Macro', ou\n"
"`Special Form', respectivement. Les commandes sont simplement des\n"
"fonctions qui peuvent s'appeler interactivement; les macros traitent\n"
"leurs arguments différemment des fonctions (les arguments ne sont pas\n"
"évalués), mais sont présentés la même manière."

# type: Plain text
#: lispref/intro.texi:419
msgid ""
"Special form descriptions use a more complex notation to specify optional "
"and repeated arguments because they can break the argument list down into "
"separate arguments in more complicated ways.  @samp{@r{[}@var{optional-arg}@r"
"{]}} means that @var{optional-arg} is optional and @samp{@var{repeated-args}"
"@dots{}} stands for zero or more arguments.  Parentheses are used when "
"several arguments are grouped into additional levels of list structure.  "
"Here is an example:"
msgstr ""
"Les descriptions de formulaire spécial emploient une notation plus\n"
"complexe pour indiquer des arguments facultatifs et répétés parce\n"
"qu'elles peuvent démonter la liste d'argument en arguments séparés de\n"
"manières plus compliquées. @samp{@r{[}@var{optional-arg}@r{]}}\n"
"signifie que @var{optional-arg} est facultatif et\n"
"@samp{@var{reapeated-args}@dots{}} représente zéro arguments ou\n"
"plus. Des parenthèses sont employées quand plusieurs arguments sont\n"
"groupés dans les niveaux additionnels de la structure de liste. Voici\n"
"un exemple :"

# type: defspec
#: lispref/intro.texi:420
#, no-wrap
msgid "count-loop (@var{var} [@var{from} @var{to} [@var{inc}]]) @var{body}@dots{}"
msgstr ""

# type: Plain text
#: lispref/intro.texi:427
msgid ""
"This imaginary special form implements a loop that executes the @var{body} "
"forms and then increments the variable @var{var} on each iteration.  On the "
"first iteration, the variable has the value @var{from}; on subsequent "
"iterations, it is incremented by one (or by @var{inc} if that is given).  "
"The loop exits before executing @var{body} if @var{var} equals @var{to}.  "
"Here is an example:"
msgstr ""
"Ce formulaire spécial imaginaire met en application une boucle qui\n"
"exécute la forme @var{body} et qui ensuite incrémente la variable\n"
"@var{var} à chacun itération. Sur la première itération, la variable\n"
"a la valeur @var{from} ; sur des itérations suivantes, elle est\n"
"incrémentée de un (ou par @var{inc} si elle est donnée). La boucle est\n"
"arrêtée avant l'exécution de @var{body} si @var{var} est égale à\n"
"@var{to}. Voici un exemple :"

# type: example
#: lispref/intro.texi:433
#, no-wrap
msgid ""
"(count-loop (i 0 10)\n"
"  (prin1 i) (princ \" \")\n"
"  (prin1 (aref vector i))\n"
"  (terpri))\n"
msgstr ""

# type: Plain text
#: lispref/intro.texi:438
msgid ""
"If @var{from} and @var{to} are omitted, @var{var} is bound to @code{nil} "
"before the loop begins, and the loop exits if @var{var} is non-@code{nil} at "
"the beginning of an iteration.  Here is an example:"
msgstr ""
"Si @var{from} et @var{to} sont omis, @var{var} est lié à @code{nil}\n"
"avant que la boucle commence, et la boucle est arrêtée si @var{var}\n"
"est non-@code{nil} au début d'une itération. Voici un exemple :"

# type: example
#: lispref/intro.texi:444
#, no-wrap
msgid ""
"(count-loop (done)\n"
"  (if (pending)\n"
"      (fixit)\n"
"    (setq done t)))\n"
msgstr ""

# type: Plain text
#: lispref/intro.texi:451
msgid ""
"In this special form, the arguments @var{from} and @var{to} are optional, "
"but must both be present or both absent.  If they are present, @var{inc} may "
"optionally be specified as well.  These arguments are grouped with the "
"argument @var{var} into a list, to distinguish them from @var{body}, which "
"includes all remaining elements of the form."
msgstr ""
"Sous ce formulaire spécial, les arguments @var{from} et @var{to} sont\n"
"facultatif, mais il faut qu'ils soient tous deux présents ou tous deux\n"
"absents. S'ils sont présents, @var{inc} peut aussi bien être indiqué\n"
"optionnellement. Ces arguments sont groupés avec l'argument @var{var}\n"
"dans une liste, pour les distinguer de @var{body}, qui inclut tous les\n"
"éléments restants de la forme. "

# type: cindex
#: lispref/intro.texi:455
#, no-wrap
msgid "variable descriptions"
msgstr ""

# type: cindex
#: lispref/intro.texi:456
#, no-wrap
msgid "option descriptions"
msgstr ""

# type: Plain text
#: lispref/intro.texi:463
msgid ""
"A @dfn{variable} is a name that can hold a value.  Although nearly all "
"variables can be set by the user, certain variables exist specifically so "
"that users can change them; these are called @dfn{user options}.  Ordinary "
"variables and user options are described using a format like that for "
"functions except that there are no arguments."
msgstr ""
"Une @dfn{variable} est un nom qui peut contenir une valeur. Bien que\n"
"presque toutes les variables puissent être initialisées par\n"
"l'utilisateur, certaines variables existent spécifiquement de sorte\n"
"que les utilisateurs puissent les changer ; celles-ci s'appellent\n"
"@dfn{users options}. Des variables ordinaires et les options\n"
"d'utilisateur sont décrites en utilisant un format comme pour des\n"
"fonctions sauf qu'il n'y a aucun argument."

# type: Plain text
#: lispref/intro.texi:466
msgid ""
"Here is a description of the imaginary @code{electric-future-map} variable."
msgstr ""

# type: defvar
#: lispref/intro.texi:467
#, no-wrap
msgid "electric-future-map"
msgstr ""

# type: Plain text
#: lispref/intro.texi:471
msgid ""
"The value of this variable is a full keymap used by Electric Command Future "
"mode.  The functions in this map allow you to edit commands you have not yet "
"thought about executing."
msgstr ""
"La valeur de cette variable est une keymap employé par le mode\n"
"Electric Command Future. Les fonctions dans cette map vous permettent\n"
"d'éditer des commandes auxquelles vous n'avez pas avez encore pensé."

# type: Plain text
#: lispref/intro.texi:475
msgid ""
"User option descriptions have the same format, but `Variable' is replaced by "
"`User Option'."
msgstr ""
"Les descriptions d'option d'utilisateur ont le même format, mais le\n"
"mot `Variable' est remplacée par `User Option'."

# type: section
#: lispref/intro.texi:477
#, no-wrap
msgid "Version Information"
msgstr "Information de version"

# type: Plain text
#: lispref/intro.texi:481
msgid ""
"These facilities provide information about which version of Emacs is in use."
msgstr ""
"Ces fonctions fournissent les informations au sujet de la version\n"
"d'Emacs en service."

# type: deffn
#: lispref/intro.texi:482
#, no-wrap
msgid "Command emacs-version &optional here"
msgstr ""

# type: deffn
#: lispref/intro.texi:485
msgid ""
"This function returns a string describing the version of Emacs that is "
"running.  It is useful to include this string in bug reports."
msgstr ""
"Cette fonction renvoie une chaine décrivant la version d'Emacs qui est\n"
"en fonction. Il est utile d'inclure cette chaine dans des rapports de\n"
"bogue."

# type: deffn
#: lispref/intro.texi:491
#, no-wrap
msgid ""
"(emacs-version)\n"
"  @result{} \"GNU Emacs 20.3.5 (i486-pc-linux-gnulibc1, X toolkit)\n"
" of Sat Feb 14 1998 on psilocin.gnu.org\"\n"
msgstr ""
"(emacs-version)\n"
"  @result{} \"GNU Emacs 20.3.5 (i486-pc-linux-gnulibc1, X toolkit)\n"
" of Sat Feb 14 1998 on psilocin.gnu.org\"\n"

# type: deffn
#: lispref/intro.texi:498
msgid ""
"If @var{here} is non-@code{nil}, it inserts the text in the buffer before "
"point, and returns @code{nil}.  Called interactively, the function prints "
"the same information in the echo area, but giving a prefix argument makes "
"@var{here} non-@code{nil}."
msgstr ""
"Si @var{here} est non-@code{nil}, ça insère le texte dans le tampon\n"
"avant le point, et renvoie le @code{nil}. Appelée interactivement, la\n"
"fonction affiche la même information dans le secteur d'écho, mais en\n"
"donnant un argument de préfixe rend @var{here} non-@code{nil}."

# type: defvar
#: lispref/intro.texi:500
#, no-wrap
msgid "emacs-build-time"
msgstr ""

# type: Plain text
#: lispref/intro.texi:504
msgid ""
"The value of this variable indicates the time at which Emacs was built at "
"the local site.  It is a list of three integers, like the value of @code"
"{current-time} (@pxref{Time of Day})."
msgstr ""
"La valeur de cette variable indique le moment où Emacs a été construit\n"
"à l'emplacement local. C'est une liste de trois nombres entiers, comme\n"
"la valeur de @code{current-time} (@pxref{Time of Day})."

# type: group
#: lispref/intro.texi:509
#, no-wrap
msgid ""
"emacs-build-time\n"
"     @result{} (13623 62065 344633)\n"
msgstr ""

# type: defvar
#: lispref/intro.texi:513
#, no-wrap
msgid "emacs-version"
msgstr ""

# type: Plain text
#: lispref/intro.texi:520
msgid ""
"The value of this variable is the version of Emacs being run.  It is a "
"string such as @code{\"20.3.1\"}.  The last number in this string is not "
"really part of the Emacs release version number; it is incremented each time "
"you build Emacs in any given directory.  A value with four numeric "
"components, such as @code{\"20.3.9.1\"}, indicates an unreleased test "
"version."
msgstr ""
"La valeur de cette variable est la version d'Emacs en cours. C'est une\n"
"chaine telle que @code{\"20.3.1\"}. Le dernier nombre dans cette chaine\n"
"n'est pas vraiment une partie du nombre de version de sortie d'Emacs;\n"
"il est incrémenté chaque fois que vous construisez Emacs dans\n"
"n'importe quel répertoire donné. Une valeur avec quatre composants\n"
"numériques, tels que @code{\"20.3.9.1\"}, indique une version d'essai\n"
"non sortie."

# type: Plain text
#: lispref/intro.texi:523
msgid "The following two variables have existed since Emacs version 19.23:"
msgstr ""
"Les deux variables suivantes existent depuis la version 19.23 d'Emacs :"

# type: defvar
#: lispref/intro.texi:524
#, no-wrap
msgid "emacs-major-version"
msgstr ""

# type: Plain text
#: lispref/intro.texi:527
msgid ""
"The major version number of Emacs, as an integer.  For Emacs version 20.3, "
"the value is 20."
msgstr ""
"Le numéro principal de version d'Emacs, comme nombre entier. Pour la\n"
"version 20.3 d'Emacs, la valeur est 20."

# type: defvar
#: lispref/intro.texi:529
#, no-wrap
msgid "emacs-minor-version"
msgstr ""

# type: Plain text
#: lispref/intro.texi:532
msgid ""
"The minor version number of Emacs, as an integer.  For Emacs version 20.3, "
"the value is 3."
msgstr ""
"Le numéro de version mineur d'Emacs, comme nombre entier. Pour la\n"
"version 20.3 d'Emacs, la valeur est 3."

# type: Plain text
#: lispref/intro.texi:544
msgid ""
"This manual was written by Robert Krawitz, Bil Lewis, Dan LaLiberte, "
"Richard@tie{}M. Stallman and Chris Welty, the volunteers of the GNU manual "
"group, in an effort extending over several years.  Robert@tie{}J. Chassell "
"helped to review and edit the manual, with the support of the Defense "
"Advanced Research Projects Agency, ARPA Order 6082, arranged by Warren@tie{}"
"A. Hunt, Jr.@: of Computational Logic, Inc."
msgstr ""
"Ce manuel a été écrit par Robert Krawitz, Bil Lewis, Dan LaLiberte,\n"
"Richard M. Stallman and Chris Welty, les volontaires du groupe GNU\n"
"manual, dans un effort se prolongeant sur plusieurs années. Robert\n"
"J. Chassell a aidé à passer en revue et éditer le manuel, avec l'appui\n"
"de la Defense Advanced Research Projects Agency, ARPA Ordre 6082, avec\n"
"l'accord de Warren A. Hunt, Jr.@: de Computational Logic, Inc."

# type: Plain text
#: lispref/intro.texi:557
msgid ""
"Corrections were supplied by Karl Berry, Jim Blandy, Bard Bloom, Stephane "
"Boucher, David Boyes, Alan Carroll, Richard Davis, Lawrence R. Dodd, Peter "
"Doornbosch, David A. Duff, Chris Eich, Beverly Erlebacher, David Eckelkamp, "
"Ralf Fassel, Eirik Fuller, Stephen Gildea, Bob Glickstein, Eric Hanchrow, "
"George Hartzell, Nathan Hess, Masayuki Ida, Dan Jacobson, Jak Kirman, Bob "
"Knighten, Frederick M. Korz, Joe Lammens, Glenn M. Lewis, K. Richard Magill, "
"Brian Marick, Roland McGrath, Skip Montanaro, John Gardiner Myers, Thomas A. "
"Peterson, Francesco Potorti, Friedrich Pukelsheim, Arnold D. Robbins, Raul "
"Rockwell, Per Starb@\"ack, Shinichirou Sugou, Kimmo Suominen, Edward Tharp, "
"Bill Trost, Rickard Westman, Jean White, Matthew Wilding, Carl Witty, Dale "
"Worley, Rusty Wright, and David D. Zuhn."
msgstr ""
"Les corrections ont été fournies par Karl Berry, Jim Blandy, Bard\n"
"Bloom, Stephane Boucher, David Boyes, Alan Carroll, Richard Davis,\n"
"Lawrence R. Dodd, Peter Doornbosch, David A. Duff, Chris Eich, Beverly\n"
"Erlebacher, David Eckelkamp, Ralf Fassel, Eirik Fuller, Stephen\n"
"Gildea, Bob Glickstein, Eric Hanchrow, George Hartzell, Nathan Hess,\n"
"Masayuki Ida, Dan Jacobson, Jak Kirman, Bob Knighten, Frederick\n"
"M. Korz, Joe Lammens, Glenn M. Lewis, K. Richard Magill, Brian Marick,\n"
"Roland McGrath, Skip Montanaro, John Gardiner Myers, Thomas\n"
"A. Peterson, Francesco Potorti, Friedrich Pukelsheim, Arnold\n"
"D. Robbins, Raul Rockwell, Per Starbäck, Shinichirou Sugou, Kimmo\n"
"Suominen, Edward Tharp, Bill Trost, Rickard Westman, Jean White,\n"
"Matthew Wilding, Carl Witty, Dale Worley, Rusty Wright, et David\n"
"D. Zuhn."

# type: ignore
#: lispref/intro.texi:560
#, no-wrap
msgid "   arch-tag: d156593f-82f8-4708-a844-204e48f7f2aa\n"
msgstr "   arch-tag: d156593f-82f8-4708-a844-204e48f7f2aa\n"

# type: Plain text
#: lispref/keymaps.texi:17
msgid ""
"The command bindings of input events are recorded in data structures called "
"@dfn{keymaps}.  Each entry in a keymap associates (or @dfn{binds}) an "
"individual event type, either to another keymap or to a command.  When an "
"event type is bound to a keymap, that keymap is used to look up the next "
"input event; this continues until a command is found.  The whole process is "
"called @dfn{key lookup}."
msgstr ""

# type: section
#: lispref/keymaps.texi:40 lispref/keymaps.texi:42 lispref/keymaps.texi:43
#, no-wrap
msgid "Key Sequences"
msgstr ""

# type: menu
#: lispref/keymaps.texi:40
msgid "Key sequences as Lisp objects."
msgstr ""

# type: section
#: lispref/keymaps.texi:40 lispref/keymaps.texi:102 lispref/keymaps.texi:103
#, no-wrap
msgid "Keymap Basics"
msgstr ""

# type: menu
#: lispref/keymaps.texi:40
msgid "Basic concepts of keymaps."
msgstr ""

# type: menu
#: lispref/keymaps.texi:40 lispref/keymaps.texi:154 lispref/keymaps.texi:155
#: lispref/vol1.texi:615 lispref/vol2.texi:616
#, no-wrap
msgid "Format of Keymaps"
msgstr ""

# type: menu
#: lispref/keymaps.texi:40 lispref/vol1.texi:615 lispref/vol2.texi:616
msgid "What a keymap looks like as a Lisp object."
msgstr ""

# type: menu
#: lispref/keymaps.texi:40 lispref/keymaps.texi:297 lispref/keymaps.texi:298
#: lispref/vol1.texi:615 lispref/vol2.texi:616
#, no-wrap
msgid "Creating Keymaps"
msgstr ""

# type: menu
#: lispref/keymaps.texi:40 lispref/vol1.texi:615 lispref/vol2.texi:616
msgid "Functions to create and copy keymaps."
msgstr ""

# type: menu
#: lispref/keymaps.texi:40 lispref/keymaps.texi:376 lispref/keymaps.texi:377
#: lispref/vol1.texi:615 lispref/vol2.texi:616
#, no-wrap
msgid "Inheritance and Keymaps"
msgstr ""

# type: menu
#: lispref/keymaps.texi:40 lispref/vol1.texi:615 lispref/vol2.texi:616
msgid "How one keymap can inherit the bindings"
msgstr ""

# type: menu
#: lispref/keymaps.texi:40 lispref/vol1.texi:615 lispref/vol2.texi:616
msgid "of another keymap."
msgstr ""

# type: menu
#: lispref/keymaps.texi:40 lispref/keymaps.texi:436 lispref/keymaps.texi:437
#: lispref/vol1.texi:615 lispref/vol2.texi:616
#, no-wrap
msgid "Prefix Keys"
msgstr ""

# type: menu
#: lispref/keymaps.texi:40 lispref/vol1.texi:615 lispref/vol2.texi:616
msgid "Defining a key with a keymap as its definition."
msgstr ""

# type: menu
#: lispref/keymaps.texi:40 lispref/keymaps.texi:586 lispref/keymaps.texi:587
#: lispref/vol1.texi:615 lispref/vol2.texi:616
#, no-wrap
msgid "Active Keymaps"
msgstr ""

# type: menu
#: lispref/keymaps.texi:40
msgid "How Emacs searches the active keymaps"
msgstr ""

# type: menu
#: lispref/keymaps.texi:40
msgid "for a key binding."
msgstr ""

# type: node
#: lispref/keymaps.texi:40 lispref/keymaps.texi:698
#, no-wrap
msgid "Searching Keymaps"
msgstr ""

# type: menu
#: lispref/keymaps.texi:40
msgid "A pseudo-Lisp summary of searching active maps."
msgstr ""

# type: node
#: lispref/keymaps.texi:40 lispref/keymaps.texi:753
#, no-wrap
msgid "Controlling Active Maps"
msgstr ""

# type: menu
#: lispref/keymaps.texi:40 lispref/vol1.texi:615 lispref/vol2.texi:616
msgid "Each buffer has a local keymap"
msgstr ""

# type: menu
#: lispref/keymaps.texi:40
msgid "to override the standard (global) bindings."
msgstr ""

# type: menu
#: lispref/keymaps.texi:40
msgid "A minor mode can also override them."
msgstr ""

# type: menu
#: lispref/keymaps.texi:40 lispref/keymaps.texi:916 lispref/keymaps.texi:917
#: lispref/vol1.texi:615 lispref/vol2.texi:616
#, no-wrap
msgid "Key Lookup"
msgstr ""

# type: menu
#: lispref/keymaps.texi:40
msgid "Finding a key's binding in one keymap."
msgstr ""

# type: menu
#: lispref/keymaps.texi:40 lispref/keymaps.texi:1059 lispref/keymaps.texi:1060
#: lispref/vol1.texi:615 lispref/vol2.texi:616
#, no-wrap
msgid "Functions for Key Lookup"
msgstr ""

# type: menu
#: lispref/keymaps.texi:40 lispref/vol1.texi:615 lispref/vol2.texi:616
msgid "How to request key lookup."
msgstr ""

# type: menu
#: lispref/keymaps.texi:40 lispref/keymaps.texi:1210 lispref/keymaps.texi:1211
#: lispref/vol1.texi:615 lispref/vol2.texi:616
#, no-wrap
msgid "Changing Key Bindings"
msgstr ""

# type: menu
#: lispref/keymaps.texi:40 lispref/vol1.texi:615 lispref/vol2.texi:616
msgid "Redefining a key in a keymap."
msgstr ""

# type: section
#: lispref/keymaps.texi:40 lispref/keymaps.texi:1448 lispref/keymaps.texi:1449
#, no-wrap
msgid "Remapping Commands"
msgstr ""

# type: menu
#: lispref/keymaps.texi:40
msgid "A keymap can translate one command to another."
msgstr ""

# type: node
#: lispref/keymaps.texi:40 lispref/keymaps.texi:1505
#, no-wrap
msgid "Translation Keymaps"
msgstr ""

# type: menu
#: lispref/keymaps.texi:40
msgid "Keymaps for translating sequences of events."
msgstr ""

# type: menu
#: lispref/keymaps.texi:40 lispref/keymaps.texi:1625 lispref/vol1.texi:615
#: lispref/vol2.texi:616
#, no-wrap
msgid "Key Binding Commands"
msgstr ""

# type: menu
#: lispref/keymaps.texi:40 lispref/vol1.texi:615 lispref/vol2.texi:616
msgid "Interactive interfaces for redefining keys."
msgstr ""

# type: menu
#: lispref/keymaps.texi:40 lispref/keymaps.texi:1762 lispref/keymaps.texi:1763
#: lispref/vol1.texi:615 lispref/vol2.texi:616
#, no-wrap
msgid "Scanning Keymaps"
msgstr ""

# type: menu
#: lispref/keymaps.texi:40 lispref/vol1.texi:615 lispref/vol2.texi:616
msgid "Looking through all keymaps, for printing help."
msgstr ""

# type: menu
#: lispref/keymaps.texi:40 lispref/keymaps.texi:1930 lispref/keymaps.texi:1931
#: lispref/vol1.texi:615 lispref/vol2.texi:616
#, no-wrap
msgid "Menu Keymaps"
msgstr ""

# type: menu
#: lispref/keymaps.texi:40
msgid "Defining a menu as a keymap."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:44
#, no-wrap
msgid "key"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:45
#, no-wrap
msgid "keystroke"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:46
#, no-wrap
msgid "key sequence"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:54
msgid ""
"A @dfn{key sequence}, or @dfn{key} for short, is a sequence of one or more "
"input events that form a unit.  Input events include characters, function "
"keys, and mouse actions (@pxref{Input Events}).  The Emacs Lisp "
"representation for a key sequence is a string or vector.  Unless otherwise "
"stated, any Emacs Lisp function that accepts a key sequence as an argument "
"can handle both representations."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:66
msgid ""
"In the string representation, alphanumeric characters ordinarily stand for "
"themselves; for example, @code{\"a\"} represents @kbd{a} and @code{\"2\"} "
"represents @kbd{2}.  Control character events are prefixed by the substring "
"@code{\"\\C-\"}, and meta characters by @code{\"\\M-\"}; for example, @code"
"{\"\\C-x\"} represents the key @kbd{C-x}.  In addition, the @key{TAB}, @key"
"{RET}, @key{ESC}, and @key{DEL} events are represented by @code{\"\\t\"}, "
"@code{\"\\r\"}, @code{\"\\e\"}, and @code{\"\\d\"} respectively.  The string "
"representation of a complete key sequence is the concatenation of the string "
"representations of the constituent events; thus, @code{\"\\C-xl\"} "
"represents the key sequence @kbd{C-x l}."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:70
msgid ""
"Key sequences containing function keys, mouse button events, or non-ASCII "
"characters such as @kbd{C-=} or @kbd{H-a} cannot be represented as strings; "
"they have to be represented as vectors."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:74
msgid ""
"In the vector representation, each element of the vector represents an input "
"event, in its Lisp form.  @xref{Input Events}.  For example, the vector @code"
"{[?\\C-x ?l]} represents the key sequence @kbd{C-x l}."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:77
msgid ""
"For examples of key sequences written in string and vector representations, "
"@ref{Init Rebinding,,, emacs, The GNU Emacs Manual}."
msgstr ""

# type: defmac
#: lispref/keymaps.texi:78
#, no-wrap
msgid "kbd keyseq-text"
msgstr ""

# type: defmac
#: lispref/keymaps.texi:86
msgid ""
"This macro converts the text @var{keyseq-text} (a string constant)  into a "
"key sequence (a string or vector constant).  The contents of @var{keyseq-"
"text} should describe the key sequence using almost the same syntax used in "
"this manual.  More precisely, it uses the same syntax that Edit Macro mode "
"uses for editing keyboard macros (@pxref{Edit Keyboard Macro,,, emacs, The "
"GNU Emacs Manual}); you must surround function key names with @samp{<@dots{}"
">}."
msgstr ""

# type: example
#: lispref/keymaps.texi:96
#, no-wrap
msgid ""
"(kbd \"C-x\") @result{} \"\\C-x\"\n"
"(kbd \"C-x C-f\") @result{} \"\\C-x\\C-f\"\n"
"(kbd \"C-x 4 C-f\") @result{} \"\\C-x4\\C-f\"\n"
"(kbd \"X\") @result{} \"X\"\n"
"(kbd \"RET\") @result{} \"\\^M\"\n"
"(kbd \"C-c SPC\") @result{} \"\\C-c@ \"\n"
"(kbd \"<f1> SPC\") @result{} [f1 32]\n"
"(kbd \"C-M-<down>\") @result{} [C-M-down]\n"
msgstr ""

# type: defmac
#: lispref/keymaps.texi:100
msgid ""
"This macro is not meant for use with arguments that vary---only with string "
"constants."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:104
#, no-wrap
msgid "key binding"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:105
#, no-wrap
msgid "binding of a key"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:106
#, no-wrap
msgid "complete key"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:107
#, no-wrap
msgid "undefined key"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:111
msgid ""
"A keymap is a Lisp data structure that specifies @dfn{key bindings} for "
"various key sequences."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:119
msgid ""
"A single keymap directly specifies definitions for individual events.  When "
"a key sequence consists of a single event, its binding in a keymap is the "
"keymap's definition for that event.  The binding of a longer key sequence is "
"found by an iterative process: first find the definition of the first event "
"(which must itself be a keymap); then find the second event's definition in "
"that keymap, and so on until all the events in the key sequence have been "
"processed."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:128
msgid ""
"If the binding of a key sequence is a keymap, we call the key sequence a @dfn"
"{prefix key}.  Otherwise, we call it a @dfn{complete key} (because no more "
"events can be added to it).  If the binding is @code{nil}, we call the key "
"@dfn{undefined}.  Examples of prefix keys are @kbd{C-c}, @kbd{C-x}, and @kbd"
"{C-x 4}.  Examples of defined complete keys are @kbd{X}, @key{RET}, and @kbd"
"{C-x 4 C-f}.  Examples of undefined complete keys are @kbd{C-x C-g}, and @kbd"
"{C-c 3}.  @xref{Prefix Keys}, for more details."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:137
msgid ""
"The rule for finding the binding of a key sequence assumes that the "
"intermediate bindings (found for the events before the last) are all "
"keymaps; if this is not so, the sequence of events does not form a unit---it "
"is not really one key sequence.  In other words, removing one or more events "
"from the end of any valid key sequence must always yield a prefix key.  For "
"example, @kbd{C-f C-n} is not a key sequence; @kbd{C-f} is not a prefix key, "
"so a longer sequence starting with @kbd{C-f} cannot be a key sequence."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:143
msgid ""
"The set of possible multi-event key sequences depends on the bindings for "
"prefix keys; therefore, it can be different for different keymaps, and can "
"change when bindings are changed.  However, a one-event sequence is always a "
"key sequence, because it does not depend on any prefix keys for its well-"
"formedness."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:153
msgid ""
"At any time, several primary keymaps are @dfn{active}---that is, in use for "
"finding key bindings.  These are the @dfn{global map}, which is shared by "
"all buffers; the @dfn{local keymap}, which is usually associated with a "
"specific major mode; and zero or more @dfn{minor mode keymaps}, which belong "
"to currently enabled minor modes.  (Not all minor modes have keymaps.)  The "
"local keymap bindings shadow (i.e., take precedence over) the corresponding "
"global bindings.  The minor mode keymaps shadow both local and global "
"keymaps.  @xref{Active Keymaps}, for details."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:156
#, no-wrap
msgid "format of keymaps"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:157
#, no-wrap
msgid "keymap format"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:158
#, no-wrap
msgid "full keymap"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:159
#, no-wrap
msgid "sparse keymap"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:166
msgid ""
"Each keymap is a list whose @sc{car} is the symbol @code{keymap}.  The "
"remaining elements of the list define the key bindings of the keymap.  A "
"symbol whose function definition is a keymap is also a keymap.  Use the "
"function @code{keymapp} (see below) to test whether an object is a keymap."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:169
msgid ""
"Several kinds of elements may appear in a keymap, after the symbol @code"
"{keymap} that begins it:"
msgstr ""

# type: item
#: lispref/keymaps.texi:171
#, no-wrap
msgid "(@var{type} .@: @var{binding})"
msgstr ""

# type: table
#: lispref/keymaps.texi:176
msgid ""
"This specifies one binding, for events of type @var{type}.  Each ordinary "
"binding applies to events of a particular @dfn{event type}, which is always "
"a character or a symbol.  @xref{Classifying Events}.  In this kind of "
"binding, @var{binding} is a command."
msgstr ""

# type: item
#: lispref/keymaps.texi:177
#, no-wrap
msgid "(@var{type} @var{item-name} @r{[}@var{cache}@r{]} .@: @var{binding})"
msgstr ""

# type: table
#: lispref/keymaps.texi:182
msgid ""
"This specifies a binding which is also a simple menu item that displays as "
"@var{item-name} in the menu.  @var{cache}, if present, caches certain "
"information for display in the menu.  @xref{Simple Menu Items}."
msgstr ""

# type: item
#: lispref/keymaps.texi:183
#, no-wrap
msgid "(@var{type} @var{item-name} @var{help-string} @r{[}@var{cache}@r{]} .@: @var{binding})"
msgstr ""

# type: table
#: lispref/keymaps.texi:185
msgid "This is a simple menu item with help string @var{help-string}."
msgstr ""

# type: item
#: lispref/keymaps.texi:186
#, no-wrap
msgid "(@var{type} menu-item .@: @var{details})"
msgstr ""

# type: table
#: lispref/keymaps.texi:189
msgid ""
"This specifies a binding which is also an extended menu item.  This allows "
"use of other features.  @xref{Extended Menu Items}."
msgstr ""

# type: item
#: lispref/keymaps.texi:190
#, no-wrap
msgid "(t .@: @var{binding})"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:191
#, no-wrap
msgid "default key binding"
msgstr ""

# type: table
#: lispref/keymaps.texi:198
msgid ""
"This specifies a @dfn{default key binding}; any event not bound by other "
"elements of the keymap is given @var{binding} as its binding.  Default "
"bindings allow a keymap to bind all possible event types without having to "
"enumerate all of them.  A keymap that has a default binding completely masks "
"any lower-precedence keymap, except for events explicitly bound to @code"
"{nil} (see below)."
msgstr ""

# type: var{#1}
#: lispref/keymaps.texi:199
#, no-wrap
msgid "char-table"
msgstr ""

# type: table
#: lispref/keymaps.texi:206
msgid ""
"If an element of a keymap is a char-table, it counts as holding bindings for "
"all character events with no modifier bits (@pxref{modifier bits}): element "
"@var{n} is the binding for the character with code @var{n}.  This is a "
"compact way to record lots of bindings.  A keymap with such a char-table is "
"called a @dfn{full keymap}.  Other keymaps are called @dfn{sparse keymaps}."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:208
#, no-wrap
msgid "keymap prompt string"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:209
#, no-wrap
msgid "overall prompt string"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:210
#, no-wrap
msgid "prompt string of keymap"
msgstr ""

# type: table
#: lispref/keymaps.texi:215
msgid ""
"Aside from elements that specify bindings for keys, a keymap can also have a "
"string as an element.  This is called the @dfn{overall prompt string} and "
"makes it possible to use the keymap as a menu.  @xref{Defining Menus}."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:223
msgid ""
"When the binding is @code{nil}, it doesn't constitute a definition but it "
"does take precedence over a default binding or a binding in the parent "
"keymap.  On the other hand, a binding of @code{nil} does @emph{not} override "
"lower-precedence keymaps; thus, if the local map gives a binding of @code"
"{nil}, Emacs uses the binding from the global map."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:224
#, no-wrap
msgid "meta characters lookup"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:232
msgid ""
"Keymaps do not directly record bindings for the meta characters.  Instead, "
"meta characters are regarded for purposes of key lookup as sequences of two "
"characters, the first of which is @key{ESC} (or whatever is currently the "
"value of @code{meta-prefix-char}).  Thus, the key @kbd{M-a} is internally "
"represented as @kbd{@key{ESC} a}, and its global binding is found at the "
"slot for @kbd{a} in @code{esc-map} (@pxref{Prefix Keys})."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:236
msgid ""
"This conversion applies only to characters, not to function keys or other "
"input events; thus, @kbd{M-@key{end}} has nothing to do with @kbd{@key{ESC} "
"@key{end}}."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:240
msgid ""
"Here as an example is the local keymap for Lisp mode, a sparse keymap.  It "
"defines bindings for @key{DEL} and @key{TAB}, plus @kbd{C-c C-l}, @kbd{M-C-"
"q}, and @kbd{M-C-x}."
msgstr ""

# type: group
#: lispref/keymaps.texi:245
#, no-wrap
msgid ""
"lisp-mode-map\n"
"@result{}\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:251
#, no-wrap
msgid ""
"(keymap\n"
" (3 keymap\n"
"    ;; @kbd{C-c C-z}\n"
"    (26 . run-lisp))\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:259
#, no-wrap
msgid ""
" (27 keymap\n"
"     ;; @r{@kbd{M-C-x}, treated as @kbd{@key{ESC} C-x}}\n"
"     (24 . lisp-send-defun)\n"
"     keymap\n"
"     ;; @r{@kbd{M-C-q}, treated as @kbd{@key{ESC} C-q}}\n"
"     (17 . indent-sexp))\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:265
#, no-wrap
msgid ""
" ;; @r{This part is inherited from @code{lisp-mode-shared-map}.}\n"
" keymap\n"
" ;; @key{DEL}\n"
" (127 . backward-delete-char-untabify)\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:271
#, no-wrap
msgid ""
" (27 keymap\n"
"     ;; @r{@kbd{M-C-q}, treated as @kbd{@key{ESC} C-q}}\n"
"     (17 . indent-sexp))\n"
" (9 . lisp-indent-line))\n"
msgstr ""

# type: defun
#: lispref/keymaps.texi:274
#, no-wrap
msgid "keymapp object"
msgstr ""

# type: defun
#: lispref/keymaps.texi:279
msgid ""
"This function returns @code{t} if @var{object} is a keymap, @code{nil} "
"otherwise.  More precisely, this function tests for a list whose @sc{car} is "
"@code{keymap}, or for a symbol whose function definition satisfies @code"
"{keymapp}."
msgstr ""

# type: group
#: lispref/keymaps.texi:284
#, no-wrap
msgid ""
"(keymapp '(keymap))\n"
"    @result{} t\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:289
#, no-wrap
msgid ""
"(fset 'foo '(keymap))\n"
"(keymapp 'foo)\n"
"    @result{} t\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:293
#, no-wrap
msgid ""
"(keymapp (current-global-map))\n"
"    @result{} t\n"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:299
#, no-wrap
msgid "creating keymaps"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:302
msgid "Here we describe the functions for creating keymaps."
msgstr ""

# type: defun
#: lispref/keymaps.texi:303
#, no-wrap
msgid "make-sparse-keymap &optional prompt"
msgstr ""

# type: defun
#: lispref/keymaps.texi:308
msgid ""
"This function creates and returns a new sparse keymap with no entries.  (A "
"sparse keymap is the kind of keymap you usually want.)  The new keymap does "
"not contain a char-table, unlike @code{make-keymap}, and does not bind any "
"events."
msgstr ""

# type: group
#: lispref/keymaps.texi:313
#, no-wrap
msgid ""
"(make-sparse-keymap)\n"
"    @result{} (keymap)\n"
msgstr ""

# type: defun
#: lispref/keymaps.texi:323
msgid ""
"If you specify @var{prompt}, that becomes the overall prompt string for the "
"keymap.  You should specify this only for menu keymaps (@pxref{Defining "
"Menus}).  A keymap with an overall prompt string will always present a mouse "
"menu or a keyboard menu if it is active for looking up the next input "
"event.  Don't specify an overall prompt string for the main map of a major "
"or minor mode, because that would cause the command loop to present a "
"keyboard menu every time."
msgstr ""

# type: defun
#: lispref/keymaps.texi:325
#, no-wrap
msgid "make-keymap &optional prompt"
msgstr ""

# type: defun
#: lispref/keymaps.texi:332
msgid ""
"This function creates and returns a new full keymap.  That keymap contains a "
"char-table (@pxref{Char-Tables}) with slots for all characters without "
"modifiers.  The new keymap initially binds all these characters to @code"
"{nil}, and does not bind any other kind of event.  The argument @var{prompt} "
"specifies a prompt string, as in @code{make-sparse-keymap}."
msgstr ""

# type: group
#: lispref/keymaps.texi:337
#, no-wrap
msgid ""
"(make-keymap)\n"
"    @result{} (keymap #^[t nil nil nil @dots{} nil nil keymap])\n"
msgstr ""

# type: defun
#: lispref/keymaps.texi:342
msgid ""
"A full keymap is more efficient than a sparse keymap when it holds lots of "
"bindings; for just a few, the sparse keymap is better."
msgstr ""

# type: defun
#: lispref/keymaps.texi:344
#, no-wrap
msgid "copy-keymap keymap"
msgstr ""

# type: defun
#: lispref/keymaps.texi:351
msgid ""
"This function returns a copy of @var{keymap}.  Any keymaps that appear "
"directly as bindings in @var{keymap} are also copied recursively, and so on "
"to any number of levels.  However, recursive copying does not take place "
"when the definition of a character is a symbol whose function definition is "
"a keymap; the same symbol appears in the new copy."
msgstr ""

# type: group
#: lispref/keymaps.texi:356
#, no-wrap
msgid ""
"(setq map (copy-keymap (current-local-map)))\n"
"@result{} (keymap\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:363
#, no-wrap
msgid ""
"     ;; @r{(This implements meta characters.)}\n"
"     (27 keymap\n"
"         (83 . center-paragraph)\n"
"         (115 . center-line))\n"
"     (9 . tab-to-tab-stop))\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:368
#, no-wrap
msgid ""
"(eq map (current-local-map))\n"
"    @result{} nil\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:372
#, no-wrap
msgid ""
"(equal map (current-local-map))\n"
"    @result{} t\n"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:378
#, no-wrap
msgid "keymap inheritance"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:379
#, no-wrap
msgid "inheriting a keymap's bindings"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:383
msgid ""
"A keymap can inherit the bindings of another keymap, which we call the @dfn"
"{parent keymap}.  Such a keymap looks like this:"
msgstr ""

# type: example
#: lispref/keymaps.texi:386
#, no-wrap
msgid "(keymap @var{elements}@dots{} . @var{parent-keymap})\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:392
msgid ""
"The effect is that this keymap inherits all the bindings of @var{parent-"
"keymap}, whatever they may be at the time a key is looked up, but can add to "
"them or override them with @var{elements}."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:400
msgid ""
"If you change the bindings in @var{parent-keymap} using @code{define-key} or "
"other key-binding functions, these changed bindings are visible in the "
"inheriting keymap, unless shadowed by the bindings made by @var{elements}.  "
"The converse is not true: if you use @code{define-key} to change bindings in "
"the inheriting keymap, these changes are recorded in @var{elements}, but "
"have no effect on @var{parent-keymap}."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:405
msgid ""
"The proper way to construct a keymap with a parent is to use @code{set-"
"keymap-parent}; if you have code that directly constructs a keymap with a "
"parent, please convert the program to use @code{set-keymap-parent} instead."
msgstr ""

# type: defun
#: lispref/keymaps.texi:406
#, no-wrap
msgid "keymap-parent keymap"
msgstr ""

# type: defun
#: lispref/keymaps.texi:409
msgid ""
"This returns the parent keymap of @var{keymap}.  If @var{keymap} has no "
"parent, @code{keymap-parent} returns @code{nil}."
msgstr ""

# type: defun
#: lispref/keymaps.texi:411
#, no-wrap
msgid "set-keymap-parent keymap parent"
msgstr ""

# type: defun
#: lispref/keymaps.texi:415
msgid ""
"This sets the parent keymap of @var{keymap} to @var{parent}, and returns @var"
"{parent}.  If @var{parent} is @code{nil}, this function gives @var{keymap} "
"no parent at all."
msgstr ""

# type: defun
#: lispref/keymaps.texi:419
msgid ""
"If @var{keymap} has submaps (bindings for prefix keys), they too receive new "
"parent keymaps that reflect what @var{parent} specifies for those prefix "
"keys."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:423
msgid ""
"Here is an example showing how to make a keymap that inherits from @code"
"{text-mode-map}:"
msgstr ""

# type: example
#: lispref/keymaps.texi:428
#, no-wrap
msgid ""
"(let ((map (make-sparse-keymap)))\n"
"  (set-keymap-parent map text-mode-map)\n"
"  map)\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:435
msgid ""
"A non-sparse keymap can have a parent too, but this is not very useful.  A "
"non-sparse keymap always specifies something as the binding for every "
"numeric character code without modifier bits, even if it is @code{nil}, so "
"these character's bindings are never inherited from the parent keymap."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:438
#, no-wrap
msgid "prefix key"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:445
msgid ""
"A @dfn{prefix key} is a key sequence whose binding is a keymap.  The keymap "
"defines what to do with key sequences that extend the prefix key.  For "
"example, @kbd{C-x} is a prefix key, and it uses a keymap that is also stored "
"in the variable @code{ctl-x-map}.  This keymap defines bindings for key "
"sequences starting with @kbd{C-x}."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:448
msgid ""
"Some of the standard Emacs prefix keys use keymaps that are also found in "
"Lisp variables:"
msgstr ""

# type: item
#: lispref/keymaps.texi:451 lispref/maps.texi:79
#, no-wrap
msgid "esc-map"
msgstr "esc-map"

# type: findex
#: lispref/keymaps.texi:452
#, no-wrap
msgid "ESC-prefix"
msgstr "ESC-prefix"

# type: itemize
#: lispref/keymaps.texi:456
msgid ""
"@code{esc-map} is the global keymap for the @key{ESC} prefix key.  Thus, the "
"global definitions of all meta characters are actually found here.  This map "
"is also the function definition of @code{ESC-prefix}."
msgstr ""

# type: kbd{#1}
#: lispref/keymaps.texi:458
#, no-wrap
msgid "C-h"
msgstr "C-h"

# type: itemize
#: lispref/keymaps.texi:460
msgid "@code{help-map} is the global keymap for the @kbd{C-h} prefix key."
msgstr ""

# type: kbd{#1}
#: lispref/keymaps.texi:462
#, no-wrap
msgid "C-c"
msgstr "C-c"

# type: item
#: lispref/keymaps.texi:463 lispref/maps.texi:200
#, no-wrap
msgid "mode-specific-map"
msgstr "mode-specific-map"

# type: itemize
#: lispref/keymaps.texi:469
msgid ""
"@code{mode-specific-map} is the global keymap for the prefix key @kbd{C-c}.  "
"This map is actually global, not mode-specific, but its name provides useful "
"information about @kbd{C-c} in the output of @kbd{C-h b} (@code{display-"
"bindings}), since the main use of this prefix key is for mode-specific "
"bindings."
msgstr ""

# type: kbd{#1}
#: lispref/keymaps.texi:471
#, no-wrap
msgid "C-x"
msgstr "C-x"

# type: item
#: lispref/keymaps.texi:472 lispref/maps.texi:45
#, no-wrap
msgid "ctl-x-map"
msgstr "ctl-x-map"

# type: findex
#: lispref/keymaps.texi:473
#, no-wrap
msgid "Control-X-prefix"
msgstr "Control-X-prefix"

# type: itemize
#: lispref/keymaps.texi:477
msgid ""
"@code{ctl-x-map} is the global keymap used for the @kbd{C-x} prefix key.  "
"This map is found via the function cell of the symbol @code{Control-X-"
"prefix}."
msgstr ""

# type: kbd{#1}
#: lispref/keymaps.texi:479
#, no-wrap
msgid "C-x @key{RET}"
msgstr "C-x @key{RET}"

# type: vindex
#: lispref/keymaps.texi:480
#, no-wrap
msgid "mule-keymap"
msgstr "mule-keymap"

# type: itemize
#: lispref/keymaps.texi:483
msgid ""
"@code{mule-keymap} is the global keymap used for the @kbd{C-x @key{RET}} "
"prefix key."
msgstr ""

# type: kbd{#1}
#: lispref/keymaps.texi:485
#, no-wrap
msgid "C-x 4"
msgstr "C-x 4"

# type: item
#: lispref/keymaps.texi:486 lispref/maps.texi:39
#, no-wrap
msgid "ctl-x-4-map"
msgstr "ctl-x-4-map"

# type: itemize
#: lispref/keymaps.texi:489
msgid ""
"@code{ctl-x-4-map} is the global keymap used for the @kbd{C-x 4} prefix key."
msgstr ""

# type: kbd{#1}
#: lispref/keymaps.texi:492
#, no-wrap
msgid "C-x 5"
msgstr "C-x 5"

# type: item
#: lispref/keymaps.texi:493 lispref/maps.texi:42
#, no-wrap
msgid "ctl-x-5-map"
msgstr "ctl-x-5-map"

# type: itemize
#: lispref/keymaps.texi:496
msgid ""
"@code{ctl-x-5-map} is the global keymap used for the @kbd{C-x 5} prefix key."
msgstr ""

# type: kbd{#1}
#: lispref/keymaps.texi:499
#, no-wrap
msgid "C-x 6"
msgstr "C-x 6"

# type: vindex
#: lispref/keymaps.texi:500
#, no-wrap
msgid "2C-mode-map"
msgstr "2C-mode-map"

# type: itemize
#: lispref/keymaps.texi:503
msgid ""
"@code{2C-mode-map} is the global keymap used for the @kbd{C-x 6} prefix key."
msgstr ""

# type: kbd{#1}
#: lispref/keymaps.texi:505
#, no-wrap
msgid "C-x v"
msgstr "C-x v"

# type: vindex
#: lispref/keymaps.texi:506
#, no-wrap
msgid "vc-prefix-map"
msgstr "vc-prefix-map"

# type: itemize
#: lispref/keymaps.texi:509
msgid ""
"@code{vc-prefix-map} is the global keymap used for the @kbd{C-x v} prefix "
"key."
msgstr ""

# type: kbd{#1}
#: lispref/keymaps.texi:511
#, no-wrap
msgid "M-o"
msgstr "M-o"

# type: vindex
#: lispref/keymaps.texi:512
#, no-wrap
msgid "facemenu-keymap"
msgstr "facemenu-keymap"

# type: itemize
#: lispref/keymaps.texi:515
msgid ""
"@code{facemenu-keymap} is the global keymap used for the @kbd{M-o} prefix "
"key."
msgstr ""

# type: itemize
#: lispref/keymaps.texi:521
msgid ""
"The other Emacs prefix keys are @kbd{M-g}, @kbd{C-x @@}, @kbd{C-x a i}, @kbd"
"{C-x @key{ESC}} and @kbd{@key{ESC} @key{ESC}}.  They use keymaps that have "
"no special names."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:530
msgid ""
"The keymap binding of a prefix key is used for looking up the event that "
"follows the prefix key.  (It may instead be a symbol whose function "
"definition is a keymap.  The effect is the same, but the symbol serves as a "
"name for the prefix key.)  Thus, the binding of @kbd{C-x} is the symbol @code"
"{Control-X-prefix}, whose function cell holds the keymap for @kbd{C-x} "
"commands.  (The same keymap is also the value of @code{ctl-x-map}.)"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:537
msgid ""
"Prefix key definitions can appear in any active keymap.  The definitions of "
"@kbd{C-c}, @kbd{C-x}, @kbd{C-h} and @key{ESC} as prefix keys appear in the "
"global map, so these prefix keys are always available.  Major and minor "
"modes can redefine a key as a prefix by putting a prefix key definition for "
"it in the local map or the minor mode's map.  @xref{Active Keymaps}."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:542
msgid ""
"If a key is defined as a prefix in more than one active map, then its "
"various definitions are in effect merged: the commands defined in the minor "
"mode keymaps come first, followed by those in the local map's prefix "
"definition, and then by those from the global map."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:548
msgid ""
"In the following example, we make @kbd{C-p} a prefix key in the local "
"keymap, in such a way that @kbd{C-p} is identical to @kbd{C-x}.  Then the "
"binding for @kbd{C-p C-f} is the function @code{find-file}, just like @kbd{C-"
"x C-f}.  The key sequence @kbd{C-p 6} is not found in any active keymap."
msgstr ""

# type: group
#: lispref/keymaps.texi:553
#, no-wrap
msgid ""
"(use-local-map (make-sparse-keymap))\n"
"    @result{} nil\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:557
#, no-wrap
msgid ""
"(local-set-key \"\\C-p\" ctl-x-map)\n"
"    @result{} nil\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:561
#, no-wrap
msgid ""
"(key-binding \"\\C-p\\C-f\")\n"
"    @result{} find-file\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:566
#, no-wrap
msgid ""
"(key-binding \"\\C-p6\")\n"
"    @result{} nil\n"
msgstr ""

# type: defun
#: lispref/keymaps.texi:569
#, no-wrap
msgid "define-prefix-command symbol &optional mapvar prompt"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:570
#, no-wrap
msgid "prefix command"
msgstr ""

# type: anchor{#1}
#: lispref/keymaps.texi:576
msgid "Definition of define-prefix-command"
msgstr ""

# type: defun
#: lispref/keymaps.texi:576
msgid ""
"This function prepares @var{symbol} for use as a prefix key's binding: it "
"creates a sparse keymap and stores it as @var{symbol}'s function "
"definition.  Subsequently binding a key sequence to @var{symbol} will make "
"that key sequence into a prefix key.  The return value is @code{symbol}."
msgstr ""

# type: defun
#: lispref/keymaps.texi:580
msgid ""
"This function also sets @var{symbol} as a variable, with the keymap as its "
"value.  But if @var{mapvar} is non-@code{nil}, it sets @var{mapvar} as a "
"variable instead."
msgstr ""

# type: defun
#: lispref/keymaps.texi:584
msgid ""
"If @var{prompt} is non-@code{nil}, that becomes the overall prompt string "
"for the keymap.  The prompt string should be given for menu keymaps (@pxref"
"{Defining Menus})."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:588
#, no-wrap
msgid "active keymap"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:589
#, no-wrap
msgid "global keymap"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:590
#, no-wrap
msgid "local keymap"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:596
msgid ""
"Emacs normally contains many keymaps; at any given time, just a few of them "
"are @dfn{active}, meaning that they participate in the interpretation of "
"user input.  All the active keymaps are used together to determine what "
"command to execute when a key is entered."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:602
msgid ""
"Normally the active keymaps are the @code{keymap} property keymap, the "
"keymaps of any enabled minor modes, the current buffer's local keymap, and "
"the global keymap, in that order.  Emacs searches for each input key "
"sequence in all these keymaps.  @xref{Searching Keymaps}, for more details "
"of this procedure."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:609
msgid ""
"When the key sequence starts with a mouse event (optionally preceded by a "
"symbolic prefix), the active keymaps are determined based on the position in "
"that event.  If the event happened on a string embedded with a @code"
"{display}, @code{before-string}, or @code{after-string} property (@pxref"
"{Special Properties}), the non-@code{nil} map properties of the string "
"override those of the buffer."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:613
msgid ""
"The @dfn{global keymap} holds the bindings of keys that are defined "
"regardless of the current buffer, such as @kbd{C-f}.  The variable @code"
"{global-map} holds this keymap, which is always active."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:620
msgid ""
"Each buffer may have another keymap, its @dfn{local keymap}, which may "
"contain new or overriding definitions for keys.  The current buffer's local "
"keymap is always active except when @code{overriding-local-map} overrides "
"it.  The @code{local-map} text or overlay property can specify an "
"alternative local keymap for certain parts of the buffer; see @ref{Special "
"Properties}."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:625
msgid ""
"Each minor mode can have a keymap; if it does, the keymap is active when the "
"minor mode is enabled.  Modes for emulation can specify additional active "
"keymaps through the variable @code{emulation-mode-map-alists}."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:629
msgid ""
"The highest precedence normal keymap comes from the @code{keymap} text or "
"overlay property.  If that is non-@code{nil}, it is the first keymap to be "
"processed, in normal circumstances."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:637
msgid ""
"However, there are also special ways for programs to substitute other "
"keymaps for some of those.  The variable @code{overriding-local-map}, if non-"
"@code{nil}, specifies a keymap that replaces all the usual active keymaps "
"except the global keymap.  Another way to do this is with @code{overriding-"
"terminal-local-map}; it operates on a per-terminal basis.  These variables "
"are documented below."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:638
#, no-wrap
msgid "major mode keymap"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:643
msgid ""
"Since every buffer that uses the same major mode normally uses the same "
"local keymap, you can think of the keymap as local to the mode.  A change to "
"the local keymap of a buffer (using @code{local-set-key}, for example) is "
"seen also in the other buffers that share that keymap."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:649
msgid ""
"The local keymaps that are used for Lisp mode and some other major modes "
"exist even if they have not yet been used.  These local keymaps are the "
"values of variables such as @code{lisp-mode-map}.  For most major modes, "
"which are less frequently used, the local keymap is constructed only when "
"the mode is used for the first time in a session."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:652
msgid ""
"The minibuffer has local keymaps, too; they contain various completion and "
"exit commands.  @xref{Intro to Minibuffers}."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:655
msgid ""
"Emacs has other keymaps that are used in a different way---translating "
"events within @code{read-key-sequence}.  @xref{Translation Keymaps}."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:657
msgid "@xref{Standard Keymaps}, for a list of standard keymaps."
msgstr ""

# type: defun
#: lispref/keymaps.texi:658
#, no-wrap
msgid "current-active-maps &optional olp"
msgstr ""

# type: defun
#: lispref/keymaps.texi:664
msgid ""
"This returns the list of active keymaps that would be used by the command "
"loop in the current circumstances to look up a key sequence.  Normally it "
"ignores @code{overriding-local-map} and @code{overriding-terminal-local-"
"map}, but if @var{olp} is non-@code{nil} then it pays attention to them."
msgstr ""

# type: defun
#: lispref/keymaps.texi:666
#, no-wrap
msgid "key-binding key &optional accept-defaults no-remap position"
msgstr ""

# type: defun
#: lispref/keymaps.texi:670
msgid ""
"This function returns the binding for @var{key} according to the current "
"active keymaps.  The result is @code{nil} if @var{key} is undefined in the "
"keymaps."
msgstr ""

# type: defun
#: lispref/keymaps.texi:673
msgid ""
"The argument @var{accept-defaults} controls checking for default bindings, "
"as in @code{lookup-key} (@pxref{Functions for Key Lookup})."
msgstr ""

# type: defun
#: lispref/keymaps.texi:679
msgid ""
"When commands are remapped (@pxref{Remapping Commands}), @code{key-binding} "
"normally processes command remappings so as to returns the remapped command "
"that will actually be executed.  However, if @var{no-remap} is non-@code"
"{nil}, @code{key-binding} ignores remappings and returns the binding "
"directly specified for @var{key}."
msgstr ""

# type: defun
#: lispref/keymaps.texi:687
msgid ""
"If @var{key} starts with a mouse event (perhaps following a prefix event), "
"the maps to be consulted are determined based on the event's position.  "
"Otherwise, they are determined based on the value of point.  However, you "
"can override either of them by specifying @var{position}.  If @var{position} "
"is non-@code{nil}, it should be either a buffer position or an event "
"position like the value of @code{event-start}.  Then the maps consulted are "
"determined based on @var{position}."
msgstr ""

# type: defun
#: lispref/keymaps.texi:689
msgid "An error is signaled if @var{key} is not a string or a vector."
msgstr ""

# type: group
#: lispref/keymaps.texi:694
#, no-wrap
msgid ""
"(key-binding \"\\C-x\\C-f\")\n"
"    @result{} find-file\n"
msgstr ""

# type: section
#: lispref/keymaps.texi:699
#, no-wrap
msgid "Searching the Active Keymaps"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:700
#, no-wrap
msgid "searching active keymaps for keys"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:706
msgid ""
"After translation of event subsequences (@pxref{Translation Keymaps}) Emacs "
"looks for them in the active keymaps.  Here is a pseudo-Lisp description of "
"the order and conditions for searching them:"
msgstr ""

# type: lisp
#: lispref/keymaps.texi:720
#, no-wrap
msgid ""
"(or (if overriding-terminal-local-map\n"
"        (@var{find-in} overriding-terminal-local-map)\n"
"      (if overriding-local-map\n"
"          (@var{find-in} overriding-local-map)\n"
"        (or (@var{find-in} (get-char-property (point) 'keymap))\n"
"            (@var{find-in-any} emulation-mode-map-alists)\n"
"            (@var{find-in-any} minor-mode-overriding-map-alist)\n"
"            (@var{find-in-any} minor-mode-map-alist)\n"
"            (if (get-text-property (point) 'local-map)\n"
"                (@var{find-in} (get-char-property (point) 'local-map))\n"
"              (@var{find-in} (current-local-map))))))\n"
"    (@var{find-in} (current-global-map)))\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:731
msgid ""
"The @var{find-in} and @var{find-in-any} are pseudo functions that search in "
"one keymap and in an alist of keymaps, respectively.  (Searching a single "
"keymap for a binding is called @dfn{key lookup}; see @ref{Key Lookup}.)  If "
"the key sequence starts with a mouse event, or a symbolic prefix event "
"followed by a mouse event, that event's position is used instead of point "
"and the current buffer.  Mouse events on an embedded string use non-@code"
"{nil} text properties from that string instead of the buffer."
msgstr ""

# type: enumerate
#: lispref/keymaps.texi:736
msgid ""
"The function finally found may be remapped (@pxref{Remapping Commands})."
msgstr ""

# type: enumerate
#: lispref/keymaps.texi:740
msgid ""
"Characters that are bound to @code{self-insert-command} are translated "
"according to @code{translation-table-for-input} before insertion."
msgstr ""

# type: enumerate
#: lispref/keymaps.texi:744
msgid ""
"@code{current-active-maps} returns a list of the currently active keymaps at "
"point."
msgstr ""

# type: enumerate
#: lispref/keymaps.texi:751
msgid ""
"When a match is found (@pxref{Key Lookup}), if the binding in the keymap is "
"a function, the search is over.  However if the keymap entry is a symbol "
"with a value or a string, Emacs replaces the input key sequences with the "
"variable's value or the string, and restarts the search of the active "
"keymaps."
msgstr ""

# type: section
#: lispref/keymaps.texi:754
#, no-wrap
msgid "Controlling the Active Keymaps"
msgstr ""

# type: item
#: lispref/keymaps.texi:756 lispref/maps.texi:125
#, no-wrap
msgid "global-map"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:761
msgid ""
"This variable contains the default global keymap that maps Emacs keyboard "
"input to commands.  The global keymap is normally this keymap.  The default "
"global keymap is a full keymap that binds @code{self-insert-command} to all "
"of the printing characters."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:765
msgid ""
"It is normal practice to change the bindings in the global keymap, but you "
"should not assign this variable any value other than the keymap it starts "
"out with."
msgstr ""

# type: defun
#: lispref/keymaps.texi:767
#, no-wrap
msgid "current-global-map"
msgstr ""

# type: defun
#: lispref/keymaps.texi:771
msgid ""
"This function returns the current global keymap.  This is the same as the "
"value of @code{global-map} unless you change one or the other."
msgstr ""

# type: group
#: lispref/keymaps.texi:777
#, no-wrap
msgid ""
"(current-global-map)\n"
"@result{} (keymap [set-mark-command beginning-of-line @dots{}\n"
"            delete-backward-char])\n"
msgstr ""

# type: defun
#: lispref/keymaps.texi:781
#, no-wrap
msgid "current-local-map"
msgstr ""

# type: defun
#: lispref/keymaps.texi:787
msgid ""
"This function returns the current buffer's local keymap, or @code{nil} if it "
"has none.  In the following example, the keymap for the @samp{*scratch*} "
"buffer (using Lisp Interaction mode) is a sparse keymap in which the entry "
"for @key{ESC}, @acronym{ASCII} code 27, is another sparse keymap."
msgstr ""

# type: group
#: lispref/keymaps.texi:795
#, no-wrap
msgid ""
"(current-local-map)\n"
"@result{} (keymap\n"
"    (10 . eval-print-last-sexp)\n"
"    (9 . lisp-indent-line)\n"
"    (127 . backward-delete-char-untabify)\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:800
#, no-wrap
msgid ""
"    (27 keymap\n"
"        (24 . eval-defun)\n"
"        (17 . indent-sexp)))\n"
msgstr ""

# type: defun
#: lispref/keymaps.texi:804
#, no-wrap
msgid "current-minor-mode-maps"
msgstr ""

# type: defun
#: lispref/keymaps.texi:806
msgid ""
"This function returns a list of the keymaps of currently enabled minor modes."
msgstr ""

# type: defun
#: lispref/keymaps.texi:808
#, no-wrap
msgid "use-global-map keymap"
msgstr ""

# type: defun
#: lispref/keymaps.texi:811
msgid ""
"This function makes @var{keymap} the new current global keymap.  It returns "
"@code{nil}."
msgstr ""

# type: defun
#: lispref/keymaps.texi:813
msgid "It is very unusual to change the global keymap."
msgstr ""

# type: defun
#: lispref/keymaps.texi:815
#, no-wrap
msgid "use-local-map keymap"
msgstr ""

# type: defun
#: lispref/keymaps.texi:820
msgid ""
"This function makes @var{keymap} the new local keymap of the current "
"buffer.  If @var{keymap} is @code{nil}, then the buffer has no local "
"keymap.  @code{use-local-map} returns @code{nil}.  Most major mode commands "
"use this function."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:823
#, no-wrap
msgid "minor-mode-map-alist"
msgstr ""

# type: anchor{#1}
#: lispref/keymaps.texi:828
msgid "Definition of minor-mode-map-alist"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:828
msgid ""
"This variable is an alist describing keymaps that may or may not be active "
"according to the values of certain variables.  Its elements look like this:"
msgstr ""

# type: example
#: lispref/keymaps.texi:831
#, no-wrap
msgid "(@var{variable} . @var{keymap})\n"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:836
msgid ""
"The keymap @var{keymap} is active whenever @var{variable} has a non-@code"
"{nil} value.  Typically @var{variable} is the variable that enables or "
"disables a minor mode.  @xref{Keymaps and Minor Modes}."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:842
msgid ""
"Note that elements of @code{minor-mode-map-alist} do not have the same "
"structure as elements of @code{minor-mode-alist}.  The map must be the @sc"
"{cdr} of the element; a list with the map as the second element will not "
"do.  The @sc{cdr} can be either a keymap (a list) or a symbol whose function "
"definition is a keymap."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:847
msgid ""
"When more than one minor mode keymap is active, the earlier one in @code"
"{minor-mode-map-alist} takes priority.  But you should design minor modes so "
"that they don't interfere with each other.  If you do this properly, the "
"order will not matter."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:851
msgid ""
"See @ref{Keymaps and Minor Modes}, for more information about minor modes.  "
"See also @code{minor-mode-key-binding} (@pxref{Functions for Key Lookup})."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:853
#, no-wrap
msgid "minor-mode-overriding-map-alist"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:858
msgid ""
"This variable allows major modes to override the key bindings for particular "
"minor modes.  The elements of this alist look like the elements of @code"
"{minor-mode-map-alist}: @code{(@var{variable} . @var{keymap})}."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:863
msgid ""
"If a variable appears as an element of @code{minor-mode-overriding-map-"
"alist}, the map specified by that element totally replaces any map specified "
"for the same variable in @code{minor-mode-map-alist}."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:866
msgid ""
"@code{minor-mode-overriding-map-alist} is automatically buffer-local in all "
"buffers."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:868
#, no-wrap
msgid "overriding-local-map"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:873
msgid ""
"If non-@code{nil}, this variable holds a keymap to use instead of the "
"buffer's local keymap, any text property or overlay keymaps, and any minor "
"mode keymaps.  This keymap, if specified, overrides all other maps that "
"would have been active, except for the current global map."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:875
#, no-wrap
msgid "overriding-terminal-local-map"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:879
msgid ""
"If non-@code{nil}, this variable holds a keymap to use instead of @code"
"{overriding-local-map}, the buffer's local keymap, text property or overlay "
"keymaps, and all the minor mode keymaps."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:883
msgid ""
"This variable is always local to the current terminal and cannot be buffer-"
"local.  @xref{Multiple Displays}.  It is used to implement incremental "
"search mode."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:885
#, no-wrap
msgid "overriding-local-map-menu-flag"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:890
msgid ""
"If this variable is non-@code{nil}, the value of @code{overriding-local-map} "
"or @code{overriding-terminal-local-map} can affect the display of the menu "
"bar.  The default value is @code{nil}, so those map variables have no effect "
"on the menu bar."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:898
msgid ""
"Note that these two map variables do affect the execution of key sequences "
"entered using the menu bar, even if they do not affect the menu bar "
"display.  So if a menu bar key sequence comes in, you should clear the "
"variables before looking up and executing that key sequence.  Modes that use "
"the variables would typically do this anyway; normally they respond to "
"events that they do not handle by ``unreading'' them and exiting."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:900
#, no-wrap
msgid "special-event-map"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:904
msgid ""
"This variable holds a keymap for special events.  If an event type has a "
"binding in this keymap, then it is special, and the binding for the event is "
"run directly by @code{read-event}.  @xref{Special Events}."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:906
#, no-wrap
msgid "emulation-mode-map-alists"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:914
msgid ""
"This variable holds a list of keymap alists to use for emulations modes.  It "
"is intended for modes or packages using multiple minor-mode keymaps.  Each "
"element is a keymap alist which has the same format and meaning as @code"
"{minor-mode-map-alist}, or a symbol with a variable binding which is such an "
"alist.  The ``active'' keymaps in each alist are used before @code{minor-"
"mode-map-alist} and @code{minor-mode-overriding-map-alist}."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:918
#, no-wrap
msgid "key lookup"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:919
#, no-wrap
msgid "keymap entry"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:924
msgid ""
"@dfn{Key lookup} is the process of finding the binding of a key sequence "
"from a given keymap.  The execution or use of the binding is not part of key "
"lookup."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:931
msgid ""
"Key lookup uses just the event type of each event in the key sequence; the "
"rest of the event is ignored.  In fact, a key sequence used for key lookup "
"may designate a mouse event with just its types (a symbol)  instead of the "
"entire event (a list).  @xref{Input Events}.  Such a ``key sequence'' is "
"insufficient for @code{command-execute} to run, but it is sufficient for "
"looking up or rebinding a key."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:941
msgid ""
"When the key sequence consists of multiple events, key lookup processes the "
"events sequentially: the binding of the first event is found, and must be a "
"keymap; then the second event's binding is found in that keymap, and so on "
"until all the events in the key sequence are used up.  (The binding thus "
"found for the last event may or may not be a keymap.)  Thus, the process of "
"key lookup is defined in terms of a simpler process for looking up a single "
"event in a keymap.  How that is done depends on the type of object "
"associated with the event in that keymap."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:949
msgid ""
"Let's use the term @dfn{keymap entry} to describe the value found by looking "
"up an event type in a keymap.  (This doesn't include the item string and "
"other extra elements in a keymap element for a menu item, because @code"
"{lookup-key} and other key lookup functions don't include them in the "
"returned value.)  While any Lisp object may be stored in a keymap as a "
"keymap entry, not all make sense for key lookup.  Here is a table of the "
"meaningful types of keymap entries:"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:952
#, no-wrap
msgid "@code{nil} in keymap"
msgstr ""

# type: table
#: lispref/keymaps.texi:957
msgid ""
"@code{nil} means that the events used so far in the lookup form an undefined "
"key.  When a keymap fails to mention an event type at all, and has no "
"default binding, that is equivalent to a binding of @code{nil} for that "
"event type."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:959
#, no-wrap
msgid "command in keymap"
msgstr ""

# type: table
#: lispref/keymaps.texi:962
msgid ""
"The events used so far in the lookup form a complete key, and @var{command} "
"is its binding.  @xref{What Is a Function}."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:963 lispref/sequences.texi:223
#, no-wrap
msgid "array"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:964
#, no-wrap
msgid "string in keymap"
msgstr ""

# type: table
#: lispref/keymaps.texi:968
msgid ""
"The array (either a string or a vector) is a keyboard macro.  The events "
"used so far in the lookup form a complete key, and the array is its "
"binding.  See @ref{Keyboard Macros}, for more information."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:970
#, no-wrap
msgid "keymap in keymap"
msgstr ""

# type: table
#: lispref/keymaps.texi:973
msgid ""
"The events used so far in the lookup form a prefix key.  The next event of "
"the key sequence is looked up in @var{keymap}."
msgstr ""

# type: var{#1}
#: lispref/keymaps.texi:974
#, no-wrap
msgid "list"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:975
#, no-wrap
msgid "list in keymap"
msgstr ""

# type: table
#: lispref/keymaps.texi:977
msgid "The meaning of a list depends on what it contains:"
msgstr ""

# type: itemize
#: lispref/keymaps.texi:982
msgid ""
"If the @sc{car} of @var{list} is the symbol @code{keymap}, then the list is "
"a keymap, and is treated as a keymap (see above)."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:984
#, no-wrap
msgid "@code{lambda} in keymap"
msgstr ""

# type: itemize
#: lispref/keymaps.texi:990
msgid ""
"If the @sc{car} of @var{list} is @code{lambda}, then the list is a lambda "
"expression.  This is presumed to be a function, and is treated as such (see "
"above).  In order to execute properly as a key binding, this function must "
"be a command---it must have an @code{interactive} specification.  @xref"
"{Defining Commands}."
msgstr ""

# type: itemize
#: lispref/keymaps.texi:994
msgid ""
"If the @sc{car} of @var{list} is a keymap and the @sc{cdr} is an event type, "
"then this is an @dfn{indirect entry}:"
msgstr ""

# type: example
#: lispref/keymaps.texi:997
#, no-wrap
msgid "(@var{othermap} . @var{othertype})\n"
msgstr ""

# type: itemize
#: lispref/keymaps.texi:1001
msgid ""
"When key lookup encounters an indirect entry, it looks up instead the "
"binding of @var{othertype} in @var{othermap} and uses that."
msgstr ""

# type: itemize
#: lispref/keymaps.texi:1006
msgid ""
"This feature permits you to define one key as an alias for another key.  For "
"example, an entry whose @sc{car} is the keymap called @code{esc-map} and "
"whose @sc{cdr} is 32 (the code for @key{SPC}) means, ``Use the global "
"binding of @kbd{Meta-@key{SPC}}, whatever that may be.''"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1009
#, no-wrap
msgid "symbol in keymap"
msgstr ""

# type: table
#: lispref/keymaps.texi:1016
msgid ""
"The function definition of @var{symbol} is used in place of @var{symbol}.  "
"If that too is a symbol, then this process is repeated, any number of "
"times.  Ultimately this should lead to an object that is a keymap, a "
"command, or a keyboard macro.  A list is allowed if it is a keymap or a "
"command, but indirect entries are not understood when found via symbols."
msgstr ""

# type: table
#: lispref/keymaps.texi:1023
msgid ""
"Note that keymaps and keyboard macros (strings and vectors) are not valid "
"functions, so a symbol with a keymap, string, or vector as its function "
"definition is invalid as a function.  It is, however, valid as a key "
"binding.  If the definition is a keyboard macro, then the symbol is also "
"valid as an argument to @code{command-execute} (@pxref{Interactive Call})."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1024
#, no-wrap
msgid "@code{undefined} in keymap"
msgstr ""

# type: table
#: lispref/keymaps.texi:1030
msgid ""
"The symbol @code{undefined} is worth special mention: it means to treat the "
"key as undefined.  Strictly speaking, the key is defined, and its binding is "
"the command @code{undefined}; but that command does the same thing that is "
"done automatically for an undefined key: it rings the bell (by calling @code"
"{ding}) but does not signal an error."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1031
#, no-wrap
msgid "preventing prefix key"
msgstr ""

# type: table
#: lispref/keymaps.texi:1036
msgid ""
"@code{undefined} is used in local keymaps to override a global key binding "
"and make the key ``undefined'' locally.  A local binding of @code{nil} would "
"fail to do this because it would not override the global binding."
msgstr ""

# type: table
#: lispref/keymaps.texi:1041
msgid ""
"If any other type of object is found, the events used so far in the lookup "
"form a complete key, and the object is its binding, but the binding is not "
"executable as a command."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1050
msgid ""
"In short, a keymap entry may be a keymap, a command, a keyboard macro, a "
"symbol that leads to one of them, or an indirection or @code{nil}.  Here is "
"an example of a sparse keymap with two characters bound to commands and one "
"bound to another keymap.  This map is the normal value of @code{emacs-lisp-"
"mode-map}.  Note that 9 is the code for @key{TAB}, 127 for @key{DEL}, 27 for "
"@key{ESC}, 17 for @kbd{C-q} and 24 for @kbd{C-x}."
msgstr ""

# type: group
#: lispref/keymaps.texi:1056
#, no-wrap
msgid ""
"(keymap (9 . lisp-indent-line)\n"
"        (127 . backward-delete-char-untabify)\n"
"        (27 keymap (17 . indent-sexp) (24 . eval-defun)))\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1063
msgid "Here are the functions and variables pertaining to key lookup."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1064
#, no-wrap
msgid "lookup-key keymap key &optional accept-defaults"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1068
msgid ""
"This function returns the definition of @var{key} in @var{keymap}.  All the "
"other functions described in this chapter that look up keys use @code{lookup-"
"key}.  Here are examples:"
msgstr ""

# type: group
#: lispref/keymaps.texi:1073
#, no-wrap
msgid ""
"(lookup-key (current-global-map) \"\\C-x\\C-f\")\n"
"    @result{} find-file\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1077
#, no-wrap
msgid ""
"(lookup-key (current-global-map) (kbd \"C-x C-f\"))\n"
"    @result{} find-file\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1081
#, no-wrap
msgid ""
"(lookup-key (current-global-map) \"\\C-x\\C-f12345\")\n"
"    @result{} 2\n"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1089
msgid ""
"If the string or vector @var{key} is not a valid key sequence according to "
"the prefix keys specified in @var{keymap}, it must be ``too long'' and have "
"extra events at the end that do not fit into a single key sequence.  Then "
"the value is a number, the number of events at the front of @var{key} that "
"compose a complete key."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1097
msgid ""
"If @var{accept-defaults} is non-@code{nil}, then @code{lookup-key} considers "
"default bindings as well as bindings for the specific events in @var{key}.  "
"Otherwise, @code{lookup-key} reports only bindings for the specific sequence "
"@var{key}, ignoring default bindings except when you explicitly ask about "
"them.  (To do this, supply @code{t} as an element of @var{key}; see @ref"
"{Format of Keymaps}.)"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1103
msgid ""
"If @var{key} contains a meta character (not a function key), that character "
"is implicitly replaced by a two-character sequence: the value of @code{meta-"
"prefix-char}, followed by the corresponding non-meta character.  Thus, the "
"first example below is handled by conversion into the second example."
msgstr ""

# type: group
#: lispref/keymaps.texi:1108
#, no-wrap
msgid ""
"(lookup-key (current-global-map) \"\\M-f\")\n"
"    @result{} forward-word\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1112
#, no-wrap
msgid ""
"(lookup-key (current-global-map) \"\\ef\")\n"
"    @result{} forward-word\n"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1119
msgid ""
"Unlike @code{read-key-sequence}, this function does not modify the specified "
"events in ways that discard information (@pxref{Key Sequence Input}).  In "
"particular, it does not convert letters to lower case and it does not change "
"drag events to clicks."
msgstr ""

# type: deffn
#: lispref/keymaps.texi:1121
#, no-wrap
msgid "Command undefined"
msgstr ""

# type: deffn
#: lispref/keymaps.texi:1124
msgid ""
"Used in keymaps to undefine keys.  It calls @code{ding}, but does not cause "
"an error."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1126
#, no-wrap
msgid "local-key-binding key &optional accept-defaults"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1129
msgid ""
"This function returns the binding for @var{key} in the current local keymap, "
"or @code{nil} if it is undefined there."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1133 lispref/keymaps.texi:1142
#: lispref/keymaps.texi:1160
msgid ""
"The argument @var{accept-defaults} controls checking for default bindings, "
"as in @code{lookup-key} (above)."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1135
#, no-wrap
msgid "global-key-binding key &optional accept-defaults"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1138
msgid ""
"This function returns the binding for command @var{key} in the current "
"global keymap, or @code{nil} if it is undefined there."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1145
#, no-wrap
msgid "minor-mode-key-binding key &optional accept-defaults"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1152
msgid ""
"This function returns a list of all the active minor mode bindings of @var"
"{key}.  More precisely, it returns an alist of pairs @code{(@var{modename} . "
"@var{binding})}, where @var{modename} is the variable that enables the minor "
"mode, and @var{binding} is @var{key}'s binding in that mode.  If @var{key} "
"has no minor-mode bindings, the value is @code{nil}."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1157
msgid ""
"If the first binding found is not a prefix definition (a keymap or a symbol "
"defined as a keymap), all subsequent bindings from other minor modes are "
"omitted, since they would be completely shadowed.  Similarly, the list omits "
"non-prefix bindings that follow prefix bindings."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:1162
#, no-wrap
msgid "meta-prefix-char"
msgstr ""

# type: key{#1}
#: lispref/keymaps.texi:1163
#, no-wrap
msgid "ESC"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:1169
msgid ""
"This variable is the meta-prefix character code.  It is used for translating "
"a meta character to a two-character sequence so it can be looked up in a "
"keymap.  For useful results, the value should be a prefix event (@pxref"
"{Prefix Keys}).  The default value is 27, which is the @acronym{ASCII} code "
"for @key{ESC}."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:1177
msgid ""
"As long as the value of @code{meta-prefix-char} remains 27, key lookup "
"translates @kbd{M-b} into @kbd{@key{ESC} b}, which is normally defined as "
"the @code{backward-word} command.  However, if you were to set @code{meta-"
"prefix-char} to 24, the code for @kbd{C-x}, then Emacs will translate @kbd{M-"
"b} into @kbd{C-x b}, whose standard binding is the @code{switch-to-buffer} "
"command.  (Don't actually do this!)  Here is an illustration of what would "
"happen:"
msgstr ""

# type: group
#: lispref/keymaps.texi:1182
#, no-wrap
msgid ""
"meta-prefix-char                    ; @r{The default value.}\n"
"     @result{} 27\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1186
#, no-wrap
msgid ""
"(key-binding \"\\M-b\")\n"
"     @result{} backward-word\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1190
#, no-wrap
msgid ""
"?\\C-x                               ; @r{The print representation}\n"
"     @result{} 24                          ;   @r{of a character.}\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1194
#, no-wrap
msgid ""
"(setq meta-prefix-char 24)\n"
"     @result{} 24\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1199
#, no-wrap
msgid ""
"(key-binding \"\\M-b\")\n"
"     @result{} switch-to-buffer            ; @r{Now, typing @kbd{M-b} is}\n"
"                                    ;   @r{like typing @kbd{C-x b}.}\n"
"\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1202
#, no-wrap
msgid ""
"(setq meta-prefix-char 27)          ; @r{Avoid confusion!}\n"
"     @result{} 27                          ; @r{Restore the default value!}\n"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:1208
msgid ""
"This translation of one event into two happens only for characters, not for "
"other kinds of input events.  Thus, @kbd{M-@key{F1}}, a function key, is not "
"converted into @kbd{@key{ESC} @key{F1}}."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1212
#, no-wrap
msgid "changing key bindings"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1213
#, no-wrap
msgid "rebinding"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1224
msgid ""
"The way to rebind a key is to change its entry in a keymap.  If you change a "
"binding in the global keymap, the change is effective in all buffers (though "
"it has no direct effect in buffers that shadow the global binding with a "
"local one).  If you change the current buffer's local map, that usually "
"affects all buffers using the same major mode.  The @code{global-set-key} "
"and @code{local-set-key} functions are convenient interfaces for these "
"operations (@pxref{Key Binding Commands}).  You can also use @code{define-"
"key}, a more general function; then you must specify explicitly the map to "
"change."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1228
msgid ""
"When choosing the key sequences for Lisp programs to rebind, please follow "
"the Emacs conventions for use of various keys (@pxref{Key Binding "
"Conventions})."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1229
#, no-wrap
msgid "meta character key constants"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1230
#, no-wrap
msgid "control character key constants"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1241
msgid ""
"In writing the key sequence to rebind, it is good to use the special escape "
"sequences for control and meta characters (@pxref{String Type}).  The syntax "
"@samp{\\C-} means that the following character is a control character and "
"@samp{\\M-} means that the following character is a meta character.  Thus, "
"the string @code{\"\\M-x\"} is read as containing a single @kbd{M-x}, @code"
"{\"\\C-f\"} is read as containing a single @kbd{C-f}, and @code{\"\\M-\\C-x"
"\"} and @code{\"\\C-\\M-x\"} are both read as containing a single @kbd{C-M-"
"x}.  You can also use this escape syntax in vectors, as well as others that "
"aren't allowed in strings; one example is @samp{[?\\C-\\H-x home]}.  @xref"
"{Character Type}."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1249
msgid ""
"The key definition and lookup functions accept an alternate syntax for event "
"types in a key sequence that is a vector: you can use a list containing "
"modifier names plus one base event (a character or function key name).  For "
"example, @code{(control ?a)} is equivalent to @code{?\\C-a} and @code{(hyper "
"control left)} is equivalent to @code{C-H-left}.  One advantage of such "
"lists is that the precise numeric codes for the modifier bits don't appear "
"in compiled files."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1255
msgid ""
"The functions below signal an error if @var{keymap} is not a keymap, or if "
"@var{key} is not a string or vector representing a key sequence.  You can "
"use event types (symbols) as shorthand for events that are lists.  The @code"
"{kbd} macro (@pxref{Key Sequences}) is a convenient way to specify the key "
"sequence."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1256
#, no-wrap
msgid "define-key keymap key binding"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1263
msgid ""
"This function sets the binding for @var{key} in @var{keymap}.  (If @var{key} "
"is more than one event long, the change is actually made in another keymap "
"reached from @var{keymap}.)  The argument @var{binding} can be any Lisp "
"object, but only certain types are meaningful.  (For a list of meaningful "
"types, see @ref{Key Lookup}.)  The value returned by @code{define-key} is "
"@var{binding}."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1267
msgid ""
"If @var{key} is @code{[t]}, this sets the default binding in @var{keymap}.  "
"When an event has no binding of its own, the Emacs command loop uses the "
"keymap's default binding, if there is one."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1268
#, no-wrap
msgid "invalid prefix key error"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1269
#, no-wrap
msgid "key sequence error"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1274
msgid ""
"Every prefix of @var{key} must be a prefix key (i.e., bound to a keymap)  or "
"undefined; otherwise an error is signaled.  If some prefix of @var{key} is "
"undefined, then @code{define-key} defines it as a prefix key so that the "
"rest of @var{key} can be defined as specified."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1279
msgid ""
"If there was previously no binding for @var{key} in @var{keymap}, the new "
"binding is added at the beginning of @var{keymap}.  The order of bindings in "
"a keymap makes no difference for keyboard input, but it does matter for menu "
"keymaps (@pxref{Menu Keymaps})."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1283
msgid ""
"This example creates a sparse keymap and makes a number of bindings in it:"
msgstr ""

# type: group
#: lispref/keymaps.texi:1288
#, no-wrap
msgid ""
"(setq map (make-sparse-keymap))\n"
"    @result{} (keymap)\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1292
#, no-wrap
msgid ""
"(define-key map \"\\C-f\" 'forward-char)\n"
"    @result{} forward-char\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1296
#, no-wrap
msgid ""
"map\n"
"    @result{} (keymap (6 . forward-char))\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1302
#, no-wrap
msgid ""
";; @r{Build sparse submap for @kbd{C-x} and bind @kbd{f} in that.}\n"
"(define-key map (kbd \"C-x f\") 'forward-word)\n"
"    @result{} forward-word\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1309
#, no-wrap
msgid ""
"map\n"
"@result{} (keymap\n"
"    (24 keymap                ; @kbd{C-x}\n"
"        (102 . forward-word)) ;      @kbd{f}\n"
"    (6 . forward-char))       ; @kbd{C-f}\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1316
#, no-wrap
msgid ""
";; @r{Bind @kbd{C-p} to the @code{ctl-x-map}.}\n"
"(define-key map (kbd \"C-p\") ctl-x-map)\n"
";; @code{ctl-x-map}\n"
"@result{} [nil @dots{} find-file @dots{} backward-kill-sentence]\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1322
#, no-wrap
msgid ""
";; @r{Bind @kbd{C-f} to @code{foo} in the @code{ctl-x-map}.}\n"
"(define-key map (kbd \"C-p C-f\") 'foo)\n"
"@result{} 'foo\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1330
#, no-wrap
msgid ""
"map\n"
"@result{} (keymap     ; @r{Note @code{foo} in @code{ctl-x-map}.}\n"
"    (16 keymap [nil @dots{} foo @dots{} backward-kill-sentence])\n"
"    (24 keymap\n"
"        (102 . forward-word))\n"
"    (6 . forward-char))\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1338
msgid ""
"Note that storing a new binding for @kbd{C-p C-f} actually works by changing "
"an entry in @code{ctl-x-map}, and this has the effect of changing the "
"bindings of both @kbd{C-p C-f} and @kbd{C-x C-f} in the default global map."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1344
msgid ""
"The function @code{substitute-key-definition} scans a keymap for keys that "
"have a certain binding and rebinds them with a different binding.  Another "
"feature which is cleaner and can often produce the same results to remap one "
"command into another (@pxref{Remapping Commands})."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1345
#, no-wrap
msgid "substitute-key-definition olddef newdef keymap &optional oldmap"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1346
#, no-wrap
msgid "replace bindings"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1351
msgid ""
"This function replaces @var{olddef} with @var{newdef} for any keys in @var"
"{keymap} that were bound to @var{olddef}.  In other words, @var{olddef} is "
"replaced with @var{newdef} wherever it appears.  The function returns @code"
"{nil}."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1354
msgid ""
"For example, this redefines @kbd{C-x C-f}, if you do it in an Emacs with "
"standard bindings:"
msgstr ""

# type: group
#: lispref/keymaps.texi:1359
#, no-wrap
msgid ""
"(substitute-key-definition\n"
" 'find-file 'find-file-read-only (current-global-map))\n"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1368
msgid ""
"If @var{oldmap} is non-@code{nil}, that changes the behavior of @code"
"{substitute-key-definition}: the bindings in @var{oldmap} determine which "
"keys to rebind.  The rebindings still happen in @var{keymap}, not in @var"
"{oldmap}.  Thus, you can change one map under the control of the bindings in "
"another.  For example,"
msgstr ""

# type: smallexample
#: lispref/keymaps.texi:1373
#, no-wrap
msgid ""
"(substitute-key-definition\n"
"  'delete-backward-char 'my-funny-delete\n"
"  my-map global-map)\n"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1378
msgid ""
"puts the special deletion command in @code{my-map} for whichever keys are "
"globally bound to the standard deletion command."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1380
msgid "Here is an example showing a keymap before and after substitution:"
msgstr ""

# type: group
#: lispref/keymaps.texi:1388
#, no-wrap
msgid ""
"(setq map '(keymap\n"
"            (?1 . olddef-1)\n"
"            (?2 . olddef-2)\n"
"            (?3 . olddef-1)))\n"
"@result{} (keymap (49 . olddef-1) (50 . olddef-2) (51 . olddef-1))\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1393
#, no-wrap
msgid ""
"(substitute-key-definition 'olddef-1 'newdef map)\n"
"@result{} nil\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1397
#, no-wrap
msgid ""
"map\n"
"@result{} (keymap (49 . newdef) (50 . olddef-2) (51 . newdef))\n"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1401
#, no-wrap
msgid "suppress-keymap keymap &optional nodigits"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1402
#, no-wrap
msgid "@code{self-insert-command} override"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1408
msgid ""
"This function changes the contents of the full keymap @var{keymap} by "
"remapping @code{self-insert-command} to the command @code{undefined} (@pxref"
"{Remapping Commands}).  This has the effect of undefining all printing "
"characters, thus making ordinary insertion of text impossible.  @code"
"{suppress-keymap} returns @code{nil}."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1413
msgid ""
"If @var{nodigits} is @code{nil}, then @code{suppress-keymap} defines digits "
"to run @code{digit-argument}, and @kbd{-} to run @code{negative-argument}.  "
"Otherwise it makes them undefined like the rest of the printing characters."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1414
#, no-wrap
msgid "yank suppression"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1415
#, no-wrap
msgid "@code{quoted-insert} suppression"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1420
msgid ""
"The @code{suppress-keymap} function does not make it impossible to modify a "
"buffer, as it does not suppress commands such as @code{yank} and @code"
"{quoted-insert}.  To prevent any modification of a buffer, make it read-only "
"(@pxref{Read Only Buffers})."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1426
msgid ""
"Since this function modifies @var{keymap}, you would normally use it on a "
"newly created keymap.  Operating on an existing keymap that is used for some "
"other purpose is likely to cause trouble; for example, suppressing @code"
"{global-map} would make it impossible to use most of Emacs."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1432
msgid ""
"Most often, @code{suppress-keymap} is used to initialize local keymaps of "
"modes such as Rmail and Dired where insertion of text is not desirable and "
"the buffer is read-only.  Here is an example taken from the file @file{emacs/"
"lisp/dired.el}, showing how the local keymap for Dired mode is set up:"
msgstr ""

# type: group
#: lispref/keymaps.texi:1444
#, no-wrap
msgid ""
"(setq dired-mode-map (make-keymap))\n"
"(suppress-keymap dired-mode-map)\n"
"(define-key dired-mode-map \"r\" 'dired-rename-file)\n"
"(define-key dired-mode-map \"\\C-d\" 'dired-flag-file-deleted)\n"
"(define-key dired-mode-map \"d\" 'dired-flag-file-deleted)\n"
"(define-key dired-mode-map \"v\" 'dired-view-file)\n"
"(define-key dired-mode-map \"e\" 'dired-find-file)\n"
"(define-key dired-mode-map \"f\" 'dired-find-file)\n"
"@dots{}\n"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1450
#, no-wrap
msgid "remapping commands"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1460
msgid ""
"A special kind of key binding, using a special ``key sequence'' which "
"includes a command name, has the effect of @dfn{remapping} that command into "
"another.  Here's how it works.  You make a key binding for a key sequence "
"that starts with the dummy event @code{remap}, followed by the command name "
"you want to remap.  Specify the remapped definition as the definition in "
"this binding.  The remapped definition is usually a command name, but it can "
"be any valid definition for a key binding."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1465
msgid ""
"Here's an example.  Suppose that My mode uses special commands @code{my-kill-"
"line} and @code{my-kill-word}, which should be invoked instead of @code{kill-"
"line} and @code{kill-word}.  It can establish this by making these two "
"command-remapping bindings in its keymap:"
msgstr ""

# type: smallexample
#: lispref/keymaps.texi:1469
#, no-wrap
msgid ""
"(define-key my-mode-map [remap kill-line] 'my-kill-line)\n"
"(define-key my-mode-map [remap kill-word] 'my-kill-word)\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1477
msgid ""
"Whenever @code{my-mode-map} is an active keymap, if the user types @kbd{C-"
"k}, Emacs will find the standard global binding of @code{kill-line} "
"(assuming nobody has changed it).  But @code{my-mode-map} remaps @code{kill-"
"line} to @code{my-kill-line}, so instead of running @code{kill-line}, Emacs "
"runs @code{my-kill-line}."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1479
msgid "Remapping only works through a single level.  In other words,"
msgstr ""

# type: smallexample
#: lispref/keymaps.texi:1483
#, no-wrap
msgid ""
"(define-key my-mode-map [remap kill-line] 'my-kill-line)\n"
"(define-key my-mode-map [remap my-kill-line] 'my-other-kill-line)\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1491
msgid ""
"does not have the effect of remapping @code{kill-line} into @code{my-other-"
"kill-line}.  If an ordinary key binding specifies @code{kill-line}, this "
"keymap will remap it to @code{my-kill-line}; if an ordinary binding "
"specifies @code{my-kill-line}, this keymap will remap it to @code{my-other-"
"kill-line}."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1492
#, no-wrap
msgid "command-remapping command &optional position keymaps"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1499
msgid ""
"This function returns the remapping for @var{command} (a symbol), given the "
"current active keymaps.  If @var{command} is not remapped (which is the "
"usual situation), or not a symbol, the function returns @code{nil}.  @code"
"{position} can optionally specify a buffer position or an event position to "
"determine the keymaps to use, as in @code{key-binding}."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1503
msgid ""
"If the optional argument @code{keymaps} is non-@code{nil}, it specifies a "
"list of keymaps to search in.  This argument is ignored if @code{position} "
"is non-@code{nil}."
msgstr ""

# type: section
#: lispref/keymaps.texi:1506
#, no-wrap
msgid "Keymaps for Translating Sequences of Events"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1507
#, no-wrap
msgid "keymaps for translating events"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1514
msgid ""
"This section describes keymaps that are used during reading a key sequence, "
"to translate certain event sequences into others.  @code{read-key-sequence} "
"checks every subsequence of the key sequence being read, as it is read, "
"against @code{function-key-map} and then against @code{key-translation-map}."
msgstr ""

# type: item
#: lispref/keymaps.texi:1515 lispref/maps.texi:115
#, no-wrap
msgid "function-key-map"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:1521
msgid ""
"This variable holds a keymap that describes the character sequences sent by "
"function keys on an ordinary character terminal.  This keymap has the same "
"structure as other keymaps, but is used differently: it specifies "
"translations to make while reading key sequences, rather than bindings for "
"key sequences."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:1525
msgid ""
"If @code{function-key-map} ``binds'' a key sequence @var{k} to a vector @var"
"{v}, then when @var{k} appears as a subsequence @emph{anywhere} in a key "
"sequence, it is replaced with the events in @var{v}."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:1531
msgid ""
"For example, VT100 terminals send @kbd{@key{ESC} O P} when the keypad @key"
"{PF1} key is pressed.  Therefore, we want Emacs to translate that sequence "
"of events into the single event @code{pf1}.  We accomplish this by "
"``binding'' @kbd{@key{ESC} O P} to @code{[pf1]} in @code{function-key-map}, "
"when using a VT100."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:1536
msgid ""
"Thus, typing @kbd{C-c @key{PF1}} sends the character sequence @kbd{C-c @key"
"{ESC} O P}; later the function @code{read-key-sequence} translates this back "
"into @kbd{C-c @key{PF1}}, which it returns as the vector @code{[?\\C-c pf1]}."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:1542
msgid ""
"Entries in @code{function-key-map} are ignored if they conflict with "
"bindings made in the minor mode, local, or global keymaps.  The intent is "
"that the character sequences that function keys send should not have command "
"bindings in their own right---but if they do, the ordinary bindings take "
"priority."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:1549
msgid ""
"The value of @code{function-key-map} is usually set up automatically "
"according to the terminal's Terminfo or Termcap entry, but sometimes those "
"need help from terminal-specific Lisp files.  Emacs comes with terminal-"
"specific files for many common terminals; their main purpose is to make "
"entries in @code{function-key-map} beyond those that can be deduced from "
"Termcap and Terminfo.  @xref{Terminal-Specific}."
msgstr ""

# type: item
#: lispref/keymaps.texi:1551 lispref/maps.texi:159
#, no-wrap
msgid "key-translation-map"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:1555
msgid ""
"This variable is another keymap used just like @code{function-key-map} to "
"translate input events into other events.  It differs from @code{function-"
"key-map} in two ways:"
msgstr ""

# type: itemize
#: lispref/keymaps.texi:1561
msgid ""
"@code{key-translation-map} goes to work after @code{function-key-map} is "
"finished; it receives the results of translation by @code{function-key-map}."
msgstr ""

# type: itemize
#: lispref/keymaps.texi:1567
msgid ""
"Non-prefix bindings in @code{key-translation-map} override actual key "
"bindings.  For example, if @kbd{C-x f} has a non-prefix binding in @code{key-"
"translation-map}, that translation takes effect even though @kbd{C-x f} also "
"has a key binding in the global map."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:1574
msgid ""
"Note however that actual key bindings can have an effect on @code{key-"
"translation-map}, even though they are overridden by it.  Indeed, actual key "
"bindings override @code{function-key-map} and thus may alter the key "
"sequence that @code{key-translation-map} receives.  Clearly, it is better to "
"avoid this type of situation."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:1578
msgid ""
"The intent of @code{key-translation-map} is for users to map one character "
"set to another, including ordinary characters normally bound to @code{self-"
"insert-command}."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1580
#, no-wrap
msgid "key translation function"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1585
msgid ""
"You can use @code{function-key-map} or @code{key-translation-map} for more "
"than simple aliases, by using a function, instead of a key sequence, as the "
"``translation'' of a key.  Then this function is called to compute the "
"translation of that key."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1590
msgid ""
"The key translation function receives one argument, which is the prompt that "
"was specified in @code{read-key-sequence}---or @code{nil} if the key "
"sequence is being read by the editor command loop.  In most cases you can "
"ignore the prompt value."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1594
msgid ""
"If the function reads input itself, it can have the effect of altering the "
"event that follows.  For example, here's how to define @kbd{C-c h} to turn "
"the character that follows into a Hyper character:"
msgstr ""

# type: group
#: lispref/keymaps.texi:1604
#, no-wrap
msgid ""
"(defun hyperify (prompt)\n"
"  (let ((e (read-event)))\n"
"    (vector (if (numberp e)\n"
"                (logior (lsh 1 24) e)\n"
"              (if (memq 'hyper (event-modifiers e))\n"
"                  e\n"
"                (add-event-modifier \"H-\" e))))))\n"
"\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1609
#, no-wrap
msgid ""
"(defun add-event-modifier (string e)\n"
"  (let ((symbol (if (symbolp e) e (car e))))\n"
"    (setq symbol (intern (concat string\n"
"                                 (symbol-name symbol))))\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1614
#, no-wrap
msgid ""
"    (if (symbolp e)\n"
"        symbol\n"
"      (cons symbol (cdr e)))))\n"
"\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1616
#, no-wrap
msgid "(define-key function-key-map \"\\C-ch\" 'hyperify)\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1624
msgid ""
"If you have enabled keyboard character set decoding using @code{set-keyboard-"
"coding-system}, decoding is done after the translations listed above.  @xref"
"{Terminal I/O Encoding}.  However, in future Emacs versions, character set "
"decoding may be done at an earlier stage."
msgstr ""

# type: section
#: lispref/keymaps.texi:1626
#, no-wrap
msgid "Commands for Binding Keys"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1630
msgid ""
"This section describes some convenient interactive interfaces for changing "
"key bindings.  They work by calling @code{define-key}."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1633
msgid ""
"People often use @code{global-set-key} in their init files (@pxref{Init "
"File}) for simple customization.  For example,"
msgstr ""

# type: smallexample
#: lispref/keymaps.texi:1636
#, no-wrap
msgid "(global-set-key (kbd \"C-x C-\\\\\") 'next-line)\n"
msgstr ""

# type: smallexample
#: lispref/keymaps.texi:1643
#, no-wrap
msgid "(global-set-key [?\\C-x ?\\C-\\\\] 'next-line)\n"
msgstr ""

# type: smallexample
#: lispref/keymaps.texi:1650
#, no-wrap
msgid "(global-set-key [(control ?x) (control ?\\\\)] 'next-line)\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1654
msgid "redefines @kbd{C-x C-\\} to move down a line."
msgstr ""

# type: smallexample
#: lispref/keymaps.texi:1657
#, no-wrap
msgid "(global-set-key [M-mouse-1] 'mouse-set-point)\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1662
msgid ""
"redefines the first (leftmost) mouse button, entered with the Meta key, to "
"set point where you click."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1663
#, no-wrap
msgid "non-@acronym{ASCII} text in keybindings"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1668
msgid ""
"Be careful when using non-@acronym{ASCII} text characters in Lisp "
"specifications of keys to bind.  If these are read as multibyte text, as "
"they usually will be in a Lisp file (@pxref{Loading Non-ASCII}), you must "
"type the keys as multibyte too.  For instance, if you use this:"
msgstr ""

# type: smallexample
#: lispref/keymaps.texi:1671
#, no-wrap
msgid "(global-set-key \"@\"o\" 'my-function) ; bind o-umlaut\n"
msgstr ""

# type: smallexample
#: lispref/keymaps.texi:1678
#, no-wrap
msgid "(global-set-key ?@\"o 'my-function) ; bind o-umlaut\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1687
msgid ""
"and your language environment is multibyte Latin-1, these commands actually "
"bind the multibyte character with code 2294, not the unibyte Latin-1 "
"character with code 246 (@kbd{M-v}).  In order to use this binding, you need "
"to enter the multibyte Latin-1 character as keyboard input.  One way to do "
"this is by using an appropriate input method (@pxref{Input Methods, , Input "
"Methods, emacs, The GNU Emacs Manual})."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1691
msgid ""
"If you want to use a unibyte character in the key binding, you can construct "
"the key sequence string using @code{multibyte-char-to-unibyte} or @code"
"{string-make-unibyte} (@pxref{Converting Representations})."
msgstr ""

# type: deffn
#: lispref/keymaps.texi:1692
#, no-wrap
msgid "Command global-set-key key binding"
msgstr ""

# type: deffn
#: lispref/keymaps.texi:1695
msgid ""
"This function sets the binding of @var{key} in the current global map to @var"
"{binding}."
msgstr ""

# type: group
#: lispref/keymaps.texi:1701
#, no-wrap
msgid ""
"(global-set-key @var{key} @var{binding})\n"
"@equiv{}\n"
"(define-key (current-global-map) @var{key} @var{binding})\n"
msgstr ""

# type: deffn
#: lispref/keymaps.texi:1705
#, no-wrap
msgid "Command global-unset-key key"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1706
#, no-wrap
msgid "unbinding keys"
msgstr ""

# type: deffn
#: lispref/keymaps.texi:1709
msgid ""
"This function removes the binding of @var{key} from the current global map."
msgstr ""

# type: deffn
#: lispref/keymaps.texi:1713
msgid ""
"One use of this function is in preparation for defining a longer key that "
"uses @var{key} as a prefix---which would not be allowed if @var{key} has a "
"non-prefix binding.  For example:"
msgstr ""

# type: group
#: lispref/keymaps.texi:1718
#, no-wrap
msgid ""
"(global-unset-key \"\\C-l\")\n"
"    @result{} nil\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1722
#, no-wrap
msgid ""
"(global-set-key \"\\C-l\\C-l\" 'redraw-display)\n"
"    @result{} nil\n"
msgstr ""

# type: deffn
#: lispref/keymaps.texi:1726
msgid "This function is implemented simply using @code{define-key}:"
msgstr ""

# type: group
#: lispref/keymaps.texi:1732
#, no-wrap
msgid ""
"(global-unset-key @var{key})\n"
"@equiv{}\n"
"(define-key (current-global-map) @var{key} nil)\n"
msgstr ""

# type: deffn
#: lispref/keymaps.texi:1736
#, no-wrap
msgid "Command local-set-key key binding"
msgstr ""

# type: deffn
#: lispref/keymaps.texi:1739
msgid ""
"This function sets the binding of @var{key} in the current local keymap to "
"@var{binding}."
msgstr ""

# type: group
#: lispref/keymaps.texi:1745
#, no-wrap
msgid ""
"(local-set-key @var{key} @var{binding})\n"
"@equiv{}\n"
"(define-key (current-local-map) @var{key} @var{binding})\n"
msgstr ""

# type: deffn
#: lispref/keymaps.texi:1749
#, no-wrap
msgid "Command local-unset-key key"
msgstr ""

# type: deffn
#: lispref/keymaps.texi:1752
msgid ""
"This function removes the binding of @var{key} from the current local map."
msgstr ""

# type: group
#: lispref/keymaps.texi:1758
#, no-wrap
msgid ""
"(local-unset-key @var{key})\n"
"@equiv{}\n"
"(define-key (current-local-map) @var{key} nil)\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1767
msgid ""
"This section describes functions used to scan all the current keymaps for "
"the sake of printing help information."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1768
#, no-wrap
msgid "accessible-keymaps keymap &optional prefix"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1774
msgid ""
"This function returns a list of all the keymaps that can be reached (via "
"zero or more prefix keys) from @var{keymap}.  The value is an association "
"list with elements of the form @code{(@var{key} .@: @var{map})}, where @var"
"{key} is a prefix key whose definition in @var{keymap} is @var{map}."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1779
msgid ""
"The elements of the alist are ordered so that the @var{key} increases in "
"length.  The first element is always @code{([] .@: @var{keymap})}, because "
"the specified keymap is accessible from itself with a prefix of no events."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1785
msgid ""
"If @var{prefix} is given, it should be a prefix key sequence; then @code"
"{accessible-keymaps} includes only the submaps whose prefixes start with @var"
"{prefix}.  These elements look just as they do in the value of @code"
"{(accessible-keymaps)}; the only difference is that some elements are "
"omitted."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1790
msgid ""
"In the example below, the returned alist indicates that the key @key{ESC}, "
"which is displayed as @samp{^[}, is a prefix key whose definition is the "
"sparse keymap @code{(keymap (83 .@: center-paragraph)  (115 .@: foo))}."
msgstr ""

# type: group
#: lispref/keymaps.texi:1799
#, no-wrap
msgid ""
"(accessible-keymaps (current-local-map))\n"
"@result{}(([] keymap\n"
"      (27 keymap   ; @r{Note this keymap for @key{ESC} is repeated below.}\n"
"          (83 . center-paragraph)\n"
"          (115 . center-line))\n"
"      (9 . tab-to-tab-stop))\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1805
#, no-wrap
msgid ""
"   (\"^[\" keymap\n"
"    (83 . center-paragraph)\n"
"    (115 . foo)))\n"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1814
msgid ""
"In the following example, @kbd{C-h} is a prefix key that uses a sparse "
"keymap starting with @code{(keymap (118 . describe-variable)@dots{})}.  "
"Another prefix, @kbd{C-x 4}, uses a keymap which is also the value of the "
"variable @code{ctl-x-4-map}.  The event @code{mode-line} is one of several "
"dummy events used as prefixes for mouse actions in special parts of a window."
msgstr ""

# type: group
#: lispref/keymaps.texi:1820
#, no-wrap
msgid ""
"(accessible-keymaps (current-global-map))\n"
"@result{} (([] keymap [set-mark-command beginning-of-line @dots{}\n"
"                   delete-backward-char])\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1824
#, no-wrap
msgid ""
"    (\"^H\" keymap (118 . describe-variable) @dots{}\n"
"     (8 . help-for-help))\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1828
#, no-wrap
msgid ""
"    (\"^X\" keymap [x-flush-mouse-queue @dots{}\n"
"     backward-kill-sentence])\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1832
#, no-wrap
msgid ""
"    (\"^[\" keymap [mark-sexp backward-sexp @dots{}\n"
"     backward-kill-word])\n"
msgstr ""

# type: smallexample
#: lispref/keymaps.texi:1834
#, no-wrap
msgid "    (\"^X4\" keymap (15 . display-buffer) @dots{})\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:1837
#, no-wrap
msgid ""
"    ([mode-line] keymap\n"
"     (S-mouse-2 . mouse-split-window-horizontally) @dots{}))\n"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1842
msgid "These are not all the keymaps you would see in actuality."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1844
#, no-wrap
msgid "map-keymap function keymap"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1851
msgid ""
"The function @code{map-keymap} calls @var{function} once for each binding in "
"@var{keymap}.  It passes two arguments, the event type and the value of the "
"binding.  If @var{keymap} has a parent, the parent's bindings are included "
"as well.  This works recursively: if the parent has itself a parent, then "
"the grandparent's bindings are also included and so on."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1854
msgid ""
"This function is the cleanest way to examine all the bindings in a keymap."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1856
#, no-wrap
msgid "where-is-internal command &optional keymap firstonly noindirect no-remap"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1861
msgid ""
"This function is a subroutine used by the @code{where-is} command (@pxref"
"{Help, , Help, emacs,The GNU Emacs Manual}).  It returns a list of all key "
"sequences (of any length) that are bound to @var{command} in a set of "
"keymaps."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1864
msgid ""
"The argument @var{command} can be any object; it is compared with all keymap "
"entries using @code{eq}."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1870
msgid ""
"If @var{keymap} is @code{nil}, then the maps used are the current active "
"keymaps, disregarding @code{overriding-local-map} (that is, pretending its "
"value is @code{nil}).  If @var{keymap} is a keymap, then the maps searched "
"are @var{keymap} and the global keymap.  If @var{keymap} is a list of "
"keymaps, only those keymaps are searched."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1875
msgid ""
"Usually it's best to use @code{overriding-local-map} as the expression for "
"@var{keymap}.  Then @code{where-is-internal} searches precisely the keymaps "
"that are active.  To search only the global map, pass @code{(keymap)} (an "
"empty keymap) as @var{keymap}."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1883
msgid ""
"If @var{firstonly} is @code{non-ascii}, then the value is a single vector "
"representing the first key sequence found, rather than a list of all "
"possible key sequences.  If @var{firstonly} is @code{t}, then the value is "
"the first key sequence, except that key sequences consisting entirely of "
"@acronym{ASCII} characters (or meta variants of @acronym{ASCII} characters) "
"are preferred to all other key sequences and that the return value can never "
"be a menu binding."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1887
msgid ""
"If @var{noindirect} is non-@code{nil}, @code{where-is-internal} doesn't "
"follow indirect keymap bindings.  This makes it possible to search for an "
"indirect definition itself."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1894
msgid ""
"When command remapping is in effect (@pxref{Remapping Commands}), @code"
"{where-is-internal} figures out when a command will be run due to remapping "
"and reports keys accordingly.  It also returns @code{nil} if @var{command} "
"won't really be run because it has been remapped to some other command.  "
"However, if @var{no-remap} is non-@code{nil}.  @code{where-is-internal} "
"ignores remappings."
msgstr ""

# type: group
#: lispref/keymaps.texi:1900
#, no-wrap
msgid ""
"(where-is-internal 'describe-function)\n"
"    @result{} ([8 102] [f1 102] [help 102]\n"
"         [menu-bar help-menu describe describe-function])\n"
msgstr ""

# type: deffn
#: lispref/keymaps.texi:1904
#, no-wrap
msgid "Command describe-bindings &optional prefix buffer-or-name"
msgstr ""

# type: deffn
#: lispref/keymaps.texi:1908
msgid ""
"This function creates a listing of all current key bindings, and displays it "
"in a buffer named @samp{*Help*}.  The text is grouped by modes---minor modes "
"first, then the major mode, then global bindings."
msgstr ""

# type: deffn
#: lispref/keymaps.texi:1911
msgid ""
"If @var{prefix} is non-@code{nil}, it should be a prefix key; then the "
"listing includes only keys that start with @var{prefix}."
msgstr ""

# type: deffn
#: lispref/keymaps.texi:1914
msgid ""
"The listing describes meta characters as @key{ESC} followed by the "
"corresponding non-meta character."
msgstr ""

# type: deffn
#: lispref/keymaps.texi:1924
msgid ""
"When several characters with consecutive @acronym{ASCII} codes have the same "
"definition, they are shown together, as @samp{@var{firstchar}..@var"
"{lastchar}}.  In this instance, you need to know the @acronym{ASCII} codes "
"to understand which characters this means.  For example, in the default "
"global map, the characters @samp{@key{SPC} ..@: ~} are described by a single "
"line.  @key{SPC} is @acronym{ASCII} 32, @kbd{~} is @acronym{ASCII} 126, and "
"the characters between them include all the normal printing characters, (e."
"g., letters, digits, punctuation, etc.@:); all these characters are bound to "
"@code{self-insert-command}."
msgstr ""

# type: deffn
#: lispref/keymaps.texi:1928
msgid ""
"If @var{buffer-or-name} is non-@code{nil}, it should be a buffer or a buffer "
"name.  Then @code{describe-bindings} lists that buffer's bindings, instead "
"of the current buffer's."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1932
#, no-wrap
msgid "menu keymaps"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1939
msgid ""
"A keymap can operate as a menu as well as defining bindings for keyboard "
"keys and mouse buttons.  Menus are usually actuated with the mouse, but they "
"can function with the keyboard also.  If a menu keymap is active for the "
"next input event, that activates the keyboard menu feature."
msgstr ""

# type: subsection
#: lispref/keymaps.texi:1948 lispref/keymaps.texi:1950
#: lispref/keymaps.texi:1951
#, no-wrap
msgid "Defining Menus"
msgstr ""

# type: menu
#: lispref/keymaps.texi:1948
msgid "How to make a keymap that defines a menu."
msgstr ""

# type: node
#: lispref/keymaps.texi:1948 lispref/keymaps.texi:2300
#, no-wrap
msgid "Mouse Menus"
msgstr ""

# type: menu
#: lispref/keymaps.texi:1948
msgid "How users actuate the menu with the mouse."
msgstr ""

# type: node
#: lispref/keymaps.texi:1948 lispref/keymaps.texi:2336
#, no-wrap
msgid "Keyboard Menus"
msgstr ""

# type: menu
#: lispref/keymaps.texi:1948
msgid "How users actuate the menu with the keyboard."
msgstr ""

# type: subsection
#: lispref/keymaps.texi:1948 lispref/keymaps.texi:2375
#: lispref/keymaps.texi:2376
#, no-wrap
msgid "Menu Example"
msgstr ""

# type: menu
#: lispref/keymaps.texi:1948
msgid "Making a simple menu."
msgstr ""

# type: node
#: lispref/keymaps.texi:1948 lispref/keymaps.texi:2447
#, no-wrap
msgid "Menu Bar"
msgstr ""

# type: menu
#: lispref/keymaps.texi:1948
msgid "How to customize the menu bar."
msgstr ""

# type: node
#: lispref/keymaps.texi:1948 lispref/keymaps.texi:2539
#, no-wrap
msgid "Tool Bar"
msgstr ""

# type: menu
#: lispref/keymaps.texi:1948
msgid "A tool bar is a row of images."
msgstr ""

# type: subsection
#: lispref/keymaps.texi:1948 lispref/keymaps.texi:2740
#: lispref/keymaps.texi:2741
#, no-wrap
msgid "Modifying Menus"
msgstr ""

# type: menu
#: lispref/keymaps.texi:1948
msgid "How to add new items to a menu."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1952
#, no-wrap
msgid "defining menus"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1953
#, no-wrap
msgid "menu prompt string"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:1954
#, no-wrap
msgid "prompt string (of menu)"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1964
msgid ""
"A keymap acts as a menu if it has an @dfn{overall prompt string}, which is a "
"string that appears as an element of the keymap.  (@xref{Format of "
"Keymaps}.)  The string should describe the purpose of the menu's commands.  "
"Emacs displays the overall prompt string as the menu title in some cases, "
"depending on the toolkit (if any) used for displaying menus.@footnote{It is "
"required for menus which do not use a toolkit, e.g.@: under MS-DOS.} "
"Keyboard menus also display the overall prompt string."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1971
msgid ""
"The easiest way to construct a keymap with a prompt string is to specify the "
"string as an argument when you call @code{make-keymap}, @code{make-sparse-"
"keymap} (@pxref{Creating Keymaps}), or @code{define-prefix-command} (@pxref"
"{Definition of define-prefix-command}).  If you do not want the keymap to "
"operate as a menu, don't specify a prompt string for it."
msgstr ""

# type: defun
#: lispref/keymaps.texi:1972
#, no-wrap
msgid "keymap-prompt keymap"
msgstr ""

# type: defun
#: lispref/keymaps.texi:1975
msgid ""
"This function returns the overall prompt string of @var{keymap}, or @code"
"{nil} if it has none."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1983
msgid ""
"The menu's items are the bindings in the keymap.  Each binding associates an "
"event type to a definition, but the event types have no significance for the "
"menu appearance.  (Usually we use pseudo-events, symbols that the keyboard "
"cannot generate, as the event types for menu item bindings.)  The menu is "
"generated entirely from the bindings that correspond in the keymap to these "
"events."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:1990
msgid ""
"The order of items in the menu is the same as the order of bindings in the "
"keymap.  Since @code{define-key} puts new bindings at the front, you should "
"define the menu items starting at the bottom of the menu and moving to the "
"top, if you care about the order.  When you add an item to an existing menu, "
"you can specify its position in the menu using @code{define-key-after} "
"(@pxref{Modifying Menus})."
msgstr ""

# type: subsubsection
#: lispref/keymaps.texi:1999 lispref/keymaps.texi:2001
#: lispref/keymaps.texi:2002
#, no-wrap
msgid "Simple Menu Items"
msgstr ""

# type: menu
#: lispref/keymaps.texi:1999
msgid "A simple kind of menu key binding,"
msgstr ""

# type: menu
#: lispref/keymaps.texi:1999
msgid "limited in capabilities."
msgstr ""

# type: subsubsection
#: lispref/keymaps.texi:1999 lispref/keymaps.texi:2068
#: lispref/keymaps.texi:2069
#, no-wrap
msgid "Extended Menu Items"
msgstr ""

# type: menu
#: lispref/keymaps.texi:1999
msgid "More powerful menu item definitions"
msgstr ""

# type: menu
#: lispref/keymaps.texi:1999
msgid "let you specify keywords to enable"
msgstr ""

# type: menu
#: lispref/keymaps.texi:1999
msgid "various features."
msgstr ""

# type: subsubsection
#: lispref/keymaps.texi:1999 lispref/keymaps.texi:2194
#: lispref/keymaps.texi:2195
#, no-wrap
msgid "Menu Separators"
msgstr ""

# type: menu
#: lispref/keymaps.texi:1999
msgid "Drawing a horizontal line through a menu."
msgstr ""

# type: subsubsection
#: lispref/keymaps.texi:1999 lispref/keymaps.texi:2268
#: lispref/keymaps.texi:2269
#, no-wrap
msgid "Alias Menu Items"
msgstr ""

# type: menu
#: lispref/keymaps.texi:1999
msgid "Using command aliases in menu items."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2006
msgid ""
"The simpler (and original) way to define a menu item is to bind some event "
"type (it doesn't matter what event type) to a binding like this:"
msgstr ""

# type: example
#: lispref/keymaps.texi:2009
#, no-wrap
msgid "(@var{item-string} . @var{real-binding})\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2020
msgid ""
"The @sc{car}, @var{item-string}, is the string to be displayed in the menu.  "
"It should be short---preferably one to three words.  It should describe the "
"action of the command it corresponds to.  Note that it is not generally "
"possible to display non-@acronym{ASCII} text in menus.  It will work for "
"keyboard menus and will work to a large extent when Emacs is built with the "
"Gtk+ toolkit.@footnote{In this case, the text is first encoded using the "
"@code{utf-8} coding system and then rendered by the toolkit as it sees fit.}"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2022
msgid ""
"You can also supply a second string, called the help string, as follows:"
msgstr ""

# type: example
#: lispref/keymaps.texi:2025
#, no-wrap
msgid "(@var{item-string} @var{help} . @var{real-binding})\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2031
msgid ""
"@var{help} specifies a ``help-echo'' string to display while the mouse is on "
"that item in the same way as @code{help-echo} text properties (@pxref{Help "
"display})."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2036
msgid ""
"As far as @code{define-key} is concerned, @var{item-string} and @var{help-"
"string} are part of the event's binding.  However, @code{lookup-key} returns "
"just @var{real-binding}, and only @var{real-binding} is used for executing "
"the key."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2039
msgid ""
"If @var{real-binding} is @code{nil}, then @var{item-string} appears in the "
"menu but cannot be selected."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2047
msgid ""
"If @var{real-binding} is a symbol and has a non-@code{nil} @code{menu-"
"enable} property, that property is an expression that controls whether the "
"menu item is enabled.  Every time the keymap is used to display a menu, "
"Emacs evaluates the expression, and it enables the menu item only if the "
"expression's value is non-@code{nil}.  When a menu item is disabled, it is "
"displayed in a ``fuzzy'' fashion, and cannot be selected."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2052
msgid ""
"The menu bar does not recalculate which items are enabled every time you "
"look at a menu.  This is because the X toolkit requires the whole tree of "
"menus in advance.  To force recalculation of the menu bar, call @code{force-"
"mode-line-update} (@pxref{Mode Line Format})."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2057
msgid ""
"You've probably noticed that menu items show the equivalent keyboard key "
"sequence (if any) to invoke the same command.  To save time on "
"recalculation, menu display caches this information in a sublist in the "
"binding, like this:"
msgstr ""

# type: example
#: lispref/keymaps.texi:2061
#, no-wrap
msgid "(@var{item-string} @r{[}@var{help}@r{]} (@var{key-binding-data}) . @var{real-binding})\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2067
msgid ""
"Don't put these sublists in the menu item yourself; menu display calculates "
"them automatically.  Don't mention keyboard equivalents in the item strings "
"themselves, since that is redundant."
msgstr ""

# type: kindex
#: lispref/keymaps.texi:2070
#, no-wrap
msgid "menu-item"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2076
msgid ""
"An extended-format menu item is a more flexible and also cleaner alternative "
"to the simple format.  You define an event type with a binding that's a list "
"starting with the symbol @code{menu-item}.  For a non-selectable string, the "
"binding looks like this:"
msgstr ""

# type: example
#: lispref/keymaps.texi:2079
#, no-wrap
msgid "(menu-item @var{item-name})\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2084
msgid ""
"A string starting with two or more dashes specifies a separator line; see "
"@ref{Menu Separators}."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2087
msgid ""
"To define a real menu item which can be selected, the extended format "
"binding looks like this:"
msgstr ""

# type: example
#: lispref/keymaps.texi:2091
#, no-wrap
msgid ""
"(menu-item @var{item-name} @var{real-binding}\n"
"    . @var{item-property-list})\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2099
msgid ""
"Here, @var{item-name} is an expression which evaluates to the menu item "
"string.  Thus, the string need not be a constant.  The third element, @var"
"{real-binding}, is the command to execute.  The tail of the list, @var{item-"
"property-list}, has the form of a property list which contains other "
"information."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2102
msgid ""
"When an equivalent keyboard key binding is cached, the extended menu item "
"binding looks like this:"
msgstr ""

# type: example
#: lispref/keymaps.texi:2106
#, no-wrap
msgid ""
"(menu-item @var{item-name} @var{real-binding} (@var{key-binding-data})\n"
"    . @var{item-property-list})\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2109
msgid "Here is a table of the properties that are supported:"
msgstr ""

# type: item
#: lispref/keymaps.texi:2111
#, no-wrap
msgid ":enable @var{form}"
msgstr ""

# type: table
#: lispref/keymaps.texi:2115
msgid ""
"The result of evaluating @var{form} determines whether the item is enabled "
"(non-@code{nil} means yes).  If the item is not enabled, you can't really "
"click on it."
msgstr ""

# type: item
#: lispref/keymaps.texi:2116
#, no-wrap
msgid ":visible @var{form}"
msgstr ""

# type: table
#: lispref/keymaps.texi:2121
msgid ""
"The result of evaluating @var{form} determines whether the item should "
"actually appear in the menu (non-@code{nil} means yes).  If the item does "
"not appear, then the menu is displayed as if this item were not defined at "
"all."
msgstr ""

# type: item
#: lispref/keymaps.texi:2122
#, no-wrap
msgid ":help @var{help}"
msgstr ""

# type: table
#: lispref/keymaps.texi:2128
msgid ""
"The value of this property, @var{help}, specifies a ``help-echo'' string to "
"display while the mouse is on that item.  This is displayed in the same way "
"as @code{help-echo} text properties (@pxref{Help display}).  Note that this "
"must be a constant string, unlike the @code{help-echo} property for text and "
"overlays."
msgstr ""

# type: item
#: lispref/keymaps.texi:2129
#, no-wrap
msgid ":button (@var{type} . @var{selected})"
msgstr ""

# type: table
#: lispref/keymaps.texi:2134
msgid ""
"This property provides a way to define radio buttons and toggle buttons.  "
"The @sc{car}, @var{type}, says which: it should be @code{:toggle} or @code{:"
"radio}.  The @sc{cdr}, @var{selected}, should be a form; the result of "
"evaluating it says whether this button is currently selected."
msgstr ""

# type: table
#: lispref/keymaps.texi:2140
msgid ""
"A @dfn{toggle} is a menu item which is labeled as either ``on'' or ``off'' "
"according to the value of @var{selected}.  The command itself should toggle "
"@var{selected}, setting it to @code{t} if it is @code{nil}, and to @code"
"{nil} if it is @code{t}.  Here is how the menu item to toggle the @code"
"{debug-on-error} flag is defined:"
msgstr ""

# type: example
#: lispref/keymaps.texi:2146
#, no-wrap
msgid ""
"(menu-item \"Debug on Error\" toggle-debug-on-error\n"
"           :button (:toggle\n"
"                    . (and (boundp 'debug-on-error)\n"
"                           debug-on-error)))\n"
msgstr ""

# type: table
#: lispref/keymaps.texi:2151
msgid ""
"This works because @code{toggle-debug-on-error} is defined as a command "
"which toggles the variable @code{debug-on-error}."
msgstr ""

# type: table
#: lispref/keymaps.texi:2158
msgid ""
"@dfn{Radio buttons} are a group of menu items, in which at any time one and "
"only one is ``selected.'' There should be a variable whose value says which "
"one is selected at any time.  The @var{selected} form for each radio button "
"in the group should check whether the variable has the right value for "
"selecting that button.  Clicking on the button should set the variable so "
"that the button you clicked on becomes selected."
msgstr ""

# type: item
#: lispref/keymaps.texi:2159
#, no-wrap
msgid ":key-sequence @var{key-sequence}"
msgstr ""

# type: table
#: lispref/keymaps.texi:2163
msgid ""
"This property specifies which key sequence is likely to be bound to the same "
"command invoked by this menu item.  If you specify the right key sequence, "
"that makes preparing the menu for display run much faster."
msgstr ""

# type: table
#: lispref/keymaps.texi:2167
msgid ""
"If you specify the wrong key sequence, it has no effect; before Emacs "
"displays @var{key-sequence} in the menu, it verifies that @var{key-sequence} "
"is really equivalent to this menu item."
msgstr ""

# type: item
#: lispref/keymaps.texi:2168
#, no-wrap
msgid ":key-sequence nil"
msgstr ""

# type: table
#: lispref/keymaps.texi:2173
msgid ""
"This property indicates that there is normally no key binding which is "
"equivalent to this menu item.  Using this property saves time in preparing "
"the menu for display, because Emacs does not need to search the keymaps for "
"a keyboard equivalent for this menu item."
msgstr ""

# type: table
#: lispref/keymaps.texi:2177
msgid ""
"However, if the user has rebound this item's definition to a key sequence, "
"Emacs ignores the @code{:keys} property and finds the keyboard equivalent "
"anyway."
msgstr ""

# type: item
#: lispref/keymaps.texi:2178
#, no-wrap
msgid ":keys @var{string}"
msgstr ""

# type: table
#: lispref/keymaps.texi:2182
msgid ""
"This property specifies that @var{string} is the string to display as the "
"keyboard equivalent for this menu item.  You can use the @samp{\\\\[...]} "
"documentation construct in @var{string}."
msgstr ""

# type: item
#: lispref/keymaps.texi:2183
#, no-wrap
msgid ":filter @var{filter-fn}"
msgstr ""

# type: table
#: lispref/keymaps.texi:2188
msgid ""
"This property provides a way to compute the menu item dynamically.  The "
"property value @var{filter-fn} should be a function of one argument; when it "
"is called, its argument will be @var{real-binding}.  The function should "
"return the binding to use instead."
msgstr ""

# type: table
#: lispref/keymaps.texi:2192
msgid ""
"Emacs can call this function at any time that it does redisplay or operates "
"on menu data structures, so you should write it so it can safely be called "
"at any time."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:2196
#, no-wrap
msgid "menu separators"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2201
msgid ""
"A menu separator is a kind of menu item that doesn't display any text---"
"instead, it divides the menu into subparts with a horizontal line.  A "
"separator looks like this in the menu keymap:"
msgstr ""

# type: example
#: lispref/keymaps.texi:2204
#, no-wrap
msgid "(menu-item @var{separator-type})\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2208
msgid ""
"where @var{separator-type} is a string starting with two or more dashes."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2212
msgid ""
"In the simplest case, @var{separator-type} consists of only dashes.  That "
"specifies the default kind of separator.  (For compatibility, @code{\"\"} "
"and @code{-} also count as separators.)"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2215
msgid ""
"Certain other values of @var{separator-type} specify a different style of "
"separator.  Here is a table of them:"
msgstr ""

# type: item
#: lispref/keymaps.texi:2217
#, no-wrap
msgid "\"--no-line\""
msgstr ""

# type: itemx
#: lispref/keymaps.texi:2218
#, no-wrap
msgid "\"--space\""
msgstr ""

# type: table
#: lispref/keymaps.texi:2220
msgid "An extra vertical space, with no actual line."
msgstr ""

# type: item
#: lispref/keymaps.texi:2221
#, no-wrap
msgid "\"--single-line\""
msgstr ""

# type: table
#: lispref/keymaps.texi:2223
msgid "A single line in the menu's foreground color."
msgstr ""

# type: item
#: lispref/keymaps.texi:2224
#, no-wrap
msgid "\"--double-line\""
msgstr ""

# type: table
#: lispref/keymaps.texi:2226
msgid "A double line in the menu's foreground color."
msgstr ""

# type: item
#: lispref/keymaps.texi:2227
#, no-wrap
msgid "\"--single-dashed-line\""
msgstr ""

# type: table
#: lispref/keymaps.texi:2229
msgid "A single dashed line in the menu's foreground color."
msgstr ""

# type: item
#: lispref/keymaps.texi:2230
#, no-wrap
msgid "\"--double-dashed-line\""
msgstr ""

# type: table
#: lispref/keymaps.texi:2232
msgid "A double dashed line in the menu's foreground color."
msgstr ""

# type: item
#: lispref/keymaps.texi:2233
#, no-wrap
msgid "\"--shadow-etched-in\""
msgstr ""

# type: table
#: lispref/keymaps.texi:2236
msgid ""
"A single line with a 3D sunken appearance.  This is the default, used "
"separators consisting of dashes only."
msgstr ""

# type: item
#: lispref/keymaps.texi:2237
#, no-wrap
msgid "\"--shadow-etched-out\""
msgstr ""

# type: table
#: lispref/keymaps.texi:2239
msgid "A single line with a 3D raised appearance."
msgstr ""

# type: item
#: lispref/keymaps.texi:2240
#, no-wrap
msgid "\"--shadow-etched-in-dash\""
msgstr ""

# type: table
#: lispref/keymaps.texi:2242
msgid "A single dashed line with a 3D sunken appearance."
msgstr ""

# type: item
#: lispref/keymaps.texi:2243
#, no-wrap
msgid "\"--shadow-etched-out-dash\""
msgstr ""

# type: table
#: lispref/keymaps.texi:2245
msgid "A single dashed line with a 3D raised appearance."
msgstr ""

# type: item
#: lispref/keymaps.texi:2246
#, no-wrap
msgid "\"--shadow-double-etched-in\""
msgstr ""

# type: table
#: lispref/keymaps.texi:2248
msgid "Two lines with a 3D sunken appearance."
msgstr ""

# type: item
#: lispref/keymaps.texi:2249
#, no-wrap
msgid "\"--shadow-double-etched-out\""
msgstr ""

# type: table
#: lispref/keymaps.texi:2251
msgid "Two lines with a 3D raised appearance."
msgstr ""

# type: item
#: lispref/keymaps.texi:2252
#, no-wrap
msgid "\"--shadow-double-etched-in-dash\""
msgstr ""

# type: table
#: lispref/keymaps.texi:2254
msgid "Two dashed lines with a 3D sunken appearance."
msgstr ""

# type: item
#: lispref/keymaps.texi:2255
#, no-wrap
msgid "\"--shadow-double-etched-out-dash\""
msgstr ""

# type: table
#: lispref/keymaps.texi:2257
msgid "Two dashed lines with a 3D raised appearance."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2263
msgid ""
"You can also give these names in another style, adding a colon after the "
"double-dash and replacing each single dash with capitalization of the "
"following word.  Thus, @code{\"--:singleLine\"}, is equivalent to @code{\"--"
"single-line\"}."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2267
msgid ""
"Some systems and display toolkits don't really handle all of these separator "
"types.  If you use a type that isn't supported, the menu displays a similar "
"kind of separator that is supported."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2277
msgid ""
"Sometimes it is useful to make menu items that use the ``same'' command but "
"with different enable conditions.  The best way to do this in Emacs now is "
"with extended menu items; before that feature existed, it could be done by "
"defining alias commands and using them in menu items.  Here's an example "
"that makes two aliases for @code{toggle-read-only} and gives them different "
"enable conditions:"
msgstr ""

# type: example
#: lispref/keymaps.texi:2283
#, no-wrap
msgid ""
"(defalias 'make-read-only 'toggle-read-only)\n"
"(put 'make-read-only 'menu-enable '(not buffer-read-only))\n"
"(defalias 'make-writable 'toggle-read-only)\n"
"(put 'make-writable 'menu-enable 'buffer-read-only)\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2290
msgid ""
"When using aliases in menus, often it is useful to display the equivalent "
"key bindings for the ``real'' command name, not the aliases (which typically "
"don't have any key bindings except for the menu itself).  To request this, "
"give the alias symbol a non-@code{nil} @code{menu-alias} property.  Thus,"
msgstr ""

# type: example
#: lispref/keymaps.texi:2294
#, no-wrap
msgid ""
"(put 'make-read-only 'menu-alias t)\n"
"(put 'make-writable 'menu-alias t)\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2299
msgid ""
"causes menu items for @code{make-read-only} and @code{make-writable} to show "
"the keyboard bindings for @code{toggle-read-only}."
msgstr ""

# type: subsection
#: lispref/keymaps.texi:2301
#, no-wrap
msgid "Menus and the Mouse"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2306
msgid ""
"The usual way to make a menu keymap produce a menu is to make it the "
"definition of a prefix key.  (A Lisp program can explicitly pop up a menu "
"and receive the user's choice---see @ref{Pop-Up Menus}.)"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2313
msgid ""
"If the prefix key ends with a mouse event, Emacs handles the menu keymap by "
"popping up a visible menu, so that the user can select a choice with the "
"mouse.  When the user clicks on a menu item, the event generated is whatever "
"character or symbol has the binding that brought about that menu item.  (A "
"menu item may generate a series of events if the menu has multiple levels or "
"comes from the menu bar.)"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2316
msgid ""
"It's often best to use a button-down event to trigger the menu.  Then the "
"user can select a menu item by releasing the button."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2326
msgid ""
"A single keymap can appear as multiple menu panes, if you explicitly arrange "
"for this.  The way to do this is to make a keymap for each pane, then create "
"a binding for each of those maps in the main keymap of the menu.  Give each "
"of these bindings an item string that starts with @samp{@@}.  The rest of "
"the item string becomes the name of the pane.  See the file @file{lisp/mouse."
"el} for an example of this.  Any ordinary bindings with @samp{@@}-less item "
"strings are grouped into one pane, which appears along with the other panes "
"explicitly created for the submaps."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2332
msgid ""
"X toolkit menus don't have panes; instead, they can have submenus.  Every "
"nested keymap becomes a submenu, whether the item string starts with @samp"
"{@@} or not.  In a toolkit version of Emacs, the only thing special about "
"@samp{@@} at the beginning of an item string is that the @samp{@@} doesn't "
"appear in the menu item."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2335
msgid ""
"Multiple keymaps that define the same menu prefix key produce separate panes "
"or separate submenus."
msgstr ""

# type: subsection
#: lispref/keymaps.texi:2337
#, no-wrap
msgid "Menus and the Keyboard"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2343
msgid ""
"When a prefix key ending with a keyboard event (a character or function key) "
"has a definition that is a menu keymap, the keymap operates as a keyboard "
"menu; the user specifies the next event by choosing a menu item with the "
"keyboard."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2352
msgid ""
"Emacs displays the keyboard menu with the map's overall prompt string, "
"followed by the alternatives (the item strings of the map's bindings), in "
"the echo area.  If the bindings don't all fit at once, the user can type @key"
"{SPC} to see the next line of alternatives.  Successive uses of @key{SPC} "
"eventually get to the end of the menu and then cycle around to the "
"beginning.  (The variable @code{menu-prompt-more-char} specifies which "
"character is used for this; @key{SPC} is the default.)"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2356
msgid ""
"When the user has found the desired alternative from the menu, he or she "
"should type the corresponding character---the one whose binding is that "
"alternative."
msgstr ""

# type: ignore
#: lispref/keymaps.texi:2364
#, no-wrap
msgid ""
"In a menu intended for keyboard use, each menu item must clearly\n"
"indicate what character to type.  The best convention to use is to make\n"
"the character the first letter of the item string---that is something\n"
"users will understand without being told.  We plan to change this; by\n"
"the time you read this manual, keyboard menus may explicitly name the\n"
"key for each alternative.\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2368
msgid ""
"This way of using menus in an Emacs-like editor was inspired by the "
"Hierarkey system."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:2369
#, no-wrap
msgid "menu-prompt-more-char"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:2373
msgid ""
"This variable specifies the character to use to ask to see the next line of "
"a menu.  Its initial value is 32, the code for @key{SPC}."
msgstr ""

# type: cindex
#: lispref/keymaps.texi:2377
#, no-wrap
msgid "menu definition example"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2384
msgid ""
"Here is a complete example of defining a menu keymap.  It is the definition "
"of the @samp{Replace} submenu in the @samp{Edit} menu in the menu bar, and "
"it uses the extended menu item format (@pxref{Extended Menu Items}).  First "
"we create the keymap, and give it a name:"
msgstr ""

# type: smallexample
#: lispref/keymaps.texi:2387
#, no-wrap
msgid "(defvar menu-bar-replace-menu (make-sparse-keymap \"Replace\"))\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2391
msgid "Next we define the menu items:"
msgstr ""

# type: smallexample
#: lispref/keymaps.texi:2402
#, no-wrap
msgid ""
"(define-key menu-bar-replace-menu [tags-repl-continue]\n"
"  '(menu-item \"Continue Replace\" tags-loop-continue\n"
"\t      :help \"Continue last tags replace operation\"))\n"
"(define-key menu-bar-replace-menu [tags-repl]\n"
"  '(menu-item \"Replace in tagged files\" tags-query-replace\n"
"\t      :help \"Interactively replace a regexp in all tagged files\"))\n"
"(define-key menu-bar-replace-menu [separator-replace-tags]\n"
"  '(menu-item \"--\"))\n"
";; @r{@dots{}}\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2413
msgid ""
"Note the symbols which the bindings are ``made for''; these appear inside "
"square brackets, in the key sequence being defined.  In some cases, this "
"symbol is the same as the command name; sometimes it is different.  These "
"symbols are treated as ``function keys,'' but they are not real function "
"keys on the keyboard.  They do not affect the functioning of the menu "
"itself, but they are ``echoed'' in the echo area when the user selects from "
"the menu, and they appear in the output of @code{where-is} and @code"
"{apropos}."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2419
msgid ""
"The menu in this example is intended for use with the mouse.  If a menu is "
"intended for use with the keyboard, that is, if it is bound to a key "
"sequence ending with a keyboard event, then the menu items should be bound "
"to characters or ``real'' function keys, that can be typed with the keyboard."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2424
msgid ""
"The binding whose definition is @code{(\"--\")} is a separator line.  Like a "
"real menu item, the separator has a key symbol, in this case @code{separator-"
"replace-tags}.  If one menu has two separators, they must have two different "
"key symbols."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2426
msgid "Here is how we make this menu appear as an item in the parent menu:"
msgstr ""

# type: example
#: lispref/keymaps.texi:2430
#, no-wrap
msgid ""
"(define-key menu-bar-edit-menu [replace]\n"
"  (list 'menu-item \"Replace\" menu-bar-replace-menu))\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2438
msgid ""
"Note that this incorporates the submenu keymap, which is the value of the "
"variable @code{menu-bar-replace-menu}, rather than the symbol @code{menu-bar-"
"replace-menu} itself.  Using that symbol in the parent menu item would be "
"meaningless because @code{menu-bar-replace-menu} is not a command."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2441
msgid ""
"If you wanted to attach the same replace menu to a mouse click, you can do "
"it this way:"
msgstr ""

# type: example
#: lispref/keymaps.texi:2445
#, no-wrap
msgid ""
"(define-key global-map [C-S-down-mouse-1]\n"
"   menu-bar-replace-menu)\n"
msgstr ""

# type: subsection
#: lispref/keymaps.texi:2448
#, no-wrap
msgid "The Menu Bar"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:2449
#, no-wrap
msgid "menu bar"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2455
msgid ""
"Most window systems allow each frame to have a @dfn{menu bar}---a "
"permanently displayed menu stretching horizontally across the top of the "
"frame.  The items of the menu bar are the subcommands of the fake ``function "
"key'' @code{menu-bar}, as defined in the active keymaps."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2460
msgid ""
"To add an item to the menu bar, invent a fake ``function key'' of your own "
"(let's call it @var{key}), and make a binding for the key sequence @code"
"{[menu-bar @var{key}]}.  Most often, the binding is a menu keymap, so that "
"pressing a button on the menu bar item leads to another menu."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2466
msgid ""
"When more than one active keymap defines the same fake function key for the "
"menu bar, the item appears just once.  If the user clicks on that menu bar "
"item, it brings up a single, combined menu containing all the subcommands of "
"that item---the global subcommands, the local subcommands, and the minor "
"mode subcommands."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2471
msgid ""
"The variable @code{overriding-local-map} is normally ignored when "
"determining the menu bar contents.  That is, the menu bar is computed from "
"the keymaps that would be active if @code{overriding-local-map} were @code"
"{nil}.  @xref{Active Keymaps}."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2478
msgid ""
"In order for a frame to display a menu bar, its @code{menu-bar-lines} "
"parameter must be greater than zero.  Emacs uses just one line for the menu "
"bar itself; if you specify more than one line, the other lines serve to "
"separate the menu bar from the windows in the frame.  We recommend 1 or 2 as "
"the value of @code{menu-bar-lines}.  @xref{Layout Parameters}."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2480
msgid "Here's an example of setting up a menu bar item:"
msgstr ""

# type: group
#: lispref/keymaps.texi:2485
#, no-wrap
msgid ""
"(modify-frame-parameters (selected-frame)\n"
"                         '((menu-bar-lines . 2)))\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:2492
#, no-wrap
msgid ""
";; @r{Make a menu keymap (with a prompt string)}\n"
";; @r{and make it the menu bar item's definition.}\n"
"(define-key global-map [menu-bar words]\n"
"  (cons \"Words\" (make-sparse-keymap \"Words\")))\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:2499
#, no-wrap
msgid ""
";; @r{Define specific subcommands in this menu.}\n"
"(define-key global-map\n"
"  [menu-bar words forward]\n"
"  '(\"Forward word\" . forward-word))\n"
msgstr ""

# type: group
#: lispref/keymaps.texi:2504
#, no-wrap
msgid ""
"(define-key global-map\n"
"  [menu-bar words backward]\n"
"  '(\"Backward word\" . backward-word))\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2511
msgid ""
"A local keymap can cancel a menu bar item made by the global keymap by "
"rebinding the same fake function key with @code{undefined} as the binding.  "
"For example, this is how Dired suppresses the @samp{Edit} menu bar item:"
msgstr ""

# type: example
#: lispref/keymaps.texi:2514
#, no-wrap
msgid "(define-key dired-mode-map [menu-bar edit] 'undefined)\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2520
msgid ""
"@code{edit} is the fake function key used by the global map for the @samp"
"{Edit} menu bar item.  The main reason to suppress a global menu bar item is "
"to regain space for mode-specific items."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:2521
#, no-wrap
msgid "menu-bar-final-items"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:2524
msgid ""
"Normally the menu bar shows global items followed by items defined by the "
"local maps."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:2529
msgid ""
"This variable holds a list of fake function keys for items to display at the "
"end of the menu bar rather than in normal sequence.  The default value is "
"@code{(help-menu)}; thus, the @samp{Help} menu item normally appears at the "
"end of the menu bar, following local menu items."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:2537
msgid ""
"This normal hook is run by redisplay to update the menu bar contents, before "
"redisplaying the menu bar.  You can use it to update submenus whose contents "
"should vary.  Since this hook is run frequently, we advise you to ensure "
"that the functions it calls do not take much time in the usual case."
msgstr ""

# type: subsection
#: lispref/keymaps.texi:2540
#, no-wrap
msgid "Tool bars"
msgstr ""

# type: cindex
#: lispref/keymaps.texi:2541
#, no-wrap
msgid "tool bar"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2546
msgid ""
"A @dfn{tool bar} is a row of icons at the top of a frame, that execute "
"commands when you click on them---in effect, a kind of graphical menu bar."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2552
msgid ""
"The frame parameter @code{tool-bar-lines} (X resource @samp{toolBar})  "
"controls how many lines' worth of height to reserve for the tool bar.  A "
"zero value suppresses the tool bar.  If the value is nonzero, and @code{auto-"
"resize-tool-bars} is non-@code{nil}, the tool bar expands and contracts "
"automatically as needed to hold the specified contents."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2557
msgid ""
"If the value of @code{auto-resize-tool-bars} is @code{grow-only}, the tool "
"bar expands automatically, but does not contract automatically.  To contract "
"the tool bar, the user has to redraw the frame by entering @kbd{C-l}."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2562
msgid ""
"The tool bar contents are controlled by a menu keymap attached to a fake "
"``function key'' called @code{tool-bar} (much like the way the menu bar is "
"controlled).  So you define a tool bar item using @code{define-key}, like "
"this:"
msgstr ""

# type: example
#: lispref/keymaps.texi:2565
#, no-wrap
msgid "(define-key global-map [tool-bar @var{key}] @var{item})\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2571
msgid ""
"where @var{key} is a fake ``function key'' to distinguish this item from "
"other items, and @var{item} is a menu item key binding (@pxref{Extended Menu "
"Items}), which says how to display this item and how it behaves."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2577
msgid ""
"The usual menu keymap item properties, @code{:visible}, @code{:enable}, @code"
"{:button}, and @code{:filter}, are useful in tool bar bindings and have "
"their normal meanings.  The @var{real-binding} in the item must be a "
"command, not a keymap; in other words, it does not work to define a tool bar "
"icon as a prefix key."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2581
msgid ""
"The @code{:help} property specifies a ``help-echo'' string to display while "
"the mouse is on that item.  This is displayed in the same way as @code{help-"
"echo} text properties (@pxref{Help display})."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2584
msgid ""
"In addition, you should use the @code{:image} property; this is how you "
"specify the image to display in the tool bar:"
msgstr ""

# type: item
#: lispref/keymaps.texi:2586
#, no-wrap
msgid ":image @var{image}"
msgstr ""

# type: table
#: lispref/keymaps.texi:2590
msgid ""
"@var{images} is either a single image specification or a vector of four "
"image specifications.  If you use a vector of four, one of them is used, "
"depending on circumstances:"
msgstr ""

# type: item
#: lispref/keymaps.texi:2592
#, no-wrap
msgid "item 0"
msgstr ""

# type: table
#: lispref/keymaps.texi:2594
msgid "Used when the item is enabled and selected."
msgstr ""

# type: item
#: lispref/keymaps.texi:2594
#, no-wrap
msgid "item 1"
msgstr ""

# type: table
#: lispref/keymaps.texi:2596
msgid "Used when the item is enabled and deselected."
msgstr ""

# type: item
#: lispref/keymaps.texi:2596
#, no-wrap
msgid "item 2"
msgstr ""

# type: table
#: lispref/keymaps.texi:2598
msgid "Used when the item is disabled and selected."
msgstr ""

# type: item
#: lispref/keymaps.texi:2598
#, no-wrap
msgid "item 3"
msgstr ""

# type: table
#: lispref/keymaps.texi:2600
msgid "Used when the item is disabled and deselected."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2606
msgid ""
"If @var{image} is a single image specification, Emacs draws the tool bar "
"button in disabled state by applying an edge-detection algorithm to the "
"image."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2615
msgid ""
"The default tool bar is defined so that items specific to editing do not "
"appear for major modes whose command symbol has a @code{mode-class} property "
"of @code{special} (@pxref{Major Mode Conventions}).  Major modes may add "
"items to the global bar by binding @code{[tool-bar @var{foo}]} in their "
"local map.  It makes sense for some major modes to replace the default tool "
"bar items completely, since not many can be accommodated conveniently, and "
"the default bindings make this easy by using an indirection through @code"
"{tool-bar-map}."
msgstr ""

# type: item
#: lispref/keymaps.texi:2616 lispref/maps.texi:220
#, no-wrap
msgid "tool-bar-map"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:2618
msgid "By default, the global map binds @code{[tool-bar]} as follows:"
msgstr ""

# type: example
#: lispref/keymaps.texi:2622
#, no-wrap
msgid ""
"(global-set-key [tool-bar]\n"
"\t\t'(menu-item \"tool bar\" ignore\n"
"\t\t\t    :filter (lambda (ignore) tool-bar-map)))\n"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:2630
msgid ""
"Thus the tool bar map is derived dynamically from the value of variable @code"
"{tool-bar-map} and you should normally adjust the default (global)  tool bar "
"by changing that map.  Major modes may replace the global bar completely by "
"making @code{tool-bar-map} buffer-local and set to a keymap containing only "
"the desired items.  Info mode provides an example."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2634
msgid ""
"There are two convenience functions for defining tool bar items, as follows."
msgstr ""

# type: defun
#: lispref/keymaps.texi:2635
#, no-wrap
msgid "tool-bar-add-item icon def key &rest props"
msgstr ""

# type: defun
#: lispref/keymaps.texi:2646
msgid ""
"This function adds an item to the tool bar by modifying @code{tool-bar-"
"map}.  The image to use is defined by @var{icon}, which is the base name of "
"an XPM, XBM or PBM image file to be located by @code{find-image}.  Given a "
"value @samp{\"exit\"}, say, @file{exit.xpm}, @file{exit.pbm} and @file{exit."
"xbm} would be searched for in that order on a color display.  On a "
"monochrome display, the search order is @samp{.pbm}, @samp{.xbm} and @samp{."
"xpm}.  The binding to use is the command @var{def}, and @var{key} is the "
"fake function key symbol in the prefix keymap.  The remaining arguments @var"
"{props} are additional property list elements to add to the menu item "
"specification."
msgstr ""

# type: defun
#: lispref/keymaps.texi:2649
msgid ""
"To define items in some local map, bind @code{tool-bar-map} with @code{let} "
"around calls of this function:"
msgstr ""

# type: example
#: lispref/keymaps.texi:2655
#, no-wrap
msgid ""
"(defvar foo-tool-bar-map\n"
"  (let ((tool-bar-map (make-sparse-keymap)))\n"
"    (tool-bar-add-item @dots{})\n"
"    @dots{}\n"
"    tool-bar-map))\n"
msgstr ""

# type: defun
#: lispref/keymaps.texi:2658
#, no-wrap
msgid "tool-bar-add-item-from-menu command icon &optional map &rest props"
msgstr ""

# type: defun
#: lispref/keymaps.texi:2667
msgid ""
"This function is a convenience for defining tool bar items which are "
"consistent with existing menu bar bindings.  The binding of @var{command} is "
"looked up in the menu bar in @var{map} (default @code{global-map}) and "
"modified to add an image specification for @var{icon}, which is found in the "
"same way as by @code{tool-bar-add-item}.  The resulting binding is then "
"placed in @code{tool-bar-map}, so use this function only for global tool bar "
"items."
msgstr ""

# type: defun
#: lispref/keymaps.texi:2671
msgid ""
"@var{map} must contain an appropriate keymap bound to @code{[menu-bar]}.  "
"The remaining arguments @var{props} are additional property list elements to "
"add to the menu item specification."
msgstr ""

# type: defun
#: lispref/keymaps.texi:2673
#, no-wrap
msgid "tool-bar-local-item-from-menu command icon in-map &optional from-map &rest props"
msgstr ""

# type: defun
#: lispref/keymaps.texi:2679
msgid ""
"This function is used for making non-global tool bar items.  Use it like "
"@code{tool-bar-add-item-from-menu} except that @var{in-map} specifies the "
"local map to make the definition in.  The argument @var{from-map} is like "
"the @var{map} argument of @code{tool-bar-add-item-from-menu}."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:2681
#, no-wrap
msgid "auto-resize-tool-bar"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:2685
msgid ""
"If this variable is non-@code{nil}, the tool bar automatically resizes to "
"show all defined tool bar items---but not larger than a quarter of the "
"frame's height."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:2689
msgid ""
"If the value is @code{grow-only}, the tool bar expands automatically, but "
"does not contract automatically.  To contract the tool bar, the user has to "
"redraw the frame by entering @kbd{C-l}."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:2691
#, no-wrap
msgid "auto-raise-tool-bar-buttons"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:2694
msgid ""
"If this variable is non-@code{nil}, tool bar items display in raised form "
"when the mouse moves over them."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:2696
#, no-wrap
msgid "tool-bar-button-margin"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:2699
msgid ""
"This variable specifies an extra margin to add around tool bar items.  The "
"value is an integer, a number of pixels.  The default is 4."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:2701
#, no-wrap
msgid "tool-bar-button-relief"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:2704
msgid ""
"This variable specifies the shadow width for tool bar items.  The value is "
"an integer, a number of pixels.  The default is 1."
msgstr ""

# type: defvar
#: lispref/keymaps.texi:2706
#, no-wrap
msgid "tool-bar-border"
msgstr ""

# type: defvar
#: lispref/keymaps.texi:2712
msgid ""
"This variable specifies the height of the border drawn below the tool bar "
"area.  An integer value specifies height as a number of pixels.  If the "
"value is one of @code{internal-border-width} (the default) or @code{border-"
"width}, the tool bar border height corresponds to the corresponding frame "
"parameter."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2720
msgid ""
"You can define a special meaning for clicking on a tool bar item with the "
"shift, control, meta, etc., modifiers.  You do this by setting up additional "
"items that relate to the original item through the fake function keys.  "
"Specifically, the additional items should use the modified versions of the "
"same fake function key used to name the original item."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2722
msgid "Thus, if the original item was defined this way,"
msgstr ""

# type: example
#: lispref/keymaps.texi:2727
#, no-wrap
msgid ""
"(define-key global-map [tool-bar shell]\n"
"  '(menu-item \"Shell\" shell\n"
"              :image (image :type xpm :file \"shell.xpm\")))\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2732
msgid ""
"then here is how you can define clicking on the same tool bar image with the "
"shift modifier:"
msgstr ""

# type: example
#: lispref/keymaps.texi:2735
#, no-wrap
msgid "(define-key global-map [tool-bar S-shell] 'some-command)\n"
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2739
msgid ""
"@xref{Function Keys}, for more information about how to add modifiers to "
"function keys."
msgstr ""

# type: Plain text
#: lispref/keymaps.texi:2747
msgid ""
"When you insert a new item in an existing menu, you probably want to put it "
"in a particular place among the menu's existing items.  If you use @code"
"{define-key} to add the item, it normally goes at the front of the menu.  To "
"put it elsewhere in the menu, use @code{define-key-after}:"
msgstr ""

# type: defun
#: lispref/keymaps.texi:2748
#, no-wrap
msgid "define-key-after map key binding &optional after"
msgstr ""

# type: defun
#: lispref/keymaps.texi:2758
msgid ""
"Define a binding in @var{map} for @var{key}, with value @var{binding}, just "
"like @code{define-key}, but position the binding in @var{map} after the "
"binding for the event @var{after}.  The argument @var{key} should be of "
"length one---a vector or string with just one element.  But @var{after} "
"should be a single event type---a symbol or a character, not a sequence.  "
"The new binding goes after the binding for @var{after}.  If @var{after} is "
"@code{t} or is omitted, then the new binding goes last, at the end of the "
"keymap.  However, new bindings are added before any inherited keymap."
msgstr ""

# type: example
#: lispref/keymaps.texi:2764
#, no-wrap
msgid ""
"(define-key-after my-menu [drink]\n"
"  '(\"Drink\" . drink-command) 'eat)\n"
msgstr ""

# type: defun
#: lispref/keymaps.texi:2769
msgid ""
"makes a binding for the fake function key @key{DRINK} and puts it right "
"after the binding for @key{EAT}."
msgstr ""

# type: defun
#: lispref/keymaps.texi:2772
msgid ""
"Here is how to insert an item called @samp{Work} in the @samp{Signals} menu "
"of Shell mode, after the item @code{break}:"
msgstr ""

# type: example
#: lispref/keymaps.texi:2777
#, no-wrap
msgid ""
"(define-key-after\n"
"  (lookup-key shell-mode-map [menu-bar signals])\n"
"  [work] '(\"Work\" . work-command) 'break)\n"
msgstr ""

# type: ignore
#: lispref/keymaps.texi:2782
#, no-wrap
msgid "   arch-tag: cfb87287-9364-4e46-9e93-6c2f7f6ae794\n"
msgstr "   arch-tag: cfb87287-9364-4e46-9e93-6c2f7f6ae794\n"

# type: settitle
#: lispref/lay-flat.texi:9
#, no-wrap
msgid "Inner Covers"
msgstr ""

# type: tex
#: lispref/lay-flat.texi:19
#, no-wrap
msgid "\\center {\\secfonts \\rm Lay-Flat Binding}\n"
msgstr ""

# type: Plain text
#: lispref/lay-flat.texi:25
msgid ""
"We have bound this manual using a new @dfn{lay-flat} binding technology.  "
"This type of binding allows you to open a soft cover book so that it ``lays "
"flat'' on a table without creasing the binding."
msgstr ""

# type: Plain text
#: lispref/lay-flat.texi:36
msgid ""
"In order to make the book lay flat properly, you need to ``crack'' the "
"binding.  To do this, divide the book into two sections and bend it so that "
"the front and back covers meet.  Do not worry; the pages are sewn and glued "
"to the binding, and will not fall out easily.  The outer cardboard binding "
"itself is designed so that it will not break or crease as an ordinary "
"paperback binding will.  Bend the book several times in this manner, "
"dividing it in a different place each time and pressing the pages flat and "
"open.  With use, the binding will become flexible and the pages will lay "
"flat without needing to be pushed or held down."
msgstr ""

# type: tex
#: lispref/lay-flat.texi:42
#, no-wrap
msgid "\\center {\\secfonts \\rm Notes}\n"
msgstr ""

# type: ignore
#: lispref/lay-flat.texi:48
#, no-wrap
msgid "   arch-tag: 9e03a1c7-6f62-4346-85d9-ed5b79386e07\n"
msgstr "   arch-tag: 9e03a1c7-6f62-4346-85d9-ed5b79386e07\n"

# type: cindex
#: lispref/lists.texi:9
#, no-wrap
msgid "lists"
msgstr ""

# type: cindex
#: lispref/lists.texi:10
#, no-wrap
msgid "element (of list)"
msgstr ""

# type: Plain text
#: lispref/lists.texi:17
msgid ""
"A @dfn{list} represents a sequence of zero or more elements (which may be "
"any Lisp objects).  The important difference between lists and vectors is "
"that two or more lists can share part of their structure; in addition, you "
"can insert or delete elements in a list without copying the whole list."
msgstr ""

# type: menu
#: lispref/lists.texi:28 lispref/lists.texi:30 lispref/vol1.texi:380
#: lispref/vol2.texi:381
#, no-wrap
msgid "Cons Cells"
msgstr ""

# type: menu
#: lispref/lists.texi:28 lispref/vol1.texi:380 lispref/vol2.texi:381
msgid "How lists are made out of cons cells."
msgstr ""

# type: menu
#: lispref/lists.texi:28 lispref/lists.texi:91 lispref/vol1.texi:380
#: lispref/vol2.texi:381
#, no-wrap
msgid "List-related Predicates"
msgstr ""

# type: menu
#: lispref/lists.texi:28 lispref/vol1.texi:380 lispref/vol2.texi:381
msgid "Is this object a list"
msgstr ""

# type: menu
#: lispref/lists.texi:28 lispref/vol1.texi:380 lispref/vol2.texi:381
msgid "Comparing two lists."
msgstr ""

# type: menu
#: lispref/lists.texi:28 lispref/lists.texi:161 lispref/vol1.texi:380
#: lispref/vol2.texi:381
#, no-wrap
msgid "List Elements"
msgstr ""

# type: menu
#: lispref/lists.texi:28 lispref/vol1.texi:380 lispref/vol2.texi:381
msgid "Extracting the pieces of a list."
msgstr ""

# type: menu
#: lispref/lists.texi:28 lispref/lists.texi:377 lispref/vol1.texi:380
#: lispref/vol2.texi:381
#, no-wrap
msgid "Building Lists"
msgstr ""

# type: menu
#: lispref/lists.texi:28 lispref/vol1.texi:380 lispref/vol2.texi:381
msgid "Creating list structure."
msgstr ""

# type: node
#: lispref/lists.texi:28 lispref/lists.texi:691
#, no-wrap
msgid "List Variables"
msgstr ""

# type: menu
#: lispref/lists.texi:28
msgid "Modifying lists stored in variables."
msgstr ""

# type: menu
#: lispref/lists.texi:28 lispref/lists.texi:811 lispref/vol1.texi:380
#: lispref/vol2.texi:381
#, no-wrap
msgid "Modifying Lists"
msgstr ""

# type: menu
#: lispref/lists.texi:28 lispref/vol1.texi:380 lispref/vol2.texi:381
msgid "Storing new pieces into an existing list."
msgstr ""

# type: menu
#: lispref/lists.texi:28 lispref/lists.texi:1264 lispref/vol1.texi:380
#: lispref/vol2.texi:381
#, no-wrap
msgid "Sets And Lists"
msgstr ""

# type: menu
#: lispref/lists.texi:28 lispref/vol1.texi:380 lispref/vol2.texi:381
msgid "A list can represent a finite mathematical set."
msgstr ""

# type: menu
#: lispref/lists.texi:28 lispref/lists.texi:1529 lispref/lists.texi:1530
#: lispref/vol1.texi:380 lispref/vol2.texi:381
#, no-wrap
msgid "Association Lists"
msgstr ""

# type: menu
#: lispref/lists.texi:28 lispref/vol1.texi:380 lispref/vol2.texi:381
msgid "A list can represent a finite relation or mapping."
msgstr ""

# type: node
#: lispref/lists.texi:28 lispref/lists.texi:1815
#, no-wrap
msgid "Rings"
msgstr ""

# type: menu
#: lispref/lists.texi:28
msgid "Managing a fixed-size ring of objects."
msgstr ""

# type: section
#: lispref/lists.texi:31
#, no-wrap
msgid "Lists and Cons Cells"
msgstr ""

# type: cindex
#: lispref/lists.texi:32
#, no-wrap
msgid "lists and cons cells"
msgstr ""

# type: Plain text
#: lispref/lists.texi:40
msgid ""
"Lists in Lisp are not a primitive data type; they are built up from @dfn"
"{cons cells}.  A cons cell is a data object that represents an ordered "
"pair.  That is, it has two slots, and each slot @dfn{holds}, or @dfn{refers "
"to}, some Lisp object.  One slot is known as the @sc{car}, and the other is "
"known as the @sc{cdr}.  (These names are traditional; see @ref{Cons Cell "
"Type}.)  @sc{cdr} is pronounced ``could-er.''"
msgstr ""

# type: Plain text
#: lispref/lists.texi:43
msgid ""
"We say that ``the @sc{car} of this cons cell is'' whatever object its @sc"
"{car} slot currently holds, and likewise for the @sc{cdr}."
msgstr ""

# type: Plain text
#: lispref/lists.texi:53
msgid ""
"A list is a series of cons cells ``chained together,'' so that each cell "
"refers to the next one.  There is one cons cell for each element of the "
"list.  By convention, the @sc{car}s of the cons cells hold the elements of "
"the list, and the @sc{cdr}s are used to chain the list: the @sc{cdr} slot of "
"each cons cell refers to the following cons cell.  The @sc{cdr} of the last "
"cons cell is @code{nil}.  This asymmetry between the @sc{car} and the @sc"
"{cdr} is entirely a matter of convention; at the level of cons cells, the @sc"
"{car} and @sc{cdr} slots have the same characteristics."
msgstr ""

# type: cindex
#: lispref/lists.texi:54
#, no-wrap
msgid "true list"
msgstr ""

# type: Plain text
#: lispref/lists.texi:57
msgid ""
"Since @code{nil} is the conventional value to put in the @sc{cdr} of the "
"last cons cell in the list, we call that case a @dfn{true list}."
msgstr ""

# type: Plain text
#: lispref/lists.texi:63
msgid ""
"In Lisp, we consider the symbol @code{nil} a list as well as a symbol; it is "
"the list with no elements.  For convenience, the symbol @code{nil} is "
"considered to have @code{nil} as its @sc{cdr} (and also as its @sc{car}).  "
"Therefore, the @sc{cdr} of a true list is always a true list."
msgstr ""

# type: cindex
#: lispref/lists.texi:64
#, no-wrap
msgid "dotted list"
msgstr ""

# type: cindex
#: lispref/lists.texi:65
#, no-wrap
msgid "circular list"
msgstr ""

# type: Plain text
#: lispref/lists.texi:72
msgid ""
"If the @sc{cdr} of a list's last cons cell is some other value, neither @code"
"{nil} nor another cons cell, we call the structure a @dfn{dotted list}, "
"since its printed representation would use @samp{.}.  There is one other "
"possibility: some cons cell's @sc{cdr} could point to one of the previous "
"cons cells in the list.  We call that structure a @dfn{circular list}."
msgstr ""

# type: Plain text
#: lispref/lists.texi:79
msgid ""
"For some purposes, it does not matter whether a list is true, circular or "
"dotted.  If the program doesn't look far enough down the list to see the @sc"
"{cdr} of the final cons cell, it won't care.  However, some functions that "
"operate on lists demand true lists and signal errors if given a dotted "
"list.  Most functions that try to find the end of a list enter infinite "
"loops if given a circular list."
msgstr ""

# type: cindex
#: lispref/lists.texi:80
#, no-wrap
msgid "list structure"
msgstr ""

# type: Plain text
#: lispref/lists.texi:84
msgid ""
"Because most cons cells are used as part of lists, the phrase @dfn{list "
"structure} has come to mean any structure made out of cons cells."
msgstr ""

# type: Plain text
#: lispref/lists.texi:87
msgid ""
"The @sc{cdr} of any nonempty true list @var{l} is a list containing all the "
"elements of @var{l} except the first."
msgstr ""

# type: Plain text
#: lispref/lists.texi:90
msgid ""
"@xref{Cons Cell Type}, for the read and print syntax of cons cells and "
"lists, and for ``box and arrow'' illustrations of lists."
msgstr ""

# type: section
#: lispref/lists.texi:92
#, no-wrap
msgid "Predicates on Lists"
msgstr ""

# type: Plain text
#: lispref/lists.texi:99
msgid ""
"The following predicates test whether a Lisp object is an atom, whether it "
"is a cons cell or is a list, or whether it is the distinguished object @code"
"{nil}.  (Many of these predicates can be defined in terms of the others, but "
"they are used so often that it is worth having all of them.)"
msgstr ""

# type: defun
#: lispref/lists.texi:100
#, no-wrap
msgid "consp object"
msgstr ""

# type: defun
#: lispref/lists.texi:103
msgid ""
"This function returns @code{t} if @var{object} is a cons cell, @code{nil} "
"otherwise.  @code{nil} is not a cons cell, although it @emph{is} a list."
msgstr ""

# type: defun
#: lispref/lists.texi:105
#, no-wrap
msgid "atom object"
msgstr ""

# type: defun
#: lispref/lists.texi:110
msgid ""
"This function returns @code{t} if @var{object} is an atom, @code{nil} "
"otherwise.  All objects except cons cells are atoms.  The symbol @code{nil} "
"is an atom and is also a list; it is the only Lisp object that is both."
msgstr ""

# type: example
#: lispref/lists.texi:113
#, no-wrap
msgid "(atom @var{object}) @equiv{} (not (consp @var{object}))\n"
msgstr ""

# type: defun
#: lispref/lists.texi:116
#, no-wrap
msgid "listp object"
msgstr ""

# type: defun
#: lispref/lists.texi:119
msgid ""
"This function returns @code{t} if @var{object} is a cons cell or @code"
"{nil}.  Otherwise, it returns @code{nil}."
msgstr ""

# type: group
#: lispref/lists.texi:124
#, no-wrap
msgid ""
"(listp '(1))\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/lists.texi:128
#, no-wrap
msgid ""
"(listp '())\n"
"     @result{} t\n"
msgstr ""

# type: defun
#: lispref/lists.texi:132
#, no-wrap
msgid "nlistp object"
msgstr ""

# type: defun
#: lispref/lists.texi:135
msgid ""
"This function is the opposite of @code{listp}: it returns @code{t} if @var"
"{object} is not a list.  Otherwise, it returns @code{nil}."
msgstr ""

# type: example
#: lispref/lists.texi:138
#, no-wrap
msgid "(listp @var{object}) @equiv{} (not (nlistp @var{object}))\n"
msgstr ""

# type: defun
#: lispref/lists.texi:141
#, no-wrap
msgid "null object"
msgstr ""

# type: defun
#: lispref/lists.texi:147
msgid ""
"This function returns @code{t} if @var{object} is @code{nil}, and returns "
"@code{nil} otherwise.  This function is identical to @code{not}, but as a "
"matter of clarity we use @code{null} when @var{object} is considered a list "
"and @code{not} when it is considered a truth value (see @code{not} in @ref"
"{Combining Conditions})."
msgstr ""

# type: group
#: lispref/lists.texi:152
#, no-wrap
msgid ""
"(null '(1))\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/lists.texi:156
#, no-wrap
msgid ""
"(null '())\n"
"     @result{} t\n"
msgstr ""

# type: section
#: lispref/lists.texi:162
#, no-wrap
msgid "Accessing Elements of Lists"
msgstr ""

# type: cindex
#: lispref/lists.texi:163
#, no-wrap
msgid "list elements"
msgstr ""

# type: defun
#: lispref/lists.texi:165
#, no-wrap
msgid "car cons-cell"
msgstr ""

# type: defun
#: lispref/lists.texi:169
msgid ""
"This function returns the value referred to by the first slot of the cons "
"cell @var{cons-cell}.  Expressed another way, this function returns the @sc"
"{car} of @var{cons-cell}."
msgstr ""

# type: defun
#: lispref/lists.texi:174
msgid ""
"As a special case, if @var{cons-cell} is @code{nil}, then @code{car} is "
"defined to return @code{nil}; therefore, any list is a valid argument for "
"@code{car}.  An error is signaled if the argument is not a cons cell or @code"
"{nil}."
msgstr ""

# type: group
#: lispref/lists.texi:179
#, no-wrap
msgid ""
"(car '(a b c))\n"
"     @result{} a\n"
msgstr ""

# type: group
#: lispref/lists.texi:183
#, no-wrap
msgid ""
"(car '())\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/lists.texi:187
#, no-wrap
msgid "cdr cons-cell"
msgstr ""

# type: defun
#: lispref/lists.texi:191
msgid ""
"This function returns the value referred to by the second slot of the cons "
"cell @var{cons-cell}.  Expressed another way, this function returns the @sc"
"{cdr} of @var{cons-cell}."
msgstr ""

# type: defun
#: lispref/lists.texi:196
msgid ""
"As a special case, if @var{cons-cell} is @code{nil}, then @code{cdr} is "
"defined to return @code{nil}; therefore, any list is a valid argument for "
"@code{cdr}.  An error is signaled if the argument is not a cons cell or @code"
"{nil}."
msgstr ""

# type: group
#: lispref/lists.texi:201
#, no-wrap
msgid ""
"(cdr '(a b c))\n"
"     @result{} (b c)\n"
msgstr ""

# type: group
#: lispref/lists.texi:205
#, no-wrap
msgid ""
"(cdr '())\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/lists.texi:209
#, no-wrap
msgid "car-safe object"
msgstr ""

# type: defun
#: lispref/lists.texi:214
msgid ""
"This function lets you take the @sc{car} of a cons cell while avoiding "
"errors for other data types.  It returns the @sc{car} of @var{object} if @var"
"{object} is a cons cell, @code{nil} otherwise.  This is in contrast to @code"
"{car}, which signals an error if @var{object} is not a list."
msgstr ""

# type: group
#: lispref/lists.texi:223
#, no-wrap
msgid ""
"(car-safe @var{object})\n"
"@equiv{}\n"
"(let ((x @var{object}))\n"
"  (if (consp x)\n"
"      (car x)\n"
"    nil))\n"
msgstr ""

# type: defun
#: lispref/lists.texi:227
#, no-wrap
msgid "cdr-safe object"
msgstr ""

# type: defun
#: lispref/lists.texi:233
msgid ""
"This function lets you take the @sc{cdr} of a cons cell while avoiding "
"errors for other data types.  It returns the @sc{cdr} of @var{object} if @var"
"{object} is a cons cell, @code{nil} otherwise.  This is in contrast to @code"
"{cdr}, which signals an error if @var{object} is not a list."
msgstr ""

# type: group
#: lispref/lists.texi:242
#, no-wrap
msgid ""
"(cdr-safe @var{object})\n"
"@equiv{}\n"
"(let ((x @var{object}))\n"
"  (if (consp x)\n"
"      (cdr x)\n"
"    nil))\n"
msgstr ""

# type: defmac
#: lispref/lists.texi:246
#, no-wrap
msgid "pop listname"
msgstr ""

# type: defmac
#: lispref/lists.texi:249
msgid ""
"This macro is a way of examining the @sc{car} of a list, and taking it off "
"the list, all at once."
msgstr ""

# type: defmac
#: lispref/lists.texi:254
msgid ""
"It operates on the list which is stored in the symbol @var{listname}.  It "
"removes this element from the list by setting @var{listname} to the @sc{cdr} "
"of its old value---but it also returns the @sc{car} of that list, which is "
"the element being removed."
msgstr ""

# type: example
#: lispref/lists.texi:262
#, no-wrap
msgid ""
"x\n"
"     @result{} (a b c)\n"
"(pop x)\n"
"     @result{} a\n"
"x\n"
"     @result{} (b c)\n"
msgstr ""

# type: defun
#: lispref/lists.texi:265
#, no-wrap
msgid "nth n list"
msgstr ""

# type: anchor{#1}
#: lispref/lists.texi:271
msgid "Definition of nth"
msgstr ""

# type: defun
#: lispref/lists.texi:271
msgid ""
"This function returns the @var{n}th element of @var{list}.  Elements are "
"numbered starting with zero, so the @sc{car} of @var{list} is element number "
"zero.  If the length of @var{list} is @var{n} or less, the value is @code"
"{nil}."
msgstr ""

# type: defun
#: lispref/lists.texi:274
msgid ""
"If @var{n} is negative, @code{nth} returns the first element of @var{list}."
msgstr ""

# type: group
#: lispref/lists.texi:279
#, no-wrap
msgid ""
"(nth 2 '(1 2 3 4))\n"
"     @result{} 3\n"
msgstr ""

# type: group
#: lispref/lists.texi:283
#, no-wrap
msgid ""
"(nth 10 '(1 2 3 4))\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/lists.texi:287
#, no-wrap
msgid ""
"(nth -3 '(1 2 3 4))\n"
"     @result{} 1\n"
"\n"
msgstr ""

# type: group
#: lispref/lists.texi:289
#, no-wrap
msgid "(nth n x) @equiv{} (car (nthcdr n x))\n"
msgstr ""

# type: defun
#: lispref/lists.texi:295
msgid ""
"The function @code{elt} is similar, but applies to any kind of sequence.  "
"For historical reasons, it takes its arguments in the opposite order.  @xref"
"{Sequence Functions}."
msgstr ""

# type: defun
#: lispref/lists.texi:297
#, no-wrap
msgid "nthcdr n list"
msgstr ""

# type: defun
#: lispref/lists.texi:301
msgid ""
"This function returns the @var{n}th @sc{cdr} of @var{list}.  In other words, "
"it skips past the first @var{n} links of @var{list} and returns what follows."
msgstr ""

# type: defun
#: lispref/lists.texi:305
msgid ""
"If @var{n} is zero or negative, @code{nthcdr} returns all of @var{list}.  If "
"the length of @var{list} is @var{n} or less, @code{nthcdr} returns @code"
"{nil}."
msgstr ""

# type: group
#: lispref/lists.texi:310
#, no-wrap
msgid ""
"(nthcdr 1 '(1 2 3 4))\n"
"     @result{} (2 3 4)\n"
msgstr ""

# type: group
#: lispref/lists.texi:314
#, no-wrap
msgid ""
"(nthcdr 10 '(1 2 3 4))\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/lists.texi:318
#, no-wrap
msgid ""
"(nthcdr -3 '(1 2 3 4))\n"
"     @result{} (1 2 3 4)\n"
msgstr ""

# type: defun
#: lispref/lists.texi:322
#, no-wrap
msgid "last list &optional n"
msgstr ""

# type: defun
#: lispref/lists.texi:328
msgid ""
"This function returns the last link of @var{list}.  The @code{car} of this "
"link is the list's last element.  If @var{list} is null, @code{nil} is "
"returned.  If @var{n} is non-@code{nil}, the @var{n}th-to-last link is "
"returned instead, or the whole of @var{list} if @var{n} is bigger than @var"
"{list}'s length."
msgstr ""

# type: defun
#: lispref/lists.texi:330
#, no-wrap
msgid "safe-length list"
msgstr ""

# type: anchor{#1}
#: lispref/lists.texi:336
msgid "Definition of safe-length"
msgstr ""

# type: defun
#: lispref/lists.texi:336
msgid ""
"This function returns the length of @var{list}, with no risk of either an "
"error or an infinite loop.  It generally returns the number of distinct cons "
"cells in the list.  However, for circular lists, the value is just an upper "
"bound; it is often too large."
msgstr ""

# type: defun
#: lispref/lists.texi:339
msgid ""
"If @var{list} is not @code{nil} or a cons cell, @code{safe-length} returns 0."
msgstr ""

# type: Plain text
#: lispref/lists.texi:344
msgid ""
"The most common way to compute the length of a list, when you are not "
"worried that it may be circular, is with @code{length}.  @xref{Sequence "
"Functions}."
msgstr ""

# type: defun
#: lispref/lists.texi:345
#, no-wrap
msgid "caar cons-cell"
msgstr ""

# type: defun
#: lispref/lists.texi:347
msgid "This is the same as @code{(car (car @var{cons-cell}))}."
msgstr ""

# type: defun
#: lispref/lists.texi:349
#, no-wrap
msgid "cadr cons-cell"
msgstr ""

# type: defun
#: lispref/lists.texi:352
msgid ""
"This is the same as @code{(car (cdr @var{cons-cell}))} or @code{(nth 1 @var"
"{cons-cell})}."
msgstr ""

# type: defun
#: lispref/lists.texi:354
#, no-wrap
msgid "cdar cons-cell"
msgstr ""

# type: defun
#: lispref/lists.texi:356
msgid "This is the same as @code{(cdr (car @var{cons-cell}))}."
msgstr ""

# type: defun
#: lispref/lists.texi:358
#, no-wrap
msgid "cddr cons-cell"
msgstr ""

# type: defun
#: lispref/lists.texi:361
msgid ""
"This is the same as @code{(cdr (cdr @var{cons-cell}))} or @code{(nthcdr 2 "
"@var{cons-cell})}."
msgstr ""

# type: defun
#: lispref/lists.texi:363
#, no-wrap
msgid "butlast x &optional n"
msgstr ""

# type: defun
#: lispref/lists.texi:369
msgid ""
"This function returns the list @var{x} with the last element, or the last "
"@var{n} elements, removed.  If @var{n} is greater than zero it makes a copy "
"of the list so as not to damage the original list.  In general, @code"
"{(append (butlast @var{x} @var{n})  (last @var{x} @var{n}))} will return a "
"list equal to @var{x}."
msgstr ""

# type: defun
#: lispref/lists.texi:371
#, no-wrap
msgid "nbutlast x &optional n"
msgstr ""

# type: defun
#: lispref/lists.texi:375
msgid ""
"This is a version of @code{butlast} that works by destructively modifying "
"the @code{cdr} of the appropriate element, rather than making a copy of the "
"list."
msgstr ""

# type: section
#: lispref/lists.texi:379
#, no-wrap
msgid "Building Cons Cells and Lists"
msgstr ""

# type: cindex
#: lispref/lists.texi:380
#, no-wrap
msgid "cons cells"
msgstr ""

# type: cindex
#: lispref/lists.texi:381
#, no-wrap
msgid "building lists"
msgstr ""

# type: Plain text
#: lispref/lists.texi:387
msgid ""
"Many functions build lists, as lists reside at the very heart of Lisp.  @code"
"{cons} is the fundamental list-building function; however, it is interesting "
"to note that @code{list} is used more times in the source code for Emacs "
"than @code{cons}."
msgstr ""

# type: defun
#: lispref/lists.texi:388
#, no-wrap
msgid "cons object1 object2"
msgstr ""

# type: defun
#: lispref/lists.texi:394
msgid ""
"This function is the most basic function for building new list structure.  "
"It creates a new cons cell, making @var{object1} the @sc{car}, and @var"
"{object2} the @sc{cdr}.  It then returns the new cons cell.  The arguments "
"@var{object1} and @var{object2} may be any Lisp objects, but most often @var"
"{object2} is a list."
msgstr ""

# type: group
#: lispref/lists.texi:399
#, no-wrap
msgid ""
"(cons 1 '(2))\n"
"     @result{} (1 2)\n"
msgstr ""

# type: group
#: lispref/lists.texi:403
#, no-wrap
msgid ""
"(cons 1 '())\n"
"     @result{} (1)\n"
msgstr ""

# type: group
#: lispref/lists.texi:407
#, no-wrap
msgid ""
"(cons 1 2)\n"
"     @result{} (1 . 2)\n"
msgstr ""

# type: cindex
#: lispref/lists.texi:410
#, no-wrap
msgid "consing"
msgstr ""

# type: defun
#: lispref/lists.texi:422
msgid ""
"@code{cons} is often used to add a single element to the front of a list.  "
"This is called @dfn{consing the element onto the list}.  @footnote{There is "
"no strictly equivalent way to add an element to the end of a list.  You can "
"use @code{(append @var{listname} (list @var{newelt}))}, which creates a "
"whole new list by copying @var{listname} and adding @var{newelt} to its "
"end.  Or you can use @code{(nconc @var{listname} (list @var{newelt}))}, "
"which modifies @var{listname} by following all the @sc{cdr}s and then "
"replacing the terminating @code{nil}.  Compare this to adding an element to "
"the beginning of a list with @code{cons}, which neither copies nor modifies "
"the list.} For example:"
msgstr ""

# type: example
#: lispref/lists.texi:425
#, no-wrap
msgid "(setq list (cons newelt list))\n"
msgstr ""

# type: defun
#: lispref/lists.texi:430
msgid ""
"Note that there is no conflict between the variable named @code{list} used "
"in this example and the function named @code{list} described below; any "
"symbol can serve both purposes."
msgstr ""

# type: defun
#: lispref/lists.texi:432
#, no-wrap
msgid "list &rest objects"
msgstr ""

# type: defun
#: lispref/lists.texi:436
msgid ""
"This function creates a list with @var{objects} as its elements.  The "
"resulting list is always @code{nil}-terminated.  If no @var{objects} are "
"given, the empty list is returned."
msgstr ""

# type: group
#: lispref/lists.texi:441
#, no-wrap
msgid ""
"(list 1 2 3 4 5)\n"
"     @result{} (1 2 3 4 5)\n"
msgstr ""

# type: group
#: lispref/lists.texi:445
#, no-wrap
msgid ""
"(list 1 2 '(3 4 5) 'foo)\n"
"     @result{} (1 2 (3 4 5) foo)\n"
msgstr ""

# type: group
#: lispref/lists.texi:449
#, no-wrap
msgid ""
"(list)\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/lists.texi:453
#, no-wrap
msgid "make-list length object"
msgstr ""

# type: defun
#: lispref/lists.texi:457
msgid ""
"This function creates a list of @var{length} elements, in which each element "
"is @var{object}.  Compare @code{make-list} with @code{make-string} (@pxref"
"{Creating Strings})."
msgstr ""

# type: group
#: lispref/lists.texi:462
#, no-wrap
msgid ""
"(make-list 3 'pigs)\n"
"     @result{} (pigs pigs pigs)\n"
msgstr ""

# type: group
#: lispref/lists.texi:466
#, no-wrap
msgid ""
"(make-list 0 'pigs)\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/lists.texi:472
#, no-wrap
msgid ""
"(setq l (make-list 3 '(a b))\n"
"     @result{} ((a b) (a b) (a b))\n"
"(eq (car l) (cadr l))\n"
"     @result{} t\n"
msgstr ""

# type: defun
#: lispref/lists.texi:476
#, no-wrap
msgid "append &rest sequences"
msgstr ""

# type: cindex
#: lispref/lists.texi:477
#, no-wrap
msgid "copying lists"
msgstr ""

# type: defun
#: lispref/lists.texi:484
msgid ""
"This function returns a list containing all the elements of @var"
"{sequences}.  The @var{sequences} may be lists, vectors, bool-vectors, or "
"strings, but the last one should usually be a list.  All arguments except "
"the last one are copied, so none of the arguments is altered.  (See @code"
"{nconc} in @ref{Rearrangement}, for a way to join lists with no copying.)"
msgstr ""

# type: defun
#: lispref/lists.texi:492
msgid ""
"More generally, the final argument to @code{append} may be any Lisp object.  "
"The final argument is not copied or converted; it becomes the @sc{cdr} of "
"the last cons cell in the new list.  If the final argument is itself a list, "
"then its elements become in effect elements of the result list.  If the "
"final element is not a list, the result is a dotted list since its final @sc"
"{cdr} is not @code{nil} as required in a true list."
msgstr ""

# type: defun
#: lispref/lists.texi:500
msgid ""
"In Emacs 20 and before, the @code{append} function also allowed integers as "
"(non last) arguments.  It converted them to strings of digits, making up the "
"decimal print representation of the integer, and then used the strings "
"instead of the original integers.  This obsolete usage no longer works.  The "
"proper way to convert an integer to a decimal number in this way is with "
"@code{format} (@pxref{Formatting Strings}) or @code{number-to-string} (@pxref"
"{String Conversion})."
msgstr ""

# type: Plain text
#: lispref/lists.texi:503
msgid "Here is an example of using @code{append}:"
msgstr ""

# type: group
#: lispref/lists.texi:510
#, no-wrap
msgid ""
"(setq trees '(pine oak))\n"
"     @result{} (pine oak)\n"
"(setq more-trees (append '(maple birch) trees))\n"
"     @result{} (maple birch pine oak)\n"
msgstr ""

# type: group
#: lispref/lists.texi:517
#, no-wrap
msgid ""
"trees\n"
"     @result{} (pine oak)\n"
"more-trees\n"
"     @result{} (maple birch pine oak)\n"
msgstr ""

# type: group
#: lispref/lists.texi:521
#, no-wrap
msgid ""
"(eq trees (cdr (cdr more-trees)))\n"
"     @result{} t\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:529
msgid ""
"You can see how @code{append} works by looking at a box diagram.  The "
"variable @code{trees} is set to the list @code{(pine oak)} and then the "
"variable @code{more-trees} is set to the list @code{(maple birch pine "
"oak)}.  However, the variable @code{trees} continues to refer to the "
"original list:"
msgstr ""

# type: group
#: lispref/lists.texi:540
#, no-wrap
msgid ""
"more-trees                trees\n"
"|                           |\n"
"|     --- ---      --- ---   -> --- ---      --- ---\n"
" --> |   |   |--> |   |   |--> |   |   |--> |   |   |--> nil\n"
"      --- ---      --- ---      --- ---      --- ---\n"
"       |            |            |            |\n"
"       |            |            |            |\n"
"        --> maple    -->birch     --> pine     --> oak\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:546
msgid ""
"An empty sequence contributes nothing to the value returned by @code"
"{append}.  As a consequence of this, a final @code{nil} argument forces a "
"copy of the previous argument:"
msgstr ""

# type: group
#: lispref/lists.texi:551
#, no-wrap
msgid ""
"trees\n"
"     @result{} (pine oak)\n"
msgstr ""

# type: group
#: lispref/lists.texi:555
#, no-wrap
msgid ""
"(setq wood (append trees nil))\n"
"     @result{} (pine oak)\n"
msgstr ""

# type: group
#: lispref/lists.texi:559
#, no-wrap
msgid ""
"wood\n"
"     @result{} (pine oak)\n"
msgstr ""

# type: group
#: lispref/lists.texi:563
#, no-wrap
msgid ""
"(eq wood trees)\n"
"     @result{} nil\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:569
msgid ""
"This once was the usual way to copy a list, before the function @code{copy-"
"sequence} was invented.  @xref{Sequences Arrays Vectors}."
msgstr ""

# type: Plain text
#: lispref/lists.texi:571
msgid ""
"Here we show the use of vectors and strings as arguments to @code{append}:"
msgstr ""

# type: group
#: lispref/lists.texi:576
#, no-wrap
msgid ""
"(append [a b] \"cd\" nil)\n"
"     @result{} (a b 99 100)\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:581
msgid ""
"With the help of @code{apply} (@pxref{Calling Functions}), we can append all "
"the lists in a list of lists:"
msgstr ""

# type: Plain text
#: lispref/lists.texi:590
msgid "If no @var{sequences} are given, @code{nil} is returned:"
msgstr ""

# type: group
#: lispref/lists.texi:595
#, no-wrap
msgid ""
"(append)\n"
"     @result{} nil\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:599
msgid "Here are some examples where the final argument is not a list:"
msgstr ""

# type: example
#: lispref/lists.texi:605
#, no-wrap
msgid ""
"(append '(x y) 'z)\n"
"     @result{} (x y . z)\n"
"(append '(x y) [z])\n"
"     @result{} (x y . [z])\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:612
msgid ""
"The second example shows that when the final argument is a sequence but not "
"a list, the sequence's elements do not become elements of the resulting "
"list.  Instead, the sequence becomes the final @sc{cdr}, like any other non-"
"list final argument."
msgstr ""

# type: defun
#: lispref/lists.texi:613
#, no-wrap
msgid "reverse list"
msgstr ""

# type: defun
#: lispref/lists.texi:617
msgid ""
"This function creates a new list whose elements are the elements of @var"
"{list}, but in reverse order.  The original argument @var{list} is @emph"
"{not} altered."
msgstr ""

# type: group
#: lispref/lists.texi:622
#, no-wrap
msgid ""
"(setq x '(1 2 3 4))\n"
"     @result{} (1 2 3 4)\n"
msgstr ""

# type: group
#: lispref/lists.texi:628
#, no-wrap
msgid ""
"(reverse x)\n"
"     @result{} (4 3 2 1)\n"
"x\n"
"     @result{} (1 2 3 4)\n"
msgstr ""

# type: defun
#: lispref/lists.texi:632
#, no-wrap
msgid "copy-tree tree &optional vecp"
msgstr ""

# type: defun
#: lispref/lists.texi:637
msgid ""
"This function returns a copy of the tree @code{tree}.  If @var{tree} is a "
"cons cell, this makes a new cons cell with the same @sc{car} and @sc{cdr}, "
"then recursively copies the @sc{car} and @sc{cdr} in the same way."
msgstr ""

# type: defun
#: lispref/lists.texi:642
msgid ""
"Normally, when @var{tree} is anything other than a cons cell, @code{copy-"
"tree} simply returns @var{tree}.  However, if @var{vecp} is non-@code{nil}, "
"it copies vectors too (and operates recursively on their elements)."
msgstr ""

# type: defun
#: lispref/lists.texi:644
#, no-wrap
msgid "number-sequence from &optional to separation"
msgstr ""

# type: defun
#: lispref/lists.texi:653
msgid ""
"This returns a list of numbers starting with @var{from} and incrementing by "
"@var{separation}, and ending at or just before @var{to}.  @var{separation} "
"can be positive or negative and defaults to 1.  If @var{to} is @code{nil} or "
"numerically equal to @var{from}, the value is the one-element list @code"
"{(@var{from})}.  If @var{to} is less than @var{from} with a positive @var"
"{separation}, or greater than @var{from} with a negative @var{separation}, "
"the value is @code{nil} because those arguments specify an empty sequence."
msgstr ""

# type: defun
#: lispref/lists.texi:657
msgid ""
"If @var{separation} is 0 and @var{to} is neither @code{nil} nor numerically "
"equal to @var{from}, @code{number-sequence} signals an error, since those "
"arguments specify an infinite sequence."
msgstr ""

# type: defun
#: lispref/lists.texi:670
msgid ""
"All arguments can be integers or floating point numbers.  However, floating "
"point arguments can be tricky, because floating point arithmetic is "
"inexact.  For instance, depending on the machine, it may quite well happen "
"that @code{(number-sequence 0.4 0.6 0.2)} returns the one element list @code"
"{(0.4)}, whereas @code{(number-sequence 0.4 0.8 0.2)} returns a list with "
"three elements.  The @var{n}th element of the list is computed by the exact "
"formula @code{(+ @var{from} (* @var{n} @var{separation}))}.  Thus, if one "
"wants to make sure that @var{to} is included in the list, one can pass an "
"expression of this exact type for @var{to}.  Alternatively, one can replace "
"@var{to} with a slightly larger value (or a slightly more negative value if "
"@var{separation} is negative)."
msgstr ""

# type: defun
#: lispref/lists.texi:672
msgid "Some examples:"
msgstr ""

# type: example
#: lispref/lists.texi:688
#, no-wrap
msgid ""
"(number-sequence 4 9)\n"
"     @result{} (4 5 6 7 8 9)\n"
"(number-sequence 9 4 -1)\n"
"     @result{} (9 8 7 6 5 4)\n"
"(number-sequence 9 4 -2)\n"
"     @result{} (9 7 5)\n"
"(number-sequence 8)\n"
"     @result{} (8)\n"
"(number-sequence 8 5)\n"
"     @result{} nil\n"
"(number-sequence 5 8 -1)\n"
"     @result{} nil\n"
"(number-sequence 1.5 6 2)\n"
"     @result{} (1.5 3.5 5.5)\n"
msgstr ""

# type: section
#: lispref/lists.texi:692
#, no-wrap
msgid "Modifying List Variables"
msgstr ""

# type: Plain text
#: lispref/lists.texi:696
msgid ""
"These functions, and one macro, provide convenient ways to modify a list "
"which is stored in a variable."
msgstr ""

# type: defmac
#: lispref/lists.texi:697
#, no-wrap
msgid "push newelt listname"
msgstr ""

# type: defmac
#: lispref/lists.texi:700
msgid ""
"This macro provides an alternative way to write @code{(setq @var{listname} "
"(cons @var{newelt} @var{listname}))}."
msgstr ""

# type: example
#: lispref/lists.texi:708
#, no-wrap
msgid ""
"(setq l '(a b))\n"
"     @result{} (a b)\n"
"(push 'c l)\n"
"     @result{} (c a b)\n"
"l\n"
"     @result{} (c a b)\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:712
msgid "Two functions modify lists that are the values of variables."
msgstr ""

# type: defun
#: lispref/lists.texi:713
#, no-wrap
msgid "add-to-list symbol element &optional append compare-fn"
msgstr ""

# type: defun
#: lispref/lists.texi:721
msgid ""
"This function sets the variable @var{symbol} by consing @var{element} onto "
"the old value, if @var{element} is not already a member of that value.  It "
"returns the resulting list, whether updated or not.  The value of @var"
"{symbol} had better be a list already before the call.  @code{add-to-list} "
"uses @var{compare-fn} to compare @var{element} against existing list "
"members; if @var{compare-fn} is @code{nil}, it uses @code{equal}."
msgstr ""

# type: defun
#: lispref/lists.texi:725
msgid ""
"Normally, if @var{element} is added, it is added to the front of @var"
"{symbol}, but if the optional argument @var{append} is non-@code{nil}, it is "
"added at the end."
msgstr ""

# type: defun
#: lispref/lists.texi:729
msgid ""
"The argument @var{symbol} is not implicitly quoted; @code{add-to-list} is an "
"ordinary function, like @code{set} and unlike @code{setq}.  Quote the "
"argument yourself if that is what you want."
msgstr ""

# type: Plain text
#: lispref/lists.texi:732
msgid "Here's a scenario showing how to use @code{add-to-list}:"
msgstr ""

# type: example
#: lispref/lists.texi:736
#, no-wrap
msgid ""
"(setq foo '(a b))\n"
"     @result{} (a b)\n"
"\n"
msgstr ""

# type: example
#: lispref/lists.texi:739
#, no-wrap
msgid ""
"(add-to-list 'foo 'c)     ;; @r{Add @code{c}.}\n"
"     @result{} (c a b)\n"
"\n"
msgstr ""

# type: example
#: lispref/lists.texi:742
#, no-wrap
msgid ""
"(add-to-list 'foo 'b)     ;; @r{No effect.}\n"
"     @result{} (c a b)\n"
"\n"
msgstr ""

# type: example
#: lispref/lists.texi:745
#, no-wrap
msgid ""
"foo                       ;; @r{@code{foo} was changed.}\n"
"     @result{} (c a b)\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:749
msgid ""
"An equivalent expression for @code{(add-to-list '@var{var} @var{value})} is "
"this:"
msgstr ""

# type: example
#: lispref/lists.texi:753
#, no-wrap
msgid ""
"(or (member @var{value} @var{var})\n"
"    (setq @var{var} (cons @var{value} @var{var})))\n"
msgstr ""

# type: defun
#: lispref/lists.texi:755
#, no-wrap
msgid "add-to-ordered-list symbol element &optional order"
msgstr ""

# type: defun
#: lispref/lists.texi:762
msgid ""
"This function sets the variable @var{symbol} by inserting @var{element} into "
"the old value, which must be a list, at the position specified by @var"
"{order}.  If @var{element} is already a member of the list, its position in "
"the list is adjusted according to @var{order}.  Membership is tested using "
"@code{eq}.  This function returns the resulting list, whether updated or not."
msgstr ""

# type: defun
#: lispref/lists.texi:765
msgid ""
"The @var{order} is typically a number (integer or float), and the elements "
"of the list are sorted in non-decreasing numerical order."
msgstr ""

# type: defun
#: lispref/lists.texi:770
msgid ""
"@var{order} may also be omitted or @code{nil}.  Then the numeric order of "
"@var{element} stays unchanged if it already has one; otherwise, @var"
"{element} has no numeric order.  Elements without a numeric list order are "
"placed at the end of the list, in no particular order."
msgstr ""

# type: defun
#: lispref/lists.texi:773
msgid ""
"Any other value for @var{order} removes the numeric order of @var{element} "
"if it already has one; otherwise, it is equivalent to @code{nil}."
msgstr ""

# type: defun
#: lispref/lists.texi:778
msgid ""
"The argument @var{symbol} is not implicitly quoted; @code{add-to-ordered-"
"list} is an ordinary function, like @code{set} and unlike @code{setq}.  "
"Quote the argument yourself if that is what you want."
msgstr ""

# type: defun
#: lispref/lists.texi:781
msgid ""
"The ordering information is stored in a hash table on @var{symbol}'s @code"
"{list-order} property."
msgstr ""

# type: Plain text
#: lispref/lists.texi:784
msgid "Here's a scenario showing how to use @code{add-to-ordered-list}:"
msgstr ""

# type: example
#: lispref/lists.texi:788
#, no-wrap
msgid ""
"(setq foo '())\n"
"     @result{} nil\n"
"\n"
msgstr ""

# type: example
#: lispref/lists.texi:791
#, no-wrap
msgid ""
"(add-to-ordered-list 'foo 'a 1)     ;; @r{Add @code{a}.}\n"
"     @result{} (a)\n"
"\n"
msgstr ""

# type: example
#: lispref/lists.texi:794
#, no-wrap
msgid ""
"(add-to-ordered-list 'foo 'c 3)     ;; @r{Add @code{c}.}\n"
"     @result{} (a c)\n"
"\n"
msgstr ""

# type: example
#: lispref/lists.texi:797
#, no-wrap
msgid ""
"(add-to-ordered-list 'foo 'b 2)     ;; @r{Add @code{b}.}\n"
"     @result{} (a b c)\n"
"\n"
msgstr ""

# type: example
#: lispref/lists.texi:800
#, no-wrap
msgid ""
"(add-to-ordered-list 'foo 'b 4)     ;; @r{Move @code{b}.}\n"
"     @result{} (a c b)\n"
"\n"
msgstr ""

# type: example
#: lispref/lists.texi:803
#, no-wrap
msgid ""
"(add-to-ordered-list 'foo 'd)       ;; @r{Append @code{d}.}\n"
"     @result{} (a c b d)\n"
"\n"
msgstr ""

# type: example
#: lispref/lists.texi:806
#, no-wrap
msgid ""
"(add-to-ordered-list 'foo 'e)       ;; @r{Add @code{e}}.\n"
"     @result{} (a c b e d)\n"
"\n"
msgstr ""

# type: example
#: lispref/lists.texi:809
#, no-wrap
msgid ""
"foo                       ;; @r{@code{foo} was changed.}\n"
"     @result{} (a c b e d)\n"
msgstr ""

# type: menu
#: lispref/lists.texi:812 lispref/vol1.texi:382 lispref/vol2.texi:383
#, no-wrap
msgid "Modifying Existing List Structure"
msgstr ""

# type: cindex
#: lispref/lists.texi:813
#, no-wrap
msgid "destructive list operations"
msgstr ""

# type: Plain text
#: lispref/lists.texi:818
msgid ""
"You can modify the @sc{car} and @sc{cdr} contents of a cons cell with the "
"primitives @code{setcar} and @code{setcdr}.  We call these ``destructive'' "
"operations because they change existing list structure."
msgstr ""

# type: cindex
#: lispref/lists.texi:819
#, no-wrap
msgid "CL note---@code{rplaca} vs @code{setcar}"
msgstr ""

# type: findex
#: lispref/lists.texi:821
#, no-wrap
msgid "rplaca"
msgstr "rplaca"

# type: findex
#: lispref/lists.texi:822
#, no-wrap
msgid "rplacd"
msgstr "rplacd"

# type: quotation
#: lispref/lists.texi:828
msgid ""
"@b{Common Lisp note:} Common Lisp uses functions @code{rplaca} and @code"
"{rplacd} to alter list structure; they change structure the same way as @code"
"{setcar} and @code{setcdr}, but the Common Lisp functions return the cons "
"cell while @code{setcar} and @code{setcdr} return the new @sc{car} or @sc"
"{cdr}."
msgstr ""

# type: menu
#: lispref/lists.texi:835 lispref/lists.texi:837 lispref/vol1.texi:387
#: lispref/vol2.texi:388
#, no-wrap
msgid "Setcar"
msgstr ""

# type: menu
#: lispref/lists.texi:835 lispref/vol1.texi:387 lispref/vol2.texi:388
msgid "Replacing an element in a list."
msgstr ""

# type: menu
#: lispref/lists.texi:835 lispref/lists.texi:942 lispref/vol1.texi:387
#: lispref/vol2.texi:388
#, no-wrap
msgid "Setcdr"
msgstr ""

# type: menu
#: lispref/lists.texi:835 lispref/vol1.texi:387 lispref/vol2.texi:388
msgid "Replacing part of the list backbone."
msgstr ""

# type: menu
#: lispref/lists.texi:835 lispref/vol1.texi:387 lispref/vol2.texi:388
msgid "This can be used to remove or add elements."
msgstr ""

# type: menu
#: lispref/lists.texi:835 lispref/lists.texi:1043 lispref/vol1.texi:387
#: lispref/vol2.texi:388
#, no-wrap
msgid "Rearrangement"
msgstr ""

# type: menu
#: lispref/lists.texi:835 lispref/vol1.texi:387 lispref/vol2.texi:388
msgid "Reordering the elements in a list; combining lists."
msgstr ""

# type: subsection
#: lispref/lists.texi:838
#, no-wrap
msgid "Altering List Elements with @code{setcar}"
msgstr ""

# type: Plain text
#: lispref/lists.texi:843
msgid ""
"Changing the @sc{car} of a cons cell is done with @code{setcar}.  When used "
"on a list, @code{setcar} replaces one element of a list with a different "
"element."
msgstr ""

# type: defun
#: lispref/lists.texi:844
#, no-wrap
msgid "setcar cons object"
msgstr ""

# type: defun
#: lispref/lists.texi:849
msgid ""
"This function stores @var{object} as the new @sc{car} of @var{cons}, "
"replacing its previous @sc{car}.  In other words, it changes the @sc{car} "
"slot of @var{cons} to refer to @var{object}.  It returns the value @var"
"{object}.  For example:"
msgstr ""

# type: group
#: lispref/lists.texi:854
#, no-wrap
msgid ""
"(setq x '(1 2))\n"
"     @result{} (1 2)\n"
msgstr ""

# type: group
#: lispref/lists.texi:858
#, no-wrap
msgid ""
"(setcar x 4)\n"
"     @result{} 4\n"
msgstr ""

# type: group
#: lispref/lists.texi:862
#, no-wrap
msgid ""
"x\n"
"     @result{} (4 2)\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:869
msgid ""
"When a cons cell is part of the shared structure of several lists, storing a "
"new @sc{car} into the cons changes one element of each of these lists.  Here "
"is an example:"
msgstr ""

# type: group
#: lispref/lists.texi:877
#, no-wrap
msgid ""
";; @r{Create two lists that are partly shared.}\n"
"(setq x1 '(a b c))\n"
"     @result{} (a b c)\n"
"(setq x2 (cons 'z (cdr x1)))\n"
"     @result{} (z b c)\n"
msgstr ""

# type: group
#: lispref/lists.texi:887
#, no-wrap
msgid ""
";; @r{Replace the @sc{car} of a shared link.}\n"
"(setcar (cdr x1) 'foo)\n"
"     @result{} foo\n"
"x1                           ; @r{Both lists are changed.}\n"
"     @result{} (a foo c)\n"
"x2\n"
"     @result{} (z foo c)\n"
msgstr ""

# type: group
#: lispref/lists.texi:897
#, no-wrap
msgid ""
";; @r{Replace the @sc{car} of a link that is not shared.}\n"
"(setcar x1 'baz)\n"
"     @result{} baz\n"
"x1                           ; @r{Only one list is changed.}\n"
"     @result{} (baz foo c)\n"
"x2\n"
"     @result{} (z foo c)\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:903
msgid ""
"Here is a graphical depiction of the shared structure of the two lists in "
"the variables @code{x1} and @code{x2}, showing why replacing @code{b} "
"changes them both:"
msgstr ""

# type: group
#: lispref/lists.texi:919
#, no-wrap
msgid ""
"        --- ---        --- ---      --- ---\n"
"x1---> |   |   |----> |   |   |--> |   |   |--> nil\n"
"        --- ---        --- ---      --- ---\n"
"         |        -->   |            |\n"
"         |       |      |            |\n"
"          --> a  |       --> b        --> c\n"
"                 |\n"
"       --- ---   |\n"
"x2--> |   |   |--\n"
"       --- ---\n"
"        |\n"
"        |\n"
"         --> z\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:923
msgid ""
"Here is an alternative form of box diagram, showing the same relationship:"
msgstr ""

# type: group
#: lispref/lists.texi:939
#, no-wrap
msgid ""
"x1:\n"
" --------------       --------------       --------------\n"
"| car   | cdr  |     | car   | cdr  |     | car   | cdr  |\n"
"|   a   |   o------->|   b   |   o------->|   c   |  nil |\n"
"|       |      |  -->|       |      |     |       |      |\n"
" --------------  |    --------------       --------------\n"
"                 |\n"
"x2:              |\n"
" --------------  |\n"
"| car   | cdr  | |\n"
"|   z   |   o----\n"
"|       |      |\n"
" --------------\n"
msgstr ""

# type: subsection
#: lispref/lists.texi:943
#, no-wrap
msgid "Altering the CDR of a List"
msgstr ""

# type: Plain text
#: lispref/lists.texi:946
msgid "The lowest-level primitive for modifying a @sc{cdr} is @code{setcdr}:"
msgstr ""

# type: defun
#: lispref/lists.texi:947
#, no-wrap
msgid "setcdr cons object"
msgstr ""

# type: defun
#: lispref/lists.texi:952
msgid ""
"This function stores @var{object} as the new @sc{cdr} of @var{cons}, "
"replacing its previous @sc{cdr}.  In other words, it changes the @sc{cdr} "
"slot of @var{cons} to refer to @var{object}.  It returns the value @var"
"{object}."
msgstr ""

# type: Plain text
#: lispref/lists.texi:959
msgid ""
"Here is an example of replacing the @sc{cdr} of a list with a different "
"list.  All but the first element of the list are removed in favor of a "
"different sequence of elements.  The first element is unchanged, because it "
"resides in the @sc{car} of the list, and is not reached via the @sc{cdr}."
msgstr ""

# type: group
#: lispref/lists.texi:964 lispref/lists.texi:1076 lispref/lists.texi:1096
#, no-wrap
msgid ""
"(setq x '(1 2 3))\n"
"     @result{} (1 2 3)\n"
msgstr ""

# type: group
#: lispref/lists.texi:968
#, no-wrap
msgid ""
"(setcdr x '(4))\n"
"     @result{} (4)\n"
msgstr ""

# type: group
#: lispref/lists.texi:972
#, no-wrap
msgid ""
"x\n"
"     @result{} (1 4)\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:979
msgid ""
"You can delete elements from the middle of a list by altering the @sc{cdr}s "
"of the cons cells in the list.  For example, here we delete the second "
"element, @code{b}, from the list @code{(a b c)}, by changing the @sc{cdr} of "
"the first cons cell:"
msgstr ""

# type: group
#: lispref/lists.texi:988
#, no-wrap
msgid ""
"(setq x1 '(a b c))\n"
"     @result{} (a b c)\n"
"(setcdr x1 (cdr (cdr x1)))\n"
"     @result{} (c)\n"
"x1\n"
"     @result{} (a c)\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:992
msgid "Here is the result in box notation:"
msgstr ""

# type: group
#: lispref/lists.texi:1002
#, no-wrap
msgid ""
"                   --------------------\n"
"                  |                    |\n"
" --------------   |   --------------   |    --------------\n"
"| car   | cdr  |  |  | car   | cdr  |   -->| car   | cdr  |\n"
"|   a   |   o-----   |   b   |   o-------->|   c   |  nil |\n"
"|       |      |     |       |      |      |       |      |\n"
" --------------       --------------        --------------\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:1009
msgid ""
"The second cons cell, which previously held the element @code{b}, still "
"exists and its @sc{car} is still @code{b}, but it no longer forms part of "
"this list."
msgstr ""

# type: Plain text
#: lispref/lists.texi:1011
msgid "It is equally easy to insert a new element by changing @sc{cdr}s:"
msgstr ""

# type: group
#: lispref/lists.texi:1020
#, no-wrap
msgid ""
"(setq x1 '(a b c))\n"
"     @result{} (a b c)\n"
"(setcdr x1 (cons 'd (cdr x1)))\n"
"     @result{} (d b c)\n"
"x1\n"
"     @result{} (a d b c)\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:1024
msgid "Here is this result in box notation:"
msgstr ""

# type: group
#: lispref/lists.texi:1040
#, no-wrap
msgid ""
" --------------        -------------       -------------\n"
"| car  | cdr   |      | car  | cdr  |     | car  | cdr  |\n"
"|   a  |   o   |   -->|   b  |   o------->|   c  |  nil |\n"
"|      |   |   |  |   |      |      |     |      |      |\n"
" --------- | --   |    -------------       -------------\n"
"           |      |\n"
"     -----         --------\n"
"    |                      |\n"
"    |    ---------------   |\n"
"    |   | car   | cdr   |  |\n"
"     -->|   d   |   o------\n"
"        |       |       |\n"
"         ---------------\n"
msgstr ""

# type: subsection
#: lispref/lists.texi:1044
#, no-wrap
msgid "Functions that Rearrange Lists"
msgstr ""

# type: cindex
#: lispref/lists.texi:1045
#, no-wrap
msgid "rearrangement of lists"
msgstr ""

# type: cindex
#: lispref/lists.texi:1046
#, no-wrap
msgid "modification of lists"
msgstr ""

# type: Plain text
#: lispref/lists.texi:1053
msgid ""
"Here are some functions that rearrange lists ``destructively'' by modifying "
"the @sc{cdr}s of their component cons cells.  We call these functions "
"``destructive'' because they chew up the original lists passed to them as "
"arguments, relinking their cons cells to form a new list that is the "
"returned value."
msgstr ""

# type: ifnottex
#: lispref/lists.texi:1057
msgid ""
"See @code{delq}, in @ref{Sets And Lists}, for another function that modifies "
"cons cells."
msgstr ""

# type: iftex
#: lispref/lists.texi:1061
msgid ""
"The function @code{delq} in the following section is another example of "
"destructive list manipulation."
msgstr ""

# type: defun
#: lispref/lists.texi:1063
#, no-wrap
msgid "nconc &rest lists"
msgstr ""

# type: cindex
#: lispref/lists.texi:1064
#, no-wrap
msgid "concatenating lists"
msgstr ""

# type: cindex
#: lispref/lists.texi:1065
#, no-wrap
msgid "joining lists"
msgstr ""

# type: defun
#: lispref/lists.texi:1071
msgid ""
"This function returns a list containing all the elements of @var{lists}.  "
"Unlike @code{append} (@pxref{Building Lists}), the @var{lists} are @emph"
"{not} copied.  Instead, the last @sc{cdr} of each of the @var{lists} is "
"changed to refer to the following list.  The last of the @var{lists} is not "
"altered.  For example:"
msgstr ""

# type: group
#: lispref/lists.texi:1080
#, no-wrap
msgid ""
"(nconc x '(4 5))\n"
"     @result{} (1 2 3 4 5)\n"
msgstr ""

# type: group
#: lispref/lists.texi:1084
#, no-wrap
msgid ""
"x\n"
"     @result{} (1 2 3 4 5)\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1091
msgid ""
"Since the last argument of @code{nconc} is not itself modified, it is "
"reasonable to use a constant list, such as @code{'(4 5)}, as in the above "
"example.  For the same reason, the last argument need not be a list:"
msgstr ""

# type: group
#: lispref/lists.texi:1100
#, no-wrap
msgid ""
"(nconc x 'z)\n"
"     @result{} (1 2 3 . z)\n"
msgstr ""

# type: group
#: lispref/lists.texi:1104
#, no-wrap
msgid ""
"x\n"
"     @result{} (1 2 3 . z)\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1108
msgid "However, the other arguments (all but the last) must be lists."
msgstr ""

# type: defun
#: lispref/lists.texi:1112
msgid ""
"A common pitfall is to use a quoted constant list as a non-last argument to "
"@code{nconc}.  If you do this, your program will change each time you run "
"it! Here is what happens:"
msgstr ""

# type: group
#: lispref/lists.texi:1117
#, no-wrap
msgid ""
"(defun add-foo (x)            ; @r{We want this function to add}\n"
"  (nconc '(foo) x))           ;   @r{@code{foo} to the front of its arg.}\n"
msgstr ""

# type: group
#: lispref/lists.texi:1122
#, no-wrap
msgid ""
"(symbol-function 'add-foo)\n"
"     @result{} (lambda (x) (nconc (quote (foo)) x))\n"
msgstr ""

# type: group
#: lispref/lists.texi:1127
#, no-wrap
msgid ""
"(setq xx (add-foo '(1 2)))    ; @r{It seems to work.}\n"
"     @result{} (foo 1 2)\n"
msgstr ""

# type: group
#: lispref/lists.texi:1131
#, no-wrap
msgid ""
"(setq xy (add-foo '(3 4)))    ; @r{What happened?}\n"
"     @result{} (foo 1 2 3 4)\n"
msgstr ""

# type: group
#: lispref/lists.texi:1135
#, no-wrap
msgid ""
"(eq xx xy)\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/lists.texi:1140
#, no-wrap
msgid ""
"(symbol-function 'add-foo)\n"
"     @result{} (lambda (x) (nconc (quote (foo 1 2 3 4) x)))\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1144
#, no-wrap
msgid "nreverse list"
msgstr ""

# type: cindex
#: lispref/lists.texi:1145
#, no-wrap
msgid "reversing a list"
msgstr ""

# type: defun
#: lispref/lists.texi:1151
msgid ""
"This function reverses the order of the elements of @var{list}.  Unlike @code"
"{reverse}, @code{nreverse} alters its argument by reversing the @sc{cdr}s in "
"the cons cells forming the list.  The cons cell that used to be the last one "
"in @var{list} becomes the first cons cell of the value."
msgstr ""

# type: group
#: lispref/lists.texi:1158
#, no-wrap
msgid ""
"(setq x '(a b c))\n"
"     @result{} (a b c)\n"
msgstr ""

# type: group
#: lispref/lists.texi:1164
#, no-wrap
msgid ""
"x\n"
"     @result{} (a b c)\n"
"(nreverse x)\n"
"     @result{} (c b a)\n"
msgstr ""

# type: group
#: lispref/lists.texi:1169
#, no-wrap
msgid ""
";; @r{The cons cell that was first is now last.}\n"
"x\n"
"     @result{} (a)\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1174
msgid ""
"To avoid confusion, we usually store the result of @code{nreverse} back in "
"the same variable which held the original list:"
msgstr ""

# type: example
#: lispref/lists.texi:1177
#, no-wrap
msgid "(setq x (nreverse x))\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1181
msgid ""
"Here is the @code{nreverse} of our favorite example, @code{(a b c)}, "
"presented graphically:"
msgstr ""

# type: group
#: lispref/lists.texi:1192
#, no-wrap
msgid ""
"@r{Original list head:}                       @r{Reversed list:}\n"
" -------------        -------------        ------------\n"
"| car  | cdr  |      | car  | cdr  |      | car | cdr  |\n"
"|   a  |  nil |<--   |   b  |   o  |<--   |   c |   o  |\n"
"|      |      |   |  |      |   |  |   |  |     |   |  |\n"
" -------------    |   --------- | -    |   -------- | -\n"
"                  |             |      |            |\n"
"                   -------------        ------------\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1196
#, no-wrap
msgid "sort list predicate"
msgstr ""

# type: cindex
#: lispref/lists.texi:1197
#, no-wrap
msgid "stable sort"
msgstr ""

# type: cindex
#: lispref/lists.texi:1198
#, no-wrap
msgid "sorting lists"
msgstr ""

# type: defun
#: lispref/lists.texi:1205
msgid ""
"This function sorts @var{list} stably, though destructively, and returns the "
"sorted list.  It compares elements using @var{predicate}.  A stable sort is "
"one in which elements with equal sort keys maintain their relative order "
"before and after the sort.  Stability is important when successive sorts are "
"used to order elements according to different criteria."
msgstr ""

# type: defun
#: lispref/lists.texi:1210
msgid ""
"The argument @var{predicate} must be a function that accepts two arguments.  "
"It is called with two elements of @var{list}.  To get an increasing order "
"sort, the @var{predicate} should return non-@code{nil} if the first element "
"is ``less than'' the second, or @code{nil} if not."
msgstr ""

# type: defun
#: lispref/lists.texi:1219
msgid ""
"The comparison function @var{predicate} must give reliable results for any "
"given pair of arguments, at least within a single call to @code{sort}.  It "
"must be @dfn{antisymmetric}; that is, if @var{a} is less than @var{b}, @var"
"{b} must not be less than @var{a}.  It must be @dfn{transitive}---that is, "
"if @var{a} is less than @var{b}, and @var{b} is less than @var{c}, then @var"
"{a} must be less than @var{c}.  If you use a comparison function which does "
"not meet these requirements, the result of @code{sort} is unpredictable."
msgstr ""

# type: defun
#: lispref/lists.texi:1225
msgid ""
"The destructive aspect of @code{sort} is that it rearranges the cons cells "
"forming @var{list} by changing @sc{cdr}s.  A nondestructive sort function "
"would create new cons cells to store the elements in their sorted order.  If "
"you wish to make a sorted copy without destroying the original, copy it "
"first with @code{copy-sequence} and then sort."
msgstr ""

# type: defun
#: lispref/lists.texi:1231
msgid ""
"Sorting does not change the @sc{car}s of the cons cells in @var{list}; the "
"cons cell that originally contained the element @code{a} in @var{list} still "
"has @code{a} in its @sc{car} after sorting, but it now appears in a "
"different position in the list due to the change of @sc{cdr}s.  For example:"
msgstr ""

# type: group
#: lispref/lists.texi:1236
#, no-wrap
msgid ""
"(setq nums '(1 3 2 6 5 4 0))\n"
"     @result{} (1 3 2 6 5 4 0)\n"
msgstr ""

# type: group
#: lispref/lists.texi:1240
#, no-wrap
msgid ""
"(sort nums '<)\n"
"     @result{} (0 1 2 3 4 5 6)\n"
msgstr ""

# type: group
#: lispref/lists.texi:1244
#, no-wrap
msgid ""
"nums\n"
"     @result{} (1 2 3 4 5 6)\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1254
msgid ""
"@strong{Warning}: Note that the list in @code{nums} no longer contains 0; "
"this is the same cons cell that it was before, but it is no longer the first "
"one in the list.  Don't assume a variable that formerly held the argument "
"now holds the entire sorted list! Instead, save the result of @code{sort} "
"and use that.  Most often we store the result back into the variable that "
"held the original list:"
msgstr ""

# type: example
#: lispref/lists.texi:1257
#, no-wrap
msgid "(setq nums (sort nums '<))\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1262
msgid ""
"@xref{Sorting}, for more functions that perform sorting.  See @code"
"{documentation} in @ref{Accessing Documentation}, for a useful example of "
"@code{sort}."
msgstr ""

# type: section
#: lispref/lists.texi:1265
#, no-wrap
msgid "Using Lists as Sets"
msgstr ""

# type: cindex
#: lispref/lists.texi:1266
#, no-wrap
msgid "lists as sets"
msgstr ""

# type: cindex
#: lispref/lists.texi:1267
#, no-wrap
msgid "sets"
msgstr ""

# type: Plain text
#: lispref/lists.texi:1276
msgid ""
"A list can represent an unordered mathematical set---simply consider a value "
"an element of a set if it appears in the list, and ignore the order of the "
"list.  To form the union of two sets, use @code{append} (as long as you "
"don't mind having duplicate elements).  You can remove @code{equal} "
"duplicates using @code{delete-dups}.  Other useful functions for sets "
"include @code{memq} and @code{delq}, and their @code{equal} versions, @code"
"{member} and @code{delete}."
msgstr ""

# type: cindex
#: lispref/lists.texi:1277
#, no-wrap
msgid "CL note---lack @code{union}, @code{intersection}"
msgstr ""

# type: quotation
#: lispref/lists.texi:1283
msgid ""
"@b{Common Lisp note:} Common Lisp has functions @code{union} (which avoids "
"duplicate elements) and @code{intersection} for set operations, but GNU "
"Emacs Lisp does not have them.  You can write them in Lisp if you wish."
msgstr ""

# type: defun
#: lispref/lists.texi:1285
#, no-wrap
msgid "memq object list"
msgstr ""

# type: cindex
#: lispref/lists.texi:1286
#, no-wrap
msgid "membership in a list"
msgstr ""

# type: defun
#: lispref/lists.texi:1292
msgid ""
"This function tests to see whether @var{object} is a member of @var{list}.  "
"If it is, @code{memq} returns a list starting with the first occurrence of "
"@var{object}.  Otherwise, it returns @code{nil}.  The letter @samp{q} in "
"@code{memq} says that it uses @code{eq} to compare @var{object} against the "
"elements of the list.  For example:"
msgstr ""

# type: group
#: lispref/lists.texi:1297
#, no-wrap
msgid ""
"(memq 'b '(a b c b a))\n"
"     @result{} (b c b a)\n"
msgstr ""

# type: group
#: lispref/lists.texi:1301 lispref/lists.texi:1437
#, no-wrap
msgid ""
"(memq '(2) '((1) (2)))    ; @r{@code{(2)} and @code{(2)} are not @code{eq}.}\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1305
#, no-wrap
msgid "delq object list"
msgstr ""

# type: cindex
#: lispref/lists.texi:1306
#, no-wrap
msgid "deleting list elements"
msgstr ""

# type: defun
#: lispref/lists.texi:1311
msgid ""
"This function destructively removes all elements @code{eq} to @var{object} "
"from @var{list}.  The letter @samp{q} in @code{delq} says that it uses @code"
"{eq} to compare @var{object} against the elements of the list, like @code"
"{memq} and @code{remq}."
msgstr ""

# type: Plain text
#: lispref/lists.texi:1316
msgid ""
"When @code{delq} deletes elements from the front of the list, it does so "
"simply by advancing down the list and returning a sublist that starts after "
"those elements:"
msgstr ""

# type: group
#: lispref/lists.texi:1320
#, no-wrap
msgid "(delq 'a '(a b c)) @equiv{} (cdr '(a b c))\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:1325
msgid ""
"When an element to be deleted appears in the middle of the list, removing it "
"involves changing the @sc{cdr}s (@pxref{Setcdr})."
msgstr ""

# type: group
#: lispref/lists.texi:1330
#, no-wrap
msgid ""
"(setq sample-list '(a b c (4)))\n"
"     @result{} (a b c (4))\n"
msgstr ""

# type: group
#: lispref/lists.texi:1334
#, no-wrap
msgid ""
"(delq 'a sample-list)\n"
"     @result{} (b c (4))\n"
msgstr ""

# type: group
#: lispref/lists.texi:1338
#, no-wrap
msgid ""
"sample-list\n"
"     @result{} (a b c (4))\n"
msgstr ""

# type: group
#: lispref/lists.texi:1342
#, no-wrap
msgid ""
"(delq 'c sample-list)\n"
"     @result{} (a b (4))\n"
msgstr ""

# type: group
#: lispref/lists.texi:1346
#, no-wrap
msgid ""
"sample-list\n"
"     @result{} (a b (4))\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:1356
msgid ""
"Note that @code{(delq 'c sample-list)} modifies @code{sample-list} to splice "
"out the third element, but @code{(delq 'a sample-list)} does not splice "
"anything---it just returns a shorter list.  Don't assume that a variable "
"which formerly held the argument @var{list} now has fewer elements, or that "
"it still holds the original list! Instead, save the result of @code{delq} "
"and use that.  Most often we store the result back into the variable that "
"held the original list:"
msgstr ""

# type: example
#: lispref/lists.texi:1359
#, no-wrap
msgid "(setq flowers (delq 'rose flowers))\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:1363
msgid ""
"In the following example, the @code{(4)} that @code{delq} attempts to match "
"and the @code{(4)} in the @code{sample-list} are not @code{eq}:"
msgstr ""

# type: group
#: lispref/lists.texi:1368
#, no-wrap
msgid ""
"(delq '(4) sample-list)\n"
"     @result{} (a c (4))\n"
msgstr ""

# type: example
#: lispref/lists.texi:1372
#, no-wrap
msgid ""
"If you want to delete elements that are @code{equal} to a given value,\n"
"use @code{delete} (see below).\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1374
#, no-wrap
msgid "remq object list"
msgstr ""

# type: defun
#: lispref/lists.texi:1379
msgid ""
"This function returns a copy of @var{list}, with all elements removed which "
"are @code{eq} to @var{object}.  The letter @samp{q} in @code{remq} says that "
"it uses @code{eq} to compare @var{object} against the elements of @code"
"{list}."
msgstr ""

# type: group
#: lispref/lists.texi:1384
#, no-wrap
msgid ""
"(setq sample-list '(a b c a b c))\n"
"     @result{} (a b c a b c)\n"
msgstr ""

# type: group
#: lispref/lists.texi:1388
#, no-wrap
msgid ""
"(remq 'a sample-list)\n"
"     @result{} (b c b c)\n"
msgstr ""

# type: group
#: lispref/lists.texi:1392
#, no-wrap
msgid ""
"sample-list\n"
"     @result{} (a b c a b c)\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1396
#, no-wrap
msgid "memql object list"
msgstr ""

# type: defun
#: lispref/lists.texi:1402
msgid ""
"The function @code{memql} tests to see whether @var{object} is a member of "
"@var{list}, comparing members with @var{object} using @code{eql}, so "
"floating point elements are compared by value.  If @var{object} is a member, "
"@code{memql} returns a list starting with its first occurrence in @var"
"{list}.  Otherwise, it returns @code{nil}."
msgstr ""

# type: defun
#: lispref/lists.texi:1404 lispref/lists.texi:1428
msgid "Compare this with @code{memq}:"
msgstr ""

# type: group
#: lispref/lists.texi:1409
#, no-wrap
msgid ""
"(memql 1.2 '(1.1 1.2 1.3))  ; @r{@code{1.2} and @code{1.2} are @code{eql}.}\n"
"     @result{} (1.2 1.3)\n"
msgstr ""

# type: group
#: lispref/lists.texi:1413
#, no-wrap
msgid ""
"(memq 1.2 '(1.1 1.2 1.3))  ; @r{@code{1.2} and @code{1.2} are not @code{eq}.}\n"
"     @result{} nil\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:1420
msgid ""
"The following three functions are like @code{memq}, @code{delq} and @code"
"{remq}, but use @code{equal} rather than @code{eq} to compare elements.  "
"@xref{Equality Predicates}."
msgstr ""

# type: defun
#: lispref/lists.texi:1421
#, no-wrap
msgid "member object list"
msgstr ""

# type: defun
#: lispref/lists.texi:1426
msgid ""
"The function @code{member} tests to see whether @var{object} is a member of "
"@var{list}, comparing members with @var{object} using @code{equal}.  If @var"
"{object} is a member, @code{member} returns a list starting with its first "
"occurrence in @var{list}.  Otherwise, it returns @code{nil}."
msgstr ""

# type: group
#: lispref/lists.texi:1433
#, no-wrap
msgid ""
"(member '(2) '((1) (2)))  ; @r{@code{(2)} and @code{(2)} are @code{equal}.}\n"
"     @result{} ((2))\n"
msgstr ""

# type: group
#: lispref/lists.texi:1442
#, no-wrap
msgid ""
";; @r{Two strings with the same contents are @code{equal}.}\n"
"(member \"foo\" '(\"foo\" \"bar\"))\n"
"     @result{} (\"foo\" \"bar\")\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1446
#, no-wrap
msgid "delete object sequence"
msgstr ""

# type: defun
#: lispref/lists.texi:1453
msgid ""
"If @code{sequence} is a list, this function destructively removes all "
"elements @code{equal} to @var{object} from @var{sequence}.  For lists, @code"
"{delete} is to @code{delq} as @code{member} is to @code{memq}: it uses @code"
"{equal} to compare elements with @var{object}, like @code{member}; when it "
"finds an element that matches, it cuts the element out just as @code{delq} "
"would."
msgstr ""

# type: defun
#: lispref/lists.texi:1457
msgid ""
"If @code{sequence} is a vector or string, @code{delete} returns a copy of "
"@code{sequence} with all elements @code{equal} to @code{object} removed."
msgstr ""

# type: group
#: lispref/lists.texi:1469
#, no-wrap
msgid ""
"(setq l '((2) (1) (2)))\n"
"(delete '(2) l)\n"
"     @result{} ((1))\n"
"l\n"
"     @result{} ((2) (1))\n"
";; @r{If you want to change @code{l} reliably,}\n"
";; @r{write @code{(setq l (delete elt l))}.}\n"
msgstr ""

# type: group
#: lispref/lists.texi:1478
#, no-wrap
msgid ""
"(setq l '((2) (1) (2)))\n"
"(delete '(1) l)\n"
"     @result{} ((2) (2))\n"
"l\n"
"     @result{} ((2) (2))\n"
";; @r{In this case, it makes no difference whether you set @code{l},}\n"
";; @r{but you should do so for the sake of the other case.}\n"
msgstr ""

# type: group
#: lispref/lists.texi:1482
#, no-wrap
msgid ""
"(delete '(2) [(2) (1) (2)])\n"
"     @result{} [(1)]\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1486
#, no-wrap
msgid "remove object sequence"
msgstr ""

# type: defun
#: lispref/lists.texi:1490
msgid ""
"This function is the non-destructive counterpart of @code{delete}.  It "
"returns a copy of @code{sequence}, a list, vector, or string, with elements "
"@code{equal} to @code{object} removed.  For example:"
msgstr ""

# type: group
#: lispref/lists.texi:1495
#, no-wrap
msgid ""
"(remove '(2) '((2) (1) (2)))\n"
"     @result{} ((1))\n"
msgstr ""

# type: group
#: lispref/lists.texi:1499
#, no-wrap
msgid ""
"(remove '(2) [(2) (1) (2)])\n"
"     @result{} [(1)]\n"
msgstr ""

# type: quotation
#: lispref/lists.texi:1508
msgid ""
"@b{Common Lisp note:} The functions @code{member}, @code{delete} and @code"
"{remove} in GNU Emacs Lisp are derived from Maclisp, not Common Lisp.  The "
"Common Lisp versions do not use @code{equal} to compare elements."
msgstr ""

# type: defun
#: lispref/lists.texi:1510
#, no-wrap
msgid "member-ignore-case object list"
msgstr ""

# type: defun
#: lispref/lists.texi:1516
msgid ""
"This function is like @code{member}, except that @var{object} should be a "
"string and that it ignores differences in letter-case and text "
"representation: upper-case and lower-case letters are treated as equal, and "
"unibyte strings are converted to multibyte prior to comparison."
msgstr ""

# type: defun
#: lispref/lists.texi:1518
#, no-wrap
msgid "delete-dups list"
msgstr ""

# type: defun
#: lispref/lists.texi:1523
msgid ""
"This function destructively removes all @code{equal} duplicates from @var"
"{list}, stores the result in @var{list} and returns it.  Of several @code"
"{equal} occurrences of an element in @var{list}, @code{delete-dups} keeps "
"the first one."
msgstr ""

# type: Plain text
#: lispref/lists.texi:1528
msgid ""
"See also the function @code{add-to-list}, in @ref{List Variables}, for a way "
"to add an element to a list stored in a variable and used as a set."
msgstr ""

# type: cindex
#: lispref/lists.texi:1531
#, no-wrap
msgid "association list"
msgstr ""

# type: Plain text
#: lispref/lists.texi:1541
msgid ""
"An @dfn{association list}, or @dfn{alist} for short, records a mapping from "
"keys to values.  It is a list of cons cells called @dfn{associations}: the "
"@sc{car} of each cons cell is the @dfn{key}, and the @sc{cdr} is the @dfn"
"{associated value}.@footnote{This usage of ``key'' is not related to the "
"term ``key sequence''; it means a value used to look up an item in a table.  "
"In this case, the table is the alist, and the alist associations are the "
"items.}"
msgstr ""

# type: Plain text
#: lispref/lists.texi:1545
msgid ""
"Here is an example of an alist.  The key @code{pine} is associated with the "
"value @code{cones}; the key @code{oak} is associated with @code{acorns}; and "
"the key @code{maple} is associated with @code{seeds}."
msgstr ""

# type: group
#: lispref/lists.texi:1551
#, no-wrap
msgid ""
"((pine . cones)\n"
" (oak . acorns)\n"
" (maple . seeds))\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:1559
msgid ""
"Both the values and the keys in an alist may be any Lisp objects.  For "
"example, in the following alist, the symbol @code{a} is associated with the "
"number @code{1}, and the string @code{\"b\"} is associated with the @emph"
"{list} @code{(2 3)}, which is the @sc{cdr} of the alist element:"
msgstr ""

# type: example
#: lispref/lists.texi:1562
#, no-wrap
msgid "((a . 1) (\"b\" 2 3))\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:1567
msgid ""
"Sometimes it is better to design an alist to store the associated value in "
"the @sc{car} of the @sc{cdr} of the element.  Here is an example of such an "
"alist:"
msgstr ""

# type: example
#: lispref/lists.texi:1570
#, no-wrap
msgid "((rose red) (lily white) (buttercup yellow))\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:1580
msgid ""
"Here we regard @code{red} as the value associated with @code{rose}.  One "
"advantage of this kind of alist is that you can store other related "
"information---even a list of other items---in the @sc{cdr} of the @sc{cdr}.  "
"One disadvantage is that you cannot use @code{rassq} (see below) to find the "
"element containing a given value.  When neither of these considerations is "
"important, the choice is a matter of taste, as long as you are consistent "
"about it for any given alist."
msgstr ""

# type: Plain text
#: lispref/lists.texi:1584
msgid ""
"The same alist shown above could be regarded as having the associated value "
"in the @sc{cdr} of the element; the value associated with @code{rose} would "
"be the list @code{(red)}."
msgstr ""

# type: Plain text
#: lispref/lists.texi:1590
msgid ""
"Association lists are often used to record information that you might "
"otherwise keep on a stack, since new associations may be added easily to the "
"front of the list.  When searching an association list for an association "
"with a given key, the first one found is returned, if there is more than one."
msgstr ""

# type: Plain text
#: lispref/lists.texi:1595
msgid ""
"In Emacs Lisp, it is @emph{not} an error if an element of an association "
"list is not a cons cell.  The alist search functions simply ignore such "
"elements.  Many other versions of Lisp signal errors in such cases."
msgstr ""

# type: Plain text
#: lispref/lists.texi:1600
msgid ""
"Note that property lists are similar to association lists in several "
"respects.  A property list behaves like an association list in which each "
"key can occur only once.  @xref{Property Lists}, for a comparison of "
"property lists and association lists."
msgstr ""

# type: defun
#: lispref/lists.texi:1601
#, no-wrap
msgid "assoc key alist"
msgstr ""

# type: defun
#: lispref/lists.texi:1607
msgid ""
"This function returns the first association for @var{key} in @var{alist}, "
"comparing @var{key} against the alist elements using @code{equal} (@pxref"
"{Equality Predicates}).  It returns @code{nil} if no association in @var"
"{alist} has a @sc{car} @code{equal} to @var{key}.  For example:"
msgstr ""

# type: smallexample
#: lispref/lists.texi:1617
#, no-wrap
msgid ""
"(setq trees '((pine . cones) (oak . acorns) (maple . seeds)))\n"
"     @result{} ((pine . cones) (oak . acorns) (maple . seeds))\n"
"(assoc 'oak trees)\n"
"     @result{} (oak . acorns)\n"
"(cdr (assoc 'oak trees))\n"
"     @result{} acorns\n"
"(assoc 'birch trees)\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1620
msgid "Here is another example, in which the keys and values are not symbols:"
msgstr ""

# type: smallexample
#: lispref/lists.texi:1626
#, no-wrap
msgid ""
"(setq needles-per-cluster\n"
"      '((2 \"Austrian Pine\" \"Red Pine\")\n"
"        (3 \"Pitch Pine\")\n"
"        (5 \"White Pine\")))\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/lists.texi:1631
#, no-wrap
msgid ""
"(cdr (assoc 3 needles-per-cluster))\n"
"     @result{} (\"Pitch Pine\")\n"
"(cdr (assoc 2 needles-per-cluster))\n"
"     @result{} (\"Austrian Pine\" \"Red Pine\")\n"
msgstr ""

# type: Plain text
#: lispref/lists.texi:1637
msgid ""
"The function @code{assoc-string} is much like @code{assoc} except that it "
"ignores certain differences between strings.  @xref{Text Comparison}."
msgstr ""

# type: defun
#: lispref/lists.texi:1638
#, no-wrap
msgid "rassoc value alist"
msgstr ""

# type: defun
#: lispref/lists.texi:1642
msgid ""
"This function returns the first association with value @var{value} in @var"
"{alist}.  It returns @code{nil} if no association in @var{alist} has a @sc"
"{cdr} @code{equal} to @var{value}."
msgstr ""

# type: defun
#: lispref/lists.texi:1646
msgid ""
"@code{rassoc} is like @code{assoc} except that it compares the @sc{cdr} of "
"each @var{alist} association instead of the @sc{car}.  You can think of this "
"as ``reverse @code{assoc},'' finding the key for a given value."
msgstr ""

# type: defun
#: lispref/lists.texi:1648
#, no-wrap
msgid "assq key alist"
msgstr ""

# type: defun
#: lispref/lists.texi:1656
msgid ""
"This function is like @code{assoc} in that it returns the first association "
"for @var{key} in @var{alist}, but it makes the comparison using @code{eq} "
"instead of @code{equal}.  @code{assq} returns @code{nil} if no association "
"in @var{alist} has a @sc{car} @code{eq} to @var{key}.  This function is used "
"more often than @code{assoc}, since @code{eq} is faster than @code{equal} "
"and most alists use symbols as keys.  @xref{Equality Predicates}."
msgstr ""

# type: smallexample
#: lispref/lists.texi:1662
#, no-wrap
msgid ""
"(setq trees '((pine . cones) (oak . acorns) (maple . seeds)))\n"
"     @result{} ((pine . cones) (oak . acorns) (maple . seeds))\n"
"(assq 'pine trees)\n"
"     @result{} (pine . cones)\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1666
msgid ""
"On the other hand, @code{assq} is not usually useful in alists where the "
"keys may not be symbols:"
msgstr ""

# type: smallexample
#: lispref/lists.texi:1671
#, no-wrap
msgid ""
"(setq leaves\n"
"      '((\"simple leaves\" . oak)\n"
"        (\"compound leaves\" . horsechestnut)))\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/lists.texi:1676
#, no-wrap
msgid ""
"(assq \"simple leaves\" leaves)\n"
"     @result{} nil\n"
"(assoc \"simple leaves\" leaves)\n"
"     @result{} (\"simple leaves\" . oak)\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1679
#, no-wrap
msgid "rassq value alist"
msgstr ""

# type: defun
#: lispref/lists.texi:1683
msgid ""
"This function returns the first association with value @var{value} in @var"
"{alist}.  It returns @code{nil} if no association in @var{alist} has a @sc"
"{cdr} @code{eq} to @var{value}."
msgstr ""

# type: defun
#: lispref/lists.texi:1687
msgid ""
"@code{rassq} is like @code{assq} except that it compares the @sc{cdr} of "
"each @var{alist} association instead of the @sc{car}.  You can think of this "
"as ``reverse @code{assq},'' finding the key for a given value."
msgstr ""

# type: smallexample
#: lispref/lists.texi:1692
#, no-wrap
msgid ""
"(setq trees '((pine . cones) (oak . acorns) (maple . seeds)))\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/lists.texi:1697
#, no-wrap
msgid ""
"(rassq 'acorns trees)\n"
"     @result{} (oak . acorns)\n"
"(rassq 'spores trees)\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1701
msgid ""
"@code{rassq} cannot search for a value stored in the @sc{car} of the @sc"
"{cdr} of an element:"
msgstr ""

# type: smallexample
#: lispref/lists.texi:1704
#, no-wrap
msgid ""
"(setq colors '((rose red) (lily white) (buttercup yellow)))\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/lists.texi:1707
#, no-wrap
msgid ""
"(rassq 'white colors)\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1712
msgid ""
"In this case, the @sc{cdr} of the association @code{(lily white)} is not the "
"symbol @code{white}, but rather the list @code{(white)}.  This becomes "
"clearer if the association is written in dotted pair notation:"
msgstr ""

# type: smallexample
#: lispref/lists.texi:1715
#, no-wrap
msgid "(lily white) @equiv{} (lily . (white))\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1718
#, no-wrap
msgid "assoc-default key alist &optional test default"
msgstr ""

# type: defun
#: lispref/lists.texi:1727
msgid ""
"This function searches @var{alist} for a match for @var{key}.  For each "
"element of @var{alist}, it compares the element (if it is an atom) or the "
"element's @sc{car} (if it is a cons) against @var{key}, by calling @var"
"{test} with two arguments: the element or its @sc{car}, and @var{key}.  The "
"arguments are passed in that order so that you can get useful results using "
"@code{string-match} with an alist that contains regular expressions (@pxref"
"{Regexp Search}).  If @var{test} is omitted or @code{nil}, @code{equal} is "
"used for comparison."
msgstr ""

# type: defun
#: lispref/lists.texi:1732
msgid ""
"If an alist element matches @var{key} by this criterion, then @code{assoc-"
"default} returns a value based on this element.  If the element is a cons, "
"then the value is the element's @sc{cdr}.  Otherwise, the return value is "
"@var{default}."
msgstr ""

# type: defun
#: lispref/lists.texi:1735
msgid ""
"If no alist element matches @var{key}, @code{assoc-default} returns @code"
"{nil}."
msgstr ""

# type: defun
#: lispref/lists.texi:1737
#, no-wrap
msgid "copy-alist alist"
msgstr ""

# type: cindex
#: lispref/lists.texi:1738
#, no-wrap
msgid "copying alists"
msgstr ""

# type: defun
#: lispref/lists.texi:1742
msgid ""
"This function returns a two-level deep copy of @var{alist}: it creates a new "
"copy of each association, so that you can alter the associations of the new "
"alist without changing the old one."
msgstr ""

# type: group
#: lispref/lists.texi:1748
#, no-wrap
msgid ""
"(setq needles-per-cluster\n"
"      '((2 . (\"Austrian Pine\" \"Red Pine\"))\n"
"        (3 . (\"Pitch Pine\"))\n"
msgstr ""

# type: smallexample
#: lispref/lists.texi:1754
#, no-wrap
msgid ""
"        (5 . (\"White Pine\"))))\n"
"@result{}\n"
"((2 \"Austrian Pine\" \"Red Pine\")\n"
" (3 \"Pitch Pine\")\n"
" (5 \"White Pine\"))\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/lists.texi:1760
#, no-wrap
msgid ""
"(setq copy (copy-alist needles-per-cluster))\n"
"@result{}\n"
"((2 \"Austrian Pine\" \"Red Pine\")\n"
" (3 \"Pitch Pine\")\n"
" (5 \"White Pine\"))\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/lists.texi:1769
#, no-wrap
msgid ""
"(eq needles-per-cluster copy)\n"
"     @result{} nil\n"
"(equal needles-per-cluster copy)\n"
"     @result{} t\n"
"(eq (car needles-per-cluster) (car copy))\n"
"     @result{} nil\n"
"(cdr (car (cdr needles-per-cluster)))\n"
"     @result{} (\"Pitch Pine\")\n"
msgstr ""

# type: group
#: lispref/lists.texi:1773
#, no-wrap
msgid ""
"(eq (cdr (car (cdr needles-per-cluster)))\n"
"    (cdr (car (cdr copy))))\n"
"     @result{} t\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1778
msgid ""
"This example shows how @code{copy-alist} makes it possible to change the "
"associations of one copy without affecting the other:"
msgstr ""

# type: group
#: lispref/lists.texi:1784
#, no-wrap
msgid ""
"(setcdr (assq 3 copy) '(\"Martian Vacuum Pine\"))\n"
"(cdr (assq 3 needles-per-cluster))\n"
"     @result{} (\"Pitch Pine\")\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1788
#, no-wrap
msgid "assq-delete-all key alist"
msgstr ""

# type: defun
#: lispref/lists.texi:1795
msgid ""
"This function deletes from @var{alist} all the elements whose @sc{car} is "
"@code{eq} to @var{key}, much as if you used @code{delq} to delete each such "
"element one by one.  It returns the shortened alist, and often modifies the "
"original list structure of @var{alist}.  For correct results, use the return "
"value of @code{assq-delete-all} rather than looking at the saved value of "
"@var{alist}."
msgstr ""

# type: example
#: lispref/lists.texi:1803
#, no-wrap
msgid ""
"(setq alist '((foo 1) (bar 2) (foo 3) (lose 4)))\n"
"     @result{} ((foo 1) (bar 2) (foo 3) (lose 4))\n"
"(assq-delete-all 'foo alist)\n"
"     @result{} ((bar 2) (lose 4))\n"
"alist\n"
"     @result{} ((foo 1) (bar 2) (lose 4))\n"
msgstr ""

# type: defun
#: lispref/lists.texi:1806
#, no-wrap
msgid "rassq-delete-all value alist"
msgstr ""

# type: defun
#: lispref/lists.texi:1813
msgid ""
"This function deletes from @var{alist} all the elements whose @sc{cdr} is "
"@code{eq} to @var{value}.  It returns the shortened alist, and often "
"modifies the original list structure of @var{alist}.  @code{rassq-delete-"
"all} is like @code{assq-delete-all} except that it compares the @sc{cdr} of "
"each @var{alist} association instead of the @sc{car}."
msgstr ""

# type: section
#: lispref/lists.texi:1816
#, no-wrap
msgid "Managing a Fixed-Size Ring of Objects"
msgstr ""

# type: cindex
#: lispref/lists.texi:1818
#, no-wrap
msgid "ring data structure"
msgstr ""

# type: Plain text
#: lispref/lists.texi:1822
msgid ""
"This section describes functions for operating on rings.  A @dfn{ring} is a "
"fixed-size data structure that supports insertion, deletion, rotation, and "
"modulo-indexed reference and traversal."
msgstr ""

# type: defun
#: lispref/lists.texi:1823
#, no-wrap
msgid "make-ring size"
msgstr ""

# type: defun
#: lispref/lists.texi:1826
msgid ""
"This returns a new ring capable of holding @var{size} objects.  @var{size} "
"should be an integer."
msgstr ""

# type: defun
#: lispref/lists.texi:1828
#, no-wrap
msgid "ring-p object"
msgstr ""

# type: defun
#: lispref/lists.texi:1830
msgid "This returns @code{t} if @var{object} is a ring, @code{nil} otherwise."
msgstr ""

# type: defun
#: lispref/lists.texi:1832
#, no-wrap
msgid "ring-size ring"
msgstr ""

# type: defun
#: lispref/lists.texi:1834
msgid "This returns the maximum capacity of the @var{ring}."
msgstr ""

# type: defun
#: lispref/lists.texi:1836
#, no-wrap
msgid "ring-length ring"
msgstr ""

# type: defun
#: lispref/lists.texi:1839
msgid ""
"This returns the number of objects that @var{ring} currently contains.  The "
"value will never exceed that returned by @code{ring-size}."
msgstr ""

# type: defun
#: lispref/lists.texi:1841
#, no-wrap
msgid "ring-elements ring"
msgstr ""

# type: defun
#: lispref/lists.texi:1843
msgid ""
"This returns a list of the objects in @var{ring}, in order, newest first."
msgstr ""

# type: defun
#: lispref/lists.texi:1845
#, no-wrap
msgid "ring-copy ring"
msgstr ""

# type: defun
#: lispref/lists.texi:1848
msgid ""
"This returns a new ring which is a copy of @var{ring}.  The new ring "
"contains the same (@code{eq}) objects as @var{ring}."
msgstr ""

# type: defun
#: lispref/lists.texi:1850
#, no-wrap
msgid "ring-empty-p ring"
msgstr ""

# type: defun
#: lispref/lists.texi:1852
msgid "This returns @code{t} if @var{ring} is empty, @code{nil} otherwise."
msgstr ""

# type: Plain text
#: lispref/lists.texi:1858
msgid ""
"The newest element in the ring always has index 0.  Higher indices "
"correspond to older elements.  Indices are computed modulo the ring length.  "
"Index @minus{}1 corresponds to the oldest element, @minus{}2 to the next-"
"oldest, and so forth."
msgstr ""

# type: defun
#: lispref/lists.texi:1859
#, no-wrap
msgid "ring-ref ring index"
msgstr ""

# type: defun
#: lispref/lists.texi:1863
msgid ""
"This returns the object in @var{ring} found at index @var{index}.  @var"
"{index} may be negative or greater than the ring length.  If @var{ring} is "
"empty, @code{ring-ref} signals an error."
msgstr ""

# type: defun
#: lispref/lists.texi:1865
#, no-wrap
msgid "ring-insert ring object"
msgstr ""

# type: defun
#: lispref/lists.texi:1868
msgid ""
"This inserts @var{object} into @var{ring}, making it the newest element, and "
"returns @var{object}."
msgstr ""

# type: defun
#: lispref/lists.texi:1871
msgid ""
"If the ring is full, insertion removes the oldest element to make room for "
"the new element."
msgstr ""

# type: defun
#: lispref/lists.texi:1873
#, no-wrap
msgid "ring-remove ring &optional index"
msgstr ""

# type: defun
#: lispref/lists.texi:1878
msgid ""
"Remove an object from @var{ring}, and return that object.  The argument @var"
"{index} specifies which item to remove; if it is @code{nil}, that means to "
"remove the oldest item.  If @var{ring} is empty, @code{ring-remove} signals "
"an error."
msgstr ""

# type: defun
#: lispref/lists.texi:1880
#, no-wrap
msgid "ring-insert-at-beginning ring object"
msgstr ""

# type: defun
#: lispref/lists.texi:1883
msgid ""
"This inserts @var{object} into @var{ring}, treating it as the oldest "
"element.  The return value is not significant."
msgstr ""

# type: defun
#: lispref/lists.texi:1886
msgid ""
"If the ring is full, this function removes the newest element to make room "
"for the inserted element."
msgstr ""

# type: cindex
#: lispref/lists.texi:1888
#, no-wrap
msgid "fifo data structure"
msgstr ""

# type: Plain text
#: lispref/lists.texi:1891
msgid ""
"If you are careful not to exceed the ring size, you can use the ring as a "
"first-in-first-out queue.  For example:"
msgstr ""

# type: lisp
#: lispref/lists.texi:1900
#, no-wrap
msgid ""
"(let ((fifo (make-ring 5)))\n"
"  (mapc (lambda (obj) (ring-insert fifo obj))\n"
"        '(0 one \"two\"))\n"
"  (list (ring-remove fifo) t\n"
"        (ring-remove fifo) t\n"
"        (ring-remove fifo)))\n"
"     @result{} (0 t one t \"two\")\n"
msgstr ""

# type: ignore
#: lispref/lists.texi:1904
#, no-wrap
msgid "   arch-tag: 31fb8a4e-4aa8-4a74-a206-aa00451394d4\n"
msgstr "   arch-tag: 31fb8a4e-4aa8-4a74-a206-aa00451394d4\n"

# type: cindex
#: lispref/loading.texi:9
#, no-wrap
msgid "loading"
msgstr ""

# type: cindex
#: lispref/loading.texi:10
#, no-wrap
msgid "library"
msgstr ""

# type: cindex
#: lispref/loading.texi:11
#, no-wrap
msgid "Lisp library"
msgstr ""

# type: Plain text
#: lispref/loading.texi:16
msgid ""
"Loading a file of Lisp code means bringing its contents into the Lisp "
"environment in the form of Lisp objects.  Emacs finds and opens the file, "
"reads the text, evaluates each form, and then closes the file."
msgstr ""

# type: Plain text
#: lispref/loading.texi:22
msgid ""
"The load functions evaluate all the expressions in a file just as the @code"
"{eval-buffer} function evaluates all the expressions in a buffer.  The "
"difference is that the load functions read and evaluate the text in the file "
"as found on disk, not the text in an Emacs buffer."
msgstr ""

# type: cindex
#: lispref/loading.texi:23
#, no-wrap
msgid "top-level form"
msgstr ""

# type: Plain text
#: lispref/loading.texi:31
msgid ""
"The loaded file must contain Lisp expressions, either as source code or as "
"byte-compiled code.  Each form in the file is called a @dfn{top-level "
"form}.  There is no special format for the forms in a loadable file; any "
"form in a file may equally well be typed directly into a buffer and "
"evaluated there.  (Indeed, most code is tested this way.)  Most often, the "
"forms are function definitions and variable definitions."
msgstr ""

# type: Plain text
#: lispref/loading.texi:36
msgid ""
"A file containing Lisp code is often called a @dfn{library}.  Thus, the "
"``Rmail library'' is a file containing code for Rmail mode.  Similarly, a "
"``Lisp library directory'' is a directory of files containing Lisp code."
msgstr ""

# type: menu
#: lispref/loading.texi:49 lispref/loading.texi:51 lispref/loading.texi:52
#: lispref/vol1.texi:514 lispref/vol2.texi:515
#, no-wrap
msgid "How Programs Do Loading"
msgstr ""

# type: menu
#: lispref/loading.texi:49 lispref/vol1.texi:514 lispref/vol2.texi:515
msgid "The @code{load} function and others."
msgstr ""

# type: section
#: lispref/loading.texi:49 lispref/loading.texi:176 lispref/loading.texi:177
#, no-wrap
msgid "Load Suffixes"
msgstr ""

# type: menu
#: lispref/loading.texi:49
msgid "Details about the suffixes that @code{load} tries."
msgstr ""

# type: section
#: lispref/loading.texi:49 lispref/loading.texi:222 lispref/loading.texi:223
#, no-wrap
msgid "Library Search"
msgstr ""

# type: menu
#: lispref/loading.texi:49
msgid "Finding a library to load."
msgstr ""

# type: node
#: lispref/loading.texi:49 lispref/loading.texi:354
#, no-wrap
msgid "Loading Non-ASCII"
msgstr ""

# type: menu
#: lispref/loading.texi:49
msgid "Non-@acronym{ASCII} characters in Emacs Lisp files."
msgstr ""

# type: menu
#: lispref/loading.texi:49 lispref/loading.texi:393 lispref/loading.texi:394
#: lispref/vol1.texi:514 lispref/vol2.texi:515
#, no-wrap
msgid "Autoload"
msgstr ""

# type: menu
#: lispref/loading.texi:49 lispref/vol1.texi:514 lispref/vol2.texi:515
msgid "Setting up a function to autoload."
msgstr ""

# type: menu
#: lispref/loading.texi:49 lispref/loading.texi:570 lispref/loading.texi:571
#: lispref/vol1.texi:514 lispref/vol2.texi:515
#, no-wrap
msgid "Repeated Loading"
msgstr ""

# type: menu
#: lispref/loading.texi:49 lispref/vol1.texi:514 lispref/vol2.texi:515
msgid "Precautions about loading a file twice."
msgstr ""

# type: menu
#: lispref/loading.texi:49 lispref/loading.texi:636 lispref/vol1.texi:514
#: lispref/vol2.texi:515
#, no-wrap
msgid "Named Features"
msgstr ""

# type: menu
#: lispref/loading.texi:49 lispref/vol1.texi:514 lispref/vol2.texi:515
msgid "Loading a library if it isn't already loaded."
msgstr ""

# type: node
#: lispref/loading.texi:49 lispref/loading.texi:796
#, no-wrap
msgid "Where Defined"
msgstr ""

# type: menu
#: lispref/loading.texi:49
msgid "Finding which file defined a certain symbol."
msgstr ""

# type: section
#: lispref/loading.texi:49 lispref/loading.texi:848 lispref/loading.texi:849
#, no-wrap
msgid "Unloading"
msgstr ""

# type: menu
#: lispref/loading.texi:49
msgid "How to \"unload\" a library that was loaded."
msgstr ""

# type: section
#: lispref/loading.texi:49 lispref/loading.texi:899 lispref/loading.texi:900
#, no-wrap
msgid "Hooks for Loading"
msgstr ""

# type: menu
#: lispref/loading.texi:49
msgid "Providing code to be run when"
msgstr ""

# type: menu
#: lispref/loading.texi:49
msgid "particular libraries are loaded."
msgstr ""

# type: Plain text
#: lispref/loading.texi:60
msgid ""
"Emacs Lisp has several interfaces for loading.  For example, @code{autoload} "
"creates a placeholder object for a function defined in a file; trying to "
"call the autoloading function loads the file to get the function's real "
"definition (@pxref{Autoload}).  @code{require} loads a file if it isn't "
"already loaded (@pxref{Named Features}).  Ultimately, all these facilities "
"call the @code{load} function to do the work."
msgstr ""

# type: defun
#: lispref/loading.texi:61
#, no-wrap
msgid "load filename &optional missing-ok nomessage nosuffix must-suffix"
msgstr ""

# type: defun
#: lispref/loading.texi:64
msgid ""
"This function finds and opens a file of Lisp code, evaluates all the forms "
"in it, and closes the file."
msgstr ""

# type: defun
#: lispref/loading.texi:76
msgid ""
"To find the file, @code{load} first looks for a file named @file{@var"
"{filename}.elc}, that is, for a file whose name is @var{filename} with the "
"extension @samp{.elc} appended.  If such a file exists, it is loaded.  If "
"there is no file by that name, then @code{load} looks for a file named @file"
"{@var{filename}.el}.  If that file exists, it is loaded.  Finally, if "
"neither of those names is found, @code{load} looks for a file named @var"
"{filename} with nothing appended, and loads it if it exists.  (The @code"
"{load} function is not clever about looking at @var{filename}.  In the "
"perverse case of a file named @file{foo.el.el}, evaluation of @code{(load "
"\"foo.el\")} will indeed find it.)"
msgstr ""

# type: defun
#: lispref/loading.texi:84
msgid ""
"If Auto Compression mode is enabled, as it is by default, then if @code"
"{load} can not find a file, it searches for a compressed version of the file "
"before trying other file names.  It decompresses and loads it if it exists.  "
"It looks for compressed versions by appending each of the suffixes in @code"
"{jka-compr-load-suffixes} to the file name.  The value of this variable must "
"be a list of strings. Its standard value is @code{(\".gz\")}."
msgstr ""

# type: defun
#: lispref/loading.texi:93
msgid ""
"If the optional argument @var{nosuffix} is non-@code{nil}, then @code{load} "
"does not try the suffixes @samp{.elc} and @samp{.el}.  In this case, you "
"must specify the precise file name you want, except that, if Auto "
"Compression mode is enabled, @code{load} will still use @code{jka-compr-load-"
"suffixes} to find compressed versions.  By specifying the precise file name "
"and using @code{t} for @var{nosuffix}, you can prevent perverse file names "
"such as @file{foo.el.el} from being tried."
msgstr ""

# type: defun
#: lispref/loading.texi:98
msgid ""
"If the optional argument @var{must-suffix} is non-@code{nil}, then @code"
"{load} insists that the file name used must end in either @samp{.el} or @samp"
"{.elc} (possibly extended with a compression suffix), unless it contains an "
"explicit directory name."
msgstr ""

# type: defun
#: lispref/loading.texi:108
msgid ""
"If @var{filename} is a relative file name, such as @file{foo} or @file{baz/"
"foo.bar}, @code{load} searches for the file using the variable @code{load-"
"path}.  It appends @var{filename} to each of the directories listed in @code"
"{load-path}, and loads the first file it finds whose name matches.  The "
"current default directory is tried only if it is specified in @code{load-"
"path}, where @code{nil} stands for the default directory.  @code{load} tries "
"all three possible suffixes in the first directory in @code{load-path}, then "
"all three suffixes in the second directory, and so on.  @xref{Library "
"Search}."
msgstr ""

# type: defun
#: lispref/loading.texi:112
msgid ""
"If you get a warning that @file{foo.elc} is older than @file{foo.el}, it "
"means you should consider recompiling @file{foo.el}.  @xref{Byte "
"Compilation}."
msgstr ""

# type: defun
#: lispref/loading.texi:116
msgid ""
"When loading a source file (not compiled), @code{load} performs character "
"set translation just as Emacs would do when visiting the file.  @xref{Coding "
"Systems}."
msgstr ""

# type: defun
#: lispref/loading.texi:120
msgid ""
"Messages like @samp{Loading foo...} and @samp{Loading foo...done} appear in "
"the echo area during loading unless @var{nomessage} is non-@code{nil}."
msgstr ""

# type: cindex
#: lispref/loading.texi:121
#, no-wrap
msgid "load errors"
msgstr ""

# type: defun
#: lispref/loading.texi:125
msgid ""
"Any unhandled errors while loading a file terminate loading.  If the load "
"was done for the sake of @code{autoload}, any function definitions made "
"during the loading are undone."
msgstr ""

# type: defun
#: lispref/loading.texi:131
msgid ""
"If @code{load} can't find the file to load, then normally it signals the "
"error @code{file-error} (with @samp{Cannot open load file @var{filename}}).  "
"But if @var{missing-ok} is non-@code{nil}, then @code{load} just returns "
"@code{nil}."
msgstr ""

# type: defun
#: lispref/loading.texi:135
msgid ""
"You can use the variable @code{load-read-function} to specify a function for "
"@code{load} to use instead of @code{read} for reading expressions.  See "
"below."
msgstr ""

# type: defun
#: lispref/loading.texi:137
msgid "@code{load} returns @code{t} if the file loads successfully."
msgstr ""

# type: deffn
#: lispref/loading.texi:139
#, no-wrap
msgid "Command load-file filename"
msgstr ""

# type: deffn
#: lispref/loading.texi:146
msgid ""
"This command loads the file @var{filename}.  If @var{filename} is a relative "
"file name, then the current default directory is assumed.  This command does "
"not use @code{load-path}, and does not append suffixes.  However, it does "
"look for compressed versions (if Auto Compression Mode is enabled).  Use "
"this command if you wish to specify precisely the file name to load."
msgstr ""

# type: deffn
#: lispref/loading.texi:148
#, no-wrap
msgid "Command load-library library"
msgstr ""

# type: deffn
#: lispref/loading.texi:151
msgid ""
"This command loads the library named @var{library}.  It is equivalent to "
"@code{load}, except in how it reads its argument interactively."
msgstr ""

# type: defvar
#: lispref/loading.texi:153
#, no-wrap
msgid "load-in-progress"
msgstr ""

# type: defvar
#: lispref/loading.texi:156
msgid ""
"This variable is non-@code{nil} if Emacs is in the process of loading a "
"file, and it is @code{nil} otherwise."
msgstr ""

# type: defvar
#: lispref/loading.texi:158
#, no-wrap
msgid "load-read-function"
msgstr ""

# type: anchor{#1}
#: lispref/loading.texi:164
msgid "Definition of load-read-function"
msgstr ""

# type: defvar
#: lispref/loading.texi:164
msgid ""
"This variable specifies an alternate expression-reading function for @code"
"{load} and @code{eval-region} to use instead of @code{read}.  The function "
"should accept one argument, just as @code{read} does."
msgstr ""

# type: defvar
#: lispref/loading.texi:167
msgid ""
"Normally, the variable's value is @code{nil}, which means those functions "
"should use @code{read}."
msgstr ""

# type: defvar
#: lispref/loading.texi:171
msgid ""
"Instead of using this variable, it is cleaner to use another, newer feature: "
"to pass the function as the @var{read-function} argument to @code{eval-"
"region}.  @xref{Definition of eval-region,, Eval}."
msgstr ""

# type: Plain text
#: lispref/loading.texi:175
msgid ""
"For information about how @code{load} is used in building Emacs, see @ref"
"{Building Emacs}."
msgstr ""

# type: Plain text
#: lispref/loading.texi:180
msgid ""
"We now describe some technical details about the exact suffixes that @code"
"{load} tries."
msgstr ""

# type: defvar
#: lispref/loading.texi:181
#, no-wrap
msgid "load-suffixes"
msgstr ""

# type: defvar
#: lispref/loading.texi:187
msgid ""
"This is a list of suffixes indicating (compiled or source) Emacs Lisp "
"files.  It should not include the empty string.  @code{load} uses these "
"suffixes in order when it appends Lisp suffixes to the specified file name.  "
"The standard value is @code{(\".elc\" \".el\")} which produces the behavior "
"described in the previous section."
msgstr ""

# type: defvar
#: lispref/loading.texi:189
#, no-wrap
msgid "load-file-rep-suffixes"
msgstr ""

# type: defvar
#: lispref/loading.texi:194
msgid ""
"This is a list of suffixes that indicate representations of the same file.  "
"This list should normally start with the empty string.  When @code{load} "
"searches for a file it appends the suffixes in this list, in order, to the "
"file name, before searching for another file."
msgstr ""

# type: defvar
#: lispref/loading.texi:203
msgid ""
"Enabling Auto Compression mode appends the suffixes in @code{jka-compr-load-"
"suffixes} to this list and disabling Auto Compression mode removes them "
"again.  The standard value of @code{load-file-rep-suffixes} if Auto "
"Compression mode is disabled is @code{(\"\")}.  Given that the standard "
"value of @code{jka-compr-load-suffixes} is @code{(\".gz\")}, the standard "
"value of @code{load-file-rep-suffixes} if Auto Compression mode is enabled "
"is @code{(\"\" \".gz\")}."
msgstr ""

# type: defun
#: lispref/loading.texi:205
#, no-wrap
msgid "get-load-suffixes"
msgstr ""

# type: defun
#: lispref/loading.texi:214
msgid ""
"This function returns the list of all suffixes that @code{load} should try, "
"in order, when its @var{must-suffix} argument is non-@code{nil}.  This takes "
"both @code{load-suffixes} and @code{load-file-rep-suffixes} into account.  "
"If @code{load-suffixes}, @code{jka-compr-load-suffixes} and @code{load-file-"
"rep-suffixes} all have their standard values, this function returns @code"
"{(\".elc\" \".elc.gz\" \".el\" \".el.gz\")} if Auto Compression mode is "
"enabled and @code{(\".elc\" \".el\")} if Auto Compression mode is disabled."
msgstr ""

# type: Plain text
#: lispref/loading.texi:221
msgid ""
"To summarize, @code{load} normally first tries the suffixes in the value of "
"@code{(get-load-suffixes)} and then those in @code{load-file-rep-suffixes}.  "
"If @var{nosuffix} is non-@code{nil}, it skips the former group, and if @var"
"{must-suffix} is non-@code{nil}, it skips the latter group."
msgstr ""

# type: cindex
#: lispref/loading.texi:224
#, no-wrap
msgid "library search"
msgstr ""

# type: cindex
#: lispref/loading.texi:225
#, no-wrap
msgid "find library"
msgstr ""

# type: Plain text
#: lispref/loading.texi:229
msgid ""
"When Emacs loads a Lisp library, it searches for the library in a list of "
"directories specified by the variable @code{load-path}."
msgstr ""

# type: defopt
#: lispref/loading.texi:230
#, no-wrap
msgid "load-path"
msgstr "load-path"

# type: cindex
#: lispref/loading.texi:231
#, no-wrap
msgid "@code{EMACSLOADPATH} environment variable"
msgstr "variable d'environnement @code{EMACSLOADPATH}"

# type: defopt
#: lispref/loading.texi:236
msgid ""
"The value of this variable is a list of directories to search when loading "
"files with @code{load}.  Each element is a string (which must be a directory "
"name) or @code{nil} (which stands for the current working directory)."
msgstr ""

# type: Plain text
#: lispref/loading.texi:243
msgid ""
"The value of @code{load-path} is initialized from the environment variable "
"@code{EMACSLOADPATH}, if that exists; otherwise its default value is "
"specified in @file{emacs/src/epaths.h} when Emacs is built.  Then the list "
"is expanded by adding subdirectories of the directories in the list."
msgstr ""

# type: Plain text
#: lispref/loading.texi:249
msgid ""
"The syntax of @code{EMACSLOADPATH} is the same as used for @code{PATH}; @samp"
"{:} (or @samp{;}, according to the operating system) separates directory "
"names, and @samp{.} is used for the current default directory.  Here is an "
"example of how to set your @code{EMACSLOADPATH} variable from a @code{csh} "
"@file{.login} file:"
msgstr ""

# type: smallexample
#: lispref/loading.texi:252
#, no-wrap
msgid "setenv EMACSLOADPATH .:/user/bil/emacs:/usr/local/share/emacs/20.3/lisp\n"
msgstr ""

# type: Plain text
#: lispref/loading.texi:255
msgid "Here is how to set it using @code{sh}:"
msgstr ""

# type: smallexample
#: lispref/loading.texi:259
#, no-wrap
msgid ""
"export EMACSLOADPATH\n"
"EMACSLOADPATH=.:/user/bil/emacs:/usr/local/share/emacs/20.3/lisp\n"
msgstr ""

# type: Plain text
#: lispref/loading.texi:264
msgid ""
"Here is an example of code you can place in your init file (@pxref{Init "
"File}) to add several directories to the front of your default @code{load-"
"path}:"
msgstr ""

# type: group
#: lispref/loading.texi:272
#, no-wrap
msgid ""
"(setq load-path\n"
"      (append (list nil \"/user/bil/emacs\"\n"
"                    \"/usr/local/lisplib\"\n"
"                    \"~/emacs\")\n"
"              load-path))\n"
msgstr ""

# type: Plain text
#: lispref/loading.texi:281
msgid ""
"In this example, the path searches the current working directory first, "
"followed then by the @file{/user/bil/emacs} directory, the @file{/usr/local/"
"lisplib} directory, and the @file{~/emacs} directory, which are then "
"followed by the standard directories for Lisp code."
msgstr ""

# type: Plain text
#: lispref/loading.texi:288
msgid ""
"Dumping Emacs uses a special value of @code{load-path}.  If the value of "
"@code{load-path} at the end of dumping is unchanged (that is, still the same "
"special value), the dumped Emacs switches to the ordinary @code{load-path} "
"value when it starts up, as described above.  But if @code{load-path} has "
"any other value at the end of dumping, that value is used for execution of "
"the dumped Emacs also."
msgstr ""

# type: Plain text
#: lispref/loading.texi:293
msgid ""
"Therefore, if you want to change @code{load-path} temporarily for loading a "
"few libraries in @file{site-init.el} or @file{site-load.el}, you should bind "
"@code{load-path} locally with @code{let} around the calls to @code{load}."
msgstr ""

# type: Plain text
#: lispref/loading.texi:297
msgid ""
"The default value of @code{load-path}, when running an Emacs which has been "
"installed on the system, includes two special directories (and their "
"subdirectories as well):"
msgstr ""

# type: smallexample
#: lispref/loading.texi:300
#, no-wrap
msgid "\"/usr/local/share/emacs/@var{version}/site-lisp\"\n"
msgstr ""

# type: smallexample
#: lispref/loading.texi:307
#, no-wrap
msgid "\"/usr/local/share/emacs/site-lisp\"\n"
msgstr ""

# type: Plain text
#: lispref/loading.texi:313
msgid ""
"The first one is for locally installed packages for a particular Emacs "
"version; the second is for locally installed packages meant for use with all "
"installed Emacs versions."
msgstr ""

# type: Plain text
#: lispref/loading.texi:320
msgid ""
"There are several reasons why a Lisp package that works well in one Emacs "
"version can cause trouble in another.  Sometimes packages need updating for "
"incompatible changes in Emacs; sometimes they depend on undocumented "
"internal Emacs data that can change without notice; sometimes a newer Emacs "
"version incorporates a version of the package, and should be used only with "
"that version."
msgstr ""

# type: Plain text
#: lispref/loading.texi:324
msgid ""
"Emacs finds these directories' subdirectories and adds them to @code{load-"
"path} when it starts up.  Both immediate subdirectories and subdirectories "
"multiple levels down are added to @code{load-path}."
msgstr ""

# type: Plain text
#: lispref/loading.texi:331
msgid ""
"Not all subdirectories are included, though.  Subdirectories whose names do "
"not start with a letter or digit are excluded.  Subdirectories named @file"
"{RCS} or @file{CVS} are excluded.  Also, a subdirectory which contains a "
"file named @file{.nosearch} is excluded.  You can use these methods to "
"prevent certain subdirectories of the @file{site-lisp} directories from "
"being searched."
msgstr ""

# type: Plain text
#: lispref/loading.texi:337
msgid ""
"If you run Emacs from the directory where it was built---that is, an "
"executable that has not been formally installed---then @code{load-path} "
"normally contains two additional directories.  These are the @code{lisp} and "
"@code{site-lisp} subdirectories of the main build directory.  (Both are "
"represented as absolute file names.)"
msgstr ""

# type: deffn
#: lispref/loading.texi:338
#, no-wrap
msgid "Command locate-library library &optional nosuffix path interactive-call"
msgstr ""

# type: deffn
#: lispref/loading.texi:344
msgid ""
"This command finds the precise file name for library @var{library}.  It "
"searches for the library in the same way @code{load} does, and the argument "
"@var{nosuffix} has the same meaning as in @code{load}: don't add suffixes "
"@samp{.elc} or @samp{.el} to the specified name @var{library}."
msgstr ""

# type: deffn
#: lispref/loading.texi:347
msgid ""
"If the @var{path} is non-@code{nil}, that list of directories is used "
"instead of @code{load-path}."
msgstr ""

# type: deffn
#: lispref/loading.texi:352
msgid ""
"When @code{locate-library} is called from a program, it returns the file "
"name as a string.  When the user runs @code{locate-library} interactively, "
"the argument @var{interactive-call} is @code{t}, and this tells @code{locate-"
"library} to display the file name in the echo area."
msgstr ""

# type: section
#: lispref/loading.texi:355
#, no-wrap
msgid "Loading Non-@acronym{ASCII} Characters"
msgstr ""

# type: Plain text
#: lispref/loading.texi:367
msgid ""
"When Emacs Lisp programs contain string constants with non-@acronym{ASCII} "
"characters, these can be represented within Emacs either as unibyte strings "
"or as multibyte strings (@pxref{Text Representations}).  Which "
"representation is used depends on how the file is read into Emacs.  If it is "
"read with decoding into multibyte representation, the text of the Lisp "
"program will be multibyte text, and its string constants will be multibyte "
"strings.  If a file containing Latin-1 characters (for example) is read "
"without decoding, the text of the program will be unibyte text, and its "
"string constants will be unibyte strings.  @xref{Coding Systems}."
msgstr ""

# type: Plain text
#: lispref/loading.texi:374
msgid ""
"To make the results more predictable, Emacs always performs decoding into "
"the multibyte representation when loading Lisp files, even if it was started "
"with the @samp{--unibyte} option.  This means that string constants with non-"
"@acronym{ASCII} characters translate into multibyte strings.  The only "
"exception is when a particular file specifies no decoding."
msgstr ""

# type: Plain text
#: lispref/loading.texi:382
msgid ""
"The reason Emacs is designed this way is so that Lisp programs give "
"predictable results, regardless of how Emacs was started.  In addition, this "
"enables programs that depend on using multibyte text to work even in a "
"unibyte Emacs.  Of course, such programs should be designed to notice "
"whether the user prefers unibyte or multibyte text, by checking @code"
"{default-enable-multibyte-characters}, and convert representations "
"appropriately."
msgstr ""

# type: Plain text
#: lispref/loading.texi:392
msgid ""
"In most Emacs Lisp programs, the fact that non-@acronym{ASCII} strings are "
"multibyte strings should not be noticeable, since inserting them in unibyte "
"buffers converts them to unibyte automatically.  However, if this does make "
"a difference, you can force a particular Lisp file to be interpreted as "
"unibyte by writing @samp{-*-unibyte: t;-*-} in a comment on the file's first "
"line.  With that designator, the file will unconditionally be interpreted as "
"unibyte, even in an ordinary multibyte Emacs session.  This can matter when "
"making keybindings to non-@acronym{ASCII} characters written as @code{?v@var"
"{literal}}."
msgstr ""

# type: Plain text
#: lispref/loading.texi:402
msgid ""
"The @dfn{autoload} facility allows you to make a function or macro known in "
"Lisp, but put off loading the file that defines it.  The first call to the "
"function automatically reads the proper file to install the real definition "
"and other associated code, then runs the real definition as if it had been "
"loaded all along."
msgstr ""

# type: Plain text
#: lispref/loading.texi:412
msgid ""
"There are two ways to set up an autoloaded function: by calling @code"
"{autoload}, and by writing a special ``magic'' comment in the source before "
"the real definition.  @code{autoload} is the low-level primitive for "
"autoloading; any Lisp program can call @code{autoload} at any time.  Magic "
"comments are the most convenient way to make a function autoload, for "
"packages installed along with Emacs.  These comments do nothing on their "
"own, but they serve as a guide for the command @code{update-file-autoloads}, "
"which constructs calls to @code{autoload} and arranges to execute them when "
"Emacs is built."
msgstr ""

# type: defun
#: lispref/loading.texi:413
#, no-wrap
msgid "autoload function filename &optional docstring interactive type"
msgstr ""

# type: defun
#: lispref/loading.texi:417
msgid ""
"This function defines the function (or macro) named @var{function} so as to "
"load automatically from @var{filename}.  The string @var{filename} specifies "
"the file to load to get the real definition of @var{function}."
msgstr ""

# type: defun
#: lispref/loading.texi:423
msgid ""
"If @var{filename} does not contain either a directory name, or the suffix "
"@code{.el} or @code{.elc}, then @code{autoload} insists on adding one of "
"these suffixes, and it will not load from a file whose name is just @var"
"{filename} with no added suffix.  (The variable @code{load-suffixes} "
"specifies the exact required suffixes.)"
msgstr ""

# type: defun
#: lispref/loading.texi:431
msgid ""
"The argument @var{docstring} is the documentation string for the function.  "
"Specifying the documentation string in the call to @code{autoload} makes it "
"possible to look at the documentation without loading the function's real "
"definition.  Normally, this should be identical to the documentation string "
"in the function definition itself.  If it isn't, the function definition's "
"documentation string takes effect when it is loaded."
msgstr ""

# type: defun
#: lispref/loading.texi:438
msgid ""
"If @var{interactive} is non-@code{nil}, that says @var{function} can be "
"called interactively.  This lets completion in @kbd{M-x} work without "
"loading @var{function}'s real definition.  The complete interactive "
"specification is not given here; it's not needed unless the user actually "
"calls @var{function}, and when that happens, it's time to load the real "
"definition."
msgstr ""

# type: defun
#: lispref/loading.texi:444
msgid ""
"You can autoload macros and keymaps as well as ordinary functions.  Specify "
"@var{type} as @code{macro} if @var{function} is really a macro.  Specify @var"
"{type} as @code{keymap} if @var{function} is really a keymap.  Various parts "
"of Emacs need to know this information without loading the real definition."
msgstr ""

# type: defun
#: lispref/loading.texi:451
msgid ""
"An autoloaded keymap loads automatically during key lookup when a prefix "
"key's binding is the symbol @var{function}.  Autoloading does not occur for "
"other kinds of access to the keymap.  In particular, it does not happen when "
"a Lisp program gets the keymap from the value of a variable and calls @code"
"{define-key}; not even if the variable name is the same symbol @var"
"{function}."
msgstr ""

# type: cindex
#: lispref/loading.texi:452
#, no-wrap
msgid "function cell in autoload"
msgstr ""

# type: defun
#: lispref/loading.texi:457
msgid ""
"If @var{function} already has a non-void function definition that is not an "
"autoload object, @code{autoload} does nothing and returns @code{nil}.  If "
"the function cell of @var{function} is void, or is already an autoload "
"object, then it is defined as an autoload object like this:"
msgstr ""

# type: example
#: lispref/loading.texi:460
#, no-wrap
msgid "(autoload @var{filename} @var{docstring} @var{interactive} @var{type})\n"
msgstr ""

# type: group
#: lispref/loading.texi:468
#, no-wrap
msgid ""
"(symbol-function 'run-prolog)\n"
"     @result{} (autoload \"prolog\" 169681 t nil)\n"
msgstr ""

# type: defun
#: lispref/loading.texi:477
msgid ""
"In this case, @code{\"prolog\"} is the name of the file to load, 169681 "
"refers to the documentation string in the @file{emacs/etc/DOC-@var{version}} "
"file (@pxref{Documentation Basics}), @code{t} means the function is "
"interactive, and @code{nil} that it is not a macro or a keymap."
msgstr ""

# type: cindex
#: lispref/loading.texi:479
#, no-wrap
msgid "autoload errors"
msgstr ""

# type: Plain text
#: lispref/loading.texi:489
msgid ""
"The autoloaded file usually contains other definitions and may require or "
"provide one or more features.  If the file is not completely loaded (due to "
"an error in the evaluation of its contents), any function definitions or "
"@code{provide} calls that occurred during the load are undone.  This is to "
"ensure that the next attempt to call any function autoloading from this file "
"will try again to load the file.  If not for this, then some of the "
"functions in the file might be defined by the aborted load, but fail to work "
"properly for the lack of certain subroutines not loaded successfully because "
"they come later in the file."
msgstr ""

# type: Plain text
#: lispref/loading.texi:493
msgid ""
"If the autoloaded file fails to define the desired Lisp function or macro, "
"then an error is signaled with data @code{\"Autoloading failed to define "
"function @var{function-name}\"}."
msgstr ""

# type: findex
#: lispref/loading.texi:494
#, no-wrap
msgid "update-file-autoloads"
msgstr "update-file-autoloads"

# type: findex
#: lispref/loading.texi:495
#, no-wrap
msgid "update-directory-autoloads"
msgstr "update-directory-autoloads"

# type: cindex
#: lispref/loading.texi:496
#, no-wrap
msgid "magic autoload comment"
msgstr ""

# type: anchor{#1}
#: lispref/loading.texi:497 lispref/loading.texi:507
#, no-wrap
msgid "autoload cookie"
msgstr ""

# type: Plain text
#: lispref/loading.texi:507
msgid ""
"A magic autoload comment (often called an @dfn{autoload cookie})  consists "
"of @samp{;;;###autoload}, on a line by itself, just before the real "
"definition of the function in its autoloadable source file.  The command @kbd"
"{M-x update-file-autoloads} writes a corresponding @code{autoload} call into "
"@file{loaddefs.el}.  Building Emacs loads @file{loaddefs.el} and thus calls "
"@code{autoload}.  @kbd{M-x update-directory-autoloads} is even more "
"powerful; it updates autoloads for all files in the current directory."
msgstr ""

# type: Plain text
#: lispref/loading.texi:517
msgid ""
"The same magic comment can copy any kind of form into @file{loaddefs.el}.  "
"If the form following the magic comment is not a function-defining form or a "
"@code{defcustom} form, it is copied verbatim.  ``Function-defining forms'' "
"include @code{define-skeleton}, @code{define-derived-mode}, @code{define-"
"generic-mode} and @code{define-minor-mode} as well as @code{defun} and @code"
"{defmacro}.  To save space, a @code{defcustom} form is converted to a @code"
"{defvar} in @file{loaddefs.el}, with some additional information if it uses "
"@code{:require}."
msgstr ""

# type: Plain text
#: lispref/loading.texi:524
msgid ""
"You can also use a magic comment to execute a form at build time @emph"
"{without} executing it when the file itself is loaded.  To do this, write "
"the form @emph{on the same line} as the magic comment.  Since it is in a "
"comment, it does nothing when you load the source file; but @kbd{M-x update-"
"file-autoloads} copies it to @file{loaddefs.el}, where it is executed while "
"building Emacs."
msgstr ""

# type: Plain text
#: lispref/loading.texi:527
msgid ""
"The following example shows how @code{doctor} is prepared for autoloading "
"with a magic comment:"
msgstr ""

# type: smallexample
#: lispref/loading.texi:535
#, no-wrap
msgid ""
";;;###autoload\n"
"(defun doctor ()\n"
"  \"Switch to *doctor* buffer and start giving psychotherapy.\"\n"
"  (interactive)\n"
"  (switch-to-buffer \"*doctor*\")\n"
"  (doctor-mode))\n"
msgstr ""

# type: Plain text
#: lispref/loading.texi:539
msgid "Here's what that produces in @file{loaddefs.el}:"
msgstr ""

# type: smallexample
#: lispref/loading.texi:543
#, no-wrap
msgid ""
"(autoload (quote doctor) \"doctor\" \"\\\n"
"Switch to *doctor* buffer and start giving psychotherapy.\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/loading.texi:545
#, no-wrap
msgid "\\(fn)\" t nil)\n"
msgstr ""

# type: cindex
#: lispref/loading.texi:548
#, no-wrap
msgid "@code{fn} in function's documentation string"
msgstr ""

# type: Plain text
#: lispref/loading.texi:557
msgid ""
"The backslash and newline immediately following the double-quote are a "
"convention used only in the preloaded uncompiled Lisp files such as @file"
"{loaddefs.el}; they tell @code{make-docfile} to put the documentation string "
"in the @file{etc/DOC} file.  @xref{Building Emacs}.  See also the commentary "
"in @file{lib-src/make-docfile.c}.  @samp{(fn)} in the usage part of the "
"documentation string is replaced with the function's name when the various "
"help functions (@pxref{Help Functions}) display it."
msgstr ""

# type: Plain text
#: lispref/loading.texi:563
msgid ""
"If you write a function definition with an unusual macro that is not one of "
"the known and recognized function definition methods, use of an ordinary "
"magic autoload comment would copy the whole definition into @code{loaddefs."
"el}.  That is not desirable.  You can put the desired @code{autoload} call "
"into @code{loaddefs.el} instead by writing this:"
msgstr ""

# type: smallexample
#: lispref/loading.texi:568
#, no-wrap
msgid ""
";;;###autoload (autoload 'foo \"myfile\")\n"
"(mydefunmacro foo\n"
"  ...)\n"
msgstr ""

# type: cindex
#: lispref/loading.texi:572
#, no-wrap
msgid "repeated loading"
msgstr ""

# type: Plain text
#: lispref/loading.texi:578
msgid ""
"You can load a given file more than once in an Emacs session.  For example, "
"after you have rewritten and reinstalled a function definition by editing it "
"in a buffer, you may wish to return to the original version; you can do this "
"by reloading the file it came from."
msgstr ""

# type: Plain text
#: lispref/loading.texi:587
msgid ""
"When you load or reload files, bear in mind that the @code{load} and @code"
"{load-library} functions automatically load a byte-compiled file rather than "
"a non-compiled file of similar name.  If you rewrite a file that you intend "
"to save and reinstall, you need to byte-compile the new version; otherwise "
"Emacs will load the older, byte-compiled file instead of your newer, non-"
"compiled file! If that happens, the message displayed when loading the file "
"includes, @samp{(compiled; note, source is newer)}, to remind you to "
"recompile it."
msgstr ""

# type: Plain text
#: lispref/loading.texi:593
msgid ""
"When writing the forms in a Lisp library file, keep in mind that the file "
"might be loaded more than once.  For example, think about whether each "
"variable should be reinitialized when you reload the library; @code{defvar} "
"does not change the value if the variable is already initialized.  (@xref"
"{Defining Variables}.)"
msgstr ""

# type: Plain text
#: lispref/loading.texi:595
msgid "The simplest way to add an element to an alist is like this:"
msgstr ""

# type: example
#: lispref/loading.texi:598
#, no-wrap
msgid "(push '(leif-mode \" Leif\") minor-mode-alist)\n"
msgstr ""

# type: Plain text
#: lispref/loading.texi:603
msgid ""
"But this would add multiple elements if the library is reloaded.  To avoid "
"the problem, write this:"
msgstr ""

# type: example
#: lispref/loading.texi:607
#, no-wrap
msgid ""
"(or (assq 'leif-mode minor-mode-alist)\n"
"    (push '(leif-mode \" Leif\") minor-mode-alist))\n"
msgstr ""

# type: Plain text
#: lispref/loading.texi:611
msgid "or this:"
msgstr ""

# type: example
#: lispref/loading.texi:614
#, no-wrap
msgid "(add-to-list '(leif-mode \" Leif\") minor-mode-alist)\n"
msgstr ""

# type: Plain text
#: lispref/loading.texi:619
msgid ""
"Occasionally you will want to test explicitly whether a library has already "
"been loaded.  Here's one way to test, in a library, whether it has been "
"loaded before:"
msgstr ""

# type: example
#: lispref/loading.texi:622
#, no-wrap
msgid ""
"(defvar foo-was-loaded nil)\n"
"\n"
msgstr ""

# type: example
#: lispref/loading.texi:626
#, no-wrap
msgid ""
"(unless foo-was-loaded\n"
"  @var{execute-first-time-only}\n"
"  (setq foo-was-loaded t))\n"
msgstr ""

# type: Plain text
#: lispref/loading.texi:632
msgid ""
"If the library uses @code{provide} to provide a named feature, you can use "
"@code{featurep} earlier in the file to test whether the @code{provide} call "
"has been executed before."
msgstr ""

# type: ifnottex
#: lispref/loading.texi:634
msgid "@xref{Named Features}."
msgstr ""

# type: section
#: lispref/loading.texi:637
#, no-wrap
msgid "Features"
msgstr ""

# type: defvar
#: lispref/loading.texi:638 lispref/loading.texi:789
#, no-wrap
msgid "features"
msgstr ""

# type: cindex
#: lispref/loading.texi:639
#, no-wrap
msgid "requiring features"
msgstr ""

# type: cindex
#: lispref/loading.texi:640
#, no-wrap
msgid "providing features"
msgstr ""

# type: Plain text
#: lispref/loading.texi:647
msgid ""
"@code{provide} and @code{require} are an alternative to @code{autoload} for "
"loading files automatically.  They work in terms of named @dfn{features}.  "
"Autoloading is triggered by calling a specific function, but a feature is "
"loaded the first time another program asks for it by name."
msgstr ""

# type: Plain text
#: lispref/loading.texi:653
msgid ""
"A feature name is a symbol that stands for a collection of functions, "
"variables, etc.  The file that defines them should @dfn{provide} the "
"feature.  Another program that uses them may ensure they are defined by @dfn"
"{requiring} the feature.  This loads the file of definitions if it hasn't "
"been loaded already."
msgstr ""

# type: Plain text
#: lispref/loading.texi:660
msgid ""
"To require the presence of a feature, call @code{require} with the feature "
"name as argument.  @code{require} looks in the global variable @code"
"{features} to see whether the desired feature has been provided already.  If "
"not, it loads the feature from the appropriate file.  This file should call "
"@code{provide} at the top level to add the feature to @code{features}; if it "
"fails to do so, @code{require} signals an error."
msgstr ""

# type: cindex
#: lispref/loading.texi:660
#, no-wrap
msgid "load error with require"
msgstr ""

# type: Plain text
#: lispref/loading.texi:664
msgid ""
"For example, in @file{emacs/lisp/prolog.el}, the definition for @code{run-"
"prolog} includes the following code:"
msgstr ""

# type: smallexample
#: lispref/loading.texi:672
#, no-wrap
msgid ""
"(defun run-prolog ()\n"
"  \"Run an inferior Prolog process, with I/O via buffer *prolog*.\"\n"
"  (interactive)\n"
"  (require 'comint)\n"
"  (switch-to-buffer (make-comint \"prolog\" prolog-program-name))\n"
"  (inferior-prolog-mode))\n"
msgstr ""

# type: Plain text
#: lispref/loading.texi:679
msgid ""
"The expression @code{(require 'comint)} loads the file @file{comint.el} if "
"it has not yet been loaded.  This ensures that @code{make-comint} is "
"defined.  Features are normally named after the files that provide them, so "
"that @code{require} need not be given the file name."
msgstr ""

# type: Plain text
#: lispref/loading.texi:681
msgid "The @file{comint.el} file contains the following top-level expression:"
msgstr ""

# type: smallexample
#: lispref/loading.texi:684
#, no-wrap
msgid "(provide 'comint)\n"
msgstr ""

# type: Plain text
#: lispref/loading.texi:690
msgid ""
"This adds @code{comint} to the global @code{features} list, so that @code"
"{(require 'comint)} will henceforth know that nothing needs to be done."
msgstr ""

# type: cindex
#: lispref/loading.texi:691
#, no-wrap
msgid "byte-compiling @code{require}"
msgstr ""

# type: Plain text
#: lispref/loading.texi:698
msgid ""
"When @code{require} is used at top level in a file, it takes effect when you "
"byte-compile that file (@pxref{Byte Compilation}) as well as when you load "
"it.  This is in case the required package contains macros that the byte "
"compiler must know about.  It also avoids byte-compiler warnings for "
"functions and variables defined in the file loaded with @code{require}."
msgstr ""

# type: Plain text
#: lispref/loading.texi:704
msgid ""
"Although top-level calls to @code{require} are evaluated during byte "
"compilation, @code{provide} calls are not.  Therefore, you can ensure that a "
"file of definitions is loaded before it is byte-compiled by including a @code"
"{provide} followed by a @code{require} for the same feature, as in the "
"following example."
msgstr ""

# type: group
#: lispref/loading.texi:710
#, no-wrap
msgid ""
"(provide 'my-feature)  ; @r{Ignored by byte compiler,}\n"
"                       ;   @r{evaluated by @code{load}.}\n"
"(require 'my-feature)  ; @r{Evaluated by byte compiler.}\n"
msgstr ""

# type: Plain text
#: lispref/loading.texi:718
msgid ""
"The compiler ignores the @code{provide}, then processes the @code{require} "
"by loading the file in question.  Loading the file does execute the @code"
"{provide} call, so the subsequent @code{require} call does nothing when the "
"file is loaded."
msgstr ""

# type: defun
#: lispref/loading.texi:719
#, no-wrap
msgid "provide feature &optional subfeatures"
msgstr ""

# type: defun
#: lispref/loading.texi:724
msgid ""
"This function announces that @var{feature} is now loaded, or being loaded, "
"into the current Emacs session.  This means that the facilities associated "
"with @var{feature} are or will be available for other Lisp programs."
msgstr ""

# type: defun
#: lispref/loading.texi:729
msgid ""
"The direct effect of calling @code{provide} is to add @var{feature} to the "
"front of the list @code{features} if it is not already in the list.  The "
"argument @var{feature} must be a symbol.  @code{provide} returns @var"
"{feature}."
msgstr ""

# type: defun
#: lispref/loading.texi:739
msgid ""
"If provided, @var{subfeatures} should be a list of symbols indicating a set "
"of specific subfeatures provided by this version of @var{feature}.  You can "
"test the presence of a subfeature using @code{featurep}.  The idea of "
"subfeatures is that you use them when a package (which is one @var{feature}) "
"is complex enough to make it useful to give names to various parts or "
"functionalities of the package, which might or might not be loaded, or might "
"or might not be present in a given version.  @xref{Network Feature Testing}, "
"for an example."
msgstr ""

# type: smallexample
#: lispref/loading.texi:743
#, no-wrap
msgid ""
"features\n"
"     @result{} (bar bish)\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/loading.texi:748
#, no-wrap
msgid ""
"(provide 'foo)\n"
"     @result{} foo\n"
"features\n"
"     @result{} (foo bar bish)\n"
msgstr ""

# type: defun
#: lispref/loading.texi:754
msgid ""
"When a file is loaded to satisfy an autoload, and it stops due to an error "
"in the evaluation of its contents, any function definitions or @code"
"{provide} calls that occurred during the load are undone.  @xref{Autoload}."
msgstr ""

# type: defun
#: lispref/loading.texi:756
#, no-wrap
msgid "require feature &optional filename noerror"
msgstr ""

# type: defun
#: lispref/loading.texi:760
msgid ""
"This function checks whether @var{feature} is present in the current Emacs "
"session (using @code{(featurep @var{feature})}; see below).  The argument "
"@var{feature} must be a symbol."
msgstr ""

# type: defun
#: lispref/loading.texi:769
msgid ""
"If the feature is not present, then @code{require} loads @var{filename} with "
"@code{load}.  If @var{filename} is not supplied, then the name of the symbol "
"@var{feature} is used as the base file name to load.  However, in this case, "
"@code{require} insists on finding @var{feature} with an added @samp{.el} or "
"@samp{.elc} suffix (possibly extended with a compression suffix); a file "
"whose name is just @var{feature} won't be used.  (The variable @code{load-"
"suffixes} specifies the exact required Lisp suffixes.)"
msgstr ""

# type: defun
#: lispref/loading.texi:774
msgid ""
"If @var{noerror} is non-@code{nil}, that suppresses errors from actual "
"loading of the file.  In that case, @code{require} returns @code{nil} if "
"loading the file fails.  Normally, @code{require} returns @var{feature}."
msgstr ""

# type: defun
#: lispref/loading.texi:778
msgid ""
"If loading the file succeeds but does not provide @var{feature}, @code"
"{require} signals an error, @samp{Required feature @var{feature} was not "
"provided}."
msgstr ""

# type: defun
#: lispref/loading.texi:780
#, no-wrap
msgid "featurep feature &optional subfeature"
msgstr ""

# type: defun
#: lispref/loading.texi:787
msgid ""
"This function returns @code{t} if @var{feature} has been provided in the "
"current Emacs session (i.e.@:, if @var{feature} is a member of @code"
"{features}.)  If @var{subfeature} is non-@code{nil}, then the function "
"returns @code{t} only if that subfeature is provided as well (i.e.@: if @var"
"{subfeature} is a member of the @code{subfeature} property of the @var"
"{feature} symbol.)"
msgstr ""

# type: defvar
#: lispref/loading.texi:794
msgid ""
"The value of this variable is a list of symbols that are the features loaded "
"in the current Emacs session.  Each symbol was put in this list with a call "
"to @code{provide}.  The order of the elements in the @code{features} list is "
"not significant."
msgstr ""

# type: section
#: lispref/loading.texi:797
#, no-wrap
msgid "Which File Defined a Certain Symbol"
msgstr ""

# type: defun
#: lispref/loading.texi:799
#, no-wrap
msgid "symbol-file symbol &optional type"
msgstr ""

# type: defun
#: lispref/loading.texi:804
msgid ""
"This function returns the name of the file that defined @var{symbol}.  If "
"@var{type} is @code{nil}, then any kind of definition is acceptable.  If @var"
"{type} is @code{defun} or @code{defvar}, that specifies function definition "
"only or variable definition only."
msgstr ""

# type: defun
#: lispref/loading.texi:807
msgid ""
"The value is normally an absolute file name.  It can also be @code{nil}, if "
"the definition is not associated with any file."
msgstr ""

# type: Plain text
#: lispref/loading.texi:811
msgid ""
"The basis for @code{symbol-file} is the data in the variable @code{load-"
"history}."
msgstr ""

# type: defvar
#: lispref/loading.texi:812
#, no-wrap
msgid "load-history"
msgstr ""

# type: defvar
#: lispref/loading.texi:816
msgid ""
"This variable's value is an alist connecting library file names with the "
"names of functions and variables they define, the features they provide, and "
"the features they require."
msgstr ""

# type: defvar
#: lispref/loading.texi:820
msgid ""
"Each element is a list and describes one library.  The @sc{car} of the list "
"is the absolute file name of the library, as a string.  The rest of the list "
"elements have these forms:"
msgstr ""

# type: var{#1}
#: lispref/loading.texi:822
#, no-wrap
msgid "var"
msgstr ""

# type: table
#: lispref/loading.texi:824
msgid "The symbol @var{var} was defined as a variable."
msgstr ""

# type: item
#: lispref/loading.texi:824
#, no-wrap
msgid "(defun . @var{fun})"
msgstr ""

# type: table
#: lispref/loading.texi:826
msgid "The function @var{fun} was defined."
msgstr ""

# type: item
#: lispref/loading.texi:826
#, no-wrap
msgid "(t . @var{fun})"
msgstr ""

# type: table
#: lispref/loading.texi:831
msgid ""
"The function @var{fun} was previously an autoload before this library "
"redefined it as a function.  The following element is always @code{(defun . "
"@var{fun})}, which represents defining @var{fun} as a function."
msgstr ""

# type: item
#: lispref/loading.texi:831
#, no-wrap
msgid "(autoload . @var{fun})"
msgstr ""

# type: table
#: lispref/loading.texi:833
msgid "The function @var{fun} was defined as an autoload."
msgstr ""

# type: item
#: lispref/loading.texi:833
#, no-wrap
msgid "(require . @var{feature})"
msgstr ""

# type: table
#: lispref/loading.texi:835
msgid "The feature @var{feature} was required."
msgstr ""

# type: item
#: lispref/loading.texi:835
#, no-wrap
msgid "(provide . @var{feature})"
msgstr ""

# type: table
#: lispref/loading.texi:837
msgid "The feature @var{feature} was provided."
msgstr ""

# type: defvar
#: lispref/loading.texi:842
msgid ""
"The value of @code{load-history} may have one element whose @sc{car} is @code"
"{nil}.  This element describes definitions made with @code{eval-buffer} on a "
"buffer that is not visiting a file."
msgstr ""

# type: Plain text
#: lispref/loading.texi:847
msgid ""
"The command @code{eval-region} updates @code{load-history}, but does so by "
"adding the symbols defined to the element for the file being visited, rather "
"than replacing that element.  @xref{Eval}."
msgstr ""

# type: cindex
#: lispref/loading.texi:850
#, no-wrap
msgid "unloading packages"
msgstr ""

# type: Plain text
#: lispref/loading.texi:856
msgid ""
"You can discard the functions and variables loaded by a library to reclaim "
"memory for other Lisp objects.  To do this, use the function @code{unload-"
"feature}:"
msgstr ""

# type: deffn
#: lispref/loading.texi:857
#, no-wrap
msgid "Command unload-feature feature &optional force"
msgstr ""

# type: deffn
#: lispref/loading.texi:864
msgid ""
"This command unloads the library that provided feature @var{feature}.  It "
"undefines all functions, macros, and variables defined in that library with "
"@code{defun}, @code{defalias}, @code{defsubst}, @code{defmacro}, @code"
"{defconst}, @code{defvar}, and @code{defcustom}.  It then restores any "
"autoloads formerly associated with those symbols.  (Loading saves these in "
"the @code{autoload} property of the symbol.)"
msgstr ""

# type: defvar
#: lispref/loading.texi:865 lispref/loading.texi:894
#, no-wrap
msgid "unload-feature-special-hooks"
msgstr ""

# type: deffn
#: lispref/loading.texi:873
msgid ""
"Before restoring the previous definitions, @code{unload-feature} runs @code"
"{remove-hook} to remove functions in the library from certain hooks.  These "
"hooks include variables whose names end in @samp{hook} or @samp{-hooks}, "
"plus those listed in @code{unload-feature-special-hooks}.  This is to "
"prevent Emacs from ceasing to function because important hooks refer to "
"functions that are no longer defined."
msgstr ""

# type: vindex
#: lispref/loading.texi:874
#, no-wrap
msgid "@var{feature}-unload-hook"
msgstr ""

# type: deffn
#: lispref/loading.texi:883
msgid ""
"If these measures are not sufficient to prevent malfunction, a library can "
"define an explicit unload hook.  If @code{@var{feature}-unload-hook} is "
"defined, it is run as a normal hook before restoring the previous "
"definitions, @emph{instead of} the usual hook-removing actions.  The unload "
"hook ought to undo all the global state changes made by the library that "
"might cease to work once the library is unloaded.  @code{unload-feature} can "
"cause problems with libraries that fail to do this, so it should be used "
"with caution."
msgstr ""

# type: deffn
#: lispref/loading.texi:889
msgid ""
"Ordinarily, @code{unload-feature} refuses to unload a library on which other "
"loaded libraries depend.  (A library @var{a} depends on library @var{b} if "
"@var{a} contains a @code{require} for @var{b}.)  If the optional argument "
"@var{force} is non-@code{nil}, dependencies are ignored and you can unload "
"any library."
msgstr ""

# type: Plain text
#: lispref/loading.texi:893
msgid ""
"The @code{unload-feature} function is written in Lisp; its actions are based "
"on the variable @code{load-history}."
msgstr ""

# type: defvar
#: lispref/loading.texi:897
msgid ""
"This variable holds a list of hooks to be scanned before unloading a "
"library, to remove functions defined in the library."
msgstr ""

# type: cindex
#: lispref/loading.texi:901
#, no-wrap
msgid "loading hooks"
msgstr ""

# type: cindex
#: lispref/loading.texi:902
#, no-wrap
msgid "hooks for loading"
msgstr ""

# type: Plain text
#: lispref/loading.texi:906
msgid ""
"You can ask for code to be executed if and when a particular library is "
"loaded, by calling @code{eval-after-load}."
msgstr ""

# type: defun
#: lispref/loading.texi:907
#, no-wrap
msgid "eval-after-load library form"
msgstr ""

# type: defun
#: lispref/loading.texi:912
msgid ""
"This function arranges to evaluate @var{form} at the end of loading the file "
"@var{library}, each time @var{library} is loaded.  If @var{library} is "
"already loaded, it evaluates @var{form} right away.  Don't forget to quote "
"@var{form}!"
msgstr ""

# type: defun
#: lispref/loading.texi:915
msgid ""
"You don't need to give a directory or extension in the file name @var"
"{library}---normally you just give a bare file name, like this:"
msgstr ""

# type: example
#: lispref/loading.texi:918
#, no-wrap
msgid "(eval-after-load \"edebug\" '(def-edebug-spec c-point t))\n"
msgstr ""

# type: defun
#: lispref/loading.texi:927
msgid ""
"To restrict which files can trigger the evaluation, include a directory or "
"an extension or both in @var{library}.  Only a file whose absolute true name "
"(i.e., the name with all symbolic links chased out)  matches all the given "
"name components will match.  In the following example, @file{my_inst.elc} or "
"@file{my_inst.elc.gz} in some directory @code{..../foo/bar} will trigger the "
"evaluation, but not @file{my_inst.el}:"
msgstr ""

# type: example
#: lispref/loading.texi:930
#, no-wrap
msgid "(eval-after-load \"foo/bar/my_inst.elc\" @dots{})\n"
msgstr ""

# type: defun
#: lispref/loading.texi:934
msgid ""
"@var{library} can also be a feature (i.e.@: a symbol), in which case @var"
"{form} is evaluated when @code{(provide @var{library})} is called."
msgstr ""

# type: defun
#: lispref/loading.texi:937
msgid ""
"An error in @var{form} does not undo the load, but does prevent execution of "
"the rest of @var{form}."
msgstr ""

# type: Plain text
#: lispref/loading.texi:946
msgid ""
"In general, well-designed Lisp programs should not use this feature.  The "
"clean and modular ways to interact with a Lisp library are (1)  examine and "
"set the library's variables (those which are meant for outside use), and (2) "
"call the library's functions.  If you wish to do (1), you can do it "
"immediately---there is no need to wait for when the library is loaded.  To "
"do (2), you must load the library (preferably with @code{require})."
msgstr ""

# type: Plain text
#: lispref/loading.texi:950
msgid ""
"But it is OK to use @code{eval-after-load} in your personal customizations "
"if you don't feel they must meet the design standards for programs meant for "
"wider use."
msgstr ""

# type: defvar
#: lispref/loading.texi:951
#, no-wrap
msgid "after-load-alist"
msgstr ""

# type: defvar
#: lispref/loading.texi:955
msgid ""
"This variable, an alist built by @code{eval-after-load}, holds the "
"expressions to evaluate when particular libraries are loaded.  Each element "
"looks like this:"
msgstr ""

# type: example
#: lispref/loading.texi:958
#, no-wrap
msgid "(@var{regexp-or-feature} @var{forms}@dots{})\n"
msgstr ""

# type: defvar
#: lispref/loading.texi:964
msgid ""
"The key @var{regexp-or-feature} is either a regular expression or a symbol, "
"and the value is a list of forms.  The forms are evaluated when the key "
"matches the absolute true name of the file being @code{load}ed or the symbol "
"being @code{provide}d."
msgstr ""

# type: ignore
#: lispref/loading.texi:968
#, no-wrap
msgid "   arch-tag: df731f89-0900-4389-a436-9105241b6f7a\n"
msgstr "   arch-tag: df731f89-0900-4389-a436-9105241b6f7a\n"

# type: menu
#: lispref/locals.texi:8 lispref/variables.texi:48 lispref/variables.texi:1082
#: lispref/variables.texi:1083 lispref/vol1.texi:459 lispref/vol1.texi:470
#: lispref/vol2.texi:460 lispref/vol2.texi:471
#, no-wrap
msgid "Buffer-Local Variables"
msgstr ""

# type: cindex
#: lispref/locals.texi:11
#, no-wrap
msgid "buffer-local variables, general-purpose"
msgstr ""

# type: cindex
#: lispref/locals.texi:12
#, no-wrap
msgid "standard buffer-local variables"
msgstr ""

# type: Plain text
#: lispref/locals.texi:19
msgid ""
"The table below lists the general-purpose Emacs variables that automatically "
"become buffer-local in each buffer.  Most become buffer-local only when set; "
"a few of them are always local in every buffer.  Many Lisp packages define "
"such variables for their internal use, but we don't try to list them all "
"here."
msgstr ""

# type: Plain text
#: lispref/locals.texi:23
msgid ""
"Every buffer-specific minor mode defines a buffer-local variable named @samp"
"{@var{modename}-mode}.  @xref{Minor Mode Conventions}.  Minor mode variables "
"will not be listed here."
msgstr ""

# type: table
#: lispref/locals.texi:30 lispref/locals.texi:51
msgid "@xref{Format Conversion}."
msgstr ""

# type: table
#: lispref/locals.texi:36
msgid "@xref{Making Backups}."
msgstr ""

# type: defvar
#: lispref/locals.texi:37 lispref/windows.texi:723
#, no-wrap
msgid "buffer-display-count"
msgstr ""

# type: table
#: lispref/locals.texi:39 lispref/locals.texi:45
msgid "@xref{Buffers and Windows}."
msgstr ""

# type: table
#: lispref/locals.texi:42
msgid "@xref{Active Display Table}."
msgstr ""

# type: defvar
#: lispref/locals.texi:43 lispref/windows.texi:776
#, no-wrap
msgid "buffer-display-time"
msgstr ""

# type: defvar
#: lispref/locals.texi:46 lispref/nonascii.texi:729
#, no-wrap
msgid "buffer-file-coding-system"
msgstr ""

# type: table
#: lispref/locals.texi:48 lispref/locals.texi:197
msgid "@xref{Encoding and I/O}."
msgstr ""

# type: table
#: lispref/locals.texi:54 lispref/locals.texi:57 lispref/locals.texi:60
msgid "@xref{Buffer File Name}."
msgstr ""

# type: defvar
#: lispref/locals.texi:61 lispref/nonascii.texi:1327
#, no-wrap
msgid "buffer-file-type"
msgstr ""

# type: table
#: lispref/locals.texi:63
msgid "@xref{MS-DOS File Types}."
msgstr ""

# type: table
#: lispref/locals.texi:66
msgid "@xref{Invisible Text}."
msgstr ""

# type: table
#: lispref/locals.texi:75
msgid "@xref{Read Only Buffers}."
msgstr ""

# type: defvar
#: lispref/locals.texi:79 lispref/text.texi:1216
#, no-wrap
msgid "buffer-undo-list"
msgstr ""

# type: table
#: lispref/locals.texi:81
msgid "@xref{Undo}."
msgstr ""

# type: table
#: lispref/locals.texi:84 lispref/locals.texi:218
msgid "@xref{Truncation}."
msgstr ""

# type: defopt
#: lispref/locals.texi:85 lispref/searching.texi:200
#, no-wrap
msgid "case-fold-search"
msgstr "case-fold-search"

# type: table
#: lispref/locals.texi:87
msgid "@xref{Searching and Case}."
msgstr ""

# type: table
#: lispref/locals.texi:90 lispref/locals.texi:143 lispref/locals.texi:146
#: lispref/locals.texi:215
msgid "@xref{Usual Display}."
msgstr ""

# type: table
#: lispref/locals.texi:93
msgid "@xref{Cursor Parameters}."
msgstr ""

# type: defvar
#: lispref/locals.texi:94 lispref/windows.texi:63
#, no-wrap
msgid "cursor-in-non-selected-windows"
msgstr "cursor-in-non-selected-windows"

# type: table
#: lispref/locals.texi:96
msgid "@xref{Basic Windows}."
msgstr ""

# type: item
#: lispref/locals.texi:97
#, no-wrap
msgid "comment-column"
msgstr "comment-column"

# type: table
#: lispref/locals.texi:99
msgid "@xref{Comments,,, emacs, The GNU Emacs Manual}."
msgstr ""

# type: table
#: lispref/locals.texi:102
msgid "@xref{File Name Expansion}."
msgstr ""

# type: defopt
#: lispref/locals.texi:103 lispref/positions.texi:722
#, no-wrap
msgid "defun-prompt-regexp"
msgstr "defun-prompt-regexp"

# type: table
#: lispref/locals.texi:105
msgid "@xref{List Motion}."
msgstr ""

# type: defvar
#: lispref/locals.texi:106 lispref/modes.texi:3231
#, no-wrap
msgid "desktop-save-buffer"
msgstr "desktop-save-buffer"

# type: table
#: lispref/locals.texi:108
msgid "@xref{Desktop Save Mode}."
msgstr ""

# type: item
#: lispref/locals.texi:110
#, no-wrap
msgid "direction-reversed"
msgstr "direction-reversed"

# type: ignore
#: lispref/locals.texi:112
#, no-wrap
msgid "Does not work yet.\n"
msgstr ""

# type: defvar
#: lispref/locals.texi:114 lispref/nonascii.texi:77
#, no-wrap
msgid "enable-multibyte-characters"
msgstr "enable-multibyte-characters"

# type: table
#: lispref/locals.texi:116
msgid "@ref{Text Representations}."
msgstr ""

# type: defopt
#: lispref/locals.texi:117 lispref/text.texi:1593
#, no-wrap
msgid "fill-column"
msgstr "fill-column"

# type: table
#: lispref/locals.texi:119 lispref/locals.texi:122 lispref/locals.texi:152
msgid "@xref{Margins}."
msgstr ""

# type: defopt
#: lispref/locals.texi:120 lispref/text.texi:1580
#, no-wrap
msgid "fill-prefix"
msgstr "fill-prefix"

# type: defvar
#: lispref/locals.texi:123 lispref/modes.texi:2391
#, no-wrap
msgid "font-lock-defaults"
msgstr "font-lock-defaults"

# type: table
#: lispref/locals.texi:125
msgid "@xref{Font Lock Basics}."
msgstr ""

# type: table
#: lispref/locals.texi:128
msgid "@xref{Fringe Cursors}."
msgstr ""

# type: table
#: lispref/locals.texi:131
msgid "@xref{Fringe Indicators}."
msgstr ""

# type: table
#: lispref/locals.texi:134
msgid "@xref{Fringes}."
msgstr ""

# type: item
#: lispref/locals.texi:135
#, no-wrap
msgid "goal-column"
msgstr "goal-column"

# type: table
#: lispref/locals.texi:137
msgid "@xref{Moving Point,,, emacs, The GNU Emacs Manual}."
msgstr ""

# type: defvar
#: lispref/locals.texi:138 lispref/modes.texi:2103
#, no-wrap
msgid "header-line-format"
msgstr "header-line-format"

# type: table
#: lispref/locals.texi:140
msgid "@xref{Header Lines}."
msgstr ""

# type: table
#: lispref/locals.texi:149 lispref/locals.texi:191
msgid "@xref{Fringe Size/Pos}."
msgstr ""

# type: item
#: lispref/locals.texi:150 lispref/text.texi:1664 lispref/text.texi:3301
#: lispref/windows.texi:2199
#, no-wrap
msgid "left-margin"
msgstr "left-margin"

# type: table
#: lispref/locals.texi:155 lispref/locals.texi:194
msgid "@xref{Display Margins}."
msgstr ""

# type: table
#: lispref/locals.texi:158
msgid "@xref{Line Height}."
msgstr ""

# type: table
#: lispref/locals.texi:161
msgid "@xref{Standard Abbrev Tables}."
msgstr ""

# type: defvar
#: lispref/locals.texi:162 lispref/modes.texi:702
#, no-wrap
msgid "major-mode"
msgstr "major-mode"

# type: table
#: lispref/locals.texi:164
msgid "@xref{Mode Help}."
msgstr ""

# type: defvar
#: lispref/locals.texi:165 lispref/markers.texi:596
#, no-wrap
msgid "mark-active"
msgstr "mark-active"

# type: defvar
#: lispref/locals.texi:168 lispref/markers.texi:609
#, no-wrap
msgid "mark-ring"
msgstr "mark-ring"

# type: defvar
#: lispref/locals.texi:171 lispref/modes.texi:1792
#, no-wrap
msgid "mode-line-buffer-identification"
msgstr "mode-line-buffer-identification"

# type: table
#: lispref/locals.texi:173 lispref/locals.texi:179 lispref/locals.texi:182
#: lispref/locals.texi:185
msgid "@xref{Mode Line Variables}."
msgstr ""

# type: defvar
#: lispref/locals.texi:174 lispref/modes.texi:1688
#, no-wrap
msgid "mode-line-format"
msgstr "mode-line-format"

# type: table
#: lispref/locals.texi:176
msgid "@xref{Mode Line Data}."
msgstr ""

# type: defvar
#: lispref/locals.texi:177 lispref/modes.texi:1772
#, no-wrap
msgid "mode-line-modified"
msgstr "mode-line-modified"

# type: defvar
#: lispref/locals.texi:180 lispref/modes.texi:1856
#, no-wrap
msgid "mode-line-process"
msgstr "mode-line-process"

# type: defvar
#: lispref/locals.texi:183 lispref/modes.texi:1850
#, no-wrap
msgid "mode-name"
msgstr "mode-name"

# type: item
#: lispref/locals.texi:186
#, no-wrap
msgid "point-before-scroll"
msgstr "point-before-scroll"

# type: table
#: lispref/locals.texi:188
msgid "Used for communication between mouse commands and scroll-bar commands."
msgstr ""

# type: defvar
#: lispref/locals.texi:195 lispref/nonascii.texi:744
#, no-wrap
msgid "save-buffer-coding-system"
msgstr "save-buffer-coding-system"

# type: table
#: lispref/locals.texi:200 lispref/locals.texi:221
msgid "@xref{Scroll Bars}."
msgstr ""

# type: defopt
#: lispref/locals.texi:201 lispref/windows.texi:1540
#, no-wrap
msgid "scroll-down-aggressively"
msgstr "scroll-down-aggressively"

# type: table
#: lispref/locals.texi:203 lispref/locals.texi:206
msgid "@xref{Textual Scrolling}."
msgstr ""

# type: defopt
#: lispref/locals.texi:204 lispref/windows.texi:1554
#, no-wrap
msgid "scroll-up-aggressively"
msgstr "scroll-up-aggressively"

# type: table
#: lispref/locals.texi:209 lispref/locals.texi:212
msgid "@xref{Selective Display}."
msgstr ""

# type: defvar
#: lispref/locals.texi:222 lispref/windows.texi:2101
#, no-wrap
msgid "window-size-fixed"
msgstr "window-size-fixed"

# type: table
#: lispref/locals.texi:224
msgid "@xref{Resizing Windows}."
msgstr ""

# type: ignore
#: lispref/locals.texi:232
#, no-wrap
msgid "   arch-tag: 6baae835-b667-4447-91e2-9829ae1cf543\n"
msgstr "   arch-tag: 6baae835-b667-4447-91e2-9829ae1cf543\n"

# type: cindex
#: lispref/macros.texi:9
#, no-wrap
msgid "macros"
msgstr ""

# type: Plain text
#: lispref/macros.texi:16
msgid ""
"@dfn{Macros} enable you to define new control constructs and other language "
"features.  A macro is defined much like a function, but instead of telling "
"how to compute a value, it tells how to compute another Lisp expression "
"which will in turn compute the value.  We call this expression the @dfn"
"{expansion} of the macro."
msgstr ""

# type: Plain text
#: lispref/macros.texi:21
msgid ""
"Macros can do this because they operate on the unevaluated expressions for "
"the arguments, not on the argument values as functions do.  They can "
"therefore construct an expansion containing these argument expressions or "
"parts of them."
msgstr ""

# type: Plain text
#: lispref/macros.texi:25
msgid ""
"If you are using a macro to do something an ordinary function could do, just "
"for the sake of speed, consider using an inline function instead.  @xref"
"{Inline Functions}."
msgstr ""

# type: menu
#: lispref/macros.texi:35 lispref/macros.texi:37 lispref/vol1.texi:507
#: lispref/vol2.texi:508
#, no-wrap
msgid "Simple Macro"
msgstr ""

# type: menu
#: lispref/macros.texi:35 lispref/vol1.texi:507 lispref/vol2.texi:508
msgid "A basic example."
msgstr ""

# type: menu
#: lispref/macros.texi:35 lispref/macros.texi:60 lispref/vol1.texi:507
#: lispref/vol2.texi:508
#, no-wrap
msgid "Expansion"
msgstr ""

# type: menu
#: lispref/macros.texi:35 lispref/vol1.texi:507 lispref/vol2.texi:508
msgid "How, when and why macros are expanded."
msgstr ""

# type: menu
#: lispref/macros.texi:35 lispref/macros.texi:159 lispref/vol1.texi:507
#: lispref/vol2.texi:508
#, no-wrap
msgid "Compiling Macros"
msgstr ""

# type: menu
#: lispref/macros.texi:35 lispref/vol1.texi:507 lispref/vol2.texi:508
msgid "How macros are expanded by the compiler."
msgstr ""

# type: menu
#: lispref/macros.texi:35 lispref/vol1.texi:507 lispref/vol2.texi:508
msgid "How to write a macro definition."
msgstr ""

# type: menu
#: lispref/macros.texi:35 lispref/macros.texi:263 lispref/macros.texi:264
#: lispref/vol1.texi:507 lispref/vol2.texi:508
#, no-wrap
msgid "Backquote"
msgstr ""

# type: menu
#: lispref/macros.texi:35 lispref/vol1.texi:507 lispref/vol2.texi:508
msgid "Easier construction of list structure."
msgstr ""

# type: menu
#: lispref/macros.texi:35 lispref/macros.texi:370 lispref/vol1.texi:507
#: lispref/vol2.texi:508
#, no-wrap
msgid "Problems with Macros"
msgstr ""

# type: menu
#: lispref/macros.texi:35 lispref/vol1.texi:507 lispref/vol2.texi:508
msgid "Don't evaluate the macro arguments too many times."
msgstr ""

# type: menu
#: lispref/macros.texi:35 lispref/vol1.texi:507 lispref/vol2.texi:508
msgid "Don't hide the user's variables."
msgstr ""

# type: section
#: lispref/macros.texi:35 lispref/macros.texi:695 lispref/macros.texi:696
#, no-wrap
msgid "Indenting Macros"
msgstr ""

# type: menu
#: lispref/macros.texi:35
msgid "Specifying how to indent macro calls."
msgstr ""

# type: section
#: lispref/macros.texi:38
#, no-wrap
msgid "A Simple Example of a Macro"
msgstr ""

# type: Plain text
#: lispref/macros.texi:44
msgid ""
"Suppose we would like to define a Lisp construct to increment a variable "
"value, much like the @code{++} operator in C.  We would like to write @code"
"{(inc x)} and have the effect of @code{(setq x (1+ x))}.  Here's a macro "
"definition that does the job:"
msgstr ""

# type: findex
#: lispref/macros.texi:45
#, no-wrap
msgid "inc"
msgstr "inc"

# type: group
#: lispref/macros.texi:50
#, no-wrap
msgid ""
"(defmacro inc (var)\n"
"   (list 'setq var (list '1+ var)))\n"
msgstr ""

# type: Plain text
#: lispref/macros.texi:59
msgid ""
"When this is called with @code{(inc x)}, the argument @var{var} is the "
"symbol @code{x}---@emph{not} the @emph{value} of @code{x}, as it would be in "
"a function.  The body of the macro uses this to construct the expansion, "
"which is @code{(setq x (1+ x))}.  Once the macro definition returns this "
"expansion, Lisp proceeds to evaluate it, thus incrementing @code{x}."
msgstr ""

# type: section
#: lispref/macros.texi:61
#, no-wrap
msgid "Expansion of a Macro Call"
msgstr ""

# type: cindex
#: lispref/macros.texi:62
#, no-wrap
msgid "expansion of macros"
msgstr ""

# type: cindex
#: lispref/macros.texi:63
#, no-wrap
msgid "macro call"
msgstr ""

# type: Plain text
#: lispref/macros.texi:68
msgid ""
"A macro call looks just like a function call in that it is a list which "
"starts with the name of the macro.  The rest of the elements of the list are "
"the arguments of the macro."
msgstr ""

# type: Plain text
#: lispref/macros.texi:75
msgid ""
"Evaluation of the macro call begins like evaluation of a function call "
"except for one crucial difference: the macro arguments are the actual "
"expressions appearing in the macro call.  They are not evaluated before they "
"are given to the macro definition.  By contrast, the arguments of a function "
"are results of evaluating the elements of the function call list."
msgstr ""

# type: Plain text
#: lispref/macros.texi:81
msgid ""
"Having obtained the arguments, Lisp invokes the macro definition just as a "
"function is invoked.  The argument variables of the macro are bound to the "
"argument values from the macro call, or to a list of them in the case of a "
"@code{&rest} argument.  And the macro body executes and returns its value "
"just as a function body does."
msgstr ""

# type: Plain text
#: lispref/macros.texi:88
msgid ""
"The second crucial difference between macros and functions is that the value "
"returned by the macro body is not the value of the macro call.  Instead, it "
"is an alternate expression for computing that value, also known as the @dfn"
"{expansion} of the macro.  The Lisp interpreter proceeds to evaluate the "
"expansion as soon as it comes back from the macro."
msgstr ""

# type: Plain text
#: lispref/macros.texi:92
msgid ""
"Since the expansion is evaluated in the normal manner, it may contain calls "
"to other macros.  It may even be a call to the same macro, though this is "
"unusual."
msgstr ""

# type: Plain text
#: lispref/macros.texi:95
msgid ""
"You can see the expansion of a given macro call by calling @code"
"{macroexpand}."
msgstr ""

# type: defun
#: lispref/macros.texi:96
#, no-wrap
msgid "macroexpand form &optional environment"
msgstr ""

# type: cindex
#: lispref/macros.texi:97
#, no-wrap
msgid "macro expansion"
msgstr ""

# type: defun
#: lispref/macros.texi:103
msgid ""
"This function expands @var{form}, if it is a macro call.  If the result is "
"another macro call, it is expanded in turn, until something which is not a "
"macro call results.  That is the value returned by @code{macroexpand}.  If "
"@var{form} is not a macro call to begin with, it is returned as given."
msgstr ""

# type: defun
#: lispref/macros.texi:107
msgid ""
"Note that @code{macroexpand} does not look at the subexpressions of @var"
"{form} (although some macro definitions may do so).  Even if they are macro "
"calls themselves, @code{macroexpand} does not expand them."
msgstr ""

# type: defun
#: lispref/macros.texi:111
msgid ""
"The function @code{macroexpand} does not expand calls to inline functions.  "
"Normally there is no need for that, since a call to an inline function is no "
"harder to understand than a call to an ordinary function."
msgstr ""

# type: defun
#: lispref/macros.texi:115
msgid ""
"If @var{environment} is provided, it specifies an alist of macro definitions "
"that shadow the currently defined macros.  Byte compilation uses this "
"feature."
msgstr ""

# type: group
#: lispref/macros.texi:121
#, no-wrap
msgid ""
"(defmacro inc (var)\n"
"    (list 'setq var (list '1+ var)))\n"
"     @result{} inc\n"
msgstr ""

# type: group
#: lispref/macros.texi:126
#, no-wrap
msgid ""
"(macroexpand '(inc r))\n"
"     @result{} (setq r (1+ r))\n"
msgstr ""

# type: group
#: lispref/macros.texi:132
#, no-wrap
msgid ""
"(defmacro inc2 (var1 var2)\n"
"    (list 'progn (list 'inc var1) (list 'inc var2)))\n"
"     @result{} inc2\n"
msgstr ""

# type: group
#: lispref/macros.texi:137
#, no-wrap
msgid ""
"(macroexpand '(inc2 r s))\n"
"     @result{} (progn (inc r) (inc s))  ; @r{@code{inc} not expanded here.}\n"
msgstr ""

# type: defun
#: lispref/macros.texi:142
#, no-wrap
msgid "macroexpand-all form &optional environment"
msgstr ""

# type: defun
#: lispref/macros.texi:147
msgid ""
"@code{macroexpand-all} expands macros like @code{macroexpand}, but will look "
"for and expand all macros in @var{form}, not just at the top-level.  If no "
"macros are expanded, the return value is @code{eq} to @var{form}."
msgstr ""

# type: defun
#: lispref/macros.texi:151
msgid ""
"Repeating the example used for @code{macroexpand} above with @code"
"{macroexpand-all}, we see that @code{macroexpand-all} @emph{does} expand the "
"embedded calls to @code{inc}:"
msgstr ""

# type: smallexample
#: lispref/macros.texi:155
#, no-wrap
msgid ""
"(macroexpand-all '(inc2 r s))\n"
"     @result{} (progn (setq r (1+ r)) (setq s (1+ s)))\n"
msgstr ""

# type: section
#: lispref/macros.texi:160
#, no-wrap
msgid "Macros and Byte Compilation"
msgstr ""

# type: cindex
#: lispref/macros.texi:161
#, no-wrap
msgid "byte-compiling macros"
msgstr ""

# type: Plain text
#: lispref/macros.texi:167
msgid ""
"You might ask why we take the trouble to compute an expansion for a macro "
"and then evaluate the expansion.  Why not have the macro body produce the "
"desired results directly? The reason has to do with compilation."
msgstr ""

# type: Plain text
#: lispref/macros.texi:176
msgid ""
"When a macro call appears in a Lisp program being compiled, the Lisp "
"compiler calls the macro definition just as the interpreter would, and "
"receives an expansion.  But instead of evaluating this expansion, it "
"compiles the expansion as if it had appeared directly in the program.  As a "
"result, the compiled code produces the value and side effects intended for "
"the macro, but executes at full compiled speed.  This would not work if the "
"macro body computed the value and side effects itself---they would be "
"computed at compile time, which is not useful."
msgstr ""

# type: Plain text
#: lispref/macros.texi:184
msgid ""
"In order for compilation of macro calls to work, the macros must already be "
"defined in Lisp when the calls to them are compiled.  The compiler has a "
"special feature to help you do this: if a file being compiled contains a "
"@code{defmacro} form, the macro is defined temporarily for the rest of the "
"compilation of that file.  To make this feature work, you must put the @code"
"{defmacro} in the same file where it is used, and before its first use."
msgstr ""

# type: Plain text
#: lispref/macros.texi:193
msgid ""
"Byte-compiling a file executes any @code{require} calls at top-level in the "
"file.  This is in case the file needs the required packages for proper "
"compilation.  One way to ensure that necessary macro definitions are "
"available during compilation is to require the files that define them (@pxref"
"{Named Features}).  To avoid loading the macro definition files when someone "
"@emph{runs} the compiled program, write @code{eval-when-compile} around the "
"@code{require} calls (@pxref{Eval During Compile})."
msgstr ""

# type: Plain text
#: lispref/macros.texi:201
msgid ""
"A Lisp macro is a list whose @sc{car} is @code{macro}.  Its @sc{cdr} should "
"be a function; expansion of the macro works by applying the function (with "
"@code{apply}) to the list of unevaluated argument-expressions from the macro "
"call."
msgstr ""

# type: Plain text
#: lispref/macros.texi:207
msgid ""
"It is possible to use an anonymous Lisp macro just like an anonymous "
"function, but this is never done, because it does not make sense to pass an "
"anonymous macro to functionals such as @code{mapcar}.  In practice, all Lisp "
"macros have names, and they are usually defined with the special form @code"
"{defmacro}."
msgstr ""

# type: defspec
#: lispref/macros.texi:208
#, no-wrap
msgid "defmacro name argument-list body-forms@dots{}"
msgstr ""

# type: defspec
#: lispref/macros.texi:211
msgid ""
"@code{defmacro} defines the symbol @var{name} as a macro that looks like "
"this:"
msgstr ""

# type: example
#: lispref/macros.texi:214
#, no-wrap
msgid "(macro lambda @var{argument-list} . @var{body-forms})\n"
msgstr ""

# type: defspec
#: lispref/macros.texi:220
msgid ""
"(Note that the @sc{cdr} of this list is a function---a lambda expression.)  "
"This macro object is stored in the function cell of @var{name}.  The value "
"returned by evaluating the @code{defmacro} form is @var{name}, but usually "
"we ignore this value."
msgstr ""

# type: defspec
#: lispref/macros.texi:226
msgid ""
"The shape and meaning of @var{argument-list} is the same as in a function, "
"and the keywords @code{&rest} and @code{&optional} may be used (@pxref"
"{Argument List}).  Macros may have a documentation string, but any @code"
"{interactive} declaration is ignored since macros cannot be called "
"interactively."
msgstr ""

# type: Plain text
#: lispref/macros.texi:231
msgid ""
"The body of the macro definition can include a @code{declare} form, which "
"can specify how @key{TAB} should indent macro calls, and how to step through "
"them for Edebug."
msgstr ""

# type: defmac
#: lispref/macros.texi:232
#, no-wrap
msgid "declare @var{specs}@dots{}"
msgstr ""

# type: anchor{#1}
#: lispref/macros.texi:237
msgid "Definition of declare"
msgstr ""

# type: defmac
#: lispref/macros.texi:237
msgid ""
"A @code{declare} form is used in a macro definition to specify various "
"additional information about it.  Two kinds of specification are currently "
"supported:"
msgstr ""

# type: item
#: lispref/macros.texi:239
#, no-wrap
msgid "(debug @var{edebug-form-spec})"
msgstr ""

# type: table
#: lispref/macros.texi:242
msgid ""
"Specify how to step through macro calls for Edebug.  @xref{Instrumenting "
"Macro Calls}."
msgstr ""

# type: item
#: lispref/macros.texi:243
#, no-wrap
msgid "(indent @var{indent-spec})"
msgstr ""

# type: table
#: lispref/macros.texi:246
msgid ""
"Specify how to indent calls to this macro.  @xref{Indenting Macros}, for "
"more details."
msgstr ""

# type: defmac
#: lispref/macros.texi:257
msgid ""
"A @code{declare} form only has its special effect in the body of a @code"
"{defmacro} form if it immediately follows the documentation string, if "
"present, or the argument list otherwise.  (Strictly speaking, @emph{several} "
"@code{declare} forms can follow the documentation string or argument list, "
"but since a @code{declare} form can have several @var{specs}, they can "
"always be combined into a single form.)  When used at other places in a @code"
"{defmacro} form, or outside a @code{defmacro} form, @code{declare} just "
"returns @code{nil} without evaluating any @var{specs}."
msgstr ""

# type: Plain text
#: lispref/macros.texi:262
msgid ""
"No macro absolutely needs a @code{declare} form, because that form has no "
"effect on how the macro expands, on what the macro means in the program.  It "
"only affects secondary features: indentation and Edebug."
msgstr ""

# type: cindex
#: lispref/macros.texi:265
#, no-wrap
msgid "backquote (list substitution)"
msgstr ""

# type: cindex
#: lispref/macros.texi:266
#, no-wrap
msgid "` (list substitution)"
msgstr ""

# type: findex
#: lispref/macros.texi:267
#, no-wrap
msgid "`"
msgstr "`"

# type: Plain text
#: lispref/macros.texi:272
msgid ""
"Macros often need to construct large list structures from a mixture of "
"constants and nonconstant parts.  To make this easier, use the @samp{`} "
"syntax (usually called @dfn{backquote})."
msgstr ""

# type: Plain text
#: lispref/macros.texi:277
msgid ""
"Backquote allows you to quote a list, but selectively evaluate elements of "
"that list.  In the simplest case, it is identical to the special form @code"
"{quote} (@pxref{Quoting}).  For example, these two forms yield identical "
"results:"
msgstr ""

# type: group
#: lispref/macros.texi:282
#, no-wrap
msgid ""
"`(a list of (+ 2 3) elements)\n"
"     @result{} (a list of (+ 2 3) elements)\n"
msgstr ""

# type: group
#: lispref/macros.texi:286
#, no-wrap
msgid ""
"'(a list of (+ 2 3) elements)\n"
"     @result{} (a list of (+ 2 3) elements)\n"
msgstr ""

# type: findex
#: lispref/macros.texi:289
#, no-wrap
msgid ", @r{(with backquote)}"
msgstr ""

# type: Plain text
#: lispref/macros.texi:293
msgid ""
"The special marker @samp{,} inside of the argument to backquote indicates a "
"value that isn't constant.  Backquote evaluates the argument of @samp{,} and "
"puts the value in the list structure:"
msgstr ""

# type: group
#: lispref/macros.texi:298
#, no-wrap
msgid ""
"(list 'a 'list 'of (+ 2 3) 'elements)\n"
"     @result{} (a list of 5 elements)\n"
msgstr ""

# type: group
#: lispref/macros.texi:302
#, no-wrap
msgid ""
"`(a list of ,(+ 2 3) elements)\n"
"     @result{} (a list of 5 elements)\n"
msgstr ""

# type: Plain text
#: lispref/macros.texi:307
msgid ""
"Substitution with @samp{,} is allowed at deeper levels of the list structure "
"also.  For example:"
msgstr ""

# type: group
#: lispref/macros.texi:313
#, no-wrap
msgid ""
"(defmacro t-becomes-nil (variable)\n"
"  `(if (eq ,variable t)\n"
"       (setq ,variable nil)))\n"
msgstr ""

# type: group
#: lispref/macros.texi:318
#, no-wrap
msgid ""
"(t-becomes-nil foo)\n"
"     @equiv{} (if (eq foo t) (setq foo nil))\n"
msgstr ""

# type: findex
#: lispref/macros.texi:321
#, no-wrap
msgid ",@@ @r{(with backquote)}"
msgstr ""

# type: cindex
#: lispref/macros.texi:322
#, no-wrap
msgid "splicing (with backquote)"
msgstr ""

# type: Plain text
#: lispref/macros.texi:328
msgid ""
"You can also @dfn{splice} an evaluated value into the resulting list, using "
"the special marker @samp{,@@}.  The elements of the spliced list become "
"elements at the same level as the other elements of the resulting list.  The "
"equivalent code without using @samp{`} is often unreadable.  Here are some "
"examples:"
msgstr ""

# type: group
#: lispref/macros.texi:333
#, no-wrap
msgid ""
"(setq some-list '(2 3))\n"
"     @result{} (2 3)\n"
msgstr ""

# type: group
#: lispref/macros.texi:337
#, no-wrap
msgid ""
"(cons 1 (append some-list '(4) some-list))\n"
"     @result{} (1 2 3 4 2 3)\n"
msgstr ""

# type: group
#: lispref/macros.texi:341
#, no-wrap
msgid ""
"`(1 ,@@some-list 4 ,@@some-list)\n"
"     @result{} (1 2 3 4 2 3)\n"
msgstr ""

# type: group
#: lispref/macros.texi:346
#, no-wrap
msgid ""
"(setq list '(hack foo bar))\n"
"     @result{} (hack foo bar)\n"
msgstr ""

# type: group
#: lispref/macros.texi:352
#, no-wrap
msgid ""
"(cons 'use\n"
"  (cons 'the\n"
"    (cons 'words (append (cdr list) '(as elements)))))\n"
"     @result{} (use the words foo bar as elements)\n"
msgstr ""

# type: group
#: lispref/macros.texi:356
#, no-wrap
msgid ""
"`(use the words ,@@(cdr list) as elements)\n"
"     @result{} (use the words foo bar as elements)\n"
msgstr ""

# type: Plain text
#: lispref/macros.texi:366
msgid ""
"In old Emacs versions, before version 19.29, @samp{`} used a different "
"syntax which required an extra level of parentheses around the entire "
"backquote construct.  Likewise, each @samp{,} or @samp{,@@} substitution "
"required an extra level of parentheses surrounding both the @samp{,} or @samp"
"{,@@} and the following expression.  The old syntax required whitespace "
"between the @samp{`}, @samp{,} or @samp{,@@} and the following expression."
msgstr ""

# type: Plain text
#: lispref/macros.texi:369
msgid ""
"This syntax is still accepted, for compatibility with old Emacs versions, "
"but we recommend not using it in new programs."
msgstr ""

# type: section
#: lispref/macros.texi:371
#, no-wrap
msgid "Common Problems Using Macros"
msgstr ""

# type: Plain text
#: lispref/macros.texi:376
msgid ""
"The basic facts of macro expansion have counterintuitive consequences.  This "
"section describes some important consequences that can lead to trouble, and "
"rules to follow to avoid trouble."
msgstr ""

# type: subsection
#: lispref/macros.texi:384 lispref/macros.texi:386 lispref/macros.texi:387
#, no-wrap
msgid "Wrong Time"
msgstr ""

# type: menu
#: lispref/macros.texi:384
msgid "Do the work in the expansion, not in the macro."
msgstr ""

# type: node
#: lispref/macros.texi:384 lispref/macros.texi:417
#, no-wrap
msgid "Argument Evaluation"
msgstr ""

# type: menu
#: lispref/macros.texi:384
msgid "The expansion should evaluate each macro arg once."
msgstr ""

# type: node
#: lispref/macros.texi:384 lispref/macros.texi:521
#, no-wrap
msgid "Surprising Local Vars"
msgstr ""

# type: menu
#: lispref/macros.texi:384
msgid "Local variable bindings in the expansion"
msgstr ""

# type: menu
#: lispref/macros.texi:384
msgid "require special care."
msgstr ""

# type: node
#: lispref/macros.texi:384 lispref/macros.texi:590
#, no-wrap
msgid "Eval During Expansion"
msgstr ""

# type: menu
#: lispref/macros.texi:384
msgid "Don't evaluate them; put them in the expansion."
msgstr ""

# type: node
#: lispref/macros.texi:384 lispref/macros.texi:637
#, no-wrap
msgid "Repeated Expansion"
msgstr ""

# type: menu
#: lispref/macros.texi:384
msgid "Avoid depending on how many times expansion is done."
msgstr ""

# type: Plain text
#: lispref/macros.texi:393
msgid ""
"The most common problem in writing macros is doing some of the real work "
"prematurely---while expanding the macro, rather than in the expansion "
"itself.  For instance, one real package had this macro definition:"
msgstr ""

# type: example
#: lispref/macros.texi:398
#, no-wrap
msgid ""
"(defmacro my-set-buffer-multibyte (arg)\n"
"  (if (fboundp 'set-buffer-multibyte)\n"
"      (set-buffer-multibyte arg)))\n"
msgstr ""

# type: Plain text
#: lispref/macros.texi:405
msgid ""
"With this erroneous macro definition, the program worked fine when "
"interpreted but failed when compiled.  This macro definition called @code"
"{set-buffer-multibyte} during compilation, which was wrong, and then did "
"nothing when the compiled package was run.  The definition that the "
"programmer really wanted was this:"
msgstr ""

# type: example
#: lispref/macros.texi:410
#, no-wrap
msgid ""
"(defmacro my-set-buffer-multibyte (arg)\n"
"  (if (fboundp 'set-buffer-multibyte)\n"
"      `(set-buffer-multibyte ,arg)))\n"
msgstr ""

# type: Plain text
#: lispref/macros.texi:416
msgid ""
"This macro expands, if appropriate, into a call to @code{set-buffer-"
"multibyte} that will be executed when the compiled program is actually run."
msgstr ""

# type: subsection
#: lispref/macros.texi:418
#, no-wrap
msgid "Evaluating Macro Arguments Repeatedly"
msgstr ""

# type: Plain text
#: lispref/macros.texi:425
msgid ""
"When defining a macro you must pay attention to the number of times the "
"arguments will be evaluated when the expansion is executed.  The following "
"macro (used to facilitate iteration) illustrates the problem.  This macro "
"allows us to write a simple ``for'' loop such as one might find in Pascal."
msgstr ""

# type: findex
#: lispref/macros.texi:426
#, no-wrap
msgid "for"
msgstr "for"

# type: group
#: lispref/macros.texi:435
#, no-wrap
msgid ""
"(defmacro for (var from init to final do &rest body)\n"
"  \"Execute a simple \\\"for\\\" loop.\n"
"For example, (for i from 1 to 10 do (print i)).\"\n"
"  (list 'let (list (list var init))\n"
"        (cons 'while (cons (list '<= var final)\n"
"                           (append body (list (list 'inc var)))))))\n"
msgstr ""

# type: smallexample
#: lispref/macros.texi:437
#, no-wrap
msgid ""
"@result{} for\n"
"\n"
msgstr ""
"@result{} for\n"
"\n"

# type: group
#: lispref/macros.texi:443
#, no-wrap
msgid ""
"(for i from 1 to 3 do\n"
"   (setq square (* i i))\n"
"   (princ (format \"\\n%d %d\" i square)))\n"
"@expansion{}\n"
msgstr ""

# type: group
#: lispref/macros.texi:450
#, no-wrap
msgid ""
"(let ((i 1))\n"
"  (while (<= i 3)\n"
"    (setq square (* i i))\n"
"    (princ (format \"\\n%d %d\" i square))\n"
"    (inc i)))\n"
msgstr ""

# type: group
#: lispref/macros.texi:457
#, no-wrap
msgid ""
"     @print{}1       1\n"
"     @print{}2       4\n"
"     @print{}3       9\n"
"@result{} nil\n"
msgstr ""

# type: Plain text
#: lispref/macros.texi:465
msgid ""
"The arguments @code{from}, @code{to}, and @code{do} in this macro are "
"``syntactic sugar''; they are entirely ignored.  The idea is that you will "
"write noise words (such as @code{from}, @code{to}, and @code{do})  in those "
"positions in the macro call."
msgstr ""

# type: Plain text
#: lispref/macros.texi:467
msgid "Here's an equivalent definition simplified through use of backquote:"
msgstr ""

# type: group
#: lispref/macros.texi:477
#, no-wrap
msgid ""
"(defmacro for (var from init to final do &rest body)\n"
"  \"Execute a simple \\\"for\\\" loop.\n"
"For example, (for i from 1 to 10 do (print i)).\"\n"
"  `(let ((,var ,init))\n"
"     (while (<= ,var ,final)\n"
"       ,@@body\n"
"       (inc ,var))))\n"
msgstr ""

# type: Plain text
#: lispref/macros.texi:486
msgid ""
"Both forms of this definition (with backquote and without) suffer from the "
"defect that @var{final} is evaluated on every iteration.  If @var{final} is "
"a constant, this is not a problem.  If it is a more complex form, say @code"
"{(long-complex-calculation x)}, this can slow down the execution "
"significantly.  If @var{final} has side effects, executing it more than once "
"is probably incorrect."
msgstr ""

# type: cindex
#: lispref/macros.texi:487
#, no-wrap
msgid "macro argument evaluation"
msgstr ""

# type: Plain text
#: lispref/macros.texi:492
msgid ""
"A well-designed macro definition takes steps to avoid this problem by "
"producing an expansion that evaluates the argument expressions exactly once "
"unless repeated evaluation is part of the intended purpose of the macro.  "
"Here is a correct expansion for the @code{for} macro:"
msgstr ""

# type: group
#: lispref/macros.texi:501
#, no-wrap
msgid ""
"(let ((i 1)\n"
"      (max 3))\n"
"  (while (<= i max)\n"
"    (setq square (* i i))\n"
"    (princ (format \"%d      %d\" i square))\n"
"    (inc i)))\n"
msgstr ""

# type: Plain text
#: lispref/macros.texi:505
msgid "Here is a macro definition that creates this expansion:"
msgstr ""

# type: group
#: lispref/macros.texi:515
#, no-wrap
msgid ""
"(defmacro for (var from init to final do &rest body)\n"
"  \"Execute a simple for loop: (for i from 1 to 10 do (print i)).\"\n"
"  `(let ((,var ,init)\n"
"         (max ,final))\n"
"     (while (<= ,var max)\n"
"       ,@@body\n"
"       (inc ,var))))\n"
msgstr ""

# type: Plain text
#: lispref/macros.texi:520
msgid ""
"Unfortunately, this fix introduces another problem, described in the "
"following section."
msgstr ""

# type: subsection
#: lispref/macros.texi:522
#, no-wrap
msgid "Local Variables in Macro Expansions"
msgstr ""

# type: ifnottex
#: lispref/macros.texi:528
msgid ""
"In the previous section, the definition of @code{for} was fixed as follows "
"to make the expansion evaluate the macro arguments the proper number of "
"times:"
msgstr ""

# type: group
#: lispref/macros.texi:533
#, no-wrap
msgid ""
"(defmacro for (var from init to final do &rest body)\n"
"  \"Execute a simple for loop: (for i from 1 to 10 do (print i)).\"\n"
msgstr ""

# type: group
#: lispref/macros.texi:540
#, no-wrap
msgid ""
"  `(let ((,var ,init)\n"
"         (max ,final))\n"
"     (while (<= ,var max)\n"
"       ,@@body\n"
"       (inc ,var))))\n"
msgstr ""

# type: Plain text
#: lispref/macros.texi:547
msgid ""
"The new definition of @code{for} has a new problem: it introduces a local "
"variable named @code{max} which the user does not expect.  This causes "
"trouble in examples such as the following:"
msgstr ""

# type: group
#: lispref/macros.texi:555
#, no-wrap
msgid ""
"(let ((max 0))\n"
"  (for x from 0 to 10 do\n"
"    (let ((this (frob x)))\n"
"      (if (< max this)\n"
"          (setq max this)))))\n"
msgstr ""

# type: Plain text
#: lispref/macros.texi:562
msgid ""
"The references to @code{max} inside the body of the @code{for}, which are "
"supposed to refer to the user's binding of @code{max}, really access the "
"binding made by @code{for}."
msgstr ""

# type: Plain text
#: lispref/macros.texi:571
msgid ""
"The way to correct this is to use an uninterned symbol instead of @code{max} "
"(@pxref{Creating Symbols}).  The uninterned symbol can be bound and referred "
"to just like any other symbol, but since it is created by @code{for}, we "
"know that it cannot already appear in the user's program.  Since it is not "
"interned, there is no way the user can put it into the program later.  It "
"will never appear anywhere except where put by @code{for}.  Here is a "
"definition of @code{for} that works this way:"
msgstr ""

# type: group
#: lispref/macros.texi:582
#, no-wrap
msgid ""
"(defmacro for (var from init to final do &rest body)\n"
"  \"Execute a simple for loop: (for i from 1 to 10 do (print i)).\"\n"
"  (let ((tempvar (make-symbol \"max\")))\n"
"    `(let ((,var ,init)\n"
"           (,tempvar ,final))\n"
"       (while (<= ,var ,tempvar)\n"
"         ,@@body\n"
"         (inc ,var)))))\n"
msgstr ""

# type: Plain text
#: lispref/macros.texi:589
msgid ""
"This creates an uninterned symbol named @code{max} and puts it in the "
"expansion instead of the usual interned symbol @code{max} that appears in "
"expressions ordinarily."
msgstr ""

# type: subsection
#: lispref/macros.texi:591
#, no-wrap
msgid "Evaluating Macro Arguments in Expansion"
msgstr ""

# type: Plain text
#: lispref/macros.texi:601
msgid ""
"Another problem can happen if the macro definition itself evaluates any of "
"the macro argument expressions, such as by calling @code{eval} (@pxref"
"{Eval}).  If the argument is supposed to refer to the user's variables, you "
"may have trouble if the user happens to use a variable with the same name as "
"one of the macro arguments.  Inside the macro body, the macro argument "
"binding is the most local binding of this variable, so any references inside "
"the form being evaluated do refer to it.  Here is an example:"
msgstr ""

# type: group
#: lispref/macros.texi:607
#, no-wrap
msgid ""
"(defmacro foo (a)\n"
"  (list 'setq (eval a) t))\n"
"     @result{} foo\n"
msgstr ""

# type: group
#: lispref/macros.texi:616
#, no-wrap
msgid ""
"(setq x 'b)\n"
"(foo x) @expansion{} (setq b t)\n"
"     @result{} t                  ; @r{and @code{b} has been set.}\n"
";; @r{but}\n"
"(setq a 'c)\n"
"(foo a) @expansion{} (setq a t)\n"
"     @result{} t                  ; @r{but this set @code{a}, not @code{c}.}\n"
"\n"
msgstr ""

# type: Plain text
#: lispref/macros.texi:623
msgid ""
"It makes a difference whether the user's variable is named @code{a} or @code"
"{x}, because @code{a} conflicts with the macro argument variable @code{a}."
msgstr ""

# type: Plain text
#: lispref/macros.texi:630
msgid ""
"Another problem with calling @code{eval} in a macro definition is that it "
"probably won't do what you intend in a compiled program.  The byte-compiler "
"runs macro definitions while compiling the program, when the program's own "
"computations (which you might have wished to access with @code{eval}) don't "
"occur and its local variable bindings don't exist."
msgstr ""

# type: Plain text
#: lispref/macros.texi:636
msgid ""
"To avoid these problems, @strong{don't evaluate an argument expression while "
"computing the macro expansion}.  Instead, substitute the expression into the "
"macro expansion, so that its value will be computed as part of executing the "
"expansion.  This is how the other examples in this chapter work."
msgstr ""

# type: subsection
#: lispref/macros.texi:638
#, no-wrap
msgid "How Many Times is the Macro Expanded?"
msgstr ""

# type: Plain text
#: lispref/macros.texi:645
msgid ""
"Occasionally problems result from the fact that a macro call is expanded "
"each time it is evaluated in an interpreted function, but is expanded only "
"once (during compilation) for a compiled function.  If the macro definition "
"has side effects, they will work differently depending on how many times the "
"macro is expanded."
msgstr ""

# type: Plain text
#: lispref/macros.texi:648
msgid ""
"Therefore, you should avoid side effects in computation of the macro "
"expansion, unless you really know what you are doing."
msgstr ""

# type: Plain text
#: lispref/macros.texi:654
msgid ""
"One special kind of side effect can't be avoided: constructing Lisp "
"objects.  Almost all macro expansions include constructed lists; that is the "
"whole point of most macros.  This is usually safe; there is just one case "
"where you must be careful: when the object you construct is part of a quoted "
"constant in the macro expansion."
msgstr ""

# type: Plain text
#: lispref/macros.texi:659
msgid ""
"If the macro is expanded just once, in compilation, then the object is "
"constructed just once, during compilation.  But in interpreted execution, "
"the macro is expanded each time the macro call runs, and this means a new "
"object is constructed each time."
msgstr ""

# type: Plain text
#: lispref/macros.texi:665
msgid ""
"In most clean Lisp code, this difference won't matter.  It can matter only "
"if you perform side-effects on the objects constructed by the macro "
"definition.  Thus, to avoid trouble, @strong{avoid side effects on objects "
"constructed by macro definitions}.  Here is an example of how such side "
"effects can get you into trouble:"
msgstr ""

# type: group
#: lispref/macros.texi:670
#, no-wrap
msgid ""
"(defmacro empty-object ()\n"
"  (list 'quote (cons nil nil)))\n"
msgstr ""

# type: group
#: lispref/macros.texi:678
#, no-wrap
msgid ""
"(defun initialize (condition)\n"
"  (let ((object (empty-object)))\n"
"    (if condition\n"
"        (setcar object condition))\n"
"    object))\n"
msgstr ""

# type: Plain text
#: lispref/macros.texi:688
msgid ""
"If @code{initialize} is interpreted, a new list @code{(nil)} is constructed "
"each time @code{initialize} is called.  Thus, no side effect survives "
"between calls.  If @code{initialize} is compiled, then the macro @code{empty-"
"object} is expanded during compilation, producing a single ``constant'' @code"
"{(nil)} that is reused and altered each time @code{initialize} is called."
msgstr ""

# type: Plain text
#: lispref/macros.texi:694
msgid ""
"One way to avoid pathological cases like this is to think of @code{empty-"
"object} as a funny kind of constant, not as a memory allocation construct.  "
"You wouldn't use @code{setcar} on a constant such as @code{'(nil)}, so "
"naturally you won't use it on @code{(empty-object)} either."
msgstr ""

# type: Plain text
#: lispref/macros.texi:701
msgid ""
"You can use the @code{declare} form in the macro definition to specify how "
"to @key{TAB} should indent indent calls to the macro.  You write it like "
"this:"
msgstr ""

# type: example
#: lispref/macros.texi:704
#, no-wrap
msgid "(declare (indent @var{indent-spec}))\n"
msgstr ""

# type: Plain text
#: lispref/macros.texi:708
msgid "Here are the possibilities for @var{indent-spec}:"
msgstr ""

# type: table
#: lispref/macros.texi:712
msgid "This is the same as no property---use the standard indentation pattern."
msgstr ""

# type: table
#: lispref/macros.texi:715
msgid ""
"Handle this function like a @samp{def} construct: treat the second line as "
"the start of a @dfn{body}."
msgstr ""

# type: item
#: lispref/macros.texi:715
#, no-wrap
msgid "an integer, @var{number}"
msgstr ""

# type: table
#: lispref/macros.texi:726
msgid ""
"The first @var{number} arguments of the function are @dfn{distinguished} "
"arguments; the rest are considered the body of the expression.  A line in "
"the expression is indented according to whether the first argument on it is "
"distinguished or not.  If the argument is part of the body, the line is "
"indented @code{lisp-body-indent} more columns than the open-parenthesis "
"starting the containing expression.  If the argument is distinguished and is "
"either the first or second argument, it is indented @emph{twice} that many "
"extra columns.  If the argument is distinguished and not the first or second "
"argument, the line uses the standard pattern."
msgstr ""

# type: item
#: lispref/macros.texi:726
#, no-wrap
msgid "a symbol, @var{symbol}"
msgstr ""

# type: table
#: lispref/macros.texi:730
msgid ""
"@var{symbol} should be a function name; that function is called to calculate "
"the indentation of a line within this expression.  The function receives two "
"arguments:"
msgstr ""

# type: var{#1}
#: lispref/macros.texi:731
#, no-wrap
msgid "state"
msgstr ""

# type: table
#: lispref/macros.texi:735
msgid ""
"The value returned by @code{parse-partial-sexp} (a Lisp primitive for "
"indentation and nesting computation) when it parses up to the beginning of "
"this line."
msgstr ""

# type: var{#1}
#: lispref/macros.texi:735
#, no-wrap
msgid "pos"
msgstr ""

# type: table
#: lispref/macros.texi:737
msgid "The position at which the line being indented begins."
msgstr ""

# type: table
#: lispref/macros.texi:748
msgid ""
"It should return either a number, which is the number of columns of "
"indentation for that line, or a list whose car is such a number.  The "
"difference between returning a number and returning a list is that a number "
"says that all following lines at the same nesting level should be indented "
"just like this one; a list says that following lines might call for "
"different indentations.  This makes a difference when the indentation is "
"being computed by @kbd{C-M-q}; if the value is a number, @kbd{C-M-q} need "
"not recalculate indentation for the following lines until the end of the "
"list."
msgstr ""

# type: ignore
#: lispref/macros.texi:752
#, no-wrap
msgid "   arch-tag: d4cce66d-1047-45c3-bfde-db6719d6e82b\n"
msgstr "   arch-tag: d4cce66d-1047-45c3-bfde-db6719d6e82b\n"

# type: cindex
#: lispref/maps.texi:9
#, no-wrap
msgid "standard keymaps"
msgstr ""

# type: Plain text
#: lispref/maps.texi:15
msgid ""
"The following symbols are used as the names for various keymaps.  Some of "
"these exist when Emacs is first started, others are loaded only when their "
"respective mode is used.  This is not an exhaustive list."
msgstr ""

# type: Plain text
#: lispref/maps.texi:17
msgid ""
"Several keymaps are used in the minibuffer.  @xref{Completion Commands}."
msgstr ""

# type: Plain text
#: lispref/maps.texi:21
msgid ""
"Almost all of these maps are used as local maps.  Indeed, of the modes that "
"presently exist, only Vip mode and Terminal mode ever change the global "
"keymap."
msgstr ""

# type: vindex
#: lispref/maps.texi:23 lispref/maps.texi:24
#, no-wrap
msgid "apropos-mode-map"
msgstr ""

# type: table
#: lispref/maps.texi:26
msgid "A sparse keymap for @code{apropos} buffers."
msgstr ""

# type: vindex
#: lispref/maps.texi:27 lispref/maps.texi:28
#, no-wrap
msgid "Buffer-menu-mode-map"
msgstr ""

# type: table
#: lispref/maps.texi:30
msgid "A full keymap used by Buffer Menu mode."
msgstr ""

# type: vindex
#: lispref/maps.texi:31 lispref/maps.texi:32
#, no-wrap
msgid "c-mode-map"
msgstr ""

# type: table
#: lispref/maps.texi:34
msgid "A sparse keymap used by C mode."
msgstr ""

# type: vindex
#: lispref/maps.texi:35 lispref/maps.texi:36
#, no-wrap
msgid "command-history-map"
msgstr ""

# type: table
#: lispref/maps.texi:38
msgid "A full keymap used by Command History mode."
msgstr ""

# type: table
#: lispref/maps.texi:41
msgid "A sparse keymap for subcommands of the prefix @kbd{C-x 4}."
msgstr ""

# type: table
#: lispref/maps.texi:44
msgid "A sparse keymap for subcommands of the prefix @kbd{C-x 5}."
msgstr ""

# type: table
#: lispref/maps.texi:47
msgid "A full keymap for @kbd{C-x} commands."
msgstr ""

# type: item
#: lispref/maps.texi:48
#, no-wrap
msgid "custom-mode-map"
msgstr ""

# type: table
#: lispref/maps.texi:50
msgid "A full keymap for Custom mode."
msgstr ""

# type: vindex
#: lispref/maps.texi:51 lispref/maps.texi:52
#, no-wrap
msgid "debugger-mode-map"
msgstr ""

# type: table
#: lispref/maps.texi:54
msgid "A full keymap used by Debugger mode."
msgstr ""

# type: vindex
#: lispref/maps.texi:55 lispref/maps.texi:56
#, no-wrap
msgid "dired-mode-map"
msgstr ""

# type: table
#: lispref/maps.texi:58
msgid "A full keymap for @code{dired-mode} buffers."
msgstr ""

# type: vindex
#: lispref/maps.texi:59 lispref/maps.texi:60
#, no-wrap
msgid "edit-abbrevs-map"
msgstr ""

# type: table
#: lispref/maps.texi:62
msgid "A sparse keymap used in @code{edit-abbrevs}."
msgstr ""

# type: vindex
#: lispref/maps.texi:63 lispref/maps.texi:64
#, no-wrap
msgid "edit-tab-stops-map"
msgstr ""

# type: table
#: lispref/maps.texi:66
msgid "A sparse keymap used in @code{edit-tab-stops}."
msgstr ""

# type: vindex
#: lispref/maps.texi:67 lispref/maps.texi:68
#, no-wrap
msgid "electric-buffer-menu-mode-map"
msgstr ""

# type: table
#: lispref/maps.texi:70
msgid "A full keymap used by Electric Buffer Menu mode."
msgstr ""

# type: vindex
#: lispref/maps.texi:71 lispref/maps.texi:72
#, no-wrap
msgid "electric-history-map"
msgstr ""

# type: table
#: lispref/maps.texi:74
msgid "A full keymap used by Electric Command History mode."
msgstr ""

# type: vindex
#: lispref/maps.texi:75 lispref/maps.texi:76
#, no-wrap
msgid "emacs-lisp-mode-map"
msgstr ""

# type: table
#: lispref/maps.texi:78
msgid "A sparse keymap used by Emacs Lisp mode."
msgstr ""

# type: table
#: lispref/maps.texi:81
msgid "A full keymap for @kbd{ESC} (or @kbd{Meta}) commands."
msgstr ""

# type: vindex
#: lispref/maps.texi:82 lispref/maps.texi:83
#, no-wrap
msgid "facemenu-menu"
msgstr ""

# type: table
#: lispref/maps.texi:85
msgid "The sparse keymap that displays the Text Properties menu."
msgstr ""

# type: vindex
#: lispref/maps.texi:86 lispref/maps.texi:87
#, no-wrap
msgid "facemenu-background-menu"
msgstr ""

# type: table
#: lispref/maps.texi:90
msgid ""
"The sparse keymap that displays the Background Color submenu of the Text "
"Properties menu."
msgstr ""

# type: vindex
#: lispref/maps.texi:91 lispref/maps.texi:92
#, no-wrap
msgid "facemenu-face-menu"
msgstr ""

# type: table
#: lispref/maps.texi:94
msgid ""
"The sparse keymap that displays the Face submenu of the Text Properties menu."
msgstr ""

# type: vindex
#: lispref/maps.texi:95 lispref/maps.texi:96
#, no-wrap
msgid "facemenu-foreground-menu"
msgstr ""

# type: table
#: lispref/maps.texi:99
msgid ""
"The sparse keymap that displays the Foreground Color submenu of the Text "
"Properties menu."
msgstr ""

# type: vindex
#: lispref/maps.texi:100 lispref/maps.texi:101
#, no-wrap
msgid "facemenu-indentation-menu"
msgstr ""

# type: table
#: lispref/maps.texi:104
msgid ""
"The sparse keymap that displays the Indentation submenu of the Text "
"Properties menu."
msgstr ""

# type: vindex
#: lispref/maps.texi:105 lispref/maps.texi:106
#, no-wrap
msgid "facemenu-justification-menu"
msgstr ""

# type: table
#: lispref/maps.texi:109
msgid ""
"The sparse keymap that displays the Justification submenu of the Text "
"Properties menu."
msgstr ""

# type: vindex
#: lispref/maps.texi:110 lispref/maps.texi:111
#, no-wrap
msgid "facemenu-special-menu"
msgstr ""

# type: table
#: lispref/maps.texi:114
msgid ""
"The sparse keymap that displays the Special Props submenu of the Text "
"Properties menu."
msgstr ""

# type: table
#: lispref/maps.texi:119
msgid ""
"The keymap for translating keypad and function keys.@* If there are none, "
"then it contains an empty sparse keymap.  @xref{Translation Keymaps}."
msgstr ""

# type: vindex
#: lispref/maps.texi:120 lispref/maps.texi:121
#, no-wrap
msgid "fundamental-mode-map"
msgstr ""

# type: table
#: lispref/maps.texi:124
msgid ""
"The sparse keymap for Fundamental mode.@* It is empty and should not be "
"changed."
msgstr ""

# type: table
#: lispref/maps.texi:128
msgid ""
"The full keymap containing default global key bindings.@* Modes should not "
"modify the Global map."
msgstr ""

# type: vindex
#: lispref/maps.texi:129 lispref/maps.texi:130
#, no-wrap
msgid "grep-mode-map"
msgstr ""

# type: table
#: lispref/maps.texi:132
msgid "The keymap for @code{grep-mode} buffers."
msgstr ""

# type: table
#: lispref/maps.texi:135
msgid ""
"The sparse keymap for the keys that follow the help character @kbd{C-h}."
msgstr ""

# type: vindex
#: lispref/maps.texi:136 lispref/maps.texi:137
#, no-wrap
msgid "help-mode-map"
msgstr ""

# type: table
#: lispref/maps.texi:139
msgid "The sparse keymap for Help mode."
msgstr ""

# type: vindex
#: lispref/maps.texi:140 lispref/maps.texi:141
#, no-wrap
msgid "Helper-help-map"
msgstr ""

# type: table
#: lispref/maps.texi:145
msgid ""
"A full keymap used by the help utility package.@* It has the same keymap in "
"its value cell and in its function cell."
msgstr ""

# type: vindex
#: lispref/maps.texi:146 lispref/maps.texi:147
#, no-wrap
msgid "Info-edit-map"
msgstr ""

# type: table
#: lispref/maps.texi:149
msgid "A sparse keymap used by the @kbd{e} command of Info."
msgstr ""

# type: vindex
#: lispref/maps.texi:150 lispref/maps.texi:151
#, no-wrap
msgid "Info-mode-map"
msgstr ""

# type: table
#: lispref/maps.texi:153
msgid "A sparse keymap containing Info commands."
msgstr ""

# type: vindex
#: lispref/maps.texi:154 lispref/maps.texi:155
#, no-wrap
msgid "isearch-mode-map"
msgstr ""

# type: table
#: lispref/maps.texi:158
msgid ""
"A keymap that defines the characters you can type within incremental search."
msgstr ""

# type: table
#: lispref/maps.texi:162
msgid ""
"A keymap for translating keys.  This one overrides ordinary key bindings, "
"unlike @code{function-key-map}.  @xref{Translation Keymaps}."
msgstr ""

# type: vindex
#: lispref/maps.texi:163 lispref/maps.texi:164
#, no-wrap
msgid "kmacro-map"
msgstr ""

# type: table
#: lispref/maps.texi:167
msgid "A sparse keymap for keys that follows the @kbd{C-x C-k} prefix search."
msgstr ""

# type: vindex
#: lispref/maps.texi:168 lispref/maps.texi:169
#, no-wrap
msgid "lisp-interaction-mode-map"
msgstr ""

# type: table
#: lispref/maps.texi:171
msgid "A sparse keymap used by Lisp Interaction mode."
msgstr ""

# type: vindex
#: lispref/maps.texi:172 lispref/maps.texi:173
#, no-wrap
msgid "lisp-mode-map"
msgstr ""

# type: table
#: lispref/maps.texi:175
msgid "A sparse keymap used by Lisp mode."
msgstr ""

# type: vindex
#: lispref/maps.texi:176 lispref/maps.texi:177
#, no-wrap
msgid "menu-bar-edit-menu"
msgstr ""

# type: table
#: lispref/maps.texi:179
msgid "The keymap which displays the Edit menu in the menu bar."
msgstr ""

# type: vindex
#: lispref/maps.texi:180 lispref/maps.texi:181
#, no-wrap
msgid "menu-bar-files-menu"
msgstr ""

# type: table
#: lispref/maps.texi:183
msgid "The keymap which displays the Files menu in the menu bar."
msgstr ""

# type: vindex
#: lispref/maps.texi:184 lispref/maps.texi:185
#, no-wrap
msgid "menu-bar-help-menu"
msgstr ""

# type: table
#: lispref/maps.texi:187
msgid "The keymap which displays the Help menu in the menu bar."
msgstr ""

# type: vindex
#: lispref/maps.texi:188 lispref/maps.texi:189
#, no-wrap
msgid "menu-bar-mule-menu"
msgstr ""

# type: table
#: lispref/maps.texi:191
msgid "The keymap which displays the Mule menu in the menu bar."
msgstr ""

# type: vindex
#: lispref/maps.texi:192 lispref/maps.texi:193
#, no-wrap
msgid "menu-bar-search-menu"
msgstr ""

# type: table
#: lispref/maps.texi:195
msgid "The keymap which displays the Search menu in the menu bar."
msgstr ""

# type: vindex
#: lispref/maps.texi:196 lispref/maps.texi:197
#, no-wrap
msgid "menu-bar-tools-menu"
msgstr ""

# type: table
#: lispref/maps.texi:199
msgid "The keymap which displays the Tools menu in the menu bar."
msgstr ""

# type: table
#: lispref/maps.texi:205
msgid ""
"The keymap for characters following @kbd{C-c}.  Note, this is in the global "
"map.  This map is not actually mode specific: its name was chosen to be "
"informative for the user in @kbd{C-h b} (@code{display-bindings}), where it "
"describes the main use of the @kbd{C-c} prefix key."
msgstr ""

# type: vindex
#: lispref/maps.texi:206 lispref/maps.texi:207
#, no-wrap
msgid "occur-mode-map"
msgstr ""

# type: table
#: lispref/maps.texi:209
msgid "A sparse keymap used by Occur mode."
msgstr ""

# type: defvar
#: lispref/maps.texi:210 lispref/searching.texi:1627
#, no-wrap
msgid "query-replace-map"
msgstr ""

# type: table
#: lispref/maps.texi:215
msgid ""
"A sparse keymap used for responses in @code{query-replace} and related "
"commands; also for @code{y-or-n-p} and @code{map-y-or-n-p}.  The functions "
"that use this map do not support prefix keys; they look up one event at a "
"time."
msgstr ""

# type: vindex
#: lispref/maps.texi:216 lispref/maps.texi:217
#, no-wrap
msgid "text-mode-map"
msgstr ""

# type: table
#: lispref/maps.texi:219
msgid "A sparse keymap used by Text mode."
msgstr ""

# type: table
#: lispref/maps.texi:222
msgid "The keymap defining the contents of the tool bar."
msgstr ""

# type: vindex
#: lispref/maps.texi:223 lispref/maps.texi:224
#, no-wrap
msgid "view-mode-map"
msgstr ""

# type: table
#: lispref/maps.texi:226
msgid "A full keymap used by View mode."
msgstr ""

# type: ignore
#: lispref/maps.texi:230
#, no-wrap
msgid "   arch-tag: b741253c-7e23-4a02-b3fa-cffd9e4d72b9\n"
msgstr "   arch-tag: b741253c-7e23-4a02-b3fa-cffd9e4d72b9\n"

# type: Plain text
#: lispref/markers.texi:15
msgid ""
"A @dfn{marker} is a Lisp object used to specify a position in a buffer "
"relative to the surrounding text.  A marker changes its offset from the "
"beginning of the buffer automatically whenever text is inserted or deleted, "
"so that it stays with the two characters on either side of it."
msgstr ""

# type: menu
#: lispref/markers.texi:26 lispref/markers.texi:28 lispref/markers.texi:29
#: lispref/vol1.texi:793 lispref/vol2.texi:794
#, no-wrap
msgid "Overview of Markers"
msgstr ""

# type: menu
#: lispref/markers.texi:26 lispref/vol1.texi:793 lispref/vol2.texi:794
msgid "The components of a marker, and how it relocates."
msgstr ""

# type: menu
#: lispref/markers.texi:26 lispref/markers.texi:120 lispref/markers.texi:121
#: lispref/vol1.texi:793 lispref/vol2.texi:794
#, no-wrap
msgid "Predicates on Markers"
msgstr ""

# type: menu
#: lispref/markers.texi:26 lispref/vol1.texi:793 lispref/vol2.texi:794
msgid "Testing whether an object is a marker."
msgstr ""

# type: menu
#: lispref/markers.texi:26 lispref/markers.texi:143 lispref/vol1.texi:793
#: lispref/vol2.texi:794
#, no-wrap
msgid "Creating Markers"
msgstr ""

# type: menu
#: lispref/markers.texi:26 lispref/vol1.texi:793 lispref/vol2.texi:794
msgid "Making empty markers or markers at certain places."
msgstr ""

# type: menu
#: lispref/markers.texi:26 lispref/markers.texi:268 lispref/markers.texi:269
#: lispref/vol1.texi:793 lispref/vol2.texi:794
#, no-wrap
msgid "Information from Markers"
msgstr ""

# type: menu
#: lispref/markers.texi:26
msgid "Finding the marker's buffer or character position."
msgstr ""

# type: section
#: lispref/markers.texi:26 lispref/markers.texi:317 lispref/markers.texi:318
#, no-wrap
msgid "Marker Insertion Types"
msgstr ""

# type: menu
#: lispref/markers.texi:26
msgid "Two ways a marker can relocate when you"
msgstr ""

# type: menu
#: lispref/markers.texi:26
msgid "insert where it points."
msgstr ""

# type: node
#: lispref/markers.texi:26 lispref/markers.texi:344
#, no-wrap
msgid "Moving Markers"
msgstr ""

# type: menu
#: lispref/markers.texi:26 lispref/vol1.texi:793 lispref/vol2.texi:794
msgid "Moving the marker to a new buffer or position."
msgstr ""

# type: menu
#: lispref/markers.texi:26 lispref/markers.texi:390 lispref/markers.texi:391
#: lispref/vol1.texi:793 lispref/vol2.texi:794
#, no-wrap
msgid "The Mark"
msgstr ""

# type: menu
#: lispref/markers.texi:26 lispref/vol1.texi:793 lispref/vol2.texi:794
msgid "How \"the mark\" is implemented with a marker."
msgstr ""

# type: menu
#: lispref/markers.texi:26 lispref/markers.texi:629 lispref/markers.texi:630
#: lispref/vol1.texi:793 lispref/vol2.texi:794
#, no-wrap
msgid "The Region"
msgstr ""

# type: menu
#: lispref/markers.texi:26 lispref/vol1.texi:793 lispref/vol2.texi:794
msgid "How to access \"the region\"."
msgstr ""

# type: Plain text
#: lispref/markers.texi:38
msgid ""
"A marker specifies a buffer and a position in that buffer.  The marker can "
"be used to represent a position in the functions that require one, just as "
"an integer could be used.  In that case, the marker's buffer is normally "
"ignored.  Of course, a marker used in this way usually points to a position "
"in the buffer that the function operates on, but that is entirely the "
"programmer's responsibility.  @xref{Positions}, for a complete description "
"of positions."
msgstr ""

# type: Plain text
#: lispref/markers.texi:48
msgid ""
"A marker has three attributes: the marker position, the marker buffer, and "
"the insertion type.  The marker position is an integer that is equivalent "
"(at a given time) to the marker as a position in that buffer.  But the "
"marker's position value can change often during the life of the marker.  "
"Insertion and deletion of text in the buffer relocate the marker.  The idea "
"is that a marker positioned between two characters remains between those two "
"characters despite insertion and deletion elsewhere in the buffer.  "
"Relocation changes the integer equivalent of the marker."
msgstr ""

# type: cindex
#: lispref/markers.texi:49
#, no-wrap
msgid "marker relocation"
msgstr ""

# type: Plain text
#: lispref/markers.texi:56
msgid ""
"Deleting text around a marker's position leaves the marker between the "
"characters immediately before and after the deleted text.  Inserting text at "
"the position of a marker normally leaves the marker either in front of or "
"after the new text, depending on the marker's @dfn{insertion type} (@pxref"
"{Marker Insertion Types})---unless the insertion is done with @code{insert-"
"before-markers} (@pxref{Insertion})."
msgstr ""

# type: cindex
#: lispref/markers.texi:57
#, no-wrap
msgid "marker garbage collection"
msgstr ""

# type: Plain text
#: lispref/markers.texi:64
msgid ""
"Insertion and deletion in a buffer must check all the markers and relocate "
"them if necessary.  This slows processing in a buffer with a large number of "
"markers.  For this reason, it is a good idea to make a marker point nowhere "
"if you are sure you don't need it any more.  Unreferenced markers are "
"garbage collected eventually, but until then will continue to use time if "
"they do point somewhere."
msgstr ""

# type: cindex
#: lispref/markers.texi:65
#, no-wrap
msgid "markers as numbers"
msgstr ""

# type: Plain text
#: lispref/markers.texi:70
msgid ""
"Because it is common to perform arithmetic operations on a marker position, "
"most of the arithmetic operations (including @code{+} and @code{-}) accept "
"markers as arguments.  In such cases, the marker stands for its current "
"position."
msgstr ""

# type: Plain text
#: lispref/markers.texi:73
msgid ""
"Here are examples of creating markers, setting markers, and moving point to "
"markers:"
msgstr ""

# type: group
#: lispref/markers.texi:79
#, no-wrap
msgid ""
";; @r{Make a new marker that initially does not point anywhere:}\n"
"(setq m1 (make-marker))\n"
"     @result{} #<marker in no buffer>\n"
msgstr ""

# type: group
#: lispref/markers.texi:86
#, no-wrap
msgid ""
";; @r{Set @code{m1} to point between the 99th and 100th characters}\n"
";;   @r{in the current buffer:}\n"
"(set-marker m1 100)\n"
"     @result{} #<marker at 100 in markers.texi>\n"
msgstr ""

# type: group
#: lispref/markers.texi:94
#, no-wrap
msgid ""
";; @r{Now insert one character at the beginning of the buffer:}\n"
"(goto-char (point-min))\n"
"     @result{} 1\n"
"(insert \"Q\")\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/markers.texi:100
#, no-wrap
msgid ""
";; @r{@code{m1} is updated appropriately.}\n"
"m1\n"
"     @result{} #<marker at 101 in markers.texi>\n"
msgstr ""

# type: group
#: lispref/markers.texi:111
#, no-wrap
msgid ""
";; @r{Two markers that point to the same position}\n"
";;   @r{are not @code{eq}, but they are @code{equal}.}\n"
"(setq m2 (copy-marker m1))\n"
"     @result{} #<marker at 101 in markers.texi>\n"
"(eq m1 m2)\n"
"     @result{} nil\n"
"(equal m1 m2)\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/markers.texi:117
#, no-wrap
msgid ""
";; @r{When you are finished using a marker, make it point nowhere.}\n"
"(set-marker m1 nil)\n"
"     @result{} #<marker in no buffer>\n"
msgstr ""

# type: Plain text
#: lispref/markers.texi:126
msgid ""
"You can test an object to see whether it is a marker, or whether it is "
"either an integer or a marker.  The latter test is useful in connection with "
"the arithmetic functions that work with both markers and integers."
msgstr ""

# type: defun
#: lispref/markers.texi:127
#, no-wrap
msgid "markerp object"
msgstr ""

# type: defun
#: lispref/markers.texi:131
msgid ""
"This function returns @code{t} if @var{object} is a marker, @code{nil} "
"otherwise.  Note that integers are not markers, even though many functions "
"will accept either a marker or an integer."
msgstr ""

# type: defun
#: lispref/markers.texi:133
#, no-wrap
msgid "integer-or-marker-p object"
msgstr ""

# type: defun
#: lispref/markers.texi:136
msgid ""
"This function returns @code{t} if @var{object} is an integer or a marker, "
"@code{nil} otherwise."
msgstr ""

# type: defun
#: lispref/markers.texi:138
#, no-wrap
msgid "number-or-marker-p object"
msgstr ""

# type: defun
#: lispref/markers.texi:141
msgid ""
"This function returns @code{t} if @var{object} is a number (either integer "
"or floating point) or a marker, @code{nil} otherwise."
msgstr ""

# type: section
#: lispref/markers.texi:144
#, no-wrap
msgid "Functions that Create Markers"
msgstr ""

# type: Plain text
#: lispref/markers.texi:150
msgid ""
"When you create a new marker, you can make it point nowhere, or point to the "
"present position of point, or to the beginning or end of the accessible "
"portion of the buffer, or to the same place as another given marker."
msgstr ""

# type: Plain text
#: lispref/markers.texi:153
msgid ""
"The next four functions all return markers with insertion type @code{nil}.  "
"@xref{Marker Insertion Types}."
msgstr ""

# type: defun
#: lispref/markers.texi:154
#, no-wrap
msgid "make-marker"
msgstr ""

# type: defun
#: lispref/markers.texi:157
msgid ""
"This function returns a newly created marker that does not point anywhere."
msgstr ""

# type: group
#: lispref/markers.texi:162
#, no-wrap
msgid ""
"(make-marker)\n"
"     @result{} #<marker in no buffer>\n"
msgstr ""

# type: defun
#: lispref/markers.texi:166
#, no-wrap
msgid "point-marker"
msgstr ""

# type: defun
#: lispref/markers.texi:170
msgid ""
"This function returns a new marker that points to the present position of "
"point in the current buffer.  @xref{Point}.  For an example, see @code{copy-"
"marker}, below."
msgstr ""

# type: defun
#: lispref/markers.texi:172
#, no-wrap
msgid "point-min-marker"
msgstr ""

# type: defun
#: lispref/markers.texi:176
msgid ""
"This function returns a new marker that points to the beginning of the "
"accessible portion of the buffer.  This will be the beginning of the buffer "
"unless narrowing is in effect.  @xref{Narrowing}."
msgstr ""

# type: defun
#: lispref/markers.texi:178
#, no-wrap
msgid "point-max-marker"
msgstr ""

# type: defun
#: lispref/markers.texi:182
msgid ""
"This function returns a new marker that points to the end of the accessible "
"portion of the buffer.  This will be the end of the buffer unless narrowing "
"is in effect.  @xref{Narrowing}."
msgstr ""

# type: defun
#: lispref/markers.texi:186
msgid ""
"Here are examples of this function and @code{point-min-marker}, shown in a "
"buffer containing a version of the source file for the text of this chapter."
msgstr ""

# type: group
#: lispref/markers.texi:193
#, no-wrap
msgid ""
"(point-min-marker)\n"
"     @result{} #<marker at 1 in markers.texi>\n"
"(point-max-marker)\n"
"     @result{} #<marker at 15573 in markers.texi>\n"
msgstr ""

# type: group
#: lispref/markers.texi:198
#, no-wrap
msgid ""
"(narrow-to-region 100 200)\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/markers.texi:202
#, no-wrap
msgid ""
"(point-min-marker)\n"
"     @result{} #<marker at 100 in markers.texi>\n"
msgstr ""

# type: group
#: lispref/markers.texi:206
#, no-wrap
msgid ""
"(point-max-marker)\n"
"     @result{} #<marker at 200 in markers.texi>\n"
msgstr ""

# type: defun
#: lispref/markers.texi:210
#, no-wrap
msgid "copy-marker marker-or-integer &optional insertion-type"
msgstr ""

# type: defun
#: lispref/markers.texi:216
msgid ""
"If passed a marker as its argument, @code{copy-marker} returns a new marker "
"that points to the same place and the same buffer as does @var{marker-or-"
"integer}.  If passed an integer as its argument, @code{copy-marker} returns "
"a new marker that points to position @var{marker-or-integer} in the current "
"buffer."
msgstr ""

# type: defun
#: lispref/markers.texi:219
msgid ""
"The new marker's insertion type is specified by the argument @var{insertion-"
"type}.  @xref{Marker Insertion Types}."
msgstr ""

# type: defun
#: lispref/markers.texi:225
msgid ""
"If passed an integer argument less than 1, @code{copy-marker} returns a new "
"marker that points to the beginning of the current buffer.  If passed an "
"integer argument greater than the length of the buffer, @code{copy-marker} "
"returns a new marker that points to the end of the buffer."
msgstr ""

# type: group
#: lispref/markers.texi:230
#, no-wrap
msgid ""
"(copy-marker 0)\n"
"     @result{} #<marker at 1 in markers.texi>\n"
msgstr ""

# type: group
#: lispref/markers.texi:235
#, no-wrap
msgid ""
"(copy-marker 20000)\n"
"     @result{} #<marker at 7572 in markers.texi>\n"
msgstr ""

# type: defun
#: lispref/markers.texi:240
msgid ""
"An error is signaled if @var{marker} is neither a marker nor an integer."
msgstr ""

# type: Plain text
#: lispref/markers.texi:245
msgid ""
"Two distinct markers are considered @code{equal} (even though not @code{eq}) "
"to each other if they have the same position and buffer, or if they both "
"point nowhere."
msgstr ""

# type: group
#: lispref/markers.texi:250
#, no-wrap
msgid ""
"(setq p (point-marker))\n"
"     @result{} #<marker at 2139 in markers.texi>\n"
msgstr ""

# type: group
#: lispref/markers.texi:255
#, no-wrap
msgid ""
"(setq q (copy-marker p))\n"
"     @result{} #<marker at 2139 in markers.texi>\n"
msgstr ""

# type: group
#: lispref/markers.texi:260
#, no-wrap
msgid ""
"(eq p q)\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/markers.texi:265
#, no-wrap
msgid ""
"(equal p q)\n"
"     @result{} t\n"
msgstr ""

# type: Plain text
#: lispref/markers.texi:273
msgid ""
"This section describes the functions for accessing the components of a "
"marker object."
msgstr ""

# type: defun
#: lispref/markers.texi:274
#, no-wrap
msgid "marker-position marker"
msgstr ""

# type: defun
#: lispref/markers.texi:277
msgid ""
"This function returns the position that @var{marker} points to, or @code"
"{nil} if it points nowhere."
msgstr ""

# type: defun
#: lispref/markers.texi:279
#, no-wrap
msgid "marker-buffer marker"
msgstr ""

# type: defun
#: lispref/markers.texi:282
msgid ""
"This function returns the buffer that @var{marker} points into, or @code"
"{nil} if it points nowhere."
msgstr ""

# type: group
#: lispref/markers.texi:287
#, no-wrap
msgid ""
"(setq m (make-marker))\n"
"     @result{} #<marker in no buffer>\n"
msgstr ""

# type: group
#: lispref/markers.texi:291
#, no-wrap
msgid ""
"(marker-position m)\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/markers.texi:295
#, no-wrap
msgid ""
"(marker-buffer m)\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/markers.texi:300
#, no-wrap
msgid ""
"(set-marker m 3770 (current-buffer))\n"
"     @result{} #<marker at 3770 in markers.texi>\n"
msgstr ""

# type: group
#: lispref/markers.texi:304
#, no-wrap
msgid ""
"(marker-buffer m)\n"
"     @result{} #<buffer markers.texi>\n"
msgstr ""

# type: group
#: lispref/markers.texi:308
#, no-wrap
msgid ""
"(marker-position m)\n"
"     @result{} 3770\n"
msgstr ""

# type: defun
#: lispref/markers.texi:312
#, no-wrap
msgid "buffer-has-markers-at position"
msgstr ""

# type: defun
#: lispref/markers.texi:315
msgid ""
"This function returns @code{t} if one or more markers point at position @var"
"{position} in the current buffer."
msgstr ""

# type: cindex
#: lispref/markers.texi:320
#, no-wrap
msgid "insertion type of a marker"
msgstr ""

# type: Plain text
#: lispref/markers.texi:327
msgid ""
"When you insert text directly at the place where a marker points, there are "
"two possible ways to relocate that marker: it can point before the inserted "
"text, or point after it.  You can specify which one a given marker should do "
"by setting its @dfn{insertion type}.  Note that use of @code{insert-before-"
"markers} ignores markers' insertion types, always relocating a marker to "
"point after the inserted text."
msgstr ""

# type: defun
#: lispref/markers.texi:328
#, no-wrap
msgid "set-marker-insertion-type marker type"
msgstr ""

# type: defun
#: lispref/markers.texi:333
msgid ""
"This function sets the insertion type of marker @var{marker} to @var{type}.  "
"If @var{type} is @code{t}, @var{marker} will advance when text is inserted "
"at its position.  If @var{type} is @code{nil}, @var{marker} does not advance "
"when text is inserted there."
msgstr ""

# type: defun
#: lispref/markers.texi:335
#, no-wrap
msgid "marker-insertion-type marker"
msgstr ""

# type: defun
#: lispref/markers.texi:337
msgid "This function reports the current insertion type of @var{marker}."
msgstr ""

# type: Plain text
#: lispref/markers.texi:343
msgid ""
"Most functions that create markers, without an argument allowing to specify "
"the insertion type, create them with insertion type @code{nil}.  Also, the "
"mark has, by default, insertion type @code{nil}."
msgstr ""

# type: section
#: lispref/markers.texi:345
#, no-wrap
msgid "Moving Marker Positions"
msgstr ""

# type: Plain text
#: lispref/markers.texi:352
msgid ""
"This section describes how to change the position of an existing marker.  "
"When you do this, be sure you know whether the marker is used outside of "
"your program, and, if so, what effects will result from moving it---"
"otherwise, confusing things may happen in other parts of Emacs."
msgstr ""

# type: defun
#: lispref/markers.texi:353
#, no-wrap
msgid "set-marker marker position &optional buffer"
msgstr ""

# type: defun
#: lispref/markers.texi:357
msgid ""
"This function moves @var{marker} to @var{position} in @var{buffer}.  If @var"
"{buffer} is not provided, it defaults to the current buffer."
msgstr ""

# type: defun
#: lispref/markers.texi:363
msgid ""
"If @var{position} is less than 1, @code{set-marker} moves @var{marker} to "
"the beginning of the buffer.  If @var{position} is greater than the size of "
"the buffer, @code{set-marker} moves marker to the end of the buffer.  If @var"
"{position} is @code{nil} or a marker that points nowhere, then @var{marker} "
"is set to point nowhere."
msgstr ""

# type: defun
#: lispref/markers.texi:365
msgid "The value returned is @var{marker}."
msgstr ""

# type: group
#: lispref/markers.texi:370
#, no-wrap
msgid ""
"(setq m (point-marker))\n"
"     @result{} #<marker at 4714 in markers.texi>\n"
msgstr ""

# type: group
#: lispref/markers.texi:374
#, no-wrap
msgid ""
"(set-marker m 55)\n"
"     @result{} #<marker at 55 in markers.texi>\n"
msgstr ""

# type: group
#: lispref/markers.texi:378
#, no-wrap
msgid ""
"(setq b (get-buffer \"foo\"))\n"
"     @result{} #<buffer foo>\n"
msgstr ""

# type: group
#: lispref/markers.texi:382
#, no-wrap
msgid ""
"(set-marker m 0 b)\n"
"     @result{} #<marker at 1 in foo>\n"
msgstr ""

# type: defun
#: lispref/markers.texi:386
#, no-wrap
msgid "move-marker marker position &optional buffer"
msgstr ""

# type: defun
#: lispref/markers.texi:388
msgid "This is another name for @code{set-marker}."
msgstr ""

# type: cindex
#: lispref/markers.texi:392
#, no-wrap
msgid "mark, the"
msgstr ""

# type: cindex
#: lispref/markers.texi:393
#, no-wrap
msgid "mark ring"
msgstr ""

# type: Plain text
#: lispref/markers.texi:403
msgid ""
"One special marker in each buffer is designated @dfn{the mark}.  It "
"specifies a position to bound a range of text for commands such as @code"
"{kill-region} and @code{indent-rigidly}.  Lisp programs should set the mark "
"only to values that have a potential use to the user, and never for their "
"own internal purposes.  For example, the @code{replace-regexp} command sets "
"the mark to the value of point before doing any replacements, because this "
"enables the user to move back there conveniently after the replace is "
"finished."
msgstr ""

# type: Plain text
#: lispref/markers.texi:411
msgid ""
"Many commands are designed to operate on the text between point and the mark "
"when called interactively.  If you are writing such a command, don't examine "
"the mark directly; instead, use @code{interactive} with the @samp{r} "
"specification.  This provides the values of point and the mark as arguments "
"to the command in an interactive call, but permits other Lisp programs to "
"specify arguments explicitly.  @xref{Interactive Codes}."
msgstr ""

# type: Plain text
#: lispref/markers.texi:416
msgid ""
"Each buffer has a marker which represents the value of the mark in that "
"buffer, independent of any other buffer.  When a buffer is newly created, "
"this marker exists but does not point anywhere.  That means the mark "
"``doesn't exist'' in that buffer as yet."
msgstr ""

# type: Plain text
#: lispref/markers.texi:425
msgid ""
"Once the mark ``exists'' in a buffer, it normally never ceases to exist.  "
"However, it may become @dfn{inactive}, if Transient Mark mode is enabled.  "
"The variable @code{mark-active}, which is always buffer-local in all "
"buffers, indicates whether the mark is active: non-@code{nil} means yes.  A "
"command can request deactivation of the mark upon return to the editor "
"command loop by setting @code{deactivate-mark} to a non-@code{nil} value "
"(but this causes deactivation only if Transient Mark mode is enabled)."
msgstr ""

# type: Plain text
#: lispref/markers.texi:429
msgid ""
"The main motivation for using Transient Mark mode is that this mode also "
"enables highlighting of the region when the mark is active.  @xref{Display}."
msgstr ""

# type: Plain text
#: lispref/markers.texi:436
msgid ""
"In addition to the mark, each buffer has a @dfn{mark ring} which is a list "
"of markers containing previous values of the mark.  When editing commands "
"change the mark, they should normally save the old value of the mark on the "
"mark ring.  The variable @code{mark-ring-max} specifies the maximum number "
"of entries in the mark ring; once the list becomes this long, adding a new "
"element deletes the last element."
msgstr ""

# type: Plain text
#: lispref/markers.texi:440
msgid ""
"There is also a separate global mark ring, but that is used only in a few "
"particular user-level commands, and is not relevant to Lisp programming.  So "
"we do not describe it here."
msgstr ""

# type: defun
#: lispref/markers.texi:441
#, no-wrap
msgid "mark &optional force"
msgstr ""

# type: cindex
#: lispref/markers.texi:442
#, no-wrap
msgid "current buffer mark"
msgstr ""

# type: defun
#: lispref/markers.texi:445
msgid ""
"This function returns the current buffer's mark position as an integer, or "
"@code{nil} if no mark has ever been set in this buffer."
msgstr ""

# type: defun
#: lispref/markers.texi:451
msgid ""
"If Transient Mark mode is enabled, and @code{mark-even-if-inactive} is @code"
"{nil}, @code{mark} signals an error if the mark is inactive.  However, if "
"@var{force} is non-@code{nil}, then @code{mark} disregards inactivity of the "
"mark, and returns the mark position anyway (or @code{nil})."
msgstr ""

# type: defun
#: lispref/markers.texi:453
#, no-wrap
msgid "mark-marker"
msgstr ""

# type: defun
#: lispref/markers.texi:458
msgid ""
"This function returns the marker that represents the current buffer's mark.  "
"It is not a copy, it is the marker used internally.  Therefore, changing "
"this marker's position will directly affect the buffer's mark.  Don't do "
"that unless that is the effect you want."
msgstr ""

# type: group
#: lispref/markers.texi:463
#, no-wrap
msgid ""
"(setq m (mark-marker))\n"
"     @result{} #<marker at 3420 in markers.texi>\n"
msgstr ""

# type: group
#: lispref/markers.texi:467
#, no-wrap
msgid ""
"(set-marker m 100)\n"
"     @result{} #<marker at 100 in markers.texi>\n"
msgstr ""

# type: group
#: lispref/markers.texi:471
#, no-wrap
msgid ""
"(mark-marker)\n"
"     @result{} #<marker at 100 in markers.texi>\n"
msgstr ""

# type: defun
#: lispref/markers.texi:478
msgid ""
"Like any marker, this marker can be set to point at any buffer you like.  If "
"you make it point at any buffer other than the one of which it is the mark, "
"it will yield perfectly consistent, but rather odd, results.  We recommend "
"that you not do it!"
msgstr ""

# type: deffn
#: lispref/markers.texi:481
#, no-wrap
msgid "Command set-mark-command jump"
msgstr ""

# type: deffn
#: lispref/markers.texi:485
#, no-wrap
msgid ""
"If @var{jump} is @code{nil}, this command sets the mark to the value\n"
"of point and pushes the previous value of the mark on the mark ring.  The\n"
"message @samp{Mark set} is also displayed in the echo area.\n"
"\n"
msgstr ""

# type: deffn
#: lispref/markers.texi:489
#, no-wrap
msgid ""
"If @var{jump} is not @code{nil}, this command sets point to the value\n"
"of the mark, and sets the mark to the previous saved mark value, which\n"
"is popped off the mark ring.\n"
"\n"
msgstr ""

# type: deffn
#: lispref/markers.texi:491
#, no-wrap
msgid "This function is @emph{only} intended for interactive use.\n"
msgstr ""

# type: defun
#: lispref/markers.texi:494
#, no-wrap
msgid "set-mark position"
msgstr ""

# type: defun
#: lispref/markers.texi:497
msgid ""
"This function sets the mark to @var{position}, and activates the mark.  The "
"old value of the mark is @emph{not} pushed onto the mark ring."
msgstr ""

# type: defun
#: lispref/markers.texi:503
msgid ""
"@strong{Please note:} Use this function only if you want the user to see "
"that the mark has moved, and you want the previous mark position to be "
"lost.  Normally, when a new mark is set, the old one should go on the @code"
"{mark-ring}.  For this reason, most applications should use @code{push-mark} "
"and @code{pop-mark}, not @code{set-mark}."
msgstr ""

# type: defun
#: lispref/markers.texi:511
msgid ""
"Novice Emacs Lisp programmers often try to use the mark for the wrong "
"purposes.  The mark saves a location for the user's convenience.  An editing "
"command should not alter the mark unless altering the mark is part of the "
"user-level functionality of the command.  (And, in that case, this effect "
"should be documented.)  To remember a location for internal use in the Lisp "
"program, store it in a Lisp variable.  For example:"
msgstr ""

# type: group
#: lispref/markers.texi:517
#, no-wrap
msgid ""
"(let ((beg (point)))\n"
"  (forward-line 1)\n"
"  (delete-region beg (point))).\n"
msgstr ""

# type: deffn
#: lispref/markers.texi:523
#, no-wrap
msgid "Command exchange-point-and-mark"
msgstr ""

# type: deffn
#: lispref/markers.texi:526
#, no-wrap
msgid ""
"This function exchanges the positions of point and the mark.\n"
"It is intended for interactive use.\n"
msgstr ""

# type: defun
#: lispref/markers.texi:529
#, no-wrap
msgid "push-mark &optional position nomsg activate"
msgstr ""

# type: defun
#: lispref/markers.texi:534
msgid ""
"This function sets the current buffer's mark to @var{position}, and pushes a "
"copy of the previous mark onto @code{mark-ring}.  If @var{position} is @code"
"{nil}, then the value of point is used.  @code{push-mark} returns @code{nil}."
msgstr ""

# type: defun
#: lispref/markers.texi:537
msgid ""
"The function @code{push-mark} normally @emph{does not} activate the mark.  "
"To do that, specify @code{t} for the argument @var{activate}."
msgstr ""

# type: defun
#: lispref/markers.texi:540
msgid ""
"A @samp{Mark set} message is displayed unless @var{nomsg} is non-@code{nil}."
msgstr ""

# type: defun
#: lispref/markers.texi:542
#, no-wrap
msgid "pop-mark"
msgstr ""

# type: defun
#: lispref/markers.texi:547
msgid ""
"This function pops off the top element of @code{mark-ring} and makes that "
"mark become the buffer's actual mark.  This does not move point in the "
"buffer, and it does nothing if @code{mark-ring} is empty.  It deactivates "
"the mark."
msgstr ""

# type: defun
#: lispref/markers.texi:549
msgid "The return value is not meaningful."
msgstr ""

# type: defopt
#: lispref/markers.texi:551
#, no-wrap
msgid "transient-mark-mode"
msgstr "transient-mark-mode"

# type: defopt
#: lispref/markers.texi:557
msgid ""
"This variable if non-@code{nil} enables Transient Mark mode, in which every "
"buffer-modifying primitive sets @code{deactivate-mark}.  The consequence of "
"this is that commands that modify the buffer normally make the mark inactive."
msgstr ""

# type: defopt
#: lispref/markers.texi:563
msgid ""
"Lisp programs can set @code{transient-mark-mode} to @code{only} to enable "
"Transient Mark mode for the following command only.  During that following "
"command, the value of @code{transient-mark-mode} is @code{identity}.  If it "
"is still @code{identity} at the end of the command, it changes to @code{nil}."
msgstr ""

# type: defopt
#: lispref/markers.texi:565
#, no-wrap
msgid "mark-even-if-inactive"
msgstr "mark-even-if-inactive"

# type: defopt
#: lispref/markers.texi:571
msgid ""
"If this is non-@code{nil}, Lisp programs and the Emacs user can use the mark "
"even when it is inactive.  This option affects the behavior of Transient "
"Mark mode.  When the option is non-@code{nil}, deactivation of the mark "
"turns off region highlighting, but commands that use the mark behave as if "
"the mark were still active."
msgstr ""

# type: defun
#: lispref/markers.texi:573 lispref/markers.texi:591
#, no-wrap
msgid "deactivate-mark"
msgstr "deactivate-mark"

# type: defvar
#: lispref/markers.texi:579
msgid ""
"If an editor command sets this variable non-@code{nil}, then the editor "
"command loop deactivates the mark after the command returns (if Transient "
"Mark mode is enabled).  All the primitives that change the buffer set @code"
"{deactivate-mark}, to deactivate the mark when the command is finished."
msgstr ""

# type: defvar
#: lispref/markers.texi:584
msgid ""
"To write Lisp code that modifies the buffer without causing deactivation of "
"the mark at the end of the command, bind @code{deactivate-mark} to @code"
"{nil} around the code that does the modification.  For example:"
msgstr ""

# type: example
#: lispref/markers.texi:588
#, no-wrap
msgid ""
"(let (deactivate-mark)\n"
"  (insert \" \"))\n"
msgstr ""

# type: defun
#: lispref/markers.texi:594
msgid ""
"This function deactivates the mark, if Transient Mark mode is enabled.  "
"Otherwise it does nothing."
msgstr ""

# type: defvar
#: lispref/markers.texi:599
msgid ""
"The mark is active when this variable is non-@code{nil}.  This variable is "
"always buffer-local in each buffer."
msgstr ""

# type: defvar
#: lispref/markers.texi:607
msgid ""
"These normal hooks are run, respectively, when the mark becomes active and "
"when it becomes inactive.  The hook @code{activate-mark-hook} is also run at "
"the end of a command if the mark is active and it is possible that the "
"region may have changed."
msgstr ""

# type: defvar
#: lispref/markers.texi:612
msgid ""
"The value of this buffer-local variable is the list of saved former marks of "
"the current buffer, most recent first."
msgstr ""

# type: group
#: lispref/markers.texi:619
#, no-wrap
msgid ""
"mark-ring\n"
"@result{} (#<marker at 11050 in markers.texi>\n"
"    #<marker at 10832 in markers.texi>\n"
"    @dots{})\n"
msgstr ""

# type: defopt
#: lispref/markers.texi:623
#, no-wrap
msgid "mark-ring-max"
msgstr "mark-ring-max"

# type: defopt
#: lispref/markers.texi:627
msgid ""
"The value of this variable is the maximum size of @code{mark-ring}.  If more "
"marks than this are pushed onto the @code{mark-ring}, @code{push-mark} "
"discards an old mark when it adds a new one."
msgstr ""

# type: cindex
#: lispref/markers.texi:631
#, no-wrap
msgid "region (between point and mark)"
msgstr ""

# type: Plain text
#: lispref/markers.texi:637
msgid ""
"The text between point and the mark is known as @dfn{the region}.  Various "
"functions operate on text delimited by point and the mark, but only those "
"functions specifically related to the region itself are described here."
msgstr ""

# type: Plain text
#: lispref/markers.texi:642
msgid ""
"The next two functions signal an error if the mark does not point anywhere.  "
"If Transient Mark mode is enabled and @code{mark-even-if-inactive} is @code"
"{nil}, they also signal an error if the mark is inactive."
msgstr ""

# type: defun
#: lispref/markers.texi:643
#, no-wrap
msgid "region-beginning"
msgstr "region-beginning"

# type: defun
#: lispref/markers.texi:647
msgid ""
"This function returns the position of the beginning of the region (as an "
"integer).  This is the position of either point or the mark, whichever is "
"smaller."
msgstr ""

# type: defun
#: lispref/markers.texi:649
#, no-wrap
msgid "region-end"
msgstr "region-end"

# type: defun
#: lispref/markers.texi:653
msgid ""
"This function returns the position of the end of the region (as an "
"integer).  This is the position of either point or the mark, whichever is "
"larger."
msgstr ""

# type: Plain text
#: lispref/markers.texi:661
msgid ""
"Few programs need to use the @code{region-beginning} and @code{region-end} "
"functions.  A command designed to operate on a region should normally use "
"@code{interactive} with the @samp{r} specification to find the beginning and "
"end of the region.  This lets other Lisp programs specify the bounds "
"explicitly as arguments.  (@xref{Interactive Codes}.)"
msgstr ""

# type: ignore
#: lispref/markers.texi:664
#, no-wrap
msgid "   arch-tag: b1ba2e7a-a0f3-4c5e-875c-7d8e22d73299\n"
msgstr "   arch-tag: b1ba2e7a-a0f3-4c5e-875c-7d8e22d73299\n"

# type: cindex
#: lispref/minibuf.texi:9
#, no-wrap
msgid "arguments, reading"
msgstr ""

# type: cindex
#: lispref/minibuf.texi:10
#, no-wrap
msgid "complex arguments"
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:20
msgid ""
"A @dfn{minibuffer} is a special buffer that Emacs commands use to read "
"arguments more complicated than the single numeric prefix argument.  These "
"arguments include file names, buffer names, and command names (as in @kbd{M-"
"x}).  The minibuffer is displayed on the bottom line of the frame, in the "
"same place as the echo area (@pxref{The Echo Area}), but only while it is in "
"use for reading an argument."
msgstr ""

# type: menu
#: lispref/minibuf.texi:37 lispref/minibuf.texi:39 lispref/vol1.texi:561
#: lispref/vol2.texi:562
#, no-wrap
msgid "Intro to Minibuffers"
msgstr ""

# type: menu
#: lispref/minibuf.texi:37 lispref/vol1.texi:561 lispref/vol2.texi:562
msgid "Basic information about minibuffers."
msgstr ""

# type: menu
#: lispref/minibuf.texi:37 lispref/minibuf.texi:99 lispref/vol1.texi:561
#: lispref/vol2.texi:562
#, no-wrap
msgid "Text from Minibuffer"
msgstr ""

# type: menu
#: lispref/minibuf.texi:37 lispref/vol1.texi:561 lispref/vol2.texi:562
msgid "How to read a straight text string."
msgstr ""

# type: menu
#: lispref/minibuf.texi:37 lispref/minibuf.texi:290 lispref/vol1.texi:561
#: lispref/vol2.texi:562
#, no-wrap
msgid "Object from Minibuffer"
msgstr ""

# type: menu
#: lispref/minibuf.texi:37 lispref/vol1.texi:561 lispref/vol2.texi:562
msgid "How to read a Lisp object or expression."
msgstr ""

# type: section
#: lispref/minibuf.texi:37 lispref/minibuf.texi:393 lispref/minibuf.texi:394
#, no-wrap
msgid "Minibuffer History"
msgstr ""

# type: menu
#: lispref/minibuf.texi:37
msgid "Recording previous minibuffer inputs so the user can reuse them."
msgstr ""

# type: section
#: lispref/minibuf.texi:37 lispref/minibuf.texi:522 lispref/minibuf.texi:523
#, no-wrap
msgid "Initial Input"
msgstr ""

# type: menu
#: lispref/minibuf.texi:37
msgid "Specifying initial contents for the minibuffer."
msgstr ""

# type: menu
#: lispref/minibuf.texi:37 lispref/vol1.texi:561 lispref/vol2.texi:562
msgid "How to invoke and customize completion."
msgstr ""

# type: menu
#: lispref/minibuf.texi:37 lispref/minibuf.texi:1489 lispref/minibuf.texi:1490
#: lispref/vol1.texi:561 lispref/vol2.texi:562
#, no-wrap
msgid "Yes-or-No Queries"
msgstr ""

# type: menu
#: lispref/minibuf.texi:37 lispref/vol1.texi:561 lispref/vol2.texi:562
msgid "Asking a question with a simple answer."
msgstr ""

# type: node
#: lispref/minibuf.texi:37 lispref/minibuf.texi:1632
#, no-wrap
msgid "Multiple Queries"
msgstr ""

# type: menu
#: lispref/minibuf.texi:37
msgid "Asking a series of similar questions."
msgstr ""

# type: section
#: lispref/minibuf.texi:37 lispref/minibuf.texi:1726 lispref/minibuf.texi:1727
#, no-wrap
msgid "Reading a Password"
msgstr ""

# type: menu
#: lispref/minibuf.texi:37
msgid "Reading a password from the terminal."
msgstr ""

# type: section
#: lispref/minibuf.texi:37 lispref/minibuf.texi:1748 lispref/minibuf.texi:1749
#, no-wrap
msgid "Minibuffer Commands"
msgstr ""

# type: menu
#: lispref/minibuf.texi:37
msgid "Commands used as key bindings in minibuffers."
msgstr ""

# type: section
#: lispref/minibuf.texi:37 lispref/minibuf.texi:1833 lispref/minibuf.texi:1834
#, no-wrap
msgid "Minibuffer Contents"
msgstr ""

# type: menu
#: lispref/minibuf.texi:37
msgid "How such commands access the minibuffer text."
msgstr ""

# type: section
#: lispref/minibuf.texi:37 lispref/minibuf.texi:1787 lispref/minibuf.texi:1788
#, no-wrap
msgid "Minibuffer Windows"
msgstr ""

# type: menu
#: lispref/minibuf.texi:37
msgid "Operating on the special minibuffer windows."
msgstr ""

# type: node
#: lispref/minibuf.texi:37 lispref/minibuf.texi:1878
#, no-wrap
msgid "Recursive Mini"
msgstr ""

# type: menu
#: lispref/minibuf.texi:37
msgid "Whether recursive entry to minibuffer is allowed."
msgstr ""

# type: menu
#: lispref/minibuf.texi:37 lispref/minibuf.texi:1912 lispref/vol1.texi:561
#: lispref/vol2.texi:562
#, no-wrap
msgid "Minibuffer Misc"
msgstr ""

# type: menu
#: lispref/minibuf.texi:37 lispref/vol1.texi:561 lispref/vol2.texi:562
msgid "Various customization hooks and variables."
msgstr ""

# type: section
#: lispref/minibuf.texi:40
#, no-wrap
msgid "Introduction to Minibuffers"
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:51
msgid ""
"In most ways, a minibuffer is a normal Emacs buffer.  Most operations @emph"
"{within} a buffer, such as editing commands, work normally in a minibuffer.  "
"However, many operations for managing buffers do not apply to minibuffers.  "
"The name of a minibuffer always has the form @w{@samp{ *Minibuf-@var{number}"
"*}}, and it cannot be changed.  Minibuffers are displayed only in special "
"windows used only for minibuffers; these windows always appear at the bottom "
"of a frame.  (Sometimes frames have no minibuffer window, and sometimes a "
"special kind of frame contains nothing but a minibuffer window; see @ref"
"{Minibuffers and Frames}.)"
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:62
msgid ""
"The text in the minibuffer always starts with the @dfn{prompt string}, the "
"text that was specified by the program that is using the minibuffer to tell "
"the user what sort of input to type.  This text is marked read-only so you "
"won't accidentally delete or change it.  It is also marked as a field (@pxref"
"{Fields}), so that certain motion functions, including @code{beginning-of-"
"line}, @code{forward-word}, @code{forward-sentence}, and @code{forward-"
"paragraph}, stop at the boundary between the prompt and the actual text.  "
"(In older Emacs versions, the prompt was displayed using a special mechanism "
"and was not part of the buffer contents.)"
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:71
msgid ""
"The minibuffer's window is normally a single line; it grows automatically if "
"necessary if the contents require more space.  You can explicitly resize it "
"temporarily with the window sizing commands; it reverts to its normal size "
"when the minibuffer is exited.  You can resize it permanently by using the "
"window sizing commands in the frame's other window, when the minibuffer is "
"not active.  If the frame contains just a minibuffer, you can change the "
"minibuffer's size by changing the frame's size."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:76
msgid ""
"Use of the minibuffer reads input events, and that alters the values of "
"variables such as @code{this-command} and @code{last-command} (@pxref"
"{Command Loop Info}).  Your program should bind them around the code that "
"uses the minibuffer, if you do not want that to change them."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:87
msgid ""
"If a command uses a minibuffer while there is an active minibuffer, this is "
"called a @dfn{recursive minibuffer}.  The first minibuffer is named @w{@samp"
"{ *Minibuf-0*}}.  Recursive minibuffers are named by incrementing the number "
"at the end of the name.  (The names begin with a space so that they won't "
"show up in normal buffer lists.)  Of several recursive minibuffers, the "
"innermost (or most recently entered) is the active minibuffer.  We usually "
"call this ``the'' minibuffer.  You can permit or forbid recursive "
"minibuffers by setting the variable @code{enable-recursive-minibuffers} or "
"by putting properties of that name on command symbols (@pxref{Recursive "
"Mini})."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:94
msgid ""
"Like other buffers, a minibuffer uses a local keymap (@pxref{Keymaps}) to "
"specify special key bindings.  The function that invokes the minibuffer also "
"sets up its local map according to the job to be done.  @xref{Text from "
"Minibuffer}, for the non-completion minibuffer local maps.  @xref{Completion "
"Commands}, for the minibuffer local maps for completion."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:98
msgid ""
"When Emacs is running in batch mode, any request to read from the minibuffer "
"actually reads a line from the standard input descriptor that was supplied "
"when Emacs was started."
msgstr ""

# type: section
#: lispref/minibuf.texi:100
#, no-wrap
msgid "Reading Text Strings with the Minibuffer"
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:107
msgid ""
"Most often, the minibuffer is used to read text as a string.  It can also be "
"used to read a Lisp object in textual form.  The most basic primitive for "
"minibuffer input is @code{read-from-minibuffer}; it can do either one.  "
"There are also specialized commands for reading commands, variables, file "
"names, etc. (@pxref{Completion})."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:112
msgid ""
"In most cases, you should not call minibuffer input functions in the middle "
"of a Lisp function.  Instead, do all minibuffer input as part of reading the "
"arguments for a command, in the @code{interactive} specification.  @xref"
"{Defining Commands}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:113
#, no-wrap
msgid "read-from-minibuffer prompt-string &optional initial-contents keymap read hist default inherit-input-method"
msgstr ""

# type: defun
#: lispref/minibuf.texi:119
msgid ""
"This function is the most general way to get input through the minibuffer.  "
"By default, it accepts arbitrary text and returns it as a string; however, "
"if @var{read} is non-@code{nil}, then it uses @code{read} to convert the "
"text into a Lisp object (@pxref{Input Functions})."
msgstr ""

# type: defun
#: lispref/minibuf.texi:123
msgid ""
"The first thing this function does is to activate a minibuffer and display "
"it with @var{prompt-string} as the prompt.  This value must be a string.  "
"Then the user can edit text in the minibuffer."
msgstr ""

# type: defun
#: lispref/minibuf.texi:130
msgid ""
"When the user types a command to exit the minibuffer, @code{read-from-"
"minibuffer} constructs the return value from the text in the minibuffer.  "
"Normally it returns a string containing that text.  However, if @var{read} "
"is non-@code{nil}, @code{read-from-minibuffer} reads the text and returns "
"the resulting Lisp object, unevaluated.  (@xref{Input Functions}, for "
"information about reading.)"
msgstr ""

# type: defun
#: lispref/minibuf.texi:143
msgid ""
"The argument @var{default} specifies a default value to make available "
"through the history commands.  It should be a string, or @code{nil}.  If non-"
"@code{nil}, the user can access it using @code{next-history-element}, "
"usually bound in the minibuffer to @kbd{M-n}.  If @var{read} is non-@code"
"{nil}, then @var{default} is also used as the input to @code{read}, if the "
"user enters empty input.  (If @var{read} is non-@code{nil} and @var{default} "
"is @code{nil}, empty input results in an @code{end-of-file} error.)  "
"However, in the usual case (where @var{read} is @code{nil}), @code{read-from-"
"minibuffer} ignores @var{default} when the user enters empty input and "
"returns an empty string, @code{\"\"}.  In this respect, it is different from "
"all the other minibuffer input functions in this chapter."
msgstr ""

# type: defun
#: lispref/minibuf.texi:149
msgid ""
"If @var{keymap} is non-@code{nil}, that keymap is the local keymap to use in "
"the minibuffer.  If @var{keymap} is omitted or @code{nil}, the value of @code"
"{minibuffer-local-map} is used as the keymap.  Specifying a keymap is the "
"most important way to customize the minibuffer for various applications such "
"as completion."
msgstr ""

# type: defun
#: lispref/minibuf.texi:153
msgid ""
"The argument @var{hist} specifies which history list variable to use for "
"saving the input and for history commands used in the minibuffer.  It "
"defaults to @code{minibuffer-history}.  @xref{Minibuffer History}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:158
msgid ""
"If the variable @code{minibuffer-allow-text-properties} is non-@code{nil}, "
"then the string which is returned includes whatever text properties were "
"present in the minibuffer.  Otherwise all the text properties are stripped "
"when the value is returned."
msgstr ""

# type: defun
#: lispref/minibuf.texi:164 lispref/minibuf.texi:867
msgid ""
"If the argument @var{inherit-input-method} is non-@code{nil}, then the "
"minibuffer inherits the current input method (@pxref{Input Methods}) and the "
"setting of @code{enable-multibyte-characters} (@pxref{Text Representations}) "
"from whichever buffer was current before entering the minibuffer."
msgstr ""

# type: defun
#: lispref/minibuf.texi:168
msgid ""
"Use of @var{initial-contents} is mostly deprecated; we recommend using a non-"
"@code{nil} value only in conjunction with specifying a cons cell for @var"
"{hist}.  @xref{Initial Input}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:170
#, no-wrap
msgid "read-string prompt &optional initial history default inherit-input-method"
msgstr ""

# type: defun
#: lispref/minibuf.texi:175
msgid ""
"This function reads a string from the minibuffer and returns it.  The "
"arguments @var{prompt}, @var{initial}, @var{history} and @var{inherit-input-"
"method} are used as in @code{read-from-minibuffer}.  The keymap used is @code"
"{minibuffer-local-map}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:181
msgid ""
"The optional argument @var{default} is used as in @code{read-from-"
"minibuffer}, except that, if non-@code{nil}, it also specifies a default "
"value to return if the user enters null input.  As in @code{read-from-"
"minibuffer} it should be a string, or @code{nil}, which is equivalent to an "
"empty string."
msgstr ""

# type: defun
#: lispref/minibuf.texi:184
msgid ""
"This function is a simplified interface to the @code{read-from-minibuffer} "
"function:"
msgstr ""

# type: group
#: lispref/minibuf.texi:195
#, no-wrap
msgid ""
"(read-string @var{prompt} @var{initial} @var{history} @var{default} @var{inherit})\n"
"@equiv{}\n"
"(let ((value\n"
"       (read-from-minibuffer @var{prompt} @var{initial} nil nil\n"
"                             @var{history} @var{default} @var{inherit})))\n"
"  (if (and (equal value \"\") @var{default})\n"
"      @var{default}\n"
"    value))\n"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:199
#, no-wrap
msgid "minibuffer-allow-text-properties"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:208
msgid ""
"If this variable is @code{nil}, then @code{read-from-minibuffer} strips all "
"text properties from the minibuffer input before returning it.  This "
"variable also affects @code{read-string}.  However, @code{read-no-blanks-"
"input} (see below), as well as @code{read-minibuffer} and related functions "
"(@pxref{Object from Minibuffer,, Reading Lisp Objects With the Minibuffer}), "
"and all functions that do minibuffer input with completion, discard text "
"properties unconditionally, regardless of the value of this variable."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:210
#, no-wrap
msgid "minibuffer-local-map"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:216
msgid ""
"This @anchor{Definition of minibuffer-local-map} is the default local keymap "
"for reading from the minibuffer.  By default, it makes the following "
"bindings:"
msgstr ""

# type: code{#1}
#: lispref/minibuf.texi:220 lispref/minibuf.texi:223 lispref/minibuf.texi:279
#: lispref/minibuf.texi:283
msgid "exit-minibuffer"
msgstr ""

# type: key{#1}
#: lispref/minibuf.texi:221 lispref/minibuf.texi:1041
#, no-wrap
msgid "RET"
msgstr ""

# type: code{#1}
#: lispref/minibuf.texi:226
msgid "abort-recursive-edit"
msgstr ""

# type: kbd{#1}
#: lispref/minibuf.texi:227
#, no-wrap
msgid "M-n"
msgstr ""

# type: key{#1}
#: lispref/minibuf.texi:228
#, no-wrap
msgid "DOWN"
msgstr ""

# type: code{#1}
#: lispref/minibuf.texi:230
msgid "next-history-element"
msgstr ""

# type: kbd{#1}
#: lispref/minibuf.texi:231
#, no-wrap
msgid "M-p"
msgstr ""

# type: key{#1}
#: lispref/minibuf.texi:232
#, no-wrap
msgid "UP"
msgstr ""

# type: code{#1}
#: lispref/minibuf.texi:234
msgid "previous-history-element"
msgstr ""

# type: kbd{#1}
#: lispref/minibuf.texi:235
#, no-wrap
msgid "M-s"
msgstr ""

# type: code{#1}
#: lispref/minibuf.texi:237
msgid "next-matching-history-element"
msgstr ""

# type: kbd{#1}
#: lispref/minibuf.texi:238
#, no-wrap
msgid "M-r"
msgstr ""

# type: code{#1}
#: lispref/minibuf.texi:240
msgid "previous-matching-history-element"
msgstr ""

# type: defun
#: lispref/minibuf.texi:245
#, no-wrap
msgid "read-no-blanks-input prompt &optional initial inherit-input-method"
msgstr ""

# type: defun
#: lispref/minibuf.texi:250
msgid ""
"This function reads a string from the minibuffer, but does not allow "
"whitespace characters as part of the input: instead, those characters "
"terminate the input.  The arguments @var{prompt}, @var{initial}, and @var"
"{inherit-input-method} are used as in @code{read-from-minibuffer}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:256
msgid ""
"This is a simplified interface to the @code{read-from-minibuffer} function, "
"and passes the value of the @code{minibuffer-local-ns-map} keymap as the @var"
"{keymap} argument for that function.  Since the keymap @code{minibuffer-"
"local-ns-map} does not rebind @kbd{C-q}, it @emph{is} possible to put a "
"space into the string, by quoting it."
msgstr ""

# type: defun
#: lispref/minibuf.texi:259
msgid ""
"This function discards text properties, regardless of the value of @code"
"{minibuffer-allow-text-properties}."
msgstr ""

# type: group
#: lispref/minibuf.texi:266
#, no-wrap
msgid ""
"(read-no-blanks-input @var{prompt} @var{initial})\n"
"@equiv{}\n"
"(let (minibuffer-allow-text-properties)\n"
"  (read-from-minibuffer @var{prompt} @var{initial} minibuffer-local-ns-map))\n"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:270
#, no-wrap
msgid "minibuffer-local-ns-map"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:274
msgid ""
"This built-in variable is the keymap used as the minibuffer local keymap in "
"the function @code{read-no-blanks-input}.  By default, it makes the "
"following bindings, in addition to those of @code{minibuffer-local-map}:"
msgstr ""

# type: cindex
#: lispref/minibuf.texi:277
#, no-wrap
msgid "@key{SPC} in minibuffer"
msgstr ""

# type: key{#1}
#: lispref/minibuf.texi:280 lispref/minibuf.texi:1012
#: lispref/minibuf.texi:1035
#, no-wrap
msgid "TAB"
msgstr ""

# type: cindex
#: lispref/minibuf.texi:281
#, no-wrap
msgid "@key{TAB} in minibuffer"
msgstr ""

# type: cindex
#: lispref/minibuf.texi:285
#, no-wrap
msgid "@kbd{?} in minibuffer"
msgstr ""

# type: code{#1}
#: lispref/minibuf.texi:287
msgid "self-insert-and-exit"
msgstr ""

# type: section
#: lispref/minibuf.texi:291
#, no-wrap
msgid "Reading Lisp Objects with the Minibuffer"
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:295
msgid ""
"This section describes functions for reading Lisp objects with the "
"minibuffer."
msgstr ""

# type: defun
#: lispref/minibuf.texi:296
#, no-wrap
msgid "read-minibuffer prompt &optional initial"
msgstr ""

# type: defun
#: lispref/minibuf.texi:300
msgid ""
"This function reads a Lisp object using the minibuffer, and returns it "
"without evaluating it.  The arguments @var{prompt} and @var{initial} are "
"used as in @code{read-from-minibuffer}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:303
msgid ""
"This is a simplified interface to the @code{read-from-minibuffer} function:"
msgstr ""

# type: group
#: lispref/minibuf.texi:310
#, no-wrap
msgid ""
"(read-minibuffer @var{prompt} @var{initial})\n"
"@equiv{}\n"
"(let (minibuffer-allow-text-properties)\n"
"  (read-from-minibuffer @var{prompt} @var{initial} nil t))\n"
msgstr ""

# type: defun
#: lispref/minibuf.texi:315
msgid ""
"Here is an example in which we supply the string @code{\"(testing)\"} as "
"initial input:"
msgstr ""

# type: group
#: lispref/minibuf.texi:320
#, no-wrap
msgid ""
"(read-minibuffer\n"
" \"Enter an expression: \" (format \"%s\" '(testing)))\n"
"\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:322
#, no-wrap
msgid ";; @r{Here is how the minibuffer is displayed:}\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:328
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"Enter an expression: (testing)@point{}\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

# type: defun
#: lispref/minibuf.texi:334
msgid ""
"The user can type @key{RET} immediately to use the initial input as a "
"default, or can edit the input."
msgstr ""

# type: defun
#: lispref/minibuf.texi:336
#, no-wrap
msgid "eval-minibuffer prompt &optional initial"
msgstr ""

# type: defun
#: lispref/minibuf.texi:340
msgid ""
"This function reads a Lisp expression using the minibuffer, evaluates it, "
"then returns the result.  The arguments @var{prompt} and @var{initial} are "
"used as in @code{read-from-minibuffer}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:343
msgid ""
"This function simply evaluates the result of a call to @code{read-"
"minibuffer}:"
msgstr ""

# type: group
#: lispref/minibuf.texi:349
#, no-wrap
msgid ""
"(eval-minibuffer @var{prompt} @var{initial})\n"
"@equiv{}\n"
"(eval (read-minibuffer @var{prompt} @var{initial}))\n"
msgstr ""

# type: defun
#: lispref/minibuf.texi:353
#, no-wrap
msgid "edit-and-eval-command prompt form"
msgstr ""

# type: defun
#: lispref/minibuf.texi:361
msgid ""
"This function reads a Lisp expression in the minibuffer, and then evaluates "
"it.  The difference between this command and @code{eval-minibuffer} is that "
"here the initial @var{form} is not optional and it is treated as a Lisp "
"object to be converted to printed representation rather than as a string of "
"text.  It is printed with @code{prin1}, so if it is a string, double-quote "
"characters (@samp{\"})  appear in the initial text.  @xref{Output Functions}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:368
msgid ""
"The first thing @code{edit-and-eval-command} does is to activate the "
"minibuffer with @var{prompt} as the prompt.  Then it inserts the printed "
"representation of @var{form} in the minibuffer, and lets the user edit it.  "
"When the user exits the minibuffer, the edited text is read with @code{read} "
"and then evaluated.  The resulting value becomes the value of @code{edit-and-"
"eval-command}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:371
msgid ""
"In the following example, we offer the user an expression with initial text "
"which is a valid form already:"
msgstr ""

# type: group
#: lispref/minibuf.texi:375
#, no-wrap
msgid ""
"(edit-and-eval-command \"Please edit: \" '(forward-word 1))\n"
"\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:378 lispref/minibuf.texi:1314
#, no-wrap
msgid ""
";; @r{After evaluation of the preceding expression,}\n"
";;   @r{the following appears in the minibuffer:}\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:384
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"Please edit: (forward-word 1)@point{}\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

# type: defun
#: lispref/minibuf.texi:391
msgid ""
"Typing @key{RET} right away would exit the minibuffer and evaluate the "
"expression, thus moving point forward one word.  @code{edit-and-eval-"
"command} returns @code{nil} in this example."
msgstr ""

# type: cindex
#: lispref/minibuf.texi:395
#, no-wrap
msgid "minibuffer history"
msgstr ""

# type: cindex
#: lispref/minibuf.texi:396
#, no-wrap
msgid "history list"
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:402
msgid ""
"A @dfn{minibuffer history list} records previous minibuffer inputs so the "
"user can reuse them conveniently.  A history list is actually a symbol, not "
"a list; it is a variable whose value is a list of strings (previous inputs), "
"most recent first."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:406
msgid ""
"There are many separate history lists, used for different kinds of inputs.  "
"It's the Lisp programmer's job to specify the right history list for each "
"use of the minibuffer."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:410
msgid ""
"You specify the history list with the optional @var{hist} argument to either "
"@code{read-from-minibuffer} or @code{completing-read}.  Here are the "
"possible values for it:"
msgstr ""

# type: table
#: lispref/minibuf.texi:414
msgid "Use @var{variable} (a symbol) as the history list."
msgstr ""

# type: item
#: lispref/minibuf.texi:415
#, no-wrap
msgid "(@var{variable} . @var{startpos})"
msgstr ""

# type: table
#: lispref/minibuf.texi:418
msgid ""
"Use @var{variable} (a symbol) as the history list, and assume that the "
"initial history position is @var{startpos} (a nonnegative integer)."
msgstr ""

# type: table
#: lispref/minibuf.texi:425
msgid ""
"Specifying 0 for @var{startpos} is equivalent to just specifying the symbol "
"@var{variable}.  @code{previous-history-element} will display the most "
"recent element of the history list in the minibuffer.  If you specify a "
"positive @var{startpos}, the minibuffer history functions behave as if @code"
"{(elt @var{variable} (1- @var{STARTPOS}))} were the history element "
"currently shown in the minibuffer."
msgstr ""

# type: table
#: lispref/minibuf.texi:429
msgid ""
"For consistency, you should also specify that element of the history as the "
"initial minibuffer contents, using the @var{initial} argument to the "
"minibuffer input function (@pxref{Initial Input})."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:435
msgid ""
"If you don't specify @var{hist}, then the default history list @code"
"{minibuffer-history} is used.  For other standard history lists, see below.  "
"You can also create your own history list variable; just initialize it to "
"@code{nil} before the first use."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:442
msgid ""
"Both @code{read-from-minibuffer} and @code{completing-read} add new elements "
"to the history list automatically, and provide commands to allow the user to "
"reuse items on the list.  The only thing your program needs to do to use a "
"history list is to initialize it and to pass its name to the input functions "
"when you wish.  But it is safe to modify the list by hand when the "
"minibuffer input functions are not using it."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:450
msgid ""
"Emacs functions that add a new element to a history list can also delete old "
"elements if the list gets too long.  The variable @code{history-length} "
"specifies the maximum length for most history lists.  To specify a different "
"maximum length for a particular history list, put the length in the @code"
"{history-length} property of the history list symbol.  The variable @code"
"{history-delete-duplicates} specifies whether to delete duplicates in "
"history."
msgstr ""

# type: defun
#: lispref/minibuf.texi:451
#, no-wrap
msgid "add-to-history history-var newelt &optional maxelt keep-all"
msgstr ""

# type: defun
#: lispref/minibuf.texi:458
msgid ""
"This function adds a new element @var{newelt}, if it isn't the empty string, "
"to the history list stored in the variable @var{history-var}, and returns "
"the updated history list.  It limits the list length to the value of @var"
"{maxelt} (if non-@code{nil}) or @code{history-length} (described below).  "
"The possible values of @var{maxelt} have the same meaning as the values of "
"@code{history-length}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:463
msgid ""
"Normally, @code{add-to-history} removes duplicate members from the history "
"list if @code{history-delete-duplicates} is non-@code{nil}.  However, if @var"
"{keep-all} is non-@code{nil}, that says not to remove duplicates, and to add "
"@var{newelt} to the list even if it is empty."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:465
#, no-wrap
msgid "history-add-new-input"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:471
msgid ""
"If the value of this variable is @code{nil}, standard functions that read "
"from the minibuffer don't add new elements to the history list.  This lets "
"Lisp programs explicitly manage input history by using @code{add-to-"
"history}.  By default, @code{history-add-new-input} is set to a non-@code"
"{nil} value."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:473
#, no-wrap
msgid "history-length"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:480
msgid ""
"The value of this variable specifies the maximum length for all history "
"lists that don't specify their own maximum lengths.  If the value is @code"
"{t}, that means there no maximum (don't delete old elements).  The value of "
"@code{history-length} property of the history list variable's symbol, if "
"set, overrides this variable for that particular history list."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:482
#, no-wrap
msgid "history-delete-duplicates"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:485
msgid ""
"If the value of this variable is @code{t}, that means when adding a new "
"history element, all previous identical elements are deleted."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:488
msgid "Here are some of the standard minibuffer history list variables:"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:489
#, no-wrap
msgid "minibuffer-history"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:491
msgid "The default history list for minibuffer history input."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:493
#, no-wrap
msgid "query-replace-history"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:496
msgid ""
"A history list for arguments to @code{query-replace} (and similar arguments "
"to other commands)."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:498
#, no-wrap
msgid "file-name-history"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:500
msgid "A history list for file-name arguments."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:502
#, no-wrap
msgid "buffer-name-history"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:504
msgid "A history list for buffer-name arguments."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:506
#, no-wrap
msgid "regexp-history"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:508
msgid "A history list for regular expression arguments."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:510
#, no-wrap
msgid "extended-command-history"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:512
msgid "A history list for arguments that are names of extended commands."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:514
#, no-wrap
msgid "shell-command-history"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:516
msgid "A history list for arguments that are shell commands."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:518
#, no-wrap
msgid "read-expression-history"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:520
msgid "A history list for arguments that are Lisp expressions to evaluate."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:529
msgid ""
"Several of the functions for minibuffer input have an argument called @var"
"{initial} or @var{initial-contents}.  This is a mostly-deprecated feature "
"for specifying that the minibuffer should start out with certain text, "
"instead of empty as usual."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:535
msgid ""
"If @var{initial} is a string, the minibuffer starts out containing the text "
"of the string, with point at the end, when the user starts to edit the "
"text.  If the user simply types @key{RET} to exit the minibuffer, it will "
"use the initial input string to determine the value to return."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:540
msgid ""
"@strong{We discourage use of a non-@code{nil} value for @var{initial}}, "
"because initial input is an intrusive interface.  History lists and default "
"values provide a much more convenient method to offer useful default inputs "
"to the user."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:544
msgid ""
"There is just one situation where you should specify a string for an @var"
"{initial} argument.  This is when you specify a cons cell for the @var{hist} "
"or @var{history} argument.  @xref{Minibuffer History}."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:548
msgid ""
"@var{initial} can also be a cons cell of the form @code{(@var{string} . @var"
"{position})}.  This means to insert @var{string} in the minibuffer but put "
"point at @var{position} within the string's text."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:557
msgid ""
"As a historical accident, @var{position} was implemented inconsistently in "
"different functions.  In @code{completing-read}, @var{position}'s value is "
"interpreted as origin-zero; that is, a value of 0 means the beginning of the "
"string, 1 means after the first character, etc.  In @code{read-minibuffer}, "
"and the other non-completion minibuffer input functions that support this "
"argument, 1 means the beginning of the string 2 means after the first "
"character, etc."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:560
msgid ""
"Use of a cons cell as the value for @var{initial} arguments is deprecated in "
"user code."
msgstr ""

# type: cindex
#: lispref/minibuf.texi:563
#, no-wrap
msgid "completion"
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:573
msgid ""
"@dfn{Completion} is a feature that fills in the rest of a name starting from "
"an abbreviation for it.  Completion works by comparing the user's input "
"against a list of valid names and determining how much of the name is "
"determined uniquely by what the user has typed.  For example, when you type "
"@kbd{C-x b} (@code{switch-to-buffer}) and then type the first few letters of "
"the name of the buffer to which you wish to switch, and then type @key{TAB} "
"(@code{minibuffer-complete}), Emacs extends the name as far as it can."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:577
msgid ""
"Standard Emacs commands offer completion for names of symbols, files, "
"buffers, and processes; with the functions in this section, you can "
"implement completion for other kinds of names."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:581
msgid ""
"The @code{try-completion} function is the basic primitive for completion: it "
"returns the longest determined completion of a given initial string, with a "
"given set of strings to match against."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:588
msgid ""
"The function @code{completing-read} provides a higher-level interface for "
"completion.  A call to @code{completing-read} specifies how to determine the "
"list of valid names.  The function then activates the minibuffer with a "
"local keymap that binds a few keys to commands useful for completion.  Other "
"functions provide convenient simple interfaces for reading certain kinds of "
"names with completion."
msgstr ""

# type: menu
#: lispref/minibuf.texi:598 lispref/minibuf.texi:600 lispref/vol1.texi:572
#: lispref/vol2.texi:573
#, no-wrap
msgid "Basic Completion"
msgstr ""

# type: menu
#: lispref/minibuf.texi:598 lispref/vol1.texi:572 lispref/vol2.texi:573
msgid "Low-level functions for completing strings."
msgstr ""

# type: menu
#: lispref/minibuf.texi:598 lispref/vol1.texi:572 lispref/vol2.texi:573
msgid "(These are too low level to use the minibuffer.)"
msgstr ""

# type: menu
#: lispref/minibuf.texi:598 lispref/minibuf.texi:813 lispref/vol1.texi:572
#: lispref/vol2.texi:573
#, no-wrap
msgid "Minibuffer Completion"
msgstr ""

# type: menu
#: lispref/minibuf.texi:598 lispref/vol1.texi:572 lispref/vol2.texi:573
msgid "Invoking the minibuffer with completion."
msgstr ""

# type: menu
#: lispref/minibuf.texi:598 lispref/minibuf.texi:903 lispref/vol1.texi:572
#: lispref/vol2.texi:573
#, no-wrap
msgid "Completion Commands"
msgstr ""

# type: menu
#: lispref/minibuf.texi:598 lispref/vol1.texi:572 lispref/vol2.texi:573
msgid "Minibuffer commands that do completion."
msgstr ""

# type: menu
#: lispref/minibuf.texi:598 lispref/minibuf.texi:1061 lispref/vol1.texi:572
#: lispref/vol2.texi:573
#, no-wrap
msgid "High-Level Completion"
msgstr ""

# type: menu
#: lispref/minibuf.texi:598 lispref/vol1.texi:572 lispref/vol2.texi:573
msgid "Convenient special cases of completion"
msgstr ""

# type: menu
#: lispref/minibuf.texi:598 lispref/vol1.texi:572 lispref/vol2.texi:573
msgid "(reading buffer name, file name, etc.)"
msgstr ""

# type: menu
#: lispref/minibuf.texi:598 lispref/minibuf.texi:1225
#: lispref/minibuf.texi:1226 lispref/vol1.texi:572 lispref/vol2.texi:573
#, no-wrap
msgid "Reading File Names"
msgstr ""

# type: menu
#: lispref/minibuf.texi:598 lispref/vol1.texi:572 lispref/vol2.texi:573
msgid "Using completion to read file names."
msgstr ""

# type: menu
#: lispref/minibuf.texi:598 lispref/minibuf.texi:1415
#: lispref/minibuf.texi:1416 lispref/vol1.texi:572 lispref/vol2.texi:573
#, no-wrap
msgid "Programmed Completion"
msgstr ""

# type: menu
#: lispref/minibuf.texi:598
msgid "Writing your own completion-function."
msgstr ""

# type: subsection
#: lispref/minibuf.texi:601
#, no-wrap
msgid "Basic Completion Functions"
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:608
msgid ""
"The completion functions @code{try-completion}, @code{all-completions} and "
"@code{test-completion} have nothing in themselves to do with minibuffers.  "
"We describe them in this chapter so as to keep them near the higher-level "
"completion features that do use the minibuffer."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:612
msgid ""
"If you store a completion alist in a variable, you should mark the variable "
"as ``risky'' with a non-@code{nil} @code{risky-local-variable} property."
msgstr ""

# type: defun
#: lispref/minibuf.texi:613
#, no-wrap
msgid "try-completion string collection &optional predicate"
msgstr ""

# type: defun
#: lispref/minibuf.texi:619
msgid ""
"This function returns the longest common substring of all possible "
"completions of @var{string} in @var{collection}.  The value of @var"
"{collection} must be a list of strings or symbols, an alist, an obarray, a "
"hash table, or a function that implements a virtual set of strings (see "
"below)."
msgstr ""

# type: defun
#: lispref/minibuf.texi:628
msgid ""
"Completion compares @var{string} against each of the permissible completions "
"specified by @var{collection}; if the beginning of the permissible "
"completion equals @var{string}, it matches.  If no permissible completions "
"match, @code{try-completion} returns @code{nil}.  If only one permissible "
"completion matches, and the match is exact, then @code{try-completion} "
"returns @code{t}.  Otherwise, the value is the longest initial sequence "
"common to all the permissible completions that match."
msgstr ""

# type: defun
#: lispref/minibuf.texi:637
msgid ""
"If @var{collection} is an alist (@pxref{Association Lists}), the permissible "
"completions are the elements of the alist that are either strings, symbols, "
"or conses whose @sc{car} is a string or symbol.  Symbols are converted to "
"strings using @code{symbol-name}.  Other elements of the alist are ignored. "
"(Remember that in Emacs Lisp, the elements of alists do not @emph{have} to "
"be conses.)  In particular, a list of strings or symbols is allowed, even "
"though we usually do not think of such lists as alists."
msgstr ""

# type: cindex
#: lispref/minibuf.texi:638
#, no-wrap
msgid "obarray in completion"
msgstr ""

# type: defun
#: lispref/minibuf.texi:643
msgid ""
"If @var{collection} is an obarray (@pxref{Creating Symbols}), the names of "
"all symbols in the obarray form the set of permissible completions.  The "
"global variable @code{obarray} holds an obarray containing the names of all "
"interned Lisp symbols."
msgstr ""

# type: defun
#: lispref/minibuf.texi:647
msgid ""
"Note that the only valid way to make a new obarray is to create it empty and "
"then add symbols to it one by one using @code{intern}.  Also, you cannot "
"intern a given symbol in more than one obarray."
msgstr ""

# type: defun
#: lispref/minibuf.texi:650
msgid ""
"If @var{collection} is a hash table, then the keys that are strings are the "
"possible completions.  Other keys are ignored."
msgstr ""

# type: defun
#: lispref/minibuf.texi:658
msgid ""
"You can also use a symbol that is a function as @var{collection}.  Then the "
"function is solely responsible for performing completion; @code{try-"
"completion} returns whatever this function returns.  The function is called "
"with three arguments: @var{string}, @var{predicate} and @code{nil}.  (The "
"reason for the third argument is so that the same function can be used in "
"@code{all-completions} and do the appropriate thing in either case.)  @xref"
"{Programmed Completion}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:669
msgid ""
"If the argument @var{predicate} is non-@code{nil}, then it must be a "
"function of one argument, unless @var{collection} is a hash table, in which "
"case it should be a function of two arguments.  It is used to test each "
"possible match, and the match is accepted only if @var{predicate} returns "
"non-@code{nil}.  The argument given to @var{predicate} is either a string or "
"a cons cell (the @sc{car} of which is a string) from the alist, or a symbol "
"(@emph{not} a symbol name) from the obarray.  If @var{collection} is a hash "
"table, @var{predicate} is called with two arguments, the string key and the "
"associated value."
msgstr ""

# type: defun
#: lispref/minibuf.texi:674
msgid ""
"In addition, to be acceptable, a completion must also match all the regular "
"expressions in @code{completion-regexp-list}.  (Unless @var{collection} is a "
"function, in which case that function has to handle @code{completion-regexp-"
"list} itself.)"
msgstr ""

# type: defun
#: lispref/minibuf.texi:680
msgid ""
"In the first of the following examples, the string @samp{foo} is matched by "
"three of the alist @sc{car}s.  All of the matches begin with the characters "
"@samp{fooba}, so that is the result.  In the second example, there is only "
"one possible match, and it is exact, so the value is @code{t}."
msgstr ""

# type: group
#: lispref/minibuf.texi:687
#, no-wrap
msgid ""
"(try-completion\n"
" \"foo\"\n"
" '((\"foobar1\" 1) (\"barfoo\" 2) (\"foobaz\" 3) (\"foobar2\" 4)))\n"
"     @result{} \"fooba\"\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:692
#, no-wrap
msgid ""
"(try-completion \"foo\" '((\"barfoo\" 2) (\"foo\" 3)))\n"
"     @result{} t\n"
msgstr ""

# type: defun
#: lispref/minibuf.texi:699
msgid ""
"In the following example, numerous symbols begin with the characters @samp"
"{forw}, and all of them begin with the word @samp{forward}.  In most of the "
"symbols, this is followed with a @samp{-}, but not in all, so no more than "
"@samp{forward} can be completed."
msgstr ""

# type: group
#: lispref/minibuf.texi:704
#, no-wrap
msgid ""
"(try-completion \"forw\" obarray)\n"
"     @result{} \"forward\"\n"
msgstr ""

# type: defun
#: lispref/minibuf.texi:710
msgid ""
"Finally, in the following example, only two of the three possible matches "
"pass the predicate @code{test} (the string @samp{foobaz} is too short).  "
"Both of those begin with the string @samp{foobar}."
msgstr ""

# type: group
#: lispref/minibuf.texi:716 lispref/minibuf.texi:749
#, no-wrap
msgid ""
"(defun test (s)\n"
"  (> (length (car s)) 6))\n"
"     @result{} test\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:723
#, no-wrap
msgid ""
"(try-completion\n"
" \"foo\"\n"
" '((\"foobar1\" 1) (\"barfoo\" 2) (\"foobaz\" 3) (\"foobar2\" 4))\n"
" 'test)\n"
"     @result{} \"foobar\"\n"
msgstr ""

# type: defun
#: lispref/minibuf.texi:727
#, no-wrap
msgid "all-completions string collection &optional predicate nospace"
msgstr ""

# type: defun
#: lispref/minibuf.texi:736
msgid ""
"This function returns a list of all possible completions of @var{string}.  "
"The arguments to this function (aside from @var{nospace}) are the same as "
"those of @code{try-completion}.  Also, this function uses @code{completion-"
"regexp-list} in the same way that @code{try-completion} does.  The optional "
"argument @var{nospace} only matters if @var{string} is the empty string.  In "
"that case, if @var{nospace} is non-@code{nil}, completions that start with a "
"space are ignored."
msgstr ""

# type: defun
#: lispref/minibuf.texi:740
msgid ""
"If @var{collection} is a function, it is called with three arguments: @var"
"{string}, @var{predicate} and @code{t}; then @code{all-completions} returns "
"whatever the function returns.  @xref{Programmed Completion}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:743
msgid ""
"Here is an example, using the function @code{test} shown in the example for "
"@code{try-completion}:"
msgstr ""

# type: group
#: lispref/minibuf.texi:757
#, no-wrap
msgid ""
"(all-completions\n"
" \"foo\"\n"
" '((\"foobar1\" 1) (\"barfoo\" 2) (\"foobaz\" 3) (\"foobar2\" 4))\n"
" 'test)\n"
"     @result{} (\"foobar1\" \"foobar2\")\n"
msgstr ""

# type: defun
#: lispref/minibuf.texi:761
#, no-wrap
msgid "test-completion string collection &optional predicate"
msgstr ""

# type: anchor{#1}
#: lispref/minibuf.texi:769
msgid "Definition of test-completion"
msgstr ""

# type: defun
#: lispref/minibuf.texi:769
msgid ""
"This function returns non-@code{nil} if @var{string} is a valid completion "
"possibility specified by @var{collection} and @var{predicate}.  The "
"arguments are the same as in @code{try-completion}.  For instance, if @var"
"{collection} is a list of strings, this is true if @var{string} appears in "
"the list and @var{predicate} is satisfied."
msgstr ""

# type: defun
#: lispref/minibuf.texi:772
msgid ""
"This function uses @code{completion-regexp-list} in the same way that @code"
"{try-completion} does."
msgstr ""

# type: defun
#: lispref/minibuf.texi:779
msgid ""
"If @var{predicate} is non-@code{nil} and if @var{collection} contains "
"several strings that are equal to each other, as determined by @code{compare-"
"strings} according to @code{completion-ignore-case}, then @var{predicate} "
"should accept either all or none of them.  Otherwise, the return value of "
"@code{test-completion} is essentially unpredictable."
msgstr ""

# type: defun
#: lispref/minibuf.texi:783
msgid ""
"If @var{collection} is a function, it is called with three arguments, the "
"values @var{string}, @var{predicate} and @code{lambda}; whatever it returns, "
"@code{test-completion} returns in turn."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:785
#, no-wrap
msgid "completion-ignore-case"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:788
msgid ""
"If the value of this variable is non-@code{nil}, Emacs does not consider "
"case significant in completion."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:790
#, no-wrap
msgid "completion-regexp-list"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:795
msgid ""
"This is a list of regular expressions.  The completion functions only "
"consider a completion acceptable if it matches all regular expressions in "
"this list, with @code{case-fold-search} (@pxref{Searching and Case})  bound "
"to the value of @code{completion-ignore-case}."
msgstr ""

# type: defmac
#: lispref/minibuf.texi:797
#, no-wrap
msgid "lazy-completion-table var fun"
msgstr ""

# type: defmac
#: lispref/minibuf.texi:805
msgid ""
"This macro provides a way to initialize the variable @var{var} as a "
"collection for completion in a lazy way, not computing its actual contents "
"until they are first needed.  You use this macro to produce a value that you "
"store in @var{var}.  The actual computation of the proper value is done the "
"first time you do completion using @var{var}.  It is done by calling @var"
"{fun} with no arguments.  The value @var{fun} returns becomes the permanent "
"value of @var{var}."
msgstr ""

# type: defmac
#: lispref/minibuf.texi:807
msgid "Here is an example of use:"
msgstr ""

# type: smallexample
#: lispref/minibuf.texi:810
#, no-wrap
msgid "(defvar foo (lazy-completion-table foo make-my-alist))\n"
msgstr ""

# type: subsection
#: lispref/minibuf.texi:814
#, no-wrap
msgid "Completion and the Minibuffer"
msgstr ""

# type: cindex
#: lispref/minibuf.texi:815
#, no-wrap
msgid "minibuffer completion"
msgstr ""

# type: cindex
#: lispref/minibuf.texi:816
#, no-wrap
msgid "reading from minibuffer with completion"
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:820
msgid ""
"This section describes the basic interface for reading from the minibuffer "
"with completion."
msgstr ""

# type: defun
#: lispref/minibuf.texi:821
#, no-wrap
msgid "completing-read prompt collection &optional predicate require-match initial hist default inherit-input-method"
msgstr ""

# type: defun
#: lispref/minibuf.texi:825
msgid ""
"This function reads a string in the minibuffer, assisting the user by "
"providing completion.  It activates the minibuffer with prompt @var{prompt}, "
"which must be a string."
msgstr ""

# type: defun
#: lispref/minibuf.texi:833
msgid ""
"The actual completion is done by passing @var{collection} and @var"
"{predicate} to the function @code{try-completion}.  This happens in certain "
"commands bound in the local keymaps used for completion.  Some of these "
"commands also call @code{test-completion}.  Thus, if @var{predicate} is non-"
"@code{nil}, it should be compatible with @var{collection} and @code"
"{completion-ignore-case}.  @xref{Definition of test-completion}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:840
msgid ""
"If @var{require-match} is @code{nil}, the exit commands work regardless of "
"the input in the minibuffer.  If @var{require-match} is @code{t}, the usual "
"minibuffer exit commands won't exit unless the input completes to an element "
"of @var{collection}.  If @var{require-match} is neither @code{nil} nor @code"
"{t}, then the exit commands won't exit unless the input already in the "
"buffer matches an element of @var{collection}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:846
msgid ""
"However, empty input is always permitted, regardless of the value of @var"
"{require-match}; in that case, @code{completing-read} returns @var{default}, "
"or @code{\"\"}, if @var{default} is @code{nil}.  The value of @var{default} "
"(if non-@code{nil}) is also available to the user through the history "
"commands."
msgstr ""

# type: defun
#: lispref/minibuf.texi:852
msgid ""
"The function @code{completing-read} uses @code{minibuffer-local-completion-"
"map} as the keymap if @var{require-match} is @code{nil}, and uses @code"
"{minibuffer-local-must-match-map} if @var{require-match} is non-@code{nil}.  "
"@xref{Completion Commands}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:856
msgid ""
"The argument @var{hist} specifies which history list variable to use for "
"saving the input and for minibuffer history commands.  It defaults to @code"
"{minibuffer-history}.  @xref{Minibuffer History}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:861
msgid ""
"The argument @var{initial} is mostly deprecated; we recommend using a non-"
"@code{nil} value only in conjunction with specifying a cons cell for @var"
"{hist}.  @xref{Initial Input}.  For default input, use @var{default} instead."
msgstr ""

# type: defun
#: lispref/minibuf.texi:873
msgid ""
"If the built-in variable @code{completion-ignore-case} is non-@code{nil}, "
"completion ignores case when comparing the input against the possible "
"matches.  @xref{Basic Completion}.  In this mode of operation, @var"
"{predicate} must also ignore case, or you will get surprising results."
msgstr ""

# type: defun
#: lispref/minibuf.texi:875
msgid "Here's an example of using @code{completing-read}:"
msgstr ""

# type: group
#: lispref/minibuf.texi:882
#, no-wrap
msgid ""
"(completing-read\n"
" \"Complete a foo: \"\n"
" '((\"foobar1\" 1) (\"barfoo\" 2) (\"foobaz\" 3) (\"foobar2\" 4))\n"
" nil t \"fo\")\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:887
#, no-wrap
msgid ""
";; @r{After evaluation of the preceding expression,}\n"
";;   @r{the following appears in the minibuffer:}\n"
"\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:891
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"Complete a foo: fo@point{}\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

# type: defun
#: lispref/minibuf.texi:897
msgid ""
"If the user then types @kbd{@key{DEL} @key{DEL} b @key{RET}}, @code"
"{completing-read} returns @code{barfoo}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:901
msgid ""
"The @code{completing-read} function binds variables to pass information to "
"the commands that actually do completion.  They are described in the "
"following section."
msgstr ""

# type: subsection
#: lispref/minibuf.texi:904
#, no-wrap
msgid "Minibuffer Commands that Do Completion"
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:913
msgid ""
"This section describes the keymaps, commands and user options used in the "
"minibuffer to do completion.  The description refers to the situation when "
"Partial Completion mode is disabled (as it is by default).  When enabled, "
"this minor mode uses its own alternatives to some of the commands described "
"below.  @xref{Completion Options,,, emacs, The GNU Emacs Manual}, for a "
"short description of Partial Completion mode."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:914
#, no-wrap
msgid "minibuffer-completion-table"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:919
msgid ""
"The value of this variable is the collection used for completion in the "
"minibuffer.  This is the global variable that contains what @code{completing-"
"read} passes to @code{try-completion}.  It is used by minibuffer completion "
"commands such as @code{minibuffer-complete-word}."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:921
#, no-wrap
msgid "minibuffer-completion-predicate"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:925
msgid ""
"This variable's value is the predicate that @code{completing-read} passes to "
"@code{try-completion}.  The variable is also used by the other minibuffer "
"completion functions."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:927
#, no-wrap
msgid "minibuffer-completion-confirm"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:932
msgid ""
"When the value of this variable is non-@code{nil}, Emacs asks for "
"confirmation of a completion before exiting the minibuffer.  @code"
"{completing-read} binds this variable, and the function @code{minibuffer-"
"complete-and-exit} checks the value before exiting."
msgstr ""

# type: deffn
#: lispref/minibuf.texi:934
#, no-wrap
msgid "Command minibuffer-complete-word"
msgstr ""

# type: deffn
#: lispref/minibuf.texi:939
msgid ""
"This function completes the minibuffer contents by at most a single word.  "
"Even if the minibuffer contents have only one completion, @code{minibuffer-"
"complete-word} does not add any characters beyond the first character that "
"is not a word constituent.  @xref{Syntax Tables}."
msgstr ""

# type: deffn
#: lispref/minibuf.texi:941
#, no-wrap
msgid "Command minibuffer-complete"
msgstr ""

# type: deffn
#: lispref/minibuf.texi:943
msgid "This function completes the minibuffer contents as far as possible."
msgstr ""

# type: deffn
#: lispref/minibuf.texi:945
#, no-wrap
msgid "Command minibuffer-complete-and-exit"
msgstr ""

# type: deffn
#: lispref/minibuf.texi:952
msgid ""
"This function completes the minibuffer contents, and exits if confirmation "
"is not required, i.e., if @code{minibuffer-completion-confirm} is @code"
"{nil}.  If confirmation @emph{is} required, it is given by repeating this "
"command immediately---the command is programmed to work without confirmation "
"when run twice in succession."
msgstr ""

# type: deffn
#: lispref/minibuf.texi:954
#, no-wrap
msgid "Command minibuffer-completion-help"
msgstr ""

# type: deffn
#: lispref/minibuf.texi:962
msgid ""
"This function creates a list of the possible completions of the current "
"minibuffer contents.  It works by calling @code{all-completions} using the "
"value of the variable @code{minibuffer-completion-table} as the @var"
"{collection} argument, and the value of @code{minibuffer-completion-"
"predicate} as the @var{predicate} argument.  The list of completions is "
"displayed as text in a buffer named @samp{*Completions*}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:964
#, no-wrap
msgid "display-completion-list completions &optional common-substring"
msgstr ""

# type: defun
#: lispref/minibuf.texi:974
msgid ""
"This function displays @var{completions} to the stream in @code{standard-"
"output}, usually a buffer.  (@xref{Read and Print}, for more information "
"about streams.)  The argument @var{completions} is normally a list of "
"completions just returned by @code{all-completions}, but it does not have to "
"be.  Each element may be a symbol or a string, either of which is simply "
"printed.  It can also be a list of two strings, which is printed as if the "
"strings were concatenated.  The first of the two strings is the actual "
"completion, the second string serves as annotation."
msgstr ""

# type: defun
#: lispref/minibuf.texi:981
msgid ""
"The argument @var{common-substring} is the prefix that is common to all the "
"completions.  With normal Emacs completion, it is usually the same as the "
"string that was completed.  @code{display-completion-list} uses this to "
"highlight text in the completion list for better visual feedback.  This is "
"not needed in the minibuffer; for minibuffer completion, you can pass @code"
"{nil}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:985
msgid ""
"This function is called by @code{minibuffer-completion-help}.  The most "
"common way to use it is together with @code{with-output-to-temp-buffer}, "
"like this:"
msgstr ""

# type: example
#: lispref/minibuf.texi:991
#, no-wrap
msgid ""
"(with-output-to-temp-buffer \"*Completions*\"\n"
"  (display-completion-list\n"
"    (all-completions (buffer-string) my-alist)\n"
"    (buffer-string)))\n"
msgstr ""

# type: defopt
#: lispref/minibuf.texi:994
#, no-wrap
msgid "completion-auto-help"
msgstr "completion-auto-help"

# type: defopt
#: lispref/minibuf.texi:998
msgid ""
"If this variable is non-@code{nil}, the completion commands automatically "
"display a list of possible completions whenever nothing can be completed "
"because the next character is not uniquely determined."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1000
#, no-wrap
msgid "minibuffer-local-completion-map"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1004
msgid ""
"@code{completing-read} uses this value as the local keymap when an exact "
"match of one of the completions is not required.  By default, this keymap "
"makes the following bindings:"
msgstr ""

# type: code{#1}
#: lispref/minibuf.texi:1008 lispref/minibuf.texi:1031
msgid "minibuffer-completion-help"
msgstr ""

# type: code{#1}
#: lispref/minibuf.texi:1011 lispref/minibuf.texi:1034
msgid "minibuffer-complete-word"
msgstr ""

# type: code{#1}
#: lispref/minibuf.texi:1014 lispref/minibuf.texi:1037
msgid "minibuffer-complete"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1019
msgid ""
"with other characters bound as in @code{minibuffer-local-map} (@pxref"
"{Definition of minibuffer-local-map})."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1021
#, no-wrap
msgid "minibuffer-local-must-match-map"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1027
msgid ""
"@code{completing-read} uses this value as the local keymap when an exact "
"match of one of the completions is required.  Therefore, no keys are bound "
"to @code{exit-minibuffer}, the command that exits the minibuffer "
"unconditionally.  By default, this keymap makes the following bindings:"
msgstr ""

# type: code{#1}
#: lispref/minibuf.texi:1040 lispref/minibuf.texi:1043
msgid "minibuffer-complete-and-exit"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1047
msgid "with other characters bound as in @code{minibuffer-local-map}."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1049
#, no-wrap
msgid "minibuffer-local-filename-completion-map"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1053
msgid ""
"This is like @code{minibuffer-local-completion-map} except that it does not "
"bind @key{SPC}.  This keymap is used by the function @code{read-file-name}."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1055
#, no-wrap
msgid "minibuffer-local-must-match-filename-map"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1059
msgid ""
"This is like @code{minibuffer-local-must-match-map} except that it does not "
"bind @key{SPC}.  This keymap is used by the function @code{read-file-name}."
msgstr ""

# type: subsection
#: lispref/minibuf.texi:1062
#, no-wrap
msgid "High-Level Completion  Functions"
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:1066
msgid ""
"This section describes the higher-level convenient functions for reading "
"certain sorts of names with completion."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:1071
msgid ""
"In most cases, you should not call these functions in the middle of a Lisp "
"function.  When possible, do all minibuffer input as part of reading the "
"arguments for a command, in the @code{interactive} specification.  @xref"
"{Defining Commands}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1072
#, no-wrap
msgid "read-buffer prompt &optional default existing"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1078
msgid ""
"This function reads the name of a buffer and returns it as a string.  The "
"argument @var{default} is the default name to use, the value to return if "
"the user exits with an empty minibuffer.  If non-@code{nil}, it should be a "
"string or a buffer.  It is mentioned in the prompt, but is not inserted in "
"the minibuffer as initial input."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1083
msgid ""
"The argument @var{prompt} should be a string ending with a colon and a "
"space.  If @var{default} is non-@code{nil}, the function inserts it in @var"
"{prompt} before the colon to follow the convention for reading from the "
"minibuffer with a default value (@pxref{Programming Tips})."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1091
msgid ""
"If @var{existing} is non-@code{nil}, then the name specified must be that of "
"an existing buffer.  The usual commands to exit the minibuffer do not exit "
"if the text is not valid, and @key{RET} does completion to attempt to find a "
"valid name.  If @var{existing} is neither @code{nil} nor @code{t}, "
"confirmation is required after completion.  (However, @var{default} is not "
"checked for validity; it is returned, whatever it is, if the user exits with "
"the minibuffer empty.)"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1096
msgid ""
"In the following example, the user enters @samp{minibuffer.t}, and then "
"types @key{RET}.  The argument @var{existing} is @code{t}, and the only "
"buffer name starting with the given input is @samp{minibuffer.texi}, so that "
"name is the value."
msgstr ""

# type: example
#: lispref/minibuf.texi:1099
#, no-wrap
msgid "(read-buffer \"Buffer name: \" \"foo\" t)\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:1103 lispref/minibuf.texi:1192
#: lispref/minibuf.texi:1608
#, no-wrap
msgid ""
";; @r{After evaluation of the preceding expression,}\n"
";;   @r{the following prompt appears,}\n"
";;   @r{with an empty minibuffer:}\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:1109
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"Buffer name (default foo): @point{}\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:1114
#, no-wrap
msgid ""
";; @r{The user types @kbd{minibuffer.t @key{RET}}.}\n"
"     @result{} \"minibuffer.texi\"\n"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1118
#, no-wrap
msgid "read-buffer-function"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1123
msgid ""
"This variable specifies how to read buffer names.  For example, if you set "
"this variable to @code{iswitchb-read-buffer}, all Emacs commands that call "
"@code{read-buffer} to read a buffer name will actually use the @code"
"{iswitchb} package to read it."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1125
#, no-wrap
msgid "read-command prompt &optional default"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1131
msgid ""
"This function reads the name of a command and returns it as a Lisp symbol.  "
"The argument @var{prompt} is used as in @code{read-from-minibuffer}.  Recall "
"that a command is anything for which @code{commandp} returns @code{t}, and a "
"command name is a symbol for which @code{commandp} returns @code{t}.  @xref"
"{Interactive Call}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1138
msgid ""
"The argument @var{default} specifies what to return if the user enters null "
"input.  It can be a symbol or a string; if it is a string, @code{read-"
"command} interns it before returning it.  If @var{default} is @code{nil}, "
"that means no default has been specified; then if the user enters null "
"input, the return value is @code{(intern \"\")}, that is, a symbol whose "
"name is an empty string."
msgstr ""

# type: example
#: lispref/minibuf.texi:1141
#, no-wrap
msgid ""
"(read-command \"Command name? \")\n"
"\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:1145
#, no-wrap
msgid ""
";; @r{After evaluation of the preceding expression,}\n"
";;   @r{the following prompt appears with an empty minibuffer:}\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:1151
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"Command name?\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1157
msgid ""
"If the user types @kbd{forward-c @key{RET}}, then this function returns @code"
"{forward-char}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1162
msgid ""
"The @code{read-command} function is a simplified interface to @code"
"{completing-read}.  It uses the variable @code{obarray} so as to complete in "
"the set of extant Lisp symbols, and it uses the @code{commandp} predicate so "
"as to accept only command names:"
msgstr ""

# type: cindex
#: lispref/minibuf.texi:1163
#, no-wrap
msgid "@code{commandp} example"
msgstr ""

# type: group
#: lispref/minibuf.texi:1170
#, no-wrap
msgid ""
"(read-command @var{prompt})\n"
"@equiv{}\n"
"(intern (completing-read @var{prompt} obarray\n"
"                         'commandp t nil))\n"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1174
#, no-wrap
msgid "read-variable prompt &optional default"
msgstr ""

# type: anchor{#1}
#: lispref/minibuf.texi:1178
msgid "Definition of read-variable"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1178
msgid ""
"This function reads the name of a user variable and returns it as a symbol."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1184
msgid ""
"The argument @var{default} specifies what to return if the user enters null "
"input.  It can be a symbol or a string; if it is a string, @code{read-"
"variable} interns it before returning it.  If @var{default} is @code{nil}, "
"that means no default has been specified; then if the user enters null "
"input, the return value is @code{(intern \"\")}."
msgstr ""

# type: group
#: lispref/minibuf.texi:1188
#, no-wrap
msgid ""
"(read-variable \"Variable name? \")\n"
"\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:1198
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"Variable name? @point{}\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1204
msgid ""
"If the user then types @kbd{fill-p @key{RET}}, @code{read-variable} returns "
"@code{fill-prefix}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1208
msgid ""
"In general, @code{read-variable} is similar to @code{read-command}, but uses "
"the predicate @code{user-variable-p} instead of @code{commandp}:"
msgstr ""

# type: cindex
#: lispref/minibuf.texi:1209
#, no-wrap
msgid "@code{user-variable-p} example"
msgstr ""

# type: group
#: lispref/minibuf.texi:1217
#, no-wrap
msgid ""
"(read-variable @var{prompt})\n"
"@equiv{}\n"
"(intern\n"
" (completing-read @var{prompt} obarray\n"
"                  'user-variable-p t nil))\n"
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:1224
msgid ""
"See also the functions @code{read-coding-system} and @code{read-non-nil-"
"coding-system}, in @ref{User-Chosen Coding Systems}, and @code{read-input-"
"method-name}, in @ref{Input Methods}."
msgstr ""

# type: cindex
#: lispref/minibuf.texi:1227
#, no-wrap
msgid "read file names"
msgstr ""

# type: cindex
#: lispref/minibuf.texi:1228
#, no-wrap
msgid "prompt for file name"
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:1233
msgid ""
"Here is another high-level completion function, designed for reading a file "
"name.  It provides special features including automatic insertion of the "
"default directory."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1234
#, no-wrap
msgid "read-file-name prompt &optional directory default existing initial predicate"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1237
msgid ""
"This function reads a file name in the minibuffer, prompting with @var"
"{prompt} and providing completion."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1245
msgid ""
"If @var{existing} is non-@code{nil}, then the user must specify the name of "
"an existing file; @key{RET} performs completion to make the name valid if "
"possible, and then refuses to exit if it is not valid.  If the value of @var"
"{existing} is neither @code{nil} nor @code{t}, then @key{RET} also requires "
"confirmation after completion.  If @var{existing} is @code{nil}, then the "
"name of a nonexistent file is acceptable."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1251
msgid ""
"@code{read-file-name} uses @code{minibuffer-local-filename-completion-map} "
"as the keymap if @var{existing} is @code{nil}, and uses @code{minibuffer-"
"local-must-match-filename-map} if @var{existing} is non-@code{nil}.  @xref"
"{Completion Commands}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1257
msgid ""
"The argument @var{directory} specifies the directory to use for completion "
"of relative file names.  It should be an absolute directory name.  If @code"
"{insert-default-directory} is non-@code{nil}, @var{directory} is also "
"inserted in the minibuffer as initial input.  It defaults to the current "
"buffer's value of @code{default-directory}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1266
msgid ""
"If you specify @var{initial}, that is an initial file name to insert in the "
"buffer (after @var{directory}, if that is inserted).  In this case, point "
"goes at the beginning of @var{initial}.  The default for @var{initial} is "
"@code{nil}---don't insert any file name.  To see what @var{initial} does, "
"try the command @kbd{C-x C-v}.  @strong{Please note:} we recommend using @var"
"{default} rather than @var{initial} in most cases."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1279
msgid ""
"If @var{default} is non-@code{nil}, then the function returns @var{default} "
"if the user exits the minibuffer with the same non-empty contents that @code"
"{read-file-name} inserted initially.  The initial minibuffer contents are "
"always non-empty if @code{insert-default-directory} is non-@code{nil}, as it "
"is by default.  @var{default} is not checked for validity, regardless of the "
"value of @var{existing}.  However, if @var{existing} is non-@code{nil}, the "
"initial minibuffer contents should be a valid file (or directory) name.  "
"Otherwise @code{read-file-name} attempts completion if the user exits "
"without any editing, and does not return @var{default}.  @var{default} is "
"also available through the history commands."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1291
msgid ""
"If @var{default} is @code{nil}, @code{read-file-name} tries to find a "
"substitute default to use in its place, which it treats in exactly the same "
"way as if it had been specified explicitly.  If @var{default} is @code{nil}, "
"but @var{initial} is non-@code{nil}, then the default is the absolute file "
"name obtained from @var{directory} and @var{initial}.  If both @var{default} "
"and @var{initial} are @code{nil} and the buffer is visiting a file, @code"
"{read-file-name} uses the absolute file name of that file as default.  If "
"the buffer is not visiting a file, then there is no default.  In that case, "
"if the user types @key{RET} without any editing, @code{read-file-name} "
"simply returns the pre-inserted contents of the minibuffer."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1296
msgid ""
"If the user types @key{RET} in an empty minibuffer, this function returns an "
"empty string, regardless of the value of @var{existing}.  This is, for "
"instance, how the user can make the current buffer visit no file using @code"
"{M-x set-visited-file-name}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1301
msgid ""
"If @var{predicate} is non-@code{nil}, it specifies a function of one "
"argument that decides which file names are acceptable completion "
"possibilities.  A file name is an acceptable value if @var{predicate} "
"returns non-@code{nil} for it."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1305
msgid ""
"@code{read-file-name} does not automatically expand file names.  You must "
"call @code{expand-file-name} yourself if an absolute file name is required."
msgstr ""

# type: group
#: lispref/minibuf.texi:1311
#, no-wrap
msgid ""
"(read-file-name \"The file is \")\n"
"\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:1320
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"The file is /gp/gnu/elisp/@point{}\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1325
msgid "Typing @kbd{manual @key{TAB}} results in the following:"
msgstr ""

# type: group
#: lispref/minibuf.texi:1331
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"The file is /gp/gnu/elisp/manual.texi@point{}\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1338
msgid ""
"If the user types @key{RET}, @code{read-file-name} returns the file name as "
"the string @code{\"/gp/gnu/elisp/manual.texi\"}."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1340
#, no-wrap
msgid "read-file-name-function"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1345
msgid ""
"If non-@code{nil}, this should be a function that accepts the same arguments "
"as @code{read-file-name}.  When @code{read-file-name} is called, it calls "
"this function with the supplied arguments instead of doing its usual work."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1347
#, no-wrap
msgid "read-file-name-completion-ignore-case"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1350
msgid ""
"If this variable is non-@code{nil}, @code{read-file-name} ignores case when "
"performing completion."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1352
#, no-wrap
msgid "read-directory-name prompt &optional directory default existing initial"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1355
msgid ""
"This function is like @code{read-file-name} but allows only directory names "
"as completion possibilities."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1363
msgid ""
"If @var{default} is @code{nil} and @var{initial} is non-@code{nil}, @code"
"{read-directory-name} constructs a substitute default by combining @var"
"{directory} (or the current buffer's default directory if @var{directory} is "
"@code{nil}) and @var{initial}.  If both @var{default} and @var{initial} are "
"@code{nil}, this function uses @var{directory} as substitute default, or the "
"current buffer's default directory if @var{directory} is @code{nil}."
msgstr ""

# type: defopt
#: lispref/minibuf.texi:1365
#, no-wrap
msgid "insert-default-directory"
msgstr "insert-default-directory"

# type: defopt
#: lispref/minibuf.texi:1377
msgid ""
"This variable is used by @code{read-file-name}, and thus, indirectly, by "
"most commands reading file names.  (This includes all commands that use the "
"code letters @samp{f} or @samp{F} in their interactive form.  @xref"
"{Interactive Codes,, Code Characters for interactive}.)  Its value controls "
"whether @code{read-file-name} starts by placing the name of the default "
"directory in the minibuffer, plus the initial file name if any.  If the "
"value of this variable is @code{nil}, then @code{read-file-name} does not "
"place any initial input in the minibuffer (unless you specify initial input "
"with the @var{initial} argument).  In that case, the default directory is "
"still used for completion of relative file names, but is not displayed."
msgstr ""

# type: defopt
#: lispref/minibuf.texi:1384
msgid ""
"If this variable is @code{nil} and the initial minibuffer contents are "
"empty, the user may have to explicitly fetch the next history element to "
"access a default value.  If the variable is non-@code{nil}, the initial "
"minibuffer contents are always non-empty and the user can always request a "
"default value by immediately typing @key{RET} in an unedited minibuffer.  "
"(See above.)"
msgstr ""

# type: group
#: lispref/minibuf.texi:1392
#, no-wrap
msgid ""
";; @r{Here the minibuffer starts out with the default directory.}\n"
"(let ((insert-default-directory t))\n"
"  (read-file-name \"The file is \"))\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:1398
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"The file is ~lewis/manual/@point{}\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:1405
#, no-wrap
msgid ""
";; @r{Here the minibuffer is empty and only the prompt}\n"
";;   @r{appears on its line.}\n"
"(let ((insert-default-directory nil))\n"
"  (read-file-name \"The file is \"))\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:1411
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"The file is @point{}\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

# type: cindex
#: lispref/minibuf.texi:1417
#, no-wrap
msgid "programmed completion"
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:1423
msgid ""
"Sometimes it is not possible to create an alist or an obarray containing all "
"the intended possible completions.  In such a case, you can supply your own "
"function to compute the completion of a given string.  This is called @dfn"
"{programmed completion}."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:1429
msgid ""
"To use this feature, pass a symbol with a function definition as the @var"
"{collection} argument to @code{completing-read}.  The function @code"
"{completing-read} arranges to pass your completion function along to @code"
"{try-completion} and @code{all-completions}, which will then let your "
"function do all the work."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:1431
msgid "The completion function should accept three arguments:"
msgstr ""

# type: itemize
#: lispref/minibuf.texi:1435
msgid "The string to be completed."
msgstr ""

# type: itemize
#: lispref/minibuf.texi:1440
msgid ""
"The predicate function to filter possible matches, or @code{nil} if none.  "
"Your function should call the predicate for each possible match, and ignore "
"the possible match if the predicate returns @code{nil}."
msgstr ""

# type: itemize
#: lispref/minibuf.texi:1443
msgid "A flag specifying the type of operation."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:1446
msgid "There are three flag values for three operations:"
msgstr ""

# type: itemize
#: lispref/minibuf.texi:1453
msgid ""
"@code{nil} specifies @code{try-completion}.  The completion function should "
"return the completion of the specified string, or @code{t} if the string is "
"a unique and exact match already, or @code{nil} if the string matches no "
"possibility."
msgstr ""

# type: itemize
#: lispref/minibuf.texi:1457
msgid ""
"If the string is an exact match for one possibility, but also matches other "
"longer possibilities, the function should return the string, not @code{t}."
msgstr ""

# type: itemize
#: lispref/minibuf.texi:1462
msgid ""
"@code{t} specifies @code{all-completions}.  The completion function should "
"return a list of all possible completions of the specified string."
msgstr ""

# type: itemize
#: lispref/minibuf.texi:1467
msgid ""
"@code{lambda} specifies @code{test-completion}.  The completion function "
"should return @code{t} if the specified string is an exact match for some "
"possibility; @code{nil} otherwise."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:1476
msgid ""
"It would be consistent and clean for completion functions to allow lambda "
"expressions (lists that are functions) as well as function symbols as @var"
"{collection}, but this is impossible.  Lists as completion tables already "
"have other meanings, and it would be unreliable to treat one differently "
"just because it is also a possible function.  So you must arrange for any "
"function you wish to use for completion to be encapsulated in a symbol."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:1479
msgid ""
"Emacs uses programmed completion when completing file names.  @xref{File "
"Name Completion}."
msgstr ""

# type: defmac
#: lispref/minibuf.texi:1480
#, no-wrap
msgid "dynamic-completion-table function"
msgstr ""

# type: defmac
#: lispref/minibuf.texi:1487
msgid ""
"This macro is a convenient way to write a function that can act as "
"programmed completion function.  The argument @var{function} should be a "
"function that takes one argument, a string, and returns an alist of possible "
"completions of it.  You can think of @code{dynamic-completion-table} as a "
"transducer between that interface and the interface for programmed "
"completion functions."
msgstr ""

# type: cindex
#: lispref/minibuf.texi:1491
#, no-wrap
msgid "asking the user questions"
msgstr ""

# type: cindex
#: lispref/minibuf.texi:1492
#, no-wrap
msgid "querying the user"
msgstr ""

# type: cindex
#: lispref/minibuf.texi:1493
#, no-wrap
msgid "yes-or-no questions"
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:1501
msgid ""
"This section describes functions used to ask the user a yes-or-no question.  "
"The function @code{y-or-n-p} can be answered with a single character; it is "
"useful for questions where an inadvertent wrong answer will not have serious "
"consequences.  @code{yes-or-no-p} is suitable for more momentous questions, "
"since it requires three or four characters to answer."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:1509
msgid ""
"If either of these functions is called in a command that was invoked using "
"the mouse---more precisely, if @code{last-nonmenu-event} (@pxref{Command "
"Loop Info}) is either @code{nil} or a list---then it uses a dialog box or "
"pop-up menu to ask the question.  Otherwise, it uses keyboard input.  You "
"can force use of the mouse or use of keyboard input by binding @code{last-"
"nonmenu-event} to a suitable value around the call."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:1512
msgid ""
"Strictly speaking, @code{yes-or-no-p} uses the minibuffer and @code{y-or-n-"
"p} does not; but it seems best to describe them together."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1513
#, no-wrap
msgid "y-or-n-p prompt"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1522
msgid ""
"This function asks the user a question, expecting input in the echo area.  "
"It returns @code{t} if the user types @kbd{y}, @code{nil} if the user types "
"@kbd{n}.  This function also accepts @key{SPC} to mean yes and @key{DEL} to "
"mean no.  It accepts @kbd{C-]} to mean ``quit,'' like @kbd{C-g}, because the "
"question might look like a minibuffer and for that reason the user might try "
"to use @kbd{C-]} to get out.  The answer is a single character, with no @key"
"{RET} needed to terminate it.  Upper and lower case are equivalent."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1528
msgid ""
"``Asking the question'' means printing @var{prompt} in the echo area, "
"followed by the string @w{@samp{(y or n) }}.  If the input is not one of the "
"expected answers (@kbd{y}, @kbd{n}, @kbd{@key{SPC}}, @kbd{@key{DEL}}, or "
"something that quits), the function responds @samp{Please answer y or n.}, "
"and repeats the request."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1533
msgid ""
"This function does not actually use the minibuffer, since it does not allow "
"editing of the answer.  It actually uses the echo area (@pxref{The Echo "
"Area}), which uses the same screen space as the minibuffer.  The cursor "
"moves to the echo area while the question is being asked."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1537
msgid ""
"The answers and their meanings, even @samp{y} and @samp{n}, are not "
"hardwired.  The keymap @code{query-replace-map} specifies them.  @xref"
"{Search and Replace}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1540
msgid ""
"In the following example, the user first types @kbd{q}, which is invalid.  "
"At the next prompt the user types @kbd{y}."
msgstr ""

# type: group
#: lispref/minibuf.texi:1544
#, no-wrap
msgid ""
"(y-or-n-p \"Do you need a lift? \")\n"
"\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:1547
#, no-wrap
msgid ""
";; @r{After evaluation of the preceding expression,}\n"
";;   @r{the following prompt appears in the echo area:}\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:1553
#, no-wrap
msgid ""
"---------- Echo area ----------\n"
"Do you need a lift? (y or n)\n"
"---------- Echo area ----------\n"
msgstr ""

# type: smallexample
#: lispref/minibuf.texi:1556
#, no-wrap
msgid ""
";; @r{If the user then types @kbd{q}, the following appears:}\n"
"\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:1561
#, no-wrap
msgid ""
"---------- Echo area ----------\n"
"Please answer y or n.  Do you need a lift? (y or n)\n"
"---------- Echo area ----------\n"
msgstr ""

# type: smallexample
#: lispref/minibuf.texi:1565
#, no-wrap
msgid ""
";; @r{When the user types a valid answer,}\n"
";;   @r{it is displayed after the question:}\n"
"\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:1570
#, no-wrap
msgid ""
"---------- Echo area ----------\n"
"Do you need a lift? (y or n) y\n"
"---------- Echo area ----------\n"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1576
msgid ""
"We show successive lines of echo area messages, but only one actually "
"appears on the screen at a time."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1578
#, no-wrap
msgid "y-or-n-p-with-timeout prompt seconds default-value"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1583
msgid ""
"Like @code{y-or-n-p}, except that if the user fails to answer within @var"
"{seconds} seconds, this function stops waiting and returns @var{default-"
"value}.  It works by setting up a timer; see @ref{Timers}.  The argument @var"
"{seconds} may be an integer or a floating point number."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1585
#, no-wrap
msgid "yes-or-no-p prompt"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1590
msgid ""
"This function asks the user a question, expecting input in the minibuffer.  "
"It returns @code{t} if the user enters @samp{yes}, @code{nil} if the user "
"types @samp{no}.  The user must type @key{RET} to finalize the response.  "
"Upper and lower case are equivalent."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1595
msgid ""
"@code{yes-or-no-p} starts by displaying @var{prompt} in the echo area, "
"followed by @w{@samp{(yes or no) }}.  The user must type one of the expected "
"responses; otherwise, the function responds @samp{Please answer yes or no.}, "
"waits about two seconds and repeats the request."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1598
msgid ""
"@code{yes-or-no-p} requires more work from the user than @code{y-or-n-p} and "
"is appropriate for more crucial decisions."
msgstr ""

# type: group
#: lispref/minibuf.texi:1604
#, no-wrap
msgid ""
"(yes-or-no-p \"Do you really want to remove everything? \")\n"
"\n"
msgstr ""

# type: group
#: lispref/minibuf.texi:1614
#, no-wrap
msgid ""
"---------- Buffer: minibuffer ----------\n"
"Do you really want to remove everything? (yes or no)\n"
"---------- Buffer: minibuffer ----------\n"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1621
msgid ""
"If the user first types @kbd{y @key{RET}}, which is invalid because this "
"function demands the entire word @samp{yes}, it responds by displaying these "
"prompts, with a brief pause between them:"
msgstr ""

# type: group
#: lispref/minibuf.texi:1628
#, no-wrap
msgid ""
"---------- Buffer: minibuffer ----------\n"
"Please answer yes or no.\n"
"Do you really want to remove everything? (yes or no)\n"
"---------- Buffer: minibuffer ----------\n"
msgstr ""

# type: section
#: lispref/minibuf.texi:1633
#, no-wrap
msgid "Asking Multiple Y-or-N Questions"
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:1641
msgid ""
"When you have a series of similar questions to ask, such as ``Do you want to "
"save this buffer'' for each buffer in turn, you should use @code{map-y-or-n-"
"p} to ask the collection of questions, rather than asking each question "
"individually.  This gives the user certain convenient facilities such as the "
"ability to answer the whole series at once."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1642
#, no-wrap
msgid "map-y-or-n-p prompter actor list &optional help action-alist no-cursor-in-echo-area"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1645
msgid ""
"This function asks the user a series of questions, reading a single-"
"character answer in the echo area for each one."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1650
msgid ""
"The value of @var{list} specifies the objects to ask questions about.  It "
"should be either a list of objects or a generator function.  If it is a "
"function, it should expect no arguments, and should return either the next "
"object to ask about, or @code{nil} meaning stop asking questions."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1653
msgid ""
"The argument @var{prompter} specifies how to ask each question.  If @var"
"{prompter} is a string, the question text is computed like this:"
msgstr ""

# type: example
#: lispref/minibuf.texi:1656
#, no-wrap
msgid "(format @var{prompter} @var{object})\n"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1661
msgid ""
"where @var{object} is the next object to ask about (as obtained from @var"
"{list})."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1668
msgid ""
"If not a string, @var{prompter} should be a function of one argument (the "
"next object to ask about) and should return the question text.  If the value "
"is a string, that is the question to ask the user.  The function can also "
"return @code{t} meaning do act on this object (and don't ask the user), or "
"@code{nil} meaning ignore this object (and don't ask the user)."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1673
msgid ""
"The argument @var{actor} says how to act on the answers that the user "
"gives.  It should be a function of one argument, and it is called with each "
"object that the user says yes for.  Its argument is always an object "
"obtained from @var{list}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1675
msgid "If the argument @var{help} is given, it should be a list of this form:"
msgstr ""

# type: example
#: lispref/minibuf.texi:1678
#, no-wrap
msgid "(@var{singular} @var{plural} @var{action})\n"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1685
msgid ""
"where @var{singular} is a string containing a singular noun that describes "
"the objects conceptually being acted on, @var{plural} is the corresponding "
"plural noun, and @var{action} is a transitive verb describing what @var"
"{actor} does."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1688
msgid ""
"If you don't specify @var{help}, the default is @code{(\"object\" \"objects"
"\" \"act on\")}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1697
msgid ""
"Each time a question is asked, the user may enter @kbd{y}, @kbd{Y}, or @key"
"{SPC} to act on that object; @kbd{n}, @kbd{N}, or @key{DEL} to skip that "
"object; @kbd{!} to act on all following objects; @key{ESC} or @kbd{q} to "
"exit (skip all following objects); @kbd{.} (period) to act on the current "
"object and then exit; or @kbd{C-h} to get help.  These are the same answers "
"that @code{query-replace} accepts.  The keymap @code{query-replace-map} "
"defines their meaning for @code{map-y-or-n-p} as well as for @code{query-"
"replace}; see @ref{Search and Replace}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1704
msgid ""
"You can use @var{action-alist} to specify additional possible answers and "
"what they mean.  It is an alist of elements of the form @code{(@var{char} "
"@var{function} @var{help})}, each of which defines one additional answer.  "
"In this element, @var{char} is a character (the answer); @var{function} is a "
"function of one argument (an object from @var{list}); @var{help} is a string."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1710
msgid ""
"When the user responds with @var{char}, @code{map-y-or-n-p} calls @var"
"{function}.  If it returns non-@code{nil}, the object is considered ``acted "
"upon,'' and @code{map-y-or-n-p} advances to the next object in @var{list}.  "
"If it returns @code{nil}, the prompt is repeated for the same object."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1714
msgid ""
"Normally, @code{map-y-or-n-p} binds @code{cursor-in-echo-area} while "
"prompting.  But if @var{no-cursor-in-echo-area} is non-@code{nil}, it does "
"not do that."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1722
msgid ""
"If @code{map-y-or-n-p} is called in a command that was invoked using the "
"mouse---more precisely, if @code{last-nonmenu-event} (@pxref{Command Loop "
"Info}) is either @code{nil} or a list---then it uses a dialog box or pop-up "
"menu to ask the question.  In this case, it does not use keyboard input or "
"the echo area.  You can force use of the mouse or use of keyboard input by "
"binding @code{last-nonmenu-event} to a suitable value around the call."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1724
msgid ""
"The return value of @code{map-y-or-n-p} is the number of objects acted on."
msgstr ""

# type: cindex
#: lispref/minibuf.texi:1728
#, no-wrap
msgid "passwords, reading"
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:1732
msgid ""
"To read a password to pass to another program, you can use the function @code"
"{read-passwd}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1733
#, no-wrap
msgid "read-passwd prompt &optional confirm default"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1737
msgid ""
"This function reads a password, prompting with @var{prompt}.  It does not "
"echo the password as the user types it; instead, it echoes @samp{.} for each "
"character in the password."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1742
msgid ""
"The optional argument @var{confirm}, if non-@code{nil}, says to read the "
"password twice and insist it must be the same both times.  If it isn't the "
"same, the user has to type it over and over until the last two times match."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1746
msgid ""
"The optional argument @var{default} specifies the default password to return "
"if the user enters empty input.  If @var{default} is @code{nil}, then @code"
"{read-passwd} returns the null string in that case."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:1753
msgid "This section describes some commands meant for use in the minibuffer."
msgstr ""

# type: deffn
#: lispref/minibuf.texi:1754
#, no-wrap
msgid "Command exit-minibuffer"
msgstr ""

# type: deffn
#: lispref/minibuf.texi:1757
msgid ""
"This command exits the active minibuffer.  It is normally bound to keys in "
"minibuffer local keymaps."
msgstr ""

# type: deffn
#: lispref/minibuf.texi:1759
#, no-wrap
msgid "Command self-insert-and-exit"
msgstr ""

# type: deffn
#: lispref/minibuf.texi:1763
msgid ""
"This command exits the active minibuffer after inserting the last character "
"typed on the keyboard (found in @code{last-command-char}; @pxref{Command "
"Loop Info})."
msgstr ""

# type: deffn
#: lispref/minibuf.texi:1765
#, no-wrap
msgid "Command previous-history-element n"
msgstr ""

# type: deffn
#: lispref/minibuf.texi:1768
msgid ""
"This command replaces the minibuffer contents with the value of the @var{n}"
"th previous (older) history element."
msgstr ""

# type: deffn
#: lispref/minibuf.texi:1770
#, no-wrap
msgid "Command next-history-element n"
msgstr ""

# type: deffn
#: lispref/minibuf.texi:1773
msgid ""
"This command replaces the minibuffer contents with the value of the @var{n}"
"th more recent history element."
msgstr ""

# type: deffn
#: lispref/minibuf.texi:1775
#, no-wrap
msgid "Command previous-matching-history-element pattern n"
msgstr ""

# type: deffn
#: lispref/minibuf.texi:1779
msgid ""
"This command replaces the minibuffer contents with the value of the @var{n}"
"th previous (older) history element that matches @var{pattern} (a regular "
"expression)."
msgstr ""

# type: deffn
#: lispref/minibuf.texi:1781
#, no-wrap
msgid "Command next-matching-history-element pattern n"
msgstr ""

# type: deffn
#: lispref/minibuf.texi:1785
msgid ""
"This command replaces the minibuffer contents with the value of the @var{n}"
"th next (newer) history element that matches @var{pattern} (a regular "
"expression)."
msgstr ""

# type: cindex
#: lispref/minibuf.texi:1789
#, no-wrap
msgid "minibuffer windows"
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:1793
msgid ""
"These functions access and select minibuffer windows and test whether they "
"are active."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1794
#, no-wrap
msgid "active-minibuffer-window"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1797
msgid ""
"This function returns the currently active minibuffer window, or @code{nil} "
"if none is currently active."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1799
#, no-wrap
msgid "minibuffer-window &optional frame"
msgstr ""

# type: anchor{#1}
#: lispref/minibuf.texi:1806
msgid "Definition of minibuffer-window"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1806
msgid ""
"This function returns the minibuffer window used for frame @var{frame}.  If "
"@var{frame} is @code{nil}, that stands for the current frame.  Note that the "
"minibuffer window used by a frame need not be part of that frame---a frame "
"that has no minibuffer of its own necessarily uses some other frame's "
"minibuffer window."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1808
#, no-wrap
msgid "set-minibuffer-window window"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1814
msgid ""
"This function specifies @var{window} as the minibuffer window to use.  This "
"affects where the minibuffer is displayed if you put text in it without "
"invoking the usual minibuffer commands.  It has no effect on the usual "
"minibuffer input functions because they all start by choosing the minibuffer "
"window according to the current frame."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1817
#, no-wrap
msgid "window-minibuffer-p &optional window"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1821
msgid ""
"This function returns non-@code{nil} if @var{window} is a minibuffer "
"window.  @var{window} defaults to the selected window."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:1827
msgid ""
"It is not correct to determine whether a given window is a minibuffer by "
"comparing it with the result of @code{(minibuffer-window)}, because there "
"can be more than one minibuffer window if there is more than one frame."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1828
#, no-wrap
msgid "minibuffer-window-active-p window"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1831
msgid ""
"This function returns non-@code{nil} if @var{window}, assumed to be a "
"minibuffer window, is currently active."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:1837
msgid "These functions access the minibuffer prompt and contents."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1838
#, no-wrap
msgid "minibuffer-prompt"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1841
msgid ""
"This function returns the prompt string of the currently active minibuffer.  "
"If no minibuffer is active, it returns @code{nil}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1843
#, no-wrap
msgid "minibuffer-prompt-end"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1847
msgid ""
"This function returns the current position of the end of the minibuffer "
"prompt, if a minibuffer is current.  Otherwise, it returns the minimum valid "
"buffer position."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1849
#, no-wrap
msgid "minibuffer-prompt-width"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1852
msgid ""
"This function returns the current display-width of the minibuffer prompt, if "
"a minibuffer is current.  Otherwise, it returns zero."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1854
#, no-wrap
msgid "minibuffer-contents"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1859
msgid ""
"This function returns the editable contents of the minibuffer (that is, "
"everything except the prompt) as a string, if a minibuffer is current.  "
"Otherwise, it returns the entire contents of the current buffer."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1861
#, no-wrap
msgid "minibuffer-contents-no-properties"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1864
msgid ""
"This is like @code{minibuffer-contents}, except that it does not copy text "
"properties, just the characters themselves.  @xref{Text Properties}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1866
#, no-wrap
msgid "minibuffer-completion-contents"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1870
msgid ""
"This is like @code{minibuffer-contents}, except that it returns only the "
"contents before point.  That is the part that completion commands operate "
"on.  @xref{Minibuffer Completion}."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1872
#, no-wrap
msgid "delete-minibuffer-contents"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1876
msgid ""
"This function erases the editable contents of the minibuffer (that is, "
"everything except the prompt), if a minibuffer is current.  Otherwise, it "
"erases the entire current buffer."
msgstr ""

# type: section
#: lispref/minibuf.texi:1879
#, no-wrap
msgid "Recursive Minibuffers"
msgstr ""

# type: cindex
#: lispref/minibuf.texi:1880
#, no-wrap
msgid "recursive minibuffers"
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:1884
msgid ""
"These functions and variables deal with recursive minibuffers (@pxref"
"{Recursive Editing}):"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1885
#, no-wrap
msgid "minibuffer-depth"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1889
msgid ""
"This function returns the current depth of activations of the minibuffer, a "
"nonnegative integer.  If no minibuffers are active, it returns zero."
msgstr ""

# type: defopt
#: lispref/minibuf.texi:1891
#, no-wrap
msgid "enable-recursive-minibuffers"
msgstr "enable-recursive-minibuffers"

# type: defopt
#: lispref/minibuf.texi:1897
msgid ""
"If this variable is non-@code{nil}, you can invoke commands (such as @code"
"{find-file}) that use minibuffers even while the minibuffer window is "
"active.  Such invocation produces a recursive editing level for a new "
"minibuffer.  The outer-level minibuffer is invisible while you are editing "
"the inner one."
msgstr ""

# type: defopt
#: lispref/minibuf.texi:1901
msgid ""
"If this variable is @code{nil}, you cannot invoke minibuffer commands when "
"the minibuffer window is active, not even if you switch to another window to "
"do it."
msgstr ""

# type: Plain text
#: lispref/minibuf.texi:1911
msgid ""
"If a command name has a property @code{enable-recursive-minibuffers} that is "
"non-@code{nil}, then the command can use the minibuffer to read arguments "
"even if it is invoked from the minibuffer.  A command can also achieve this "
"by binding @code{enable-recursive-minibuffers} to @code{t} in the "
"interactive declaration (@pxref{Using Interactive}).  The minibuffer command "
"@code{next-matching-history-element} (normally @kbd{M-s} in the minibuffer) "
"does the latter."
msgstr ""

# type: section
#: lispref/minibuf.texi:1913
#, no-wrap
msgid "Minibuffer Miscellany"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1915
#, no-wrap
msgid "minibufferp &optional buffer-or-name"
msgstr ""

# type: defun
#: lispref/minibuf.texi:1919
msgid ""
"This function returns non-@code{nil} if @var{buffer-or-name} is a "
"minibuffer.  If @var{buffer-or-name} is omitted, it tests the current buffer."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1924
msgid ""
"This is a normal hook that is run whenever the minibuffer is entered.  @xref"
"{Hooks}."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1929
msgid ""
"This is a normal hook that is run whenever the minibuffer is exited.  @xref"
"{Hooks}."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1931
#, no-wrap
msgid "minibuffer-help-form"
msgstr "minibuffer-help-form"

# type: anchor{#1}
#: lispref/minibuf.texi:1935
msgid "Definition of minibuffer-help-form"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1935
msgid ""
"The current value of this variable is used to rebind @code{help-form} "
"locally inside the minibuffer (@pxref{Help Functions})."
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1937
#, no-wrap
msgid "minibuffer-scroll-window"
msgstr "minibuffer-scroll-window"

# type: anchor{#1}
#: lispref/minibuf.texi:1942
msgid "Definition of minibuffer-scroll-window"
msgstr ""

# type: defvar
#: lispref/minibuf.texi:1942
msgid ""
"If the value of this variable is non-@code{nil}, it should be a window "
"object.  When the function @code{scroll-other-window} is called in the "
"minibuffer, it scrolls this window."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1944
#, no-wrap
msgid "minibuffer-selected-window"
msgstr "minibuffer-selected-window"

# type: defun
#: lispref/minibuf.texi:1948
msgid ""
"This function returns the window which was selected when the minibuffer was "
"entered.  If selected window is not a minibuffer window, it returns @code"
"{nil}."
msgstr ""

# type: defopt
#: lispref/minibuf.texi:1950
#, no-wrap
msgid "max-mini-window-height"
msgstr "max-mini-window-height"

# type: defopt
#: lispref/minibuf.texi:1954
msgid ""
"This variable specifies the maximum height for resizing minibuffer windows.  "
"If a float, it specifies a fraction of the height of the frame.  If an "
"integer, it specifies a number of lines."
msgstr ""

# type: defun
#: lispref/minibuf.texi:1956
#, no-wrap
msgid "minibuffer-message string"
msgstr "minibuffer-message chaîne"

# type: defun
#: lispref/minibuf.texi:1960
msgid ""
"This function displays @var{string} temporarily at the end of the minibuffer "
"text, for two seconds, or until the next input event arrives, whichever "
"comes first."
msgstr ""

# type: ignore
#: lispref/minibuf.texi:1964
#, no-wrap
msgid "   arch-tag: bba7f945-9078-477f-a2ce-18818a6e1218\n"
msgstr "   arch-tag: bba7f945-9078-477f-a2ce-18818a6e1218\n"

# type: menu
#: lispref/modes.texi:8 lispref/vol1.texi:617 lispref/vol2.texi:618
#, no-wrap
msgid "Major and Minor Modes"
msgstr ""

# type: cindex
#: lispref/modes.texi:9
#, no-wrap
msgid "mode"
msgstr ""

# type: Plain text
#: lispref/modes.texi:16
msgid ""
"A @dfn{mode} is a set of definitions that customize Emacs and can be turned "
"on and off while you edit.  There are two varieties of modes: @dfn{major "
"modes}, which are mutually exclusive and used for editing particular kinds "
"of text, and @dfn{minor modes}, which provide features that users can enable "
"individually."
msgstr ""

# type: Plain text
#: lispref/modes.texi:21
msgid ""
"This chapter describes how to write both major and minor modes, how to "
"indicate them in the mode line, and how they run hooks supplied by the "
"user.  For related topics such as keymaps and syntax tables, see @ref"
"{Keymaps}, and @ref{Syntax Tables}."
msgstr ""

# type: menu
#: lispref/modes.texi:32 lispref/modes.texi:34 lispref/modes.texi:35
#: lispref/vol1.texi:623 lispref/vol2.texi:624
#, no-wrap
msgid "Hooks"
msgstr ""

# type: menu
#: lispref/modes.texi:32
msgid "How to use hooks; how to write code that provides hooks."
msgstr ""

# type: menu
#: lispref/modes.texi:32 lispref/modes.texi:173 lispref/modes.texi:174
#: lispref/vol1.texi:623 lispref/vol1.texi:625 lispref/vol2.texi:624
#: lispref/vol2.texi:626
#, no-wrap
msgid "Major Modes"
msgstr ""

# type: menu
#: lispref/modes.texi:32 lispref/vol1.texi:623 lispref/vol2.texi:624
msgid "Defining major modes."
msgstr ""

# type: menu
#: lispref/modes.texi:32 lispref/modes.texi:1177 lispref/modes.texi:1178
#: lispref/vol1.texi:623 lispref/vol1.texi:632 lispref/vol2.texi:624
#: lispref/vol2.texi:633
#, no-wrap
msgid "Minor Modes"
msgstr ""

# type: menu
#: lispref/modes.texi:32 lispref/vol1.texi:623 lispref/vol2.texi:624
msgid "Defining minor modes."
msgstr ""

# type: menu
#: lispref/modes.texi:32 lispref/modes.texi:1527 lispref/vol1.texi:623
#: lispref/vol1.texi:637 lispref/vol2.texi:624 lispref/vol2.texi:638
#, no-wrap
msgid "Mode Line Format"
msgstr ""

# type: menu
#: lispref/modes.texi:32 lispref/vol1.texi:623 lispref/vol2.texi:624
msgid "Customizing the text that appears in the mode line."
msgstr ""

# type: cindex
#: lispref/modes.texi:32 lispref/modes.texi:2155 lispref/modes.texi:2156
#: lispref/modes.texi:2158
#, no-wrap
msgid "Imenu"
msgstr ""

# type: menu
#: lispref/modes.texi:32
msgid "How a mode can provide a menu"
msgstr ""

# type: menu
#: lispref/modes.texi:32
msgid "of definitions in the buffer."
msgstr ""

# type: section
#: lispref/modes.texi:32 lispref/modes.texi:2348 lispref/modes.texi:2349
#, no-wrap
msgid "Font Lock Mode"
msgstr ""

# type: menu
#: lispref/modes.texi:32
msgid "How modes can highlight text according to syntax."
msgstr ""

# type: section
#: lispref/modes.texi:32 lispref/modes.texi:3217 lispref/modes.texi:3218
#, no-wrap
msgid "Desktop Save Mode"
msgstr ""

# type: menu
#: lispref/modes.texi:32
msgid "How modes can have buffer state saved between"
msgstr ""

# type: menu
#: lispref/modes.texi:32
msgid "Emacs sessions."
msgstr ""

# type: cindex
#: lispref/modes.texi:36
#, no-wrap
msgid "hooks"
msgstr ""

# type: Plain text
#: lispref/modes.texi:43
msgid ""
"A @dfn{hook} is a variable where you can store a function or functions to be "
"called on a particular occasion by an existing program.  Emacs provides "
"hooks for the sake of customization.  Most often, hooks are set up in the "
"init file (@pxref{Init File}), but Lisp programs can set them also.  @xref"
"{Standard Hooks}, for a list of standard hook variables."
msgstr ""

# type: cindex
#: lispref/modes.texi:44
#, no-wrap
msgid "normal hook"
msgstr ""

# type: Plain text
#: lispref/modes.texi:50
msgid ""
"Most of the hooks in Emacs are @dfn{normal hooks}.  These variables contain "
"lists of functions to be called with no arguments.  By convention, whenever "
"the hook name ends in @samp{-hook}, that tells you it is normal.  We try to "
"make all hooks normal, as much as possible, so that you can use them in a "
"uniform way."
msgstr ""

# type: Plain text
#: lispref/modes.texi:59
msgid ""
"Every major mode function is supposed to run a normal hook called the @dfn"
"{mode hook} as the one of the last steps of initialization.  This makes it "
"easy for a user to customize the behavior of the mode, by overriding the "
"buffer-local variable assignments already made by the mode.  Most minor mode "
"functions also run a mode hook at the end.  But hooks are used in other "
"contexts too.  For example, the hook @code{suspend-hook} runs just before "
"Emacs suspends itself (@pxref{Suspending Emacs})."
msgstr ""

# type: Plain text
#: lispref/modes.texi:66
msgid ""
"The recommended way to add a hook function to a normal hook is by calling "
"@code{add-hook} (see below).  The hook functions may be any of the valid "
"kinds of functions that @code{funcall} accepts (@pxref{What Is a "
"Function}).  Most normal hook variables are initially void; @code{add-hook} "
"knows how to deal with this.  You can add hooks either globally or buffer-"
"locally with @code{add-hook}."
msgstr ""

# type: cindex
#: lispref/modes.texi:67
#, no-wrap
msgid "abnormal hook"
msgstr ""

# type: Plain text
#: lispref/modes.texi:75
msgid ""
"If the hook variable's name does not end with @samp{-hook}, that indicates "
"it is probably an @dfn{abnormal hook}.  That means the hook functions are "
"called with arguments, or their return values are used in some way.  The "
"hook's documentation says how the functions are called.  You can use @code"
"{add-hook} to add a function to an abnormal hook, but you must write the "
"function to follow the hook's calling convention."
msgstr ""

# type: Plain text
#: lispref/modes.texi:79
msgid ""
"By convention, abnormal hook names end in @samp{-functions} or @samp{-"
"hooks}.  If the variable's name ends in @samp{-function}, then its value is "
"just a single function, not a list of functions."
msgstr ""

# type: Plain text
#: lispref/modes.texi:82
msgid ""
"Here's an example that uses a mode hook to turn on Auto Fill mode when in "
"Lisp Interaction mode:"
msgstr ""

# type: example
#: lispref/modes.texi:85
#, no-wrap
msgid "(add-hook 'lisp-interaction-mode-hook 'turn-on-auto-fill)\n"
msgstr ""

# type: Plain text
#: lispref/modes.texi:89
msgid ""
"At the appropriate time, Emacs uses the @code{run-hooks} function to run "
"particular hooks."
msgstr ""

# type: defun
#: lispref/modes.texi:90
#, no-wrap
msgid "run-hooks &rest hookvars"
msgstr ""

# type: defun
#: lispref/modes.texi:95
msgid ""
"This function takes one or more normal hook variable names as arguments, and "
"runs each hook in turn.  Each argument should be a symbol that is a normal "
"hook variable.  These arguments are processed in the order specified."
msgstr ""

# type: defun
#: lispref/modes.texi:99
msgid ""
"If a hook variable has a non-@code{nil} value, that value should be a list "
"of functions.  @code{run-hooks} calls all the functions, one by one, with no "
"arguments."
msgstr ""

# type: defun
#: lispref/modes.texi:103
msgid ""
"The hook variable's value can also be a single function---either a lambda "
"expression or a symbol with a function definition---which @code{run-hooks} "
"calls.  But this usage is obsolete."
msgstr ""

# type: defun
#: lispref/modes.texi:105
#, no-wrap
msgid "run-hook-with-args hook &rest args"
msgstr ""

# type: defun
#: lispref/modes.texi:109
msgid ""
"This function is the way to run an abnormal hook and always call all of the "
"hook functions.  It calls each of the hook functions one by one, passing "
"each of them the arguments @var{args}."
msgstr ""

# type: defun
#: lispref/modes.texi:111
#, no-wrap
msgid "run-hook-with-args-until-failure hook &rest args"
msgstr ""

# type: defun
#: lispref/modes.texi:117
msgid ""
"This function is the way to run an abnormal hook until one of the hook "
"functions fails.  It calls each of the hook functions, passing each of them "
"the arguments @var{args}, until some hook function returns @code{nil}.  It "
"then stops and returns @code{nil}.  If none of the hook functions return "
"@code{nil}, it returns a non-@code{nil} value."
msgstr ""

# type: defun
#: lispref/modes.texi:119
#, no-wrap
msgid "run-hook-with-args-until-success hook &rest args"
msgstr ""

# type: defun
#: lispref/modes.texi:126
msgid ""
"This function is the way to run an abnormal hook until a hook function "
"succeeds.  It calls each of the hook functions, passing each of them the "
"arguments @var{args}, until some hook function returns non-@code{nil}.  Then "
"it stops, and returns whatever was returned by the last hook function that "
"was called.  If all hook functions return @code{nil}, it returns @code{nil} "
"as well."
msgstr ""

# type: defun
#: lispref/modes.texi:128
#, no-wrap
msgid "add-hook hook function &optional append local"
msgstr ""

# type: defun
#: lispref/modes.texi:133
msgid ""
"This function is the handy way to add function @var{function} to hook "
"variable @var{hook}.  You can use it for abnormal hooks as well as for "
"normal hooks.  @var{function} can be any Lisp function that can accept the "
"proper number of arguments for @var{hook}.  For example,"
msgstr ""

# type: example
#: lispref/modes.texi:136
#, no-wrap
msgid "(add-hook 'text-mode-hook 'my-text-hook-function)\n"
msgstr ""

# type: defun
#: lispref/modes.texi:140
msgid ""
"adds @code{my-text-hook-function} to the hook called @code{text-mode-hook}."
msgstr ""

# type: defun
#: lispref/modes.texi:143
msgid ""
"If @var{function} is already present in @var{hook} (comparing using @code"
"{equal}), then @code{add-hook} does not add it a second time."
msgstr ""

# type: defun
#: lispref/modes.texi:151
msgid ""
"It is best to design your hook functions so that the order in which they are "
"executed does not matter.  Any dependence on the order is ``asking for "
"trouble.'' However, the order is predictable: normally, @var{function} goes "
"at the front of the hook list, so it will be executed first (barring another "
"@code{add-hook} call).  If the optional argument @var{append} is non-@code"
"{nil}, the new hook function goes at the end of the hook list and will be "
"executed last."
msgstr ""

# type: defun
#: lispref/modes.texi:155
msgid ""
"@code{add-hook} can handle the cases where @var{hook} is void or its value "
"is a single function; it sets or changes the value to a list of functions."
msgstr ""

# type: defun
#: lispref/modes.texi:161
msgid ""
"If @var{local} is non-@code{nil}, that says to add @var{function} to the "
"buffer-local hook list instead of to the global hook list.  If needed, this "
"makes the hook buffer-local and adds @code{t} to the buffer-local value.  "
"The latter acts as a flag to run the hook functions in the default value as "
"well as in the local value."
msgstr ""

# type: defun
#: lispref/modes.texi:163
#, no-wrap
msgid "remove-hook hook function &optional local"
msgstr ""

# type: defun
#: lispref/modes.texi:168
msgid ""
"This function removes @var{function} from the hook variable @var{hook}.  It "
"compares @var{function} with elements of @var{hook} using @code{equal}, so "
"it works for both symbols and lambda expressions."
msgstr ""

# type: defun
#: lispref/modes.texi:171
msgid ""
"If @var{local} is non-@code{nil}, that says to remove @var{function} from "
"the buffer-local hook list instead of from the global hook list."
msgstr ""

# type: cindex
#: lispref/modes.texi:175
#, no-wrap
msgid "major mode"
msgstr ""

# type: Plain text
#: lispref/modes.texi:184
msgid ""
"Major modes specialize Emacs for editing particular kinds of text.  Each "
"buffer has only one major mode at a time.  For each major mode there is a "
"function to switch to that mode in the current buffer; its name should end "
"in @samp{-mode}.  These functions work by setting buffer-local variable "
"bindings and other data associated with the buffer, such as a local keymap.  "
"The effect lasts until you switch to another major mode in the same buffer."
msgstr ""

# type: subsection
#: lispref/modes.texi:196 lispref/modes.texi:198 lispref/modes.texi:199
#, no-wrap
msgid "Major Mode Basics"
msgstr ""

# type: menu
#: lispref/modes.texi:196 lispref/modes.texi:253 lispref/modes.texi:254
#: lispref/vol1.texi:630 lispref/vol2.texi:631
#, no-wrap
msgid "Major Mode Conventions"
msgstr ""

# type: menu
#: lispref/modes.texi:196 lispref/vol1.texi:630 lispref/vol2.texi:631
msgid "Coding conventions for keymaps, etc."
msgstr ""

# type: menu
#: lispref/modes.texi:196 lispref/modes.texi:498 lispref/vol1.texi:630
#: lispref/vol2.texi:631
#, no-wrap
msgid "Auto Major Mode"
msgstr ""

# type: menu
#: lispref/modes.texi:196 lispref/vol1.texi:630 lispref/vol2.texi:631
msgid "How Emacs chooses the major mode automatically."
msgstr ""

# type: menu
#: lispref/modes.texi:196 lispref/modes.texi:681 lispref/vol1.texi:630
#: lispref/vol2.texi:631
#, no-wrap
msgid "Mode Help"
msgstr ""

# type: menu
#: lispref/modes.texi:196 lispref/vol1.texi:630 lispref/vol2.texi:631
msgid "Finding out how to use a mode."
msgstr ""

# type: node
#: lispref/modes.texi:196 lispref/modes.texi:710
#, no-wrap
msgid "Derived Modes"
msgstr ""

# type: menu
#: lispref/modes.texi:196
msgid "Defining a new major mode based on another major"
msgstr ""

# type: menu
#: lispref/modes.texi:196
msgid "mode."
msgstr ""

# type: subsection
#: lispref/modes.texi:196 lispref/modes.texi:810 lispref/modes.texi:811
#, no-wrap
msgid "Generic Modes"
msgstr ""

# type: menu
#: lispref/modes.texi:196
msgid "Defining a simple major mode that supports"
msgstr ""

# type: menu
#: lispref/modes.texi:196
msgid "comment syntax and Font Lock mode."
msgstr ""

# type: subsection
#: lispref/modes.texi:196 lispref/modes.texi:851 lispref/modes.texi:852
#, no-wrap
msgid "Mode Hooks"
msgstr ""

# type: menu
#: lispref/modes.texi:196
msgid "Hooks run at the end of major mode functions."
msgstr ""

# type: menu
#: lispref/modes.texi:196 lispref/modes.texi:902 lispref/vol1.texi:630
#: lispref/vol2.texi:631
#, no-wrap
msgid "Example Major Modes"
msgstr ""

# type: menu
#: lispref/modes.texi:196 lispref/vol1.texi:630 lispref/vol2.texi:631
msgid "Text mode and Lisp modes."
msgstr ""

# type: cindex
#: lispref/modes.texi:200
#, no-wrap
msgid "Fundamental mode"
msgstr ""

# type: Plain text
#: lispref/modes.texi:209
msgid ""
"The least specialized major mode is called @dfn{Fundamental mode}.  This "
"mode has no mode-specific definitions or variable settings, so each Emacs "
"command behaves in its default manner, and each option is in its default "
"state.  All other major modes redefine various keys and options.  For "
"example, Lisp Interaction mode provides special key bindings for @kbd{C-j} "
"(@code{eval-print-last-sexp}), @key{TAB} (@code{lisp-indent-line}), and "
"other keys."
msgstr ""

# type: Plain text
#: lispref/modes.texi:214
msgid ""
"When you need to write several editing commands to help you perform a "
"specialized editing task, creating a new major mode is usually a good idea.  "
"In practice, writing a major mode is easy (in contrast to writing a minor "
"mode, which is often difficult)."
msgstr ""

# type: Plain text
#: lispref/modes.texi:223
msgid ""
"If the new mode is similar to an old one, it is often unwise to modify the "
"old one to serve two purposes, since it may become harder to use and "
"maintain.  Instead, copy and rename an existing major mode definition and "
"alter the copy---or use @code{define-derived-mode} to define a @dfn{derived "
"mode} (@pxref{Derived Modes}).  For example, Rmail Edit mode is a major mode "
"that is very similar to Text mode except that it provides two additional "
"commands.  Its definition is distinct from that of Text mode, but uses that "
"of Text mode."
msgstr ""

# type: Plain text
#: lispref/modes.texi:228
msgid ""
"Even if the new mode is not an obvious derivative of any other mode, it is "
"convenient to use @code{define-derived-mode} with a @code{nil} parent "
"argument, since it automatically enforces the most important coding "
"conventions for you."
msgstr ""

# type: Plain text
#: lispref/modes.texi:232
msgid ""
"For a very simple programming language major mode that handles comments and "
"fontification, you can use @code{define-generic-mode}.  @xref{Generic Modes}."
msgstr ""

# type: Plain text
#: lispref/modes.texi:244
msgid ""
"Rmail Edit mode offers an example of changing the major mode temporarily for "
"a buffer, so it can be edited in a different way (with ordinary Emacs "
"commands rather than Rmail commands).  In such cases, the temporary major "
"mode usually provides a command to switch back to the buffer's usual mode "
"(Rmail mode, in this case).  You might be tempted to present the temporary "
"redefinitions inside a recursive edit and restore the usual ones when the "
"user exits; but this is a bad idea because it constrains the user's options "
"when it is done in more than one buffer: recursive edits must be exited most-"
"recently-entered first.  Using an alternative major mode avoids this "
"limitation.  @xref{Recursive Editing}."
msgstr ""

# type: Plain text
#: lispref/modes.texi:252
msgid ""
"The standard GNU Emacs Lisp library directory tree contains the code for "
"several major modes, in files such as @file{text-mode.el}, @file{texinfo."
"el}, @file{lisp-mode.el}, @file{c-mode.el}, and @file{rmail.el}.  They are "
"found in various subdirectories of the @file{lisp} directory.  You can study "
"these libraries to see how modes are written.  Text mode is perhaps the "
"simplest major mode aside from Fundamental mode.  Rmail mode is a "
"complicated and specialized mode."
msgstr ""

# type: cindex
#: lispref/modes.texi:255
#, no-wrap
msgid "major mode conventions"
msgstr ""

# type: cindex
#: lispref/modes.texi:256
#, no-wrap
msgid "conventions for writing major modes"
msgstr ""

# type: Plain text
#: lispref/modes.texi:264
msgid ""
"The code for existing major modes follows various coding conventions, "
"including conventions for local keymap and syntax table initialization, "
"global names, and hooks.  Please follow these conventions when you define a "
"new major mode.  (Fundamental mode is an exception to many of these "
"conventions, because its definition is to present the global state of Emacs.)"
msgstr ""

# type: Plain text
#: lispref/modes.texi:271
msgid ""
"This list of conventions is only partial, because each major mode should aim "
"for consistency in general with other Emacs major modes.  This makes Emacs "
"as a whole more coherent.  It is impossible to list here all the possible "
"points where this issue might come up; if the Emacs developers point out an "
"area where your major mode deviates from the usual conventions, please make "
"it compatible."
msgstr ""

# type: itemize
#: lispref/modes.texi:278
msgid ""
"Define a command whose name ends in @samp{-mode}, with no arguments, that "
"switches to the new mode in the current buffer.  This command should set up "
"the keymap, syntax table, and buffer-local variables in an existing buffer, "
"without changing the buffer's contents."
msgstr ""

# type: itemize
#: lispref/modes.texi:283
msgid ""
"Write a documentation string for this command that describes the special "
"commands available in this mode.  @kbd{C-h m} (@code{describe-mode}) in your "
"mode will display this string."
msgstr ""

# type: itemize
#: lispref/modes.texi:289
msgid ""
"The documentation string may include the special documentation substrings, "
"@samp{\\[@var{command}]}, @samp{\\@{@var{keymap}@}}, and @samp{\\<@var"
"{keymap}>}, which enable the documentation to adapt automatically to the "
"user's own key bindings.  @xref{Keys in Documentation}."
msgstr ""

# type: itemize
#: lispref/modes.texi:296
msgid ""
"The major mode command should start by calling @code{kill-all-local-"
"variables}.  This runs the normal hook @code{change-major-mode-hook}, then "
"gets rid of the buffer-local variables of the major mode previously in "
"effect.  @xref{Creating Buffer-Local}."
msgstr ""

# type: itemize
#: lispref/modes.texi:301
msgid ""
"The major mode command should set the variable @code{major-mode} to the "
"major mode command symbol.  This is how @code{describe-mode} discovers which "
"documentation to print."
msgstr ""

# type: itemize
#: lispref/modes.texi:306
msgid ""
"The major mode command should set the variable @code{mode-name} to the "
"``pretty'' name of the mode, as a string.  This string appears in the mode "
"line."
msgstr ""

# type: cindex
#: lispref/modes.texi:308
#, no-wrap
msgid "functions in modes"
msgstr ""

# type: itemize
#: lispref/modes.texi:313
msgid ""
"Since all global names are in the same name space, all the global variables, "
"constants, and functions that are part of the mode should have names that "
"start with the major mode name (or with an abbreviation of it if the name is "
"long).  @xref{Coding Conventions}."
msgstr ""

# type: itemize
#: lispref/modes.texi:320
msgid ""
"In a major mode for editing some kind of structured text, such as a "
"programming language, indentation of text according to structure is probably "
"useful.  So the mode should set @code{indent-line-function} to a suitable "
"function, and probably customize other variables for indentation."
msgstr ""

# type: cindex
#: lispref/modes.texi:322
#, no-wrap
msgid "keymaps in modes"
msgstr ""

# type: itemize
#: lispref/modes.texi:327
msgid ""
"The major mode should usually have its own keymap, which is used as the "
"local keymap in all buffers in that mode.  The major mode command should "
"call @code{use-local-map} to install this local map.  @xref{Active Keymaps}, "
"for more information."
msgstr ""

# type: itemize
#: lispref/modes.texi:331
msgid ""
"This keymap should be stored permanently in a global variable named @code"
"{@var{modename}-mode-map}.  Normally the library that defines the mode sets "
"this variable."
msgstr ""

# type: itemize
#: lispref/modes.texi:334
msgid ""
"@xref{Tips for Defining}, for advice about how to write the code to set up "
"the mode's keymap variable."
msgstr ""

# type: itemize
#: lispref/modes.texi:341
msgid ""
"The key sequences bound in a major mode keymap should usually start with @kbd"
"{C-c}, followed by a control character, a digit, or @kbd{@{}, @kbd{@}}, @kbd"
"{<}, @kbd{>}, @kbd{:} or @kbd{;}.  The other punctuation characters are "
"reserved for minor modes, and ordinary letters are reserved for users."
msgstr ""

# type: itemize
#: lispref/modes.texi:346
msgid ""
"A major mode can also rebind the keys @kbd{M-n}, @kbd{M-p} and @kbd{M-s}.  "
"The bindings for @kbd{M-n} and @kbd{M-p} should normally be some kind of "
"``moving forward and backward,'' but this does not necessarily mean cursor "
"motion."
msgstr ""

# type: itemize
#: lispref/modes.texi:353
msgid ""
"It is legitimate for a major mode to rebind a standard key sequence if it "
"provides a command that does ``the same job'' in a way better suited to the "
"text this mode is used for.  For example, a major mode for editing a "
"programming language might redefine @kbd{C-M-a} to ``move to the beginning "
"of a function'' in a way that works better for that language."
msgstr ""

# type: itemize
#: lispref/modes.texi:360
msgid ""
"It is also legitimate for a major mode to rebind a standard key sequence "
"whose standard meaning is rarely useful in that mode.  For instance, "
"minibuffer modes rebind @kbd{M-r}, whose standard meaning is rarely of any "
"use in the minibuffer.  Major modes such as Dired or Rmail that do not allow "
"self-insertion of text can reasonably redefine letters and other printing "
"characters as special commands."
msgstr ""

# type: itemize
#: lispref/modes.texi:367
msgid ""
"Major modes modes for editing text should not define @key{RET} to do "
"anything other than insert a newline.  However, it is ok for specialized "
"modes for text that users don't directly edit, such as Dired and Info modes, "
"to redefine @key{RET} to do something entirely different."
msgstr ""

# type: itemize
#: lispref/modes.texi:374
msgid ""
"Major modes should not alter options that are primarily a matter of user "
"preference, such as whether Auto-Fill mode is enabled.  Leave this to each "
"user to decide.  However, a major mode should customize other variables so "
"that Auto-Fill mode will work usefully @emph{if} the user decides to use it."
msgstr ""

# type: cindex
#: lispref/modes.texi:376
#, no-wrap
msgid "syntax tables in modes"
msgstr ""

# type: itemize
#: lispref/modes.texi:381
msgid ""
"The mode may have its own syntax table or may share one with other related "
"modes.  If it has its own syntax table, it should store this in a variable "
"named @code{@var{modename}-mode-syntax-table}.  @xref{Syntax Tables}."
msgstr ""

# type: itemize
#: lispref/modes.texi:386
msgid ""
"If the mode handles a language that has a syntax for comments, it should set "
"the variables that define the comment syntax.  @xref{Options for Comments,, "
"Options Controlling Comments, emacs, The GNU Emacs Manual}."
msgstr ""

# type: cindex
#: lispref/modes.texi:388
#, no-wrap
msgid "abbrev tables in modes"
msgstr ""

# type: itemize
#: lispref/modes.texi:395
msgid ""
"The mode may have its own abbrev table or may share one with other related "
"modes.  If it has its own abbrev table, it should store this in a variable "
"named @code{@var{modename}-mode-abbrev-table}.  If the major mode command "
"defines any abbrevs itself, it should pass @code{t} for the @var{system-"
"flag} argument to @code{define-abbrev}.  @xref{Defining Abbrevs}."
msgstr ""

# type: itemize
#: lispref/modes.texi:400
msgid ""
"The mode should specify how to do highlighting for Font Lock mode, by "
"setting up a buffer-local value for the variable @code{font-lock-defaults} "
"(@pxref{Font Lock Mode})."
msgstr ""

# type: itemize
#: lispref/modes.texi:408
msgid ""
"The mode should specify how Imenu should find the definitions or sections of "
"a buffer, by setting up a buffer-local value for the variable @code{imenu-"
"generic-expression}, for the two variables @code{imenu-prev-index-position-"
"function} and @code{imenu-extract-index-name-function}, or for the variable "
"@code{imenu-create-index-function} (@pxref{Imenu})."
msgstr ""

# type: itemize
#: lispref/modes.texi:413
msgid ""
"The mode can specify a local value for @code{eldoc-documentation-function} "
"to tell ElDoc mode how to handle this mode."
msgstr ""

# type: itemize
#: lispref/modes.texi:418
msgid ""
"Use @code{defvar} or @code{defcustom} to set mode-related variables, so that "
"they are not reinitialized if they already have a value.  (Such "
"reinitialization could discard customizations made by the user.)"
msgstr ""

# type: cindex
#: lispref/modes.texi:420
#, no-wrap
msgid "buffer-local variables in modes"
msgstr ""

# type: itemize
#: lispref/modes.texi:427
msgid ""
"To make a buffer-local binding for an Emacs customization variable, use @code"
"{make-local-variable} in the major mode command, not @code{make-variable-"
"buffer-local}.  The latter function would make the variable local to every "
"buffer in which it is subsequently set, which would affect buffers that do "
"not use this mode.  It is undesirable for a mode to have such global "
"effects.  @xref{Buffer-Local Variables}."
msgstr ""

# type: itemize
#: lispref/modes.texi:432
msgid ""
"With rare exceptions, the only reasonable way to use @code{make-variable-"
"buffer-local} in a Lisp package is for a variable which is used only within "
"that package.  Using it on a variable used by other packages would interfere "
"with them."
msgstr ""

# type: cindex
#: lispref/modes.texi:434
#, no-wrap
msgid "mode hook"
msgstr ""

# type: cindex
#: lispref/modes.texi:435
#, no-wrap
msgid "major mode hook"
msgstr ""

# type: itemize
#: lispref/modes.texi:441
msgid ""
"Each major mode should have a normal @dfn{mode hook} named @code{@var"
"{modename}-mode-hook}.  The very last thing the major mode command should do "
"is to call @code{run-mode-hooks}.  This runs the mode hook, and then runs "
"the normal hook @code{after-change-major-mode-hook}.  @xref{Mode Hooks}."
msgstr ""

# type: itemize
#: lispref/modes.texi:451
msgid ""
"The major mode command may start by calling some other major mode command "
"(called the @dfn{parent mode}) and then alter some of its settings.  A mode "
"that does this is called a @dfn{derived mode}.  The recommended way to "
"define one is to use @code{define-derived-mode}, but this is not required.  "
"Such a mode should call the parent mode command inside a @code{delay-mode-"
"hooks} form.  (Using @code{define-derived-mode} does this automatically.)  "
"@xref{Derived Modes}, and @ref{Mode Hooks}."
msgstr ""

# type: itemize
#: lispref/modes.texi:456
msgid ""
"If something special should be done if the user switches a buffer from this "
"mode to any other major mode, this mode can set up a buffer-local value for "
"@code{change-major-mode-hook} (@pxref{Creating Buffer-Local})."
msgstr ""

# type: itemize
#: lispref/modes.texi:461
msgid ""
"If this mode is appropriate only for specially-prepared text, then the major "
"mode command symbol should have a property named @code{mode-class} with "
"value @code{special}, put on as follows:"
msgstr ""

# type: kindex
#: lispref/modes.texi:462
#, no-wrap
msgid "mode-class @r{(property)}"
msgstr ""

# type: code{#1}
#: lispref/modes.texi:463
#, no-wrap
msgid "special"
msgstr ""

# type: example
#: lispref/modes.texi:466
#, no-wrap
msgid "(put 'funny-mode 'mode-class 'special)\n"
msgstr ""

# type: itemize
#: lispref/modes.texi:473
msgid ""
"This tells Emacs that new buffers created while the current buffer is in "
"Funny mode should not inherit Funny mode, in case @code{default-major-mode} "
"is @code{nil}.  Modes such as Dired, Rmail, and Buffer List use this feature."
msgstr ""

# type: itemize
#: lispref/modes.texi:484
msgid ""
"If you want to make the new mode the default for files with certain "
"recognizable names, add an element to @code{auto-mode-alist} to select the "
"mode for those file names (@pxref{Auto Major Mode}).  If you define the mode "
"command to autoload, you should add this element in the same file that calls "
"@code{autoload}.  If you use an autoload cookie for the mode command, you "
"can also use an autoload cookie for the form that adds the element (@pxref"
"{autoload cookie}).  If you do not autoload the mode command, it is "
"sufficient to add the element in the file that contains the mode definition."
msgstr ""

# type: itemize
#: lispref/modes.texi:490
msgid ""
"In the comments that document the file, you should provide a sample @code"
"{autoload} form and an example of how to add to @code{auto-mode-alist}, that "
"users can include in their init files (@pxref{Init File})."
msgstr ""

# type: cindex
#: lispref/modes.texi:492
#, no-wrap
msgid "mode loading"
msgstr ""

# type: itemize
#: lispref/modes.texi:496
msgid ""
"The top-level forms in the file defining the mode should be written so that "
"they may be evaluated more than once without adverse consequences.  Even if "
"you never load the file more than once, someone else will."
msgstr ""

# type: subsection
#: lispref/modes.texi:499
#, no-wrap
msgid "How Emacs Chooses a Major Mode"
msgstr ""

# type: cindex
#: lispref/modes.texi:500
#, no-wrap
msgid "major mode, automatic selection"
msgstr ""

# type: Plain text
#: lispref/modes.texi:505
msgid ""
"Based on information in the file name or in the file itself, Emacs "
"automatically selects a major mode for the new buffer when a file is "
"visited.  It also processes local variables specified in the file text."
msgstr ""

# type: deffn
#: lispref/modes.texi:506
#, no-wrap
msgid "Command fundamental-mode"
msgstr ""

# type: deffn
#: lispref/modes.texi:514
msgid ""
"Fundamental mode is a major mode that is not specialized for anything in "
"particular.  Other major modes are defined in effect by comparison with this "
"one---their definitions say what to change, starting from Fundamental mode.  "
"The @code{fundamental-mode} function does @emph{not} run any mode hooks; "
"you're not supposed to customize it.  (If you want Emacs to behave "
"differently in Fundamental mode, change the @emph{global} state of Emacs.)"
msgstr ""

# type: deffn
#: lispref/modes.texi:516
#, no-wrap
msgid "Command normal-mode &optional find-file"
msgstr ""

# type: deffn
#: lispref/modes.texi:522
msgid ""
"This function establishes the proper major mode and buffer-local variable "
"bindings for the current buffer.  First it calls @code{set-auto-mode} (see "
"below), then it runs @code{hack-local-variables} to parse, and bind or "
"evaluate as appropriate, the file's local variables (@pxref{File Local "
"Variables})."
msgstr ""

# type: deffn
#: lispref/modes.texi:530
msgid ""
"If the @var{find-file} argument to @code{normal-mode} is non-@code{nil}, "
"@code{normal-mode} assumes that the @code{find-file} function is calling "
"it.  In this case, it may process local variables in the @samp{-*-} line or "
"at the end of the file.  The variable @code{enable-local-variables} controls "
"whether to do so.  @xref{File Variables, , Local Variables in Files, emacs, "
"The GNU Emacs Manual}, for the syntax of the local variables section of a "
"file."
msgstr ""

# type: deffn
#: lispref/modes.texi:534
msgid ""
"If you run @code{normal-mode} interactively, the argument @var{find-file} is "
"normally @code{nil}.  In this case, @code{normal-mode} unconditionally "
"processes any file local variables."
msgstr ""

# type: deffn
#: lispref/modes.texi:540
msgid ""
"If @code{normal-mode} processes the local variables list and this list "
"specifies a major mode, that mode overrides any mode chosen by @code{set-"
"auto-mode}.  If neither @code{set-auto-mode} nor @code{hack-local-variables} "
"specify a major mode, the buffer stays in the major mode determined by @code"
"{default-major-mode} (see below)."
msgstr ""

# type: cindex
#: lispref/modes.texi:541
#, no-wrap
msgid "file mode specification error"
msgstr ""

# type: deffn
#: lispref/modes.texi:545
msgid ""
"@code{normal-mode} uses @code{condition-case} around the call to the major "
"mode function, so errors are caught and reported as a @samp{File mode "
"specification error}, followed by the original error message."
msgstr ""

# type: defun
#: lispref/modes.texi:547
#, no-wrap
msgid "set-auto-mode &optional keep-mode-if-same"
msgstr ""

# type: cindex
#: lispref/modes.texi:548
#, no-wrap
msgid "visited file mode"
msgstr ""

# type: defun
#: lispref/modes.texi:560
msgid ""
"This function selects the major mode that is appropriate for the current "
"buffer.  It bases its decision (in order of precedence) on the @w{@samp{-"
"*-}} line, on the @w{@samp{#!}} line (using @code{interpreter-mode-alist}), "
"on the text at the beginning of the buffer (using @code{magic-mode-alist}), "
"and finally on the visited file name (using @code{auto-mode-alist}).  @xref"
"{Choosing Modes, , How Major Modes are Chosen, emacs, The GNU Emacs "
"Manual}.  However, this function does not look for the @samp{mode:} local "
"variable near the end of a file; the @code{hack-local-variables} function "
"does that.  If @code{enable-local-variables} is @code{nil}, @code{set-auto-"
"mode} does not check the @w{@samp{-*-}} line for a mode tag either."
msgstr ""

# type: defun
#: lispref/modes.texi:566
msgid ""
"If @var{keep-mode-if-same} is non-@code{nil}, this function does not call "
"the mode command if the buffer is already in the proper major mode.  For "
"instance, @code{set-visited-file-name} sets this to @code{t} to avoid "
"killing buffer local variables that the user may have set."
msgstr ""

# type: defopt
#: lispref/modes.texi:568
#, no-wrap
msgid "default-major-mode"
msgstr "default-major-mode"

# type: defopt
#: lispref/modes.texi:571
msgid ""
"This variable holds the default major mode for new buffers.  The standard "
"value is @code{fundamental-mode}."
msgstr ""

# type: defopt
#: lispref/modes.texi:579
msgid ""
"If the value of @code{default-major-mode} is @code{nil}, Emacs uses the "
"(previously) current buffer's major mode as the default major mode of a new "
"buffer.  However, if that major mode symbol has a @code{mode-class} property "
"with value @code{special}, then it is not used for new buffers; Fundamental "
"mode is used instead.  The modes that have this property are those such as "
"Dired and Rmail that are useful only with text that has been specially "
"prepared."
msgstr ""

# type: defun
#: lispref/modes.texi:581
#, no-wrap
msgid "set-buffer-major-mode buffer"
msgstr ""

# type: defun
#: lispref/modes.texi:587
msgid ""
"This function sets the major mode of @var{buffer} to the value of @code"
"{default-major-mode}; if that variable is @code{nil}, it uses the current "
"buffer's major mode (if that is suitable).  As an exception, if @var"
"{buffer}'s name is @samp{*scratch*}, it sets the mode to @code{initial-major-"
"mode}."
msgstr ""

# type: defun
#: lispref/modes.texi:591
msgid ""
"The low-level primitives for creating buffers do not use this function, but "
"medium-level commands such as @code{switch-to-buffer} and @code{find-file-"
"noselect} use it whenever they create buffers."
msgstr ""

# type: defopt
#: lispref/modes.texi:593
#, no-wrap
msgid "initial-major-mode"
msgstr "initial-major-mode"

# type: samp{#1}
#: lispref/modes.texi:594
#, no-wrap
msgid "*scratch*"
msgstr ""

# type: defopt
#: lispref/modes.texi:598
msgid ""
"The value of this variable determines the major mode of the initial @samp"
"{*scratch*} buffer.  The value should be a symbol that is a major mode "
"command.  The default value is @code{lisp-interaction-mode}."
msgstr ""

# type: defvar
#: lispref/modes.texi:600
#, no-wrap
msgid "interpreter-mode-alist"
msgstr "interpreter-mode-alist"

# type: defvar
#: lispref/modes.texi:607
msgid ""
"This variable specifies major modes to use for scripts that specify a "
"command interpreter in a @samp{#!} line.  Its value is an alist with "
"elements of the form @code{(@var{interpreter} . @var{mode})}; for example, "
"@code{(\"perl\" . perl-mode)} is one element present by default.  The "
"element says to use mode @var{mode} if the file specifies an interpreter "
"which matches @var{interpreter}."
msgstr ""

# type: defvar
#: lispref/modes.texi:609
#, no-wrap
msgid "magic-mode-alist"
msgstr ""

# type: defvar
#: lispref/modes.texi:617
msgid ""
"This variable's value is an alist with elements of the form @code{(@var"
"{regexp} .  @var{function})}, where @var{regexp} is a regular expression and "
"@var{function} is a function or @code{nil}.  After visiting a file, @code"
"{set-auto-mode} calls @var{function} if the text at the beginning of the "
"buffer matches @var{regexp} and @var{function} is non-@code{nil}; if @var"
"{function} is @code{nil}, @code{auto-mode-alist} gets to decide the mode."
msgstr ""

# type: defvar
#: lispref/modes.texi:619
#, no-wrap
msgid "magic-fallback-mode-alist"
msgstr ""

# type: defvar
#: lispref/modes.texi:622
msgid ""
"This works like @code{magic-mode-alist}, except that it is handled only if "
"@code{auto-mode-alist} does not specify a mode for this file."
msgstr ""

# type: defvar
#: lispref/modes.texi:624
#, no-wrap
msgid "auto-mode-alist"
msgstr ""

# type: defvar
#: lispref/modes.texi:630
msgid ""
"This variable contains an association list of file name patterns (regular "
"expressions) and corresponding major mode commands.  Usually, the file name "
"patterns test for suffixes, such as @samp{.el} and @samp{.c}, but this need "
"not be the case.  An ordinary element of the alist looks like @code{(@var"
"{regexp} .  @var{mode-function})}."
msgstr ""

# type: group
#: lispref/modes.texi:638
#, no-wrap
msgid ""
"((\"\\\\`/tmp/fol/\" . text-mode)\n"
" (\"\\\\.texinfo\\\\'\" . texinfo-mode)\n"
" (\"\\\\.texi\\\\'\" . texinfo-mode)\n"
msgstr ""

# type: group
#: lispref/modes.texi:644
#, no-wrap
msgid ""
" (\"\\\\.el\\\\'\" . emacs-lisp-mode)\n"
" (\"\\\\.c\\\\'\" . c-mode)\n"
" (\"\\\\.h\\\\'\" . c-mode)\n"
" @dots{})\n"
msgstr ""

# type: defvar
#: lispref/modes.texi:653
msgid ""
"When you visit a file whose expanded file name (@pxref{File Name "
"Expansion}), with version numbers and backup suffixes removed using @code"
"{file-name-sans-versions} (@pxref{File Name Components}), matches a @var"
"{regexp}, @code{set-auto-mode} calls the corresponding @var{mode-function}.  "
"This feature enables Emacs to select the proper major mode for most files."
msgstr ""

# type: defvar
#: lispref/modes.texi:661
msgid ""
"If an element of @code{auto-mode-alist} has the form @code{(@var{regexp} @var"
"{function} t)}, then after calling @var{function}, Emacs searches @code{auto-"
"mode-alist} again for a match against the portion of the file name that did "
"not match before.  This feature is useful for uncompression packages: an "
"entry of the form @code{(\"\\\\.gz\\\\'\" @var{function} t)} can uncompress "
"the file and then put the uncompressed file in the proper mode according to "
"the name sans @samp{.gz}."
msgstr ""

# type: defvar
#: lispref/modes.texi:665
msgid ""
"Here is an example of how to prepend several pattern pairs to @code{auto-"
"mode-alist}.  (You might use this sort of expression in your init file.)"
msgstr ""

# type: group
#: lispref/modes.texi:677
#, no-wrap
msgid ""
"(setq auto-mode-alist\n"
"  (append\n"
"   ;; @r{File name (within directory) starts with a dot.}\n"
"   '((\"/\\\\.[^/]*\\\\'\" . fundamental-mode)\n"
"     ;; @r{File name has no dot.}\n"
"     (\"[^\\\\./]*\\\\'\" . fundamental-mode)\n"
"     ;; @r{File name ends in @samp{.C}.}\n"
"     (\"\\\\.C\\\\'\" . c++-mode))\n"
"   auto-mode-alist))\n"
msgstr ""

# type: subsection
#: lispref/modes.texi:682
#, no-wrap
msgid "Getting Help about a Major Mode"
msgstr ""

# type: cindex
#: lispref/modes.texi:683
#, no-wrap
msgid "mode help"
msgstr ""

# type: cindex
#: lispref/modes.texi:684
#, no-wrap
msgid "help for major mode"
msgstr ""

# type: cindex
#: lispref/modes.texi:685
#, no-wrap
msgid "documentation for major mode"
msgstr ""

# type: Plain text
#: lispref/modes.texi:692
msgid ""
"The @code{describe-mode} function is used to provide information about major "
"modes.  It is normally called with @kbd{C-h m}.  The @code{describe-mode} "
"function uses the value of @code{major-mode}, which is why every major mode "
"function needs to set the @code{major-mode} variable."
msgstr ""

# type: deffn
#: lispref/modes.texi:693
#, no-wrap
msgid "Command describe-mode"
msgstr ""

# type: deffn
#: lispref/modes.texi:695
msgid "This function displays the documentation of the current major mode."
msgstr ""

# type: deffn
#: lispref/modes.texi:700
msgid ""
"The @code{describe-mode} function calls the @code{documentation} function "
"using the value of @code{major-mode} as an argument.  Thus, it displays the "
"documentation string of the major mode function.  (@xref{Accessing "
"Documentation}.)"
msgstr ""

# type: defvar
#: lispref/modes.texi:708
msgid ""
"This buffer-local variable holds the symbol for the current buffer's major "
"mode.  This symbol should have a function definition that is the command to "
"switch to that major mode.  The @code{describe-mode} function uses the "
"documentation string of the function as the documentation of the major mode."
msgstr ""

# type: subsection
#: lispref/modes.texi:711
#, no-wrap
msgid "Defining Derived Modes"
msgstr ""

# type: cindex
#: lispref/modes.texi:712
#, no-wrap
msgid "derived mode"
msgstr ""

# type: Plain text
#: lispref/modes.texi:716
msgid ""
"It's often useful to define a new major mode in terms of an existing one.  "
"An easy way to do this is to use @code{define-derived-mode}."
msgstr ""

# type: defmac
#: lispref/modes.texi:717
#, no-wrap
msgid "define-derived-mode variant parent name docstring keyword-args@dots{} body@dots{}"
msgstr ""

# type: defmac
#: lispref/modes.texi:721
msgid ""
"This construct defines @var{variant} as a major mode command, using @var"
"{name} as the string form of the mode name.  @var{variant} and @var{parent} "
"should be unquoted symbols."
msgstr ""

# type: defmac
#: lispref/modes.texi:724
msgid ""
"The new command @var{variant} is defined to call the function @var{parent}, "
"then override certain aspects of that parent mode:"
msgstr ""

# type: itemize
#: lispref/modes.texi:731
msgid ""
"The new mode has its own sparse keymap, named @code{@var{variant}-map}.  "
"@code{define-derived-mode} makes the parent mode's keymap the parent of the "
"new map, unless @code{@var{variant}-map} is already set and already has a "
"parent."
msgstr ""

# type: itemize
#: lispref/modes.texi:739
msgid ""
"The new mode has its own syntax table, kept in the variable @code{@var"
"{variant}-syntax-table}, unless you override this using the @code{:syntax-"
"table} keyword (see below).  @code{define-derived-mode} makes the parent "
"mode's syntax-table the parent of @code{@var{variant}-syntax-table}, unless "
"the latter is already set and already has a parent different from the "
"standard syntax table."
msgstr ""

# type: itemize
#: lispref/modes.texi:744
msgid ""
"The new mode has its own abbrev table, kept in the variable @code{@var"
"{variant}-abbrev-table}, unless you override this using the @code{:abbrev-"
"table} keyword (see below)."
msgstr ""

# type: itemize
#: lispref/modes.texi:749
msgid ""
"The new mode has its own mode hook, @code{@var{variant}-hook}.  It runs this "
"hook, after running the hooks of its ancestor modes, with @code{run-mode-"
"hooks}, as the last thing it does. @xref{Mode Hooks}."
msgstr ""

# type: defmac
#: lispref/modes.texi:755
msgid ""
"In addition, you can specify how to override other aspects of @var{parent} "
"with @var{body}.  The command @var{variant} evaluates the forms in @var"
"{body} after setting up all its usual overrides, just before running the "
"mode hooks."
msgstr ""

# type: defmac
#: lispref/modes.texi:759
msgid ""
"You can also specify @code{nil} for @var{parent}.  This gives the new mode "
"no parent.  Then @code{define-derived-mode} behaves as described above, but, "
"of course, omits all actions connected with @var{parent}."
msgstr ""

# type: defmac
#: lispref/modes.texi:765
msgid ""
"The argument @var{docstring} specifies the documentation string for the new "
"mode.  @code{define-derived-mode} adds some general information about the "
"mode's hook, followed by the mode's keymap, at the end of this docstring.  "
"If you omit @var{docstring}, @code{define-derived-mode} generates a "
"documentation string."
msgstr ""

# type: defmac
#: lispref/modes.texi:768
msgid ""
"The @var{keyword-args} are pairs of keywords and values.  The values are "
"evaluated.  The following keywords are currently supported:"
msgstr ""

# type: item
#: lispref/modes.texi:770
#, no-wrap
msgid ":syntax-table"
msgstr ""

# type: table
#: lispref/modes.texi:777
msgid ""
"You can use this to explicitly specify a syntax table for the new mode.  If "
"you specify a @code{nil} value, the new mode uses the same syntax table as "
"@var{parent}, or the standard syntax table if @var{parent} is @code{nil}.  "
"(Note that this does @emph{not} follow the convention used for non-keyword "
"arguments that a @code{nil} value is equivalent with not specifying the "
"argument.)"
msgstr ""

# type: item
#: lispref/modes.texi:778
#, no-wrap
msgid ":abbrev-table"
msgstr ""

# type: table
#: lispref/modes.texi:784
msgid ""
"You can use this to explicitly specify an abbrev table for the new mode.  If "
"you specify a @code{nil} value, the new mode uses the same abbrev table as "
"@var{parent}, or @code{fundamental-mode-abbrev-table} if @var{parent} is "
"@code{nil}.  (Again, a @code{nil} value is @emph{not} equivalent to not "
"specifying this keyword.)"
msgstr ""

# type: item
#: lispref/modes.texi:785
#, no-wrap
msgid ":group"
msgstr ""

# type: table
#: lispref/modes.texi:791
msgid ""
"If this is specified, the value should be the customization group for this "
"mode.  (Not all major modes have one.)  Only the (still experimental and "
"unadvertised) command @code{customize-mode} currently uses this.  @code"
"{define-derived-mode} does @emph{not} automatically define the specified "
"customization group."
msgstr ""

# type: defmac
#: lispref/modes.texi:794
msgid "Here is a hypothetical example:"
msgstr ""

# type: example
#: lispref/modes.texi:801
#, no-wrap
msgid ""
"(define-derived-mode hypertext-mode\n"
"  text-mode \"Hypertext\"\n"
"  \"Major mode for hypertext.\n"
"\\\\@{hypertext-mode-map@}\"\n"
"  (setq case-fold-search nil))\n"
"\n"
msgstr ""

# type: example
#: lispref/modes.texi:804
#, no-wrap
msgid ""
"(define-key hypertext-mode-map\n"
"  [down-mouse-3] 'do-hyper-link)\n"
msgstr ""

# type: defmac
#: lispref/modes.texi:808
msgid ""
"Do not write an @code{interactive} spec in the definition; @code{define-"
"derived-mode} does that automatically."
msgstr ""

# type: cindex
#: lispref/modes.texi:812
#, no-wrap
msgid "generic mode"
msgstr ""

# type: Plain text
#: lispref/modes.texi:818
msgid ""
"@dfn{Generic modes} are simple major modes with basic support for comment "
"syntax and Font Lock mode.  To define a generic mode, use the macro @code"
"{define-generic-mode}.  See the file @file{generic-x.el} for some examples "
"of the use of @code{define-generic-mode}."
msgstr ""

# type: defmac
#: lispref/modes.texi:819
#, no-wrap
msgid "define-generic-mode mode comment-list keyword-list font-lock-list auto-mode-list function-list &optional docstring"
msgstr ""

# type: defmac
#: lispref/modes.texi:824
msgid ""
"This macro defines a generic mode command named @var{mode} (a symbol, not "
"quoted).  The optional argument @var{docstring} is the documentation for the "
"mode command.  If you do not supply it, @code{define-generic-mode} generates "
"one by default."
msgstr ""

# type: defmac
#: lispref/modes.texi:834
msgid ""
"The argument @var{comment-list} is a list in which each element is either a "
"character, a string of one or two characters, or a cons cell.  A character "
"or a string is set up in the mode's syntax table as a ``comment starter.'' "
"If the entry is a cons cell, the @sc{car} is set up as a ``comment starter'' "
"and the @sc{cdr} as a ``comment ender.'' (Use @code{nil} for the latter if "
"you want comments to end at the end of the line.)  Note that the syntax "
"table mechanism has limitations about what comment starters and enders are "
"actually possible.  @xref{Syntax Tables}."
msgstr ""

# type: defmac
#: lispref/modes.texi:841
msgid ""
"The argument @var{keyword-list} is a list of keywords to highlight with @code"
"{font-lock-keyword-face}.  Each keyword should be a string.  Meanwhile, @var"
"{font-lock-list} is a list of additional expressions to highlight.  Each "
"element of this list should have the same form as an element of @code{font-"
"lock-keywords}.  @xref{Search-based Fontification}."
msgstr ""

# type: defmac
#: lispref/modes.texi:845
msgid ""
"The argument @var{auto-mode-list} is a list of regular expressions to add to "
"the variable @code{auto-mode-alist}.  They are added by the execution of the "
"@code{define-generic-mode} form, not by expanding the macro call."
msgstr ""

# type: defmac
#: lispref/modes.texi:849
msgid ""
"Finally, @var{function-list} is a list of functions for the mode command to "
"call for additional setup.  It calls these functions just before it runs the "
"mode hook variable @code{@var{mode}-hook}."
msgstr ""

# type: Plain text
#: lispref/modes.texi:862
msgid ""
"Every major mode function should finish by running its mode hook and the "
"mode-independent normal hook @code{after-change-major-mode-hook}.  It does "
"this by calling @code{run-mode-hooks}.  If the major mode is a derived mode, "
"that is if it calls another major mode (the parent mode)  in its body, it "
"should do this inside @code{delay-mode-hooks} so that the parent won't run "
"these hooks itself.  Instead, the derived mode's call to @code{run-mode-"
"hooks} runs the parent's mode hook too.  @xref{Major Mode Conventions}."
msgstr ""

# type: Plain text
#: lispref/modes.texi:869
msgid ""
"Emacs versions before Emacs 22 did not have @code{delay-mode-hooks}.  When "
"user-implemented major modes have not been updated to use it, they won't "
"entirely follow these conventions: they may run the parent's mode hook too "
"early, or fail to run @code{after-change-major-mode-hook}.  If you encounter "
"such a major mode, please correct it to follow these conventions."
msgstr ""

# type: Plain text
#: lispref/modes.texi:874
msgid ""
"When you defined a major mode using @code{define-derived-mode}, it "
"automatically makes sure these conventions are followed.  If you define a "
"major mode ``by hand,'' not using @code{define-derived-mode}, use the "
"following functions to handle these conventions automatically."
msgstr ""

# type: defun
#: lispref/modes.texi:875
#, no-wrap
msgid "run-mode-hooks &rest hookvars"
msgstr ""

# type: defun
#: lispref/modes.texi:879
msgid ""
"Major modes should run their mode hook using this function.  It is similar "
"to @code{run-hooks} (@pxref{Hooks}), but it also runs @code{after-change-"
"major-mode-hook}."
msgstr ""

# type: defun
#: lispref/modes.texi:884
msgid ""
"When this function is called during the execution of a @code{delay-mode-"
"hooks} form, it does not run the hooks immediately.  Instead, it arranges "
"for the next call to @code{run-mode-hooks} to run them."
msgstr ""

# type: defmac
#: lispref/modes.texi:886
#, no-wrap
msgid "delay-mode-hooks body@dots{}"
msgstr ""

# type: defmac
#: lispref/modes.texi:889
msgid ""
"When one major mode command calls another, it should do so inside of @code"
"{delay-mode-hooks}."
msgstr ""

# type: defmac
#: lispref/modes.texi:895
msgid ""
"This macro executes @var{body}, but tells all @code{run-mode-hooks} calls "
"during the execution of @var{body} to delay running their hooks.  The hooks "
"will actually run during the next call to @code{run-mode-hooks} after the "
"end of the @code{delay-mode-hooks} construct."
msgstr ""

# type: defvar
#: lispref/modes.texi:900
msgid ""
"This is a normal hook run by @code{run-mode-hooks}.  It is run at the very "
"end of every properly-written major mode function."
msgstr ""

# type: subsection
#: lispref/modes.texi:903
#, no-wrap
msgid "Major Mode Examples"
msgstr ""

# type: Plain text
#: lispref/modes.texi:908
msgid ""
"Text mode is perhaps the simplest mode besides Fundamental mode.  Here are "
"excerpts from @file{text-mode.el} that illustrate many of the conventions "
"listed above:"
msgstr ""

# type: group
#: lispref/modes.texi:920
#, no-wrap
msgid ""
";; @r{Create the syntax table for this mode.}\n"
"(defvar text-mode-syntax-table\n"
"  (let ((st (make-syntax-table)))\n"
"    (modify-syntax-entry ?\\\" \".   \" st)\n"
"    (modify-syntax-entry ?\\\\ \".   \" st)\n"
"    ;; Add `p' so M-c on `hello' leads to `Hello', not `hello'.\n"
"    (modify-syntax-entry ?' \"w p\" st)\n"
"    st)\n"
"  \"Syntax table used while in `text-mode'.\")\n"
msgstr ""

# type: smallexample
#: lispref/modes.texi:923
#, no-wrap
msgid ";; @r{Create the keymap for this mode.}\n"
msgstr ""

# type: group
#: lispref/modes.texi:934
#, no-wrap
msgid ""
"(defvar text-mode-map\n"
"  (let ((map (make-sparse-keymap)))\n"
"    (define-key map \"\\e\\t\" 'ispell-complete-word)\n"
"    (define-key map \"\\es\" 'center-line)\n"
"    (define-key map \"\\eS\" 'center-paragraph)\n"
"    map)\n"
"  \"Keymap for `text-mode'.\n"
"Many other modes, such as Mail mode, Outline mode\n"
"and Indented Text mode, inherit all the commands\n"
"defined in this map.\")\n"
msgstr ""

# type: Plain text
#: lispref/modes.texi:938
msgid "Here is how the actual mode command is defined now:"
msgstr ""

# type: group
#: lispref/modes.texi:948
#, no-wrap
msgid ""
"(define-derived-mode text-mode nil \"Text\"\n"
"  \"Major mode for editing text written for humans to read.\n"
"In this mode, paragraphs are delimited only by blank or white lines.\n"
"You can thus get the full benefit of adaptive filling\n"
" (see the variable `adaptive-fill-mode').\n"
"\\\\@{text-mode-map@}\n"
"Turning on Text mode runs the normal hook `text-mode-hook'.\"\n"
msgstr ""

# type: group
#: lispref/modes.texi:956
#, no-wrap
msgid ""
"  (make-local-variable 'text-mode-variant)\n"
"  (setq text-mode-variant t)\n"
"  ;; @r{These two lines are a feature added recently.}\n"
"  (set (make-local-variable 'require-final-newline)\n"
"       mode-require-final-newline)\n"
"  (set (make-local-variable 'indent-line-function) 'indent-relative))\n"
msgstr ""

# type: Plain text
#: lispref/modes.texi:962
msgid ""
"(The last line is redundant nowadays, since @code{indent-relative} is the "
"default value, and we'll delete it in a future version.)"
msgstr ""

# type: Plain text
#: lispref/modes.texi:965
msgid ""
"Here is how it was defined formerly, before @code{define-derived-mode} "
"existed:"
msgstr ""

# type: group
#: lispref/modes.texi:972
#, no-wrap
msgid ""
";; @r{This isn't needed nowadays, since @code{define-derived-mode} does it.}\n"
"(defvar text-mode-abbrev-table nil\n"
"  \"Abbrev table used while in text mode.\")\n"
"(define-abbrev-table 'text-mode-abbrev-table ())\n"
msgstr ""

# type: group
#: lispref/modes.texi:978
#, no-wrap
msgid ""
"(defun text-mode ()\n"
"  \"Major mode for editing text intended for humans to read...\n"
" Special commands: \\\\@{text-mode-map@}\n"
msgstr ""

# type: group
#: lispref/modes.texi:984
#, no-wrap
msgid ""
"Turning on text-mode runs the hook `text-mode-hook'.\"\n"
"  (interactive)\n"
"  (kill-all-local-variables)\n"
"  (use-local-map text-mode-map)\n"
msgstr ""

# type: group
#: lispref/modes.texi:988
#, no-wrap
msgid ""
"  (setq local-abbrev-table text-mode-abbrev-table)\n"
"  (set-syntax-table text-mode-syntax-table)\n"
msgstr ""

# type: group
#: lispref/modes.texi:999
#, no-wrap
msgid ""
"  ;; @r{These four lines are absent from the current version}\n"
"  ;; @r{not because this is done some other way, but rather}\n"
"  ;; @r{because nowadays Text mode uses the normal definition of paragraphs.}\n"
"  (make-local-variable 'paragraph-start)\n"
"  (setq paragraph-start (concat \"[ \\t]*$\\\\|\" page-delimiter))\n"
"  (make-local-variable 'paragraph-separate)\n"
"  (setq paragraph-separate paragraph-start)\n"
"  (make-local-variable 'indent-line-function)\n"
"  (setq indent-line-function 'indent-relative-maybe)\n"
msgstr ""

# type: group
#: lispref/modes.texi:1005
#, no-wrap
msgid ""
"  (setq mode-name \"Text\")\n"
"  (setq major-mode 'text-mode)\n"
"  (run-mode-hooks 'text-mode-hook)) ; @r{Finally, this permits the user to}\n"
"                                    ;   @r{customize the mode with a hook.}\n"
msgstr ""

# type: file{#1}
#: lispref/modes.texi:1008
#, no-wrap
msgid "lisp-mode.el"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1013
msgid ""
"The three Lisp modes (Lisp mode, Emacs Lisp mode, and Lisp Interaction mode) "
"have more features than Text mode and the code is correspondingly more "
"complicated.  Here are excerpts from @file{lisp-mode.el} that illustrate how "
"these modes are written."
msgstr ""

# type: cindex
#: lispref/modes.texi:1014
#, no-wrap
msgid "syntax table example"
msgstr ""

# type: group
#: lispref/modes.texi:1020
#, no-wrap
msgid ""
";; @r{Create mode-specific table variables.}\n"
"(defvar lisp-mode-syntax-table nil \"\")\n"
"(defvar lisp-mode-abbrev-table nil \"\")\n"
msgstr ""

# type: group
#: lispref/modes.texi:1026
#, no-wrap
msgid ""
"(defvar emacs-lisp-mode-syntax-table\n"
"  (let ((table (make-syntax-table)))\n"
"    (let ((i 0))\n"
msgstr ""

# type: group
#: lispref/modes.texi:1036
#, no-wrap
msgid ""
"      ;; @r{Set syntax of chars up to @samp{0} to say they are}\n"
"      ;;   @r{part of symbol names but not words.}\n"
"      ;;   @r{(The digit @samp{0} is @code{48} in the @acronym{ASCII} character set.)}\n"
"      (while (< i ?0)\n"
"\t(modify-syntax-entry i \"_   \" table)\n"
"\t(setq i (1+ i)))\n"
"      ;; @r{@dots{} similar code follows for other character ranges.}\n"
msgstr ""

# type: group
#: lispref/modes.texi:1043
#, no-wrap
msgid ""
"      ;; @r{Then set the syntax codes for characters that are special in Lisp.}\n"
"      (modify-syntax-entry ?  \"    \" table)\n"
"      (modify-syntax-entry ?\\t \"    \" table)\n"
"      (modify-syntax-entry ?\\f \"    \" table)\n"
"      (modify-syntax-entry ?\\n \">   \" table)\n"
msgstr ""

# type: group
#: lispref/modes.texi:1051
#, no-wrap
msgid ""
"      ;; @r{Give CR the same syntax as newline, for selective-display.}\n"
"      (modify-syntax-entry ?\\^m \">   \" table)\n"
"      (modify-syntax-entry ?\\; \"<   \" table)\n"
"      (modify-syntax-entry ?` \"'   \" table)\n"
"      (modify-syntax-entry ?' \"'   \" table)\n"
"      (modify-syntax-entry ?, \"'   \" table)\n"
msgstr ""

# type: group
#: lispref/modes.texi:1059
#, no-wrap
msgid ""
"      ;; @r{@dots{}likewise for many other characters@dots{}}\n"
"      (modify-syntax-entry ?\\( \"()  \" table)\n"
"      (modify-syntax-entry ?\\) \")(  \" table)\n"
"      (modify-syntax-entry ?\\[ \"(]  \" table)\n"
"      (modify-syntax-entry ?\\] \")[  \" table))\n"
"    table))\n"
msgstr ""

# type: group
#: lispref/modes.texi:1063
#, no-wrap
msgid ""
";; @r{Create an abbrev table for lisp-mode.}\n"
"(define-abbrev-table 'lisp-mode-abbrev-table ())\n"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1068
msgid ""
"The three modes for Lisp share much of their code.  For instance, each calls "
"the following function to set various variables:"
msgstr ""

# type: group
#: lispref/modes.texi:1076
#, no-wrap
msgid ""
"(defun lisp-mode-variables (lisp-syntax)\n"
"  (when lisp-syntax\n"
"    (set-syntax-table lisp-mode-syntax-table))\n"
"  (setq local-abbrev-table lisp-mode-abbrev-table)\n"
"  @dots{}\n"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1083
msgid ""
"In Lisp and most programming languages, we want the paragraph commands to "
"treat only blank lines as paragraph separators.  And the modes should "
"undestand the Lisp conventions for comments.  The rest of @code{lisp-mode-"
"variables} sets this up:"
msgstr ""

# type: group
#: lispref/modes.texi:1091
#, no-wrap
msgid ""
"  (make-local-variable 'paragraph-start)\n"
"  (setq paragraph-start (concat page-delimiter \"\\\\|$\" ))\n"
"  (make-local-variable 'paragraph-separate)\n"
"  (setq paragraph-separate paragraph-start)\n"
"  @dots{}\n"
msgstr ""

# type: group
#: lispref/modes.texi:1096
#, no-wrap
msgid ""
"  (make-local-variable 'comment-indent-function)\n"
"  (setq comment-indent-function 'lisp-comment-indent))\n"
"  @dots{}\n"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1103
msgid ""
"Each of the different Lisp modes has a slightly different keymap.  For "
"example, Lisp mode binds @kbd{C-c C-z} to @code{run-lisp}, but the other "
"Lisp modes do not.  However, all Lisp modes have some commands in common.  "
"The following code sets up the common commands:"
msgstr ""

# type: group
#: lispref/modes.texi:1108
#, no-wrap
msgid ""
"(defvar shared-lisp-mode-map ()\n"
"  \"Keymap for commands shared by all sorts of Lisp modes.\")\n"
"\n"
msgstr ""

# type: group
#: lispref/modes.texi:1116
#, no-wrap
msgid ""
";; @r{Putting this @code{if} after the @code{defvar} is an older style.}\n"
"(if shared-lisp-mode-map\n"
"    ()\n"
"   (setq shared-lisp-mode-map (make-sparse-keymap))\n"
"   (define-key shared-lisp-mode-map \"\\e\\C-q\" 'indent-sexp)\n"
"   (define-key shared-lisp-mode-map \"\\177\"\n"
"               'backward-delete-char-untabify))\n"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1121
msgid "And here is the code to set up the keymap for Lisp mode:"
msgstr ""

# type: group
#: lispref/modes.texi:1126
#, no-wrap
msgid ""
"(defvar lisp-mode-map ()\n"
"  \"Keymap for ordinary Lisp mode...\")\n"
"\n"
msgstr ""

# type: group
#: lispref/modes.texi:1133
#, no-wrap
msgid ""
"(if lisp-mode-map\n"
"    ()\n"
"  (setq lisp-mode-map (make-sparse-keymap))\n"
"  (set-keymap-parent lisp-mode-map shared-lisp-mode-map)\n"
"  (define-key lisp-mode-map \"\\e\\C-x\" 'lisp-eval-defun)\n"
"  (define-key lisp-mode-map \"\\C-c\\C-z\" 'run-lisp))\n"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1138
msgid ""
"Finally, here is the complete major mode function definition for Lisp mode."
msgstr ""

# type: group
#: lispref/modes.texi:1149
#, no-wrap
msgid ""
"(defun lisp-mode ()\n"
"  \"Major mode for editing Lisp code for Lisps other than GNU Emacs Lisp.\n"
"Commands:\n"
"Delete converts tabs to spaces as it moves back.\n"
"Blank lines separate paragraphs.  Semicolons start comments.\n"
"\\\\@{lisp-mode-map@}\n"
"Note that `run-lisp' may be used either to start an inferior Lisp job\n"
"or to switch back to an existing one.\n"
msgstr ""

# type: group
#: lispref/modes.texi:1156
#, no-wrap
msgid ""
"Entry to this mode calls the value of `lisp-mode-hook'\n"
"if that value is non-nil.\"\n"
"  (interactive)\n"
"  (kill-all-local-variables)\n"
msgstr ""

# type: group
#: lispref/modes.texi:1168
#, no-wrap
msgid ""
"  (use-local-map lisp-mode-map)          ; @r{Select the mode's keymap.}\n"
"  (setq major-mode 'lisp-mode)           ; @r{This is how @code{describe-mode}}\n"
"                                         ;   @r{finds out what to describe.}\n"
"  (setq mode-name \"Lisp\")                ; @r{This goes into the mode line.}\n"
"  (lisp-mode-variables t)                ; @r{This defines various variables.}\n"
"  (make-local-variable 'comment-start-skip)\n"
"  (setq comment-start-skip\n"
"        \"\\\\(\\\\(^\\\\|[^\\\\\\\\\\n]\\\\)\\\\(\\\\\\\\\\\\\\\\\\\\)*\\\\)\\\\(;+\\\\|#|\\\\) *\")\n"
"  (make-local-variable 'font-lock-keywords-case-fold-search)\n"
"  (setq font-lock-keywords-case-fold-search t)\n"
msgstr ""

# type: group
#: lispref/modes.texi:1174
#, no-wrap
msgid ""
"  (setq imenu-case-fold-search t)\n"
"  (set-syntax-table lisp-mode-syntax-table)\n"
"  (run-mode-hooks 'lisp-mode-hook))      ; @r{This permits the user to use a}\n"
"                                         ;   @r{hook to customize the mode.}\n"
msgstr ""

# type: cindex
#: lispref/modes.texi:1179
#, no-wrap
msgid "minor mode"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1186
msgid ""
"A @dfn{minor mode} provides features that users may enable or disable "
"independently of the choice of major mode.  Minor modes can be enabled "
"individually or in combination.  Minor modes would be better named "
"``generally available, optional feature modes,'' except that such a name "
"would be unwieldy."
msgstr ""

# type: Plain text
#: lispref/modes.texi:1192
msgid ""
"A minor mode is not usually meant as a variation of a single major mode.  "
"Usually they are general and can apply to many major modes.  For example, "
"Auto Fill mode works with any major mode that permits text insertion.  To be "
"general, a minor mode must be effectively independent of the things major "
"modes do."
msgstr ""

# type: Plain text
#: lispref/modes.texi:1198
msgid ""
"A minor mode is often much more difficult to implement than a major mode.  "
"One reason is that you should be able to activate and deactivate minor modes "
"in any order.  A minor mode should be able to have its desired effect "
"regardless of the major mode and regardless of the other minor modes in "
"effect."
msgstr ""

# type: Plain text
#: lispref/modes.texi:1202
msgid ""
"Often the biggest problem in implementing a minor mode is finding a way to "
"insert the necessary hook into the rest of Emacs.  Minor mode keymaps make "
"this easier than it used to be."
msgstr ""

# type: defvar
#: lispref/modes.texi:1203
#, no-wrap
msgid "minor-mode-list"
msgstr ""

# type: defvar
#: lispref/modes.texi:1205
msgid "The value of this variable is a list of all minor mode commands."
msgstr ""

# type: menu
#: lispref/modes.texi:1211 lispref/modes.texi:1213 lispref/vol1.texi:635
#: lispref/vol2.texi:636
#, no-wrap
msgid "Minor Mode Conventions"
msgstr ""

# type: menu
#: lispref/modes.texi:1211 lispref/vol1.texi:635 lispref/vol2.texi:636
msgid "Tips for writing a minor mode."
msgstr ""

# type: menu
#: lispref/modes.texi:1211 lispref/modes.texi:1343 lispref/modes.texi:1344
#: lispref/vol1.texi:635 lispref/vol2.texi:636
#, no-wrap
msgid "Keymaps and Minor Modes"
msgstr ""

# type: menu
#: lispref/modes.texi:1211 lispref/vol1.texi:635 lispref/vol2.texi:636
msgid "How a minor mode can have its own keymap."
msgstr ""

# type: subsection
#: lispref/modes.texi:1211 lispref/modes.texi:1363 lispref/modes.texi:1364
#, no-wrap
msgid "Defining Minor Modes"
msgstr ""

# type: menu
#: lispref/modes.texi:1211
msgid "A convenient facility for defining minor modes."
msgstr ""

# type: subsection
#: lispref/modes.texi:1214
#, no-wrap
msgid "Conventions for Writing Minor Modes"
msgstr ""

# type: cindex
#: lispref/modes.texi:1215
#, no-wrap
msgid "minor mode conventions"
msgstr ""

# type: cindex
#: lispref/modes.texi:1216
#, no-wrap
msgid "conventions for writing minor modes"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1223
msgid ""
"There are conventions for writing minor modes just as there are for major "
"modes.  Several of the major mode conventions apply to minor modes as well: "
"those regarding the name of the mode initialization function, the names of "
"global symbols, the use of a hook at the end of the initialization function, "
"and the use of keymaps and other tables."
msgstr ""

# type: Plain text
#: lispref/modes.texi:1227
msgid ""
"In addition, there are several conventions that are specific to minor "
"modes.  (The easiest way to follow all the conventions is to use the macro "
"@code{define-minor-mode}; @ref{Defining Minor Modes}.)"
msgstr ""

# type: cindex
#: lispref/modes.texi:1230
#, no-wrap
msgid "mode variable"
msgstr ""

# type: itemize
#: lispref/modes.texi:1235
msgid ""
"Make a variable whose name ends in @samp{-mode} to control the minor mode.  "
"We call this the @dfn{mode variable}.  The minor mode command should set "
"this variable (@code{nil} to disable; anything else to enable)."
msgstr ""

# type: itemize
#: lispref/modes.texi:1239
msgid ""
"If possible, implement the mode so that setting the variable automatically "
"enables or disables the mode.  Then the minor mode command does not need to "
"do anything except set the variable."
msgstr ""

# type: itemize
#: lispref/modes.texi:1244
msgid ""
"This variable is used in conjunction with the @code{minor-mode-alist} to "
"display the minor mode name in the mode line.  It can also enable or disable "
"a minor mode keymap.  Individual commands or hooks can also check the "
"variable's value."
msgstr ""

# type: itemize
#: lispref/modes.texi:1247
msgid ""
"If you want the minor mode to be enabled separately in each buffer, make the "
"variable buffer-local."
msgstr ""

# type: itemize
#: lispref/modes.texi:1251
msgid ""
"Define a command whose name is the same as the mode variable.  Its job is to "
"enable and disable the mode by setting the variable."
msgstr ""

# type: itemize
#: lispref/modes.texi:1260
msgid ""
"The command should accept one optional argument.  If the argument is @code"
"{nil}, it should toggle the mode (turn it on if it is off, and off if it is "
"on).  It should turn the mode on if the argument is a positive integer, the "
"symbol @code{t}, or a list whose @sc{car} is one of those.  It should turn "
"the mode off if the argument is a negative integer or zero, the symbol @code"
"{-}, or a list whose @sc{car} is a negative integer or zero.  The meaning of "
"other arguments is not specified."
msgstr ""

# type: itemize
#: lispref/modes.texi:1265
msgid ""
"Here is an example taken from the definition of @code{transient-mark-mode}.  "
"It shows the use of @code{transient-mark-mode} as a variable that enables or "
"disables the mode's behavior, and also shows the proper way to toggle, "
"enable or disable the minor mode based on the raw prefix argument value."
msgstr ""

# type: group
#: lispref/modes.texi:1271
#, no-wrap
msgid ""
"(setq transient-mark-mode\n"
"      (if (null arg) (not transient-mark-mode)\n"
"        (> (prefix-numeric-value arg) 0)))\n"
msgstr ""

# type: itemize
#: lispref/modes.texi:1279
msgid ""
"Add an element to @code{minor-mode-alist} for each minor mode (@pxref"
"{Definition of minor-mode-alist}), if you want to indicate the minor mode in "
"the mode line.  This element should be a list of the following form:"
msgstr ""

# type: smallexample
#: lispref/modes.texi:1282
#, no-wrap
msgid "(@var{mode-variable} @var{string})\n"
msgstr ""

# type: itemize
#: lispref/modes.texi:1288
msgid ""
"Here @var{mode-variable} is the variable that controls enabling of the minor "
"mode, and @var{string} is a short string, starting with a space, to "
"represent the mode in the mode line.  These strings must be short so that "
"there is room for several of them at once."
msgstr ""

# type: itemize
#: lispref/modes.texi:1291
msgid ""
"When you add an element to @code{minor-mode-alist}, use @code{assq} to check "
"for an existing element, to avoid duplication.  For example:"
msgstr ""

# type: group
#: lispref/modes.texi:1297
#, no-wrap
msgid ""
"(unless (assq 'leif-mode minor-mode-alist)\n"
"  (setq minor-mode-alist\n"
"        (cons '(leif-mode \" Leif\") minor-mode-alist)))\n"
msgstr ""

# type: itemize
#: lispref/modes.texi:1302
msgid "or like this, using @code{add-to-list} (@pxref{List Variables}):"
msgstr ""

# type: group
#: lispref/modes.texi:1306
#, no-wrap
msgid "(add-to-list 'minor-mode-alist '(leif-mode \" Leif\"))\n"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1314
msgid ""
"Global minor modes distributed with Emacs should if possible support "
"enabling and disabling via Custom (@pxref{Customization}).  To do this, the "
"first step is to define the mode variable with @code{defcustom}, and specify "
"@code{:type boolean}."
msgstr ""

# type: Plain text
#: lispref/modes.texi:1319
msgid ""
"If just setting the variable is not sufficient to enable the mode, you "
"should also specify a @code{:set} method which enables the mode by invoking "
"the mode command.  Note in the variable's documentation string that setting "
"the variable other than via Custom may not take effect."
msgstr ""

# type: Plain text
#: lispref/modes.texi:1325
msgid ""
"Also mark the definition with an autoload cookie (@pxref{autoload cookie}), "
"and specify a @code{:require} so that customizing the variable will load the "
"library that defines the mode.  This will copy suitable definitions into "
"@file{loaddefs.el} so that users can use @code{customize-option} to enable "
"the mode.  For example:"
msgstr ""

# type: group
#: lispref/modes.texi:1340
#, no-wrap
msgid ""
";;;###autoload\n"
"(defcustom msb-mode nil\n"
"  \"Toggle msb-mode.\n"
"Setting this variable directly does not take effect;\n"
"use either \\\\[customize] or the function `msb-mode'.\"\n"
"  :set 'custom-set-minor-mode\n"
"  :initialize 'custom-initialize-default\n"
"  :version \"20.4\"\n"
"  :type    'boolean\n"
"  :group   'msb\n"
"  :require 'msb)\n"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1349
msgid ""
"Each minor mode can have its own keymap, which is active when the mode is "
"enabled.  To set up a keymap for a minor mode, add an element to the alist "
"@code{minor-mode-map-alist}.  @xref{Definition of minor-mode-map-alist}."
msgstr ""

# type: cindex
#: lispref/modes.texi:1350
#, no-wrap
msgid "@code{self-insert-command}, minor modes"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1358
msgid ""
"One use of minor mode keymaps is to modify the behavior of certain self-"
"inserting characters so that they do something else as well as self-insert.  "
"In general, this is the only way to do that, since the facilities for "
"customizing @code{self-insert-command} are limited to special cases "
"(designed for abbrevs and Auto Fill mode).  (Do not try substituting your "
"own definition of @code{self-insert-command} for the standard one.  The "
"editor command loop handles this function specially.)"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1362
msgid ""
"The key sequences bound in a minor mode should consist of @kbd{C-c} followed "
"by one of @kbd{.,/?`'\"[]\\|~!#$%^&*()-_+=}.  (The other punctuation "
"characters are reserved for major modes.)"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1368
msgid ""
"The macro @code{define-minor-mode} offers a convenient way of implementing a "
"mode in one self-contained definition."
msgstr ""

# type: defmac
#: lispref/modes.texi:1369
#, no-wrap
msgid "define-minor-mode mode doc [init-value [lighter [keymap]]] keyword-args@dots{} body@dots{}"
msgstr ""

# type: defmac
#: lispref/modes.texi:1377
msgid ""
"This macro defines a new minor mode whose name is @var{mode} (a symbol).  It "
"defines a command named @var{mode} to toggle the minor mode, with @var{doc} "
"as its documentation string.  It also defines a variable named @var{mode}, "
"which is set to @code{t} or @code{nil} by enabling or disabling the mode.  "
"The variable is initialized to @var{init-value}.  Except in unusual "
"circumstances (see below), this value must be @code{nil}."
msgstr ""

# type: defmac
#: lispref/modes.texi:1381
msgid ""
"The string @var{lighter} says what to display in the mode line when the mode "
"is enabled; if it is @code{nil}, the mode is not displayed in the mode line."
msgstr ""

# type: defmac
#: lispref/modes.texi:1385
msgid ""
"The optional argument @var{keymap} specifies the keymap for the minor mode.  "
"It can be a variable name, whose value is the keymap, or it can be an alist "
"specifying bindings in this form:"
msgstr ""

# type: example
#: lispref/modes.texi:1388
#, no-wrap
msgid "(@var{key-sequence} . @var{definition})\n"
msgstr ""

# type: defmac
#: lispref/modes.texi:1394
msgid ""
"The above three arguments @var{init-value}, @var{lighter}, and @var{keymap} "
"can be (partially) omitted when @var{keyword-args} are used.  The @var"
"{keyword-args} consist of keywords followed by corresponding values.  A few "
"keywords have special meanings:"
msgstr ""

# type: table
#: lispref/modes.texi:1402
msgid ""
"Custom group name to use in all generated @code{defcustom} forms.  Defaults "
"to @var{mode} without the possible trailing @samp{-mode}.  @strong{Warning:} "
"don't use this default group name unless you have written a @code{defgroup} "
"to define that group properly.  @xref{Group Definitions}."
msgstr ""

# type: item
#: lispref/modes.texi:1403
#, no-wrap
msgid ":global @var{global}"
msgstr ""

# type: table
#: lispref/modes.texi:1406
msgid ""
"If non-@code{nil}, this specifies that the minor mode should be global "
"rather than buffer-local.  It defaults to @code{nil}."
msgstr ""

# type: table
#: lispref/modes.texi:1416
msgid ""
"One of the effects of making a minor mode global is that the @var{mode} "
"variable becomes a customization variable.  Toggling it through the Custom "
"interface turns the mode on and off, and its value can be saved for future "
"Emacs sessions (@pxref{Saving Customizations,,, emacs, The GNU Emacs "
"Manual}.  For the saved variable to work, you should ensure that the @code"
"{define-minor-mode} form is evaluated each time Emacs starts; for packages "
"that are not part of Emacs, the easiest way to do this is to specify a @code"
"{:require} keyword."
msgstr ""

# type: item
#: lispref/modes.texi:1417
#, no-wrap
msgid ":init-value @var{init-value}"
msgstr ""

# type: table
#: lispref/modes.texi:1419
msgid "This is equivalent to specifying @var{init-value} positionally."
msgstr ""

# type: item
#: lispref/modes.texi:1420
#, no-wrap
msgid ":lighter @var{lighter}"
msgstr ""

# type: table
#: lispref/modes.texi:1422
msgid "This is equivalent to specifying @var{lighter} positionally."
msgstr ""

# type: item
#: lispref/modes.texi:1423
#, no-wrap
msgid ":keymap @var{keymap}"
msgstr ""

# type: table
#: lispref/modes.texi:1425
msgid "This is equivalent to specifying @var{keymap} positionally."
msgstr ""

# type: defmac
#: lispref/modes.texi:1429
msgid ""
"Any other keyword arguments are passed directly to the @code{defcustom} "
"generated for the variable @var{mode}."
msgstr ""

# type: defmac
#: lispref/modes.texi:1434
msgid ""
"The command named @var{mode} first performs the standard actions such as "
"setting the variable named @var{mode} and then executes the @var{body} "
"forms, if any.  It finishes by running the mode hook variable @code{@var"
"{mode}-hook}."
msgstr ""

# type: Plain text
#: lispref/modes.texi:1443
msgid ""
"The initial value must be @code{nil} except in cases where (1) the mode is "
"preloaded in Emacs, or (2) it is painless for loading to enable the mode "
"even though the user did not request it.  For instance, if the mode has no "
"effect unless something else is enabled, and will always be loaded by that "
"time, enabling it by default is harmless.  But these are unusual "
"circumstances.  Normally, the initial value must be @code{nil}."
msgstr ""

# type: findex
#: lispref/modes.texi:1444
#, no-wrap
msgid "easy-mmode-define-minor-mode"
msgstr "easy-mmode-define-minor-mode"

# type: Plain text
#: lispref/modes.texi:1447
msgid ""
"The name @code{easy-mmode-define-minor-mode} is an alias for this macro."
msgstr ""

# type: Plain text
#: lispref/modes.texi:1449
msgid "Here is an example of using @code{define-minor-mode}:"
msgstr ""

# type: smallexample
#: lispref/modes.texi:1456 lispref/modes.texi:1487
#, no-wrap
msgid ""
"(define-minor-mode hungry-mode\n"
"  \"Toggle Hungry mode.\n"
"With no argument, this command toggles the mode.\n"
"Non-null prefix argument turns on the mode.\n"
"Null prefix argument turns off the mode.\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/modes.texi:1467
#, no-wrap
msgid ""
"When Hungry mode is enabled, the control delete key\n"
"gobbles all preceding whitespace except the last.\n"
"See the command \\\\[hungry-electric-delete].\"\n"
" ;; The initial value.\n"
" nil\n"
" ;; The indicator for the mode line.\n"
" \" Hungry\"\n"
" ;; The minor mode bindings.\n"
" '((\"\\C-\\^?\" . hungry-electric-delete))\n"
" :group 'hunger)\n"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1478
msgid ""
"This defines a minor mode named ``Hungry mode,'' a command named @code"
"{hungry-mode} to toggle it, a variable named @code{hungry-mode} which "
"indicates whether the mode is enabled, and a variable named @code{hungry-"
"mode-map} which holds the keymap that is active when the mode is enabled.  "
"It initializes the keymap with a key binding for @kbd{C-@key{DEL}}.  It puts "
"the variable @code{hungry-mode} into custom group @code{hunger}.  There are "
"no @var{body} forms---many minor modes don't need any."
msgstr ""

# type: Plain text
#: lispref/modes.texi:1480
msgid "Here's an equivalent way to write it:"
msgstr ""

# type: smallexample
#: lispref/modes.texi:1503
#, no-wrap
msgid ""
"When Hungry mode is enabled, the control delete key\n"
"gobbles all preceding whitespace except the last.\n"
"See the command \\\\[hungry-electric-delete].\"\n"
" ;; The initial value.\n"
" :init-value nil\n"
" ;; The indicator for the mode line.\n"
" :lighter \" Hungry\"\n"
" ;; The minor mode bindings.\n"
" :keymap\n"
" '((\"\\C-\\^?\" . hungry-electric-delete)\n"
"   (\"\\C-\\M-\\^?\"\n"
"    . (lambda ()\n"
"        (interactive)\n"
"        (hungry-electric-delete t))))\n"
" :group 'hunger)\n"
msgstr ""

# type: defmac
#: lispref/modes.texi:1505
#, no-wrap
msgid "define-globalized-minor-mode global-mode mode turn-on keyword-args@dots{}"
msgstr ""

# type: defmac
#: lispref/modes.texi:1511
msgid ""
"This defines a global toggle named @var{global-mode} whose meaning is to "
"enable or disable the buffer-local minor mode @var{mode} in all buffers.  To "
"turn on the minor mode in a buffer, it uses the function @var{turn-on}; to "
"turn off the minor mode, it calls @code{mode} with @minus{}1 as argument."
msgstr ""

# type: defmac
#: lispref/modes.texi:1516
msgid ""
"Globally enabling the mode also affects buffers subsequently created by "
"visiting files, and buffers that use a major mode other than Fundamental "
"mode; but it does not detect the creation of a new buffer in Fundamental "
"mode."
msgstr ""

# type: defmac
#: lispref/modes.texi:1522
msgid ""
"This defines the customization option @var{global-mode} (@pxref"
"{Customization}), which can be toggled in the Custom interface to turn the "
"minor mode on and off.  As with @code{define-minor-mode}, you should ensure "
"that the @code{define-globalized-minor-mode} form is evaluated each time "
"Emacs starts, for example by providing a @code{:require} keyword."
msgstr ""

# type: defmac
#: lispref/modes.texi:1525
msgid ""
"Use @code{:group @var{group}} in @var{keyword-args} to specify the custom "
"group for the mode variable of the global minor mode."
msgstr ""

# type: section
#: lispref/modes.texi:1528
#, no-wrap
msgid "Mode-Line Format"
msgstr ""

# type: cindex
#: lispref/modes.texi:1529
#, no-wrap
msgid "mode line"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1538
msgid ""
"Each Emacs window (aside from minibuffer windows) typically has a mode line "
"at the bottom, which displays status information about the buffer displayed "
"in the window.  The mode line contains information about the buffer, such as "
"its name, associated file, depth of recursive editing, and major and minor "
"modes.  A window can also have a @dfn{header line}, which is much like the "
"mode line but appears at the top of the window."
msgstr ""

# type: Plain text
#: lispref/modes.texi:1543
msgid ""
"This section describes how to control the contents of the mode line and "
"header line.  We include it in this chapter because much of the information "
"displayed in the mode line relates to the enabled major and minor modes."
msgstr ""

# type: menu
#: lispref/modes.texi:1553
msgid "Base: Mode Line Basics. Basic ideas of mode line control."
msgstr ""

# type: menu
#: lispref/modes.texi:1553
msgid "Data: Mode Line Data"
msgstr ""

# type: menu
#: lispref/modes.texi:1553 lispref/vol1.texi:641 lispref/vol2.texi:642
msgid "The data structure that controls the mode line."
msgstr ""

# type: menu
#: lispref/modes.texi:1553
msgid "Top: Mode Line Top"
msgstr ""

# type: menu
#: lispref/modes.texi:1553
msgid "The top level variable, mode-line-format."
msgstr ""

# type: menu
#: lispref/modes.texi:1553 lispref/modes.texi:1754 lispref/vol1.texi:641
#: lispref/vol2.texi:642
#, no-wrap
msgid "Mode Line Variables"
msgstr ""

# type: menu
#: lispref/modes.texi:1553 lispref/vol1.texi:641 lispref/vol2.texi:642
msgid "Variables used in that data structure."
msgstr ""

# type: menu
#: lispref/modes.texi:1553 lispref/modes.texi:1934 lispref/vol1.texi:641
#: lispref/vol2.texi:642
#, no-wrap
msgid "%-Constructs"
msgstr ""

# type: menu
#: lispref/modes.texi:1553 lispref/vol1.texi:641 lispref/vol2.texi:642
msgid "Putting information into a mode line."
msgstr ""

# type: node
#: lispref/modes.texi:1553 lispref/modes.texi:2050
#, no-wrap
msgid "Properties in Mode"
msgstr ""

# type: menu
#: lispref/modes.texi:1553
msgid "Using text properties in the mode line."
msgstr ""

# type: node
#: lispref/modes.texi:1553 lispref/modes.texi:2093
#, no-wrap
msgid "Header Lines"
msgstr ""

# type: menu
#: lispref/modes.texi:1553
msgid "Like a mode line, but at the top."
msgstr ""

# type: node
#: lispref/modes.texi:1553 lispref/modes.texi:2122
#, no-wrap
msgid "Emulating Mode Line"
msgstr ""

# type: menu
#: lispref/modes.texi:1553
msgid "Formatting text as the mode line would."
msgstr ""

# type: subsection
#: lispref/modes.texi:1555 lispref/modes.texi:1556
#, no-wrap
msgid "Mode Line Basics"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1564
msgid ""
"@code{mode-line-format} is a buffer-local variable that holds a @dfn{mode "
"line construct}, a kind of template, which controls what is displayed on the "
"mode line of the current buffer.  The value of @code{header-line-format} "
"specifies the buffer's header line in the same way.  All windows for the "
"same buffer use the same @code{mode-line-format} and @code{header-line-"
"format}."
msgstr ""

# type: Plain text
#: lispref/modes.texi:1575
msgid ""
"For efficiency, Emacs does not continuously recompute the mode line and "
"header line of a window.  It does so when circumstances appear to call for "
"it---for instance, if you change the window configuration, switch buffers, "
"narrow or widen the buffer, scroll, or change the buffer's modification "
"status.  If you modify any of the variables referenced by @code{mode-line-"
"format} (@pxref{Mode Line Variables}), or any other variables and data "
"structures that affect how text is displayed (@pxref{Display}), you may want "
"to force an update of the mode line so as to display the new information or "
"display it in the new way."
msgstr ""

# type: defun
#: lispref/modes.texi:1576
#, no-wrap
msgid "force-mode-line-update &optional all"
msgstr ""

# type: defun
#: lispref/modes.texi:1582
msgid ""
"Force redisplay of the current buffer's mode line and header line.  The next "
"redisplay will update the mode line and header line based on the latest "
"values of all relevant variables.  With optional non-@code{nil} @var{all}, "
"force redisplay of all mode lines and header lines."
msgstr ""

# type: defun
#: lispref/modes.texi:1585
msgid ""
"This function also forces recomputation of the menu bar menus and the frame "
"title."
msgstr ""

# type: Plain text
#: lispref/modes.texi:1590
msgid ""
"The selected window's mode line is usually displayed in a different color "
"using the face @code{mode-line}.  Other windows' mode lines appear in the "
"face @code{mode-line-inactive} instead.  @xref{Faces}."
msgstr ""

# type: menu
#: lispref/modes.texi:1591 lispref/vol1.texi:641 lispref/vol2.texi:642
#, no-wrap
msgid "Mode Line Data"
msgstr ""

# type: subsection
#: lispref/modes.texi:1592
#, no-wrap
msgid "The Data Structure of the Mode Line"
msgstr ""

# type: cindex
#: lispref/modes.texi:1593
#, no-wrap
msgid "mode-line construct"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1601
msgid ""
"The mode-line contents are controlled by a data structure called a @dfn{mode-"
"line construct}, made up of lists, strings, symbols, and numbers kept in "
"buffer-local variables.  Each data type has a specific meaning for the mode-"
"line appearance, as described below.  The same data structure is used for "
"constructing frame titles (@pxref{Frame Titles}) and header lines (@pxref"
"{Header Lines})."
msgstr ""

# type: Plain text
#: lispref/modes.texi:1606
msgid ""
"A mode-line construct may be as simple as a fixed string of text, but it "
"usually specifies how to combine fixed strings with variables' values to "
"construct the text.  Many of these variables are themselves defined to have "
"mode-line constructs as their values."
msgstr ""

# type: Plain text
#: lispref/modes.texi:1608
msgid "Here are the meanings of various data types as mode-line constructs:"
msgstr ""

# type: cindex
#: lispref/modes.texi:1610
#, no-wrap
msgid "percent symbol in mode line"
msgstr ""

# type: table
#: lispref/modes.texi:1615
msgid ""
"A string as a mode-line construct appears verbatim except for @dfn{@code{%}-"
"constructs} in it.  These stand for substitution of other data; see @ref{%-"
"Constructs}."
msgstr ""

# type: table
#: lispref/modes.texi:1623
msgid ""
"If parts of the string have @code{face} properties, they control display of "
"the text just as they would text in the buffer.  Any characters which have "
"no @code{face} properties are displayed, by default, in the face @code{mode-"
"line} or @code{mode-line-inactive} (@pxref{Standard Faces,,, emacs, The GNU "
"Emacs Manual}).  The @code{help-echo} and @code{local-map} properties in @var"
"{string} have special meanings.  @xref{Properties in Mode}."
msgstr ""

# type: table
#: lispref/modes.texi:1629
msgid ""
"A symbol as a mode-line construct stands for its value.  The value of @var"
"{symbol} is used as a mode-line construct, in place of @var{symbol}.  "
"However, the symbols @code{t} and @code{nil} are ignored, as is any symbol "
"whose value is void."
msgstr ""

# type: table
#: lispref/modes.texi:1632
msgid ""
"There is one exception: if the value of @var{symbol} is a string, it is "
"displayed verbatim: the @code{%}-constructs are not recognized."
msgstr ""

# type: table
#: lispref/modes.texi:1640
msgid ""
"Unless @var{symbol} is marked as ``risky'' (i.e., it has a non-@code{nil} "
"@code{risky-local-variable} property), all text properties specified in @var"
"{symbol}'s value are ignored.  This includes the text properties of strings "
"in @var{symbol}'s value, as well as all @code{:eval} and @code{:propertize} "
"forms in it.  (The reason for this is security: non-risky variables could be "
"set automatically from file variables without prompting the user.)"
msgstr ""

# type: item
#: lispref/modes.texi:1641
#, no-wrap
msgid "(@var{string} @var{rest}@dots{})"
msgstr ""

# type: itemx
#: lispref/modes.texi:1642
#, no-wrap
msgid "(@var{list} @var{rest}@dots{})"
msgstr ""

# type: table
#: lispref/modes.texi:1646
msgid ""
"A list whose first element is a string or list means to process all the "
"elements recursively and concatenate the results.  This is the most common "
"form of mode-line construct."
msgstr ""

# type: item
#: lispref/modes.texi:1647
#, no-wrap
msgid "(:eval @var{form})"
msgstr ""

# type: table
#: lispref/modes.texi:1652
msgid ""
"A list whose first element is the symbol @code{:eval} says to evaluate @var"
"{form}, and use the result as a string to display.  Make sure this "
"evaluation cannot load any files, as doing so could cause infinite recursion."
msgstr ""

# type: item
#: lispref/modes.texi:1653
#, no-wrap
msgid "(:propertize @var{elt} @var{props}@dots{})"
msgstr ""

# type: table
#: lispref/modes.texi:1659
msgid ""
"A list whose first element is the symbol @code{:propertize} says to process "
"the mode-line construct @var{elt} recursively, then add the text properties "
"specified by @var{props} to the result.  The argument @var{props} should "
"consist of zero or more pairs @var{text-property} @var{value}.  (This "
"feature is new as of Emacs 22.1.)"
msgstr ""

# type: item
#: lispref/modes.texi:1660
#, no-wrap
msgid "(@var{symbol} @var{then} @var{else})"
msgstr ""

# type: table
#: lispref/modes.texi:1668
msgid ""
"A list whose first element is a symbol that is not a keyword specifies a "
"conditional.  Its meaning depends on the value of @var{symbol}.  If @var"
"{symbol} has a non-@code{nil} value, the second element, @var{then}, is "
"processed recursively as a mode-line element.  Otherwise, the third element, "
"@var{else}, is processed recursively.  You may omit @var{else}; then the "
"mode-line element displays nothing if the value of @var{symbol} is @code"
"{nil} or void."
msgstr ""

# type: item
#: lispref/modes.texi:1669
#, no-wrap
msgid "(@var{width} @var{rest}@dots{})"
msgstr ""

# type: table
#: lispref/modes.texi:1677
msgid ""
"A list whose first element is an integer specifies truncation or padding of "
"the results of @var{rest}.  The remaining elements @var{rest} are processed "
"recursively as mode-line constructs and concatenated together.  When @var"
"{width} is positive, the result is space filled on the right if its width is "
"less than @var{width}.  When @var{width} is negative, the result is "
"truncated on the right to @minus{}@var{width} columns if its width exceeds "
"@minus{}@var{width}."
msgstr ""

# type: table
#: lispref/modes.texi:1680
msgid ""
"For example, the usual way to show what percentage of a buffer is above the "
"top of the window is to use a list like this: @code{(-3 \"%p\")}."
msgstr ""

# type: node
#: lispref/modes.texi:1682
#, no-wrap
msgid "Mode Line Top"
msgstr ""

# type: subsection
#: lispref/modes.texi:1683
#, no-wrap
msgid "The Top Level of Mode Line Control"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1687
msgid ""
"The variable in overall control of the mode line is @code{mode-line-format}."
msgstr ""

# type: defvar
#: lispref/modes.texi:1691
msgid ""
"The value of this variable is a mode-line construct that controls the "
"contents of the mode-line.  It is always buffer-local in all buffers."
msgstr ""

# type: defvar
#: lispref/modes.texi:1695
msgid ""
"If you set this variable to @code{nil} in a buffer, that buffer does not "
"have a mode line.  (A window that is just one line tall never displays a "
"mode line.)"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1704
msgid ""
"The default value of @code{mode-line-format} is designed to use the values "
"of other variables such as @code{mode-line-position} and @code{mode-line-"
"modes} (which in turn incorporates the values of the variables @code{mode-"
"name} and @code{minor-mode-alist}).  Very few modes need to alter @code{mode-"
"line-format} itself.  For most purposes, it is sufficient to alter some of "
"the variables that @code{mode-line-format} either directly or indirectly "
"refers to."
msgstr ""

# type: Plain text
#: lispref/modes.texi:1711
msgid ""
"If you do alter @code{mode-line-format} itself, the new value should use the "
"same variables that appear in the default value (@pxref{Mode Line "
"Variables}), rather than duplicating their contents or displaying the "
"information in another fashion.  This way, customizations made by the user "
"or by Lisp programs (such as @code{display-time} and major modes) via "
"changes to those variables remain effective."
msgstr ""

# type: Plain text
#: lispref/modes.texi:1715
msgid ""
"Here is an example of a @code{mode-line-format} that might be useful for "
"@code{shell-mode}, since it contains the host name and default directory."
msgstr ""

# type: group
#: lispref/modes.texi:1724
#, no-wrap
msgid ""
"(setq mode-line-format\n"
"  (list \"-\"\n"
"   'mode-line-mule-info\n"
"   'mode-line-modified\n"
"   'mode-line-frame-identification\n"
"   \"%b--\"\n"
msgstr ""

# type: group
#: lispref/modes.texi:1729
#, no-wrap
msgid ""
"   ;; @r{Note that this is evaluated while making the list.}\n"
"   ;; @r{It makes a mode-line construct which is just a string.}\n"
"   (getenv \"HOST\")\n"
msgstr ""

# type: example
#: lispref/modes.texi:1740
#, no-wrap
msgid ""
"   \":\"\n"
"   'default-directory\n"
"   \"   \"\n"
"   'global-mode-string\n"
"   \"   %[(\"\n"
"   '(:eval (mode-line-mode-name))\n"
"   'mode-line-process\n"
"   'minor-mode-alist\n"
"   \"%n\"\n"
"   \")%]--\"\n"
msgstr ""

# type: group
#: lispref/modes.texi:1746
#, no-wrap
msgid ""
"   '(which-func-mode (\"\" which-func-format \"--\"))\n"
"   '(line-number-mode \"L%l--\")\n"
"   '(column-number-mode \"C%c--\")\n"
"   '(-3 \"%p\")\n"
"   \"-%-\"))\n"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1753
msgid ""
"(The variables @code{line-number-mode}, @code{column-number-mode} and @code"
"{which-func-mode} enable particular minor modes; as usual, these variable "
"names are also the minor mode command names.)"
msgstr ""

# type: subsection
#: lispref/modes.texi:1755
#, no-wrap
msgid "Variables Used in the Mode Line"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1765
msgid ""
"This section describes variables incorporated by the standard value of @code"
"{mode-line-format} into the text of the mode line.  There is nothing "
"inherently special about these variables; any other variables could have the "
"same effects on the mode line if @code{mode-line-format}'s value were "
"changed to use them.  However, various parts of Emacs set these variables on "
"the understanding that they will control parts of the mode line; therefore, "
"practically speaking, it is essential for the mode line to use them."
msgstr ""

# type: defvar
#: lispref/modes.texi:1766
#, no-wrap
msgid "mode-line-mule-info"
msgstr ""

# type: defvar
#: lispref/modes.texi:1770
msgid ""
"This variable holds the value of the mode-line construct that displays "
"information about the language environment, buffer coding system, and "
"current input method.  @xref{Non-ASCII Characters}."
msgstr ""

# type: defvar
#: lispref/modes.texi:1775
msgid ""
"This variable holds the value of the mode-line construct that displays "
"whether the current buffer is modified."
msgstr ""

# type: defvar
#: lispref/modes.texi:1781
msgid ""
"The default value of @code{mode-line-modified} is @code{(\"%1*%1+\")}.  This "
"means that the mode line displays @samp{**} if the buffer is modified, @samp"
"{--} if the buffer is not modified, @samp{%%} if the buffer is read only, "
"and @samp{%*} if the buffer is read only and modified."
msgstr ""

# type: defvar
#: lispref/modes.texi:1783
msgid "Changing this variable does not force an update of the mode line."
msgstr ""

# type: defvar
#: lispref/modes.texi:1785
#, no-wrap
msgid "mode-line-frame-identification"
msgstr ""

# type: defvar
#: lispref/modes.texi:1790
msgid ""
"This variable identifies the current frame.  The default value is @code{\" "
"\"} if you are using a window system which can show multiple frames, or @code"
"{\"-%F \"} on an ordinary terminal which shows only one frame at a time."
msgstr ""

# type: defvar
#: lispref/modes.texi:1796
msgid ""
"This variable identifies the buffer being displayed in the window.  Its "
"default value is @code{(\"%12b\")}, which displays the buffer name, padded "
"with spaces to at least 12 columns."
msgstr ""

# type: defvar
#: lispref/modes.texi:1798
#, no-wrap
msgid "mode-line-position"
msgstr ""

# type: defvar
#: lispref/modes.texi:1802
msgid ""
"This variable indicates the position in the buffer.  Here is a simplified "
"version of its default value.  The actual default value also specifies "
"addition of the @code{help-echo} text property."
msgstr ""

# type: group
#: lispref/modes.texi:1807
#, no-wrap
msgid ""
"((-3 \"%p\")\n"
" (size-indication-mode (8 \" of %I\"))\n"
msgstr ""

# type: group
#: lispref/modes.texi:1815
#, no-wrap
msgid ""
" (line-number-mode\n"
"  ((column-number-mode\n"
"    (10 \" (%l,%c)\")\n"
"    (6 \" L%l\")))\n"
"  ((column-number-mode\n"
"    (5 \" C%c\")))))\n"
msgstr ""

# type: defvar
#: lispref/modes.texi:1821
msgid ""
"This means that @code{mode-line-position} displays at least the buffer "
"percentage and possibly the buffer size, the line number and the column "
"number."
msgstr ""

# type: defvar
#: lispref/modes.texi:1823
#, no-wrap
msgid "vc-mode"
msgstr ""

# type: defvar
#: lispref/modes.texi:1828
msgid ""
"The variable @code{vc-mode}, buffer-local in each buffer, records whether "
"the buffer's visited file is maintained with version control, and, if so, "
"which kind.  Its value is a string that appears in the mode line, or @code"
"{nil} for no version control."
msgstr ""

# type: defvar
#: lispref/modes.texi:1830
#, no-wrap
msgid "mode-line-modes"
msgstr ""

# type: defvar
#: lispref/modes.texi:1834
msgid ""
"This variable displays the buffer's major and minor modes.  Here is a "
"simplified version of its default value.  The real default value also "
"specifies addition of text properties."
msgstr ""

# type: group
#: lispref/modes.texi:1840
#, no-wrap
msgid ""
"(\"%[(\" mode-name\n"
" mode-line-process minor-mode-alist\n"
" \"%n\" \")%]--\")\n"
msgstr ""

# type: defvar
#: lispref/modes.texi:1846
msgid ""
"So @code{mode-line-modes} normally also displays the recursive editing "
"level, information on the process status and whether narrowing is in effect."
msgstr ""

# type: Plain text
#: lispref/modes.texi:1849
msgid "The following three variables are used in @code{mode-line-modes}:"
msgstr ""

# type: defvar
#: lispref/modes.texi:1854
msgid ""
"This buffer-local variable holds the ``pretty'' name of the current buffer's "
"major mode.  Each major mode should set this variable so that the mode name "
"will appear in the mode line."
msgstr ""

# type: defvar
#: lispref/modes.texi:1864
msgid ""
"This buffer-local variable contains the mode-line information on process "
"status in modes used for communicating with subprocesses.  It is displayed "
"immediately following the major mode name, with no intervening space.  For "
"example, its value in the @samp{*shell*} buffer is @code{(\":%s\")}, which "
"allows the shell to display its status along with the major mode as: @samp"
"{(Shell:run)}.  Normally this variable is @code{nil}."
msgstr ""

# type: defvar
#: lispref/modes.texi:1866
#, no-wrap
msgid "minor-mode-alist"
msgstr ""

# type: anchor{#1}
#: lispref/modes.texi:1871
msgid "Definition of minor-mode-alist"
msgstr ""

# type: defvar
#: lispref/modes.texi:1871
msgid ""
"This variable holds an association list whose elements specify how the mode "
"line should indicate that a minor mode is active.  Each element of the @code"
"{minor-mode-alist} should be a two-element list:"
msgstr ""

# type: example
#: lispref/modes.texi:1874
#, no-wrap
msgid "(@var{minor-mode-variable} @var{mode-line-string})\n"
msgstr ""

# type: defvar
#: lispref/modes.texi:1882
msgid ""
"More generally, @var{mode-line-string} can be any mode-line spec.  It "
"appears in the mode line when the value of @var{minor-mode-variable} is non-"
"@code{nil}, and not otherwise.  These strings should begin with spaces so "
"that they don't run together.  Conventionally, the @var{minor-mode-variable} "
"for a specific mode is set to a non-@code{nil} value when that minor mode is "
"activated."
msgstr ""

# type: defvar
#: lispref/modes.texi:1886
msgid ""
"@code{minor-mode-alist} itself is not buffer-local.  Each variable mentioned "
"in the alist should be buffer-local if its minor mode can be enabled "
"separately in each buffer."
msgstr ""

# type: defvar
#: lispref/modes.texi:1888
#, no-wrap
msgid "global-mode-string"
msgstr ""

# type: defvar
#: lispref/modes.texi:1895
msgid ""
"This variable holds a mode-line spec that, by default, appears in the mode "
"line just after the @code{which-func-mode} minor mode if set, else after "
"@code{mode-line-modes}.  The command @code{display-time} sets @code{global-"
"mode-string} to refer to the variable @code{display-time-string}, which "
"holds a string containing the time and load information."
msgstr ""

# type: defvar
#: lispref/modes.texi:1899
msgid ""
"The @samp{%M} construct substitutes the value of @code{global-mode-string}, "
"but that is obsolete, since the variable is included in the mode line from "
"@code{mode-line-format}."
msgstr ""

# type: Plain text
#: lispref/modes.texi:1903
msgid ""
"The variable @code{default-mode-line-format} is where @code{mode-line-"
"format} usually gets its value:"
msgstr ""

# type: defvar
#: lispref/modes.texi:1904
#, no-wrap
msgid "default-mode-line-format"
msgstr ""

# type: defvar
#: lispref/modes.texi:1908
msgid ""
"This variable holds the default @code{mode-line-format} for buffers that do "
"not override it.  This is the same as @code{(default-value 'mode-line-"
"format)}."
msgstr ""

# type: defvar
#: lispref/modes.texi:1912
msgid ""
"Here is a simplified version of the default value of @code{default-mode-line-"
"format}.  The real default value also specifies addition of text properties."
msgstr ""

# type: group
#: lispref/modes.texi:1920
#, no-wrap
msgid ""
"(\"-\"\n"
" mode-line-mule-info\n"
" mode-line-modified\n"
" mode-line-frame-identification\n"
" mode-line-buffer-identification\n"
msgstr ""

# type: example
#: lispref/modes.texi:1925
#, no-wrap
msgid ""
" \"   \"\n"
" mode-line-position\n"
" (vc-mode vc-mode)\n"
" \"   \"\n"
msgstr ""

# type: group
#: lispref/modes.texi:1930
#, no-wrap
msgid ""
" mode-line-modes\n"
" (which-func-mode (\"\" which-func-format \"--\"))\n"
" (global-mode-string (\"--\" global-mode-string))\n"
" \"-%-\")\n"
msgstr ""

# type: subsection
#: lispref/modes.texi:1935
#, no-wrap
msgid "@code{%}-Constructs in the Mode Line"
msgstr ""

# type: Plain text
#: lispref/modes.texi:1943
msgid ""
"Strings used as mode-line constructs can use certain @code{%}-constructs to "
"substitute various kinds of data.  Here is a list of the defined @code{%}-"
"constructs, and what they mean.  In any construct except @samp{%%}, you can "
"add a decimal integer after the @samp{%} to specify a minimum field width.  "
"If the width is less, the field is padded with spaces to the right."
msgstr ""

# type: item
#: lispref/modes.texi:1945 lispref/os.texi:1199
#, no-wrap
msgid "%b"
msgstr ""

# type: table
#: lispref/modes.texi:1948
msgid ""
"The current buffer name, obtained with the @code{buffer-name} function.  "
"@xref{Buffer Names}."
msgstr ""

# type: item
#: lispref/modes.texi:1949 lispref/os.texi:1203 lispref/strings.texi:781
#, no-wrap
msgid "%c"
msgstr ""

# type: table
#: lispref/modes.texi:1951
msgid "The current column number of point."
msgstr ""

# type: item
#: lispref/modes.texi:1952 lispref/os.texi:1212 lispref/strings.texi:784
#, no-wrap
msgid "%e"
msgstr ""

# type: table
#: lispref/modes.texi:1955
msgid ""
"When Emacs is nearly out of memory for Lisp objects, a brief message saying "
"so.  Otherwise, this is empty."
msgstr ""

# type: item
#: lispref/modes.texi:1956 lispref/strings.texi:788
#, no-wrap
msgid "%f"
msgstr ""

# type: table
#: lispref/modes.texi:1959
msgid ""
"The visited file name, obtained with the @code{buffer-file-name} function.  "
"@xref{Buffer File Name}."
msgstr ""

# type: item
#: lispref/modes.texi:1960
#, no-wrap
msgid "%F"
msgstr ""

# type: table
#: lispref/modes.texi:1963
msgid ""
"The title (only on a window system) or the name of the selected frame.  @xref"
"{Basic Parameters}."
msgstr ""

# type: item
#: lispref/modes.texi:1964
#, no-wrap
msgid "%i"
msgstr ""

# type: table
#: lispref/modes.texi:1967
msgid ""
"The size of the accessible part of the current buffer; basically @code{(- "
"(point-max) (point-min))}."
msgstr ""

# type: item
#: lispref/modes.texi:1968 lispref/os.texi:1218
#, no-wrap
msgid "%I"
msgstr ""

# type: table
#: lispref/modes.texi:1972
msgid ""
"Like @samp{%i}, but the size is printed in a more readable way by using @samp"
"{k} for 10^3, @samp{M} for 10^6, @samp{G} for 10^9, etc., to abbreviate."
msgstr ""

# type: item
#: lispref/modes.texi:1973 lispref/os.texi:1224
#, no-wrap
msgid "%l"
msgstr ""

# type: table
#: lispref/modes.texi:1976
msgid ""
"The current line number of point, counting within the accessible portion of "
"the buffer."
msgstr ""

# type: item
#: lispref/modes.texi:1977 lispref/os.texi:1230
#, no-wrap
msgid "%n"
msgstr ""

# type: table
#: lispref/modes.texi:1980
msgid ""
"@samp{Narrow} when narrowing is in effect; nothing otherwise (see @code"
"{narrow-to-region} in @ref{Narrowing})."
msgstr ""

# type: item
#: lispref/modes.texi:1981 lispref/os.texi:1232
#, no-wrap
msgid "%p"
msgstr ""

# type: table
#: lispref/modes.texi:1985
msgid ""
"The percentage of the buffer text above the @strong{top} of window, or @samp"
"{Top}, @samp{Bottom} or @samp{All}.  Note that the default mode-line "
"specification truncates this to three characters."
msgstr ""

# type: item
#: lispref/modes.texi:1986
#, no-wrap
msgid "%P"
msgstr ""

# type: table
#: lispref/modes.texi:1991
msgid ""
"The percentage of the buffer text that is above the @strong{bottom} of the "
"window (which includes the text visible in the window, as well as the text "
"above the top), plus @samp{Top} if the top of the buffer is visible on "
"screen; or @samp{Bottom} or @samp{All}."
msgstr ""

# type: item
#: lispref/modes.texi:1992 lispref/strings.texi:749
#, no-wrap
msgid "%s"
msgstr ""

# type: table
#: lispref/modes.texi:1995
msgid ""
"The status of the subprocess belonging to the current buffer, obtained with "
"@code{process-status}.  @xref{Process Information}."
msgstr ""

# type: table
#: lispref/modes.texi:2000
msgid ""
"Whether the visited file is a text file or a binary file.  This is a "
"meaningful distinction only on certain operating systems (@pxref{MS-DOS File "
"Types})."
msgstr ""

# type: item
#: lispref/modes.texi:2001 lispref/os.texi:1264
#, no-wrap
msgid "%z"
msgstr ""

# type: table
#: lispref/modes.texi:2003
msgid "The mnemonics of keyboard, terminal, and buffer coding systems."
msgstr ""

# type: item
#: lispref/modes.texi:2004 lispref/os.texi:1262
#, no-wrap
msgid "%Z"
msgstr ""

# type: table
#: lispref/modes.texi:2006
msgid "Like @samp{%z}, but including the end-of-line format."
msgstr ""

# type: item
#: lispref/modes.texi:2007
#, no-wrap
msgid "%*"
msgstr ""

# type: table
#: lispref/modes.texi:2011
msgid ""
"@samp{%} if the buffer is read only (see @code{buffer-read-only}); @* @samp"
"{*} if the buffer is modified (see @code{buffer-modified-p}); @* @samp{-} "
"otherwise.  @xref{Buffer Modification}."
msgstr ""

# type: item
#: lispref/modes.texi:2012
#, no-wrap
msgid "%+"
msgstr ""

# type: table
#: lispref/modes.texi:2017
msgid ""
"@samp{*} if the buffer is modified (see @code{buffer-modified-p}); @* @samp"
"{%} if the buffer is read only (see @code{buffer-read-only}); @* @samp{-} "
"otherwise.  This differs from @samp{%*} only for a modified read-only "
"buffer.  @xref{Buffer Modification}."
msgstr ""

# type: item
#: lispref/modes.texi:2018
#, no-wrap
msgid "%&"
msgstr ""

# type: table
#: lispref/modes.texi:2020
msgid "@samp{*} if the buffer is modified, and @samp{-} otherwise."
msgstr ""

# type: item
#: lispref/modes.texi:2021
#, no-wrap
msgid "%["
msgstr ""

# type: table
#: lispref/modes.texi:2025
msgid ""
"An indication of the depth of recursive editing levels (not counting "
"minibuffer levels): one @samp{[} for each editing level.  @xref{Recursive "
"Editing}."
msgstr ""

# type: item
#: lispref/modes.texi:2026
#, no-wrap
msgid "%]"
msgstr ""

# type: table
#: lispref/modes.texi:2029
msgid ""
"One @samp{]} for each recursive editing level (not counting minibuffer "
"levels)."
msgstr ""

# type: item
#: lispref/modes.texi:2030
#, no-wrap
msgid "%-"
msgstr ""

# type: table
#: lispref/modes.texi:2032
msgid "Dashes sufficient to fill the remainder of the mode line."
msgstr ""

# type: table
#: lispref/modes.texi:2036
msgid ""
"The character @samp{%}---this is how to include a literal @samp{%} in a "
"string in which @code{%}-constructs are allowed."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2041
msgid ""
"The following two @code{%}-constructs are still supported, but they are "
"obsolete, since you can get the same results with the variables @code{mode-"
"name} and @code{global-mode-string}."
msgstr ""

# type: item
#: lispref/modes.texi:2043 lispref/os.texi:1226
#, no-wrap
msgid "%m"
msgstr ""

# type: table
#: lispref/modes.texi:2045
msgid "The value of @code{mode-name}."
msgstr ""

# type: item
#: lispref/modes.texi:2046 lispref/os.texi:1228
#, no-wrap
msgid "%M"
msgstr ""

# type: table
#: lispref/modes.texi:2048
msgid "The value of @code{global-mode-string}."
msgstr ""

# type: subsection
#: lispref/modes.texi:2051
#, no-wrap
msgid "Properties in the Mode Line"
msgstr ""

# type: cindex
#: lispref/modes.texi:2052
#, no-wrap
msgid "text properties in the mode line"
msgstr ""

# type: Plain text
#: lispref/modes.texi:2058
msgid ""
"Certain text properties are meaningful in the mode line.  The @code{face} "
"property affects the appearance of text; the @code{help-echo} property "
"associates help strings with the text, and @code{local-map} can make the "
"text mouse-sensitive."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2061
msgid ""
"There are four ways to specify text properties for text in the mode line:"
msgstr ""

# type: enumerate
#: lispref/modes.texi:2066
msgid ""
"Put a string with a text property directly into the mode-line data structure."
msgstr ""

# type: enumerate
#: lispref/modes.texi:2070
msgid ""
"Put a text property on a mode-line %-construct such as @samp{%12b}; then the "
"expansion of the %-construct will have that same text property."
msgstr ""

# type: enumerate
#: lispref/modes.texi:2074
msgid ""
"Use a @code{(:propertize @var{elt} @var{props}@dots{})} construct to give "
"@var{elt} a text property specified by @var{props}."
msgstr ""

# type: enumerate
#: lispref/modes.texi:2079
msgid ""
"Use a list containing @code{:eval @var{form}} in the mode-line data "
"structure, and make @var{form} evaluate to a string that has a text property."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2085
msgid ""
"You can use the @code{local-map} property to specify a keymap.  This keymap "
"only takes real effect for mouse clicks; binding character keys and function "
"keys to it has no effect, since it is impossible to move point into the mode "
"line."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2092
msgid ""
"When the mode line refers to a variable which does not have a non-@code{nil} "
"@code{risky-local-variable} property, any text properties given or specified "
"within that variable's values are ignored.  This is because such properties "
"could otherwise specify functions to be called, and those functions could "
"come from file local variables."
msgstr ""

# type: subsection
#: lispref/modes.texi:2094
#, no-wrap
msgid "Window Header Lines"
msgstr ""

# type: cindex
#: lispref/modes.texi:2095
#, no-wrap
msgid "header line (of a window)"
msgstr ""

# type: cindex
#: lispref/modes.texi:2096
#, no-wrap
msgid "window header line"
msgstr ""

# type: Plain text
#: lispref/modes.texi:2102
msgid ""
"A window can have a @dfn{header line} at the top, just as it can have a mode "
"line at the bottom.  The header line feature works just like the mode-line "
"feature, except that it's controlled by different variables."
msgstr ""

# type: defvar
#: lispref/modes.texi:2107
msgid ""
"This variable, local in every buffer, specifies how to display the header "
"line, for windows displaying the buffer.  The format of the value is the "
"same as for @code{mode-line-format} (@pxref{Mode Line Data})."
msgstr ""

# type: defvar
#: lispref/modes.texi:2109
#, no-wrap
msgid "default-header-line-format"
msgstr ""

# type: defvar
#: lispref/modes.texi:2113
msgid ""
"This variable holds the default @code{header-line-format} for buffers that "
"do not override it.  This is the same as @code{(default-value 'header-line-"
"format)}."
msgstr ""

# type: defvar
#: lispref/modes.texi:2115
msgid ""
"It is normally @code{nil}, so that ordinary buffers have no header line."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2121
msgid ""
"A window that is just one line tall never displays a header line.  A window "
"that is two lines tall cannot display both a mode line and a header line at "
"once; if it has a mode line, then it does not display a header line."
msgstr ""

# type: subsection
#: lispref/modes.texi:2123
#, no-wrap
msgid "Emulating Mode-Line Formatting"
msgstr ""

# type: Plain text
#: lispref/modes.texi:2128
msgid ""
"You can use the function @code{format-mode-line} to compute the text that "
"would appear in a mode line or header line based on a certain mode-line "
"specification."
msgstr ""

# type: defun
#: lispref/modes.texi:2129
#, no-wrap
msgid "format-mode-line format &optional face window buffer"
msgstr ""

# type: defun
#: lispref/modes.texi:2137
msgid ""
"This function formats a line of text according to @var{format} as if it were "
"generating the mode line for @var{window}, but instead of displaying the "
"text in the mode line or the header line, it returns the text as a string.  "
"The argument @var{window} defaults to the selected window.  If @var{buffer} "
"is non-@code{nil}, all the information used is taken from @var{buffer}; by "
"default, it comes from @var{window}'s buffer."
msgstr ""

# type: defun
#: lispref/modes.texi:2145
msgid ""
"The value string normally has text properties that correspond to the faces, "
"keymaps, etc., that the mode line would have.  And any character for which "
"no @code{face} property is specified gets a default value which is usually "
"@var{face}.  (If @var{face} is @code{t}, that stands for either @code{mode-"
"line} if @var{window} is selected, otherwise @code{mode-line-inactive}.  If "
"@var{face} is @code{nil} or omitted, that stands for no face property.)"
msgstr ""

# type: defun
#: lispref/modes.texi:2147
msgid "However, if @var{face} is an integer, the value has no text properties."
msgstr ""

# type: defun
#: lispref/modes.texi:2153
msgid ""
"For example, @code{(format-mode-line header-line-format)} returns the text "
"that would appear in the selected window's header line (@code{\"\"} if it "
"has no header line).  @code{(format-mode-line header-line-format 'header-"
"line)} returns the same text, with each character carrying the face that it "
"will have in the header line itself."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2166
msgid ""
"@dfn{Imenu} is a feature that lets users select a definition or section in "
"the buffer, from a menu which lists all of them, to go directly to that "
"location in the buffer.  Imenu works by constructing a buffer index which "
"lists the names and buffer positions of the definitions, or other named "
"portions of the buffer; then the user can choose one of them and move point "
"to it.  Major modes can add a menu bar item to use Imenu using @code{imenu-"
"add-to-menubar}."
msgstr ""

# type: defun
#: lispref/modes.texi:2167
#, no-wrap
msgid "imenu-add-to-menubar name"
msgstr ""

# type: defun
#: lispref/modes.texi:2170
msgid ""
"This function defines a local menu bar item named @var{name} to run Imenu."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2176
msgid ""
"The user-level commands for using Imenu are described in the Emacs Manual "
"(@pxref{Imenu,, Imenu, emacs, the Emacs Manual}).  This section explains how "
"to customize Imenu's method of finding definitions or buffer portions for a "
"particular major mode."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2179
msgid ""
"The usual and simplest way is to set the variable @code{imenu-generic-"
"expression}:"
msgstr ""

# type: defvar
#: lispref/modes.texi:2180
#, no-wrap
msgid "imenu-generic-expression"
msgstr ""

# type: defvar
#: lispref/modes.texi:2184
msgid ""
"This variable, if non-@code{nil}, is a list that specifies regular "
"expressions for finding definitions for Imenu.  Simple elements of @code"
"{imenu-generic-expression} look like this:"
msgstr ""

# type: example
#: lispref/modes.texi:2187
#, no-wrap
msgid "(@var{menu-title} @var{regexp} @var{index})\n"
msgstr ""

# type: defvar
#: lispref/modes.texi:2194
msgid ""
"Here, if @var{menu-title} is non-@code{nil}, it says that the matches for "
"this element should go in a submenu of the buffer index; @var{menu-title} "
"itself specifies the name for the submenu.  If @var{menu-title} is @code"
"{nil}, the matches for this element go directly in the top level of the "
"buffer index."
msgstr ""

# type: defvar
#: lispref/modes.texi:2200
msgid ""
"The second item in the list, @var{regexp}, is a regular expression (@pxref"
"{Regular Expressions}); anything in the buffer that it matches is considered "
"a definition, something to mention in the buffer index.  The third item, @var"
"{index}, is a non-negative integer that indicates which subexpression in @var"
"{regexp} matches the definition's name."
msgstr ""

# type: defvar
#: lispref/modes.texi:2202
msgid "An element can also look like this:"
msgstr ""

# type: example
#: lispref/modes.texi:2205
#, no-wrap
msgid "(@var{menu-title} @var{regexp} @var{index} @var{function} @var{arguments}@dots{})\n"
msgstr ""

# type: defvar
#: lispref/modes.texi:2210
msgid ""
"Each match for this element creates an index item, and when the index item "
"is selected by the user, it calls @var{function} with arguments consisting "
"of the item name, the buffer position, and @var{arguments}."
msgstr ""

# type: defvar
#: lispref/modes.texi:2213
msgid ""
"For Emacs Lisp mode, @code{imenu-generic-expression} could look like this:"
msgstr ""

# type: group
#: lispref/modes.texi:2219
#, no-wrap
msgid ""
"((nil \"^\\\\s-*(def\\\\(un\\\\|subst\\\\|macro\\\\|advice\\\\)\\\n"
"\\\\s-+\\\\([-A-Za-z0-9+]+\\\\)\" 2)\n"
msgstr ""

# type: group
#: lispref/modes.texi:2223
#, no-wrap
msgid ""
" (\"*Vars*\" \"^\\\\s-*(def\\\\(var\\\\|const\\\\)\\\n"
"\\\\s-+\\\\([-A-Za-z0-9+]+\\\\)\" 2)\n"
msgstr ""

# type: group
#: lispref/modes.texi:2229
#, no-wrap
msgid ""
" (\"*Types*\"\n"
"  \"^\\\\s-*\\\n"
"(def\\\\(type\\\\|struct\\\\|class\\\\|ine-condition\\\\)\\\n"
"\\\\s-+\\\\([-A-Za-z0-9+]+\\\\)\" 2))\n"
msgstr ""

# type: defvar
#: lispref/modes.texi:2233 lispref/modes.texi:2242 lispref/modes.texi:2274
#: lispref/modes.texi:2289 lispref/modes.texi:2298 lispref/modes.texi:2346
msgid "Setting this variable makes it buffer-local in the current buffer."
msgstr ""

# type: defvar
#: lispref/modes.texi:2235
#, no-wrap
msgid "imenu-case-fold-search"
msgstr ""

# type: defvar
#: lispref/modes.texi:2240
msgid ""
"This variable controls whether matching against the regular expressions in "
"the value of @code{imenu-generic-expression} is case-sensitive: @code{t}, "
"the default, means matching should ignore case."
msgstr ""

# type: defvar
#: lispref/modes.texi:2244
#, no-wrap
msgid "imenu-syntax-alist"
msgstr ""

# type: defvar
#: lispref/modes.texi:2248
msgid ""
"This variable is an alist of syntax table modifiers to use while processing "
"@code{imenu-generic-expression}, to override the syntax table of the current "
"buffer.  Each element should have this form:"
msgstr ""

# type: example
#: lispref/modes.texi:2251
#, no-wrap
msgid "(@var{characters} . @var{syntax-description})\n"
msgstr ""

# type: defvar
#: lispref/modes.texi:2257
msgid ""
"The @sc{car}, @var{characters}, can be either a character or a string.  The "
"element says to give that character or characters the syntax specified by "
"@var{syntax-description}, which is passed to @code{modify-syntax-entry} "
"(@pxref{Syntax Table Functions})."
msgstr ""

# type: defvar
#: lispref/modes.texi:2262
msgid ""
"This feature is typically used to give word syntax to characters which "
"normally have symbol syntax, and thus to simplify @code{imenu-generic-"
"expression} and speed up matching.  For example, Fortran mode uses it this "
"way:"
msgstr ""

# type: example
#: lispref/modes.texi:2265
#, no-wrap
msgid "(setq imenu-syntax-alist '((\"_$\" . \"w\")))\n"
msgstr ""

# type: defvar
#: lispref/modes.texi:2272
msgid ""
"The @code{imenu-generic-expression} regular expressions can then use @samp{\\"
"\\sw+} instead of @samp{\\\\(\\\\sw\\\\|\\\\s_\\\\)+}.  Note that this "
"technique may be inconvenient when the mode needs to limit the initial "
"character of a name to a smaller set of characters than are allowed in the "
"rest of a name."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2279
msgid ""
"Another way to customize Imenu for a major mode is to set the variables @code"
"{imenu-prev-index-position-function} and @code{imenu-extract-index-name-"
"function}:"
msgstr ""

# type: defvar
#: lispref/modes.texi:2280
#, no-wrap
msgid "imenu-prev-index-position-function"
msgstr ""

# type: defvar
#: lispref/modes.texi:2287
msgid ""
"If this variable is non-@code{nil}, its value should be a function that "
"finds the next ``definition'' to put in the buffer index, scanning backward "
"in the buffer from point.  It should return @code{nil} if it doesn't find "
"another ``definition'' before point.  Otherwise it should leave point at the "
"place it finds a ``definition'' and return any non-@code{nil} value."
msgstr ""

# type: defvar
#: lispref/modes.texi:2291
#, no-wrap
msgid "imenu-extract-index-name-function"
msgstr ""

# type: defvar
#: lispref/modes.texi:2296
msgid ""
"If this variable is non-@code{nil}, its value should be a function to return "
"the name for a definition, assuming point is in that definition as the @code"
"{imenu-prev-index-position-function} function would leave it."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2302
msgid ""
"The last way to customize Imenu for a major mode is to set the variable @code"
"{imenu-create-index-function}:"
msgstr ""

# type: defvar
#: lispref/modes.texi:2303
#, no-wrap
msgid "imenu-create-index-function"
msgstr ""

# type: defvar
#: lispref/modes.texi:2308
msgid ""
"This variable specifies the function to use for creating a buffer index.  "
"The function should take no arguments, and return an index alist for the "
"current buffer.  It is called within @code{save-excursion}, so where it "
"leaves point makes no difference."
msgstr ""

# type: defvar
#: lispref/modes.texi:2311
msgid ""
"The index alist can have three types of elements.  Simple elements look like "
"this:"
msgstr ""

# type: example
#: lispref/modes.texi:2314
#, no-wrap
msgid "(@var{index-name} . @var{index-position})\n"
msgstr ""

# type: defvar
#: lispref/modes.texi:2318
msgid ""
"Selecting a simple element has the effect of moving to position @var{index-"
"position} in the buffer.  Special elements look like this:"
msgstr ""

# type: example
#: lispref/modes.texi:2321
#, no-wrap
msgid "(@var{index-name} @var{index-position} @var{function} @var{arguments}@dots{})\n"
msgstr ""

# type: defvar
#: lispref/modes.texi:2324
msgid "Selecting a special element performs:"
msgstr ""

# type: example
#: lispref/modes.texi:2328
#, no-wrap
msgid ""
"(funcall @var{function}\n"
"         @var{index-name} @var{index-position} @var{arguments}@dots{})\n"
msgstr ""

# type: defvar
#: lispref/modes.texi:2331
msgid "A nested sub-alist element looks like this:"
msgstr ""

# type: example
#: lispref/modes.texi:2334
#, no-wrap
msgid "(@var{menu-title} @var{sub-alist})\n"
msgstr ""

# type: defvar
#: lispref/modes.texi:2337
msgid "It creates the submenu @var{menu-title} specified by @var{sub-alist}."
msgstr ""

# type: defvar
#: lispref/modes.texi:2344
msgid ""
"The default value of @code{imenu-create-index-function} is @code{imenu-"
"default-create-index-function}.  This function calls the value of @code"
"{imenu-prev-index-position-function} and the value of @code{imenu-extract-"
"index-name-function} to produce the index alist.  However, if either of "
"these two variables is @code{nil}, the default function uses @code{imenu-"
"generic-expression} instead."
msgstr ""

# type: cindex
#: lispref/modes.texi:2350
#, no-wrap
msgid "Font Lock mode"
msgstr ""

# type: Plain text
#: lispref/modes.texi:2358
msgid ""
"@dfn{Font Lock mode} is a feature that automatically attaches @code{face} "
"properties to certain parts of the buffer based on their syntactic role.  "
"How it parses the buffer depends on the major mode; most major modes define "
"syntactic criteria for which faces to use in which contexts.  This section "
"explains how to customize Font Lock for a particular major mode."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2364
msgid ""
"Font Lock mode finds text to highlight in two ways: through syntactic "
"parsing based on the syntax table, and through searching (usually for "
"regular expressions).  Syntactic fontification happens first; it finds "
"comments and string constants and highlights them.  Search-based "
"fontification happens second."
msgstr ""

# type: subsection
#: lispref/modes.texi:2380 lispref/modes.texi:2382 lispref/modes.texi:2383
#, no-wrap
msgid "Font Lock Basics"
msgstr ""

# type: menu
#: lispref/modes.texi:2380
msgid "Overview of customizing Font Lock."
msgstr ""

# type: subsection
#: lispref/modes.texi:2380 lispref/modes.texi:2452 lispref/modes.texi:2453
#, no-wrap
msgid "Search-based Fontification"
msgstr ""

# type: menu
#: lispref/modes.texi:2380
msgid "Fontification based on regexps."
msgstr ""

# type: node
#: lispref/modes.texi:2380 lispref/modes.texi:2682
#, no-wrap
msgid "Customizing Keywords"
msgstr ""

# type: menu
#: lispref/modes.texi:2380
msgid "Customizing search-based fontification."
msgstr ""

# type: subsection
#: lispref/modes.texi:2380 lispref/modes.texi:2757 lispref/modes.texi:2758
#, no-wrap
msgid "Other Font Lock Variables"
msgstr ""

# type: menu
#: lispref/modes.texi:2380
msgid "Additional customization facilities."
msgstr ""

# type: subsection
#: lispref/modes.texi:2380 lispref/modes.texi:2820 lispref/modes.texi:2821
#, no-wrap
msgid "Levels of Font Lock"
msgstr ""

# type: menu
#: lispref/modes.texi:2380
msgid "Each mode can define alternative levels"
msgstr ""

# type: menu
#: lispref/modes.texi:2380
msgid "so that the user can select more or less."
msgstr ""

# type: subsection
#: lispref/modes.texi:2380 lispref/modes.texi:2851 lispref/modes.texi:2852
#, no-wrap
msgid "Precalculated Fontification"
msgstr ""

# type: menu
#: lispref/modes.texi:2380
msgid "How Lisp programs that produce the buffer"
msgstr ""

# type: menu
#: lispref/modes.texi:2380
msgid "contents can also specify how to fontify it."
msgstr ""

# type: subsection
#: lispref/modes.texi:2380 lispref/modes.texi:2867 lispref/modes.texi:2868
#, no-wrap
msgid "Faces for Font Lock"
msgstr ""

# type: menu
#: lispref/modes.texi:2380
msgid "Special faces specifically for Font Lock."
msgstr ""

# type: subsection
#: lispref/modes.texi:2380 lispref/modes.texi:2941 lispref/modes.texi:2942
#, no-wrap
msgid "Syntactic Font Lock"
msgstr ""

# type: menu
#: lispref/modes.texi:2380
msgid "Fontification based on syntax tables."
msgstr ""

# type: subsection
#: lispref/modes.texi:2380 lispref/modes.texi:3005 lispref/modes.texi:3006
#, no-wrap
msgid "Setting Syntax Properties"
msgstr ""

# type: menu
#: lispref/modes.texi:2380
msgid "Defining character syntax based on context"
msgstr ""

# type: menu
#: lispref/modes.texi:2380
msgid "using the Font Lock mechanism."
msgstr ""

# type: node
#: lispref/modes.texi:2380 lispref/modes.texi:3069
#, no-wrap
msgid "Multiline Font Lock"
msgstr ""

# type: menu
#: lispref/modes.texi:2380
msgid "How to coerce Font Lock into properly"
msgstr ""

# type: menu
#: lispref/modes.texi:2380
msgid "highlighting multiline constructs."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2390
msgid ""
"There are several variables that control how Font Lock mode highlights "
"text.  But major modes should not set any of these variables directly.  "
"Instead, they should set @code{font-lock-defaults} as a buffer-local "
"variable.  The value assigned to this variable is used, if and when Font "
"Lock mode is enabled, to set all the other variables."
msgstr ""

# type: defvar
#: lispref/modes.texi:2398
msgid ""
"This variable is set by major modes, as a buffer-local variable, to specify "
"how to fontify text in that mode.  It automatically becomes buffer-local "
"when you set it.  If its value is @code{nil}, Font-Lock mode does no "
"highlighting, and you can use the @samp{Faces} menu (under @samp{Edit} and "
"then @samp{Text Properties} in the menu bar) to assign faces explicitly to "
"text in the buffer."
msgstr ""

# type: defvar
#: lispref/modes.texi:2400
msgid "If non-@code{nil}, the value should look like this:"
msgstr ""

# type: example
#: lispref/modes.texi:2404
#, no-wrap
msgid ""
"(@var{keywords} [@var{keywords-only} [@var{case-fold}\n"
" [@var{syntax-alist} [@var{syntax-begin} @var{other-vars}@dots{}]]]])\n"
msgstr ""

# type: defvar
#: lispref/modes.texi:2413
msgid ""
"The first element, @var{keywords}, indirectly specifies the value of @code"
"{font-lock-keywords} which directs search-based fontification.  It can be a "
"symbol, a variable or a function whose value is the list to use for @code"
"{font-lock-keywords}.  It can also be a list of several such symbols, one "
"for each possible level of fontification.  The first symbol specifies how to "
"do level 1 fontification, the second symbol how to do level 2, and so on.  "
"@xref{Levels of Font Lock}."
msgstr ""

# type: defvar
#: lispref/modes.texi:2419
msgid ""
"The second element, @var{keywords-only}, specifies the value of the variable "
"@code{font-lock-keywords-only}.  If this is omitted or @code{nil}, syntactic "
"fontification (of strings and comments) is also performed.  If this is non-"
"@code{nil}, such fontification is not performed.  @xref{Syntactic Font Lock}."
msgstr ""

# type: defvar
#: lispref/modes.texi:2424
msgid ""
"The third element, @var{case-fold}, specifies the value of @code{font-lock-"
"keywords-case-fold-search}.  If it is non-@code{nil}, Font Lock mode ignores "
"case when searching as directed by @code{font-lock-keywords}."
msgstr ""

# type: defvar
#: lispref/modes.texi:2430
msgid ""
"If the fourth element, @var{syntax-alist}, is non-@code{nil}, it should be a "
"list of cons cells of the form @code{(@var{char-or-string} . @var"
"{string})}.  These are used to set up a syntax table for syntactic "
"fontification (@pxref{Syntax Table Functions}).  The resulting syntax table "
"is stored in @code{font-lock-syntax-table}."
msgstr ""

# type: defvar
#: lispref/modes.texi:2435
msgid ""
"The fifth element, @var{syntax-begin}, specifies the value of @code{font-"
"lock-beginning-of-syntax-function}.  We recommend setting this variable to "
"@code{nil} and using @code{syntax-begin-function} instead."
msgstr ""

# type: defvar
#: lispref/modes.texi:2443
msgid ""
"All the remaining elements (if any) are collectively called @var{other-"
"vars}.  Each of these elements should have the form @code{(@var{variable} . "
"@var{value})}---which means, make @var{variable} buffer-local and then set "
"it to @var{value}.  You can use these @var{other-vars} to set other "
"variables that affect fontification, aside from those you can control with "
"the first five elements.  @xref{Other Font Lock Variables}."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2451
msgid ""
"If your mode fontifies text explicitly by adding @code{font-lock-face} "
"properties, it can specify @code{(nil t)} for @code{font-lock-defaults} to "
"turn off all automatic fontification.  However, this is not required; it is "
"possible to fontify some things using @code{font-lock-face} properties and "
"set up automatic fontification for other parts of the text."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2459
msgid ""
"The most important variable for customizing Font Lock mode is @code{font-"
"lock-keywords}.  It specifies the search criteria for search-based "
"fontification.  You should specify the value of this variable with @var"
"{keywords} in @code{font-lock-defaults}."
msgstr ""

# type: defvar
#: lispref/modes.texi:2460
#, no-wrap
msgid "font-lock-keywords"
msgstr ""

# type: defvar
#: lispref/modes.texi:2464
msgid ""
"This variable's value is a list of the keywords to highlight.  Be careful "
"when composing regular expressions for this list; a poorly written pattern "
"can dramatically slow things down!"
msgstr ""

# type: Plain text
#: lispref/modes.texi:2473
msgid ""
"Each element of @code{font-lock-keywords} specifies how to find certain "
"cases of text, and how to highlight those cases.  Font Lock mode processes "
"the elements of @code{font-lock-keywords} one by one, and for each element, "
"it finds and handles all matches.  Ordinarily, once part of the text has "
"been fontified already, this cannot be overridden by a subsequent match in "
"the same text; but you can specify different behavior using the @var"
"{override} element of a @var{subexp-highlighter}."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2476
msgid ""
"Each element of @code{font-lock-keywords} should have one of these forms:"
msgstr ""

# type: table
#: lispref/modes.texi:2481
msgid ""
"Highlight all matches for @var{regexp} using @code{font-lock-keyword-face}.  "
"For example,"
msgstr ""

# type: example
#: lispref/modes.texi:2486
#, no-wrap
msgid ""
";; @r{Highlight occurrences of the word @samp{foo}}\n"
";; @r{using @code{font-lock-keyword-face}.}\n"
"\"\\\\<foo\\\\>\"\n"
msgstr ""

# type: table
#: lispref/modes.texi:2491
msgid ""
"The function @code{regexp-opt} (@pxref{Regexp Functions}) is useful for "
"calculating optimal regular expressions to match a number of different "
"keywords."
msgstr ""

# type: table
#: lispref/modes.texi:2495
msgid ""
"Find text by calling @var{function}, and highlight the matches it finds "
"using @code{font-lock-keyword-face}."
msgstr ""

# type: table
#: lispref/modes.texi:2501
msgid ""
"When @var{function} is called, it receives one argument, the limit of the "
"search; it should begin searching at point, and not search beyond the "
"limit.  It should return non-@code{nil} if it succeeds, and set the match "
"data to describe the match that was found.  Returning @code{nil} indicates "
"failure of the search."
msgstr ""

# type: table
#: lispref/modes.texi:2506
msgid ""
"Fontification will call @var{function} repeatedly with the same limit, and "
"with point where the previous invocation left it, until @var{function} "
"fails.  On failure, @var{function} need not reset point in any particular "
"way."
msgstr ""

# type: item
#: lispref/modes.texi:2507
#, no-wrap
msgid "(@var{matcher} . @var{subexp})"
msgstr ""

# type: table
#: lispref/modes.texi:2512
msgid ""
"In this kind of element, @var{matcher} is either a regular expression or a "
"function, as described above.  The @sc{cdr}, @var{subexp}, specifies which "
"subexpression of @var{matcher} should be highlighted (instead of the entire "
"text that @var{matcher} matched)."
msgstr ""

# type: example
#: lispref/modes.texi:2517
#, no-wrap
msgid ""
";; @r{Highlight the @samp{bar} in each occurrence of @samp{fubar},}\n"
";; @r{using @code{font-lock-keyword-face}.}\n"
"(\"fu\\\\(bar\\\\)\" . 1)\n"
msgstr ""

# type: table
#: lispref/modes.texi:2522
msgid ""
"If you use @code{regexp-opt} to produce the regular expression @var"
"{matcher}, you can use @code{regexp-opt-depth} (@pxref{Regexp Functions}) to "
"calculate the value for @var{subexp}."
msgstr ""

# type: item
#: lispref/modes.texi:2523
#, no-wrap
msgid "(@var{matcher} . @var{facespec})"
msgstr ""

# type: table
#: lispref/modes.texi:2528
msgid ""
"In this kind of element, @var{facespec} is an expression whose value "
"specifies the face to use for highlighting.  In the simplest case, @var"
"{facespec} is a Lisp variable (a symbol) whose value is a face name."
msgstr ""

# type: example
#: lispref/modes.texi:2533
#, no-wrap
msgid ""
";; @r{Highlight occurrences of @samp{fubar},}\n"
";; @r{using the face which is the value of @code{fubar-face}.}\n"
"(\"fubar\" . fubar-face)\n"
msgstr ""

# type: table
#: lispref/modes.texi:2536
msgid "However, @var{facespec} can also evaluate to a list of this form:"
msgstr ""

# type: example
#: lispref/modes.texi:2539
#, no-wrap
msgid "(face @var{face} @var{prop1} @var{val1} @var{prop2} @var{val2}@dots{})\n"
msgstr ""

# type: table
#: lispref/modes.texi:2550
msgid ""
"to specify the face @var{face} and various additional text properties to put "
"on the text that matches.  If you do this, be sure to add the other text "
"property names that you set in this way to the value of @code{font-lock-"
"extra-managed-props} so that the properties will also be cleared out when "
"they are no longer appropriate.  Alternatively, you can set the variable "
"@code{font-lock-unfontify-region-function} to a function that clears these "
"properties.  @xref{Other Font Lock Variables}."
msgstr ""

# type: item
#: lispref/modes.texi:2551
#, no-wrap
msgid "(@var{matcher} . @var{subexp-highlighter})"
msgstr ""

# type: table
#: lispref/modes.texi:2555
msgid ""
"In this kind of element, @var{subexp-highlighter} is a list which specifies "
"how to highlight matches found by @var{matcher}.  It has the form:"
msgstr ""

# type: example
#: lispref/modes.texi:2558
#, no-wrap
msgid "(@var{subexp} @var{facespec} [[@var{override} [@var{laxmatch}]])\n"
msgstr ""

# type: table
#: lispref/modes.texi:2564
msgid ""
"The @sc{car}, @var{subexp}, is an integer specifying which subexpression of "
"the match to fontify (0 means the entire matching text).  The second "
"subelement, @var{facespec}, is an expression whose value specifies the face, "
"as described above."
msgstr ""

# type: table
#: lispref/modes.texi:2574
msgid ""
"The last two values in @var{subexp-highlighter}, @var{override} and @var"
"{laxmatch}, are optional flags.  If @var{override} is @code{t}, this element "
"can override existing fontification made by previous elements of @code{font-"
"lock-keywords}.  If it is @code{keep}, then each character is fontified if "
"it has not been fontified already by some other element.  If it is @code"
"{prepend}, the face specified by @var{facespec} is added to the beginning of "
"the @code{font-lock-face} property.  If it is @code{append}, the face is "
"added to the end of the @code{font-lock-face} property."
msgstr ""

# type: table
#: lispref/modes.texi:2582
msgid ""
"If @var{laxmatch} is non-@code{nil}, it means there should be no error if "
"there is no subexpression numbered @var{subexp} in @var{matcher}.  "
"Obviously, fontification of the subexpression numbered @var{subexp} will not "
"occur.  However, fontification of other subexpressions (and other regexps) "
"will continue.  If @var{laxmatch} is @code{nil}, and the specified "
"subexpression is missing, then an error is signaled which terminates search-"
"based fontification."
msgstr ""

# type: table
#: lispref/modes.texi:2584
msgid "Here are some examples of elements of this kind, and what they do:"
msgstr ""

# type: smallexample
#: lispref/modes.texi:2590
#, no-wrap
msgid ""
";; @r{Highlight occurrences of either @samp{foo} or @samp{bar}, using}\n"
";; @r{@code{foo-bar-face}, even if they have already been highlighted.}\n"
";; @r{@code{foo-bar-face} should be a variable whose value is a face.}\n"
"(\"foo\\\\|bar\" 0 foo-bar-face t)\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/modes.texi:2595
#, no-wrap
msgid ""
";; @r{Highlight the first subexpression within each occurrence}\n"
";; @r{that the function @code{fubar-match} finds,}\n"
";; @r{using the face which is the value of @code{fubar-face}.}\n"
"(fubar-match 1 fubar-face)\n"
msgstr ""

# type: item
#: lispref/modes.texi:2597
#, no-wrap
msgid "(@var{matcher} . @var{anchored-highlighter})"
msgstr ""

# type: table
#: lispref/modes.texi:2603
msgid ""
"In this kind of element, @var{anchored-highlighter} specifies how to "
"highlight text that follows a match found by @var{matcher}.  So a match "
"found by @var{matcher} acts as the anchor for further searches specified by "
"@var{anchored-highlighter}.  @var{anchored-highlighter} is a list of the "
"following form:"
msgstr ""

# type: example
#: lispref/modes.texi:2607
#, no-wrap
msgid ""
"(@var{anchored-matcher} @var{pre-form} @var{post-form}\n"
"                        @var{subexp-highlighters}@dots{})\n"
msgstr ""

# type: table
#: lispref/modes.texi:2616
msgid ""
"Here, @var{anchored-matcher}, like @var{matcher}, is either a regular "
"expression or a function.  After a match of @var{matcher} is found, point is "
"at the end of the match.  Now, Font Lock evaluates the form @var{pre-form}.  "
"Then it searches for matches of @var{anchored-matcher} and uses @var{subexp-"
"highlighters} to highlight these.  A @var{subexp-highlighter} is as "
"described above.  Finally, Font Lock evaluates @var{post-form}."
msgstr ""

# type: table
#: lispref/modes.texi:2623
msgid ""
"The forms @var{pre-form} and @var{post-form} can be used to initialize "
"before, and cleanup after, @var{anchored-matcher} is used.  Typically, @var"
"{pre-form} is used to move point to some position relative to the match of "
"@var{matcher}, before starting with @var{anchored-matcher}.  @var{post-form} "
"might be used to move back, before resuming with @var{matcher}."
msgstr ""

# type: table
#: lispref/modes.texi:2632
msgid ""
"After Font Lock evaluates @var{pre-form}, it does not search for @var"
"{anchored-matcher} beyond the end of the line.  However, if @var{pre-form} "
"returns a buffer position that is greater than the position of point after "
"@var{pre-form} is evaluated, then the position returned by @var{pre-form} is "
"used as the limit of the search instead.  It is generally a bad idea to "
"return a position greater than the end of the line; in other words, the @var"
"{anchored-matcher} search should not span lines."
msgstr ""

# type: smallexample
#: lispref/modes.texi:2640
#, no-wrap
msgid ""
";; @r{Highlight occurrences of the word @samp{item} following}\n"
";; @r{an occurrence of the word @samp{anchor} (on the same line)}\n"
";; @r{in the value of @code{item-face}.}\n"
"(\"\\\\<anchor\\\\>\" \"\\\\<item\\\\>\" nil nil (0 item-face))\n"
msgstr ""

# type: table
#: lispref/modes.texi:2646
msgid ""
"Here, @var{pre-form} and @var{post-form} are @code{nil}.  Therefore "
"searching for @samp{item} starts at the end of the match of @samp{anchor}, "
"and searching for subsequent instances of @samp{anchor} resumes from where "
"searching for @samp{item} concluded."
msgstr ""

# type: item
#: lispref/modes.texi:2647
#, no-wrap
msgid "(@var{matcher} @var{highlighters}@dots{})"
msgstr ""

# type: table
#: lispref/modes.texi:2652
msgid ""
"This sort of element specifies several @var{highlighter} lists for a single "
"@var{matcher}.  A @var{highlighter} list can be of the type @var{subexp-"
"highlighter} or @var{anchored-highlighter} as described above."
msgstr ""

# type: smallexample
#: lispref/modes.texi:2661
#, no-wrap
msgid ""
";; @r{Highlight occurrences of the word @samp{anchor} in the value}\n"
";; @r{of @code{anchor-face}, and subsequent occurrences of the word}\n"
";; @r{@samp{item} (on the same line) in the value of @code{item-face}.}\n"
"(\"\\\\<anchor\\\\>\" (0 anchor-face)\n"
"                (\"\\\\<item\\\\>\" nil nil (0 item-face)))\n"
msgstr ""

# type: item
#: lispref/modes.texi:2663
#, no-wrap
msgid "(eval . @var{form})"
msgstr ""

# type: table
#: lispref/modes.texi:2667
msgid ""
"Here @var{form} is an expression to be evaluated the first time this value "
"of @code{font-lock-keywords} is used in a buffer.  Its value should have one "
"of the forms described in this table."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2672
msgid ""
"@strong{Warning:} Do not design an element of @code{font-lock-keywords} to "
"match text which spans lines; this does not work reliably.  For details, see "
"@xref{Multiline Font Lock}."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2676
msgid ""
"You can use @var{case-fold} in @code{font-lock-defaults} to specify the "
"value of @code{font-lock-keywords-case-fold-search} which says whether "
"search-based fontification should be case-insensitive."
msgstr ""

# type: defvar
#: lispref/modes.texi:2677
#, no-wrap
msgid "font-lock-keywords-case-fold-search"
msgstr ""

# type: defvar
#: lispref/modes.texi:2680
msgid ""
"Non-@code{nil} means that regular expression matching for the sake of @code"
"{font-lock-keywords} should be case-insensitive."
msgstr ""

# type: subsection
#: lispref/modes.texi:2683
#, no-wrap
msgid "Customizing Search-Based Fontification"
msgstr ""

# type: Plain text
#: lispref/modes.texi:2688
msgid ""
"You can use @code{font-lock-add-keywords} to add additional search-based "
"fontification rules to a major mode, and @code{font-lock-remove-keywords} to "
"removes rules."
msgstr ""

# type: defun
#: lispref/modes.texi:2689
#, no-wrap
msgid "font-lock-add-keywords mode keywords &optional how"
msgstr ""

# type: defun
#: lispref/modes.texi:2693
msgid ""
"This function adds highlighting @var{keywords}, for the current buffer or "
"for major mode @var{mode}.  The argument @var{keywords} should be a list "
"with the same format as the variable @code{font-lock-keywords}."
msgstr ""

# type: defun
#: lispref/modes.texi:2699
msgid ""
"If @var{mode} is a symbol which is a major mode command name, such as @code"
"{c-mode}, the effect is that enabling Font Lock mode in @var{mode} will add "
"@var{keywords} to @code{font-lock-keywords}.  Calling with a non-@code{nil} "
"value of @var{mode} is correct only in your @file{~/.emacs} file."
msgstr ""

# type: defun
#: lispref/modes.texi:2703
msgid ""
"If @var{mode} is @code{nil}, this function adds @var{keywords} to @code{font-"
"lock-keywords} in the current buffer.  This way of calling @code{font-lock-"
"add-keywords} is usually used in mode hook functions."
msgstr ""

# type: defun
#: lispref/modes.texi:2709
msgid ""
"By default, @var{keywords} are added at the beginning of @code{font-lock-"
"keywords}.  If the optional argument @var{how} is @code{set}, they are used "
"to replace the value of @code{font-lock-keywords}.  If @var{how} is any "
"other non-@code{nil} value, they are added at the end of @code{font-lock-"
"keywords}."
msgstr ""

# type: defun
#: lispref/modes.texi:2714
msgid ""
"Some modes provide specialized support you can use in additional "
"highlighting patterns.  See the variables @code{c-font-lock-extra-types}, "
"@code{c++-font-lock-extra-types}, and @code{java-font-lock-extra-types}, for "
"example."
msgstr ""

# type: defun
#: lispref/modes.texi:2721
msgid ""
"@strong{Warning:} major mode functions must not call @code{font-lock-add-"
"keywords} under any circumstances, either directly or indirectly, except "
"through their mode hooks.  (Doing so would lead to incorrect behavior for "
"some minor modes.)  They should set up their rules for search-based "
"fontification by setting @code{font-lock-keywords}."
msgstr ""

# type: defun
#: lispref/modes.texi:2723
#, no-wrap
msgid "font-lock-remove-keywords mode keywords"
msgstr ""

# type: defun
#: lispref/modes.texi:2729
msgid ""
"This function removes @var{keywords} from @code{font-lock-keywords} for the "
"current buffer or for major mode @var{mode}.  As in @code{font-lock-add-"
"keywords}, @var{mode} should be a major mode command name or @code{nil}.  "
"All the caveats and requirements for @code{font-lock-add-keywords} apply "
"here too."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2732
msgid "For example, this code"
msgstr ""

# type: smallexample
#: lispref/modes.texi:2737
#, no-wrap
msgid ""
"(font-lock-add-keywords 'c-mode\n"
" '((\"\\\\<\\\\(FIXME\\\\):\" 1 font-lock-warning-face prepend)\n"
"   (\"\\\\<\\\\(and\\\\|or\\\\|not\\\\)\\\\>\" . font-lock-keyword-face)))\n"
msgstr ""

# type: Plain text
#: lispref/modes.texi:2743
msgid ""
"adds two fontification patterns for C mode: one to fontify the word @samp"
"{FIXME}, even in comments, and another to fontify the words @samp{and}, @samp"
"{or} and @samp{not} as keywords."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2747
msgid ""
"That example affects only C mode proper.  To add the same patterns to C mode "
"@emph{and} all modes derived from it, do this instead:"
msgstr ""

# type: smallexample
#: lispref/modes.texi:2755
#, no-wrap
msgid ""
"(add-hook 'c-mode-hook\n"
" (lambda ()\n"
"  (font-lock-add-keywords nil\n"
"   '((\"\\\\<\\\\(FIXME\\\\):\" 1 font-lock-warning-face prepend)\n"
"     (\"\\\\<\\\\(and\\\\|or\\\\|not\\\\)\\\\>\" .\n"
"      font-lock-keyword-face)))))\n"
msgstr ""

# type: Plain text
#: lispref/modes.texi:2763
msgid ""
"This section describes additional variables that a major mode can set by "
"means of @var{other-vars} in @code{font-lock-defaults} (@pxref{Font Lock "
"Basics})."
msgstr ""

# type: defvar
#: lispref/modes.texi:2769
msgid ""
"If this variable is non-@code{nil}, it should be a function that is called "
"with no arguments, to choose an enclosing range of text for refontification "
"for the command @kbd{M-o M-o} (@code{font-lock-fontify-block})."
msgstr ""

# type: defvar
#: lispref/modes.texi:2775
msgid ""
"The function should report its choice by placing the region around it.  A "
"good choice is a range of text large enough to give proper results, but not "
"too large so that refontification becomes slow.  Typical values are @code"
"{mark-defun} for programming modes or @code{mark-paragraph} for textual "
"modes."
msgstr ""

# type: defvar
#: lispref/modes.texi:2777
#, no-wrap
msgid "font-lock-extra-managed-props"
msgstr ""

# type: defvar
#: lispref/modes.texi:2785
msgid ""
"This variable specifies additional properties (other than @code{font-lock-"
"face}) that are being managed by Font Lock mode.  It is used by @code{font-"
"lock-default-unfontify-region}, which normally only manages the @code{font-"
"lock-face} property.  If you want Font Lock to manage other properties as "
"well, you must specify them in a @var{facespec} in @code{font-lock-keywords} "
"as well as add them to this list.  @xref{Search-based Fontification}."
msgstr ""

# type: defvar
#: lispref/modes.texi:2790
msgid ""
"Function to use for fontifying the buffer.  The default value is @code{font-"
"lock-default-fontify-buffer}."
msgstr ""

# type: defvar
#: lispref/modes.texi:2796
msgid ""
"Function to use for unfontifying the buffer.  This is used when turning off "
"Font Lock mode.  The default value is @code{font-lock-default-unfontify-"
"buffer}."
msgstr ""

# type: defvar
#: lispref/modes.texi:2804
msgid ""
"Function to use for fontifying a region.  It should take two arguments, the "
"beginning and end of the region, and an optional third argument @var"
"{verbose}.  If @var{verbose} is non-@code{nil}, the function should print "
"status messages.  The default value is @code{font-lock-default-fontify-"
"region}."
msgstr ""

# type: defvar
#: lispref/modes.texi:2810
msgid ""
"Function to use for unfontifying a region.  It should take two arguments, "
"the beginning and end of the region.  The default value is @code{font-lock-"
"default-unfontify-region}."
msgstr ""

# type: defvar
#: lispref/modes.texi:2813
#, no-wrap
msgid "font-lock-inhibit-thing-lock"
msgstr ""

# type: defvar
#: lispref/modes.texi:2817
#, no-wrap
msgid ""
"List of Font Lock mode related modes that should not be turned on.\n"
"Currently, valid mode names are @code{fast-lock-mode},\n"
"@code{jit-lock-mode} and @code{lazy-lock-mode}.\n"
msgstr ""

# type: Plain text
#: lispref/modes.texi:2829
msgid ""
"Many major modes offer three different levels of fontification.  You can "
"define multiple levels by using a list of symbols for @var{keywords} in @code"
"{font-lock-defaults}.  Each symbol specifies one level of fontification; it "
"is up to the user to choose one of these levels.  The chosen level's symbol "
"value is used to initialize @code{font-lock-keywords}."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2832
msgid "Here are the conventions for how to define the levels of fontification:"
msgstr ""

# type: itemize
#: lispref/modes.texi:2838
msgid ""
"Level 1: highlight function declarations, file directives (such as include "
"or import directives), strings and comments.  The idea is speed, so only the "
"most important and top-level components are fontified."
msgstr ""

# type: itemize
#: lispref/modes.texi:2844
msgid ""
"Level 2: in addition to level 1, highlight all language keywords, including "
"type names that act like keywords, as well as named constant values.  The "
"idea is that all keywords (either syntactic or semantic)  should be "
"fontified appropriately."
msgstr ""

# type: itemize
#: lispref/modes.texi:2849
msgid ""
"Level 3: in addition to level 2, highlight the symbols being defined in "
"function and variable declarations, and all builtin function names, wherever "
"they appear."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2862
msgid ""
"In addition to using @code{font-lock-defaults} for search-based "
"fontification, you may use the special character property @code{font-lock-"
"face} (@pxref{Special Properties}).  This property acts just like the "
"explicit @code{face} property, but its activation is toggled when the user "
"calls @kbd{M-x font-lock-mode}.  Using @code{font-lock-face} is especially "
"convenient for special modes which construct their text programmatically, "
"such as @code{list-buffers} and @code{occur}."
msgstr ""

# type: Plain text
#: lispref/modes.texi:2866
msgid ""
"If your mode does not use any of the other machinery of Font Lock (i.e. it "
"only uses the @code{font-lock-face} property), it should not set the "
"variable @code{font-lock-defaults}."
msgstr ""

# type: cindex
#: lispref/modes.texi:2869
#, no-wrap
msgid "faces for font lock"
msgstr ""

# type: cindex
#: lispref/modes.texi:2870
#, no-wrap
msgid "font lock faces"
msgstr ""

# type: Plain text
#: lispref/modes.texi:2879
msgid ""
"You can make Font Lock mode use any face, but several faces are defined "
"specifically for Font Lock mode.  Each of these symbols is both a face name, "
"and a variable whose default value is the symbol itself.  Thus, the default "
"value of @code{font-lock-comment-face} is @code{font-lock-comment-face}.  "
"This means you can write @code{font-lock-comment-face} in a context such as "
"@code{font-lock-keywords} where a face-name-valued expression is used."
msgstr ""

# type: vindex
#: lispref/modes.texi:2881 lispref/modes.texi:2882
#, no-wrap
msgid "font-lock-comment-face"
msgstr ""

# type: table
#: lispref/modes.texi:2884
msgid "Used (typically) for comments."
msgstr ""

# type: vindex
#: lispref/modes.texi:2885 lispref/modes.texi:2886
#, no-wrap
msgid "font-lock-comment-delimiter-face"
msgstr ""

# type: table
#: lispref/modes.texi:2888
msgid "Used (typically) for comments delimiters."
msgstr ""

# type: vindex
#: lispref/modes.texi:2889 lispref/modes.texi:2890
#, no-wrap
msgid "font-lock-doc-face"
msgstr ""

# type: table
#: lispref/modes.texi:2892
msgid "Used (typically) for documentation strings in the code."
msgstr ""

# type: vindex
#: lispref/modes.texi:2893 lispref/modes.texi:2894
#, no-wrap
msgid "font-lock-string-face"
msgstr ""

# type: table
#: lispref/modes.texi:2896
msgid "Used (typically) for string constants."
msgstr ""

# type: vindex
#: lispref/modes.texi:2897 lispref/modes.texi:2898
#, no-wrap
msgid "font-lock-keyword-face"
msgstr ""

# type: table
#: lispref/modes.texi:2901
msgid ""
"Used (typically) for keywords---names that have special syntactic "
"significance, like @code{for} and @code{if} in C."
msgstr ""

# type: vindex
#: lispref/modes.texi:2902 lispref/modes.texi:2903
#, no-wrap
msgid "font-lock-builtin-face"
msgstr ""

# type: table
#: lispref/modes.texi:2905
msgid "Used (typically) for built-in function names."
msgstr ""

# type: vindex
#: lispref/modes.texi:2906 lispref/modes.texi:2907
#, no-wrap
msgid "font-lock-function-name-face"
msgstr ""

# type: table
#: lispref/modes.texi:2910
msgid ""
"Used (typically) for the name of a function being defined or declared, in a "
"function definition or declaration."
msgstr ""

# type: vindex
#: lispref/modes.texi:2911 lispref/modes.texi:2912
#, no-wrap
msgid "font-lock-variable-name-face"
msgstr ""

# type: table
#: lispref/modes.texi:2915
msgid ""
"Used (typically) for the name of a variable being defined or declared, in a "
"variable definition or declaration."
msgstr ""

# type: vindex
#: lispref/modes.texi:2916 lispref/modes.texi:2917
#, no-wrap
msgid "font-lock-type-face"
msgstr ""

# type: table
#: lispref/modes.texi:2920
msgid ""
"Used (typically) for names of user-defined data types, where they are "
"defined and where they are used."
msgstr ""

# type: vindex
#: lispref/modes.texi:2921 lispref/modes.texi:2922
#, no-wrap
msgid "font-lock-constant-face"
msgstr ""

# type: table
#: lispref/modes.texi:2924
msgid "Used (typically) for constant names."
msgstr ""

# type: vindex
#: lispref/modes.texi:2925 lispref/modes.texi:2926
#, no-wrap
msgid "font-lock-preprocessor-face"
msgstr ""

# type: table
#: lispref/modes.texi:2928
msgid "Used (typically) for preprocessor commands."
msgstr ""

# type: vindex
#: lispref/modes.texi:2929 lispref/modes.texi:2930
#, no-wrap
msgid "font-lock-negation-char-face"
msgstr ""

# type: table
#: lispref/modes.texi:2932
msgid "Used (typically) for easily-overlooked negation characters."
msgstr ""

# type: vindex
#: lispref/modes.texi:2933 lispref/modes.texi:2934
#, no-wrap
msgid "font-lock-warning-face"
msgstr ""

# type: table
#: lispref/modes.texi:2939
msgid ""
"Used (typically) for constructs that are peculiar, or that greatly change "
"the meaning of other text.  For example, this is used for @samp{;;;"
"###autoload} cookies in Emacs Lisp, and for @code{#error} directives in C."
msgstr ""

# type: cindex
#: lispref/modes.texi:2943
#, no-wrap
msgid "syntactic font lock"
msgstr ""

# type: Plain text
#: lispref/modes.texi:2952
msgid ""
"Syntactic fontification uses the syntax table to find comments and string "
"constants (@pxref{Syntax Tables}).  It highlights them using @code{font-lock-"
"comment-face} and @code{font-lock-string-face} (@pxref{Faces for Font "
"Lock}), or whatever @code{font-lock-syntactic-face-function} chooses.  There "
"are several variables that affect syntactic fontification; you should set "
"them by means of @code{font-lock-defaults} (@pxref{Font Lock Basics})."
msgstr ""

# type: defvar
#: lispref/modes.texi:2953
#, no-wrap
msgid "font-lock-keywords-only"
msgstr ""

# type: defvar
#: lispref/modes.texi:2958
msgid ""
"Non-@code{nil} means Font Lock should not do syntactic fontification; it "
"should only fontify based on @code{font-lock-keywords}.  The normal way for "
"a mode to set this variable to @code{t} is with @var{keywords-only} in @code"
"{font-lock-defaults}."
msgstr ""

# type: defvar
#: lispref/modes.texi:2960
#, no-wrap
msgid "font-lock-syntax-table"
msgstr ""

# type: defvar
#: lispref/modes.texi:2965
msgid ""
"This variable holds the syntax table to use for fontification of comments "
"and strings.  Specify it using @var{syntax-alist} in @code{font-lock-"
"defaults}.  If this is @code{nil}, fontification uses the buffer's syntax "
"table."
msgstr ""

# type: defvar
#: lispref/modes.texi:2972
msgid ""
"If this variable is non-@code{nil}, it should be a function to move point "
"back to a position that is syntactically at ``top level'' and outside of "
"strings or comments.  Font Lock uses this when necessary to get the right "
"results for syntactic fontification."
msgstr ""

# type: defvar
#: lispref/modes.texi:2978
msgid ""
"This function is called with no arguments.  It should leave point at the "
"beginning of any enclosing syntactic block.  Typical values are @code"
"{beginning-of-line} (used when the start of the line is known to be outside "
"a syntactic block), or @code{beginning-of-defun} for programming modes, or "
"@code{backward-paragraph} for textual modes."
msgstr ""

# type: defvar
#: lispref/modes.texi:2983
msgid ""
"If the value is @code{nil}, Font Lock uses @code{syntax-begin-function} to "
"move back outside of any comment, string, or sexp.  This variable is semi-"
"obsolete; we recommend setting @code{syntax-begin-function} instead."
msgstr ""

# type: defvar
#: lispref/modes.texi:2986
msgid ""
"Specify this variable using @var{syntax-begin} in @code{font-lock-defaults}."
msgstr ""

# type: defvar
#: lispref/modes.texi:2995
msgid ""
"A function to determine which face to use for a given syntactic element (a "
"string or a comment).  The function is called with one argument, the parse "
"state at point returned by @code{parse-partial-sexp}, and should return a "
"face.  The default value returns @code{font-lock-comment-face} for comments "
"and @code{font-lock-string-face} for strings."
msgstr ""

# type: defvar
#: lispref/modes.texi:3000
msgid ""
"This can be used to highlighting different kinds of strings or comments "
"differently.  It is also sometimes abused together with @code{font-lock-"
"syntactic-keywords} to highlight constructs that span multiple lines, but "
"this is too esoteric to document here."
msgstr ""

# type: defvar
#: lispref/modes.texi:3003
msgid ""
"Specify this variable using @var{other-vars} in @code{font-lock-defaults}."
msgstr ""

# type: Plain text
#: lispref/modes.texi:3011
msgid ""
"Font Lock mode can be used to update @code{syntax-table} properties "
"automatically (@pxref{Syntax Properties}).  This is useful in languages for "
"which a single syntax table by itself is not sufficient."
msgstr ""

# type: defvar
#: lispref/modes.texi:3012
#, no-wrap
msgid "font-lock-syntactic-keywords"
msgstr ""

# type: defvar
#: lispref/modes.texi:3016
msgid ""
"This variable enables and controls updating @code{syntax-table} properties "
"by Font Lock.  Its value should be a list of elements of this form:"
msgstr ""

# type: example
#: lispref/modes.texi:3019
#, no-wrap
msgid "(@var{matcher} @var{subexp} @var{syntax} @var{override} @var{laxmatch})\n"
msgstr ""

# type: defvar
#: lispref/modes.texi:3023
msgid ""
"The parts of this element have the same meanings as in the corresponding "
"sort of element of @code{font-lock-keywords},"
msgstr ""

# type: example
#: lispref/modes.texi:3026
#, no-wrap
msgid "(@var{matcher} @var{subexp} @var{facespec} @var{override} @var{laxmatch})\n"
msgstr ""

# type: defvar
#: lispref/modes.texi:3035
msgid ""
"However, instead of specifying the value @var{facespec} to use for the @code"
"{face} property, it specifies the value @var{syntax} to use for the @code"
"{syntax-table} property.  Here, @var{syntax} can be a string (as taken by "
"@code{modify-syntax-entry}), a syntax table, a cons cell (as returned by "
"@code{string-to-syntax}), or an expression whose value is one of those two "
"types.  @var{override} cannot be @code{prepend} or @code{append}."
msgstr ""

# type: defvar
#: lispref/modes.texi:3037
msgid "For example, an element of the form:"
msgstr ""

# type: example
#: lispref/modes.texi:3040
#, no-wrap
msgid "(\"\\\\$\\\\(#\\\\)\" 1 \".\")\n"
msgstr ""

# type: defvar
#: lispref/modes.texi:3048
msgid ""
"highlights syntactically a hash character when following a dollar character, "
"with a SYNTAX of @code{\".\"} (meaning punctuation syntax).  Assuming that "
"the buffer syntax table specifies hash characters to have comment start "
"syntax, the element will only highlight hash characters that do not follow "
"dollar characters as comments syntactically."
msgstr ""

# type: defvar
#: lispref/modes.texi:3050
msgid "An element of the form:"
msgstr ""

# type: example
#: lispref/modes.texi:3055
#, no-wrap
msgid ""
" (\"\\\\('\\\\).\\\\('\\\\)\"\n"
"  (1 \"\\\"\")\n"
"  (2 \"\\\"\"))\n"
msgstr ""

# type: defvar
#: lispref/modes.texi:3064
msgid ""
"highlights syntactically both single quotes which surround a single "
"character, with a SYNTAX of @code{\"\\\"\"} (meaning string quote syntax).  "
"Assuming that the buffer syntax table does not specify single quotes to have "
"quote syntax, the element will only highlight single quotes of the form @samp"
"{'@var{c}'} as strings syntactically.  Other forms, such as @samp{foo'bar} "
"or @samp{'fubar'}, will not be highlighted as strings."
msgstr ""

# type: defvar
#: lispref/modes.texi:3067
msgid ""
"Major modes normally set this variable with @var{other-vars} in @code{font-"
"lock-defaults}."
msgstr ""

# type: subsection
#: lispref/modes.texi:3070
#, no-wrap
msgid "Multiline Font Lock Constructs"
msgstr ""

# type: cindex
#: lispref/modes.texi:3071
#, no-wrap
msgid "multiline font lock"
msgstr ""

# type: Plain text
#: lispref/modes.texi:3078
msgid ""
"Normally, elements of @code{font-lock-keywords} should not match across "
"multiple lines; that doesn't work reliably, because Font Lock usually scans "
"just part of the buffer, and it can miss a multi-line construct that crosses "
"the line boundary where the scan starts.  (The scan normally starts at the "
"beginning of a line.)"
msgstr ""

# type: Plain text
#: lispref/modes.texi:3089
msgid ""
"Making elements that match multiline constructs work properly has two "
"aspects: correct @emph{identification} and correct @emph{rehighlighting}.  "
"The first means that Font Lock finds all multiline constructs.  The second "
"means that Font Lock will correctly rehighlight all the relevant text when a "
"multiline construct is changed---for example, if some of the text that was "
"previously part of a multiline construct ceases to be part of it.  The two "
"aspects are closely related, and often getting one of them to work will "
"appear to make the other also work.  However, for reliable results you must "
"attend explicitly to both aspects."
msgstr ""

# type: Plain text
#: lispref/modes.texi:3092
msgid ""
"There are three ways to ensure correct identification of multiline "
"constructs:"
msgstr ""

# type: itemize
#: lispref/modes.texi:3098
msgid ""
"Add a function to @code{font-lock-extend-region-functions} that does the "
"@emph{identification} and extends the scan so that the scanned text never "
"starts or ends in the middle of a multiline construct."
msgstr ""

# type: itemize
#: lispref/modes.texi:3102
msgid ""
"Use the @code{font-lock-fontify-region-function} hook similarly to extend "
"the scan so that the scanned text never starts or ends in the middle of a "
"multiline construct."
msgstr ""

# type: itemize
#: lispref/modes.texi:3108
msgid ""
"Somehow identify the multiline construct right when it gets inserted into "
"the buffer (or at any point after that but before font-lock tries to "
"highlight it), and mark it with a @code{font-lock-multiline} which will "
"instruct font-lock not to start or end the scan in the middle of the "
"construct."
msgstr ""

# type: Plain text
#: lispref/modes.texi:3111
msgid "There are three ways to do rehighlighting of multiline constructs:"
msgstr ""

# type: itemize
#: lispref/modes.texi:3118
msgid ""
"Place a @code{font-lock-multiline} property on the construct.  This will "
"rehighlight the whole construct if any part of it is changed.  In some cases "
"you can do this automatically by setting the @code{font-lock-multiline} "
"variable, which see."
msgstr ""

# type: itemize
#: lispref/modes.texi:3126
msgid ""
"Make sure @code{jit-lock-contextually} is set and rely on it doing its job.  "
"This will only rehighlight the part of the construct that follows the actual "
"change, and will do it after a short delay.  This only works if the "
"highlighting of the various parts of your multiline construct never depends "
"on text in subsequent lines.  Since @code{jit-lock-contextually} is "
"activated by default, this can be an attractive solution."
msgstr ""

# type: itemize
#: lispref/modes.texi:3132
msgid ""
"Place a @code{jit-lock-defer-multiline} property on the construct.  This "
"works only if @code{jit-lock-contextually} is used, and with the same delay "
"before rehighlighting, but like @code{font-lock-multiline}, it also handles "
"the case where highlighting depends on subsequent lines."
msgstr ""

# type: subsubsection
#: lispref/modes.texi:3138 lispref/modes.texi:3140 lispref/modes.texi:3141
#, no-wrap
msgid "Font Lock Multiline"
msgstr ""

# type: menu
#: lispref/modes.texi:3138
msgid "Marking multiline chunks with a text property"
msgstr ""

# type: node
#: lispref/modes.texi:3138 lispref/modes.texi:3188
#, no-wrap
msgid "Region to Fontify"
msgstr ""

# type: menu
#: lispref/modes.texi:3138
msgid "Controlling which region gets refontified"
msgstr ""

# type: menu
#: lispref/modes.texi:3138
msgid "after a buffer change."
msgstr ""

# type: Plain text
#: lispref/modes.texi:3147
msgid ""
"One way to ensure reliable rehighlighting of multiline Font Lock constructs "
"is to put on them the text property @code{font-lock-multiline}.  It should "
"be present and non-@code{nil} for text that is part of a multiline construct."
msgstr ""

# type: Plain text
#: lispref/modes.texi:3155
msgid ""
"When Font Lock is about to highlight a range of text, it first extends the "
"boundaries of the range as necessary so that they do not fall within text "
"marked with the @code{font-lock-multiline} property.  Then it removes any "
"@code{font-lock-multiline} properties from the range, and highlights it.  "
"The highlighting specification (mostly @code{font-lock-keywords}) must "
"reinstall this property each time, whenever it is appropriate."
msgstr ""

# type: Plain text
#: lispref/modes.texi:3158
msgid ""
"@strong{Warning:} don't use the @code{font-lock-multiline} property on large "
"ranges of text, because that will make rehighlighting slow."
msgstr ""

# type: defvar
#: lispref/modes.texi:3159
#, no-wrap
msgid "font-lock-multiline"
msgstr ""

# type: defvar
#: lispref/modes.texi:3166
msgid ""
"If the @code{font-lock-multiline} variable is set to @code{t}, Font Lock "
"will try to add the @code{font-lock-multiline} property automatically on "
"multiline constructs.  This is not a universal solution, however, since it "
"slows down Font Lock somewhat.  It can miss some multiline constructs, or "
"make the property larger or smaller than necessary."
msgstr ""

# type: defvar
#: lispref/modes.texi:3171
msgid ""
"For elements whose @var{matcher} is a function, the function should ensure "
"that submatch 0 covers the whole relevant multiline construct, even if only "
"a small subpart will be highlighted.  It is often just as easy to add the "
"@code{font-lock-multiline} property by hand."
msgstr ""

# type: Plain text
#: lispref/modes.texi:3182
msgid ""
"The @code{font-lock-multiline} property is meant to ensure proper "
"refontification; it does not automatically identify new multiline "
"constructs.  Identifying the requires that Font-Lock operate on large enough "
"chunks at a time.  This will happen by accident on many cases, which may "
"give the impression that multiline constructs magically work.  If you set "
"the @code{font-lock-multiline} variable non-@code{nil}, this impression will "
"be even stronger, since the highlighting of those constructs which are found "
"will be properly updated from then on.  But that does not work reliably."
msgstr ""

# type: Plain text
#: lispref/modes.texi:3187
msgid ""
"To find multiline constructs reliably, you must either manually place the "
"@code{font-lock-multiline} property on the text before Font-Lock looks at "
"it, or use @code{font-lock-fontify-region-function}."
msgstr ""

# type: subsubsection
#: lispref/modes.texi:3189
#, no-wrap
msgid "Region to Fontify after a Buffer Change"
msgstr ""

# type: Plain text
#: lispref/modes.texi:3196
msgid ""
"When a buffer is changed, the region that Font Lock refontifies is by "
"default the smallest sequence of whole lines that spans the change.  While "
"this works well most of the time, sometimes it doesn't---for example, when a "
"change alters the syntactic meaning of text on an earlier line."
msgstr ""

# type: Plain text
#: lispref/modes.texi:3199
msgid ""
"You can enlarge (or even reduce) the region to fontify by setting one the "
"following variables:"
msgstr ""

# type: defvar
#: lispref/modes.texi:3200
#, no-wrap
msgid "font-lock-extend-after-change-region-function"
msgstr ""

# type: defvar
#: lispref/modes.texi:3203
msgid ""
"This buffer-local variable is either @code{nil} or a function for Font-Lock "
"to call to determine the region to scan and fontify."
msgstr ""

# type: defvar
#: lispref/modes.texi:3212
msgid ""
"The function is given three parameters, the standard @var{beg}, @var{end}, "
"and @var{old-len} from after-change-functions (@pxref{Change Hooks}).  It "
"should return either a cons of the beginning and end buffer positions (in "
"that order) of the region to fontify, or @code{nil} (which means choose the "
"region in the standard way).  This function needs to preserve point, the "
"match-data, and the current restriction.  The region it returns may start or "
"end in the middle of a line."
msgstr ""

# type: defvar
#: lispref/modes.texi:3215
msgid ""
"Since this function is called after every buffer change, it should be "
"reasonably fast."
msgstr ""

# type: cindex
#: lispref/modes.texi:3219
#, no-wrap
msgid "desktop save mode"
msgstr ""

# type: Plain text
#: lispref/modes.texi:3226
msgid ""
"@dfn{Desktop Save Mode} is a feature to save the state of Emacs from one "
"session to another.  The user-level commands for using Desktop Save Mode are "
"described in the GNU Emacs Manual (@pxref{Saving Emacs Sessions,,, emacs, "
"the GNU Emacs Manual}).  Modes whose buffers visit a file, don't have to do "
"anything to use this feature."
msgstr ""

# type: Plain text
#: lispref/modes.texi:3230
msgid ""
"For buffers not visiting a file to have their state saved, the major mode "
"must bind the buffer local variable @code{desktop-save-buffer} to a non-@code"
"{nil} value."
msgstr ""

# type: defvar
#: lispref/modes.texi:3239
msgid ""
"If this buffer-local variable is non-@code{nil}, the buffer will have its "
"state saved in the desktop file at desktop save.  If the value is a "
"function, it is called at desktop save with argument @var{desktop-dirname}, "
"and its value is saved in the desktop file along with the state of the "
"buffer for which it was called.  When file names are returned as part of the "
"auxiliary information, they should be formatted using the call"
msgstr ""

# type: example
#: lispref/modes.texi:3242
#, no-wrap
msgid "(desktop-file-name @var{file-name} @var{desktop-dirname})\n"
msgstr ""

# type: Plain text
#: lispref/modes.texi:3249
msgid ""
"For buffers not visiting a file to be restored, the major mode must define a "
"function to do the job, and that function must be listed in the alist @code"
"{desktop-buffer-mode-handlers}."
msgstr ""

# type: defvar
#: lispref/modes.texi:3250
#, no-wrap
msgid "desktop-buffer-mode-handlers"
msgstr ""

# type: defvar
#: lispref/modes.texi:3252
msgid "Alist with elements"
msgstr ""

# type: example
#: lispref/modes.texi:3255
#, no-wrap
msgid "(@var{major-mode} . @var{restore-buffer-function})\n"
msgstr ""

# type: defvar
#: lispref/modes.texi:3259
msgid ""
"The function @var{restore-buffer-function} will be called with argument list"
msgstr ""

# type: example
#: lispref/modes.texi:3262
#, no-wrap
msgid "(@var{buffer-file-name} @var{buffer-name} @var{desktop-buffer-misc})\n"
msgstr ""

# type: defvar
#: lispref/modes.texi:3267
msgid ""
"and it should return the restored buffer.  Here @var{desktop-buffer-misc} is "
"the value returned by the function optionally bound to @code{desktop-save-"
"buffer}."
msgstr ""

# type: ignore
#: lispref/modes.texi:3271
#, no-wrap
msgid "   arch-tag: 4c7bff41-36e6-4da6-9e7f-9b9289e27c8e\n"
msgstr "   arch-tag: 4c7bff41-36e6-4da6-9e7f-9b9289e27c8e\n"

# type: chapter
#: lispref/nonascii.texi:8
#, no-wrap
msgid "Non-@acronym{ASCII} Characters"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:9
#, no-wrap
msgid "multibyte characters"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:10
#, no-wrap
msgid "characters, multi-byte"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:11
#, no-wrap
msgid "non-@acronym{ASCII} characters"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:15
msgid ""
"This chapter covers the special issues relating to non-@acronym{ASCII} "
"characters and how they are stored in strings and buffers."
msgstr ""

# type: section
#: lispref/nonascii.texi:32 lispref/nonascii.texi:34 lispref/nonascii.texi:35
#, no-wrap
msgid "Text Representations"
msgstr ""

# type: menu
#: lispref/nonascii.texi:32
msgid "Unibyte and multibyte representations"
msgstr ""

# type: node
#: lispref/nonascii.texi:32 lispref/nonascii.texi:122
#, no-wrap
msgid "Converting Representations"
msgstr ""

# type: menu
#: lispref/nonascii.texi:32
msgid "Converting unibyte to multibyte and vice versa."
msgstr ""

# type: section
#: lispref/nonascii.texi:32 lispref/nonascii.texi:233
#: lispref/nonascii.texi:234
#, no-wrap
msgid "Selecting a Representation"
msgstr ""

# type: menu
#: lispref/nonascii.texi:32
msgid "Treating a byte sequence as unibyte or multi."
msgstr ""

# type: section
#: lispref/nonascii.texi:32 lispref/nonascii.texi:288
#: lispref/nonascii.texi:289
#, no-wrap
msgid "Character Codes"
msgstr ""

# type: menu
#: lispref/nonascii.texi:32
msgid "How unibyte and multibyte relate to"
msgstr ""

# type: menu
#: lispref/nonascii.texi:32
msgid "codes of individual characters."
msgstr ""

# type: section
#: lispref/nonascii.texi:32 lispref/nonascii.texi:320
#: lispref/nonascii.texi:321
#, no-wrap
msgid "Character Sets"
msgstr ""

# type: menu
#: lispref/nonascii.texi:32
msgid "The space of possible character codes"
msgstr ""

# type: menu
#: lispref/nonascii.texi:32
msgid "is divided into various character sets."
msgstr ""

# type: node
#: lispref/nonascii.texi:32 lispref/nonascii.texi:374
#, no-wrap
msgid "Chars and Bytes"
msgstr ""

# type: menu
#: lispref/nonascii.texi:32
msgid "More information about multibyte encodings."
msgstr ""

# type: section
#: lispref/nonascii.texi:32 lispref/nonascii.texi:409
#: lispref/nonascii.texi:410
#, no-wrap
msgid "Splitting Characters"
msgstr ""

# type: menu
#: lispref/nonascii.texi:32
msgid "Converting a character to its byte sequence."
msgstr ""

# type: node
#: lispref/nonascii.texi:32 lispref/nonascii.texi:482
#, no-wrap
msgid "Scanning Charsets"
msgstr ""

# type: menu
#: lispref/nonascii.texi:32
msgid "Which character sets are used in a buffer?"
msgstr ""

# type: section
#: lispref/nonascii.texi:32 lispref/nonascii.texi:515
#: lispref/nonascii.texi:516
#, no-wrap
msgid "Translation of Characters"
msgstr ""

# type: menu
#: lispref/nonascii.texi:32
msgid "Translation tables are used for conversion."
msgstr ""

# type: section
#: lispref/nonascii.texi:32 lispref/nonascii.texi:597
#: lispref/nonascii.texi:598
#, no-wrap
msgid "Coding Systems"
msgstr ""

# type: menu
#: lispref/nonascii.texi:32
msgid "Coding systems are conversions for saving files."
msgstr ""

# type: section
#: lispref/nonascii.texi:32 lispref/nonascii.texi:1367
#: lispref/nonascii.texi:1368
#, no-wrap
msgid "Input Methods"
msgstr ""

# type: menu
#: lispref/nonascii.texi:32
msgid "Input methods allow users to enter various"
msgstr ""

# type: menu
#: lispref/nonascii.texi:32
msgid "non-ASCII characters without special keyboards."
msgstr ""

# type: section
#: lispref/nonascii.texi:32 lispref/nonascii.texi:1439
#: lispref/nonascii.texi:1440
#, no-wrap
msgid "Locales"
msgstr ""

# type: menu
#: lispref/nonascii.texi:32
msgid "Interacting with the POSIX locale."
msgstr ""

# type: cindex
#: lispref/nonascii.texi:36
#, no-wrap
msgid "text representations"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:45
msgid ""
"Emacs has two @dfn{text representations}---two ways to represent text in a "
"string or buffer.  These are called @dfn{unibyte} and @dfn{multibyte}.  Each "
"string, and each buffer, uses one of these two representations.  For most "
"purposes, you can ignore the issue of representations, because Emacs "
"converts text between them as appropriate.  Occasionally in Lisp programming "
"you will need to pay attention to the difference."
msgstr ""

# type: cindex
#: lispref/nonascii.texi:46
#, no-wrap
msgid "unibyte text"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:52
msgid ""
"In unibyte representation, each character occupies one byte and therefore "
"the possible character codes range from 0 to 255.  Codes 0 through 127 are "
"@acronym{ASCII} characters; the codes from 128 through 255 are used for one "
"non-@acronym{ASCII} character set (you can choose which character set by "
"setting the variable @code{nonascii-insert-offset})."
msgstr ""

# type: cindex
#: lispref/nonascii.texi:53
#, no-wrap
msgid "leading code"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:54
#, no-wrap
msgid "multibyte text"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:55
#, no-wrap
msgid "trailing codes"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:63
msgid ""
"In multibyte representation, a character may occupy more than one byte, and "
"as a result, the full range of Emacs character codes can be stored.  The "
"first byte of a multibyte character is always in the range 128 through 159 "
"(octal 0200 through 0237).  These values are called @dfn{leading codes}.  "
"The second and subsequent bytes of a multibyte character are always in the "
"range 160 through 255 (octal 0240 through 0377); these values are @dfn"
"{trailing codes}."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:71
msgid ""
"Some sequences of bytes are not valid in multibyte text: for example, a "
"single isolated byte in the range 128 through 159 is not allowed.  But "
"character codes 128 through 159 can appear in multibyte text, represented as "
"two-byte sequences.  All the character codes 128 through 255 are possible "
"(though slightly abnormal) in multibyte text; they appear in multibyte "
"buffers and strings when you do explicit encoding and decoding (@pxref"
"{Explicit Encoding})."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:76
msgid ""
"In a buffer, the buffer-local value of the variable @code{enable-multibyte-"
"characters} specifies the representation used.  The representation for a "
"string is determined and recorded in the string when the string is "
"constructed."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:81
msgid ""
"This variable specifies the current buffer's text representation.  If it is "
"non-@code{nil}, the buffer contains multibyte text; otherwise, it contains "
"unibyte text."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:84
msgid ""
"You cannot set this variable directly; instead, use the function @code{set-"
"buffer-multibyte} to change a buffer's representation."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:86
#, no-wrap
msgid "default-enable-multibyte-characters"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:93
msgid ""
"This variable's value is entirely equivalent to @code{(default-value 'enable-"
"multibyte-characters)}, and setting this variable changes that default "
"value.  Setting the local binding of @code{enable-multibyte-characters} in a "
"specific buffer is not allowed, but changing the default value is supported, "
"and it is a reasonable thing to do, because it has no effect on existing "
"buffers."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:96
msgid ""
"The @samp{--unibyte} command line option does its job by setting the default "
"value to @code{nil} early in startup."
msgstr ""

# type: defun
#: lispref/nonascii.texi:98
#, no-wrap
msgid "position-bytes position"
msgstr ""

# type: defun
#: lispref/nonascii.texi:103
msgid ""
"Return the byte-position corresponding to buffer position @var{position} in "
"the current buffer.  This is 1 at the start of the buffer, and counts upward "
"in bytes.  If @var{position} is out of range, the value is @code{nil}."
msgstr ""

# type: defun
#: lispref/nonascii.texi:105
#, no-wrap
msgid "byte-to-position byte-position"
msgstr ""

# type: defun
#: lispref/nonascii.texi:109
msgid ""
"Return the buffer position corresponding to byte-position @var{byte-"
"position} in the current buffer.  If @var{byte-position} is out of range, "
"the value is @code{nil}."
msgstr ""

# type: defun
#: lispref/nonascii.texi:111
#, no-wrap
msgid "multibyte-string-p string"
msgstr ""

# type: defun
#: lispref/nonascii.texi:113
msgid "Return @code{t} if @var{string} is a multibyte string."
msgstr ""

# type: defun
#: lispref/nonascii.texi:115
#, no-wrap
msgid "string-bytes string"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:116
#, no-wrap
msgid "string, number of bytes"
msgstr ""

# type: defun
#: lispref/nonascii.texi:120
msgid ""
"This function returns the number of bytes in @var{string}.  If @var{string} "
"is a multibyte string, this can be greater than @code{(length @var{string})}."
msgstr ""

# type: section
#: lispref/nonascii.texi:123
#, no-wrap
msgid "Converting Text Representations"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:130
msgid ""
"Emacs can convert unibyte text to multibyte; it can also convert multibyte "
"text to unibyte, though this conversion loses information.  In general these "
"conversions happen when inserting text into a buffer, or when putting text "
"from several strings together in one string.  You can also explicitly "
"convert a string's contents to either representation."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:136
msgid ""
"Emacs chooses the representation for a string based on the text that it is "
"constructed from.  The general rule is to convert unibyte text to multibyte "
"text when combining it with other multibyte text, because the multibyte "
"representation is more general and can hold whatever characters the unibyte "
"text has."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:146
msgid ""
"When inserting text into a buffer, Emacs converts the text to the buffer's "
"representation, as specified by @code{enable-multibyte-characters} in that "
"buffer.  In particular, when you insert multibyte text into a unibyte "
"buffer, Emacs converts the text to unibyte, even though this conversion "
"cannot in general preserve all the characters that might be in the multibyte "
"text.  The other natural alternative, to convert the buffer contents to "
"multibyte, is not acceptable because the buffer's representation is a choice "
"made by the user that cannot be overridden automatically."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:157
msgid ""
"Converting unibyte text to multibyte text leaves @acronym{ASCII} characters "
"unchanged, and likewise character codes 128 through 159.  It converts the "
"non-@acronym{ASCII} codes 160 through 255 by adding the value @code{nonascii-"
"insert-offset} to each character code.  By setting this variable, you "
"specify which character set the unibyte characters correspond to (@pxref"
"{Character Sets}).  For example, if @code{nonascii-insert-offset} is 2048, "
"which is @code{(- (make-char 'latin-iso8859-1) 128)}, then the unibyte non-"
"@acronym{ASCII} characters correspond to Latin 1.  If it is 2688, which is "
"@code{(- (make-char 'greek-iso8859-7) 128)}, then they correspond to Greek "
"letters."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:164
msgid ""
"Converting multibyte text to unibyte is simpler: it discards all but the low "
"8 bits of each character code.  If @code{nonascii-insert-offset} has a "
"reasonable value, corresponding to the beginning of some character set, this "
"conversion is the inverse of the other: converting unibyte text to multibyte "
"and back to unibyte reproduces the original unibyte text."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:165
#, no-wrap
msgid "nonascii-insert-offset"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:171
msgid ""
"This variable specifies the amount to add to a non-@acronym{ASCII} character "
"when converting unibyte text to multibyte.  It also applies when @code{self-"
"insert-command} inserts a character in the unibyte non-@acronym{ASCII} "
"range, 128 through 255.  However, the functions @code{insert} and @code"
"{insert-char} do not perform this conversion."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:176
msgid ""
"The right value to use to select character set @var{cs} is @code{(- (make-"
"char @var{cs}) 128)}.  If the value of @code{nonascii-insert-offset} is "
"zero, then conversion actually uses the value for the Latin 1 character set, "
"rather than zero."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:178
#, no-wrap
msgid "nonascii-translation-table"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:184
msgid ""
"This variable provides a more general alternative to @code{nonascii-insert-"
"offset}.  You can use it to specify independently how to translate each code "
"in the range of 128 through 255 into a multibyte character.  The value "
"should be a char-table, or @code{nil}.  If this is non-@code{nil}, it "
"overrides @code{nonascii-insert-offset}."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:188
msgid ""
"The next three functions either return the argument @var{string}, or a newly "
"created string with no text properties."
msgstr ""

# type: defun
#: lispref/nonascii.texi:189
#, no-wrap
msgid "string-make-unibyte string"
msgstr ""

# type: defun
#: lispref/nonascii.texi:197
msgid ""
"This function converts the text of @var{string} to unibyte representation, "
"if it isn't already, and returns the result.  If @var{string} is a unibyte "
"string, it is returned unchanged.  Multibyte character codes are converted "
"to unibyte according to @code{nonascii-translation-table} or, if that is "
"@code{nil}, using @code{nonascii-insert-offset}.  If the lookup in the "
"translation table fails, this function takes just the low 8 bits of each "
"character."
msgstr ""

# type: defun
#: lispref/nonascii.texi:199
#, no-wrap
msgid "string-make-multibyte string"
msgstr ""

# type: defun
#: lispref/nonascii.texi:211
msgid ""
"This function converts the text of @var{string} to multibyte representation, "
"if it isn't already, and returns the result.  If @var{string} is a multibyte "
"string or consists entirely of @acronym{ASCII} characters, it is returned "
"unchanged.  In particular, if @var{string} is unibyte and entirely @acronym"
"{ASCII}, the returned string is unibyte.  (When the characters are all "
"@acronym{ASCII}, Emacs primitives will treat the string the same way whether "
"it is unibyte or multibyte.)  If @var{string} is unibyte and contains non-"
"@acronym{ASCII} characters, the function @code{unibyte-char-to-multibyte} is "
"used to convert each unibyte character to a multibyte character."
msgstr ""

# type: defun
#: lispref/nonascii.texi:213
#, no-wrap
msgid "string-to-multibyte string"
msgstr ""

# type: defun
#: lispref/nonascii.texi:219
msgid ""
"This function returns a multibyte string containing the same sequence of "
"character codes as @var{string}.  Unlike @code{string-make-multibyte}, this "
"function unconditionally returns a multibyte string.  If @var{string} is a "
"multibyte string, it is returned unchanged."
msgstr ""

# type: defun
#: lispref/nonascii.texi:221
#, no-wrap
msgid "multibyte-char-to-unibyte char"
msgstr ""

# type: defun
#: lispref/nonascii.texi:225
msgid ""
"This convert the multibyte character @var{char} to a unibyte character, "
"based on @code{nonascii-translation-table} and @code{nonascii-insert-offset}."
msgstr ""

# type: defun
#: lispref/nonascii.texi:227
#, no-wrap
msgid "unibyte-char-to-multibyte char"
msgstr ""

# type: defun
#: lispref/nonascii.texi:231
msgid ""
"This convert the unibyte character @var{char} to a multibyte character, "
"based on @code{nonascii-translation-table} and @code{nonascii-insert-offset}."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:238
msgid ""
"Sometimes it is useful to examine an existing buffer or string as multibyte "
"when it was unibyte, or vice versa."
msgstr ""

# type: defun
#: lispref/nonascii.texi:239
#, no-wrap
msgid "set-buffer-multibyte multibyte"
msgstr ""

# type: defun
#: lispref/nonascii.texi:243
msgid ""
"Set the representation type of the current buffer.  If @var{multibyte} is "
"non-@code{nil}, the buffer becomes multibyte.  If @var{multibyte} is @code"
"{nil}, the buffer becomes unibyte."
msgstr ""

# type: defun
#: lispref/nonascii.texi:252
msgid ""
"This function leaves the buffer contents unchanged when viewed as a sequence "
"of bytes.  As a consequence, it can change the contents viewed as "
"characters; a sequence of two bytes which is treated as one character in "
"multibyte representation will count as two characters in unibyte "
"representation.  Character codes 128 through 159 are an exception.  They are "
"represented by one byte in a unibyte buffer, but when the buffer is set to "
"multibyte, they are converted to two-byte sequences, and vice versa."
msgstr ""

# type: defun
#: lispref/nonascii.texi:257
msgid ""
"This function sets @code{enable-multibyte-characters} to record which "
"representation is in use.  It also adjusts various data in the buffer "
"(including overlays, text properties and markers) so that they cover the "
"same text as they did before."
msgstr ""

# type: defun
#: lispref/nonascii.texi:261
msgid ""
"You cannot use @code{set-buffer-multibyte} on an indirect buffer, because "
"indirect buffers always inherit the representation of the base buffer."
msgstr ""

# type: defun
#: lispref/nonascii.texi:263
#, no-wrap
msgid "string-as-unibyte string"
msgstr ""

# type: defun
#: lispref/nonascii.texi:267
msgid ""
"This function returns a string with the same bytes as @var{string} but "
"treating each byte as a character.  This means that the value may have more "
"characters than @var{string} has."
msgstr ""

# type: defun
#: lispref/nonascii.texi:273
msgid ""
"If @var{string} is already a unibyte string, then the value is @var{string} "
"itself.  Otherwise it is a newly created string, with no text properties.  "
"If @var{string} is multibyte, any characters it contains of charset @code"
"{eight-bit-control} or @code{eight-bit-graphic} are converted to the "
"corresponding single byte."
msgstr ""

# type: defun
#: lispref/nonascii.texi:275
#, no-wrap
msgid "string-as-multibyte string"
msgstr ""

# type: defun
#: lispref/nonascii.texi:279
msgid ""
"This function returns a string with the same bytes as @var{string} but "
"treating each multibyte sequence as one character.  This means that the "
"value may have fewer characters than @var{string} has."
msgstr ""

# type: defun
#: lispref/nonascii.texi:286
msgid ""
"If @var{string} is already a multibyte string, then the value is @var"
"{string} itself.  Otherwise it is a newly created string, with no text "
"properties.  If @var{string} is unibyte and contains any individual 8-bit "
"bytes (i.e.@: not part of a multibyte form), they are converted to the "
"corresponding multibyte character of charset @code{eight-bit-control} or "
"@code{eight-bit-graphic}."
msgstr ""

# type: cindex
#: lispref/nonascii.texi:290
#, no-wrap
msgid "character codes"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:301
msgid ""
"The unibyte and multibyte text representations use different character "
"codes.  The valid character codes for unibyte representation range from 0 to "
"255---the values that can fit in one byte.  The valid character codes for "
"multibyte representation range from 0 to 524287, but not all values in that "
"range are valid.  The values 128 through 255 are not entirely proper in "
"multibyte text, but they can occur if you do explicit encoding and decoding "
"(@pxref{Explicit Encoding}).  Some other character codes cannot occur at all "
"in multibyte text.  Only the @acronym{ASCII} codes 0 through 127 are "
"completely legitimate in both representations."
msgstr ""

# type: defun
#: lispref/nonascii.texi:302
#, no-wrap
msgid "char-valid-p charcode &optional genericp"
msgstr ""

# type: defun
#: lispref/nonascii.texi:305
msgid ""
"This returns @code{t} if @var{charcode} is valid (either for unibyte text or "
"for multibyte text)."
msgstr ""

# type: example
#: lispref/nonascii.texi:313
#, no-wrap
msgid ""
"(char-valid-p 65)\n"
"     @result{} t\n"
"(char-valid-p 256)\n"
"     @result{} nil\n"
"(char-valid-p 2248)\n"
"     @result{} t\n"
msgstr ""

# type: defun
#: lispref/nonascii.texi:318
msgid ""
"If the optional argument @var{genericp} is non-@code{nil}, this function "
"also returns @code{t} if @var{charcode} is a generic character (@pxref"
"{Splitting Characters})."
msgstr ""

# type: cindex
#: lispref/nonascii.texi:322
#, no-wrap
msgid "character sets"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:327
msgid ""
"Emacs classifies characters into various @dfn{character sets}, each of which "
"has a name which is a symbol.  Each character belongs to one and only one "
"character set."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:336
msgid ""
"In general, there is one character set for each distinct script.  For "
"example, @code{latin-iso8859-1} is one character set, @code{greek-iso8859-7} "
"is another, and @code{ascii} is another.  An Emacs character set can hold at "
"most 9025 characters; therefore, in some cases, characters that would "
"logically be grouped together are split into several character sets.  For "
"example, one set of Chinese characters, generally known as Big 5, is divided "
"into two Emacs character sets, @code{chinese-big5-1} and @code{chinese-big5-"
"2}."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:341
msgid ""
"@acronym{ASCII} characters are in character set @code{ascii}.  The non-"
"@acronym{ASCII} characters 128 through 159 are in character set @code{eight-"
"bit-control}, and codes 160 through 255 are in character set @code{eight-bit-"
"graphic}."
msgstr ""

# type: defun
#: lispref/nonascii.texi:342
#, no-wrap
msgid "charsetp object"
msgstr ""

# type: defun
#: lispref/nonascii.texi:345
msgid ""
"Returns @code{t} if @var{object} is a symbol that names a character set, "
"@code{nil} otherwise."
msgstr ""

# type: defun
#: lispref/nonascii.texi:347 lispref/nonascii.texi:351
#, no-wrap
msgid "charset-list"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:349
msgid "The value is a list of all defined character set names."
msgstr ""

# type: defun
#: lispref/nonascii.texi:354
msgid ""
"This function returns the value of @code{charset-list}.  It is only provided "
"for backward compatibility."
msgstr ""

# type: defun
#: lispref/nonascii.texi:356
#, no-wrap
msgid "char-charset character"
msgstr ""

# type: defun
#: lispref/nonascii.texi:360
msgid ""
"This function returns the name of the character set that @var{character} "
"belongs to, or the symbol @code{unknown} if @var{character} is not a valid "
"character."
msgstr ""

# type: defun
#: lispref/nonascii.texi:362
#, no-wrap
msgid "charset-plist charset"
msgstr ""

# type: defun
#: lispref/nonascii.texi:367
msgid ""
"This function returns the charset property list of the character set @var"
"{charset}.  Although @var{charset} is a symbol, this is not the same as the "
"property list of that symbol.  Charset properties are used for special "
"purposes within Emacs."
msgstr ""

# type: deffn
#: lispref/nonascii.texi:369
#, no-wrap
msgid "Command list-charset-chars charset"
msgstr ""

# type: deffn
#: lispref/nonascii.texi:372
msgid ""
"This command displays a list of characters in the character set @var"
"{charset}."
msgstr ""

# type: section
#: lispref/nonascii.texi:375
#, no-wrap
msgid "Characters and Bytes"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:376
#, no-wrap
msgid "bytes and characters"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:378
#, no-wrap
msgid "introduction sequence (of character)"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:379
#, no-wrap
msgid "dimension (of character set)"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:390
msgid ""
"In multibyte representation, each character occupies one or more bytes.  "
"Each character set has an @dfn{introduction sequence}, which is normally one "
"or two bytes long.  (Exception: the @code{ascii} character set and the @code"
"{eight-bit-graphic} character set have a zero-length introduction "
"sequence.)  The introduction sequence is the beginning of the byte sequence "
"for any character in the character set.  The rest of the character's bytes "
"distinguish it from the other characters in the same character set.  "
"Depending on the character set, there are either one or two distinguishing "
"bytes; the number of such bytes is called the @dfn{dimension} of the "
"character set."
msgstr ""

# type: defun
#: lispref/nonascii.texi:391
#, no-wrap
msgid "charset-dimension charset"
msgstr ""

# type: defun
#: lispref/nonascii.texi:394
msgid ""
"This function returns the dimension of @var{charset}; at present, the "
"dimension is always 1 or 2."
msgstr ""

# type: defun
#: lispref/nonascii.texi:396
#, no-wrap
msgid "charset-bytes charset"
msgstr ""

# type: defun
#: lispref/nonascii.texi:399
msgid ""
"This function returns the number of bytes used to represent a character in "
"character set @var{charset}."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:403
msgid ""
"This is the simplest way to determine the byte length of a character set's "
"introduction sequence:"
msgstr ""

# type: example
#: lispref/nonascii.texi:407
#, no-wrap
msgid ""
"(- (charset-bytes @var{charset})\n"
"   (charset-dimension @var{charset}))\n"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:411
#, no-wrap
msgid "character as bytes"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:417
msgid ""
"The functions in this section convert between characters and the byte values "
"used to represent them.  For most purposes, there is no need to be concerned "
"with the sequence of bytes used to represent a character, because Emacs "
"translates automatically when necessary."
msgstr ""

# type: defun
#: lispref/nonascii.texi:418
#, no-wrap
msgid "split-char character"
msgstr ""

# type: defun
#: lispref/nonascii.texi:423
msgid ""
"Return a list containing the name of the character set of @var{character}, "
"followed by one or two byte values (integers) which identify @var{character} "
"within that character set.  The number of byte values is the character set's "
"dimension."
msgstr ""

# type: defun
#: lispref/nonascii.texi:426
msgid ""
"If @var{character} is invalid as a character code, @code{split-char} returns "
"a list consisting of the symbol @code{unknown} and @var{character}."
msgstr ""

# type: example
#: lispref/nonascii.texi:434
#, no-wrap
msgid ""
"(split-char 2248)\n"
"     @result{} (latin-iso8859-1 72)\n"
"(split-char 65)\n"
"     @result{} (ascii 65)\n"
"(split-char 128)\n"
"     @result{} (eight-bit-control 128)\n"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:437
#, no-wrap
msgid "generate characters in charsets"
msgstr ""

# type: defun
#: lispref/nonascii.texi:438
#, no-wrap
msgid "make-char charset &optional code1 code2"
msgstr ""

# type: defun
#: lispref/nonascii.texi:444
msgid ""
"This function returns the character in character set @var{charset} whose "
"position codes are @var{code1} and @var{code2}.  This is roughly the inverse "
"of @code{split-char}.  Normally, you should specify either one or both of "
"@var{code1} and @var{code2} according to the dimension of @var{charset}.  "
"For example,"
msgstr ""

# type: example
#: lispref/nonascii.texi:448
#, no-wrap
msgid ""
"(make-char 'latin-iso8859-1 72)\n"
"     @result{} 2248\n"
msgstr ""

# type: defun
#: lispref/nonascii.texi:454
msgid ""
"Actually, the eighth bit of both @var{code1} and @var{code2} is zeroed "
"before they are used to index @var{charset}.  Thus you may use, for "
"instance, an ISO 8859 character code rather than subtracting 128, as is "
"necessary to index the corresponding Emacs charset."
msgstr ""

# type: cindex
#: lispref/nonascii.texi:456
#, no-wrap
msgid "generic characters"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:464
msgid ""
"If you call @code{make-char} with no @var{byte-values}, the result is a @dfn"
"{generic character} which stands for @var{charset}.  A generic character is "
"an integer, but it is @emph{not} valid for insertion in the buffer as a "
"character.  It can be used in @code{char-table-range} to refer to the whole "
"character set (@pxref{Char-Tables}).  @code{char-valid-p} returns @code{nil} "
"for generic characters.  For example:"
msgstr ""

# type: example
#: lispref/nonascii.texi:474
#, no-wrap
msgid ""
"(make-char 'latin-iso8859-1)\n"
"     @result{} 2176\n"
"(char-valid-p 2176)\n"
"     @result{} nil\n"
"(char-valid-p 2176 t)\n"
"     @result{} t\n"
"(split-char 2176)\n"
"     @result{} (latin-iso8859-1 0)\n"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:481
msgid ""
"The character sets @code{ascii}, @code{eight-bit-control}, and @code{eight-"
"bit-graphic} don't have corresponding generic characters.  If @var{charset} "
"is one of them and you don't supply @var{code1}, @code{make-char} returns "
"the character code corresponding to the smallest code in @var{charset}."
msgstr ""

# type: section
#: lispref/nonascii.texi:483
#, no-wrap
msgid "Scanning for Character Sets"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:489
msgid ""
"Sometimes it is useful to find out which character sets appear in a part of "
"a buffer or a string.  One use for this is in determining which coding "
"systems (@pxref{Coding Systems}) are capable of representing all of the text "
"in question."
msgstr ""

# type: defun
#: lispref/nonascii.texi:490
#, no-wrap
msgid "charset-after &optional pos"
msgstr ""

# type: defun
#: lispref/nonascii.texi:495
msgid ""
"This function return the charset of a character in the current buffer at "
"position @var{pos}.  If @var{pos} is omitted or @code{nil}, it defaults to "
"the current value of point.  If @var{pos} is out of range, the value is @code"
"{nil}."
msgstr ""

# type: defun
#: lispref/nonascii.texi:497
#, no-wrap
msgid "find-charset-region beg end &optional translation"
msgstr ""

# type: defun
#: lispref/nonascii.texi:500
msgid ""
"This function returns a list of the character sets that appear in the "
"current buffer between positions @var{beg} and @var{end}."
msgstr ""

# type: defun
#: lispref/nonascii.texi:506
msgid ""
"The optional argument @var{translation} specifies a translation table to be "
"used in scanning the text (@pxref{Translation of Characters}).  If it is non-"
"@code{nil}, then each character in the region is translated through this "
"table, and the value returned describes the translated characters instead of "
"the characters actually in the buffer."
msgstr ""

# type: defun
#: lispref/nonascii.texi:508
#, no-wrap
msgid "find-charset-string string &optional translation"
msgstr ""

# type: defun
#: lispref/nonascii.texi:513
msgid ""
"This function returns a list of the character sets that appear in the string "
"@var{string}.  It is just like @code{find-charset-region}, except that it "
"applies to the contents of @var{string} instead of part of the current "
"buffer."
msgstr ""

# type: cindex
#: lispref/nonascii.texi:517
#, no-wrap
msgid "character translation tables"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:518
#, no-wrap
msgid "translation tables"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:525
msgid ""
"A @dfn{translation table} is a char-table that specifies a mapping of "
"characters into characters.  These tables are used in encoding and decoding, "
"and for other purposes.  Some coding systems specify their own particular "
"translation tables; there are also default translation tables which apply to "
"all other coding systems."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:533
msgid ""
"For instance, the coding-system @code{utf-8} has a translation table that "
"maps characters of various charsets (e.g., @code{latin-iso8859-@var{x}}) "
"into Unicode character sets.  This way, it can encode Latin-2 characters "
"into UTF-8.  Meanwhile, @code{unify-8859-on-decoding-mode} operates by "
"specifying @code{standard-translation-table-for-decode} to translate Latin-"
"@var{x} characters into corresponding Unicode characters."
msgstr ""

# type: defun
#: lispref/nonascii.texi:534
#, no-wrap
msgid "make-translation-table &rest translations"
msgstr ""

# type: defun
#: lispref/nonascii.texi:539
msgid ""
"This function returns a translation table based on the argument @var"
"{translations}.  Each element of @var{translations} should be a list of "
"elements of the form @code{(@var{from} . @var{to})}; this says to translate "
"the character @var{from} into @var{to}."
msgstr ""

# type: defun
#: lispref/nonascii.texi:544
msgid ""
"The arguments and the forms in each argument are processed in order, and if "
"a previous form already translates @var{to} to some other character, say @var"
"{to-alt}, @var{from} is also translated to @var{to-alt}."
msgstr ""

# type: defun
#: lispref/nonascii.texi:555
msgid ""
"You can also map one whole character set into another character set with the "
"same dimension.  To do this, you specify a generic character (which "
"designates a character set) for @var{from} (@pxref{Splitting Characters}).  "
"In this case, if @var{to} is also a generic character, its character set "
"should have the same dimension as @var{from}'s.  Then the translation table "
"translates each character of @var{from}'s character set into the "
"corresponding character of @var{to}'s character set.  If @var{from} is a "
"generic character and @var{to} is an ordinary character, then the "
"translation table translates every character of @var{from}'s character set "
"into @var{to}."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:566
msgid ""
"In decoding, the translation table's translations are applied to the "
"characters that result from ordinary decoding.  If a coding system has "
"property @code{translation-table-for-decode}, that specifies the translation "
"table to use.  (This is a property of the coding system, as returned by @code"
"{coding-system-get}, not a property of the symbol that is the coding "
"system's name. @xref{Coding System Basics,, Basic Concepts of Coding "
"Systems}.)  Otherwise, if @code{standard-translation-table-for-decode} is "
"non-@code{nil}, decoding uses that table."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:574
msgid ""
"In encoding, the translation table's translations are applied to the "
"characters in the buffer, and the result of translation is actually "
"encoded.  If a coding system has property @code{translation-table-for-"
"encode}, that specifies the translation table to use.  Otherwise the "
"variable @code{standard-translation-table-for-encode} specifies the "
"translation table."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:575
#, no-wrap
msgid "standard-translation-table-for-decode"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:578
msgid ""
"This is the default translation table for decoding, for coding systems that "
"don't specify any other translation table."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:580
#, no-wrap
msgid "standard-translation-table-for-encode"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:583
msgid ""
"This is the default translation table for encoding, for coding systems that "
"don't specify any other translation table."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:585
#, no-wrap
msgid "translation-table-for-input"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:590
msgid ""
"Self-inserting characters are translated through this translation table "
"before they are inserted.  Search commands also translate their input "
"through this table, so they can compare more reliably with what's in the "
"buffer."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:595
msgid ""
"@code{set-buffer-file-coding-system} sets this variable so that your "
"keyboard input gets translated into the character sets that the buffer is "
"likely to contain.  This variable automatically becomes buffer-local when "
"set."
msgstr ""

# type: cindex
#: lispref/nonascii.texi:600
#, no-wrap
msgid "coding system"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:605
msgid ""
"When Emacs reads or writes a file, and when Emacs sends text to a subprocess "
"or receives text from a subprocess, it normally performs character code "
"conversion and end-of-line conversion as specified by a particular @dfn"
"{coding system}."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:608
msgid ""
"How to define a coding system is an arcane matter, and is not documented "
"here."
msgstr ""

# type: node
#: lispref/nonascii.texi:621 lispref/nonascii.texi:623
#, no-wrap
msgid "Coding System Basics"
msgstr ""

# type: menu
#: lispref/nonascii.texi:621
msgid "Basic concepts."
msgstr ""

# type: subsection
#: lispref/nonascii.texi:621 lispref/nonascii.texi:712
#: lispref/nonascii.texi:713
#, no-wrap
msgid "Encoding and I/O"
msgstr ""

# type: menu
#: lispref/nonascii.texi:621
msgid "How file I/O functions handle coding systems."
msgstr ""

# type: node
#: lispref/nonascii.texi:621 lispref/nonascii.texi:793
#, no-wrap
msgid "Lisp and Coding Systems"
msgstr ""

# type: menu
#: lispref/nonascii.texi:621
msgid "Functions to operate on coding system names."
msgstr ""

# type: subsection
#: lispref/nonascii.texi:621 lispref/nonascii.texi:910
#: lispref/nonascii.texi:911
#, no-wrap
msgid "User-Chosen Coding Systems"
msgstr ""

# type: menu
#: lispref/nonascii.texi:621
msgid "Asking the user to choose a coding system."
msgstr ""

# type: subsection
#: lispref/nonascii.texi:621 lispref/nonascii.texi:988
#: lispref/nonascii.texi:989
#, no-wrap
msgid "Default Coding Systems"
msgstr ""

# type: menu
#: lispref/nonascii.texi:621
msgid "Controlling the default choices."
msgstr ""

# type: node
#: lispref/nonascii.texi:621 lispref/nonascii.texi:1139
#, no-wrap
msgid "Specifying Coding Systems"
msgstr ""

# type: menu
#: lispref/nonascii.texi:621
msgid "Requesting a particular coding system"
msgstr ""

# type: menu
#: lispref/nonascii.texi:621
msgid "for a single file operation."
msgstr ""

# type: node
#: lispref/nonascii.texi:621 lispref/nonascii.texi:1193
#, no-wrap
msgid "Explicit Encoding"
msgstr ""

# type: menu
#: lispref/nonascii.texi:621
msgid "Encoding or decoding text without doing I/O."
msgstr ""

# type: subsection
#: lispref/nonascii.texi:621 lispref/nonascii.texi:1277
#: lispref/nonascii.texi:1278
#, no-wrap
msgid "Terminal I/O Encoding"
msgstr ""

# type: menu
#: lispref/nonascii.texi:621
msgid "Use of encoding for terminal I/O."
msgstr ""

# type: subsection
#: lispref/nonascii.texi:621 lispref/nonascii.texi:1308
#: lispref/nonascii.texi:1309
#, no-wrap
msgid "MS-DOS File Types"
msgstr ""

# type: menu
#: lispref/nonascii.texi:621
msgid "How DOS \"text\" and \"binary\" files"
msgstr ""

# type: menu
#: lispref/nonascii.texi:621
msgid "relate to coding systems."
msgstr ""

# type: subsection
#: lispref/nonascii.texi:624
#, no-wrap
msgid "Basic Concepts of Coding Systems"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:626
#, no-wrap
msgid "character code conversion"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:635
msgid ""
"@dfn{Character code conversion} involves conversion between the encoding "
"used inside Emacs and some other encoding.  Emacs supports many different "
"encodings, in that it can convert to and from them.  For example, it can "
"convert text to or from encodings such as Latin 1, Latin 2, Latin 3, Latin "
"4, Latin 5, and several variants of ISO 2022.  In some cases, Emacs supports "
"several alternative encodings for the same characters; for example, there "
"are three coding systems for the Cyrillic (Russian) alphabet: ISO, "
"Alternativnyj, and KOI8."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:639
msgid ""
"Most coding systems specify a particular character code for conversion, but "
"some of them leave the choice unspecified---to be chosen heuristically for "
"each file, based on the data."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:645
msgid ""
"In general, a coding system doesn't guarantee roundtrip identity: decoding a "
"byte sequence using coding system, then encoding the resulting text in the "
"same coding system, can produce a different byte sequence.  However, the "
"following coding systems do guarantee that the byte sequence will be the "
"same as what you originally decoded:"
msgstr ""

# type: quotation
#: lispref/nonascii.texi:651
msgid ""
"chinese-big5 chinese-iso-8bit cyrillic-iso-8bit emacs-mule greek-iso-8bit "
"hebrew-iso-8bit iso-latin-1 iso-latin-2 iso-latin-3 iso-latin-4 iso-latin-5 "
"iso-latin-8 iso-latin-9 iso-safe japanese-iso-8bit japanese-shift-jis korean-"
"iso-8bit raw-text"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:660
msgid ""
"Encoding buffer text and then decoding the result can also fail to reproduce "
"the original text.  For instance, if you encode Latin-2 characters with @code"
"{utf-8} and decode the result using the same coding system, you'll get "
"Unicode characters (of charset @code{mule-unicode-0100-24ff}).  If you "
"encode Unicode characters with @code{iso-latin-2} and decode the result with "
"the same coding system, you'll get Latin-2 characters."
msgstr ""

# type: cindex
#: lispref/nonascii.texi:661
#, no-wrap
msgid "EOL conversion"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:662
#, no-wrap
msgid "end-of-line conversion"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:663
#, no-wrap
msgid "line end conversion"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:669
msgid ""
"@dfn{End of line conversion} handles three different conventions used on "
"various systems for representing end of line in files.  The Unix convention "
"is to use the linefeed character (also called newline).  The DOS convention "
"is to use a carriage-return and a linefeed at the end of a line.  The Mac "
"convention is to use just carriage-return."
msgstr ""

# type: cindex
#: lispref/nonascii.texi:670
#, no-wrap
msgid "base coding system"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:671
#, no-wrap
msgid "variant coding system"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:678
msgid ""
"@dfn{Base coding systems} such as @code{latin-1} leave the end-of-line "
"conversion unspecified, to be chosen based on the data.  @dfn{Variant coding "
"systems} such as @code{latin-1-unix}, @code{latin-1-dos} and @code{latin-1-"
"mac} specify the end-of-line conversion explicitly as well.  Most base "
"coding systems have three corresponding variants whose names are formed by "
"adding @samp{-unix}, @samp{-dos} and @samp{-mac}."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:686
msgid ""
"The coding system @code{raw-text} is special in that it prevents character "
"code conversion, and causes the buffer visited with that coding system to be "
"a unibyte buffer.  It does not specify the end-of-line conversion, allowing "
"that to be determined as usual by the data, and has the usual three variants "
"which specify the end-of-line conversion.  @code{no-conversion} is "
"equivalent to @code{raw-text-unix}: it specifies no conversion of either "
"character codes or end-of-line."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:691
msgid ""
"The coding system @code{emacs-mule} specifies that the data is represented "
"in the internal Emacs encoding.  This is like @code{raw-text} in that no "
"code conversion happens, but different in that the result is multibyte data."
msgstr ""

# type: defun
#: lispref/nonascii.texi:692
#, no-wrap
msgid "coding-system-get coding-system property"
msgstr ""

# type: defun
#: lispref/nonascii.texi:698
msgid ""
"This function returns the specified property of the coding system @var"
"{coding-system}.  Most coding system properties exist for internal purposes, "
"but one that you might find useful is @code{mime-charset}.  That property's "
"value is the name used in MIME for the character coding which this coding "
"system can read and write.  Examples:"
msgstr ""

# type: example
#: lispref/nonascii.texi:706
#, no-wrap
msgid ""
"(coding-system-get 'iso-latin-1 'mime-charset)\n"
"     @result{} iso-8859-1\n"
"(coding-system-get 'iso-2022-cn 'mime-charset)\n"
"     @result{} iso-2022-cn\n"
"(coding-system-get 'cyrillic-koi8 'mime-charset)\n"
"     @result{} koi8-r\n"
msgstr ""

# type: defun
#: lispref/nonascii.texi:710
msgid ""
"The value of the @code{mime-charset} property is also defined as an alias "
"for the coding system."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:719
msgid ""
"The principal purpose of coding systems is for use in reading and writing "
"files.  The function @code{insert-file-contents} uses a coding system for "
"decoding the file data, and @code{write-region} uses one to encode the "
"buffer contents."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:728
msgid ""
"You can specify the coding system to use either explicitly (@pxref"
"{Specifying Coding Systems}), or implicitly using a default mechanism (@pxref"
"{Default Coding Systems}).  But these methods may not completely specify "
"what to do.  For example, they may choose a coding system such as @code"
"{undefined} which leaves the character code conversion to be determined from "
"the data.  In these cases, the I/O operation finishes the job of choosing a "
"coding system.  Very often you will want to find out afterwards which coding "
"system was chosen."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:739
msgid ""
"This buffer-local variable records the coding system that was used to visit "
"the current buffer.  It is used for saving the buffer, and for writing part "
"of the buffer with @code{write-region}.  If the text to be written cannot be "
"safely encoded using the coding system specified by this variable, these "
"operations select an alternative encoding by calling the function @code"
"{select-safe-coding-system} (@pxref{User-Chosen Coding Systems}).  If "
"selecting a different encoding requires to ask the user to specify a coding "
"system, @code{buffer-file-coding-system} is updated to the newly selected "
"coding system."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:742
msgid ""
"@code{buffer-file-coding-system} does @emph{not} affect sending text to a "
"subprocess."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:748
msgid ""
"This variable specifies the coding system for saving the buffer (by "
"overriding @code{buffer-file-coding-system}).  Note that it is not used for "
"@code{write-region}."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:757
msgid ""
"When a command to save the buffer starts out to use @code{buffer-file-coding-"
"system} (or @code{save-buffer-coding-system}), and that coding system cannot "
"handle the actual text in the buffer, the command asks the user to choose "
"another coding system (by calling @code{select-safe-coding-system}).  After "
"that happens, the command also updates @code{buffer-file-coding-system} to "
"represent the coding system that the user specified."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:759
#, no-wrap
msgid "last-coding-system-used"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:763
msgid ""
"I/O operations for files and subprocesses set this variable to the coding "
"system name that was used.  The explicit encoding and decoding functions "
"(@pxref{Explicit Encoding}) set it too."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:768
msgid ""
"@strong{Warning:} Since receiving subprocess output sets this variable, it "
"can change whenever Emacs waits; therefore, you should copy the value "
"shortly after the function call that stores the value you are interested in."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:772
msgid ""
"The variable @code{selection-coding-system} specifies how to encode "
"selections for the window system.  @xref{Window System Selections}."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:773
#, no-wrap
msgid "file-name-coding-system"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:782
msgid ""
"The variable @code{file-name-coding-system} specifies the coding system to "
"use for encoding file names.  Emacs encodes file names using that coding "
"system for all file operations.  If @code{file-name-coding-system} is @code"
"{nil}, Emacs uses a default coding system determined by the selected "
"language environment.  In the default language environment, any non-@acronym"
"{ASCII} characters in file names are not encoded specially; they appear in "
"the file system using the internal Emacs representation."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:792
msgid ""
"@strong{Warning:} if you change @code{file-name-coding-system} (or the "
"language environment) in the middle of an Emacs session, problems can result "
"if you have already visited files whose names were encoded using the earlier "
"coding system and are handled differently under the new coding system.  If "
"you try to save one of these buffers under the visited file name, saving may "
"use the wrong file name, or it may get an error.  If such a problem happens, "
"use @kbd{C-x C-w} to specify a new file name for that buffer."
msgstr ""

# type: subsection
#: lispref/nonascii.texi:794
#, no-wrap
msgid "Coding Systems in Lisp"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:797
msgid "Here are the Lisp facilities for working with coding systems:"
msgstr ""

# type: defun
#: lispref/nonascii.texi:798
#, no-wrap
msgid "coding-system-list &optional base-only"
msgstr ""

# type: defun
#: lispref/nonascii.texi:803
msgid ""
"This function returns a list of all coding system names (symbols).  If @var"
"{base-only} is non-@code{nil}, the value includes only the base coding "
"systems.  Otherwise, it includes alias and variant coding systems as well."
msgstr ""

# type: defun
#: lispref/nonascii.texi:805
#, no-wrap
msgid "coding-system-p object"
msgstr ""

# type: defun
#: lispref/nonascii.texi:808
msgid ""
"This function returns @code{t} if @var{object} is a coding system name or "
"@code{nil}."
msgstr ""

# type: defun
#: lispref/nonascii.texi:810
#, no-wrap
msgid "check-coding-system coding-system"
msgstr ""

# type: defun
#: lispref/nonascii.texi:814
msgid ""
"This function checks the validity of @var{coding-system}.  If that is valid, "
"it returns @var{coding-system}.  Otherwise it signals an error with "
"condition @code{coding-system-error}."
msgstr ""

# type: defun
#: lispref/nonascii.texi:816
#, no-wrap
msgid "coding-system-eol-type coding-system"
msgstr ""

# type: defun
#: lispref/nonascii.texi:824
msgid ""
"This function returns the type of end-of-line (a.k.a.@: @dfn{eol})  "
"conversion used by @var{coding-system}.  If @var{coding-system} specifies a "
"certain eol conversion, the return value is an integer 0, 1, or 2, standing "
"for @code{unix}, @code{dos}, and @code{mac}, respectively.  If @var{coding-"
"system} doesn't specify eol conversion explicitly, the return value is a "
"vector of coding systems, each one with one of the possible eol conversion "
"types, like this:"
msgstr ""

# type: lisp
#: lispref/nonascii.texi:828
#, no-wrap
msgid ""
"(coding-system-eol-type 'latin-1)\n"
"     @result{} [latin-1-unix latin-1-dos latin-1-mac]\n"
msgstr ""

# type: defun
#: lispref/nonascii.texi:840
msgid ""
"If this function returns a vector, Emacs will decide, as part of the text "
"encoding or decoding process, what eol conversion to use.  For decoding, the "
"end-of-line format of the text is auto-detected, and the eol conversion is "
"set to match it (e.g., DOS-style CRLF format will imply @code{dos} eol "
"conversion).  For encoding, the eol conversion is taken from the appropriate "
"default coding system (e.g., @code{default-buffer-file-coding-system} for "
"@code{buffer-file-coding-system}), or from the default eol conversion "
"appropriate for the underlying platform."
msgstr ""

# type: defun
#: lispref/nonascii.texi:842
#, no-wrap
msgid "coding-system-change-eol-conversion coding-system eol-type"
msgstr ""

# type: defun
#: lispref/nonascii.texi:848
msgid ""
"This function returns a coding system which is like @var{coding-system} "
"except for its eol conversion, which is specified by @code{eol-type}.  @var"
"{eol-type} should be @code{unix}, @code{dos}, @code{mac}, or @code{nil}.  If "
"it is @code{nil}, the returned coding system determines the end-of-line "
"conversion from the data."
msgstr ""

# type: defun
#: lispref/nonascii.texi:851
msgid ""
"@var{eol-type} may also be 0, 1 or 2, standing for @code{unix}, @code{dos} "
"and @code{mac}, respectively."
msgstr ""

# type: defun
#: lispref/nonascii.texi:853
#, no-wrap
msgid "coding-system-change-text-conversion eol-coding text-coding"
msgstr ""

# type: defun
#: lispref/nonascii.texi:858
msgid ""
"This function returns a coding system which uses the end-of-line conversion "
"of @var{eol-coding}, and the text conversion of @var{text-coding}.  If @var"
"{text-coding} is @code{nil}, it returns @code{undecided}, or one of its "
"variants according to @var{eol-coding}."
msgstr ""

# type: defun
#: lispref/nonascii.texi:860
#, no-wrap
msgid "find-coding-systems-region from to"
msgstr ""

# type: defun
#: lispref/nonascii.texi:865
msgid ""
"This function returns a list of coding systems that could be used to encode "
"a text between @var{from} and @var{to}.  All coding systems in the list can "
"safely encode any multibyte characters in that portion of the text."
msgstr ""

# type: defun
#: lispref/nonascii.texi:868
msgid ""
"If the text contains no multibyte characters, the function returns the list "
"@code{(undecided)}."
msgstr ""

# type: defun
#: lispref/nonascii.texi:870
#, no-wrap
msgid "find-coding-systems-string string"
msgstr ""

# type: defun
#: lispref/nonascii.texi:876
msgid ""
"This function returns a list of coding systems that could be used to encode "
"the text of @var{string}.  All coding systems in the list can safely encode "
"any multibyte characters in @var{string}.  If the text contains no multibyte "
"characters, this returns the list @code{(undecided)}."
msgstr ""

# type: defun
#: lispref/nonascii.texi:878
#, no-wrap
msgid "find-coding-systems-for-charsets charsets"
msgstr ""

# type: defun
#: lispref/nonascii.texi:881
msgid ""
"This function returns a list of coding systems that could be used to encode "
"all the character sets in the list @var{charsets}."
msgstr ""

# type: defun
#: lispref/nonascii.texi:883
#, no-wrap
msgid "detect-coding-region start end &optional highest"
msgstr ""

# type: defun
#: lispref/nonascii.texi:887
msgid ""
"This function chooses a plausible coding system for decoding the text from "
"@var{start} to @var{end}.  This text should be a byte sequence (@pxref"
"{Explicit Encoding})."
msgstr ""

# type: defun
#: lispref/nonascii.texi:893
msgid ""
"Normally this function returns a list of coding systems that could handle "
"decoding the text that was scanned.  They are listed in order of decreasing "
"priority.  But if @var{highest} is non-@code{nil}, then the return value is "
"just one coding system, the one that is highest in priority."
msgstr ""

# type: defun
#: lispref/nonascii.texi:898
msgid ""
"If the region contains only @acronym{ASCII} characters except for such ISO-"
"2022 control characters ISO-2022 as @code{ESC}, the value is @code"
"{undecided} or @code{(undecided)}, or a variant specifying end-of-line "
"conversion, if that can be deduced from the text."
msgstr ""

# type: defun
#: lispref/nonascii.texi:900
#, no-wrap
msgid "detect-coding-string string &optional highest"
msgstr ""

# type: defun
#: lispref/nonascii.texi:903
msgid ""
"This function is like @code{detect-coding-region} except that it operates on "
"the contents of @var{string} instead of bytes in the buffer."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:909
msgid ""
"@xref{Coding systems for a subprocess,, Process Information}, in particular "
"the description of the functions @code{process-coding-system} and @code{set-"
"process-coding-system}, for how to examine or set the coding systems used "
"for I/O to a subprocess."
msgstr ""

# type: cindex
#: lispref/nonascii.texi:913
#, no-wrap
msgid "select safe coding system"
msgstr ""

# type: defun
#: lispref/nonascii.texi:914
#, no-wrap
msgid "select-safe-coding-system from to &optional default-coding-system accept-default-p file"
msgstr ""

# type: defun
#: lispref/nonascii.texi:920
msgid ""
"This function selects a coding system for encoding specified text, asking "
"the user to choose if necessary.  Normally the specified text is the text in "
"the current buffer between @var{from} and @var{to}.  If @var{from} is a "
"string, the string specifies the text to encode, and @var{to} is ignored."
msgstr ""

# type: defun
#: lispref/nonascii.texi:932
msgid ""
"If @var{default-coding-system} is non-@code{nil}, that is the first coding "
"system to try; if that can handle the text, @code{select-safe-coding-system} "
"returns that coding system.  It can also be a list of coding systems; then "
"the function tries each of them one by one.  After trying all of them, it "
"next tries the current buffer's value of @code{buffer-file-coding-system} "
"(if it is not @code{undecided}), then the value of @code{default-buffer-file-"
"coding-system} and finally the user's most preferred coding system, which "
"the user can set using the command @code{prefer-coding-system} (@pxref"
"{Recognize Coding,, Recognizing Coding Systems, emacs, The GNU Emacs "
"Manual})."
msgstr ""

# type: defun
#: lispref/nonascii.texi:937
msgid ""
"If one of those coding systems can safely encode all the specified text, "
"@code{select-safe-coding-system} chooses it and returns it.  Otherwise, it "
"asks the user to choose from a list of coding systems which can encode all "
"the text, and returns the user's choice."
msgstr ""

# type: defun
#: lispref/nonascii.texi:943
msgid ""
"@var{default-coding-system} can also be a list whose first element is t and "
"whose other elements are coding systems.  Then, if no coding system in the "
"list can handle the text, @code{select-safe-coding-system} queries the user "
"immediately, without trying any of the three alternatives described above."
msgstr ""

# type: defun
#: lispref/nonascii.texi:952
msgid ""
"The optional argument @var{accept-default-p}, if non-@code{nil}, should be a "
"function to determine whether a coding system selected without user "
"interaction is acceptable. @code{select-safe-coding-system} calls this "
"function with one argument, the base coding system of the selected coding "
"system.  If @var{accept-default-p} returns @code{nil}, @code{select-safe-"
"coding-system} rejects the silently selected coding system, and asks the "
"user to select a coding system from a list of possible candidates."
msgstr ""

# type: vindex
#: lispref/nonascii.texi:953
#, no-wrap
msgid "select-safe-coding-system-accept-default-p"
msgstr ""

# type: defun
#: lispref/nonascii.texi:957
msgid ""
"If the variable @code{select-safe-coding-system-accept-default-p} is non-"
"@code{nil}, its value overrides the value of @var{accept-default-p}."
msgstr ""

# type: defun
#: lispref/nonascii.texi:969
msgid ""
"As a final step, before returning the chosen coding system, @code{select-"
"safe-coding-system} checks whether that coding system is consistent with "
"what would be selected if the contents of the region were read from a file.  "
"(If not, this could lead to data corruption in a file subsequently re-"
"visited and edited.)  Normally, @code{select-safe-coding-system} uses @code"
"{buffer-file-name} as the file for this purpose, but if @var{file} is non-"
"@code{nil}, it uses that file instead (this can be relevant for @code{write-"
"region} and similar functions).  If it detects an apparent inconsistency, "
"@code{select-safe-coding-system} queries the user before selecting the "
"coding system."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:973
msgid ""
"Here are two functions you can use to let the user specify a coding system, "
"with completion.  @xref{Completion}."
msgstr ""

# type: defun
#: lispref/nonascii.texi:974
#, no-wrap
msgid "read-coding-system prompt &optional default"
msgstr ""

# type: defun
#: lispref/nonascii.texi:979
msgid ""
"This function reads a coding system using the minibuffer, prompting with "
"string @var{prompt}, and returns the coding system name as a symbol.  If the "
"user enters null input, @var{default} specifies which coding system to "
"return.  It should be a symbol or a string."
msgstr ""

# type: defun
#: lispref/nonascii.texi:981
#, no-wrap
msgid "read-non-nil-coding-system prompt"
msgstr ""

# type: defun
#: lispref/nonascii.texi:986
msgid ""
"This function reads a coding system using the minibuffer, prompting with "
"string @var{prompt}, and returns the coding system name as a symbol.  If the "
"user tries to enter null input, it asks the user to try again.  @xref{Coding "
"Systems}."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:994
msgid ""
"This section describes variables that specify the default coding system for "
"certain files or when running certain subprograms, and the function that I/O "
"operations use to access them."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:1001
msgid ""
"The idea of these variables is that you set them once and for all to the "
"defaults you want, and then do not change them again.  To specify a "
"particular coding system for a particular operation in a Lisp program, don't "
"change these variables; instead, override them using @code{coding-system-for-"
"read} and @code{coding-system-for-write} (@pxref{Specifying Coding Systems})."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1002
#, no-wrap
msgid "auto-coding-regexp-alist"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1012
msgid ""
"This variable is an alist of text patterns and corresponding coding systems. "
"Each element has the form @code{(@var{regexp} . @var{coding-system})}; a "
"file whose first few kilobytes match @var{regexp} is decoded with @var"
"{coding-system} when its contents are read into a buffer.  The settings in "
"this alist take priority over @code{coding:} tags in the files and the "
"contents of @code{file-coding-system-alist} (see below).  The default value "
"is set so that Emacs automatically recognizes mail files in Babyl format and "
"reads them with no code conversions."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1014
#, no-wrap
msgid "file-coding-system-alist"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1020
msgid ""
"This variable is an alist that specifies the coding systems to use for "
"reading and writing particular files.  Each element has the form @code{(@var"
"{pattern} . @var{coding})}, where @var{pattern} is a regular expression that "
"matches certain file names.  The element applies to file names that match "
"@var{pattern}."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1028
msgid ""
"The @sc{cdr} of the element, @var{coding}, should be either a coding system, "
"a cons cell containing two coding systems, or a function name (a symbol with "
"a function definition).  If @var{coding} is a coding system, that coding "
"system is used for both reading the file and writing it.  If @var{coding} is "
"a cons cell containing two coding systems, its @sc{car} specifies the coding "
"system for decoding, and its @sc{cdr} specifies the coding system for "
"encoding."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1034
msgid ""
"If @var{coding} is a function name, the function should take one argument, a "
"list of all arguments passed to @code{find-operation-coding-system}.  It "
"must return a coding system or a cons cell containing two coding systems.  "
"This value has the same meaning as described above."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1036
#, no-wrap
msgid "process-coding-system-alist"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1044
msgid ""
"This variable is an alist specifying which coding systems to use for a "
"subprocess, depending on which program is running in the subprocess.  It "
"works like @code{file-coding-system-alist}, except that @var{pattern} is "
"matched against the program name used to start the subprocess.  The coding "
"system or systems specified in this alist are used to initialize the coding "
"systems used for I/O to the subprocess, but you can specify other coding "
"systems later using @code{set-process-coding-system}."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:1053
msgid ""
"@strong{Warning:} Coding systems such as @code{undecided}, which determine "
"the coding system from the data, do not work entirely reliably with "
"asynchronous subprocess output.  This is because Emacs handles asynchronous "
"subprocess output in batches, as it arrives.  If the coding system leaves "
"the character code conversion unspecified, or leaves the end-of-line "
"conversion unspecified, Emacs must try to detect the proper conversion from "
"one batch at a time, and this does not always work."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:1058
msgid ""
"Therefore, with an asynchronous subprocess, if at all possible, use a coding "
"system which determines both the character code conversion and the end of "
"line conversion---that is, one like @code{latin-1-unix}, rather than @code"
"{undecided} or @code{latin-1}."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1059
#, no-wrap
msgid "network-coding-system-alist"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1066
msgid ""
"This variable is an alist that specifies the coding system to use for "
"network streams.  It works much like @code{file-coding-system-alist}, with "
"the difference that the @var{pattern} in an element may be either a port "
"number or a regular expression.  If it is a regular expression, it is "
"matched against the network service name used to open the network stream."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1068
#, no-wrap
msgid "default-process-coding-system"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1072
msgid ""
"This variable specifies the coding systems to use for subprocess (and "
"network stream) input and output, when nothing else specifies what to do."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1076
msgid ""
"The value should be a cons cell of the form @code{(@var{input-coding} . @var"
"{output-coding})}.  Here @var{input-coding} applies to input from the "
"subprocess, and @var{output-coding} applies to output to it."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1078
#, no-wrap
msgid "auto-coding-functions"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1081
msgid ""
"This variable holds a list of functions that try to determine a coding "
"system for a file based on its undecoded contents."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1089
msgid ""
"Each function in this list should be written to look at text in the current "
"buffer, but should not modify it in any way.  The buffer will contain "
"undecoded text of parts of the file.  Each function should take one "
"argument, @var{size}, which tells it how many characters to look at, "
"starting from point.  If the function succeeds in determining a coding "
"system for the file, it should return that coding system.  Otherwise, it "
"should return @code{nil}."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1092
msgid ""
"If a file has a @samp{coding:} tag, that takes precedence, so these "
"functions won't be called."
msgstr ""

# type: defun
#: lispref/nonascii.texi:1094
#, no-wrap
msgid "find-operation-coding-system operation &rest arguments"
msgstr ""

# type: defun
#: lispref/nonascii.texi:1098
msgid ""
"This function returns the coding system to use (by default) for performing "
"@var{operation} with @var{arguments}.  The value has this form:"
msgstr ""

# type: example
#: lispref/nonascii.texi:1101
#, no-wrap
msgid "(@var{decoding-system} . @var{encoding-system})\n"
msgstr ""

# type: defun
#: lispref/nonascii.texi:1107
msgid ""
"The first element, @var{decoding-system}, is the coding system to use for "
"decoding (in case @var{operation} does decoding), and @var{encoding-system} "
"is the coding system for encoding (in case @var{operation} does encoding)."
msgstr ""

# type: defun
#: lispref/nonascii.texi:1113
msgid ""
"The argument @var{operation} is a symbol, one of @code{write-region}, @code"
"{start-process}, @code{call-process}, @code{call-process-region}, @code"
"{insert-file-contents}, or @code{open-network-stream}.  These are the names "
"of the Emacs I/O primitives that can do character code and eol conversion."
msgstr ""

# type: defun
#: lispref/nonascii.texi:1121
msgid ""
"The remaining arguments should be the same arguments that might be given to "
"the corresponding I/O primitive.  Depending on the primitive, one of those "
"arguments is selected as the @dfn{target}.  For example, if @var{operation} "
"does file I/O, whichever argument specifies the file name is the target.  "
"For subprocess primitives, the process name is the target.  For @code{open-"
"network-stream}, the target is the service name or port number."
msgstr ""

# type: defun
#: lispref/nonascii.texi:1127
msgid ""
"Depending on @var{operation}, this function looks up the target in @code"
"{file-coding-system-alist}, @code{process-coding-system-alist}, or @code"
"{network-coding-system-alist}.  If the target is found in the alist, @code"
"{find-operation-coding-system} returns its association in the alist; "
"otherwise it returns @code{nil}."
msgstr ""

# type: defun
#: lispref/nonascii.texi:1137
msgid ""
"If @var{operation} is @code{insert-file-contents}, the argument "
"corresponding to the target may be a cons cell of the form @code{(@var"
"{filename} . @var{buffer})}).  In that case, @var{filename} is a file name "
"to look up in @code{file-coding-system-alist}, and @var{buffer} is a buffer "
"that contains the file's contents (not yet decoded).  If @code{file-coding-"
"system-alist} specifies a function to call for this file, and that function "
"needs to examine the file's contents (as it usually does), it should examine "
"the contents of @var{buffer} instead of reading the file."
msgstr ""

# type: subsection
#: lispref/nonascii.texi:1140
#, no-wrap
msgid "Specifying a Coding System for One Operation"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:1145
msgid ""
"You can specify the coding system for a specific operation by binding the "
"variables @code{coding-system-for-read} and/or @code{coding-system-for-"
"write}."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1146
#, no-wrap
msgid "coding-system-for-read"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1149
msgid ""
"If this variable is non-@code{nil}, it specifies the coding system to use "
"for reading a file, or for input from a synchronous subprocess."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1155
msgid ""
"It also applies to any asynchronous subprocess or network stream, but in a "
"different way: the value of @code{coding-system-for-read} when you start the "
"subprocess or open the network stream specifies the input decoding method "
"for that subprocess or network stream.  It remains in use for that "
"subprocess or network stream unless and until overridden."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1160
msgid ""
"The right way to use this variable is to bind it with @code{let} for a "
"specific I/O operation.  Its global value is normally @code{nil}, and you "
"should not globally set it to any other value.  Here is an example of the "
"right way to use the variable:"
msgstr ""

# type: example
#: lispref/nonascii.texi:1166
#, no-wrap
msgid ""
";; @r{Read the file with no character code conversion.}\n"
";; @r{Assume @acronym{crlf} represents end-of-line.}\n"
"(let ((coding-system-for-read 'emacs-mule-dos))\n"
"  (insert-file-contents filename))\n"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1173
msgid ""
"When its value is non-@code{nil}, this variable takes precedence over all "
"other methods of specifying a coding system to use for input, including @code"
"{file-coding-system-alist}, @code{process-coding-system-alist} and @code"
"{network-coding-system-alist}."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1175
#, no-wrap
msgid "coding-system-for-write"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1179
msgid ""
"This works much like @code{coding-system-for-read}, except that it applies "
"to output rather than input.  It affects writing to files, as well as "
"sending output to subprocesses and net connections."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1184
msgid ""
"When a single operation does both input and output, as do @code{call-process-"
"region} and @code{start-process}, both @code{coding-system-for-read} and "
"@code{coding-system-for-write} affect it."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1186
#, no-wrap
msgid "inhibit-eol-conversion"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1191
msgid ""
"When this variable is non-@code{nil}, no end-of-line conversion is done, no "
"matter which coding system is specified.  This applies to all the Emacs I/O "
"and subprocess primitives, and to the explicit encoding and decoding "
"functions (@pxref{Explicit Encoding})."
msgstr ""

# type: subsection
#: lispref/nonascii.texi:1194
#, no-wrap
msgid "Explicit Encoding and Decoding"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:1195
#, no-wrap
msgid "encoding in coding systems"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:1196
#, no-wrap
msgid "decoding in coding systems"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:1202
msgid ""
"All the operations that transfer text in and out of Emacs have the ability "
"to use a coding system to encode or decode the text.  You can also "
"explicitly encode and decode text using the functions in this section."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:1209
msgid ""
"The result of encoding, and the input to decoding, are not ordinary text.  "
"They logically consist of a series of byte values; that is, a series of "
"characters whose codes are in the range 0 through 255.  In a multibyte "
"buffer or string, character codes 128 through 159 are represented by "
"multibyte sequences, but this is invisible to Lisp programs."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:1216
msgid ""
"The usual way to read a file into a buffer as a sequence of bytes, so you "
"can decode the contents explicitly, is with @code{insert-file-contents-"
"literally} (@pxref{Reading from Files}); alternatively, specify a non-@code"
"{nil} @var{rawfile} argument when visiting a file with @code{find-file-"
"noselect}.  These methods result in a unibyte buffer."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:1222
msgid ""
"The usual way to use the byte sequence that results from explicitly encoding "
"text is to copy it to a file or process---for example, to write it with @code"
"{write-region} (@pxref{Writing to Files}), and suppress encoding by binding "
"@code{coding-system-for-write} to @code{no-conversion}."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:1227
msgid ""
"Here are the functions to perform explicit encoding or decoding.  The "
"encoding functions produce sequences of bytes; the decoding functions are "
"meant to operate on sequences of bytes.  All of these functions discard text "
"properties."
msgstr ""

# type: deffn
#: lispref/nonascii.texi:1228
#, no-wrap
msgid "Command encode-coding-region start end coding-system"
msgstr ""

# type: deffn
#: lispref/nonascii.texi:1234
msgid ""
"This command encodes the text from @var{start} to @var{end} according to "
"coding system @var{coding-system}.  The encoded text replaces the original "
"text in the buffer.  The result of encoding is logically a sequence of "
"bytes, but the buffer remains multibyte if it was multibyte before."
msgstr ""

# type: deffn
#: lispref/nonascii.texi:1236
msgid "This command returns the length of the encoded text."
msgstr ""

# type: defun
#: lispref/nonascii.texi:1238
#, no-wrap
msgid "encode-coding-string string coding-system &optional nocopy"
msgstr ""

# type: defun
#: lispref/nonascii.texi:1244
msgid ""
"This function encodes the text in @var{string} according to coding system "
"@var{coding-system}.  It returns a new string containing the encoded text, "
"except when @var{nocopy} is non-@code{nil}, in which case the function may "
"return @var{string} itself if the encoding operation is trivial.  The result "
"of encoding is a unibyte string."
msgstr ""

# type: deffn
#: lispref/nonascii.texi:1246
#, no-wrap
msgid "Command decode-coding-region start end coding-system"
msgstr ""

# type: deffn
#: lispref/nonascii.texi:1252
msgid ""
"This command decodes the text from @var{start} to @var{end} according to "
"coding system @var{coding-system}.  The decoded text replaces the original "
"text in the buffer.  To make explicit decoding useful, the text before "
"decoding ought to be a sequence of byte values, but both multibyte and "
"unibyte buffers are acceptable."
msgstr ""

# type: deffn
#: lispref/nonascii.texi:1254
msgid "This command returns the length of the decoded text."
msgstr ""

# type: defun
#: lispref/nonascii.texi:1256
#, no-wrap
msgid "decode-coding-string string coding-system &optional nocopy"
msgstr ""

# type: defun
#: lispref/nonascii.texi:1264
msgid ""
"This function decodes the text in @var{string} according to coding system "
"@var{coding-system}.  It returns a new string containing the decoded text, "
"except when @var{nocopy} is non-@code{nil}, in which case the function may "
"return @var{string} itself if the decoding operation is trivial.  To make "
"explicit decoding useful, the contents of @var{string} ought to be a "
"sequence of byte values, but a multibyte string is acceptable."
msgstr ""

# type: defun
#: lispref/nonascii.texi:1266
#, no-wrap
msgid "decode-coding-inserted-region from to filename &optional visit beg end replace"
msgstr ""

# type: defun
#: lispref/nonascii.texi:1270
msgid ""
"This function decodes the text from @var{from} to @var{to} as if it were "
"being read from file @var{filename} using @code{insert-file-contents} using "
"the rest of the arguments provided."
msgstr ""

# type: defun
#: lispref/nonascii.texi:1275
msgid ""
"The normal way to use this function is after reading text from a file "
"without decoding, if you decide you would rather have decoded it.  Instead "
"of deleting the text and reading it again, this time with decoding, you can "
"call this function."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:1285
msgid ""
"Emacs can decode keyboard input using a coding system, and encode terminal "
"output.  This is useful for terminals that transmit or display text using a "
"particular encoding such as Latin-1.  Emacs does not set @code{last-coding-"
"system-used} for encoding or decoding for the terminal."
msgstr ""

# type: defun
#: lispref/nonascii.texi:1286
#, no-wrap
msgid "keyboard-coding-system"
msgstr ""

# type: defun
#: lispref/nonascii.texi:1289
msgid ""
"This function returns the coding system that is in use for decoding keyboard "
"input---or @code{nil} if no coding system is to be used."
msgstr ""

# type: deffn
#: lispref/nonascii.texi:1291
#, no-wrap
msgid "Command set-keyboard-coding-system coding-system"
msgstr ""

# type: deffn
#: lispref/nonascii.texi:1295
msgid ""
"This command specifies @var{coding-system} as the coding system to use for "
"decoding keyboard input.  If @var{coding-system} is @code{nil}, that means "
"do not decode keyboard input."
msgstr ""

# type: defun
#: lispref/nonascii.texi:1297
#, no-wrap
msgid "terminal-coding-system"
msgstr ""

# type: defun
#: lispref/nonascii.texi:1300
msgid ""
"This function returns the coding system that is in use for encoding terminal "
"output---or @code{nil} for no encoding."
msgstr ""

# type: deffn
#: lispref/nonascii.texi:1302
#, no-wrap
msgid "Command set-terminal-coding-system coding-system"
msgstr ""

# type: deffn
#: lispref/nonascii.texi:1306
msgid ""
"This command specifies @var{coding-system} as the coding system to use for "
"encoding terminal output.  If @var{coding-system} is @code{nil}, that means "
"do not encode terminal output."
msgstr ""

# type: cindex
#: lispref/nonascii.texi:1310
#, no-wrap
msgid "DOS file types"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:1311
#, no-wrap
msgid "MS-DOS file types"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:1312
#, no-wrap
msgid "Windows file types"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:1313
#, no-wrap
msgid "file types on MS-DOS and Windows"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:1314
#, no-wrap
msgid "text files and binary files"
msgstr ""

# type: cindex
#: lispref/nonascii.texi:1315
#, no-wrap
msgid "binary files and text files"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:1326
msgid ""
"On MS-DOS and Microsoft Windows, Emacs guesses the appropriate end-of-line "
"conversion for a file by looking at the file's name.  This feature "
"classifies files as @dfn{text files} and @dfn{binary files}.  By ``binary "
"file'' we mean a file of literal byte values that are not necessarily meant "
"to be characters; Emacs does no end-of-line conversion and no character code "
"conversion for them.  On the other hand, the bytes in a text file are "
"intended to represent characters; when you create a new file whose name "
"implies that it is a text file, Emacs uses DOS end-of-line conversion."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1335
msgid ""
"This variable, automatically buffer-local in each buffer, records the file "
"type of the buffer's visited file.  When a buffer does not specify a coding "
"system with @code{buffer-file-coding-system}, this variable is used to "
"determine which coding system to use when writing the contents of the "
"buffer.  It should be @code{nil} for text, @code{t} for binary.  If it is "
"@code{t}, the coding system is @code{no-conversion}.  Otherwise, @code"
"{undecided-dos} is used."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1338
msgid ""
"Normally this variable is set by visiting a file; it is set to @code{nil} if "
"the file was visited without any actual conversion."
msgstr ""

# type: defopt
#: lispref/nonascii.texi:1340
#, no-wrap
msgid "file-name-buffer-file-type-alist"
msgstr "file-name-buffer-file-type-alist"

# type: defopt
#: lispref/nonascii.texi:1347
msgid ""
"This variable holds an alist for recognizing text and binary files.  Each "
"element has the form (@var{regexp} . @var{type}), where @var{regexp} is "
"matched against the file name, and @var{type} may be @code{nil} for text, "
"@code{t} for binary, or a function to call to compute which.  If it is a "
"function, then it is called with a single argument (the file name) and "
"should return @code{t} or @code{nil}."
msgstr ""

# type: defopt
#: lispref/nonascii.texi:1352
msgid ""
"When running on MS-DOS or MS-Windows, Emacs checks this alist to decide "
"which coding system to use when reading a file.  For a text file, @code"
"{undecided-dos} is used.  For a binary file, @code{no-conversion} is used."
msgstr ""

# type: defopt
#: lispref/nonascii.texi:1355
msgid ""
"If no element in this alist matches a given file name, then @code{default-"
"buffer-file-type} says how to treat the file."
msgstr ""

# type: defopt
#: lispref/nonascii.texi:1357
#, no-wrap
msgid "default-buffer-file-type"
msgstr "default-buffer-file-type"

# type: defopt
#: lispref/nonascii.texi:1360
msgid ""
"This variable says how to handle files for which @code{file-name-buffer-file-"
"type-alist} says nothing about the type."
msgstr ""

# type: defopt
#: lispref/nonascii.texi:1365
msgid ""
"If this variable is non-@code{nil}, then these files are treated as binary: "
"the coding system @code{no-conversion} is used.  Otherwise, nothing special "
"is done for them---the coding system is deduced solely from the file "
"contents, in the usual Emacs fashion."
msgstr ""

# type: cindex
#: lispref/nonascii.texi:1369
#, no-wrap
msgid "input methods"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:1378
msgid ""
"@dfn{Input methods} provide convenient ways of entering non-@acronym{ASCII} "
"characters from the keyboard.  Unlike coding systems, which translate non-"
"@acronym{ASCII} characters to and from encodings meant to be read by "
"programs, input methods provide human-friendly commands.  (@xref{Input "
"Methods,,, emacs, The GNU Emacs Manual}, for information on how users use "
"input methods to enter text.)  How to define input methods is not yet "
"documented in this manual, but here we describe how to use them."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:1381
msgid ""
"Each input method has a name, which is currently a string; in the future, "
"symbols may also be usable as input method names."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1382
#, no-wrap
msgid "current-input-method"
msgstr "current-input-method"

# type: defvar
#: lispref/nonascii.texi:1387
msgid ""
"This variable holds the name of the input method now active in the current "
"buffer.  (It automatically becomes local in each buffer when set in any "
"fashion.)  It is @code{nil} if no input method is active in the buffer now."
msgstr ""

# type: defopt
#: lispref/nonascii.texi:1389
#, no-wrap
msgid "default-input-method"
msgstr "default-input-method"

# type: defopt
#: lispref/nonascii.texi:1393
msgid ""
"This variable holds the default input method for commands that choose an "
"input method.  Unlike @code{current-input-method}, this variable is normally "
"global."
msgstr ""

# type: deffn
#: lispref/nonascii.texi:1395
#, no-wrap
msgid "Command set-input-method input-method"
msgstr ""

# type: deffn
#: lispref/nonascii.texi:1400
msgid ""
"This command activates input method @var{input-method} for the current "
"buffer.  It also sets @code{default-input-method} to @var{input-method}.  If "
"@var{input-method} is @code{nil}, this command deactivates any input method "
"for the current buffer."
msgstr ""

# type: defun
#: lispref/nonascii.texi:1402
#, no-wrap
msgid "read-input-method-name prompt &optional default inhibit-null"
msgstr ""

# type: defun
#: lispref/nonascii.texi:1407
msgid ""
"This function reads an input method name with the minibuffer, prompting with "
"@var{prompt}.  If @var{default} is non-@code{nil}, that is returned by "
"default, if the user enters empty input.  However, if @var{inhibit-null} is "
"non-@code{nil}, empty input signals an error."
msgstr ""

# type: defun
#: lispref/nonascii.texi:1409
msgid "The returned value is a string."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1411
#, no-wrap
msgid "input-method-alist"
msgstr "input-method-alist"

# type: defvar
#: lispref/nonascii.texi:1414
msgid ""
"This variable defines all the supported input methods.  Each element defines "
"one input method, and should have the form:"
msgstr ""

# type: example
#: lispref/nonascii.texi:1418
#, no-wrap
msgid ""
"(@var{input-method} @var{language-env} @var{activate-func}\n"
" @var{title} @var{description} @var{args}...)\n"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1424
msgid ""
"Here @var{input-method} is the input method name, a string; @var{language-"
"env} is another string, the name of the language environment this input "
"method is recommended for.  (That serves only for documentation purposes.)"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1429
msgid ""
"@var{activate-func} is a function to call to activate this method.  The @var"
"{args}, if any, are passed as arguments to @var{activate-func}.  All told, "
"the arguments to @var{activate-func} are @var{input-method} and the @var"
"{args}."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1433
msgid ""
"@var{title} is a string to display in the mode line while this method is "
"active.  @var{description} is a string describing this method and what it is "
"good for."
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:1438
msgid ""
"The fundamental interface to input methods is through the variable @code"
"{input-method-function}.  @xref{Reading One Event}, and @ref{Invoking the "
"Input Method}."
msgstr ""

# type: cindex
#: lispref/nonascii.texi:1441
#, no-wrap
msgid "locale"
msgstr ""

# type: Plain text
#: lispref/nonascii.texi:1446
msgid ""
"POSIX defines a concept of ``locales'' which control which language to use "
"in language-related features.  These Emacs variables control how Emacs "
"interacts with these features."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1447
#, no-wrap
msgid "locale-coding-system"
msgstr "locale-coding-system"

# type: cindex
#: lispref/nonascii.texi:1448
#, no-wrap
msgid "keyboard input decoding on X"
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1453
msgid ""
"This variable specifies the coding system to use for decoding system error "
"messages and---on X Window system only---keyboard input, for encoding the "
"format argument to @code{format-time-string}, and for decoding the return "
"value of @code{format-time-string}."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1455
#, no-wrap
msgid "system-messages-locale"
msgstr "system-messages-locale"

# type: defvar
#: lispref/nonascii.texi:1461
msgid ""
"This variable specifies the locale to use for generating system error "
"messages.  Changing the locale can cause messages to come out in a different "
"language or in a different orthography.  If the variable is @code{nil}, the "
"locale is specified by environment variables in the usual POSIX fashion."
msgstr ""

# type: defvar
#: lispref/nonascii.texi:1463
#, no-wrap
msgid "system-time-locale"
msgstr "system-time-locale"

# type: defvar
#: lispref/nonascii.texi:1468
msgid ""
"This variable specifies the locale to use for formatting time values.  "
"Changing the locale can cause messages to appear according to the "
"conventions of a different language.  If the variable is @code{nil}, the "
"locale is specified by environment variables in the usual POSIX fashion."
msgstr ""

# type: defun
#: lispref/nonascii.texi:1470
#, no-wrap
msgid "locale-info item"
msgstr ""

# type: defun
#: lispref/nonascii.texi:1473
msgid ""
"This function returns locale data @var{item} for the current POSIX locale, "
"if available.  @var{item} should be one of these symbols:"
msgstr ""

# type: item
#: lispref/nonascii.texi:1475
#, no-wrap
msgid "codeset"
msgstr ""

# type: table
#: lispref/nonascii.texi:1477
msgid "Return the character set as a string (locale item @code{CODESET})."
msgstr ""

# type: item
#: lispref/nonascii.texi:1478
#, no-wrap
msgid "days"
msgstr ""

# type: table
#: lispref/nonascii.texi:1481
msgid ""
"Return a 7-element vector of day names (locale items @code{DAY_1} through "
"@code{DAY_7});"
msgstr ""

# type: item
#: lispref/nonascii.texi:1482
#, no-wrap
msgid "months"
msgstr ""

# type: table
#: lispref/nonascii.texi:1485
msgid ""
"Return a 12-element vector of month names (locale items @code{MON_1} through "
"@code{MON_12})."
msgstr ""

# type: item
#: lispref/nonascii.texi:1486
#, no-wrap
msgid "paper"
msgstr ""

# type: table
#: lispref/nonascii.texi:1490
msgid ""
"Return a list @code{(@var{width} @var{height})} for the default paper size "
"measured in millimeters (locale items @code{PAPER_WIDTH} and @code"
"{PAPER_HEIGHT})."
msgstr ""

# type: defun
#: lispref/nonascii.texi:1497
msgid ""
"If the system can't provide the requested information, or if @var{item} is "
"not one of those symbols, the value is @code{nil}.  All strings in the "
"return value are decoded using @code{locale-coding-system}.  @xref"
"{Locales,,, libc, The GNU Libc Manual}, for more information about locales "
"and locale items."
msgstr ""

# type: ignore
#: lispref/nonascii.texi:1501
#, no-wrap
msgid "   arch-tag: be705bf8-941b-4c35-84fc-ad7d20ddb7cb\n"
msgstr "   arch-tag: be705bf8-941b-4c35-84fc-ad7d20ddb7cb\n"

# type: cindex
#: lispref/numbers.texi:9
#, no-wrap
msgid "integers"
msgstr "entiers"

# type: cindex
#: lispref/numbers.texi:10
#, no-wrap
msgid "numbers"
msgstr "nombres"

# type: Plain text
#: lispref/numbers.texi:20
msgid ""
"GNU Emacs supports two numeric data types: @dfn{integers} and @dfn{floating "
"point numbers}.  Integers are whole numbers such as @minus{}3, 0, 7, 13, and "
"511.  Their values are exact.  Floating point numbers are numbers with "
"fractional parts, such as @minus{}4.5, 0.0, or 2.71828.  They can also be "
"expressed in exponential notation: 1.5e2 equals 150; in this example, @samp"
"{e2} stands for ten to the second power, and that is multiplied by 1.5.  "
"Floating point values are not exact; they have a fixed, limited amount of "
"precision."
msgstr ""
"GNU Emacs supporte deux types de données numériques: @dfn{entiers} et\n"
"@dfn{nombres à virgule flottante}. Les nombres entiers sont des\n"
"nombres entiers tels que @minus{}3, 0, 7, 13, et 511. Leurs valeurs\n"
"sont exactes. Les nombres à virgule flottante sont des nombres avec\n"
"les parties partielles, telles que le @minus{}4.5, 0.0, ou\n"
"2.71828. Ils peuvent également être exprimés en notation\n"
"exponentielle: 1.5e2 est égal à 150; dans cet exemple, le @samp{e2}\n"
"représente dix à la puissance deux, le tout est multiplié par 1.5. Les\n"
"valeurs à virgule flottante ne sont pas exactes; elles sont fixe et\n"
"limitée en précision."

# type: section
#: lispref/numbers.texi:32 lispref/numbers.texi:34 lispref/numbers.texi:36
#: lispref/vol1.texi:359 lispref/vol2.texi:360
#, no-wrap
msgid "Integer Basics"
msgstr "Entiers basiques"

# type: menu
#: lispref/numbers.texi:32 lispref/vol1.texi:359 lispref/vol2.texi:360
msgid "Representation and range of integers."
msgstr "Représentation et champ des nombres entiers."

# type: node
#: lispref/numbers.texi:32 lispref/numbers.texi:158 lispref/vol1.texi:359
#: lispref/vol2.texi:360
#, no-wrap
msgid "Float Basics"
msgstr "Nombres à virgule flottante basiques"

# type: menu
#: lispref/numbers.texi:32 lispref/vol1.texi:359 lispref/vol2.texi:360
msgid "Representation and range of floating point."
msgstr "Représentation et champ des monbres à virgule flottante."

# type: node
#: lispref/numbers.texi:32 lispref/numbers.texi:223 lispref/vol1.texi:359
#: lispref/vol2.texi:360
#, no-wrap
msgid "Predicates on Numbers"
msgstr "Attributs des nombres"

# type: menu
#: lispref/numbers.texi:32 lispref/vol1.texi:359 lispref/vol2.texi:360
msgid "Testing for numbers."
msgstr "Tester les nombres."

# type: section
#: lispref/numbers.texi:32 lispref/numbers.texi:269 lispref/numbers.texi:270
#: lispref/vol1.texi:359 lispref/vol2.texi:360
#, no-wrap
msgid "Comparison of Numbers"
msgstr "Comparaison des nombres"

# type: menu
#: lispref/numbers.texi:32 lispref/vol1.texi:359 lispref/vol2.texi:360
msgid "Equality and inequality predicates."
msgstr "Attributs d'égalité et d'inégalité."

# type: section
#: lispref/numbers.texi:32 lispref/numbers.texi:390 lispref/numbers.texi:391
#: lispref/vol1.texi:359 lispref/vol2.texi:360
#, no-wrap
msgid "Numeric Conversions"
msgstr "Conversions numériques"

# type: menu
#: lispref/numbers.texi:32 lispref/vol1.texi:359 lispref/vol2.texi:360
msgid "Converting float to integer and vice versa."
msgstr ""
"Convertir des nombres à virgule flottante en nombres entiers et vice-versa."

# type: section
#: lispref/numbers.texi:32 lispref/numbers.texi:485 lispref/numbers.texi:486
#: lispref/vol1.texi:359 lispref/vol2.texi:360
#, no-wrap
msgid "Arithmetic Operations"
msgstr "Opérations arithmétiques"

# type: menu
#: lispref/numbers.texi:32 lispref/vol1.texi:359 lispref/vol2.texi:360
msgid "How to add, subtract, multiply and divide."
msgstr "Comment additionner, soustraire, multiplier et diviser."

# type: section
#: lispref/numbers.texi:32 lispref/numbers.texi:707 lispref/numbers.texi:708
#, no-wrap
msgid "Rounding Operations"
msgstr "Opérations d'arrondissage"

# type: menu
#: lispref/numbers.texi:32
msgid "Explicitly rounding floating point numbers."
msgstr "Arrondir explicitement les nombres à virgule flottante."

# type: node
#: lispref/numbers.texi:32 lispref/numbers.texi:738 lispref/vol1.texi:359
#: lispref/vol2.texi:360
#, no-wrap
msgid "Bitwise Operations"
msgstr "Opérations de bits"

# type: menu
#: lispref/numbers.texi:32 lispref/vol1.texi:359 lispref/vol2.texi:360
msgid "Logical and, or, not, shifting."
msgstr "and, or, not logique et décalage."

# type: node
#: lispref/numbers.texi:32 lispref/numbers.texi:1037 lispref/vol1.texi:359
#: lispref/vol2.texi:360
#, no-wrap
msgid "Math Functions"
msgstr "Fonctions mathématiques"

# type: menu
#: lispref/numbers.texi:32 lispref/vol1.texi:359 lispref/vol2.texi:360
msgid "Trig, exponential and logarithmic functions."
msgstr "Fonctions trigonométrique, exponentielle et logarithmique."

# type: section
#: lispref/numbers.texi:32 lispref/numbers.texi:1169 lispref/numbers.texi:1170
#: lispref/vol1.texi:359 lispref/vol2.texi:360
#, no-wrap
msgid "Random Numbers"
msgstr "Nombres aléatoires"

# type: menu
#: lispref/numbers.texi:32 lispref/vol1.texi:359 lispref/vol2.texi:360
msgid "Obtaining random integers, predictable or not."
msgstr "Obtention des nombres entiers aléatoires, prévisibles ou pas."

# type: Plain text
#: lispref/numbers.texi:40
msgid ""
"The range of values for an integer depends on the machine.  The minimum "
"range is @minus{}268435456 to 268435455 (29 bits; i.e.,"
msgstr ""
"Le champ des valeurs pour un nombre entier dépend de la machine. Le\n"
"champ minimum est @minus{}268435456 à 268435455 (29 bits; c.-à-d.,"

# type: ifnottex
#: lispref/numbers.texi:42 lispref/objects.texi:171 lispref/os.texi:1893
msgid "-2**28"
msgstr "-2**28"

# type: tex
#: lispref/numbers.texi:45 lispref/objects.texi:174
#, no-wrap
msgid "@math{-2^{28}}\n"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:49
msgid "2**28 - 1),"
msgstr "2**28 - 1),"

# type: tex
#: lispref/numbers.texi:52
#, no-wrap
msgid "@math{2^{28}-1}),\n"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:55
msgid ""
"but some machines may provide a wider range.  Many examples in this chapter "
"assume an integer has 29 bits."
msgstr ""
"mais quelques machines peuvent définir un autre champ. Beaucoup\n"
"d'exemples en ce chapitre supposent qu'un nombre entier a 29 bits."

# type: cindex
#: lispref/numbers.texi:55
#, no-wrap
msgid "overflow"
msgstr "débordement"

# type: Plain text
#: lispref/numbers.texi:59
msgid ""
"The Lisp reader reads an integer as a sequence of digits with optional "
"initial sign and optional final period."
msgstr ""
"Le lecteur de Lisp lit un nombre entier comme une séquence de chiffres\n"
"avec le signe initial et le point final facultatifs."

# type: example
#: lispref/numbers.texi:68
#, no-wrap
msgid ""
" 1               ; @r{The integer 1.}\n"
" 1.              ; @r{The integer 1.}\n"
"+1               ; @r{Also the integer 1.}\n"
"-1               ; @r{The integer @minus{}1.}\n"
" 536870913       ; @r{Also the integer 1, due to overflow.}\n"
" 0               ; @r{The integer 0.}\n"
"-0               ; @r{The integer 0.}\n"
msgstr ""
" 1               ; @r{L'entier 1.}\n"
" 1.              ; @r{L'entier 1.}\n"
"+1               ; @r{Encore l'entier 1.}\n"
"-1               ; @r{L'entier @minus{}1.}\n"
" 536870913       ; @r{Encore l'entier 1, dû au débordement.}\n"
" 0               ; @r{L'entier 0.}\n"
"-0               ; @r{L'entier 0.}\n"

# type: cindex
#: lispref/numbers.texi:70
#, no-wrap
msgid "integers in specific radix"
msgstr ""

# type: cindex
#: lispref/numbers.texi:71
#, no-wrap
msgid "radix for reading an integer"
msgstr ""

# type: cindex
#: lispref/numbers.texi:72
#, no-wrap
msgid "base for reading an integer"
msgstr ""

# type: cindex
#: lispref/numbers.texi:73
#, no-wrap
msgid "hex numbers"
msgstr ""

# type: cindex
#: lispref/numbers.texi:74
#, no-wrap
msgid "octal numbers"
msgstr ""

# type: cindex
#: lispref/numbers.texi:75
#, no-wrap
msgid "reading numbers in hex, octal, and binary"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:84
msgid ""
"The syntax for integers in bases other than 10 uses @samp{#} followed by a "
"letter that specifies the radix: @samp{b} for binary, @samp{o} for octal, "
"@samp{x} for hex, or @samp{@var{radix}r} to specify radix @var{radix}.  Case "
"is not significant for the letter that specifies the radix.  Thus, @samp"
"{#b@var{integer}} reads @var{integer} in binary, and @samp{#@var{radix}r@var"
"{integer}} reads @var{integer} in radix @var{radix}.  Allowed values of @var"
"{radix} run from 2 to 36.  For example:"
msgstr ""
"La syntaxe pour des nombres entiers dans les bases autres que la base\n"
"10 utilise @samp{#} suivi d'une lettre qui indique la base: @samp{b}\n"
"pour binaire, @samp{o} pour octal, @samp{x} pour hex, ou\n"
"@samp{@var{base}r} pour indiquer la base @var{base}. Le cas n'est pas\n"
"significatif pour la lettre qui indique la base. Ainsi, le\n"
"@samp{#b@var{integer}} lit @var{integer} en base binaire, et le\n"
"@samp{#@var{base}r@var{integer}} lit @var{integer} dans la base\n"
"@var{base}. Les valeurs permises de @var{base} vont de 2 à 36. Par\n"
"exemple:"

# type: example
#: lispref/numbers.texi:90
#, no-wrap
msgid ""
"#b101100 @result{} 44\n"
"#o54 @result{} 44\n"
"#x2c @result{} 44\n"
"#24r1k @result{} 44\n"
msgstr ""
"#b101100 @result{} 44\n"
"#o54 @result{} 44\n"
"#x2c @result{} 44\n"
"#24r1k @result{} 44\n"

# type: Plain text
#: lispref/numbers.texi:95
msgid ""
"To understand how various functions work on integers, especially the bitwise "
"operators (@pxref{Bitwise Operations}), it is often helpful to view the "
"numbers in their binary form."
msgstr ""
"Pour comprendre comment les diverses fonctions travaillent sur des\n"
"nombres entiers, particulièrement au niveau du bit des opérateurs\n"
"(@pxref{Opérations de bits}), il est souvent utile de regarder les\n"
"nombres sous leur forme binaire."

# type: Plain text
#: lispref/numbers.texi:97
msgid "In 29-bit binary, the decimal integer 5 looks like this:"
msgstr "En 29-bit binaire, le nombre entier décimal 5 ressemble à ceci:"

# type: example
#: lispref/numbers.texi:100
#, no-wrap
msgid "0 0000  0000 0000  0000 0000  0000 0101\n"
msgstr "0 0000  0000 0000  0000 0000  0000 0101\n"

# type: Plain text
#: lispref/numbers.texi:105
msgid ""
"(We have inserted spaces between groups of 4 bits, and two spaces between "
"groups of 8 bits, to make the binary integer easier to read.)"
msgstr ""
"(Nous avons inséré un espace entre les groupes de 4 bits, et deux\n"
"espaces entre les groupes de 8 bits, pour faciliter la lecture du\n"
"nombre entier binaire.)"

# type: Plain text
#: lispref/numbers.texi:107
msgid "The integer @minus{}1 looks like this:"
msgstr "Le nombre entier @minus{}1 ressemble à ceci:"

# type: example
#: lispref/numbers.texi:110
#, no-wrap
msgid "1 1111  1111 1111  1111 1111  1111 1111\n"
msgstr "1 1111  1111 1111  1111 1111  1111 1111\n"

# type: cindex
#: lispref/numbers.texi:113
#, no-wrap
msgid "two's complement"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:116
msgid ""
"@minus{}1 is represented as 29 ones.  (This is called @dfn{two's complement} "
"notation.)"
msgstr ""
"@minus{}1 est représenté en tant que 29 unités. (Ceci s'appelle la\n"
"notation @dfn{two's complement}.)"

# type: Plain text
#: lispref/numbers.texi:120
msgid ""
"The negative integer, @minus{}5, is creating by subtracting 4 from @minus{}"
"1.  In binary, the decimal integer 4 is 100.  Consequently, @minus{}5 looks "
"like this:"
msgstr ""
"Le nombre entier négatif, @minus{}5, est créé en soustrayant 4 de\n"
"@minus{}1. Dans la base binaire, le nombre entier décimal 4 est\n"
"100. En conséquence, @minus{}5 ressemble à ceci:"

# type: example
#: lispref/numbers.texi:123
#, no-wrap
msgid "1 1111  1111 1111  1111 1111  1111 1011\n"
msgstr "1 1111  1111 1111  1111 1111  1111 1011\n"

# type: Plain text
#: lispref/numbers.texi:127
msgid ""
"In this implementation, the largest 29-bit binary integer value is "
"268,435,455 in decimal.  In binary, it looks like this:"
msgstr ""
"Dans cette exemple, la plus grande valeur de nombre entier binaire de\n"
"29 bits est 268 435 455 en décimale. En binaire, elle ressemble à\n"
"ceci:"

# type: example
#: lispref/numbers.texi:130
#, no-wrap
msgid "0 1111  1111 1111  1111 1111  1111 1111\n"
msgstr "0 1111  1111 1111  1111 1111  1111 1111\n"

# type: Plain text
#: lispref/numbers.texi:135
msgid ""
"Since the arithmetic functions do not check whether integers go outside "
"their range, when you add 1 to 268,435,455, the value is the negative "
"integer @minus{}268,435,456:"
msgstr ""
"Puisque les fonctions arithmétiques ne vérifient pas si les nombres\n"
"entiers ne sont pas à l'extérieur de leur champ, quand vous\n"
"additionnez 1 à 268 435 455, la valeur est le nombre entier négatif\n"
"@minus{}268 435 456:"

# type: example
#: lispref/numbers.texi:140
#, no-wrap
msgid ""
"(+ 1 268435455)\n"
"     @result{} -268435456\n"
"     @result{} 1 0000  0000 0000  0000 0000  0000 0000\n"
msgstr ""
"(+ 1 268435455)\n"
"     @result{} -268435456\n"
"     @result{} 1 0000  0000 0000  0000 0000  0000 0000\n"

# type: Plain text
#: lispref/numbers.texi:147
msgid ""
"Many of the functions described in this chapter accept markers for arguments "
"in place of numbers.  (@xref{Markers}.)  Since the actual arguments to such "
"functions may be either numbers or markers, we often give these arguments "
"the name @var{number-or-marker}.  When the argument value is a marker, its "
"position value is used and its buffer is ignored."
msgstr ""
"Plusieurs des fonctions décrites dans ce chapitre acceptent des\n"
"marqueurs commes arguments au lieu des nombres. (@xref{Markers}.)\n"
"Puisque les arguments réels à de telles fonctions peuvent être des\n"
"nombres ou des marqueurs, nous donnons souvent à ces arguments le nom\n"
"de @var{number-or-marker}. Quand la valeur d'argument est un marqueur,\n"
"sa valeur de position est employée et son tampon est ignoré."

# type: defvar
#: lispref/numbers.texi:148
#, no-wrap
msgid "most-positive-fixnum"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:151
msgid ""
"The value of this variable is the largest integer that Emacs Lisp can handle."
msgstr ""
"La valeur de cette variable est le plus grand nombre entier que Emacs\n"
"Lisp peut manipuler."

# type: defvar
#: lispref/numbers.texi:153
#, no-wrap
msgid "most-negative-fixnum"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:156
msgid ""
"The value of this variable is the smallest integer that Emacs Lisp can "
"handle.  It is negative."
msgstr ""
"La valeur de cette variable est le plus petit nombre entier que Emacs\n"
"Lisp peut manipuler. Elle est négative."

# type: section
#: lispref/numbers.texi:159
#, no-wrap
msgid "Floating Point Basics"
msgstr "Nombres à virgule flottante basiques"

# type: Plain text
#: lispref/numbers.texi:165
msgid ""
"Floating point numbers are useful for representing numbers that are not "
"integral.  The precise range of floating point numbers is machine-specific; "
"it is the same as the range of the C data type @code{double} on the machine "
"you are using."
msgstr ""
"Les nombres à virgule flottante sont utiles pour la représentation des\n"
"nombres qui ne sont pas intégraux. Le champ précis des nombres à\n"
"virgule flottante est propre à la machine; c'est pareil que le champ\n"
"du type de données de C @code{double} sur la machine que vous\n"
"employée."

# type: Plain text
#: lispref/numbers.texi:172
msgid ""
"The read-syntax for floating point numbers requires either a decimal point "
"(with at least one digit following), an exponent, or both.  For example, "
"@samp{1500.0}, @samp{15e2}, @samp{15.0e2}, @samp{1.5e3}, and @samp{.15e4} "
"are five ways of writing a floating point number whose value is 1500.  They "
"are all equivalent.  You can also use a minus sign to write negative "
"floating point numbers, as in @samp{-1.0}."
msgstr ""
"La syntaxe de lecture pour des nombres à virgule flottante exige une\n"
"virgule décimale (avec au moins un chiffre suivant), un exposant, ou\n"
"les deux. Par exemple, @samp{1500.0}, @samp{15e2}, @samp{15.0e2},\n"
"@samp{1.5e3}, et @samp{.15e4} sont cinq manières d'écrire le nombre à\n"
"virgule flottante dont la valeur est 1500. Ils sont tous\n"
"équivalents. Vous pouvez également employer un signe moins pour écrire\n"
"des nombres négatifs à virgule flottante, comme dans @samp{- 1.0}."

# type: cindex
#: lispref/numbers.texi:173
#, no-wrap
msgid "@acronym{IEEE} floating point"
msgstr ""

# type: item
#: lispref/numbers.texi:174 lispref/numbers.texi:191
#, no-wrap
msgid "positive infinity"
msgstr ""

# type: item
#: lispref/numbers.texi:175 lispref/numbers.texi:193
#, no-wrap
msgid "negative infinity"
msgstr ""

# type: cindex
#: lispref/numbers.texi:176
#, no-wrap
msgid "infinity"
msgstr ""

# type: cindex
#: lispref/numbers.texi:177
#, no-wrap
msgid "NaN"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:189
msgid ""
"Most modern computers support the @acronym{IEEE} floating point standard, "
"which provides for positive infinity and negative infinity as floating point "
"values.  It also provides for a class of values called NaN or ``not-a-"
"number''; numerical functions return such values in cases where there is no "
"correct answer.  For example, @code{(/ 0.0 0.0)} returns a NaN.  For "
"practical purposes, there's no significant difference between different NaN "
"values in Emacs Lisp, and there's no rule for precisely which NaN value "
"should be used in a particular case, so Emacs Lisp doesn't try to "
"distinguish them (but it does report the sign, if you print it).  Here are "
"the read syntaxes for these special floating point values:"
msgstr ""
"La plupart des ordinateurs modernes soutiennent la norme à virgule\n"
"flottante @acronym{IEEE}, qui prévoit plus l'infini et moins l'infini\n"
"comme valeurs à virgule flottante. Elle prévoit également une classe\n"
"de valeurs appelées NaN ou ``not-a-number''; les fonctions numériques\n"
"renvoient de telles valeurs dans les cas où il n'y a aucune réponse\n"
"correcte. Par exemple, @code{(/ 0.0 0.0)} renvoie NaN. Pour des buts\n"
"pratiques, il n'y a aucune différence significative entre différentes\n"
"valeurs de NaN en Emacs Lisp, et il n'y a aucune règle pour la valeur\n"
"NaN à utiliser dans un cas particulier, ainsi Emacs Lisp n'essaye pas\n"
"de les distinguer (mais rapporte le signal, si vous l'affichez). Voici\n"
"les syntaxes lues pour ces valeurs à virgule flottante spéciales:"

# type: samp{#1}
#: lispref/numbers.texi:193
msgid "1.0e+INF"
msgstr "1.0e+INF"

# type: samp{#1}
#: lispref/numbers.texi:195
msgid "-1.0e+INF"
msgstr "-1.0e+INF"

# type: item
#: lispref/numbers.texi:195
#, no-wrap
msgid "Not-a-number"
msgstr ""

# type: table
#: lispref/numbers.texi:197
msgid "@samp{0.0e+NaN} or @samp{-0.0e+NaN}."
msgstr "@samp{0.0e+NaN} ou @samp{-0.0e+NaN}."

# type: Plain text
#: lispref/numbers.texi:202
msgid ""
"To test whether a floating point value is a NaN, compare it with itself "
"using @code{=}.  That returns @code{nil} for a NaN, and @code{t} for any "
"other floating point value."
msgstr ""
"Pour examiner si une valeur à virgule flottante est NaN, le comparer à\n"
"lui-même en employant @code{=}. Il renvoie @code{nil} pour NaN, et\n"
"@code{t} pour n'importe quelle autre valeur à virgule flottante."

# type: Plain text
#: lispref/numbers.texi:206
msgid ""
"The value @code{-0.0} is distinguishable from ordinary zero in @acronym"
"{IEEE} floating point, but Emacs Lisp @code{equal} and @code{=} consider "
"them equal values."
msgstr ""
"La valeur @code{-0.0} est distinguable de l'ordinaire zéro dans la\n"
"virgule flottante de @acronym{IEEE}, mais l'Emacs Lisp @code{equal} et\n"
"@code{=} les considèrent comme valeurs égales."

# type: Plain text
#: lispref/numbers.texi:209
msgid ""
"You can use @code{logb} to extract the binary exponent of a floating point "
"number (or estimate the logarithm of an integer):"
msgstr ""
"Vous pouvez employer @code{logb} pour extraire l'exposant binaire d'un\n"
"nombre à virgule flottante (ou estimer le logarithme d'un nombre\n"
"entier):"

# type: defun
#: lispref/numbers.texi:210
#, no-wrap
msgid "logb number"
msgstr "logb number"

# type: Plain text
#: lispref/numbers.texi:214
msgid ""
"This function returns the binary exponent of @var{number}.  More precisely, "
"the value is the logarithm of @var{number} base 2, rounded down to an "
"integer."
msgstr ""
"Cette fonction renvoie l'exposant binaire de @var{number}. Plus\n"
"précisément, la valeur est le logarithme de @var{number} en base 2,\n"
"arrondie vers le bas à un nombre entier."

# type: example
#: lispref/numbers.texi:220
#, no-wrap
msgid ""
"(logb 10)\n"
"     @result{} 3\n"
"(logb 10.0e20)\n"
"     @result{} 69\n"
msgstr ""

# type: section
#: lispref/numbers.texi:224
#, no-wrap
msgid "Type Predicates for Numbers"
msgstr "Type d'attributs des nombres"

# type: cindex
#: lispref/numbers.texi:225
#, no-wrap
msgid "predicates for numbers"
msgstr "attributs des nombres"

# type: Plain text
#: lispref/numbers.texi:233
msgid ""
"The functions in this section test for numbers, or for a specific type of "
"number.  The functions @code{integerp} and @code{floatp} can take any type "
"of Lisp object as argument (they would not be of much use otherwise), but "
"the @code{zerop} predicate requires a number as its argument.  See also @code"
"{integer-or-marker-p} and @code{number-or-marker-p}, in @ref{Predicates on "
"Markers}."
msgstr ""
"Les fonctions dans cette section testent les nombres, ou un type\n"
"spécifique de nombre. Les fonctions @code{integerp} et @code{floatp}\n"
"peuvent prendre n'importe quel type d'objet de Lisp comme argument\n"
"(ils ne seraient pas utiles autrement), mais l'attribut @code{zerop}\n"
"exige un nombre en tant qu'argument. Voir également\n"
"@code{integer-or-marker-p} et @code{number-ou-marker-p}, dans le\n"
"@ref{Predicates on Markers}."

# type: defun
#: lispref/numbers.texi:234
#, no-wrap
msgid "floatp object"
msgstr "floatp object"

# type: Plain text
#: lispref/numbers.texi:237
msgid ""
"This predicate tests whether its argument is a floating point number and "
"returns @code{t} if so, @code{nil} otherwise."
msgstr ""
"Cet attribut examine si son argument est un nombre à virgule flottante\n"
"et renvoie @code{t} si oui, @code{nil} autrement."

# type: Plain text
#: lispref/numbers.texi:239
msgid "@code{floatp} does not exist in Emacs versions 18 and earlier."
msgstr ""
"@code{floatp} n'existe pas dans les versions 18 et précédentes\n"
"d'Emacs."

# type: cindex
#: lispref/numbers.texi:241
#, no-wrap
msgid "integerp object"
msgstr "integerp object"

# type: Plain text
#: lispref/numbers.texi:244
msgid ""
"This predicate tests whether its argument is an integer, and returns @code"
"{t} if so, @code{nil} otherwise."
msgstr ""
"Cet attribut examine si son argument est un nombre entier, et renvoie\n"
"le @code{t} si oui, @code{nil} autrement."

# type: defun
#: lispref/numbers.texi:246
#, no-wrap
msgid "numberp object"
msgstr "numberp object"

# type: Plain text
#: lispref/numbers.texi:249
msgid ""
"This predicate tests whether its argument is a number (either integer or "
"floating point), and returns @code{t} if so, @code{nil} otherwise."
msgstr ""
"Cet attribut examine si son argument est un nombre (nombre entier ou\n"
"virgule flottante), et renvoie le @code{t} si oui, @code{nil}\n"
"autrement."

# type: Plain text
#: lispref/numbers.texi:251
#, no-wrap
msgid "wholenump object"
msgstr "wholenump object"

# type: cindex
#: lispref/numbers.texi:252
#, no-wrap
msgid "natural numbers"
msgstr "nombres naturels"

# type: Plain text
#: lispref/numbers.texi:257
msgid ""
"The @code{wholenump} predicate (whose name comes from the phrase ``whole-"
"number-p'') tests to see whether its argument is a nonnegative integer, and "
"returns @code{t} if so, @code{nil} otherwise.  0 is considered non-negative."
msgstr ""
"L'attribut @code{wholenump} (dont le nom vient de l'expression\n"
"``whole-number-p'') teste pour voir si son argument est un nombre\n"
"entier non négatif, et renvoie le @code{t} si oui, @code{nil}\n"
"autrement. 0 est considéré non négatif."

# type: findex
#: lispref/numbers.texi:258
#, no-wrap
msgid "natnump"
msgstr "natnump"

# type: defun
#: lispref/numbers.texi:260
msgid "@code{natnump} is an obsolete synonym for @code{wholenump}."
msgstr ""

# type: defun
#: lispref/numbers.texi:262
#, no-wrap
msgid "zerop number"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:265
msgid ""
"This predicate tests whether its argument is zero, and returns @code{t} if "
"so, @code{nil} otherwise.  The argument must be a number."
msgstr ""
"Cet attribut examine si son argument est zéro, et renvoie @code{t} si\n"
"oui, @code{nil} autrement. L'argument doit être un nombre."

# type: Plain text
#: lispref/numbers.texi:267
msgid "@code{(zerop x)} is equivalent to @code{(= x 0)}."
msgstr "@code{(zerop x)} est équivalent à @code{(= x 0)}."

# type: cindex
#: lispref/numbers.texi:271
#, no-wrap
msgid "number comparison"
msgstr ""

# type: cindex
#: lispref/numbers.texi:272
#, no-wrap
msgid "comparing numbers"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:280
msgid ""
"To test numbers for numerical equality, you should normally use @code{=}, "
"not @code{eq}.  There can be many distinct floating point number objects "
"with the same numeric value.  If you use @code{eq} to compare them, then you "
"test whether two values are the same @emph{object}.  By contrast, @code{=} "
"compares only the numeric values of the objects."
msgstr ""
"Pour tester l'égalité numérique des nombres, vous devriez normalement\n"
"employer @code{=}, pas @code{eq}. Il peut y avoir beaucoup d'objets\n"
"distincts de nombre à virgule flottante avec la même valeur\n"
"numérique. Si vous employez @code{eq} pour les comparer, vous testez\n"
"si deux valeurs sont des @emph{objets} identiques. En revanche,\n"
"@code{=} compare seulement les valeurs numériques des objets."

# type: Plain text
#: lispref/numbers.texi:290
msgid ""
"At present, each integer value has a unique Lisp object in Emacs Lisp.  "
"Therefore, @code{eq} is equivalent to @code{=} where integers are "
"concerned.  It is sometimes convenient to use @code{eq} for comparing an "
"unknown value with an integer, because @code{eq} does not report an error if "
"the unknown value is not a number---it accepts arguments of any type.  By "
"contrast, @code{=} signals an error if the arguments are not numbers or "
"markers.  However, it is a good idea to use @code{=} if you can, even for "
"comparing integers, just in case we change the representation of integers in "
"a future Emacs version."
msgstr ""
"Actuellement, chaque valeur de nombre entier a un objet unique de Lisp\n"
"dans Emacs Lisp. Par conséquent, @code{eq} est équivalent au @code{=}\n"
"quand des nombres entiers sont concernés. Il est parfois commode\n"
"d'employer @code{eq} pour comparer une valeur inconnue à un nombre\n"
"entier, parce que @code{eq} ne rapporte pas d'erreur si la valeur\n"
"inconnue n'est pas un nombre---il accepte des arguments de n'importe\n"
"quel type---. En revanche, @code{=} signale une erreur si les\n"
"arguments ne sont pas des nombres ou des marqueurs. Cependant, c'est\n"
"une bonne idée d'employer @code{=} si vous le pouvez, même pour\n"
"comparer des nombres entiers, juste au cas où nous changerions la\n"
"représentation des nombres entiers dans une future version d'Emacs."

# type: Plain text
#: lispref/numbers.texi:296
msgid ""
"Sometimes it is useful to compare numbers with @code{equal}; it treats two "
"numbers as equal if they have the same data type (both integers, or both "
"floating point) and the same value.  By contrast, @code{=} can treat an "
"integer and a floating point number as equal.  @xref{Equality Predicates}."
msgstr ""
"Parfois il est utile de comparer des nombres avec @code{equal}; les\n"
"deux nombres sont traités comme égaux s'ils ont le même type de\n"
"données (les deux sont des nombres entiers, ou à virgule flottante) et\n"
"la même valeur. En revanche, @code{=} peut traiter un nombre entier et\n"
"un nombre à virgule flottante en tant qu'égaux. @xref{Equality\n"
"Predicates}."

# type: Plain text
#: lispref/numbers.texi:301
msgid ""
"There is another wrinkle: because floating point arithmetic is not exact, it "
"is often a bad idea to check for equality of two floating point values.  "
"Usually it is better to test for approximate equality.  Here's a function to "
"do this:"
msgstr ""
"Il y a un autre problème: parce que l'arithmétique de virgule\n"
"flottante n'est pas exacte, c'est souvent une mauvaise idée de\n"
"vérifier l'égalité de deux valeurs à virgule flottante. Habituellement\n"
"il vaut mieux déterminer l'égalité approximative. Voici une fonction\n"
"pour faire ceci:"

# type: example
#: lispref/numbers.texi:309
#, no-wrap
msgid ""
"(defvar fuzz-factor 1.0e-6)\n"
"(defun approx-equal (x y)\n"
"  (or (and (= x 0) (= y 0))\n"
"      (< (/ (abs (- x y))\n"
"            (max (abs x) (abs y)))\n"
"         fuzz-factor)))\n"
msgstr ""
"(defvar fuzz-factor 1.0e-6)\n"
"(defun approx-equal (x y)\n"
"  (or (and (= x 0) (= y 0))\n"
"      (< (/ (abs (- x y))\n"
"            (max (abs x) (abs y)))\n"
"         fuzz-factor)))\n"

# type: cindex
#: lispref/numbers.texi:311
#, no-wrap
msgid "CL note---integers vrs @code{eq}"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:318
msgid ""
"@b{Common Lisp note:} Comparing numbers in Common Lisp always requires @code"
"{=} because Common Lisp implements multi-word integers, and two distinct "
"integer objects can have the same numeric value.  Emacs Lisp can have just "
"one integer object for any given value because it has a limited range of "
"integer values."
msgstr ""
"@b{Common Lisp note:} Comparer des nombres en Common Lisp exige\n"
"toujours @code{=} parce que le Common Lisp met en application des\n"
"nombres entiers pluritermes, et deux objets distincts de nombre entier\n"
"peuvent avoir la même valeur numérique. L'Emacs Lisp peut avoir juste\n"
"un objet de nombre entier pour n'importe quelle valeur donnée parce\n"
"qu'il a un champ limité des valeurs de nombre entier."

# type: defun
#: lispref/numbers.texi:320
#, no-wrap
msgid "= number-or-marker1 number-or-marker2"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:323
msgid ""
"This function tests whether its arguments are numerically equal, and returns "
"@code{t} if so, @code{nil} otherwise."
msgstr ""
"Cette fonction teste si ses arguments sont numériquement égaux, et\n"
"renvoie le @code{t} si oui, @code{nil} autrement."

# type: defun
#: lispref/numbers.texi:325
#, no-wrap
msgid "eql value1 value2"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:330
msgid ""
"This function acts like @code{eq} except when both arguments are numbers.  "
"It compares numbers by type and numeric value, so that @code{(eql 1.0 1)} "
"returns @code{nil}, but @code{(eql 1.0 1.0)} and @code{(eql 1 1)} both "
"return @code{t}."
msgstr ""
"Cette fonction agit comme @code{eq} sauf quand les deux arguments sont\n"
"des nombres. Elle compare des nombres par le type et la valeur\n"
"numérique, de sorte que @code{(eql 1.0 1)} renvoie le @code{nil}, mais\n"
"@code{(eql 1.0 1.0)} et @code{(eql 1 1)} renvoient tous les deux le\n"
"@code{t}."

# type: defun
#: lispref/numbers.texi:332
#, no-wrap
msgid "/= number-or-marker1 number-or-marker2"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:335
msgid ""
"This function tests whether its arguments are numerically equal, and returns "
"@code{t} if they are not, and @code{nil} if they are."
msgstr ""
"Cette fonction teste si ses arguments sont numériquement égaux, et\n"
"renvoie @code{t} s'ils ne sont pas égaux, et @code{nil} s'ils sont\n"
"égaux."

# type: defun
#: lispref/numbers.texi:337
#, no-wrap
msgid "<  number-or-marker1 number-or-marker2"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:340
msgid ""
"This function tests whether its first argument is strictly less than its "
"second argument.  It returns @code{t} if so, @code{nil} otherwise."
msgstr ""
"Cette fonction teste si son premier argument est strictement moins\n"
"grand que son deuxième argument. Elle renvoie @code{t} si oui,\n"
"@code{nil} autrement."

# type: defun
#: lispref/numbers.texi:342
#, no-wrap
msgid "<=  number-or-marker1 number-or-marker2"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:346
msgid ""
"This function tests whether its first argument is less than or equal to its "
"second argument.  It returns @code{t} if so, @code{nil} otherwise."
msgstr ""
"Cette fonction teste si son premier argument est inférieur ou égal à\n"
"son deuxième argument. Elle renvoie @code{t} si oui, @code{nil}\n"
"autrement."

# type: defun
#: lispref/numbers.texi:348
#, no-wrap
msgid ">  number-or-marker1 number-or-marker2"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:352
msgid ""
"This function tests whether its first argument is strictly greater than its "
"second argument.  It returns @code{t} if so, @code{nil} otherwise."
msgstr ""
"Cette fonction teste si son premier argument est strictement plus\n"
"grand que son deuxième argument. Elle renvoie @code{t} si oui,\n"
"@code{nil} autrement."

# type: defun
#: lispref/numbers.texi:354
#, no-wrap
msgid ">=  number-or-marker1 number-or-marker2"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:358
msgid ""
"This function tests whether its first argument is greater than or equal to "
"its second argument.  It returns @code{t} if so, @code{nil} otherwise."
msgstr ""
"Cette fonction teste si son premier argument est supérieur ou égal à\n"
"son deuxième argument. Il renvoie @code{t} si oui, @code{nil}\n"
"autrement."

# type: Plain text
#: lispref/numbers.texi:360
#, no-wrap
msgid "max number-or-marker &rest numbers-or-markers"
msgstr "max number-or-marker &rest numbers-or-markers"

# type: Plain text
#: lispref/numbers.texi:364
msgid ""
"This function returns the largest of its arguments.  If any of the arguments "
"is floating-point, the value is returned as floating point, even if it was "
"given as an integer."
msgstr ""
"Cette fonction renvoie le plus grand de ses arguments. Si l'un des\n"
"arguments est à virgule flottante, la valeur est retournée à virgule\n"
"flottante, même si elle était donnée comme nombre entier."

# type: example
#: lispref/numbers.texi:372
#, no-wrap
msgid ""
"(max 20)\n"
"     @result{} 20\n"
"(max 1 2.5)\n"
"     @result{} 2.5\n"
"(max 1 3 2.5)\n"
"     @result{} 3.0\n"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:375
#, no-wrap
msgid "min number-or-marker &rest numbers-or-markers"
msgstr "min number-or-marker &rest numbers-or-markers"

# type: Plain text
#: lispref/numbers.texi:379
msgid ""
"This function returns the smallest of its arguments.  If any of the "
"arguments is floating-point, the value is returned as floating point, even "
"if it was given as an integer."
msgstr ""
"Cette fonction renvoie le plus petit de ses arguments. Si l'un des\n"
"arguments est à virgule flottante, la valeur est retournée à virgule\n"
"flottante, même si elle était donnée comme nombre entier."

# type: example
#: lispref/numbers.texi:383
#, no-wrap
msgid ""
"(min -4 1)\n"
"     @result{} -4\n"
msgstr ""
"(min -4 1)\n"
"     @result{} -4\n"

# type: cindex
#: lispref/numbers.texi:386
#, no-wrap
msgid "abs number"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:388
msgid "This function returns the absolute value of @var{number}."
msgstr "Cette fonction renvoie la valeur absolue de @var{number}."

# type: cindex
#: lispref/numbers.texi:392
#, no-wrap
msgid "rounding in conversions"
msgstr ""

# type: cindex
#: lispref/numbers.texi:393
#, no-wrap
msgid "number conversions"
msgstr ""

# type: cindex
#: lispref/numbers.texi:394
#, no-wrap
msgid "converting numbers"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:397
msgid "To convert an integer to floating point, use the function @code{float}."
msgstr ""
"Pour convertir un nombre entier en un nombre à virgule flottante,\n"
"employez la fonction @code{float}."

# type: cindex
#: lispref/numbers.texi:398
#, no-wrap
msgid "float number"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:402
msgid ""
"This returns @var{number} converted to floating point.  If @var{number} is "
"already a floating point number, @code{float} returns it unchanged."
msgstr ""
"Ceci renvoie @var{number} converti en un nombre à virgule\n"
"flottante. Si @var{number} est déjà un nombre à virgule flottante,\n"
"@code{float} le renvoie sans changement."

# type: Plain text
#: lispref/numbers.texi:413
msgid ""
"There are four functions to convert floating point numbers to integers; they "
"differ in how they round.  All accept an argument @var{number} and an "
"optional argument @var{divisor}.  Both arguments may be integers or floating "
"point numbers.  @var{divisor} may also be @code{nil}.  If @var{divisor} is "
"@code{nil} or omitted, these functions convert @var{number} to an integer, "
"or return it unchanged if it already is an integer.  If @var{divisor} is non-"
"@code{nil}, they divide @var{number} by @var{divisor} and convert the result "
"to an integer.  An @code{arith-error} results if @var{divisor} is 0."
msgstr ""
"Il y a quatre fonctions pour convertir des nombres à virgule flottante\n"
"en nombres entiers; ils diffèrent dans la façon dont ils\n"
"arrondissent. Tous acceptent un argument @var{number} et un argument\n"
"facultatif @var{divisor}. Les deux arguments peuvent être des nombres\n"
"entiers ou des nombres à virgule flottante. @var{divisor} peut\n"
"également être @code{nil}. Si @var{divisor} est @code{nil} ou omis,\n"
"ces fonctions convertissent @var{number} en nombre entier, ou le\n"
"renvoient sans changement si c'est déjà un nombre entier. Si\n"
"@var{divisor} est non-@code{nil}, elles divisent @var{number} par\n"
"@var{divisor} et convertissent le résultat en nombre entier. Un\n"
"@code{arith-error} en résulte si @var{divisor} est 0."

# type: defun
#: lispref/numbers.texi:414
#, no-wrap
msgid "truncate number &optional divisor"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:417
msgid ""
"This returns @var{number}, converted to an integer by rounding towards zero."
msgstr ""
"Ceci renvoie @var{number}, converti en nombre entier arrondis vers zéro."

# type: example
#: lispref/numbers.texi:427
#, no-wrap
msgid ""
"(truncate 1.2)\n"
"     @result{} 1\n"
"(truncate 1.7)\n"
"     @result{} 1\n"
"(truncate -1.2)\n"
"     @result{} -1\n"
"(truncate -1.7)\n"
"     @result{} -1\n"
msgstr ""
"(truncate 1.2)\n"
"     @result{} 1\n"
"(truncate 1.7)\n"
"     @result{} 1\n"
"(truncate -1.2)\n"
"     @result{} -1\n"
"(truncate -1.7)\n"
"     @result{} -1\n"

# type: defun
#: lispref/numbers.texi:430
#, no-wrap
msgid "floor number &optional divisor"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:433
msgid ""
"This returns @var{number}, converted to an integer by rounding downward "
"(towards negative infinity)."
msgstr ""
"Ceci renvoie @var{number}, converti en nombre entier en arrondissant\n"
"en bas (vers moins l'infini)."

# type: Plain text
#: lispref/numbers.texi:436
msgid ""
"If @var{divisor} is specified, this uses the kind of division operation that "
"corresponds to @code{mod}, rounding downward."
msgstr ""
"Si @var{divisor} est indiqué, ceci utilise le genre d'opération de\n"
"division qui correspond à @code{mod}, arrondissant en bas."

# type: example
#: lispref/numbers.texi:448
#, no-wrap
msgid ""
"(floor 1.2)\n"
"     @result{} 1\n"
"(floor 1.7)\n"
"     @result{} 1\n"
"(floor -1.2)\n"
"     @result{} -2\n"
"(floor -1.7)\n"
"     @result{} -2\n"
"(floor 5.99 3)\n"
"     @result{} 1\n"
msgstr ""
"(floor 1.2)\n"
"     @result{} 1\n"
"(floor 1.7)\n"
"     @result{} 1\n"
"(floor -1.2)\n"
"     @result{} -2\n"
"(floor -1.7)\n"
"     @result{} -2\n"
"(floor 5.99 3)\n"
"     @result{} 1\n"

# type: defun
#: lispref/numbers.texi:451
#, no-wrap
msgid "ceiling number &optional divisor"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:454
msgid ""
"This returns @var{number}, converted to an integer by rounding upward "
"(towards positive infinity)."
msgstr ""
"Ceci renvoie @var{number}, converti en nombre entier en arrondissant\n"
"vers le haut (vers plus l'infini)."

# type: example
#: lispref/numbers.texi:464
#, no-wrap
msgid ""
"(ceiling 1.2)\n"
"     @result{} 2\n"
"(ceiling 1.7)\n"
"     @result{} 2\n"
"(ceiling -1.2)\n"
"     @result{} -1\n"
"(ceiling -1.7)\n"
"     @result{} -1\n"
msgstr ""
"(ceiling 1.2)\n"
"     @result{} 2\n"
"(ceiling 1.7)\n"
"     @result{} 2\n"
"(ceiling -1.2)\n"
"     @result{} -1\n"
"(ceiling -1.7)\n"
"     @result{} -1\n"

# type: defun
#: lispref/numbers.texi:467
#, no-wrap
msgid "round number &optional divisor"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:472
msgid ""
"This returns @var{number}, converted to an integer by rounding towards the "
"nearest integer.  Rounding a value equidistant between two integers may "
"choose the integer closer to zero, or it may prefer an even integer, "
"depending on your machine."
msgstr ""
"Ceci renvoie @var{number}, converti en nombre entier arrondi vers le\n"
"nombre entier le plus proche. L'arrondi d'une valeur équidistante\n"
"entre deux nombres entiers peut choisir le nombre entier plus près de\n"
"zéro, ou il peut préférer un nombre entier équivalent, selon votre\n"
"machine."

# type: example
#: lispref/numbers.texi:482
#, no-wrap
msgid ""
"(round 1.2)\n"
"     @result{} 1\n"
"(round 1.7)\n"
"     @result{} 2\n"
"(round -1.2)\n"
"     @result{} -1\n"
"(round -1.7)\n"
"     @result{} -2\n"
msgstr ""
"(round 1.2)\n"
"     @result{} 1\n"
"(round 1.7)\n"
"     @result{} 2\n"
"(round -1.2)\n"
"     @result{} -1\n"
"(round -1.7)\n"
"     @result{} -2\n"

# type: cindex
#: lispref/numbers.texi:487
#, no-wrap
msgid "arithmetic operations"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:494
msgid ""
"Emacs Lisp provides the traditional four arithmetic operations: addition, "
"subtraction, multiplication, and division.  Remainder and modulus functions "
"supplement the division functions.  The functions to add or subtract 1 are "
"provided because they are traditional in Lisp and commonly used."
msgstr ""
"Le Emacs Lisp fournit les quatre opérations arithmétiques\n"
"traditionnelles: addition, soustraction, multiplication et division.\n"
"Les fonctions de reste et de modulo complètent les fonctions de\n"
"division. Les fonctions additionner ou soustraire 1 sont fournis parce\n"
"qu'elles sont traditionnelles en Lisp et utilisées généralement."

# type: Plain text
#: lispref/numbers.texi:497
msgid ""
"All of these functions except @code{%} return a floating point value if any "
"argument is floating."
msgstr ""
"Toutes ces fonctions, à part @code{%}, retourne une valeur à virgule\n"
"flottante si au moins un argument est une valeur à virgule flottante."

# type: Plain text
#: lispref/numbers.texi:501
msgid ""
"It is important to note that in Emacs Lisp, arithmetic functions do not "
"check for overflow.  Thus @code{(1+ 268435455)} may evaluate to @minus{}"
"268435456, depending on your hardware."
msgstr ""
"Il est important de noter qu'en Emacs Lisp, les fonctions\n"
"arithmétiques ne vérifient pas le débordement. Ainsi @code{(1+\n"
"268435455)} peut être évaluer à @minus{}268435456, selon votre\n"
"matériel."

# type: defun
#: lispref/numbers.texi:502
#, no-wrap
msgid "1+ number-or-marker"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:505
msgid "This function returns @var{number-or-marker} plus 1.  For example,"
msgstr "Cette fonction renvoie @var{number-or-marker} plus 1. Par exemple,"

# type: example
#: lispref/numbers.texi:511
#, no-wrap
msgid ""
"(setq foo 4)\n"
"     @result{} 4\n"
"(1+ foo)\n"
"     @result{} 5\n"
msgstr ""
"(setq foo 4)\n"
"     @result{} 4\n"
"(1+ foo)\n"
"     @result{} 5\n"

# type: Plain text
#: lispref/numbers.texi:515
msgid ""
"This function is not analogous to the C operator @code{++}---it does not "
"increment a variable.  It just computes a sum.  Thus, if we continue,"
msgstr ""
"Cette fonction n'est pas analogue à l'opérateur C @code{++} ---elle\n"
"n'incrémente pas une variable---. Elle calcule juste la somme. Ainsi,\n"
"si nous continuons,"

# type: example
#: lispref/numbers.texi:519
#, no-wrap
msgid ""
"foo\n"
"     @result{} 4\n"
msgstr ""
"foo\n"
"     @result{} 4\n"

# type: Plain text
#: lispref/numbers.texi:523
msgid ""
"If you want to increment the variable, you must use @code{setq}, like this:"
msgstr ""
"Si vous voulez incrémenter la variable, vous devez employer\n"
"@code{setq}, comme ceci:"

# type: example
#: lispref/numbers.texi:527
#, no-wrap
msgid ""
"(setq foo (1+ foo))\n"
"     @result{} 5\n"
msgstr ""
"(setq foo (1+ foo))\n"
"     @result{} 5\n"

# type: defun
#: lispref/numbers.texi:530
#, no-wrap
msgid "1- number-or-marker"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:532
msgid "This function returns @var{number-or-marker} minus 1."
msgstr "Cette fonction renvoie @var{number-or-marker} moins 1."

# type: defun
#: lispref/numbers.texi:534
#, no-wrap
msgid "+ &rest numbers-or-markers"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:537
msgid ""
"This function adds its arguments together.  When given no arguments, @code"
"{+} returns 0."
msgstr ""
"Cette fonction fait la somme de ses arguments. Si aucun argument n'est\n"
"donné, @code{+} retourne 0."

# type: example
#: lispref/numbers.texi:545
#, no-wrap
msgid ""
"(+)\n"
"     @result{} 0\n"
"(+ 1)\n"
"     @result{} 1\n"
"(+ 1 2 3 4)\n"
"     @result{} 10\n"
msgstr ""
"(+)\n"
"     @result{} 0\n"
"(+ 1)\n"
"     @result{} 1\n"
"(+ 1 2 3 4)\n"
"     @result{} 10\n"

# type: defun
#: lispref/numbers.texi:548
#, no-wrap
msgid "- &optional number-or-marker &rest more-numbers-or-markers"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:554
msgid ""
"The @code{-} function serves two purposes: negation and subtraction.  When "
"@code{-} has a single argument, the value is the negative of the argument.  "
"When there are multiple arguments, @code{-} subtracts each of the @var{more-"
"numbers-or-markers} from @var{number-or-marker}, cumulatively.  If there are "
"no arguments, the result is 0."
msgstr ""
"La fonction @code{-} atteint deux objectifs: négation et soustraction.\n"
"Quand @code{-} a un argument simple, la valeur est le négatif de\n"
"l'argument. Quand il y a des arguments multiples, @code{-} soustrait\n"
"chacun des @var{more-numbers-or-markers} de @var{number-or-marker}, de\n"
"manière cumulée. S'il n'y a aucun argument, le résultat est 0."

# type: example
#: lispref/numbers.texi:562
#, no-wrap
msgid ""
"(- 10 1 2 3 4)\n"
"     @result{} 0\n"
"(- 10)\n"
"     @result{} -10\n"
"(-)\n"
"     @result{} 0\n"
msgstr ""
"(- 10 1 2 3 4)\n"
"     @result{} 0\n"
"(- 10)\n"
"     @result{} -10\n"
"(-)\n"
"     @result{} 0\n"

# type: defun
#: lispref/numbers.texi:565
#, no-wrap
msgid "* &rest numbers-or-markers"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:568
msgid ""
"This function multiplies its arguments together, and returns the product.  "
"When given no arguments, @code{*} returns 1."
msgstr ""
"Cette fonction multiplie ses arguments entre elles, et renvoie le\n"
"produit. Si aucun argument n'est donné, @code{*} retourne 1."

# type: example
#: lispref/numbers.texi:576
#, no-wrap
msgid ""
"(*)\n"
"     @result{} 1\n"
"(* 1)\n"
"     @result{} 1\n"
"(* 1 2 3 4)\n"
"     @result{} 24\n"
msgstr ""
"(*)\n"
"     @result{} 1\n"
"(* 1)\n"
"     @result{} 1\n"
"(* 1 2 3 4)\n"
"     @result{} 24\n"

# type: Plain text
#: lispref/numbers.texi:579
#, no-wrap
msgid "/ dividend divisor &rest divisors"
msgstr "/ dividend divisor &rest divisors"

# type: Plain text
#: lispref/numbers.texi:584
msgid ""
"This function divides @var{dividend} by @var{divisor} and returns the "
"quotient.  If there are additional arguments @var{divisors}, then it divides "
"@var{dividend} by each divisor in turn.  Each argument may be a number or a "
"marker."
msgstr ""
"Cette fonction divise @var{dividend} par @var{divisor} et retourne le\n"
"quotient. S'il y a des arguments additionnels @var{divisors}, il\n"
"divise @var{dividend} par chaque diviseur alternativement. Chaque\n"
"argument peut être un nombre ou un marqueur."

# type: Plain text
#: lispref/numbers.texi:592
msgid ""
"If all the arguments are integers, then the result is an integer too.  This "
"means the result has to be rounded.  On most machines, the result is rounded "
"towards zero after each division, but some machines may round differently "
"with negative arguments.  This is because the Lisp function @code{/} is "
"implemented using the C division operator, which also permits machine-"
"dependent rounding.  As a practical matter, all known machines round in the "
"standard fashion."
msgstr ""
"Si tous les arguments sont des nombres entiers, alors le résultat est\n"
"aussi un nombre entier. Ceci signifie que le résultat doit être\n"
"arrondi. Sur la plupart des machines, le résultat est arrondi vers le\n"
"zéro après chaque division, mais quelques machines peuvent arrondir\n"
"différemment les arguments négatifs. C'est parce que la fonction de\n"
"Lisp @code{/} est implémentée en utilisant l'opérateur de division de\n"
"C qui permet l'arrondi en fonction de la machine. Du côté pratique,\n"
"toutes les machines connues arrondissent en mode standard."

# type: cindex
#: lispref/numbers.texi:593
#, no-wrap
msgid "@code{arith-error} in division"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:598
msgid ""
"If you divide an integer by 0, an @code{arith-error} error is signaled.  "
"(@xref{Errors}.)  Floating point division by zero returns either infinity or "
"a NaN if your machine supports @acronym{IEEE} floating point; otherwise, it "
"signals an @code{arith-error} error."
msgstr ""
"Si vous divisez un nombre entier par 0, une erreur @code{arith-error}\n"
"est signalée. (@xref{Errors}.) La division d'un nombre à virgule\n"
"flottante par zéro renvoie l'un ou l'autre infini ou NaN si votre\n"
"machine supporte les nombres à virgule flottante @acronym{IEEE};\n"
"autrement, elle signale une erreur @code{arith-error}."

# type: example
#: lispref/numbers.texi:603
#, no-wrap
msgid ""
"(/ 6 2)\n"
"     @result{} 3\n"
msgstr ""
"(/ 6 2)\n"
"     @result{} 3\n"

# type: example
#: lispref/numbers.texi:614
#, no-wrap
msgid ""
"(/ 5 2)\n"
"     @result{} 2\n"
"(/ 5.0 2)\n"
"     @result{} 2.5\n"
"(/ 5 2.0)\n"
"     @result{} 2.5\n"
"(/ 5.0 2.0)\n"
"     @result{} 2.5\n"
"(/ 25 3 2)\n"
"     @result{} 4\n"
msgstr ""
"(/ 5 2)\n"
"     @result{} 2\n"
"(/ 5.0 2)\n"
"     @result{} 2.5\n"
"(/ 5 2.0)\n"
"     @result{} 2.5\n"
"(/ 5.0 2.0)\n"
"     @result{} 2.5\n"
"(/ 25 3 2)\n"
"     @result{} 4\n"

# type: group
#: lispref/numbers.texi:617
#, no-wrap
msgid ""
"(/ -17 6)\n"
"     @result{} -2   @r{(could in theory be @minus{}3 on some machines)}\n"
msgstr ""
"(/ -17 6)\n"
"     @result{} -2   @r{(pourrait être @minus{}3 sur certaines machines)}\n"

# type: Plain text
#: lispref/numbers.texi:621
#, no-wrap
msgid "% dividend divisor"
msgstr "% dividend divisor"

# type: cindex
#: lispref/numbers.texi:622
#, no-wrap
msgid "remainder"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:625
msgid ""
"This function returns the integer remainder after division of @var{dividend} "
"by @var{divisor}.  The arguments must be integers or markers."
msgstr ""
"Cette fonction renvoie le reste en nombre entier après la division de\n"
"@var{dividend} par @var{divisor}. Les arguments doivent être des\n"
"nombres entiers ou des marqueurs."

# type: Plain text
#: lispref/numbers.texi:628
msgid ""
"For negative arguments, the remainder is in principle machine-dependent "
"since the quotient is; but in practice, all known machines behave alike."
msgstr ""
"Pour des arguments négatifs, le reste est en principe dépendant de la\n"
"machine puisque le quotient est variable; mais dans la pratique,\n"
"toutes les machines connues se comportent de la même façon."

# type: Plain text
#: lispref/numbers.texi:630 lispref/numbers.texi:668
msgid "An @code{arith-error} results if @var{divisor} is 0."
msgstr "Un @code{arith-error} est généré quand @var{divisor} est 0."

# type: example
#: lispref/numbers.texi:640
#, no-wrap
msgid ""
"(% 9 4)\n"
"     @result{} 1\n"
"(% -9 4)\n"
"     @result{} -1\n"
"(% 9 -4)\n"
"     @result{} 1\n"
"(% -9 -4)\n"
"     @result{} -1\n"
msgstr ""
"(% 9 4)\n"
"     @result{} 1\n"
"(% -9 4)\n"
"     @result{} -1\n"
"(% 9 -4)\n"
"     @result{} 1\n"
"(% -9 -4)\n"
"     @result{} -1\n"

# type: Plain text
#: lispref/numbers.texi:643
msgid "For any two integers @var{dividend} and @var{divisor},"
msgstr "Pour deux nombres entiers quelconques @var{dividend} et @var{divisor},"

# type: example
#: lispref/numbers.texi:648
#, no-wrap
msgid ""
"(+ (% @var{dividend} @var{divisor})\n"
"   (* (/ @var{dividend} @var{divisor}) @var{divisor}))\n"
msgstr ""
"(+ (% @var{dividend} @var{divisor})\n"
"   (* (/ @var{dividend} @var{divisor}) @var{divisor}))\n"

# type: Plain text
#: lispref/numbers.texi:653
msgid "always equals @var{dividend}."
msgstr "est toujours égale à @var{dividend}."

# type: Plain text
#: lispref/numbers.texi:655
#, no-wrap
msgid "mod dividend divisor"
msgstr "mod dividend divisor"

# type: cindex
#: lispref/numbers.texi:656
#, no-wrap
msgid "modulus"
msgstr "modulo"

# type: Plain text
#: lispref/numbers.texi:661
msgid ""
"This function returns the value of @var{dividend} modulo @var{divisor}; in "
"other words, the remainder after division of @var{dividend} by @var"
"{divisor}, but with the same sign as @var{divisor}.  The arguments must be "
"numbers or markers."
msgstr ""
"Cette fonction renvoie la valeur de @var{dividend} modulo\n"
"@var{divisor}; en d'autres termes, le reste après la division de\n"
"@var{dividend} par @var{divisor}, mais avec le même signe que\n"
"@var{divisor}. Les arguments doivent être des nombres ou des\n"
"marqueurs."

# type: Plain text
#: lispref/numbers.texi:666
msgid ""
"Unlike @code{%}, @code{mod} returns a well-defined result for negative "
"arguments.  It also permits floating point arguments; it rounds the quotient "
"downward (towards minus infinity) to an integer, and uses that quotient to "
"compute the remainder."
msgstr ""
"À la différence de @code{%}, @code{mod} renvoie un résultat bien\n"
"défini pour les arguments négatifs. Il permet également des arguments\n"
"à virgule flottante; il arrondit le quotient à un nombre entier vers\n"
"le bas (vers moins l'infini), et utilise ce quotient pour calculer le\n"
"reste."

# type: example
#: lispref/numbers.texi:673
#, no-wrap
msgid ""
"(mod 9 4)\n"
"     @result{} 1\n"
msgstr ""
"(mod 9 4)\n"
"     @result{} 1\n"

# type: example
#: lispref/numbers.texi:677
#, no-wrap
msgid ""
"(mod -9 4)\n"
"     @result{} 3\n"
msgstr ""
"(mod -9 4)\n"
"     @result{} 3\n"

# type: example
#: lispref/numbers.texi:681
#, no-wrap
msgid ""
"(mod 9 -4)\n"
"     @result{} -3\n"
msgstr ""
"(mod 9 -4)\n"
"     @result{} -3\n"

# type: example
#: lispref/numbers.texi:685
#, no-wrap
msgid ""
"(mod -9 -4)\n"
"     @result{} -1\n"
msgstr ""
"(mod -9 -4)\n"
"     @result{} -1\n"

# type: example
#: lispref/numbers.texi:689
#, no-wrap
msgid ""
"(mod 5.5 2.5)\n"
"     @result{} .5\n"
msgstr ""
"(mod 5.5 2.5)\n"
"     @result{} .5\n"

# type: Plain text
#: lispref/numbers.texi:693
msgid "For any two numbers @var{dividend} and @var{divisor},"
msgstr "Pour deux nombres quelconques @var{dividend} et @var{divisor},"

# type: example
#: lispref/numbers.texi:698
#, no-wrap
msgid ""
"(+ (mod @var{dividend} @var{divisor})\n"
"   (* (floor @var{dividend} @var{divisor}) @var{divisor}))\n"
msgstr ""
"(+ (mod @var{dividend} @var{divisor})\n"
"   (* (floor @var{dividend} @var{divisor}) @var{divisor}))\n"

# type: Plain text
#: lispref/numbers.texi:705
msgid ""
"always equals @var{dividend}, subject to rounding error if either argument "
"is floating point.  For @code{floor}, see @ref{Numeric Conversions}."
msgstr ""
"est toujours égale à @var{dividend}, sauf si l'un ou l'autre\n"
"argument est un nombre à virgule flottante, une erreur sera\n"
"générée. Pour @code{floor}, voir les @ref{Conversions numériques}."

# type: cindex
#: lispref/numbers.texi:709
#, no-wrap
msgid "rounding without conversion"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:717
msgid ""
"The functions @code{ffloor}, @code{fceiling}, @code{fround}, and @code"
"{ftruncate} take a floating point argument and return a floating point "
"result whose value is a nearby integer.  @code{ffloor} returns the nearest "
"integer below; @code{fceiling}, the nearest integer above; @code{ftruncate}, "
"the nearest integer in the direction towards zero; @code{fround}, the "
"nearest integer."
msgstr ""
"Les fonctions @code{ffloor}, @code{fceiling}, @code{fround}, et\n"
"@code{ftruncate} prennent un argument à virgule flottante et renvoient\n"
"un monbre à virgule flottante représentant la valeur d'un nombre\n"
"entier voisin. @code{ffloor} renvoie le nombre entier le plus proche\n"
"inférieur; @code{fceiling}, le nombre entier le plus proche supérieur;\n"
"@code{ftruncate}, le nombre entier le plus proche de zéro;\n"
"@code{fround}, le nombre entier le plus proche."

# type: defun
#: lispref/numbers.texi:718
#, no-wrap
msgid "ffloor float"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:721
msgid ""
"This function rounds @var{float} to the next lower integral value, and "
"returns that value as a floating point number."
msgstr ""
"Cette fonction arrondit @var{float} à la prochaine valeur intégrale\n"
"inférieure, et renvoie cette valeur comme nombre à virgule flottante."

# type: defun
#: lispref/numbers.texi:723
#, no-wrap
msgid "fceiling float"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:726
msgid ""
"This function rounds @var{float} to the next higher integral value, and "
"returns that value as a floating point number."
msgstr ""
"Cette fonction arrondit @var{float} à la prochaine valeur intégrale\n"
"supérieure, et renvoie cette valeur comme nombre à virgule flottante."

# type: defun
#: lispref/numbers.texi:728
#, no-wrap
msgid "ftruncate float"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:731
msgid ""
"This function rounds @var{float} towards zero to an integral value, and "
"returns that value as a floating point number."
msgstr ""
"Cette fonction arrondit @var{float} à la valeur intégrale proche de\n"
"zéro, et renvoie cette valeur comme nombre à virgule flottante."

# type: defun
#: lispref/numbers.texi:733
#, no-wrap
msgid "fround float"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:736
msgid ""
"This function rounds @var{float} to the nearest integral value, and returns "
"that value as a floating point number."
msgstr ""
"Cette fonction arrondit @var{float} à la valeur intégrale la plus\n"
"proche, et renvoie cette valeur comme nombre de virgule flottante."

# type: section
#: lispref/numbers.texi:739
#, no-wrap
msgid "Bitwise Operations on Integers"
msgstr "Opérations de bits sur les entiers"

# type: cindex
#: lispref/numbers.texi:740
#, no-wrap
msgid "bitwise arithmetic"
msgstr ""

# type: cindex
#: lispref/numbers.texi:741
#, no-wrap
msgid "logical arithmetic"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:748
msgid ""
"In a computer, an integer is represented as a binary number, a sequence of "
"@dfn{bits} (digits which are either zero or one).  A bitwise operation acts "
"on the individual bits of such a sequence.  For example, @dfn{shifting} "
"moves the whole sequence left or right one or more places, reproducing the "
"same pattern ``moved over.''"
msgstr ""
"Dans un ordinateur, un nombre entier est représenté comme nombre\n"
"binaire, une séquence de @dfn{bits} (des chiffres qui sont zéro ou\n"
"un). Une opération de bits agit sur les bits individuels d'une telle\n"
"séquence. Par exemple, le @dfn{shifting} déplace l'ordre entier à\n"
"gauche ou à droite d'une ou plusieures places, pour reproduire le même\n"
"modèle ``moved over.''"

# type: Plain text
#: lispref/numbers.texi:750
msgid "The bitwise operations in Emacs Lisp apply only to integers."
msgstr ""
"Les opérations de bits en Emacs Lisp s'appliquent seulement aux\n"
"nombres entiers."

# type: Plain text
#: lispref/numbers.texi:751
#, no-wrap
msgid "lsh integer1 count"
msgstr "lsh integer1 count"

# type: cindex
#: lispref/numbers.texi:752
#, no-wrap
msgid "logical shift"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:759
msgid ""
"@code{lsh}, which is an abbreviation for @dfn{logical shift}, shifts the "
"bits in @var{integer1} to the left @var{count} places, or to the right if "
"@var{count} is negative, bringing zeros into the vacated bits.  If @var"
"{count} is negative, @code{lsh} shifts zeros into the leftmost (most-"
"significant) bit, producing a positive result even if @var{integer1} is "
"negative.  Contrast this with @code{ash}, below."
msgstr ""
"@code{lsh}, qui est une abréviation de @dfn{logical shift}, décale les\n"
"bits dans @var{integer1} de @var{count} places à gauche, ou vers la\n"
"droite si @var{count} est négatif, introduisant des zéros dans les\n"
"places vacantes des bits. Si @var{count} est négatif, @code{lsh}\n"
"décale les zéros dans l'extrême gauche du bit (plus fort), produisant\n"
"un résultat positif même si @var{integer1} est négatif. Contrairement\n"
"à @code{ash}, ci-dessous."

# type: Plain text
#: lispref/numbers.texi:763
msgid ""
"Here are two examples of @code{lsh}, shifting a pattern of bits one place to "
"the left.  We show only the low-order eight bits of the binary pattern; the "
"rest are all zero."
msgstr ""
"Voici deux exemples de @code{lsh}, décalant une combinaison de\n"
"chiffres binaires d'une place vers la gauche. Nous montrons seulement\n"
"les huit bits faibles du binaire modèle; le reste est fait de zéro."

# type: example
#: lispref/numbers.texi:770
#, no-wrap
msgid ""
"(lsh 5 1)\n"
"     @result{} 10\n"
";; @r{Decimal 5 becomes decimal 10.}\n"
"00000101 @result{} 00001010\n"
"\n"
msgstr ""
"(lsh 5 1)\n"
"     @result{} 10\n"
";; @r{Decimal 5 becomes decimal 10.}\n"
"00000101 @result{} 00001010\n"
"\n"

# type: example
#: lispref/numbers.texi:775
#, no-wrap
msgid ""
"(lsh 7 1)\n"
"     @result{} 14\n"
";; @r{Decimal 7 becomes decimal 14.}\n"
"00000111 @result{} 00001110\n"
msgstr ""
"(lsh 7 1)\n"
"     @result{} 14\n"
";; @r{La décimale 7 devient la décimale 14.}\n"
"00000111 @result{} 00001110\n"

# type: Plain text
#: lispref/numbers.texi:782
msgid ""
"As the examples illustrate, shifting the pattern of bits one place to the "
"left produces a number that is twice the value of the previous number."
msgstr ""
"Comme ces exemples le montrent, lorsqu'on décale la combinaison de\n"
"chiffres binaires d'une place vers la gauche, on produit un nombre qui\n"
"est le double de la valeur du précédent nombre."

# type: Plain text
#: lispref/numbers.texi:785
msgid ""
"Shifting a pattern of bits two places to the left produces results like this "
"(with 8-bit binary numbers):"
msgstr ""
"Lorsqu'on décale de deux places une combinaison de chiffres binaires\n"
"vers la gauche, on produit les résultats suivants (avec des nombres\n"
"binaires de 8 bits):"

# type: example
#: lispref/numbers.texi:792
#, no-wrap
msgid ""
"(lsh 3 2)\n"
"     @result{} 12\n"
";; @r{Decimal 3 becomes decimal 12.}\n"
"00000011 @result{} 00001100\n"
msgstr ""
"(lsh 3 2)\n"
"     @result{} 12\n"
";; @r{La décimale 3 devient décimale 12.}\n"
"00000011 @result{} 00001100\n"

# type: Plain text
#: lispref/numbers.texi:796
msgid "On the other hand, shifting one place to the right looks like this:"
msgstr "D'autre part, le décalage d'une place vers la droite ressemble à ceci:"

# type: example
#: lispref/numbers.texi:803
#, no-wrap
msgid ""
"(lsh 6 -1)\n"
"     @result{} 3\n"
";; @r{Decimal 6 becomes decimal 3.}\n"
"00000110 @result{} 00000011\n"
msgstr ""
"(lsh 6 -1)\n"
"     @result{} 3\n"
";; @r{La décimale 6 devient décimale 3.}\n"
"00000110 @result{} 00000011\n"

# type: example
#: lispref/numbers.texi:810
#, no-wrap
msgid ""
"(lsh 5 -1)\n"
"     @result{} 2\n"
";; @r{Decimal 5 becomes decimal 2.}\n"
"00000101 @result{} 00000010\n"
msgstr ""
"(lsh 5 -1)\n"
"     @result{} 2\n"
";; @r{La décimale 5 devient décimale 2.}\n"
"00000101 @result{} 00000010\n"

# type: Plain text
#: lispref/numbers.texi:816
msgid ""
"As the example illustrates, shifting one place to the right divides the "
"value of a positive integer by two, rounding downward."
msgstr ""
"Comme l'exemple le montre, le décalage d'une place vers la droite\n"
"divise la valeur d'un nombre entier positif par deux, arrondissant\n"
"vers le bas."

# type: Plain text
#: lispref/numbers.texi:821
msgid ""
"The function @code{lsh}, like all Emacs Lisp arithmetic functions, does not "
"check for overflow, so shifting left can discard significant bits and change "
"the sign of the number.  For example, left shifting 268,435,455 produces "
"@minus{}2 on a 29-bit machine:"
msgstr ""
"La fonction @code{lsh}, comme toutes les fonctions arithmétiques\n"
"d'Emacs Lisp, ne vérifie pas le débordement, ainsi de décalage à\n"
"gauche peut changer le bit fort et changer le signe du nombre. Par\n"
"exemple, le décalage à gauche de 268.435.455 produit @minus{}2 sur une\n"
"machine de 29 bits :"

# type: example
#: lispref/numbers.texi:825
#, no-wrap
msgid ""
"(lsh 268435455 1)          ; @r{left shift}\n"
"     @result{} -2\n"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:828
msgid "In binary, in the 29-bit implementation, the argument looks like this:"
msgstr "En binaire, dans l'exécution de 29 bits, l'argument ressemble à ceci:"

# type: example
#: lispref/numbers.texi:833
#, no-wrap
msgid ""
";; @r{Decimal 268,435,455}\n"
"0 1111  1111 1111  1111 1111  1111 1111\n"
msgstr ""
";; @r{La décimale 268 435 455}\n"
"0 1111  1111 1111  1111 1111  1111 1111\n"

# type: Plain text
#: lispref/numbers.texi:838
msgid "which becomes the following when left shifted:"
msgstr "ce qui devient, lorsqu'on décale à gauche:"

# type: example
#: lispref/numbers.texi:843
#, no-wrap
msgid ""
";; @r{Decimal @minus{}2}\n"
"1 1111  1111 1111  1111 1111  1111 1110\n"
msgstr ""
";; @r{La décimale @minus{}2}\n"
"1 1111  1111 1111  1111 1111  1111 1110\n"

# type: Plain text
#: lispref/numbers.texi:847
#, no-wrap
msgid "ash integer1 count"
msgstr "ash integer1 count"

# type: cindex
#: lispref/numbers.texi:848
#, no-wrap
msgid "arithmetic shift"
msgstr "arithmetic shift"

# type: Plain text
#: lispref/numbers.texi:852
msgid ""
"@code{ash} (@dfn{arithmetic shift}) shifts the bits in @var{integer1} to the "
"left @var{count} places, or to the right if @var{count} is negative."
msgstr ""
"@code{ash} (@dfn{arithmetic shift}) décale les bits dans\n"
"@var{integer1} de @var{count} places vers la gauche, ou vers la droite\n"
"si @var{count} est négatif."

# type: Plain text
#: lispref/numbers.texi:857
msgid ""
"@code{ash} gives the same results as @code{lsh} except when @var{integer1} "
"and @var{count} are both negative.  In that case, @code{ash} puts ones in "
"the empty bit positions on the left, while @code{lsh} puts zeros in those "
"bit positions."
msgstr ""
"@code{ash} donne les mêmes résultats que @code{lsh} excepté quand\n"
"@var{integer1} et @var{count} sont tous les deux négatifs. Dans ce\n"
"cas, @code{ash} met des 1 dans les positions de bit vide du côté\n"
"gauche, alors que @code{lsh} met des 0 dans ces positions de bit."

# type: Plain text
#: lispref/numbers.texi:860
msgid ""
"Thus, with @code{ash}, shifting the pattern of bits one place to the right "
"looks like this:"
msgstr ""
"Ainsi, @code{ash}, décalant la combinaison de chiffres binaires d'une\n"
"place vers la droite ressemble à ceci:"

# type: example
#: lispref/numbers.texi:868
#, no-wrap
msgid ""
"(ash -6 -1) @result{} -3\n"
";; @r{Decimal @minus{}6 becomes decimal @minus{}3.}\n"
"1 1111  1111 1111  1111 1111  1111 1010\n"
"     @result{}\n"
"1 1111  1111 1111  1111 1111  1111 1101\n"
msgstr ""
"(ash -6 -1)\n"
"@result{} -3\n"
";; @r{La décimale @minus{}6 devient la décimale @minus{}3.}\n"
"1 1111  1111 1111  1111 1111  1111 1010\n"
"     @result{}\n"
"1 1111  1111 1111  1111 1111  1111 1101\n"

# type: Plain text
#: lispref/numbers.texi:873
msgid ""
"In contrast, shifting the pattern of bits one place to the right with @code"
"{lsh} looks like this:"
msgstr ""
"En revanche, décaler la combinaison de chiffres binaires d'une place\n"
"vers la droite avec @code{lsh} ressemble à ceci:"

# type: example
#: lispref/numbers.texi:881
#, no-wrap
msgid ""
"(lsh -6 -1) @result{} 268435453\n"
";; @r{Decimal @minus{}6 becomes decimal 268,435,453.}\n"
"1 1111  1111 1111  1111 1111  1111 1010\n"
"     @result{}\n"
"0 1111  1111 1111  1111 1111  1111 1101\n"
msgstr ""
"(lsh -6 -1)\n"
"@result{} 268435453\n"
";; @r{La décimale @minus{}6 devient la décimale 268 435 453.}\n"
"1 1111  1111 1111  1111 1111  1111 1010\n"
"     @result{}\n"
"0 1111  1111 1111  1111 1111  1111 1101\n"

# type: Plain text
#: lispref/numbers.texi:885
msgid "Here are other examples:"
msgstr "Voici d'autres exemples:"

# type: group
#: lispref/numbers.texi:891
#, no-wrap
msgid ""
"                   ;  @r{             29-bit binary values}\n"
"\n"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:894
#, no-wrap
msgid ""
"(lsh 5 2)          ;   5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}\n"
"     @result{} 20         ;      =  @r{0 0000  0000 0000  0000 0000  0001 0100}\n"
msgstr ""
"(lsh 5 2)          ;   5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}\n"
"     @result{} 20         ;      =  @r{0 0000  0000 0000  0000 0000  0001 0100}\n"

# type: Plain text
#: lispref/numbers.texi:902
#, no-wrap
msgid ""
"(ash 5 2)\n"
"     @result{} 20\n"
"(lsh -5 2)         ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}\n"
"     @result{} -20        ;      =  @r{1 1111  1111 1111  1111 1111  1110 1100}\n"
"(ash -5 2)\n"
"     @result{} -20\n"
msgstr ""
"(ash 5 2)\n"
"     @result{} 20\n"
"(lsh -5 2)         ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}\n"
"     @result{} -20        ;      =  @r{1 1111  1111 1111  1111 1111  1110 1100}\n"
"(ash -5 2)\n"
"     @result{} -20\n"

# type: Plain text
#: lispref/numbers.texi:906
#, no-wrap
msgid ""
"(lsh 5 -2)         ;   5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}\n"
"     @result{} 1          ;      =  @r{0 0000  0000 0000  0000 0000  0000 0001}\n"
msgstr ""
"(lsh 5 -2)         ;   5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}\n"
"     @result{} 1          ;      =  @r{0 0000  0000 0000  0000 0000  0000 0001}\n"

# type: Plain text
#: lispref/numbers.texi:910
#, no-wrap
msgid ""
"(ash 5 -2)\n"
"     @result{} 1\n"
msgstr ""
"(ash 5 -2)\n"
"     @result{} 1\n"

# type: Plain text
#: lispref/numbers.texi:914
#, no-wrap
msgid ""
"(lsh -5 -2)        ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}\n"
"     @result{} 134217726  ;      =  @r{0 0111  1111 1111  1111 1111  1111 1110}\n"
msgstr ""
"(lsh -5 -2)        ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}\n"
"     @result{} 134217726  ;      =  @r{0 0111  1111 1111  1111 1111  1111 1110}\n"

# type: Plain text
#: lispref/numbers.texi:918
#, no-wrap
msgid ""
"(ash -5 -2)        ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}\n"
"     @result{} -2         ;      =  @r{1 1111  1111 1111  1111 1111  1111 1110}\n"
msgstr ""
"(ash -5 -2)        ;  -5  =  @r{1 1111  1111 1111  1111 1111  1111 1011}\n"
"     @result{} -2         ;      =  @r{1 1111  1111 1111  1111 1111  1111 1110}\n"

# type: defun
#: lispref/numbers.texi:922
#, no-wrap
msgid "logand &rest ints-or-markers"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:927
msgid ""
"This function returns the ``logical and'' of the arguments: the @var{n}th "
"bit is set in the result if, and only if, the @var{n}th bit is set in all "
"the arguments.  (``Set'' means that the value of the bit is 1 rather than 0.)"
msgstr ""
"Cette fonction renvoie le ``et logique'' des arguments: le @var{n}th\n"
"bit est placé dans le résultat si, et seulement si, le @var{n}th bit\n"
"est placer dans tous arguments. (``Placer'' veut dire que la valeur du\n"
"bit est 1 plutôt que 0.)"

# type: Plain text
#: lispref/numbers.texi:934
msgid ""
"For example, using 4-bit binary numbers, the ``logical and'' of 13 and 12 is "
"12: 1101 combined with 1100 produces 1100.  In both the binary numbers, the "
"leftmost two bits are set (i.e., they are 1's), so the leftmost two bits of "
"the returned value are set.  However, for the rightmost two bits, each is "
"zero in at least one of the arguments, so the rightmost two bits of the "
"returned value are 0's."
msgstr ""
"Par exemple, en utilisant des nombres binaires de 4 bits, le ``et\n"
"logique'' de 13 et 12 est 12: 1101 combiné avec 1100 produit 1100.\n"
"Dans les deux nombres binaires, les deux bits à l'extrême gauche sont\n"
"placés (c.-à-d., ils sont à 1), ainsi les deux bits à l'extrême gauche\n"
"de la valeur retournée sont placés. Cependant, pour les deux bits à\n"
"l'extrême droite, chacun est à zéro dans au moins un des arguments,\n"
"ainsi les deux bits à l'extrême droite de la valeur retournée sont 0."

# type: Plain text
#: lispref/numbers.texi:937
msgid "Therefore,"
msgstr "Par conséquent,"

# type: example
#: lispref/numbers.texi:942
#, no-wrap
msgid ""
"(logand 13 12)\n"
"     @result{} 12\n"
msgstr ""
"(logand 13 12)\n"
"     @result{} 12\n"

# type: Plain text
#: lispref/numbers.texi:949
msgid ""
"If @code{logand} is not passed any argument, it returns a value of @minus{}"
"1.  This number is an identity element for @code{logand} because its binary "
"representation consists entirely of ones.  If @code{logand} is passed just "
"one argument, it returns that argument."
msgstr ""
"Si @code{logand} est passé sans argument, il renvoie une valeur\n"
"@minus{}1. Ce nombre est un élément d'identité pour @code{logand}\n"
"parce que sa représentation binaire consiste entièrement de 1. Si\n"
"@code{logand} est passé à juste un argument, il renvoie cet argument."

# type: group
#: lispref/numbers.texi:953
#, no-wrap
msgid ""
"                   ; @r{               29-bit binary values}\n"
"\n"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:957
#, no-wrap
msgid ""
"(logand 14 13)     ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}\n"
"                   ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}\n"
"     @result{} 12         ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}\n"
msgstr ""
"(logand 14 13)     ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}\n"
"                   ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}\n"
"     @result{} 12         ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}\n"

# type: Plain text
#: lispref/numbers.texi:964
#, no-wrap
msgid ""
"(logand 14 13 4)   ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}\n"
"                   ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}\n"
"                   ;  4  =  @r{0 0000  0000 0000  0000 0000  0000 0100}\n"
"     @result{} 4          ;  4  =  @r{0 0000  0000 0000  0000 0000  0000 0100}\n"
msgstr ""
"(logand 14 13 4)   ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}\n"
"                   ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}\n"
"                   ;  4  =  @r{0 0000  0000 0000  0000 0000  0000 0100}\n"
"     @result{} 4          ;  4  =  @r{0 0000  0000 0000  0000 0000  0000 0100}\n"

# type: Plain text
#: lispref/numbers.texi:969
#, no-wrap
msgid ""
"(logand)\n"
"     @result{} -1         ; -1  =  @r{1 1111  1111 1111  1111 1111  1111 1111}\n"
msgstr ""
"(logand)\n"
"     @result{} -1         ; -1  =  @r{1 1111  1111 1111  1111 1111  1111 1111}\n"

# type: defun
#: lispref/numbers.texi:973
#, no-wrap
msgid "logior &rest ints-or-markers"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:979
msgid ""
"This function returns the ``inclusive or'' of its arguments: the @var{n}th "
"bit is set in the result if, and only if, the @var{n}th bit is set in at "
"least one of the arguments.  If there are no arguments, the result is zero, "
"which is an identity element for this operation.  If @code{logior} is passed "
"just one argument, it returns that argument."
msgstr ""
"Cette fonction renvoie le ``ou inclus'' de ses arguments: le\n"
"@var{n}ième bit est placé dans le résultat si, et seulement si, le\n"
"@var{n}ième bit est placé dans au moins un des arguments. S'il n'y a\n"
"aucun argument, le résultat est 0, ce qui est un élément d'identité\n"
"pour cette opération. Si @code{logior} est passé à juste un argument,\n"
"il renvoie cet argument."

# type: group
#: lispref/numbers.texi:983 lispref/numbers.texi:1008
#, no-wrap
msgid ""
"                   ; @r{              29-bit binary values}\n"
"\n"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:987
#, no-wrap
msgid ""
"(logior 12 5)      ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}\n"
"                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}\n"
"     @result{} 13         ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}\n"
msgstr ""
"(logior 12 5)      ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}\n"
"                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}\n"
"     @result{} 13         ; 13  =  @r{0 0000  0000 0000  0000 0000  0000 1101}\n"

# type: Plain text
#: lispref/numbers.texi:994
#, no-wrap
msgid ""
"(logior 12 5 7)    ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}\n"
"                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}\n"
"                   ;  7  =  @r{0 0000  0000 0000  0000 0000  0000 0111}\n"
"     @result{} 15         ; 15  =  @r{0 0000  0000 0000  0000 0000  0000 1111}\n"
msgstr ""
"(logior 12 5 7)    ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}\n"
"                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}\n"
"                   ;  7  =  @r{0 0000  0000 0000  0000 0000  0000 0111}\n"
"     @result{} 15         ; 15  =  @r{0 0000  0000 0000  0000 0000  0000 1111}\n"

# type: defun
#: lispref/numbers.texi:998
#, no-wrap
msgid "logxor &rest ints-or-markers"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:1004
msgid ""
"This function returns the ``exclusive or'' of its arguments: the @var{n}th "
"bit is set in the result if, and only if, the @var{n}th bit is set in an odd "
"number of the arguments.  If there are no arguments, the result is 0, which "
"is an identity element for this operation.  If @code{logxor} is passed just "
"one argument, it returns that argument."
msgstr ""
"Cette fonction renvoie le ``ou exclusif'' de ses arguments: le\n"
"@var{n}ième bit est placé dans le résultat si, et seulement si, le bit\n"
"@var{n}ième bit est placé dans un nombre impair des arguments. S'il\n"
"n'y a aucun argument, le résultat est 0, qui est un élément d'identité\n"
"pour cette opération. Si @code{logxor} est passé juste à un argument,\n"
"il renvoie cet argument."

# type: Plain text
#: lispref/numbers.texi:1012
#, no-wrap
msgid ""
"(logxor 12 5)      ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}\n"
"                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}\n"
"     @result{} 9          ;  9  =  @r{0 0000  0000 0000  0000 0000  0000 1001}\n"
msgstr ""
"(logxor 12 5)      ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}\n"
"                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}\n"
"     @result{} 9          ;  9  =  @r{0 0000  0000 0000  0000 0000  0000 1001}\n"

# type: Plain text
#: lispref/numbers.texi:1019
#, no-wrap
msgid ""
"(logxor 12 5 7)    ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}\n"
"                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}\n"
"                   ;  7  =  @r{0 0000  0000 0000  0000 0000  0000 0111}\n"
"     @result{} 14         ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}\n"
msgstr ""
"(logxor 12 5 7)    ; 12  =  @r{0 0000  0000 0000  0000 0000  0000 1100}\n"
"                   ;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}\n"
"                   ;  7  =  @r{0 0000  0000 0000  0000 0000  0000 0111}\n"
"     @result{} 14         ; 14  =  @r{0 0000  0000 0000  0000 0000  0000 1110}\n"

# type: cindex
#: lispref/numbers.texi:1023
#, no-wrap
msgid "lognot integer"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:1027
msgid ""
"This function returns the logical complement of its argument: the @var{n}th "
"bit is one in the result if, and only if, the @var{n}th bit is zero in @var"
"{integer}, and vice-versa."
msgstr ""
"Cette fonction renvoie le complément logique de son argument: le\n"
"@var{n}ième bit est 1 dans le résultat si, et seulement si, le\n"
"@var{n}ième bit est 0 dans @var{integer}, et vice-versa."

# type: example
#: lispref/numbers.texi:1034
#, no-wrap
msgid ""
"(lognot 5)\n"
"     @result{} -6\n"
";;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}\n"
";; @r{becomes}\n"
";; -6  =  @r{1 1111  1111 1111  1111 1111  1111 1010}\n"
msgstr ""
"(lognot 5)\n"
"     @result{} -6\n"
";;  5  =  @r{0 0000  0000 0000  0000 0000  0000 0101}\n"
";; @r{devient}\n"
";; -6  =  @r{1 1111  1111 1111  1111 1111  1111 1010}\n"

# type: section
#: lispref/numbers.texi:1038
#, no-wrap
msgid "Standard Mathematical Functions"
msgstr "Fonctions mathématiques standards"

# type: cindex
#: lispref/numbers.texi:1039
#, no-wrap
msgid "transcendental functions"
msgstr ""

# type: cindex
#: lispref/numbers.texi:1040
#, no-wrap
msgid "mathematical functions"
msgstr ""

# type: cindex
#: lispref/numbers.texi:1041
#, no-wrap
msgid "floating-point functions"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:1045
msgid ""
"These mathematical functions allow integers as well as floating point "
"numbers as arguments."
msgstr ""
"Ces fonctions mathématiques autorisent des nombres entiers aussi bien\n"
"que des nombres à virgule flottante comme arguments."

# type: defun
#: lispref/numbers.texi:1046
#, no-wrap
msgid "sin arg"
msgstr "sin arg"

# type: defunx
#: lispref/numbers.texi:1047
#, no-wrap
msgid "cos arg"
msgstr "cos arg"

# type: defunx
#: lispref/numbers.texi:1048
#, no-wrap
msgid "tan arg"
msgstr "tan arg"

# type: Plain text
#: lispref/numbers.texi:1051
msgid ""
"These are the ordinary trigonometric functions, with argument measured in "
"radians."
msgstr ""
"Ce sont les fonctions trigonométriques ordinaires, avec l'argument mesuré\n"
"en radians."

# type: defun
#: lispref/numbers.texi:1053
#, no-wrap
msgid "asin arg"
msgstr "asin arg"

# type: Plain text
#: lispref/numbers.texi:1055
msgid "The value of @code{(asin @var{arg})} is a number between"
msgstr "La valeur de @code{(asin @var{arg})} est un nombre entre"

# type: ifnottex
#: lispref/numbers.texi:1057 lispref/numbers.texi:1088
msgid "@minus{}pi/2"
msgstr "@minus{}pi/2"

# type: tex
#: lispref/numbers.texi:1060 lispref/numbers.texi:1091
#, no-wrap
msgid "@math{-\\pi/2}\n"
msgstr ""

# type: ifnottex
#: lispref/numbers.texi:1064 lispref/numbers.texi:1095
msgid "pi/2"
msgstr "pi/2"

# type: tex
#: lispref/numbers.texi:1067 lispref/numbers.texi:1098
#, no-wrap
msgid "@math{\\pi/2}\n"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:1070
msgid ""
"(inclusive) whose sine is @var{arg}; if, however, @var{arg} is out of range "
"(outside [@minus{}1, 1]), it signals a @code{domain-error} error."
msgstr ""
"(inclus) dont le sinus est @var{arg} ; si, cependant, @var{arg} est\n"
"hors de portée (en dehors de [@minus{} 1, 1]), il signale une erreur\n"
"@code{domaine-error}."

# type: defun
#: lispref/numbers.texi:1072
#, no-wrap
msgid "acos arg"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:1074
msgid "The value of @code{(acos @var{arg})} is a number between 0 and"
msgstr "La valeur de @code{(acos @var{arg})} est un nombre entre 0 et"

# type: ifnottex
#: lispref/numbers.texi:1076
msgid "pi"
msgstr "pi"

# type: tex
#: lispref/numbers.texi:1079
#, no-wrap
msgid "@math{\\pi}\n"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:1082
msgid ""
"(inclusive) whose cosine is @var{arg}; if, however, @var{arg} is out of "
"range (outside [@minus{}1, 1]), it signals a @code{domain-error} error."
msgstr ""
"(inclus) dont le cosinus est @var{arg} ; si, cependant, @var{arg} est\n"
"hors de portée (en dehors de [@minus{} 1, 1]), il signale une erreur\n"
"@code{domaine-error}."

# type: defun
#: lispref/numbers.texi:1084
#, no-wrap
msgid "atan y &optional x"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:1086
msgid "The value of @code{(atan @var{y})} is a number between"
msgstr "La valeur de @code{(acos @var{arg})} est un nombre entre"

# type: Plain text
#: lispref/numbers.texi:1103
msgid ""
"(exclusive) whose tangent is @var{y}.  If the optional second argument @var"
"{x} is given, the value of @code{(atan y x)} is the angle in radians between "
"the vector @code{[@var{x}, @var{y}]} and the @code{X} axis."
msgstr ""
"(exclusif) dont la tangente est @var{y}. Si le deuxième argument\n"
"facultatif @var{x} est donné, la valeur de @code{(atan y x)} est\n"
"pêcher en radians entre le vecteur @code{[@var{x}, @var{y}]} et l'axis\n"
"@code{X}."

# type: defun
#: lispref/numbers.texi:1105
#, no-wrap
msgid "exp arg"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:1107
msgid "This is the exponential function; it returns"
msgstr "C'est la fonction exponentielle ; elle retourne"

# type: tex
#: lispref/numbers.texi:1109 lispref/numbers.texi:1116
#: lispref/numbers.texi:1129
#, no-wrap
msgid "@math{e}\n"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:1114
msgid "to the power @var{arg}."
msgstr "à la puissance @var{arg}."

# type: Plain text
#: lispref/numbers.texi:1122
msgid ""
"is a fundamental mathematical constant also called the base of natural "
"logarithms."
msgstr ""
"est une constante mathématique fondamentale également appelée base des\n"
"logarithmes naturels."

# type: defun
#: lispref/numbers.texi:1124
#, no-wrap
msgid "log arg &optional base"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:1127
msgid ""
"This function returns the logarithm of @var{arg}, with base @var{base}.  If "
"you don't specify @var{base}, the base"
msgstr ""
"Cette fonction renvoie le logarithme de @var{arg}, en base @var{base}.\n"
"Si vous n'indiquez pas @var{base}, la base"

# type: Plain text
#: lispref/numbers.texi:1135
msgid ""
"is used.  If @var{arg} is negative, it signals a @code{domain-error} error."
msgstr ""
"est employée. Si @var{arg} est négatif, il signale une erreur\n"
"@code{domain-error}."

# type: defun
#: lispref/numbers.texi:1138
#, no-wrap
msgid "expm1 arg"
msgstr ""

# type: defun
#: lispref/numbers.texi:1142
#, no-wrap
msgid ""
"This function returns @code{(1- (exp @var{arg}))}, but it is more\n"
"accurate than that when @var{arg} is negative and @code{(exp @var{arg})}\n"
"is close to 1.\n"
msgstr ""

# type: defun
#: lispref/numbers.texi:1144
#, no-wrap
msgid "log1p arg"
msgstr ""

# type: defun
#: lispref/numbers.texi:1148
#, no-wrap
msgid ""
"This function returns @code{(log (1+ @var{arg}))}, but it is more\n"
"accurate than that when @var{arg} is so small that adding 1 to it would\n"
"lose accuracy.\n"
msgstr ""

# type: defun
#: lispref/numbers.texi:1151
#, no-wrap
msgid "log10 arg"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:1156
msgid ""
"This function returns the logarithm of @var{arg}, with base 10.  If @var"
"{arg} is negative, it signals a @code{domain-error} error.  @code{(log10 @var"
"{x})} @equiv{} @code{(log @var{x} 10)}, at least approximately."
msgstr ""
"Cette fonction renvoie le logarithme de @var{arg}, en base 10. Si\n"
"@var{arg} est négatif, il signale une erreur @code{domain-error}.\n"
"@code{(log10 @var{x})} @equiv{} @code{(log @var{x} 10)}, au moins\n"
"approximativement."

# type: defun
#: lispref/numbers.texi:1158
#, no-wrap
msgid "expt x y"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:1162
msgid ""
"This function returns @var{x} raised to power @var{y}.  If both arguments "
"are integers and @var{y} is positive, the result is an integer; in this "
"case, overflow causes truncation, so watch out."
msgstr ""
"Cette fonction renvoie @var{x} à la puissance @var{y}. Si tout les\n"
"deux les arguments sont des nombres entiers et @var{y} est positif, le\n"
"résultat est nombre entier ; dans ce cas, le débordement cause\n"
"l'abrèviation, alors attention."

# type: defun
#: lispref/numbers.texi:1164
#, no-wrap
msgid "sqrt arg"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:1167
msgid ""
"This returns the square root of @var{arg}.  If @var{arg} is negative, it "
"signals a @code{domain-error} error."
msgstr ""
"Ceci renvoie la racine carrée de @var{arg}. Si @var{arg} est négatif,\n"
"il signale une erreur @code{domain-error}."

# type: cindex
#: lispref/numbers.texi:1171
#, no-wrap
msgid "random numbers"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:1179
msgid ""
"A deterministic computer program cannot generate true random numbers.  For "
"most purposes, @dfn{pseudo-random numbers} suffice.  A series of pseudo-"
"random numbers is generated in a deterministic fashion.  The numbers are not "
"truly random, but they have certain properties that mimic a random series.  "
"For example, all possible values occur equally often in a pseudo-random "
"series."
msgstr ""
"Un programme machine déterministe ne peut pas produire de véritables\n"
"nombres aléatoires. Dans la plupart des cas, @dfn{pseudo-randam\n"
"numbers} suffit. Une série de nombres pseudo-aléatoires est produite\n"
"d'une façon déterminée. Les nombres ne sont pas vraiment aléatoires,\n"
"mais ils ont certaines propriétés à imiter une série aléatoire. Par\n"
"exemple, toutes les valeurs possibles se produisent également souvent\n"
"dans une série pseudo-aléatoire."

# type: Plain text
#: lispref/numbers.texi:1188
msgid ""
"In Emacs, pseudo-random numbers are generated from a ``seed'' number.  "
"Starting from any given seed, the @code{random} function always generates "
"the same sequence of numbers.  Emacs always starts with the same seed value, "
"so the sequence of values of @code{random} is actually the same in each "
"Emacs run! For example, in one operating system, the first call to @code"
"{(random)} after you start Emacs always returns @minus{}1457731, and the "
"second one always returns @minus{}7692030.  This repeatability is helpful "
"for debugging."
msgstr ""
"Dans Emacs, des nombres pseudo-aléatoires sont produits à partir de\n"
"``graine'' de nombre.  À partir de n'importe quelle graine donnée, la\n"
"fonction @code{random} produit toujours le même ordre de\n"
"nombres. Emacs démarre toujours par la même valeur de graine, ainsi la\n"
"séquence des valeurs de @code{random} est réellement les mêmes dans\n"
"chaque passe d'Emacs ! Par exemple, dans un logiciel d'exploitation,\n"
"le premier appel à @code{(random)}, après que vous démarriez Emacs,\n"
"retourne toujours @minus{}1457731, et le second renvoie toujours\n"
"@minus{}7692030. Cette répétition est utile pour la correction."

# type: Plain text
#: lispref/numbers.texi:1192
msgid ""
"If you want random numbers that don't always come out the same, execute @code"
"{(random t)}.  This chooses a new seed based on the current time of day and "
"on Emacs's process @acronym{ID} number."
msgstr ""
"Si vous voulez des nombres aléatoires qui ne sont pas toujours\n"
"pareils, exécuter @code{(random t)}. Ceci choisit une nouvelle graine\n"
"basée sur l'heure courante du jour et sur le numéro du processus\n"
"@acronym{ID} d'Emacs."

# type: defun
#: lispref/numbers.texi:1193
#, no-wrap
msgid "random &optional limit"
msgstr ""

# type: Plain text
#: lispref/numbers.texi:1196
msgid ""
"This function returns a pseudo-random integer.  Repeated calls return a "
"series of pseudo-random integers."
msgstr ""
"Cette fonction renvoie un nombre entier pseudo-aléatoire. Les appels\n"
"répétés renvoient a une série de nombres entiers pseudo-aléatoires."

# type: Plain text
#: lispref/numbers.texi:1199
msgid ""
"If @var{limit} is a positive integer, the value is chosen to be nonnegative "
"and less than @var{limit}."
msgstr ""
"Si @var{limit} est un nombre entier positif, la valeur est choisie\n"
"pour être non négative et inférieure à @var{limit}."

# type: Plain text
#: lispref/numbers.texi:1203
msgid ""
"If @var{limit} is @code{t}, it means to choose a new seed based on the "
"current time of day and on Emacs's process @acronym{ID} number."
msgstr ""
"Si @var{limit} est @code{t}, cela signifie de choisir une nouvelle\n"
"graine basée sur heure courante et sur le numéro de processus\n"
"@acronym{ID} d'Emacs."

# type: Plain text
#: lispref/numbers.texi:1207
msgid ""
"On some machines, any integer representable in Lisp may be the result of "
"@code{random}.  On other machines, the result can never be larger than a "
"certain maximum or less than a certain (negative) minimum."
msgstr ""
"Sur quelques machines, n'importe quel nombre entier représentable en\n"
"Lisp peut être le résultat de @code{random}. Sur d'autres machines, le\n"
"résultat peut ne jamais être plus grand qu'un certain maximum ou moins\n"
"qu'un certain minimum (négatif)."

# type: ignore
#: lispref/numbers.texi:1211
#, no-wrap
msgid "   arch-tag: 574e8dd2-d513-4616-9844-c9a27869782e\n"
msgstr "   arch-tag: 574e8dd2-d513-4616-9844-c9a27869782e\n"

# type: cindex
#: lispref/objects.texi:10
#, no-wrap
msgid "Lisp object"
msgstr ""

# type: cindex
#: lispref/objects.texi:12
#, no-wrap
msgid "data type"
msgstr ""

# type: Plain text
#: lispref/objects.texi:17
msgid ""
"A Lisp @dfn{object} is a piece of data used and manipulated by Lisp "
"programs.  For our purposes, a @dfn{type} or @dfn{data type} is a set of "
"possible objects."
msgstr ""
"Un @dfn{object} List est un morceau de données employées et manipulées\n"
"par les programmes Lisp. Pour nous, un @dfn{type} ou un @dfn{data\n"
"type} est un ensemble d'objets possibles."

# type: Plain text
#: lispref/objects.texi:23
msgid ""
"Every object belongs to at least one type.  Objects of the same type have "
"similar structures and may usually be used in the same contexts.  Types can "
"overlap, and objects can belong to two or more types.  Consequently, we can "
"ask whether an object belongs to a particular type, but not for ``the'' type "
"of an object."
msgstr ""

# type: cindex
#: lispref/objects.texi:24
#, no-wrap
msgid "primitive type"
msgstr ""

# type: Plain text
#: lispref/objects.texi:32
msgid ""
"A few fundamental object types are built into Emacs.  These, from which all "
"other types are constructed, are called @dfn{primitive types}.  Each object "
"belongs to one and only one primitive type.  These types include @dfn"
"{integer}, @dfn{float}, @dfn{cons}, @dfn{symbol}, @dfn{string}, @dfn"
"{vector}, @dfn{hash-table}, @dfn{subr}, and @dfn{byte-code function}, plus "
"several special types, such as @dfn{buffer}, that are related to editing.  "
"(@xref{Editing Types}.)"
msgstr ""

# type: Plain text
#: lispref/objects.texi:35
msgid ""
"Each primitive type has a corresponding Lisp function that checks whether an "
"object is a member of that type."
msgstr ""

# type: Plain text
#: lispref/objects.texi:40
msgid ""
"Note that Lisp is unlike many other languages in that Lisp objects are @dfn"
"{self-typing}: the primitive type of the object is implicit in the object "
"itself.  For example, if an object is a vector, nothing can treat it as a "
"number; Lisp knows it is a vector, not a number."
msgstr ""

# type: Plain text
#: lispref/objects.texi:48
msgid ""
"In most languages, the programmer must declare the data type of each "
"variable, and the type is known by the compiler but not represented in the "
"data.  Such type declarations do not exist in Emacs Lisp.  A Lisp variable "
"can have any type of value, and it remembers whatever value you store in it, "
"type and all.  (Actually, a small number of Emacs Lisp variables can only "
"take on values of a certain type.  @xref{Variables with Restricted Values}.)"
msgstr ""

# type: Plain text
#: lispref/objects.texi:52
msgid ""
"This chapter describes the purpose, printed representation, and read syntax "
"of each of the standard types in GNU Emacs Lisp.  Details on how to use "
"these types can be found in later chapters."
msgstr ""

# type: menu
#: lispref/objects.texi:61 lispref/objects.texi:63 lispref/vol1.texi:310
#: lispref/vol2.texi:311
#, no-wrap
msgid "Printed Representation"
msgstr ""

# type: menu
#: lispref/objects.texi:61 lispref/vol1.texi:310 lispref/vol2.texi:311
msgid "How Lisp objects are represented as text."
msgstr ""

# type: menu
#: lispref/objects.texi:61 lispref/objects.texi:110 lispref/objects.texi:112
#: lispref/vol1.texi:310 lispref/vol2.texi:311
#, no-wrap
msgid "Comments"
msgstr ""

# type: menu
#: lispref/objects.texi:61 lispref/vol1.texi:310 lispref/vol2.texi:311
msgid "Comments and their formatting conventions."
msgstr ""

# type: menu
#: lispref/objects.texi:61 lispref/objects.texi:131 lispref/objects.texi:132
#: lispref/vol1.texi:310 lispref/vol1.texi:312 lispref/vol2.texi:311
#: lispref/vol2.texi:313
#, no-wrap
msgid "Programming Types"
msgstr ""

# type: menu
#: lispref/objects.texi:61 lispref/vol1.texi:310 lispref/vol2.texi:311
msgid "Types found in all Lisp systems."
msgstr ""

# type: menu
#: lispref/objects.texi:61 lispref/objects.texi:1336 lispref/objects.texi:1337
#: lispref/vol1.texi:310 lispref/vol1.texi:338 lispref/vol2.texi:311
#: lispref/vol2.texi:339
#, no-wrap
msgid "Editing Types"
msgstr ""

# type: menu
#: lispref/objects.texi:61 lispref/vol1.texi:310 lispref/vol2.texi:311
msgid "Types specific to Emacs."
msgstr ""

# type: node
#: lispref/objects.texi:61 lispref/objects.texi:1595
#, no-wrap
msgid "Circular Objects"
msgstr ""

# type: menu
#: lispref/objects.texi:61
msgid "Read syntax for circular structure."
msgstr ""

# type: menu
#: lispref/objects.texi:61 lispref/objects.texi:1658 lispref/objects.texi:1659
#: lispref/vol1.texi:310 lispref/vol2.texi:311
#, no-wrap
msgid "Type Predicates"
msgstr ""

# type: menu
#: lispref/objects.texi:61 lispref/vol1.texi:310 lispref/vol2.texi:311
msgid "Tests related to types."
msgstr ""

# type: menu
#: lispref/objects.texi:61 lispref/objects.texi:1869 lispref/objects.texi:1870
#: lispref/vol1.texi:310 lispref/vol2.texi:311
#, no-wrap
msgid "Equality Predicates"
msgstr ""

# type: menu
#: lispref/objects.texi:61 lispref/vol1.texi:310 lispref/vol2.texi:311
msgid "Tests of equality between any two objects."
msgstr ""

# type: section
#: lispref/objects.texi:65
#, no-wrap
msgid "Printed Representation and Read Syntax"
msgstr ""

# type: cindex
#: lispref/objects.texi:66
#, no-wrap
msgid "printed representation"
msgstr ""

# type: cindex
#: lispref/objects.texi:67
#, no-wrap
msgid "read syntax"
msgstr ""

# type: Plain text
#: lispref/objects.texi:76
msgid ""
"The @dfn{printed representation} of an object is the format of the output "
"generated by the Lisp printer (the function @code{prin1}) for that object.  "
"Every data type has a unique printed representation.  The @dfn{read syntax} "
"of an object is the format of the input accepted by the Lisp reader (the "
"function @code{read}) for that object.  This is not necessarily unique; many "
"kinds of object have more than one syntax.  @xref{Read and Print}."
msgstr ""

# type: cindex
#: lispref/objects.texi:77
#, no-wrap
msgid "hash notation"
msgstr ""

# type: Plain text
#: lispref/objects.texi:85
msgid ""
"In most cases, an object's printed representation is also a read syntax for "
"the object.  However, some types have no read syntax, since it does not make "
"sense to enter objects of these types as constants in a Lisp program.  These "
"objects are printed in @dfn{hash notation}, which consists of the characters "
"@samp{#<}, a descriptive string (typically the type name followed by the "
"name of the object), and a closing @samp{>}.  For example:"
msgstr ""

# type: group
#: lispref/objects.texi:89 lispref/objects.texi:1418
#, no-wrap
msgid ""
"(current-buffer)\n"
"     @result{} #<buffer objects.texi>\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:94
msgid ""
"Hash notation cannot be read at all, so the Lisp reader signals the error "
"@code{invalid-read-syntax} whenever it encounters @samp{#<}."
msgstr ""

# type: Plain text
#: lispref/objects.texi:101
msgid ""
"In other languages, an expression is text; it has no other form.  In Lisp, "
"an expression is primarily a Lisp object and only secondarily the text that "
"is the object's read syntax.  Often there is no need to emphasize this "
"distinction, but you must keep it in the back of your mind, or you will "
"occasionally be very confused."
msgstr ""

# type: Plain text
#: lispref/objects.texi:109
msgid ""
"When you evaluate an expression interactively, the Lisp interpreter first "
"reads the textual representation of it, producing a Lisp object, and then "
"evaluates that object (@pxref{Evaluation}).  However, evaluation and reading "
"are separate activities.  Reading returns the Lisp object represented by the "
"text that is read; the object may or may not be evaluated later.  @xref"
"{Input Functions}, for a description of @code{read}, the basic function for "
"reading objects."
msgstr ""

# type: cindex
#: lispref/objects.texi:113
#, no-wrap
msgid "comments"
msgstr ""

# type: cindex
#: lispref/objects.texi:114
#, no-wrap
msgid "@samp{;} in comment"
msgstr ""

# type: Plain text
#: lispref/objects.texi:123
msgid ""
"A @dfn{comment} is text that is written in a program only for the sake of "
"humans that read the program, and that has no effect on the meaning of the "
"program.  In Lisp, a semicolon (@samp{;}) starts a comment if it is not "
"within a string or character constant.  The comment continues to the end of "
"line.  The Lisp reader discards comments; they do not become part of the "
"Lisp objects which represent the program within the Lisp system."
msgstr ""

# type: Plain text
#: lispref/objects.texi:128
msgid ""
"The @samp{#@@@var{count}} construct, which skips the next @var{count} "
"characters, is useful for program-generated comments containing binary "
"data.  The Emacs Lisp byte compiler uses this in its output files (@pxref"
"{Byte Compilation}).  It isn't meant for source files, however."
msgstr ""

# type: Plain text
#: lispref/objects.texi:130
msgid "@xref{Comment Tips}, for conventions for formatting comments."
msgstr ""

# type: cindex
#: lispref/objects.texi:133
#, no-wrap
msgid "programming types"
msgstr ""

# type: Plain text
#: lispref/objects.texi:139
msgid ""
"There are two general categories of types in Emacs Lisp: those having to do "
"with Lisp programming, and those having to do with editing.  The former "
"exist in many Lisp implementations, in one form or another.  The latter are "
"unique to Emacs Lisp."
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/objects.texi:164 lispref/objects.texi:165
#: lispref/vol1.texi:331 lispref/vol2.texi:332
#, no-wrap
msgid "Integer Type"
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/vol1.texi:331 lispref/vol2.texi:332
msgid "Numbers without fractional parts."
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/objects.texi:204 lispref/objects.texi:205
#: lispref/vol1.texi:331 lispref/vol2.texi:332
#, no-wrap
msgid "Floating Point Type"
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/vol1.texi:331 lispref/vol2.texi:332
msgid "Numbers with fractional parts and with a large range."
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/objects.texi:222 lispref/objects.texi:223
#: lispref/vol1.texi:331 lispref/vol2.texi:332
#, no-wrap
msgid "Character Type"
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/vol1.texi:331 lispref/vol2.texi:332
msgid "The representation of letters, numbers and"
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/vol1.texi:331 lispref/vol2.texi:332
msgid "control characters."
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/objects.texi:523 lispref/objects.texi:524
#: lispref/vol1.texi:331 lispref/vol2.texi:332
#, no-wrap
msgid "Symbol Type"
msgstr "Le type symbole"

# type: menu
#: lispref/objects.texi:162 lispref/vol1.texi:331 lispref/vol2.texi:332
msgid "A multi-use object that refers to a function,"
msgstr ""

# type: menu
#: lispref/objects.texi:162
msgid "variable, or property list, and has a unique identity."
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/objects.texi:608 lispref/vol1.texi:331
#: lispref/vol2.texi:332
#, no-wrap
msgid "Sequence Type"
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/vol1.texi:331 lispref/vol2.texi:332
msgid "Both lists and arrays are classified as sequences."
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/objects.texi:639 lispref/vol1.texi:331
#: lispref/vol2.texi:332
#, no-wrap
msgid "Cons Cell Type"
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/vol1.texi:331 lispref/vol2.texi:332
msgid "Cons cells, and lists (which are made from cons cells)."
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/objects.texi:930 lispref/objects.texi:931
#: lispref/vol1.texi:331 lispref/vol2.texi:332
#, no-wrap
msgid "Array Type"
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/vol1.texi:331 lispref/vol2.texi:332
msgid "Arrays include strings and vectors."
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/objects.texi:966 lispref/objects.texi:967
#: lispref/vol1.texi:331 lispref/vol2.texi:332
#, no-wrap
msgid "String Type"
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/vol1.texi:331 lispref/vol2.texi:332
msgid "An (efficient) array of characters."
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/objects.texi:1127
#: lispref/objects.texi:1128 lispref/vol1.texi:331 lispref/vol2.texi:332
#, no-wrap
msgid "Vector Type"
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/vol1.texi:331 lispref/vol2.texi:332
msgid "One-dimensional arrays."
msgstr ""

# type: subsection
#: lispref/objects.texi:162 lispref/objects.texi:1147
#: lispref/objects.texi:1148
#, no-wrap
msgid "Char-Table Type"
msgstr ""

# type: menu
#: lispref/objects.texi:162
msgid "One-dimensional sparse arrays indexed by characters."
msgstr ""

# type: subsection
#: lispref/objects.texi:162 lispref/objects.texi:1178
#: lispref/objects.texi:1179
#, no-wrap
msgid "Bool-Vector Type"
msgstr ""

# type: menu
#: lispref/objects.texi:162
msgid "One-dimensional arrays of @code{t} or @code{nil}."
msgstr ""

# type: subsection
#: lispref/objects.texi:162 lispref/objects.texi:1213
#: lispref/objects.texi:1214
#, no-wrap
msgid "Hash Table Type"
msgstr ""

# type: menu
#: lispref/objects.texi:162
msgid "Super-fast lookup tables."
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/objects.texi:1226
#: lispref/objects.texi:1227 lispref/vol1.texi:331 lispref/vol2.texi:332
#, no-wrap
msgid "Function Type"
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/vol1.texi:331 lispref/vol2.texi:332
msgid "A piece of executable code you can call from elsewhere."
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/objects.texi:1248
#: lispref/objects.texi:1249 lispref/vol1.texi:331 lispref/vol2.texi:332
#, no-wrap
msgid "Macro Type"
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/vol1.texi:331 lispref/vol2.texi:332
msgid "A method of expanding an expression into another"
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/vol1.texi:331 lispref/vol2.texi:332
msgid "expression, more fundamental but less pretty."
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/objects.texi:1266
#: lispref/objects.texi:1267 lispref/vol1.texi:331 lispref/vol2.texi:332
#, no-wrap
msgid "Primitive Function Type"
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/vol1.texi:331 lispref/vol2.texi:332
msgid "A function written in C, callable from Lisp."
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/objects.texi:1303 lispref/vol1.texi:331
#: lispref/vol2.texi:332
#, no-wrap
msgid "Byte-Code Type"
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/vol1.texi:331 lispref/vol2.texi:332
msgid "A function written in Lisp, then compiled."
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/objects.texi:1316
#: lispref/objects.texi:1317 lispref/vol1.texi:331 lispref/vol2.texi:332
#, no-wrap
msgid "Autoload Type"
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/vol1.texi:331 lispref/vol2.texi:332
msgid "A type used for automatically loading seldom-used"
msgstr ""

# type: menu
#: lispref/objects.texi:162 lispref/vol1.texi:331 lispref/vol2.texi:332
msgid "functions."
msgstr ""

# type: Plain text
#: lispref/objects.texi:169
msgid ""
"The range of values for integers in Emacs Lisp is @minus{}268435456 to "
"268435455 (29 bits; i.e.,"
msgstr ""

# type: ifnottex
#: lispref/objects.texi:178
msgid "2**28 - 1)"
msgstr ""

# type: tex
#: lispref/objects.texi:181
#, no-wrap
msgid "@math{2^{28}-1})\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:186
msgid ""
"on most machines.  (Some machines may provide a wider range.)  It is "
"important to note that the Emacs Lisp arithmetic functions do not check for "
"overflow.  Thus @code{(1+ 268435455)} is @minus{}268435456 on most machines."
msgstr ""

# type: Plain text
#: lispref/objects.texi:191
msgid ""
"The read syntax for integers is a sequence of (base ten) digits with an "
"optional sign at the beginning and an optional period at the end.  The "
"printed representation produced by the Lisp interpreter never has a leading "
"@samp{+} or a final @samp{.}."
msgstr ""

# type: group
#: lispref/objects.texi:199
#, no-wrap
msgid ""
"-1               ; @r{The integer -1.}\n"
"1                ; @r{The integer 1.}\n"
"1.               ; @r{Also the integer 1.}\n"
"+1               ; @r{Also the integer 1.}\n"
"536870913        ; @r{Also the integer 1 on a 29-bit implementation.}\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:203 lispref/objects.texi:221
msgid "@xref{Numbers}, for more information."
msgstr ""

# type: Plain text
#: lispref/objects.texi:213
msgid ""
"Floating point numbers are the computer equivalent of scientific notation; "
"you can think of a floating point number as a fraction together with a power "
"of ten.  The precise number of significant figures and the range of possible "
"exponents is machine-specific; Emacs uses the C data type @code{double} to "
"store the value, and internally this records a power of 2 rather than a "
"power of 10."
msgstr ""

# type: Plain text
#: lispref/objects.texi:219
msgid ""
"The printed representation for floating point numbers requires either a "
"decimal point (with at least one digit following), an exponent, or both.  "
"For example, @samp{1500.0}, @samp{15e2}, @samp{15.0e2}, @samp{1.5e3}, and "
"@samp{.15e4} are five ways of writing a floating point number whose value is "
"1500.  They are all equivalent."
msgstr ""

# type: cindex
#: lispref/objects.texi:224
#, no-wrap
msgid "@acronym{ASCII} character codes"
msgstr ""

# type: Plain text
#: lispref/objects.texi:229
msgid ""
"A @dfn{character} in Emacs Lisp is nothing more than an integer.  In other "
"words, characters are represented by their character codes.  For example, "
"the character @kbd{A} is represented as the @w{integer 65}."
msgstr ""

# type: Plain text
#: lispref/objects.texi:233
msgid ""
"Individual characters are used occasionally in programs, but it is more "
"common to work with @emph{strings}, which are sequences composed of "
"characters.  @xref{String Type}."
msgstr ""

# type: Plain text
#: lispref/objects.texi:241
msgid ""
"Characters in strings, buffers, and files are currently limited to the range "
"of 0 to 524287---nineteen bits.  But not all values in that range are valid "
"character codes.  Codes 0 through 127 are @acronym{ASCII} codes; the rest "
"are non-@acronym{ASCII} (@pxref{Non-ASCII Characters}).  Characters that "
"represent keyboard input have a much wider range, to encode modifier keys "
"such as Control, Meta and Shift."
msgstr ""

# type: Plain text
#: lispref/objects.texi:245
msgid ""
"There are special functions for producing a human-readable textual "
"description of a character for the sake of messages.  @xref{Describing "
"Characters}."
msgstr ""

# type: subsubsection
#: lispref/objects.texi:252 lispref/objects.texi:254 lispref/objects.texi:255
#, no-wrap
msgid "Basic Char Syntax"
msgstr ""

# type: subsubsection
#: lispref/objects.texi:252 lispref/objects.texi:346 lispref/objects.texi:347
#, no-wrap
msgid "General Escape Syntax"
msgstr ""

# type: node
#: lispref/objects.texi:252 lispref/objects.texi:398
#, no-wrap
msgid "Ctl-Char Syntax"
msgstr ""

# type: node
#: lispref/objects.texi:252 lispref/objects.texi:449
#, no-wrap
msgid "Meta-Char Syntax"
msgstr ""

# type: node
#: lispref/objects.texi:252 lispref/objects.texi:484
#, no-wrap
msgid "Other Char Bits"
msgstr ""

# type: cindex
#: lispref/objects.texi:256
#, no-wrap
msgid "read syntax for characters"
msgstr ""

# type: cindex
#: lispref/objects.texi:257
#, no-wrap
msgid "printed representation for characters"
msgstr ""

# type: cindex
#: lispref/objects.texi:258
#, no-wrap
msgid "syntax for characters"
msgstr ""

# type: cindex
#: lispref/objects.texi:259
#, no-wrap
msgid "@samp{?} in character constant"
msgstr ""

# type: cindex
#: lispref/objects.texi:260
#, no-wrap
msgid "question mark in character constant"
msgstr ""

# type: Plain text
#: lispref/objects.texi:268
msgid ""
"Since characters are really integers, the printed representation of a "
"character is a decimal number.  This is also a possible read syntax for a "
"character, but writing characters that way in Lisp programs is not clear "
"programming.  You should @emph{always} use the special read syntax formats "
"that Emacs Lisp provides for characters.  These syntax formats start with a "
"question mark."
msgstr ""

# type: Plain text
#: lispref/objects.texi:273
msgid ""
"The usual read syntax for alphanumeric characters is a question mark "
"followed by the character; thus, @samp{?A} for the character @kbd{A}, @samp{?"
"B} for the character @kbd{B}, and @samp{?a} for the character @kbd{a}."
msgstr ""

# type: example
#: lispref/objects.texi:278
#, no-wrap
msgid "?Q @result{} 81     ?q @result{} 113\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:285
msgid ""
"You can use the same syntax for punctuation characters, but it is often a "
"good idea to add a @samp{\\} so that the Emacs commands for editing Lisp "
"code don't get confused.  For example, @samp{?\\(} is the way to write the "
"open-paren character.  If the character is @samp{\\}, you @emph{must} use a "
"second @samp{\\} to quote it: @samp{?\\\\}."
msgstr ""

# type: cindex
#: lispref/objects.texi:286
#, no-wrap
msgid "whitespace"
msgstr ""

# type: cindex
#: lispref/objects.texi:287
#, no-wrap
msgid "bell character"
msgstr ""

# type: samp{#1}
#: lispref/objects.texi:288
#, no-wrap
msgid "\\a"
msgstr "\\a"

# type: cindex
#: lispref/objects.texi:289
#, no-wrap
msgid "backspace"
msgstr ""

# type: item
#: lispref/objects.texi:290 lispref/searching.texi:742
#, no-wrap
msgid "\\b"
msgstr "\\b"

# type: cindex
#: lispref/objects.texi:291
#, no-wrap
msgid "tab (ASCII character)"
msgstr ""

# type: samp{#1}
#: lispref/objects.texi:292
#, no-wrap
msgid "\\t"
msgstr "\\t"

# type: cindex
#: lispref/objects.texi:293
#, no-wrap
msgid "vertical tab"
msgstr ""

# type: samp{#1}
#: lispref/objects.texi:294
#, no-wrap
msgid "\\v"
msgstr "\\v"

# type: cindex
#: lispref/objects.texi:295
#, no-wrap
msgid "formfeed"
msgstr ""

# type: samp{#1}
#: lispref/objects.texi:296
#, no-wrap
msgid "\\f"
msgstr "\\f"

# type: item
#: lispref/objects.texi:297 lispref/syntax.texi:353 lispref/syntax.texi:372
#, no-wrap
msgid "newline"
msgstr ""

# type: samp{#1}
#: lispref/objects.texi:298
#, no-wrap
msgid "\\n"
msgstr "\\n"

# type: cindex
#: lispref/objects.texi:299
#, no-wrap
msgid "return (ASCII character)"
msgstr ""

# type: samp{#1}
#: lispref/objects.texi:300
#, no-wrap
msgid "\\r"
msgstr "\\r"

# type: cindex
#: lispref/objects.texi:301
#, no-wrap
msgid "escape (ASCII character)"
msgstr ""

# type: samp{#1}
#: lispref/objects.texi:302
#, no-wrap
msgid "\\e"
msgstr "\\e"

# type: cindex
#: lispref/objects.texi:303
#, no-wrap
msgid "space (ASCII character)"
msgstr ""

# type: samp{#1}
#: lispref/objects.texi:304
#, no-wrap
msgid "\\s"
msgstr "\\s"

# type: Plain text
#: lispref/objects.texi:311
msgid ""
"You can express the characters control-g, backspace, tab, newline, vertical "
"tab, formfeed, space, return, del, and escape as @samp{?\\a}, @samp{?\\b}, "
"@samp{?\\t}, @samp{?\\n}, @samp{?\\v}, @samp{?\\f}, @samp{?\\s}, @samp{?"
"\\r}, @samp{?\\d}, and @samp{?\\e}, respectively.  (@samp{?\\s} followed by "
"a dash has a different meaning---it applies the ``super'' modifier to the "
"following character.)  Thus,"
msgstr ""

# type: example
#: lispref/objects.texi:324
#, no-wrap
msgid ""
"?\\a @result{} 7                 ; @r{control-g, @kbd{C-g}}\n"
"?\\b @result{} 8                 ; @r{backspace, @key{BS}, @kbd{C-h}}\n"
"?\\t @result{} 9                 ; @r{tab, @key{TAB}, @kbd{C-i}}\n"
"?\\n @result{} 10                ; @r{newline, @kbd{C-j}}\n"
"?\\v @result{} 11                ; @r{vertical tab, @kbd{C-k}}\n"
"?\\f @result{} 12                ; @r{formfeed character, @kbd{C-l}}\n"
"?\\r @result{} 13                ; @r{carriage return, @key{RET}, @kbd{C-m}}\n"
"?\\e @result{} 27                ; @r{escape character, @key{ESC}, @kbd{C-[}}\n"
"?\\s @result{} 32                ; @r{space character, @key{SPC}}\n"
"?\\\\ @result{} 92                ; @r{backslash character, @kbd{\\}}\n"
"?\\d @result{} 127               ; @r{delete character, @key{DEL}}\n"
msgstr ""

# type: cindex
#: lispref/objects.texi:326
#, no-wrap
msgid "escape sequence"
msgstr ""

# type: Plain text
#: lispref/objects.texi:332
msgid ""
"These sequences which start with backslash are also known as @dfn{escape "
"sequences}, because backslash plays the role of an ``escape character''; "
"this terminology has nothing to do with the character @key{ESC}.  @samp{\\s} "
"is meant for use in character constants; in string constants, just write the "
"space."
msgstr ""

# type: Plain text
#: lispref/objects.texi:345
msgid ""
"A backslash is allowed, and harmless, preceding any character without a "
"special escape meaning; thus, @samp{?\\+} is equivalent to @samp{?+}.  There "
"is no reason to add a backslash before most characters.  However, you should "
"add a backslash before any of the characters @samp{()\\|;'`\"#.,} to avoid "
"confusing the Emacs commands for editing Lisp code.  You can also add a "
"backslash before whitespace characters such as space, tab, newline and "
"formfeed.  However, it is cleaner to use one of the easily readable escape "
"sequences, such as @samp{\\t} or @samp{\\s}, instead of an actual whitespace "
"character such as a tab or a space.  (If you do write backslash followed by "
"a space, you should write an extra space after the character constant to "
"separate it from the following text.)"
msgstr ""

# type: Plain text
#: lispref/objects.texi:352
msgid ""
"In addition to the specific excape sequences for special important control "
"characters, Emacs provides general categories of escape syntax that you can "
"use to specify non-ASCII text characters."
msgstr ""

# type: cindex
#: lispref/objects.texi:353
#, no-wrap
msgid "unicode character escape"
msgstr ""

# type: Plain text
#: lispref/objects.texi:362
msgid ""
"For instance, you can specify characters by their Unicode values.  @code{?"
"\\u@var{nnnn}} represents a character that maps to the Unicode code point "
"@samp{U+@var{nnnn}}.  There is a slightly different syntax for specifying "
"characters with code points above @code{#xFFFF}; @code{\\U00@var{nnnnnn}} "
"represents the character whose Unicode code point is @samp{U+@var{nnnnnn}}, "
"if such a character is supported by Emacs.  If the corresponding character "
"is not supported, Emacs signals an error."
msgstr ""

# type: Plain text
#: lispref/objects.texi:366
msgid ""
"This peculiar and inconvenient syntax was adopted for compatibility with "
"other programming languages.  Unlike some other languages, Emacs Lisp "
"supports this syntax in only character literals and strings."
msgstr ""

# type: cindex
#: lispref/objects.texi:367
#, no-wrap
msgid "@samp{\\} in character constant"
msgstr ""

# type: cindex
#: lispref/objects.texi:368
#, no-wrap
msgid "backslash in character constant"
msgstr ""

# type: cindex
#: lispref/objects.texi:369
#, no-wrap
msgid "octal character code"
msgstr ""

# type: Plain text
#: lispref/objects.texi:378
msgid ""
"The most general read syntax for a character represents the character code "
"in either octal or hex.  To use octal, write a question mark followed by a "
"backslash and the octal character code (up to three octal digits); thus, "
"@samp{?\\101} for the character @kbd{A}, @samp{?\\001} for the character @kbd"
"{C-a}, and @code{?\\002} for the character @kbd{C-b}.  Although this syntax "
"can represent any @acronym{ASCII} character, it is preferred only when the "
"precise octal value is more important than the @acronym{ASCII} "
"representation."
msgstr ""

# type: group
#: lispref/objects.texi:383
#, no-wrap
msgid ""
"?\\012 @result{} 10         ?\\n @result{} 10         ?\\C-j @result{} 10\n"
"?\\101 @result{} 65         ?A @result{} 65\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:391
msgid ""
"To use hex, write a question mark followed by a backslash, @samp{x}, and the "
"hexadecimal character code.  You can use any number of hex digits, so you "
"can represent any character code in this way.  Thus, @samp{?\\x41} for the "
"character @kbd{A}, @samp{?\\x1} for the character @kbd{C-a}, and @code{?"
"\\x8e0} for the Latin-1 character"
msgstr ""

# type: iftex
#: lispref/objects.texi:393
msgid "@samp{@`a}."
msgstr ""

# type: ifnottex
#: lispref/objects.texi:396
msgid "@samp{a} with grave accent."
msgstr ""

# type: subsubsection
#: lispref/objects.texi:399
#, no-wrap
msgid "Control-Character Syntax"
msgstr ""

# type: cindex
#: lispref/objects.texi:401
#, no-wrap
msgid "control characters"
msgstr ""

# type: Plain text
#: lispref/objects.texi:407
msgid ""
"Control characters can be represented using yet another read syntax.  This "
"consists of a question mark followed by a backslash, caret, and the "
"corresponding non-control character, in either upper or lower case.  For "
"example, both @samp{?\\^I} and @samp{?\\^i} are valid read syntax for the "
"character @kbd{C-i}, the character whose value is 9."
msgstr ""

# type: Plain text
#: lispref/objects.texi:410
msgid ""
"Instead of the @samp{^}, you can use @samp{C-}; thus, @samp{?\\C-i} is "
"equivalent to @samp{?\\^I} and to @samp{?\\^i}:"
msgstr ""

# type: example
#: lispref/objects.texi:413
#, no-wrap
msgid "?\\^I @result{} 9     ?\\C-I @result{} 9\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:419
msgid ""
"In strings and buffers, the only control characters allowed are those that "
"exist in @acronym{ASCII}; but for keyboard input purposes, you can turn any "
"character into a control character with @samp{C-}.  The character codes for "
"these non-@acronym{ASCII} control characters include the"
msgstr ""

# type: Plain text
#: lispref/objects.texi:429
msgid ""
"bit as well as the code for the corresponding non-control character.  "
"Ordinary terminals have no way of generating non-@acronym{ASCII} control "
"characters, but you can generate them straightforwardly using X and other "
"window systems."
msgstr ""

# type: Plain text
#: lispref/objects.texi:432
msgid ""
"For historical reasons, Emacs treats the @key{DEL} character as the control "
"equivalent of @kbd{?}:"
msgstr ""

# type: example
#: lispref/objects.texi:435
#, no-wrap
msgid "?\\^? @result{} 127     ?\\C-? @result{} 127\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:442
msgid ""
"As a result, it is currently not possible to represent the character @kbd"
"{Control-?}, which is a meaningful input character under X, using @samp"
"{\\C-}.  It is not easy to change this, as various Lisp files refer to @key"
"{DEL} in this way."
msgstr ""

# type: Plain text
#: lispref/objects.texi:448
msgid ""
"For representing control characters to be found in files or strings, we "
"recommend the @samp{^} syntax; for control characters in keyboard input, we "
"prefer the @samp{C-} syntax.  Which one you use does not affect the meaning "
"of the program, but may guide the understanding of people who read it."
msgstr ""

# type: subsubsection
#: lispref/objects.texi:450
#, no-wrap
msgid "Meta-Character Syntax"
msgstr ""

# type: cindex
#: lispref/objects.texi:452
#, no-wrap
msgid "meta characters"
msgstr ""

# type: Plain text
#: lispref/objects.texi:455
msgid ""
"A @dfn{meta character} is a character typed with the @key{META} modifier "
"key.  The integer that represents such a character has the"
msgstr ""

# type: Plain text
#: lispref/objects.texi:463
msgid ""
"bit set.  We use high bits for this and other modifiers to make possible a "
"wide range of basic character codes."
msgstr ""

# type: Plain text
#: lispref/objects.texi:465
msgid "In a string, the"
msgstr ""

# type: Plain text
#: lispref/objects.texi:476
msgid ""
"bit attached to an @acronym{ASCII} character indicates a meta character; "
"thus, the meta characters that can fit in a string have codes in the range "
"from 128 to 255, and are the meta versions of the ordinary @acronym{ASCII} "
"characters.  (In Emacs versions 18 and older, this convention was used for "
"characters outside of strings as well.)"
msgstr ""

# type: Plain text
#: lispref/objects.texi:483
msgid ""
"The read syntax for meta characters uses @samp{\\M-}.  For example, @samp{?"
"\\M-A} stands for @kbd{M-A}.  You can use @samp{\\M-} together with octal "
"character codes (see below), with @samp{\\C-}, or with any other syntax for "
"a character.  Thus, you can write @kbd{M-A} as @samp{?\\M-A}, or as @samp{?"
"\\M-\\101}.  Likewise, you can write @kbd{C-M-b} as @samp{?\\M-\\C-b}, @samp"
"{?\\C-\\M-b}, or @samp{?\\M-\\002}."
msgstr ""

# type: subsubsection
#: lispref/objects.texi:485
#, no-wrap
msgid "Other Character Modifier Bits"
msgstr ""

# type: Plain text
#: lispref/objects.texi:491
msgid ""
"The case of a graphic character is indicated by its character code; for "
"example, @acronym{ASCII} distinguishes between the characters @samp{a} and "
"@samp{A}.  But @acronym{ASCII} has no way to represent whether a control "
"character is upper case or lower case.  Emacs uses the"
msgstr ""

# type: Plain text
#: lispref/objects.texi:503
msgid ""
"bit to indicate that the shift key was used in typing a control character.  "
"This distinction is possible only when you use X terminals or other special "
"terminals; ordinary terminals do not report the distinction to the computer "
"in any way.  The Lisp syntax for the shift bit is @samp{\\S-}; thus, @samp{?"
"\\C-\\S-o} or @samp{?\\C-\\S-O} represents the shifted-control-o character."
msgstr ""

# type: cindex
#: lispref/objects.texi:504
#, no-wrap
msgid "hyper characters"
msgstr ""

# type: cindex
#: lispref/objects.texi:505
#, no-wrap
msgid "super characters"
msgstr ""

# type: cindex
#: lispref/objects.texi:506
#, no-wrap
msgid "alt characters"
msgstr ""

# type: Plain text
#: lispref/objects.texi:514
msgid ""
"The X Window System defines three other @anchor{modifier bits}modifier bits "
"that can be set in a character: @dfn{hyper}, @dfn{super} and @dfn{alt}.  The "
"syntaxes for these bits are @samp{\\H-}, @samp{\\s-} and @samp{\\A-}.  (Case "
"is significant in these prefixes.)  Thus, @samp{?\\H-\\M-\\A-x} represents "
"@kbd{Alt-Hyper-Meta-x}.  (Note that @samp{\\s} with no following @samp{-} "
"represents the space character.)"
msgstr ""

# type: tex
#: lispref/objects.texi:517
#, no-wrap
msgid ""
"Numerically, the bit values are @math{2^{22}} for alt, @math{2^{23}}\n"
"for super and @math{2^{24}} for hyper.\n"
msgstr ""

# type: ifnottex
#: lispref/objects.texi:521
msgid ""
"Numerically, the bit values are 2**22 for alt, 2**23 for super and 2**24 for "
"hyper."
msgstr ""

# type: Plain text
#: lispref/objects.texi:530
msgid ""
"A @dfn{symbol} in GNU Emacs Lisp is an object with a name.  The symbol name "
"serves as the printed representation of the symbol.  In ordinary Lisp use, "
"with one single obarray (@pxref{Creating Symbols}, a symbol's name is "
"unique---no two symbols have the same name."
msgstr ""

# type: Plain text
#: lispref/objects.texi:537
msgid ""
"A symbol can serve as a variable, as a function name, or to hold a property "
"list.  Or it may serve only to be distinct from all other Lisp objects, so "
"that its presence in a data structure may be recognized reliably.  In a "
"given context, usually only one of these uses is intended.  But you can use "
"one symbol in all of these ways, independently."
msgstr ""

# type: Plain text
#: lispref/objects.texi:542
msgid ""
"A symbol whose name starts with a colon (@samp{:}) is called a @dfn{keyword "
"symbol}.  These symbols automatically act as constants, and are normally "
"used only by comparing an unknown symbol with a few specific alternatives."
msgstr ""

# type: cindex
#: lispref/objects.texi:543
#, no-wrap
msgid "@samp{\\} in symbols"
msgstr ""

# type: cindex
#: lispref/objects.texi:544
#, no-wrap
msgid "backslash in symbols"
msgstr ""

# type: Plain text
#: lispref/objects.texi:560
msgid ""
"A symbol name can contain any characters whatever.  Most symbol names are "
"written with letters, digits, and the punctuation characters @samp{-+=*/}.  "
"Such names require no special punctuation; the characters of the name "
"suffice as long as the name does not look like a number.  (If it does, write "
"a @samp{\\} at the beginning of the name to force interpretation as a "
"symbol.)  The characters @samp{_~!@@$%^&:<>@{@}?} are less often used but "
"also require no special punctuation.  Any other characters may be included "
"in a symbol's name by escaping them with a backslash.  In contrast to its "
"use in strings, however, a backslash in the name of a symbol simply quotes "
"the single character that follows the backslash.  For example, in a string, "
"@samp{\\t} represents a tab character; in the name of a symbol, however, "
"@samp{\\t} merely quotes the letter @samp{t}.  To have a symbol with a tab "
"character in its name, you must actually use a tab (preceded with a "
"backslash).  But it's rare to do such a thing."
msgstr ""

# type: cindex
#: lispref/objects.texi:561
#, no-wrap
msgid "CL note---case of letters"
msgstr ""

# type: quotation
#: lispref/objects.texi:566
msgid ""
"@b{Common Lisp note:} In Common Lisp, lower case letters are always "
"``folded'' to upper case, unless they are explicitly escaped.  In Emacs "
"Lisp, upper case and lower case letters are distinct."
msgstr ""

# type: Plain text
#: lispref/objects.texi:572
msgid ""
"Here are several examples of symbol names.  Note that the @samp{+} in the "
"fifth example is escaped to prevent it from being read as a number.  This is "
"not necessary in the fourth example because the rest of the name makes it "
"invalid as a number."
msgstr ""

# type: group
#: lispref/objects.texi:578
#, no-wrap
msgid ""
"foo                 ; @r{A symbol named @samp{foo}.}\n"
"FOO                 ; @r{A symbol named @samp{FOO}, different from @samp{foo}.}\n"
"char-to-string      ; @r{A symbol named @samp{char-to-string}.}\n"
msgstr ""

# type: group
#: lispref/objects.texi:582
#, no-wrap
msgid ""
"1+                  ; @r{A symbol named @samp{1+}}\n"
"                    ;   @r{(not @samp{+1}, which is an integer).}\n"
msgstr ""

# type: group
#: lispref/objects.texi:586
#, no-wrap
msgid ""
"\\+1                 ; @r{A symbol named @samp{+1}}\n"
"                    ;   @r{(not a very readable name).}\n"
msgstr ""

# type: group
#: lispref/objects.texi:593
#, no-wrap
msgid ""
"\\(*\\ 1\\ 2\\)         ; @r{A symbol named @samp{(* 1 2)} (a worse name).}\n"
"+-*/_~!@@$%^&=:<>@{@}  ; @r{A symbol named @samp{+-*/_~!@@$%^&=:<>@{@}}.}\n"
"                    ;   @r{These characters need not be escaped.}\n"
msgstr ""

# type: cindex
#: lispref/objects.texi:599
#, no-wrap
msgid "@samp{#@var{colon}} read syntax"
msgstr ""

# type: cindex
#: lispref/objects.texi:602
#, no-wrap
msgid "@samp{#:} read syntax"
msgstr ""

# type: Plain text
#: lispref/objects.texi:607
msgid ""
"Normally the Lisp reader interns all symbols (@pxref{Creating Symbols}).  To "
"prevent interning, you can write @samp{#:} before the name of the symbol."
msgstr ""

# type: subsection
#: lispref/objects.texi:609
#, no-wrap
msgid "Sequence Types"
msgstr ""

# type: Plain text
#: lispref/objects.texi:615
msgid ""
"A @dfn{sequence} is a Lisp object that represents an ordered set of "
"elements.  There are two kinds of sequence in Emacs Lisp, lists and arrays.  "
"Thus, an object of type list or of type array is also considered a sequence."
msgstr ""

# type: Plain text
#: lispref/objects.texi:624
msgid ""
"Arrays are further subdivided into strings, vectors, char-tables and bool-"
"vectors.  Vectors can hold elements of any type, but string elements must be "
"characters, and bool-vector elements must be @code{t} or @code{nil}.  Char-"
"tables are like vectors except that they are indexed by any valid character "
"code.  The characters in a string can have text properties like characters "
"in a buffer (@pxref{Text Properties}), but vectors do not support text "
"properties, even when their elements happen to be characters."
msgstr ""

# type: Plain text
#: lispref/objects.texi:632
msgid ""
"Lists, strings and the other array types are different, but they have "
"important similarities.  For example, all have a length @var{l}, and all "
"have elements which can be indexed from zero to @var{l} minus one.  Several "
"functions, called sequence functions, accept any kind of sequence.  For "
"example, the function @code{elt} can be used to extract an element of a "
"sequence, given its index.  @xref{Sequences Arrays Vectors}."
msgstr ""

# type: Plain text
#: lispref/objects.texi:638
msgid ""
"It is generally impossible to read the same sequence twice, since sequences "
"are always created anew upon reading.  If you read the read syntax for a "
"sequence twice, you get two sequences with equal contents.  There is one "
"exception: the empty list @code{()} always stands for the same object, @code"
"{nil}."
msgstr ""

# type: subsection
#: lispref/objects.texi:640
#, no-wrap
msgid "Cons Cell and List Types"
msgstr ""

# type: cindex
#: lispref/objects.texi:641
#, no-wrap
msgid "address field of register"
msgstr ""

# type: cindex
#: lispref/objects.texi:642
#, no-wrap
msgid "decrement field of register"
msgstr ""

# type: cindex
#: lispref/objects.texi:643
#, no-wrap
msgid "pointers"
msgstr ""

# type: Plain text
#: lispref/objects.texi:650
msgid ""
"A @dfn{cons cell} is an object that consists of two slots, called the @sc"
"{car} slot and the @sc{cdr} slot.  Each slot can @dfn{hold} or @dfn{refer "
"to} any Lisp object.  We also say that ``the @sc{car} of this cons cell is'' "
"whatever object its @sc{car} slot currently holds, and likewise for the @sc"
"{cdr}."
msgstr ""

# type: quotation
#: lispref/objects.texi:655
msgid ""
"A note to C programmers: in Lisp, we do not distinguish between ``holding'' "
"a value and ``pointing to'' the value, because pointers in Lisp are implicit."
msgstr ""

# type: Plain text
#: lispref/objects.texi:663
msgid ""
"A @dfn{list} is a series of cons cells, linked together so that the @sc{cdr} "
"slot of each cons cell holds either the next cons cell or the empty list.  "
"The empty list is actually the symbol @code{nil}.  @xref{Lists}, for "
"functions that work on lists.  Because most cons cells are used as part of "
"lists, the phrase @dfn{list structure} has come to refer to any structure "
"made out of cons cells."
msgstr ""

# type: cindex
#: lispref/objects.texi:664
#, no-wrap
msgid "atoms"
msgstr ""

# type: Plain text
#: lispref/objects.texi:668
msgid ""
"Because cons cells are so central to Lisp, we also have a word for ``an "
"object which is not a cons cell.'' These objects are called @dfn{atoms}."
msgstr ""

# type: cindex
#: lispref/objects.texi:669
#, no-wrap
msgid "parenthesis"
msgstr ""

# type: cindex
#: lispref/objects.texi:670
#, no-wrap
msgid "@samp{(@dots{})} in lists"
msgstr ""

# type: Plain text
#: lispref/objects.texi:674
msgid ""
"The read syntax and printed representation for lists are identical, and "
"consist of a left parenthesis, an arbitrary number of elements, and a right "
"parenthesis.  Here are examples of lists:"
msgstr ""

# type: example
#: lispref/objects.texi:684
#, no-wrap
msgid ""
"(A 2 \"A\")            ; @r{A list of three elements.}\n"
"()                   ; @r{A list of no elements (the empty list).}\n"
"nil                  ; @r{A list of no elements (the empty list).}\n"
"(\"A ()\")             ; @r{A list of one element: the string @code{\"A ()\"}.}\n"
"(A ())               ; @r{A list of two elements: @code{A} and the empty list.}\n"
"(A nil)              ; @r{Equivalent to the previous.}\n"
"((A B C))            ; @r{A list of one element}\n"
"                     ;   @r{(which is a list of three elements).}\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:692
msgid ""
"Upon reading, each object inside the parentheses becomes an element of the "
"list.  That is, a cons cell is made for each element.  The @sc{car} slot of "
"the cons cell holds the element, and its @sc{cdr} slot refers to the next "
"cons cell of the list, which holds the next element in the list.  The @sc"
"{cdr} slot of the last cons cell is set to hold @code{nil}."
msgstr ""

# type: Plain text
#: lispref/objects.texi:701
msgid ""
"The names @sc{car} and @sc{cdr} derive from the history of Lisp.  The "
"original Lisp implementation ran on an @w{IBM 704} computer which divided "
"words into two parts, called the ``address'' part and the ``decrement''; @sc"
"{car} was an instruction to extract the contents of the address part of a "
"register, and @sc{cdr} an instruction to extract the contents of the "
"decrement.  By contrast, ``cons cells'' are named for the function @code"
"{cons} that creates them, which in turn was named for its purpose, the "
"construction of cells."
msgstr ""

# type: node
#: lispref/objects.texi:706 lispref/objects.texi:708
#, no-wrap
msgid "Box Diagrams"
msgstr ""

# type: menu
#: lispref/objects.texi:706
msgid "Drawing pictures of lists."
msgstr ""

# type: menu
#: lispref/objects.texi:706 lispref/objects.texi:817 lispref/objects.texi:818
#: lispref/vol1.texi:336 lispref/vol2.texi:337
#, no-wrap
msgid "Dotted Pair Notation"
msgstr ""

# type: menu
#: lispref/objects.texi:706
msgid "A general syntax for cons cells."
msgstr ""

# type: menu
#: lispref/objects.texi:706 lispref/objects.texi:903 lispref/objects.texi:905
#: lispref/vol1.texi:336 lispref/vol2.texi:337
#, no-wrap
msgid "Association List Type"
msgstr ""

# type: menu
#: lispref/objects.texi:706 lispref/vol1.texi:336 lispref/vol2.texi:337
msgid "A specially constructed list."
msgstr ""

# type: subsubsection
#: lispref/objects.texi:709
#, no-wrap
msgid "Drawing Lists as Box Diagrams"
msgstr ""

# type: cindex
#: lispref/objects.texi:710
#, no-wrap
msgid "box diagrams, for lists"
msgstr ""

# type: cindex
#: lispref/objects.texi:711
#, no-wrap
msgid "diagrams, boxed, for lists"
msgstr ""

# type: Plain text
#: lispref/objects.texi:719
msgid ""
"A list can be illustrated by a diagram in which the cons cells are shown as "
"pairs of boxes, like dominoes.  (The Lisp reader cannot read such an "
"illustration; unlike the textual notation, which can be understood by both "
"humans and computers, the box illustrations can be understood only by "
"humans.)  This picture represents the three-element list @code{(rose violet "
"buttercup)}:"
msgstr ""

# type: group
#: lispref/objects.texi:728 lispref/objects.texi:899
#, no-wrap
msgid ""
"    --- ---      --- ---      --- ---\n"
"   |   |   |--> |   |   |--> |   |   |--> nil\n"
"    --- ---      --- ---      --- ---\n"
"     |            |            |\n"
"     |            |            |\n"
"      --> rose     --> violet   --> buttercup\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:735
msgid ""
"In this diagram, each box represents a slot that can hold or refer to any "
"Lisp object.  Each pair of boxes represents a cons cell.  Each arrow "
"represents a reference to a Lisp object, either an atom or another cons cell."
msgstr ""

# type: Plain text
#: lispref/objects.texi:742
msgid ""
"In this example, the first box, which holds the @sc{car} of the first cons "
"cell, refers to or ``holds'' @code{rose} (a symbol).  The second box, "
"holding the @sc{cdr} of the first cons cell, refers to the next pair of "
"boxes, the second cons cell.  The @sc{car} of the second cons cell is @code"
"{violet}, and its @sc{cdr} is the third cons cell.  The @sc{cdr} of the "
"third (and last) cons cell is @code{nil}."
msgstr ""

# type: Plain text
#: lispref/objects.texi:745
msgid ""
"Here is another diagram of the same list, @code{(rose violet buttercup)}, "
"sketched in a different manner:"
msgstr ""

# type: group
#: lispref/objects.texi:753
#, no-wrap
msgid ""
" ---------------       ----------------       -------------------\n"
"| car   | cdr   |     | car    | cdr   |     | car       | cdr   |\n"
"| rose  |   o-------->| violet |   o-------->| buttercup |  nil  |\n"
"|       |       |     |        |       |     |           |       |\n"
" ---------------       ----------------       -------------------\n"
msgstr ""

# type: cindex
#: lispref/objects.texi:756
#, no-wrap
msgid "@code{nil} as a list"
msgstr ""

# type: cindex
#: lispref/objects.texi:757
#, no-wrap
msgid "empty list"
msgstr ""

# type: Plain text
#: lispref/objects.texi:761
msgid ""
"A list with no elements in it is the @dfn{empty list}; it is identical to "
"the symbol @code{nil}.  In other words, @code{nil} is both a symbol and a "
"list."
msgstr ""

# type: Plain text
#: lispref/objects.texi:764
msgid ""
"Here is the list @code{(A ())}, or equivalently @code{(A nil)}, depicted "
"with boxes and arrows:"
msgstr ""

# type: group
#: lispref/objects.texi:773
#, no-wrap
msgid ""
"    --- ---      --- ---\n"
"   |   |   |--> |   |   |--> nil\n"
"    --- ---      --- ---\n"
"     |            |\n"
"     |            |\n"
"      --> A        --> nil\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:779
msgid ""
"Here is a more complex illustration, showing the three-element list, @code"
"{((pine needles) oak maple)}, the first element of which is a two-element "
"list:"
msgstr ""

# type: group
#: lispref/objects.texi:795
#, no-wrap
msgid ""
"    --- ---      --- ---      --- ---\n"
"   |   |   |--> |   |   |--> |   |   |--> nil\n"
"    --- ---      --- ---      --- ---\n"
"     |            |            |\n"
"     |            |            |\n"
"     |             --> oak      --> maple\n"
"     |\n"
"     |     --- ---      --- ---\n"
"      --> |   |   |--> |   |   |--> nil\n"
"           --- ---      --- ---\n"
"            |            |\n"
"            |            |\n"
"             --> pine     --> needles\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:799
msgid "The same list represented in the second box notation looks like this:"
msgstr ""

# type: group
#: lispref/objects.texi:814
#, no-wrap
msgid ""
" --------------       --------------       --------------\n"
"| car   | cdr  |     | car   | cdr  |     | car   | cdr  |\n"
"|   o   |   o------->| oak   |   o------->| maple |  nil |\n"
"|   |   |      |     |       |      |     |       |      |\n"
" -- | ---------       --------------       --------------\n"
"    |\n"
"    |\n"
"    |        --------------       ----------------\n"
"    |       | car   | cdr  |     | car     | cdr  |\n"
"     ------>| pine  |   o------->| needles |  nil |\n"
"            |       |      |     |         |      |\n"
"             --------------       ----------------\n"
msgstr ""

# type: cindex
#: lispref/objects.texi:819
#, no-wrap
msgid "dotted pair notation"
msgstr ""

# type: cindex
#: lispref/objects.texi:820
#, no-wrap
msgid "@samp{.} in lists"
msgstr ""

# type: Plain text
#: lispref/objects.texi:834
msgid ""
"@dfn{Dotted pair notation} is a general syntax for cons cells that "
"represents the @sc{car} and @sc{cdr} explicitly.  In this syntax, @code{(@var"
"{a} .@: @var{b})} stands for a cons cell whose @sc{car} is the object @var"
"{a} and whose @sc{cdr} is the object @var{b}.  Dotted pair notation is more "
"general than list syntax because the @sc{cdr} does not have to be a list.  "
"However, it is more cumbersome in cases where list syntax would work.  In "
"dotted pair notation, the list @samp{(1 2 3)} is written as @samp{(1 .  (2 . "
"(3 . nil)))}.  For @code{nil}-terminated lists, you can use either notation, "
"but list notation is usually clearer and more convenient.  When printing a "
"list, the dotted pair notation is only used if the @sc{cdr} of a cons cell "
"is not a list."
msgstr ""

# type: Plain text
#: lispref/objects.texi:837
msgid ""
"Here's an example using boxes to illustrate dotted pair notation.  This "
"example shows the pair @code{(rose . violet)}:"
msgstr ""

# type: group
#: lispref/objects.texi:846
#, no-wrap
msgid ""
"    --- ---\n"
"   |   |   |--> violet\n"
"    --- ---\n"
"     |\n"
"     |\n"
"      --> rose\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:855
msgid ""
"You can combine dotted pair notation with list notation to represent "
"conveniently a chain of cons cells with a non-@code{nil} final @sc{cdr}.  "
"You write a dot after the last element of the list, followed by the @sc{cdr} "
"of the final cons cell.  For example, @code{(rose violet . buttercup)} is "
"equivalent to @code{(rose . (violet . buttercup))}.  The object looks like "
"this:"
msgstr ""

# type: group
#: lispref/objects.texi:864
#, no-wrap
msgid ""
"    --- ---      --- ---\n"
"   |   |   |--> |   |   |--> buttercup\n"
"    --- ---      --- ---\n"
"     |            |\n"
"     |            |\n"
"      --> rose     --> violet\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:871
msgid ""
"The syntax @code{(rose .@: violet .@: buttercup)} is invalid because there "
"is nothing that it could mean.  If anything, it would say to put @code"
"{buttercup} in the @sc{cdr} of a cons cell whose @sc{cdr} is already used "
"for @code{violet}."
msgstr ""

# type: Plain text
#: lispref/objects.texi:874
msgid ""
"The list @code{(rose violet)} is equivalent to @code{(rose . (violet))}, and "
"looks like this:"
msgstr ""

# type: group
#: lispref/objects.texi:883
#, no-wrap
msgid ""
"    --- ---      --- ---\n"
"   |   |   |--> |   |   |--> nil\n"
"    --- ---      --- ---\n"
"     |            |\n"
"     |            |\n"
"      --> rose     --> violet\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:888
msgid ""
"Similarly, the three-element list @code{(rose violet buttercup)} is "
"equivalent to @code{(rose . (violet . (buttercup)))}."
msgstr ""

# type: ifnottex
#: lispref/objects.texi:890
msgid "It looks like this:"
msgstr ""

# type: Plain text
#: lispref/objects.texi:914
msgid ""
"An @dfn{association list} or @dfn{alist} is a specially-constructed list "
"whose elements are cons cells.  In each element, the @sc{car} is considered "
"a @dfn{key}, and the @sc{cdr} is considered an @dfn{associated value}.  (In "
"some cases, the associated value is stored in the @sc{car} of the @sc"
"{cdr}.)  Association lists are often used as stacks, since it is easy to add "
"or remove associations at the front of the list."
msgstr ""

# type: example
#: lispref/objects.texi:920
#, no-wrap
msgid ""
"(setq alist-of-colors\n"
"      '((rose . red) (lily . white) (buttercup . yellow)))\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:925
msgid ""
"sets the variable @code{alist-of-colors} to an alist of three elements.  In "
"the first element, @code{rose} is the key and @code{red} is the value."
msgstr ""

# type: Plain text
#: lispref/objects.texi:929
msgid ""
"@xref{Association Lists}, for a further explanation of alists and for "
"functions that work on alists.  @xref{Hash Tables}, for another kind of "
"lookup table, which is much faster for handling a large number of keys."
msgstr ""

# type: Plain text
#: lispref/objects.texi:940
msgid ""
"An @dfn{array} is composed of an arbitrary number of slots for holding or "
"referring to other Lisp objects, arranged in a contiguous block of memory.  "
"Accessing any element of an array takes approximately the same amount of "
"time.  In contrast, accessing an element of a list requires time "
"proportional to the position of the element in the list.  (Elements at the "
"end of a list take longer to access than elements at the beginning of a "
"list.)"
msgstr ""

# type: Plain text
#: lispref/objects.texi:943
msgid ""
"Emacs defines four types of array: strings, vectors, bool-vectors, and char-"
"tables."
msgstr ""

# type: Plain text
#: lispref/objects.texi:949
msgid ""
"A string is an array of characters and a vector is an array of arbitrary "
"objects.  A bool-vector can hold only @code{t} or @code{nil}.  These kinds "
"of array may have any length up to the largest integer.  Char-tables are "
"sparse arrays indexed by any valid character code; they can hold arbitrary "
"objects."
msgstr ""

# type: Plain text
#: lispref/objects.texi:955
msgid ""
"The first element of an array has index zero, the second element has index "
"1, and so on.  This is called @dfn{zero-origin} indexing.  For example, an "
"array of four elements has indices 0, 1, 2, @w{and 3}.  The largest possible "
"index value is one less than the length of the array.  Once an array is "
"created, its length is fixed."
msgstr ""

# type: Plain text
#: lispref/objects.texi:961
msgid ""
"All Emacs Lisp arrays are one-dimensional.  (Most other programming "
"languages support multidimensional arrays, but they are not essential; you "
"can get the same effect with nested one-dimensional arrays.)  Each type of "
"array has its own read syntax; see the following sections for details."
msgstr ""

# type: Plain text
#: lispref/objects.texi:965
msgid ""
"The array type is a subset of the sequence type, and contains the string "
"type, the vector type, the bool-vector type, and the char-table type."
msgstr ""

# type: Plain text
#: lispref/objects.texi:974
msgid ""
"A @dfn{string} is an array of characters.  Strings are used for many "
"purposes in Emacs, as can be expected in a text editor; for example, as the "
"names of Lisp symbols, as messages for the user, and to represent text "
"extracted from buffers.  Strings in Lisp are constants: evaluation of a "
"string returns the same string."
msgstr ""

# type: Plain text
#: lispref/objects.texi:976
msgid "@xref{Strings and Characters}, for functions that operate on strings."
msgstr ""

# type: subsubsection
#: lispref/objects.texi:982 lispref/objects.texi:984 lispref/objects.texi:985
#, no-wrap
msgid "Syntax for Strings"
msgstr ""

# type: node
#: lispref/objects.texi:982 lispref/objects.texi:1016
#, no-wrap
msgid "Non-ASCII in Strings"
msgstr ""

# type: node
#: lispref/objects.texi:982 lispref/objects.texi:1054
#, no-wrap
msgid "Nonprinting Characters"
msgstr ""

# type: node
#: lispref/objects.texi:982 lispref/objects.texi:1087
#, no-wrap
msgid "Text Props and Strings"
msgstr ""

# type: cindex
#: lispref/objects.texi:987
#, no-wrap
msgid "@samp{\"} in strings"
msgstr ""

# type: cindex
#: lispref/objects.texi:988
#, no-wrap
msgid "double-quote in strings"
msgstr ""

# type: cindex
#: lispref/objects.texi:989
#, no-wrap
msgid "@samp{\\} in strings"
msgstr ""

# type: cindex
#: lispref/objects.texi:990
#, no-wrap
msgid "backslash in strings"
msgstr ""

# type: Plain text
#: lispref/objects.texi:997
msgid ""
"The read syntax for strings is a double-quote, an arbitrary number of "
"characters, and another double-quote, @code{\"like this\"}.  To include a "
"double-quote in a string, precede it with a backslash; thus, @code{\"\\\"\"} "
"is a string containing just a single double-quote character.  Likewise, you "
"can include a backslash by preceding it with another backslash, like this: "
"@code{\"this \\\\ is a single embedded backslash\"}."
msgstr ""

# type: cindex
#: lispref/objects.texi:998
#, no-wrap
msgid "newline in strings"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1005
msgid ""
"The newline character is not special in the read syntax for strings; if you "
"write a new line between the double-quotes, it becomes a character in the "
"string.  But an escaped newline---one that is preceded by @samp{\\}---does "
"not become part of the string; i.e., the Lisp reader ignores an escaped "
"newline while reading a string.  An escaped space @w{@samp{\\ }} is likewise "
"ignored."
msgstr ""

# type: example
#: lispref/objects.texi:1014
#, no-wrap
msgid ""
"\"It is useful to include newlines\n"
"in documentation strings,\n"
"but the newline is \\\n"
"ignored if escaped.\"\n"
"     @result{} \"It is useful to include newlines\n"
"in documentation strings,\n"
"but the newline is ignored if escaped.\"\n"
msgstr ""

# type: subsubsection
#: lispref/objects.texi:1017
#, no-wrap
msgid "Non-@acronym{ASCII} Characters in Strings"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1028
msgid ""
"You can include a non-@acronym{ASCII} international character in a string "
"constant by writing it literally.  There are two text representations for "
"non-@acronym{ASCII} characters in Emacs strings (and in buffers): unibyte "
"and multibyte.  If the string constant is read from a multibyte source, such "
"as a multibyte buffer or string, or a file that would be visited as "
"multibyte, then the character is read as a multibyte character, and that "
"makes the string multibyte.  If the string constant is read from a unibyte "
"source, then the character is read as unibyte and that makes the string "
"unibyte."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1039
msgid ""
"You can also represent a multibyte non-@acronym{ASCII} character with its "
"character code: use a hex escape, @samp{\\x@var{nnnnnnn}}, with as many "
"digits as necessary.  (Multibyte non-@acronym{ASCII} character codes are all "
"greater than 256.)  Any character which is not a valid hex digit terminates "
"this construct.  If the next character in the string could be interpreted as "
"a hex digit, write @w{@samp{\\ }} (backslash and space) to terminate the hex "
"escape---for example, @w{@samp{\\x8e0\\ }} represents one character, @samp"
"{a} with grave accent.  @w{@samp{\\ }} in a string constant is just like "
"backslash-newline; it does not contribute any character to the string, but "
"it does terminate the preceding hex escape."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1047
msgid ""
"You can represent a unibyte non-@acronym{ASCII} character with its character "
"code, which must be in the range from 128 (0200 octal) to 255 (0377 octal).  "
"If you write all such character codes in octal and the string contains no "
"other characters forcing it to be multibyte, this produces a unibyte "
"string.  However, using any hex escape in a string (even for an @acronym"
"{ASCII} character) forces the string to be multibyte."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1050
msgid ""
"You can also specify characters in a string by their numeric values in "
"Unicode, using @samp{\\u} and @samp{\\U} (@pxref{Character Type})."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1053
msgid ""
"@xref{Text Representations}, for more information about the two text "
"representations."
msgstr ""

# type: subsubsection
#: lispref/objects.texi:1055
#, no-wrap
msgid "Nonprinting Characters in Strings"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1063
msgid ""
"You can use the same backslash escape-sequences in a string constant as in "
"character literals (but do not use the question mark that begins a character "
"constant).  For example, you can write a string containing the nonprinting "
"characters tab and @kbd{C-a}, with commas and spaces between them, like "
"this: @code{\"\\t, \\C-a\"}.  @xref{Character Type}, for a description of "
"the read syntax for characters."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1068
msgid ""
"However, not all of the characters you can write with backslash escape-"
"sequences are valid in strings.  The only control characters that a string "
"can hold are the @acronym{ASCII} control characters.  Strings do not "
"distinguish case in @acronym{ASCII} control characters."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1074
msgid ""
"Properly speaking, strings cannot hold meta characters; but when a string is "
"to be used as a key sequence, there is a special convention that provides a "
"way to represent meta versions of @acronym{ASCII} characters in a string.  "
"If you use the @samp{\\M-} syntax to indicate a meta character in a string "
"constant, this sets the"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1083
msgid ""
"bit of the character in the string.  If the string is used in @code{define-"
"key} or @code{lookup-key}, this numeric code is translated into the "
"equivalent meta character.  @xref{Character Type}."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1086
msgid ""
"Strings cannot hold characters that have the hyper, super, or alt modifiers."
msgstr ""

# type: subsubsection
#: lispref/objects.texi:1088
#, no-wrap
msgid "Text Properties in Strings"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1096
msgid ""
"A string can hold properties for the characters it contains, in addition to "
"the characters themselves.  This enables programs that copy text between "
"strings and buffers to copy the text's properties with no special effort.  "
"@xref{Text Properties}, for an explanation of what text properties mean.  "
"Strings with text properties use a special read and print syntax:"
msgstr ""

# type: example
#: lispref/objects.texi:1099
#, no-wrap
msgid "#(\"@var{characters}\" @var{property-data}...)\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1104
msgid ""
"where @var{property-data} consists of zero or more elements, in groups of "
"three as follows:"
msgstr ""

# type: example
#: lispref/objects.texi:1107
#, no-wrap
msgid "@var{beg} @var{end} @var{plist}\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1113
msgid ""
"The elements @var{beg} and @var{end} are integers, and together specify a "
"range of indices in the string; @var{plist} is the property list for that "
"range.  For example,"
msgstr ""

# type: example
#: lispref/objects.texi:1116
#, no-wrap
msgid "#(\"foo bar\" 0 3 (face bold) 3 4 nil 4 7 (face italic))\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1126
msgid ""
"represents a string whose textual contents are @samp{foo bar}, in which the "
"first three characters have a @code{face} property with value @code{bold}, "
"and the last three have a @code{face} property with value @code{italic}.  "
"(The fourth character has no text properties, so its property list is @code"
"{nil}.  It is not actually necessary to mention ranges with @code{nil} as "
"the property list, since any characters not mentioned in any range will "
"default to having no properties.)"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1134
msgid ""
"A @dfn{vector} is a one-dimensional array of elements of any type.  It takes "
"a constant amount of time to access any element of a vector.  (In a list, "
"the access time of an element is proportional to the distance of the element "
"from the beginning of the list.)"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1139
msgid ""
"The printed representation of a vector consists of a left square bracket, "
"the elements, and a right square bracket.  This is also the read syntax.  "
"Like numbers and strings, vectors are considered constants for evaluation."
msgstr ""

# type: example
#: lispref/objects.texi:1143
#, no-wrap
msgid ""
"[1 \"two\" (three)]      ; @r{A vector of three elements.}\n"
"     @result{} [1 \"two\" (three)]\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1146
msgid "@xref{Vectors}, for functions that work with vectors."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1157
msgid ""
"A @dfn{char-table} is a one-dimensional array of elements of any type, "
"indexed by character codes.  Char-tables have certain extra features to make "
"them more useful for many jobs that involve assigning information to "
"character codes---for example, a char-table can have a parent to inherit "
"from, a default value, and a small number of extra slots to use for special "
"purposes.  A char-table can also specify a single value for a whole "
"character set."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1160
msgid ""
"The printed representation of a char-table is like a vector except that "
"there is an extra @samp{#^} at the beginning."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1163
msgid ""
"@xref{Char-Tables}, for special functions to operate on char-tables.  Uses "
"of char-tables include:"
msgstr ""

# type: itemize
#: lispref/objects.texi:1167
msgid "Case tables (@pxref{Case Tables})."
msgstr ""

# type: itemize
#: lispref/objects.texi:1170
msgid "Character category tables (@pxref{Categories})."
msgstr ""

# type: itemize
#: lispref/objects.texi:1173
msgid "Display tables (@pxref{Display Tables})."
msgstr ""

# type: itemize
#: lispref/objects.texi:1176
msgid "Syntax tables (@pxref{Syntax Tables})."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1183
msgid ""
"A @dfn{bool-vector} is a one-dimensional array of elements that must be @code"
"{t} or @code{nil}."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1191
msgid ""
"The printed representation of a bool-vector is like a string, except that it "
"begins with @samp{#&} followed by the length.  The string constant that "
"follows actually specifies the contents of the bool-vector as a bitmap---"
"each ``character'' in the string contains 8 bits, which specify the next 8 "
"elements of the bool-vector (1 stands for @code{t}, and 0 for @code{nil}).  "
"The least significant bits of the character correspond to the lowest indices "
"in the bool-vector."
msgstr ""

# type: example
#: lispref/objects.texi:1197
#, no-wrap
msgid ""
"(make-bool-vector 3 t)\n"
"     @result{} #&3\"^G\"\n"
"(make-bool-vector 3 nil)\n"
"     @result{} #&3\"^@@\"\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1202
msgid ""
"These results make sense, because the binary code for @samp{C-g} is 111 and "
"@samp{C-@@} is the character with code 0."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1207
msgid ""
"If the length is not a multiple of 8, the printed representation shows extra "
"elements, but these extras really make no difference.  For instance, in the "
"next example, the two bool-vectors are equal, because only the first 3 bits "
"are used:"
msgstr ""

# type: example
#: lispref/objects.texi:1211
#, no-wrap
msgid ""
"(equal #&3\"\\377\" #&3\"\\007\")\n"
"     @result{} t\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1220
msgid ""
"A hash table is a very fast kind of lookup table, somewhat like an alist in "
"that it maps keys to corresponding values, but much faster.  Hash tables "
"have no read syntax, and print using hash notation.  @xref{Hash Tables}, for "
"functions that operate on hash tables."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1234
msgid ""
"Lisp functions are executable code, just like functions in other programming "
"languages.  In Lisp, unlike most languages, functions are also Lisp "
"objects.  A non-compiled function in Lisp is a lambda expression: that is, a "
"list whose first element is the symbol @code{lambda} (@pxref{Lambda "
"Expressions})."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1242
msgid ""
"In most programming languages, it is impossible to have a function without a "
"name.  In Lisp, a function has no intrinsic name.  A lambda expression can "
"be called as a function even though it has no name; to emphasize this, we "
"also call it an @dfn{anonymous function} (@pxref{Anonymous Functions}).  A "
"named function in Lisp is just a symbol with a valid function in its "
"function cell (@pxref{Defining Functions})."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1247
msgid ""
"Most of the time, functions are called when their names are written in Lisp "
"expressions in Lisp programs.  However, you can construct or obtain a "
"function object at run time and then call it with the primitive functions "
"@code{funcall} and @code{apply}.  @xref{Calling Functions}."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1256
msgid ""
"A @dfn{Lisp macro} is a user-defined construct that extends the Lisp "
"language.  It is represented as an object much like a function, but with "
"different argument-passing semantics.  A Lisp macro has the form of a list "
"whose first element is the symbol @code{macro} and whose @sc{cdr} is a Lisp "
"function object, including the @code{lambda} symbol."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1261
msgid ""
"Lisp macro objects are usually defined with the built-in @code{defmacro} "
"function, but any list that begins with @code{macro} is a macro as far as "
"Emacs is concerned.  @xref{Macros}, for an explanation of how to write a "
"macro."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1265
msgid ""
"@strong{Warning}: Lisp macros and keyboard macros (@pxref{Keyboard Macros}) "
"are entirely different things.  When we use the word ``macro'' without "
"qualification, we mean a Lisp macro, not a keyboard macro."
msgstr ""

# type: cindex
#: lispref/objects.texi:1268
#, no-wrap
msgid "special forms"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1277
msgid ""
"A @dfn{primitive function} is a function callable from Lisp but written in "
"the C programming language.  Primitive functions are also called @dfn{subrs} "
"or @dfn{built-in functions}.  (The word ``subr'' is derived from "
"``subroutine.'')  Most primitive functions evaluate all their arguments when "
"they are called.  A primitive function that does not evaluate all its "
"arguments is called a @dfn{special form} (@pxref{Special Forms})."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1285
msgid ""
"It does not matter to the caller of a function whether the function is "
"primitive.  However, this does matter if you try to redefine a primitive "
"with a function written in Lisp.  The reason is that the primitive function "
"may be called directly from C code.  Calls to the redefined function from "
"Lisp will use the new definition, but calls from C code may still use the "
"built-in definition.  Therefore, @strong{we discourage redefinition of "
"primitive functions}."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1289
msgid ""
"The term @dfn{function} refers to all Emacs functions, whether written in "
"Lisp or C.  @xref{Function Type}, for information about the functions "
"written in Lisp."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1292
msgid ""
"Primitive functions have no read syntax and print in hash notation with the "
"name of the subroutine."
msgstr ""

# type: group
#: lispref/objects.texi:1300
#, no-wrap
msgid ""
"(symbol-function 'car)          ; @r{Access the function cell}\n"
"                                ;   @r{of the symbol.}\n"
"     @result{} #<subr car>\n"
"(subrp (symbol-function 'car))  ; @r{Is this a primitive function?}\n"
"     @result{} t                       ; @r{Yes.}\n"
msgstr ""

# type: subsection
#: lispref/objects.texi:1304
#, no-wrap
msgid "Byte-Code Function Type"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1311
msgid ""
"The byte compiler produces @dfn{byte-code function objects}.  Internally, a "
"byte-code function object is much like a vector; however, the evaluator "
"handles this data type specially when it appears as a function to be "
"called.  @xref{Byte Compilation}, for information about the byte compiler."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1315
msgid ""
"The printed representation and read syntax for a byte-code function object "
"is like that for a vector, with an additional @samp{#} before the opening "
"@samp{[}."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1325
msgid ""
"An @dfn{autoload object} is a list whose first element is the symbol @code"
"{autoload}.  It is stored as the function definition of a symbol, where it "
"serves as a placeholder for the real definition.  The autoload object says "
"that the real definition is found in a file of Lisp code that should be "
"loaded when necessary.  It contains the name of the file, plus some other "
"information about the real definition."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1331
msgid ""
"After the file has been loaded, the symbol should have a new function "
"definition that is not an autoload object.  The new definition is then "
"called as if it had been there to begin with.  From the user's point of "
"view, the function call works as expected, using the function definition in "
"the loaded file."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1335
msgid ""
"An autoload object is usually created with the function @code{autoload}, "
"which stores the object in the function cell of a symbol.  @xref{Autoload}, "
"for more details."
msgstr ""

# type: cindex
#: lispref/objects.texi:1338
#, no-wrap
msgid "editing types"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1344
msgid ""
"The types in the previous section are used for general programming purposes, "
"and most of them are common to most Lisp dialects.  Emacs Lisp provides "
"several additional data types for purposes connected with editing."
msgstr ""

# type: menu
#: lispref/objects.texi:1356 lispref/objects.texi:1358
#: lispref/objects.texi:1359 lispref/vol1.texi:347 lispref/vol2.texi:348
#, no-wrap
msgid "Buffer Type"
msgstr ""

# type: menu
#: lispref/objects.texi:1356 lispref/vol1.texi:347 lispref/vol2.texi:348
msgid "The basic object of editing."
msgstr ""

# type: menu
#: lispref/objects.texi:1356 lispref/objects.texi:1421
#: lispref/objects.texi:1422 lispref/vol1.texi:347 lispref/vol2.texi:348
#, no-wrap
msgid "Marker Type"
msgstr ""

# type: menu
#: lispref/objects.texi:1356 lispref/vol1.texi:347 lispref/vol2.texi:348
msgid "A position in a buffer."
msgstr ""

# type: menu
#: lispref/objects.texi:1356 lispref/objects.texi:1443
#: lispref/objects.texi:1444 lispref/vol1.texi:347 lispref/vol2.texi:348
#, no-wrap
msgid "Window Type"
msgstr ""

# type: menu
#: lispref/objects.texi:1356
msgid "Buffers are displayed in windows."
msgstr ""

# type: subsection
#: lispref/objects.texi:1356 lispref/objects.texi:1474
#: lispref/objects.texi:1475
#, no-wrap
msgid "Frame Type"
msgstr ""

# type: menu
#: lispref/objects.texi:1356
msgid "Windows subdivide frames."
msgstr ""

# type: menu
#: lispref/objects.texi:1356 lispref/objects.texi:1494
#: lispref/objects.texi:1495 lispref/vol1.texi:347 lispref/vol2.texi:348
#, no-wrap
msgid "Window Configuration Type"
msgstr ""

# type: menu
#: lispref/objects.texi:1356
msgid "Recording the way a frame is subdivided."
msgstr ""

# type: subsection
#: lispref/objects.texi:1356 lispref/objects.texi:1507
#: lispref/objects.texi:1508
#, no-wrap
msgid "Frame Configuration Type"
msgstr ""

# type: menu
#: lispref/objects.texi:1356
msgid "Recording the status of all frames."
msgstr ""

# type: menu
#: lispref/objects.texi:1356 lispref/objects.texi:1521
#: lispref/objects.texi:1522 lispref/vol1.texi:347 lispref/vol2.texi:348
#, no-wrap
msgid "Process Type"
msgstr ""

# type: menu
#: lispref/objects.texi:1356 lispref/vol1.texi:347 lispref/vol2.texi:348
msgid "A process running on the underlying OS."
msgstr ""

# type: menu
#: lispref/objects.texi:1356 lispref/objects.texi:1548
#: lispref/objects.texi:1549 lispref/vol1.texi:347 lispref/vol2.texi:348
#, no-wrap
msgid "Stream Type"
msgstr ""

# type: menu
#: lispref/objects.texi:1356 lispref/vol1.texi:347 lispref/vol2.texi:348
msgid "Receive or send characters."
msgstr ""

# type: menu
#: lispref/objects.texi:1356 lispref/objects.texi:1572
#: lispref/objects.texi:1573 lispref/vol1.texi:347 lispref/vol2.texi:348
#, no-wrap
msgid "Keymap Type"
msgstr ""

# type: menu
#: lispref/objects.texi:1356 lispref/vol1.texi:347 lispref/vol2.texi:348
msgid "What function a keystroke invokes."
msgstr ""

# type: subsection
#: lispref/objects.texi:1356 lispref/objects.texi:1582
#: lispref/objects.texi:1583
#, no-wrap
msgid "Overlay Type"
msgstr ""

# type: menu
#: lispref/objects.texi:1356
msgid "How an overlay is represented."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1367
msgid ""
"A @dfn{buffer} is an object that holds text that can be edited (@pxref"
"{Buffers}).  Most buffers hold the contents of a disk file (@pxref{Files}) "
"so they can be edited, but some are used for other purposes.  Most buffers "
"are also meant to be seen by the user, and therefore displayed, at some "
"time, in a window (@pxref{Windows}).  But a buffer need not be displayed in "
"any window."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1374
msgid ""
"The contents of a buffer are much like a string, but buffers are not used "
"like strings in Emacs Lisp, and the available operations are different.  For "
"example, you can insert text efficiently into an existing buffer, altering "
"the buffer's contents, whereas ``inserting'' text into a string requires "
"concatenating substrings, and the result is an entirely new string object."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1382
msgid ""
"Each buffer has a designated position called @dfn{point} (@pxref"
"{Positions}).  At any time, one buffer is the @dfn{current buffer}.  Most "
"editing commands act on the contents of the current buffer in the "
"neighborhood of point.  Many of the standard Emacs functions manipulate or "
"test the characters in the current buffer; a whole chapter in this manual is "
"devoted to describing these functions (@pxref{Text})."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1384
msgid "Several other data structures are associated with each buffer:"
msgstr ""

# type: itemize
#: lispref/objects.texi:1388
msgid "a local syntax table (@pxref{Syntax Tables});"
msgstr ""

# type: itemize
#: lispref/objects.texi:1391
msgid "a local keymap (@pxref{Keymaps}); and,"
msgstr ""

# type: itemize
#: lispref/objects.texi:1394
msgid ""
"a list of buffer-local variable bindings (@pxref{Buffer-Local Variables})."
msgstr ""

# type: itemize
#: lispref/objects.texi:1397
msgid "overlays (@pxref{Overlays})."
msgstr ""

# type: itemize
#: lispref/objects.texi:1400
msgid "text properties for the text in the buffer (@pxref{Text Properties})."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1407
msgid ""
"The local keymap and variable list contain entries that individually "
"override global bindings or values.  These are used to customize the "
"behavior of programs in different buffers, without actually changing the "
"programs."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1410
msgid ""
"A buffer may be @dfn{indirect}, which means it shares the text of another "
"buffer, but presents it differently.  @xref{Indirect Buffers}."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1413
msgid ""
"Buffers have no read syntax.  They print in hash notation, showing the "
"buffer name."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1429
msgid ""
"A @dfn{marker} denotes a position in a specific buffer.  Markers therefore "
"have two components: one for the buffer, and one for the position.  Changes "
"in the buffer's text automatically relocate the position value as necessary "
"to ensure that the marker always points between the same two characters in "
"the buffer."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1432
msgid ""
"Markers have no read syntax.  They print in hash notation, giving the "
"current character position and the name of the buffer."
msgstr ""

# type: group
#: lispref/objects.texi:1437
#, no-wrap
msgid ""
"(point-marker)\n"
"     @result{} #<marker at 10779 in objects.texi>\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1442
msgid ""
"@xref{Markers}, for information on how to test, create, copy, and move "
"markers."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1450
msgid ""
"A @dfn{window} describes the portion of the terminal screen that Emacs uses "
"to display a buffer.  Every window has one associated buffer, whose contents "
"appear in the window.  By contrast, a given buffer may appear in one window, "
"no window, or several windows."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1456
msgid ""
"Though many windows may exist simultaneously, at any time one window is "
"designated the @dfn{selected window}.  This is the window where the cursor "
"is (usually) displayed when Emacs is ready for a command.  The selected "
"window usually displays the current buffer, but this is not necessarily the "
"case."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1459
msgid ""
"Windows are grouped on the screen into frames; each window belongs to one "
"and only one frame.  @xref{Frame Type}."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1464
msgid ""
"Windows have no read syntax.  They print in hash notation, giving the window "
"number and the name of the buffer being displayed.  The window numbers exist "
"to identify windows uniquely, since the buffer displayed in any given window "
"can change frequently."
msgstr ""

# type: group
#: lispref/objects.texi:1469
#, no-wrap
msgid ""
"(selected-window)\n"
"     @result{} #<window 1 on objects.texi>\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1473
msgid ""
"@xref{Windows}, for a description of the functions that work on windows."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1480
msgid ""
"A @dfn{frame} is a screen area that contains one or more Emacs windows; we "
"also use the term ``frame'' to refer to the Lisp object that Emacs uses to "
"refer to the screen area."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1484
msgid ""
"Frames have no read syntax.  They print in hash notation, giving the frame's "
"title, plus its address in core (useful to identify the frame uniquely)."
msgstr ""

# type: group
#: lispref/objects.texi:1489
#, no-wrap
msgid ""
"(selected-frame)\n"
"     @result{} #<frame emacs@@psilocin.gnu.org 0xdac80>\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1493
msgid "@xref{Frames}, for a description of the functions that work on frames."
msgstr ""

# type: cindex
#: lispref/objects.texi:1496
#, no-wrap
msgid "window layout in a frame"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1501
msgid ""
"A @dfn{window configuration} stores information about the positions, sizes, "
"and contents of the windows in a frame, so you can recreate the same "
"arrangement of windows later."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1506
msgid ""
"Window configurations do not have a read syntax; their print syntax looks "
"like @samp{#<window-configuration>}.  @xref{Window Configurations}, for a "
"description of several functions related to window configurations."
msgstr ""

# type: cindex
#: lispref/objects.texi:1509
#, no-wrap
msgid "screen layout"
msgstr ""

# type: cindex
#: lispref/objects.texi:1510
#, no-wrap
msgid "window layout, all frames"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1517
msgid ""
"A @dfn{frame configuration} stores information about the positions, sizes, "
"and contents of the windows in all frames.  It is actually a list whose @sc"
"{car} is @code{frame-configuration} and whose @sc{cdr} is an alist.  Each "
"alist element describes one frame, which appears as the @sc{car} of that "
"element."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1520
msgid ""
"@xref{Frame Configurations}, for a description of several functions related "
"to frame configurations."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1529
msgid ""
"The word @dfn{process} usually means a running program.  Emacs itself runs "
"in a process of this sort.  However, in Emacs Lisp, a process is a Lisp "
"object that designates a subprocess created by the Emacs process.  Programs "
"such as shells, GDB, ftp, and compilers, running in subprocesses of Emacs, "
"extend the capabilities of Emacs."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1533
msgid ""
"An Emacs subprocess takes textual input from Emacs and returns textual "
"output to Emacs for further manipulation.  Emacs can also send signals to "
"the subprocess."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1536
msgid ""
"Process objects have no read syntax.  They print in hash notation, giving "
"the name of the process:"
msgstr ""

# type: group
#: lispref/objects.texi:1541
#, no-wrap
msgid ""
"(process-list)\n"
"     @result{} (#<process shell>)\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1547
msgid ""
"@xref{Processes}, for information about functions that create, delete, "
"return information about, send input or signals to, and receive output from "
"processes."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1558
msgid ""
"A @dfn{stream} is an object that can be used as a source or sink for "
"characters---either to supply characters for input or to accept them as "
"output.  Many different types can be used this way: markers, buffers, "
"strings, and functions.  Most often, input streams (character sources)  "
"obtain characters from the keyboard, a buffer, or a file, and output streams "
"(character sinks) send characters to a buffer, such as a @file{*Help*} "
"buffer, or to the echo area."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1565
msgid ""
"The object @code{nil}, in addition to its other meanings, may be used as a "
"stream.  It stands for the value of the variable @code{standard-input} or "
"@code{standard-output}.  Also, the object @code{t} as a stream specifies "
"input using the minibuffer (@pxref{Minibuffers}) or output in the echo area "
"(@pxref{The Echo Area})."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1568
msgid ""
"Streams have no special printed representation or read syntax, and print as "
"whatever primitive type they are."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1571
msgid ""
"@xref{Read and Print}, for a description of functions related to streams, "
"including parsing and printing functions."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1578
msgid ""
"A @dfn{keymap} maps keys typed by the user to commands.  This mapping "
"controls how the user's command input is executed.  A keymap is actually a "
"list whose @sc{car} is the symbol @code{keymap}."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1581
msgid ""
"@xref{Keymaps}, for information about creating keymaps, handling prefix "
"keys, local as well as global keymaps, and changing key bindings."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1592
msgid ""
"An @dfn{overlay} specifies properties that apply to a part of a buffer.  "
"Each overlay applies to a specified range of the buffer, and contains a "
"property list (a list whose elements are alternating property names and "
"values).  Overlay properties are used to present parts of the buffer "
"temporarily in a different display style.  Overlays have no read syntax, and "
"print in hash notation, giving the buffer name and range of positions."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1594
msgid "@xref{Overlays}, for how to create and use overlays."
msgstr ""

# type: section
#: lispref/objects.texi:1596
#, no-wrap
msgid "Read Syntax for Circular Objects"
msgstr ""

# type: cindex
#: lispref/objects.texi:1597
#, no-wrap
msgid "circular structure, read syntax"
msgstr ""

# type: cindex
#: lispref/objects.texi:1598
#, no-wrap
msgid "shared structure, read syntax"
msgstr ""

# type: cindex
#: lispref/objects.texi:1599
#, no-wrap
msgid "@samp{#@var{n}=} read syntax"
msgstr ""

# type: cindex
#: lispref/objects.texi:1600
#, no-wrap
msgid "@samp{#@var{n}#} read syntax"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1605
msgid ""
"To represent shared or circular structures within a complex of Lisp objects, "
"you can use the reader constructs @samp{#@var{n}=} and @samp{#@var{n}#}."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1610
msgid ""
"Use @code{#@var{n}=} before an object to label it for later reference; "
"subsequently, you can use @code{#@var{n}#} to refer the same object in "
"another place.  Here, @var{n} is some integer.  For example, here is how to "
"make a list in which the first element recurs as the third element:"
msgstr ""

# type: example
#: lispref/objects.texi:1613
#, no-wrap
msgid "(#1=(a) b #1#)\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1617
msgid "This differs from ordinary syntax such as this"
msgstr ""

# type: example
#: lispref/objects.texi:1620
#, no-wrap
msgid "((a) b (a))\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1625
msgid ""
"which would result in a list whose first and third elements look alike but "
"are not the same Lisp object.  This shows the difference:"
msgstr ""

# type: example
#: lispref/objects.texi:1634
#, no-wrap
msgid ""
"(prog1 nil\n"
"  (setq x '(#1=(a) b #1#)))\n"
"(eq (nth 0 x) (nth 2 x))\n"
"     @result{} t\n"
"(setq x '((a) b (a)))\n"
"(eq (nth 0 x) (nth 2 x))\n"
"     @result{} nil\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1638
msgid ""
"You can also use the same syntax to make a circular structure, which appears "
"as an ``element'' within itself.  Here is an example:"
msgstr ""

# type: example
#: lispref/objects.texi:1641
#, no-wrap
msgid "#1=(a #1#)\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1646
msgid ""
"This makes a list whose second element is the list itself.  Here's how you "
"can see that it really works:"
msgstr ""

# type: example
#: lispref/objects.texi:1652
#, no-wrap
msgid ""
"(prog1 nil\n"
"  (setq x '#1=(a #1#)))\n"
"(eq x (cadr x))\n"
"     @result{} t\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1657
msgid ""
"The Lisp printer can produce this syntax to record circular and shared "
"structure in a Lisp object, if you bind the variable @code{print-circle} to "
"a non-@code{nil} value.  @xref{Output Variables}."
msgstr ""

# type: cindex
#: lispref/objects.texi:1660
#, no-wrap
msgid "type checking"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1669
msgid ""
"The Emacs Lisp interpreter itself does not perform type checking on the "
"actual arguments passed to functions when they are called.  It could not do "
"so, since function arguments in Lisp do not have declared data types, as "
"they do in other programming languages.  It is therefore up to the "
"individual function to test whether each actual argument belongs to a type "
"that the function can use."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1674
msgid ""
"All built-in functions do check the types of their actual arguments when "
"appropriate, and signal a @code{wrong-type-argument} error if an argument is "
"of the wrong type.  For example, here is what happens if you pass an "
"argument to @code{+} that it cannot handle:"
msgstr ""

# type: group
#: lispref/objects.texi:1679
#, no-wrap
msgid ""
"(+ 2 'a)\n"
"     @error{} Wrong type argument: number-or-marker-p, a\n"
msgstr ""

# type: cindex
#: lispref/objects.texi:1682
#, no-wrap
msgid "type predicates"
msgstr ""

# type: cindex
#: lispref/objects.texi:1683
#, no-wrap
msgid "testing types"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1689
msgid ""
"If you want your program to handle different types differently, you must do "
"explicit type checking.  The most common way to check the type of an object "
"is to call a @dfn{type predicate} function.  Emacs has a type predicate for "
"each type, as well as some predicates for combinations of types."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1694
msgid ""
"A type predicate function takes one argument; it returns @code{t} if the "
"argument belongs to the appropriate type, and @code{nil} otherwise.  "
"Following a general Lisp convention for predicate functions, most type "
"predicates' names end with @samp{p}."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1697
msgid ""
"Here is an example which uses the predicates @code{listp} to check for a "
"list and @code{symbolp} to check for a symbol."
msgstr ""

# type: example
#: lispref/objects.texi:1709
#, no-wrap
msgid ""
"(defun add-on (x)\n"
"  (cond ((symbolp x)\n"
"         ;; If X is a symbol, put it on LIST.\n"
"         (setq list (cons x list)))\n"
"        ((listp x)\n"
"         ;; If X is a list, add its elements to LIST.\n"
"         (setq list (append x list)))\n"
"        (t\n"
"         ;; We handle only symbols and lists.\n"
"         (error \"Invalid argument %s in add-on\" x))))\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1713
msgid ""
"Here is a table of predefined type predicates, in alphabetical order, with "
"references to further information."
msgstr ""

# type: table
#: lispref/objects.texi:1717
msgid "@xref{List-related Predicates, atom}."
msgstr ""

# type: item
#: lispref/objects.texi:1718
#, no-wrap
msgid "arrayp"
msgstr ""

# type: table
#: lispref/objects.texi:1720
msgid "@xref{Array Functions, arrayp}."
msgstr ""

# type: item
#: lispref/objects.texi:1721
#, no-wrap
msgid "bool-vector-p"
msgstr ""

# type: table
#: lispref/objects.texi:1723
msgid "@xref{Bool-Vectors, bool-vector-p}."
msgstr ""

# type: item
#: lispref/objects.texi:1724
#, no-wrap
msgid "bufferp"
msgstr ""

# type: table
#: lispref/objects.texi:1726
msgid "@xref{Buffer Basics, bufferp}."
msgstr ""

# type: item
#: lispref/objects.texi:1727
#, no-wrap
msgid "byte-code-function-p"
msgstr ""

# type: table
#: lispref/objects.texi:1729
msgid "@xref{Byte-Code Type, byte-code-function-p}."
msgstr ""

# type: item
#: lispref/objects.texi:1730
#, no-wrap
msgid "case-table-p"
msgstr ""

# type: table
#: lispref/objects.texi:1732
msgid "@xref{Case Tables, case-table-p}."
msgstr ""

# type: item
#: lispref/objects.texi:1733
#, no-wrap
msgid "char-or-string-p"
msgstr ""

# type: table
#: lispref/objects.texi:1735
msgid "@xref{Predicates for Strings, char-or-string-p}."
msgstr ""

# type: item
#: lispref/objects.texi:1736
#, no-wrap
msgid "char-table-p"
msgstr ""

# type: table
#: lispref/objects.texi:1738
msgid "@xref{Char-Tables, char-table-p}."
msgstr ""

# type: table
#: lispref/objects.texi:1741
msgid "@xref{Interactive Call, commandp}."
msgstr ""

# type: item
#: lispref/objects.texi:1742
#, no-wrap
msgid "consp"
msgstr ""

# type: table
#: lispref/objects.texi:1744
msgid "@xref{List-related Predicates, consp}."
msgstr ""

# type: item
#: lispref/objects.texi:1745
#, no-wrap
msgid "display-table-p"
msgstr ""

# type: table
#: lispref/objects.texi:1747
msgid "@xref{Display Tables, display-table-p}."
msgstr ""

# type: item
#: lispref/objects.texi:1748
#, no-wrap
msgid "floatp"
msgstr ""

# type: table
#: lispref/objects.texi:1750
msgid "@xref{Predicates on Numbers, floatp}."
msgstr ""

# type: item
#: lispref/objects.texi:1751
#, no-wrap
msgid "frame-configuration-p"
msgstr ""

# type: table
#: lispref/objects.texi:1753
msgid "@xref{Frame Configurations, frame-configuration-p}."
msgstr ""

# type: item
#: lispref/objects.texi:1754
#, no-wrap
msgid "frame-live-p"
msgstr ""

# type: table
#: lispref/objects.texi:1756
msgid "@xref{Deleting Frames, frame-live-p}."
msgstr ""

# type: item
#: lispref/objects.texi:1757
#, no-wrap
msgid "framep"
msgstr ""

# type: table
#: lispref/objects.texi:1759
msgid "@xref{Frames, framep}."
msgstr ""

# type: item
#: lispref/objects.texi:1760
#, no-wrap
msgid "functionp"
msgstr ""

# type: table
#: lispref/objects.texi:1762
msgid "@xref{Functions, functionp}."
msgstr ""

# type: item
#: lispref/objects.texi:1763
#, no-wrap
msgid "hash-table-p"
msgstr ""

# type: table
#: lispref/objects.texi:1765
msgid "@xref{Other Hash, hash-table-p}."
msgstr ""

# type: item
#: lispref/objects.texi:1766
#, no-wrap
msgid "integer-or-marker-p"
msgstr ""

# type: table
#: lispref/objects.texi:1768
msgid "@xref{Predicates on Markers, integer-or-marker-p}."
msgstr ""

# type: item
#: lispref/objects.texi:1769
#, no-wrap
msgid "integerp"
msgstr ""

# type: table
#: lispref/objects.texi:1771
msgid "@xref{Predicates on Numbers, integerp}."
msgstr ""

# type: item
#: lispref/objects.texi:1772
#, no-wrap
msgid "keymapp"
msgstr ""

# type: table
#: lispref/objects.texi:1774
msgid "@xref{Creating Keymaps, keymapp}."
msgstr ""

# type: item
#: lispref/objects.texi:1775
#, no-wrap
msgid "keywordp"
msgstr ""

# type: table
#: lispref/objects.texi:1777
msgid "@xref{Constant Variables}."
msgstr ""

# type: item
#: lispref/objects.texi:1778
#, no-wrap
msgid "listp"
msgstr ""

# type: table
#: lispref/objects.texi:1780
msgid "@xref{List-related Predicates, listp}."
msgstr ""

# type: item
#: lispref/objects.texi:1781
#, no-wrap
msgid "markerp"
msgstr ""

# type: table
#: lispref/objects.texi:1783
msgid "@xref{Predicates on Markers, markerp}."
msgstr ""

# type: item
#: lispref/objects.texi:1784
#, no-wrap
msgid "wholenump"
msgstr ""

# type: table
#: lispref/objects.texi:1786
msgid "@xref{Predicates on Numbers, wholenump}."
msgstr ""

# type: item
#: lispref/objects.texi:1787
#, no-wrap
msgid "nlistp"
msgstr ""

# type: table
#: lispref/objects.texi:1789
msgid "@xref{List-related Predicates, nlistp}."
msgstr ""

# type: item
#: lispref/objects.texi:1790
#, no-wrap
msgid "numberp"
msgstr ""

# type: table
#: lispref/objects.texi:1792
msgid "@xref{Predicates on Numbers, numberp}."
msgstr ""

# type: item
#: lispref/objects.texi:1793
#, no-wrap
msgid "number-or-marker-p"
msgstr ""

# type: table
#: lispref/objects.texi:1795
msgid "@xref{Predicates on Markers, number-or-marker-p}."
msgstr ""

# type: item
#: lispref/objects.texi:1796
#, no-wrap
msgid "overlayp"
msgstr ""

# type: table
#: lispref/objects.texi:1798
msgid "@xref{Overlays, overlayp}."
msgstr ""

# type: item
#: lispref/objects.texi:1799
#, no-wrap
msgid "processp"
msgstr ""

# type: table
#: lispref/objects.texi:1801
msgid "@xref{Processes, processp}."
msgstr ""

# type: item
#: lispref/objects.texi:1802
#, no-wrap
msgid "sequencep"
msgstr ""

# type: table
#: lispref/objects.texi:1804
msgid "@xref{Sequence Functions, sequencep}."
msgstr ""

# type: item
#: lispref/objects.texi:1805
#, no-wrap
msgid "stringp"
msgstr ""

# type: table
#: lispref/objects.texi:1807
msgid "@xref{Predicates for Strings, stringp}."
msgstr ""

# type: item
#: lispref/objects.texi:1808
#, no-wrap
msgid "subrp"
msgstr ""

# type: table
#: lispref/objects.texi:1810
msgid "@xref{Function Cells, subrp}."
msgstr ""

# type: item
#: lispref/objects.texi:1811
#, no-wrap
msgid "symbolp"
msgstr ""

# type: table
#: lispref/objects.texi:1813
msgid "@xref{Symbols, symbolp}."
msgstr ""

# type: item
#: lispref/objects.texi:1814
#, no-wrap
msgid "syntax-table-p"
msgstr ""

# type: table
#: lispref/objects.texi:1816
msgid "@xref{Syntax Tables, syntax-table-p}."
msgstr ""

# type: item
#: lispref/objects.texi:1817
#, no-wrap
msgid "user-variable-p"
msgstr ""

# type: table
#: lispref/objects.texi:1819
msgid "@xref{Defining Variables, user-variable-p}."
msgstr ""

# type: item
#: lispref/objects.texi:1820
#, no-wrap
msgid "vectorp"
msgstr ""

# type: table
#: lispref/objects.texi:1822
msgid "@xref{Vectors, vectorp}."
msgstr ""

# type: item
#: lispref/objects.texi:1823
#, no-wrap
msgid "window-configuration-p"
msgstr ""

# type: table
#: lispref/objects.texi:1825
msgid "@xref{Window Configurations, window-configuration-p}."
msgstr ""

# type: item
#: lispref/objects.texi:1826
#, no-wrap
msgid "window-live-p"
msgstr ""

# type: table
#: lispref/objects.texi:1828
msgid "@xref{Deleting Windows, window-live-p}."
msgstr ""

# type: item
#: lispref/objects.texi:1829
#, no-wrap
msgid "windowp"
msgstr ""

# type: table
#: lispref/objects.texi:1831
msgid "@xref{Basic Windows, windowp}."
msgstr ""

# type: item
#: lispref/objects.texi:1832
#, no-wrap
msgid "booleanp"
msgstr ""

# type: table
#: lispref/objects.texi:1834
msgid "@xref{nil and t, booleanp}."
msgstr ""

# type: item
#: lispref/objects.texi:1835
#, no-wrap
msgid "string-or-null-p"
msgstr ""

# type: table
#: lispref/objects.texi:1837
msgid "@xref{Predicates for Strings, string-or-null-p}."
msgstr ""

# type: Plain text
#: lispref/objects.texi:1845
msgid ""
"The most general way to check the type of an object is to call the function "
"@code{type-of}.  Recall that each object belongs to one and only one "
"primitive type; @code{type-of} tells you which one (@pxref{Lisp Data "
"Types}).  But @code{type-of} knows nothing about non-primitive types.  In "
"most cases, it is more convenient to use type predicates than @code{type-of}."
msgstr ""

# type: defun
#: lispref/objects.texi:1846
#, no-wrap
msgid "type-of object"
msgstr ""

# type: defun
#: lispref/objects.texi:1854
msgid ""
"This function returns a symbol naming the primitive type of @var{object}.  "
"The value is one of the symbols @code{symbol}, @code{integer}, @code{float}, "
"@code{string}, @code{cons}, @code{vector}, @code{char-table}, @code{bool-"
"vector}, @code{hash-table}, @code{subr}, @code{compiled-function}, @code"
"{marker}, @code{overlay}, @code{window}, @code{buffer}, @code{frame}, @code"
"{process}, or @code{window-configuration}."
msgstr ""

# type: example
#: lispref/objects.texi:1858
#, no-wrap
msgid ""
"(type-of 1)\n"
"     @result{} integer\n"
msgstr ""

# type: group
#: lispref/objects.texi:1865
#, no-wrap
msgid ""
"(type-of 'nil)\n"
"     @result{} symbol\n"
"(type-of '())    ; @r{@code{()} is @code{nil}.}\n"
"     @result{} symbol\n"
"(type-of '(x))\n"
"     @result{} cons\n"
msgstr ""

# type: cindex
#: lispref/objects.texi:1871
#, no-wrap
msgid "equality"
msgstr ""

# type: Plain text
#: lispref/objects.texi:1877
msgid ""
"Here we describe two functions that test for equality between any two "
"objects.  Other functions test equality between objects of specific types, e."
"g., strings.  For these predicates, see the appropriate chapter describing "
"the data type."
msgstr ""

# type: defun
#: lispref/objects.texi:1878
#, no-wrap
msgid "eq object1 object2"
msgstr ""

# type: defun
#: lispref/objects.texi:1881
msgid ""
"This function returns @code{t} if @var{object1} and @var{object2} are the "
"same object, @code{nil} otherwise."
msgstr ""

# type: defun
#: lispref/objects.texi:1890
msgid ""
"@code{eq} returns @code{t} if @var{object1} and @var{object2} are integers "
"with the same value.  Also, since symbol names are normally unique, if the "
"arguments are symbols with the same name, they are @code{eq}.  For other "
"types (e.g., lists, vectors, strings), two arguments with the same contents "
"or elements are not necessarily @code{eq} to each other: they are @code{eq} "
"only if they are the same object, meaning that a change in the contents of "
"one will be reflected by the same change in the contents of the other."
msgstr ""

# type: group
#: lispref/objects.texi:1895
#, no-wrap
msgid ""
"(eq 'foo 'foo)\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/objects.texi:1900
#, no-wrap
msgid ""
"(eq 456 456)\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/objects.texi:1905 lispref/objects.texi:1971
#, no-wrap
msgid ""
"(eq \"asdf\" \"asdf\")\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/objects.texi:1910 lispref/objects.texi:1980
#, no-wrap
msgid ""
"(eq '(1 (2 (3))) '(1 (2 (3))))\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/objects.texi:1919
#, no-wrap
msgid ""
"(setq foo '(1 (2 (3))))\n"
"     @result{} (1 (2 (3)))\n"
"(eq foo foo)\n"
"     @result{} t\n"
"(eq foo '(1 (2 (3))))\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/objects.texi:1924 lispref/objects.texi:1989
#, no-wrap
msgid ""
"(eq [(1 2) 3] [(1 2) 3])\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/objects.texi:1929 lispref/objects.texi:1999
#, no-wrap
msgid ""
"(eq (point-marker) (point-marker))\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/objects.texi:1936
msgid ""
"The @code{make-symbol} function returns an uninterned symbol, distinct from "
"the symbol that is used if you write the name in a Lisp expression.  "
"Distinct symbols with the same name are not @code{eq}.  @xref{Creating "
"Symbols}."
msgstr ""

# type: group
#: lispref/objects.texi:1941
#, no-wrap
msgid ""
"(eq (make-symbol \"foo\") 'foo)\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/objects.texi:1945
#, no-wrap
msgid "equal object1 object2"
msgstr ""

# type: defun
#: lispref/objects.texi:1952
msgid ""
"This function returns @code{t} if @var{object1} and @var{object2} have equal "
"components, @code{nil} otherwise.  Whereas @code{eq} tests if its arguments "
"are the same object, @code{equal} looks inside nonidentical arguments to see "
"if their elements or contents are the same.  So, if two objects are @code"
"{eq}, they are @code{equal}, but the converse is not always true."
msgstr ""

# type: group
#: lispref/objects.texi:1957
#, no-wrap
msgid ""
"(equal 'foo 'foo)\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/objects.texi:1962
#, no-wrap
msgid ""
"(equal 456 456)\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/objects.texi:1967
#, no-wrap
msgid ""
"(equal \"asdf\" \"asdf\")\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/objects.texi:1976
#, no-wrap
msgid ""
"(equal '(1 (2 (3))) '(1 (2 (3))))\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/objects.texi:1985
#, no-wrap
msgid ""
"(equal [(1 2) 3] [(1 2) 3])\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/objects.texi:1994
#, no-wrap
msgid ""
"(equal (point-marker) (point-marker))\n"
"     @result{} t\n"
msgstr ""

# type: defun
#: lispref/objects.texi:2009
msgid ""
"Comparison of strings is case-sensitive, but does not take account of text "
"properties---it compares only the characters in the strings.  For technical "
"reasons, a unibyte string and a multibyte string are @code{equal} if and "
"only if they contain the same sequence of character codes and all these "
"codes are either in the range 0 through 127 (@acronym{ASCII}) or 160 through "
"255 (@code{eight-bit-graphic}).  (@pxref{Text Representations})."
msgstr ""

# type: group
#: lispref/objects.texi:2014
#, no-wrap
msgid ""
"(equal \"asdf\" \"ASDF\")\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/objects.texi:2019
msgid ""
"However, two distinct buffers are never considered @code{equal}, even if "
"their textual contents are the same."
msgstr ""

# type: Plain text
#: lispref/objects.texi:2025
msgid ""
"The test for equality is implemented recursively; for example, given two "
"cons cells @var{x} and @var{y}, @code{(equal @var{x} @var{y})} returns @code"
"{t} if and only if both the expressions below return @code{t}:"
msgstr ""

# type: example
#: lispref/objects.texi:2029
#, no-wrap
msgid ""
"(equal (car @var{x}) (car @var{y}))\n"
"(equal (cdr @var{x}) (cdr @var{y}))\n"
msgstr ""

# type: Plain text
#: lispref/objects.texi:2033
msgid ""
"Because of this recursive method, circular lists may therefore cause "
"infinite recursion (leading to an error)."
msgstr ""

# type: ignore
#: lispref/objects.texi:2036
#, no-wrap
msgid "   arch-tag: 9711a66e-4749-4265-9e8c-972d55b67096\n"
msgstr "   arch-tag: 9711a66e-4749-4265-9e8c-972d55b67096\n"

# type: menu
#: lispref/os.texi:8 lispref/vol1.texi:893 lispref/vol2.texi:894
#, no-wrap
msgid "Operating System Interface"
msgstr ""

# type: Plain text
#: lispref/os.texi:13
msgid ""
"This chapter is about starting and getting out of Emacs, access to values in "
"the operating system environment, and terminal input, output, and flow "
"control."
msgstr ""

# type: Plain text
#: lispref/os.texi:17
msgid ""
"@xref{Building Emacs}, for related information.  See also @ref{Display}, for "
"additional operating system status information pertaining to the terminal "
"and the screen."
msgstr ""

# type: menu
#: lispref/os.texi:39 lispref/os.texi:41 lispref/vol1.texi:901
#: lispref/vol2.texi:902
#, no-wrap
msgid "Starting Up"
msgstr ""

# type: menu
#: lispref/os.texi:39
msgid "Customizing Emacs startup processing."
msgstr ""

# type: menu
#: lispref/os.texi:39 lispref/os.texi:445 lispref/vol1.texi:901
#: lispref/vol2.texi:902
#, no-wrap
msgid "Getting Out"
msgstr ""

# type: menu
#: lispref/os.texi:39 lispref/vol1.texi:901 lispref/vol2.texi:902
msgid "How exiting works (permanent or temporary)."
msgstr ""

# type: menu
#: lispref/os.texi:39 lispref/os.texi:610 lispref/vol1.texi:901
#: lispref/vol2.texi:902
#, no-wrap
msgid "System Environment"
msgstr ""

# type: menu
#: lispref/os.texi:39 lispref/vol1.texi:901 lispref/vol2.texi:902
msgid "Distinguish the name and kind of system."
msgstr ""

# type: section
#: lispref/os.texi:39 lispref/os.texi:887 lispref/os.texi:888
#, no-wrap
msgid "User Identification"
msgstr ""

# type: menu
#: lispref/os.texi:39
msgid "Finding the name and user id of the user."
msgstr ""

# type: section
#: lispref/os.texi:39 lispref/os.texi:986 lispref/os.texi:987
#, no-wrap
msgid "Time of Day"
msgstr ""

# type: menu
#: lispref/os.texi:39
msgid "Getting the current time."
msgstr ""

# type: section
#: lispref/os.texi:39 lispref/os.texi:1081 lispref/os.texi:1082
#, no-wrap
msgid "Time Conversion"
msgstr ""

# type: menu
#: lispref/os.texi:39
msgid "Converting a time from numeric form"
msgstr ""

# type: menu
#: lispref/os.texi:39
msgid "to calendrical data, and vice versa)."
msgstr ""

# type: node
#: lispref/os.texi:39 lispref/os.texi:1176
#, no-wrap
msgid "Time Parsing"
msgstr ""

# type: menu
#: lispref/os.texi:39
msgid "Converting a time from numeric form to text"
msgstr ""

# type: menu
#: lispref/os.texi:39
msgid "and vice versa."
msgstr ""

# type: node
#: lispref/os.texi:39 lispref/os.texi:1311
#, no-wrap
msgid "Processor Run Time"
msgstr ""

# type: menu
#: lispref/os.texi:39
msgid "Getting the run time used by Emacs."
msgstr ""

# type: section
#: lispref/os.texi:39 lispref/os.texi:1334 lispref/os.texi:1335
#, no-wrap
msgid "Time Calculations"
msgstr ""

# type: menu
#: lispref/os.texi:39
msgid "Adding, subtracting, comparing times, etc."
msgstr ""

# type: node
#: lispref/os.texi:39 lispref/os.texi:1373
#, no-wrap
msgid "Timers"
msgstr ""

# type: menu
#: lispref/os.texi:39
msgid "Setting a timer to call a function at a certain time."
msgstr ""

# type: section
#: lispref/os.texi:39 lispref/os.texi:1514 lispref/os.texi:1515
#, no-wrap
msgid "Idle Timers"
msgstr ""

# type: menu
#: lispref/os.texi:39
msgid "Setting a timer to call a function when Emacs has"
msgstr ""

# type: menu
#: lispref/os.texi:39
msgid "been idle for a certain length of time."
msgstr ""

# type: menu
#: lispref/os.texi:39 lispref/os.texi:1621 lispref/os.texi:1622
#: lispref/vol1.texi:901 lispref/vol2.texi:902
#, no-wrap
msgid "Terminal Input"
msgstr ""

# type: menu
#: lispref/os.texi:39
msgid "Accessing and recording terminal input."
msgstr ""

# type: menu
#: lispref/os.texi:39 lispref/os.texi:1735 lispref/os.texi:1736
#: lispref/vol1.texi:901 lispref/vol2.texi:902
#, no-wrap
msgid "Terminal Output"
msgstr ""

# type: menu
#: lispref/os.texi:39
msgid "Controlling and recording terminal output."
msgstr ""

# type: section
#: lispref/os.texi:39 lispref/os.texi:1812 lispref/os.texi:1813
#, no-wrap
msgid "Sound Output"
msgstr ""

# type: menu
#: lispref/os.texi:39
msgid "Playing sounds on the computer's speaker."
msgstr ""

# type: node
#: lispref/os.texi:39 lispref/os.texi:1869
#, no-wrap
msgid "X11 Keysyms"
msgstr ""

# type: menu
#: lispref/os.texi:39
msgid "Operating on key symbols for X Windows"
msgstr ""

# type: menu
#: lispref/os.texi:39 lispref/os.texi:1922 lispref/os.texi:1923
#: lispref/vol1.texi:901 lispref/vol2.texi:902
#, no-wrap
msgid "Batch Mode"
msgstr ""

# type: menu
#: lispref/os.texi:39 lispref/vol1.texi:901 lispref/vol2.texi:902
msgid "Running Emacs without terminal interaction."
msgstr ""

# type: section
#: lispref/os.texi:39 lispref/os.texi:1948 lispref/os.texi:1949
#, no-wrap
msgid "Session Management"
msgstr ""

# type: menu
#: lispref/os.texi:39
msgid "Saving and restoring state with X Session Management."
msgstr ""

# type: menu
#: lispref/os.texi:42 lispref/vol1.texi:903 lispref/vol2.texi:904
#, no-wrap
msgid "Starting Up Emacs"
msgstr ""

# type: Plain text
#: lispref/os.texi:46
msgid ""
"This section describes what Emacs does when it is started, and how you can "
"customize these actions."
msgstr ""

# type: node
#: lispref/os.texi:53 lispref/os.texi:55
#, no-wrap
msgid "Startup Summary"
msgstr ""

# type: menu
#: lispref/os.texi:53
msgid "Sequence of actions Emacs performs at startup."
msgstr ""

# type: menu
#: lispref/os.texi:53 lispref/os.texi:178 lispref/vol1.texi:909
#: lispref/vol2.texi:910
#, no-wrap
msgid "Init File"
msgstr ""

# type: menu
#: lispref/os.texi:53 lispref/vol1.texi:909 lispref/vol2.texi:910
msgid "Details on reading the init file (@file{.emacs})."
msgstr ""

# type: menu
#: lispref/os.texi:53 lispref/os.texi:261 lispref/vol1.texi:909
#: lispref/vol2.texi:910
#, no-wrap
msgid "Terminal-Specific"
msgstr ""

# type: menu
#: lispref/os.texi:53 lispref/vol1.texi:909 lispref/vol2.texi:910
msgid "How the terminal-specific Lisp file is read."
msgstr ""

# type: subsection
#: lispref/os.texi:53 lispref/os.texi:337 lispref/os.texi:338
#, no-wrap
msgid "Command-Line Arguments"
msgstr ""

# type: menu
#: lispref/os.texi:53
msgid "How command-line arguments are processed,"
msgstr ""

# type: menu
#: lispref/os.texi:53 lispref/vol1.texi:909 lispref/vol2.texi:910
msgid "and how you can customize them."
msgstr ""

# type: subsection
#: lispref/os.texi:56
#, no-wrap
msgid "Summary: Sequence of Actions at Startup"
msgstr ""

# type: cindex
#: lispref/os.texi:57
#, no-wrap
msgid "initialization of Emacs"
msgstr ""

# type: cindex
#: lispref/os.texi:58
#, no-wrap
msgid "startup of Emacs"
msgstr ""

# type: file{#1}
#: lispref/os.texi:59
#, no-wrap
msgid "startup.el"
msgstr ""

# type: Plain text
#: lispref/os.texi:63
msgid ""
"The order of operations performed (in @file{startup.el}) by Emacs when it is "
"started up is as follows:"
msgstr ""

# type: enumerate
#: lispref/os.texi:71
msgid ""
"It adds subdirectories to @code{load-path}, by running the file named @file"
"{subdirs.el} in each directory in the list.  Normally this file adds the "
"directory's subdirectories to the list, and these will be scanned in their "
"turn.  The files @file{subdirs.el} are normally generated automatically by "
"Emacs installation."
msgstr ""

# type: enumerate
#: lispref/os.texi:75
msgid ""
"It sets the language environment and the terminal coding system, if "
"requested by environment variables such as @code{LANG}."
msgstr ""

# type: enumerate
#: lispref/os.texi:80
msgid ""
"It loads the initialization library for the window system, if you are using "
"a window system.  This library's name is @file{term/@var{windowsystem}-win."
"el}."
msgstr ""

# type: enumerate
#: lispref/os.texi:84
msgid ""
"It processes the initial options.  (Some of them are handled even earlier "
"than this.)"
msgstr ""

# type: enumerate
#: lispref/os.texi:87
msgid "It initializes the window frame and faces, if appropriate."
msgstr ""

# type: enumerate
#: lispref/os.texi:90
msgid "It runs the normal hook @code{before-init-hook}."
msgstr ""

# type: enumerate
#: lispref/os.texi:95
msgid ""
"It loads the library @file{site-start} (if any), unless the option @samp{-Q} "
"(or @samp{--no-site-file}) was specified.  The library's file name is "
"usually @file{site-start.el}."
msgstr ""

# type: file{#1}
#: lispref/os.texi:95
#, no-wrap
msgid "site-start.el"
msgstr ""

# type: enumerate
#: lispref/os.texi:102
msgid ""
"It loads your init file (usually @file{~/.emacs}), unless the option @samp{-"
"q} (or @samp{--no-init-file}), @samp{-Q}, or @samp{--batch} was specified on "
"the command line.  The @samp{-u} option can specify another user whose home "
"directory should be used instead of @file{~}."
msgstr ""

# type: enumerate
#: lispref/os.texi:108
msgid ""
"It loads the library @file{default} (if any), unless @code{inhibit-default-"
"init} is non-@code{nil}.  (This is not done in @samp{-batch} mode, or if "
"@samp{-Q} or @samp{-q} was specified on the command line.)  The library's "
"file name is usually @file{default.el}."
msgstr ""

# type: file{#1}
#: lispref/os.texi:108
#, no-wrap
msgid "default.el"
msgstr ""

# type: enumerate
#: lispref/os.texi:112
msgid "It runs the normal hook @code{after-init-hook}."
msgstr ""

# type: enumerate
#: lispref/os.texi:117
msgid ""
"It sets the major mode according to @code{initial-major-mode}, provided the "
"buffer @samp{*scratch*} is still current and still in Fundamental mode."
msgstr ""

# type: enumerate
#: lispref/os.texi:121
msgid ""
"It loads the terminal-specific Lisp file, if any, except when in batch mode "
"or using a window system."
msgstr ""

# type: enumerate
#: lispref/os.texi:125
msgid ""
"It displays the initial echo area message, unless you have suppressed that "
"with @code{inhibit-startup-echo-area-message}."
msgstr ""

# type: enumerate
#: lispref/os.texi:128
msgid "It processes the action arguments from the command line."
msgstr ""

# type: enumerate
#: lispref/os.texi:131
msgid "It runs @code{emacs-startup-hook} and then @code{term-setup-hook}."
msgstr ""

# type: enumerate
#: lispref/os.texi:136
msgid ""
"It calls @code{frame-notice-user-settings}, which modifies the parameters of "
"the selected frame according to whatever the init files specify."
msgstr ""

# type: enumerate
#: lispref/os.texi:139
msgid "It runs @code{window-setup-hook}.  @xref{Window Systems}."
msgstr ""

# type: enumerate
#: lispref/os.texi:144
msgid ""
"It displays copyleft, nonwarranty, and basic use information, provided the "
"value of @code{inhibit-startup-message} is @code{nil}, you didn't specify "
"@samp{--no-splash} or @samp{-Q}."
msgstr ""

# type: defopt
#: lispref/os.texi:146
#, no-wrap
msgid "inhibit-startup-message"
msgstr "inhibit-startup-message"

# type: defopt
#: lispref/os.texi:149
msgid ""
"This variable inhibits the initial startup messages (the nonwarranty, "
"etc.).  If it is non-@code{nil}, then the messages are not printed."
msgstr ""

# type: defopt
#: lispref/os.texi:155
msgid ""
"This variable exists so you can set it in your personal init file, once you "
"are familiar with the contents of the startup message.  Do not set this "
"variable in the init file of a new user, or in a way that affects more than "
"one user, because that would prevent new users from receiving the "
"information they are supposed to see."
msgstr ""

# type: defopt
#: lispref/os.texi:157
#, no-wrap
msgid "inhibit-startup-echo-area-message"
msgstr "inhibit-startup-echo-area-message"

# type: defopt
#: lispref/os.texi:161
msgid ""
"This variable controls the display of the startup echo area message.  You "
"can suppress the startup echo area message by adding text with this form to "
"your init file:"
msgstr ""

# type: example
#: lispref/os.texi:165
#, no-wrap
msgid ""
"(setq inhibit-startup-echo-area-message\n"
"      \"@var{your-login-name}\")\n"
msgstr ""

# type: defopt
#: lispref/os.texi:172
msgid ""
"Emacs explicitly checks for an expression as shown above in your init file; "
"your login name must appear in the expression as a Lisp string constant.  "
"Other methods of setting @code{inhibit-startup-echo-area-message} to the "
"same value do not inhibit the startup message."
msgstr ""

# type: defopt
#: lispref/os.texi:176
msgid ""
"This way, you can easily inhibit the message for yourself if you wish, but "
"thoughtless copying of your init file will not inhibit the message for "
"someone else."
msgstr ""

# type: subsection
#: lispref/os.texi:179
#, no-wrap
msgid "The Init File, @file{.emacs}"
msgstr ""

# type: cindex
#: lispref/os.texi:180
#, no-wrap
msgid "init file"
msgstr ""

# type: file{#1}
#: lispref/os.texi:181
#, no-wrap
msgid ".emacs"
msgstr ""

# type: Plain text
#: lispref/os.texi:190
msgid ""
"When you start Emacs, it normally attempts to load your @dfn{init file}, a "
"file in your home directory.  Its normal name is @file{.emacs}, but you can "
"also call it @file{.emacs.el}.  Alternatively, you can use a file named @file"
"{init.el} in a subdirectory @file{.emacs.d}.  Whichever place you use, you "
"can also compile the file (@pxref{Byte Compilation}); then the actual file "
"loaded will be @file{.emacs.elc} or @file{init.elc}."
msgstr ""

# type: Plain text
#: lispref/os.texi:202
msgid ""
"The command-line switches @samp{-q}, @samp{-Q}, and @samp{-u} control "
"whether and where to find the init file; @samp{-q} (and the stronger @samp{-"
"Q}) says not to load an init file, while @samp{-u @var{user}} says to load "
"@var{user}'s init file instead of yours.  @xref{Entering Emacs,,, emacs, The "
"GNU Emacs Manual}.  If neither option is specified, Emacs uses the @code"
"{LOGNAME} environment variable, or the @code{USER} (most systems) or @code"
"{USERNAME} (MS systems) variable, to find your home directory and thus your "
"init file; this way, even if you have su'd, Emacs still loads your own init "
"file.  If those environment variables are absent, though, Emacs uses your "
"user-id to find your home directory."
msgstr ""

# type: cindex
#: lispref/os.texi:203
#, no-wrap
msgid "default init file"
msgstr ""

# type: Plain text
#: lispref/os.texi:214
msgid ""
"A site may have a @dfn{default init file}, which is the library named @file"
"{default.el}.  Emacs finds the @file{default.el} file through the standard "
"search path for libraries (@pxref{How Programs Do Loading}).  The Emacs "
"distribution does not come with this file; sites may provide one for local "
"customizations.  If the default init file exists, it is loaded whenever you "
"start Emacs, except in batch mode or if @samp{-q} (or @samp{-Q}) is "
"specified.  But your own personal init file, if any, is loaded first; if it "
"sets @code{inhibit-default-init} to a non-@code{nil} value, then Emacs does "
"not subsequently load the @file{default.el} file."
msgstr ""

# type: Plain text
#: lispref/os.texi:218
msgid ""
"Another file for site-customization is @file{site-start.el}.  Emacs loads "
"this @emph{before} the user's init file.  You can inhibit the loading of "
"this file with the option @samp{--no-site-file}."
msgstr ""

# type: defvar
#: lispref/os.texi:219
#, no-wrap
msgid "site-run-file"
msgstr ""

# type: defvar
#: lispref/os.texi:224
msgid ""
"This variable specifies the site-customization file to load before the "
"user's init file.  Its normal value is @code{\"site-start\"}.  The only way "
"you can change it with real effect is to do so before dumping Emacs."
msgstr ""

# type: Plain text
#: lispref/os.texi:229
msgid ""
"@xref{Init Examples,, Init File Examples, emacs, The GNU Emacs Manual}, for "
"examples of how to make various commonly desired customizations in your @file"
"{.emacs} file."
msgstr ""

# type: defopt
#: lispref/os.texi:230
#, no-wrap
msgid "inhibit-default-init"
msgstr "inhibit-default-init"

# type: defopt
#: lispref/os.texi:235
msgid ""
"This variable prevents Emacs from loading the default initialization library "
"file for your session of Emacs.  If its value is non-@code{nil}, then the "
"default library is not loaded.  The default value is @code{nil}."
msgstr ""

# type: defvar
#: lispref/os.texi:241
msgid ""
"This normal hook is run, once, just before loading all the init files (the "
"user's init file, @file{default.el}, and/or @file{site-start.el}).  (The "
"only way to change it with real effect is before dumping Emacs.)"
msgstr ""

# type: defvar
#: lispref/os.texi:248
msgid ""
"This normal hook is run, once, just after loading all the init files (the "
"user's init file, @file{default.el}, and/or @file{site-start.el}), before "
"loading the terminal-specific library and processing the command-line action "
"arguments."
msgstr ""

# type: defvar
#: lispref/os.texi:253
msgid ""
"This normal hook is run, once, just after handling the command line "
"arguments, just before @code{term-setup-hook}."
msgstr ""

# type: defvar
#: lispref/os.texi:255
#, no-wrap
msgid "user-init-file"
msgstr "user-init-file"

# type: defvar
#: lispref/os.texi:259
msgid ""
"This variable holds the absolute file name of the user's init file.  If the "
"actual init file loaded is a compiled file, such as @file{.emacs.elc}, the "
"value refers to the corresponding source file."
msgstr ""

# type: subsection
#: lispref/os.texi:262
#, no-wrap
msgid "Terminal-Specific Initialization"
msgstr ""

# type: cindex
#: lispref/os.texi:263
#, no-wrap
msgid "terminal-specific initialization"
msgstr ""

# type: Plain text
#: lispref/os.texi:273
msgid ""
"Each terminal type can have its own Lisp library that Emacs loads when run "
"on that type of terminal.  The library's name is constructed by "
"concatenating the value of the variable @code{term-file-prefix} and the "
"terminal type (specified by the environment variable @code{TERM}).  "
"Normally, @code{term-file-prefix} has the value @code{\"term/\"}; changing "
"this is not recommended.  Emacs finds the file in the normal manner, by "
"searching the @code{load-path} directories, and trying the @samp{.elc} and "
"@samp{.el} suffixes."
msgstr ""

# type: cindex
#: lispref/os.texi:274
#, no-wrap
msgid "Termcap"
msgstr ""

# type: Plain text
#: lispref/os.texi:280
msgid ""
"The usual function of a terminal-specific library is to enable special keys "
"to send sequences that Emacs can recognize.  It may also need to set or add "
"to @code{function-key-map} if the Termcap or Terminfo entry does not specify "
"all the terminal's function keys.  @xref{Terminal Input}."
msgstr ""

# type: Plain text
#: lispref/os.texi:292
msgid ""
"When the name of the terminal type contains a hyphen, and no library is "
"found whose name is identical to the terminal's name, Emacs strips from the "
"terminal's name the last hyphen and everything that follows it, and tries "
"again.  This process is repeated until Emacs finds a matching library or "
"until there are no more hyphens in the name (the latter means the terminal "
"doesn't have any library specific to it).  Thus, for example, if there are "
"no @samp{aaa-48} and @samp{aaa-30} libraries, Emacs will try the same "
"library @file{term/aaa.el} for terminal types @samp{aaa-48} and @samp{aaa-30-"
"rv}.  If necessary, the library can evaluate @code{(getenv \"TERM\")} to "
"find the full name of the terminal type."
msgstr ""

# type: Plain text
#: lispref/os.texi:297
msgid ""
"Your init file can prevent the loading of the terminal-specific library by "
"setting the variable @code{term-file-prefix} to @code{nil}.  This feature is "
"useful when experimenting with your own peculiar customizations."
msgstr ""

# type: Plain text
#: lispref/os.texi:305
msgid ""
"You can also arrange to override some of the actions of the terminal-"
"specific library by setting the variable @code{term-setup-hook}.  This is a "
"normal hook which Emacs runs using @code{run-hooks} at the end of Emacs "
"initialization, after loading both your init file and any terminal-specific "
"libraries.  You can use this variable to define initializations for "
"terminals that do not have their own libraries.  @xref{Hooks}."
msgstr ""

# type: defvar
#: lispref/os.texi:306
#, no-wrap
msgid "term-file-prefix"
msgstr "term-file-prefix"

# type: cindex
#: lispref/os.texi:307
#, no-wrap
msgid "@code{TERM} environment variable"
msgstr ""

# type: defvar
#: lispref/os.texi:310
msgid ""
"If the @code{term-file-prefix} variable is non-@code{nil}, Emacs loads a "
"terminal-specific initialization file as follows:"
msgstr ""

# type: example
#: lispref/os.texi:313
#, no-wrap
msgid "(load (concat term-file-prefix (getenv \"TERM\")))\n"
msgstr ""

# type: defvar
#: lispref/os.texi:320
msgid ""
"You may set the @code{term-file-prefix} variable to @code{nil} in your init "
"file if you do not wish to load the terminal-initialization file.  To do "
"this, put the following in your init file: @code{(setq term-file-prefix "
"nil)}."
msgstr ""

# type: defvar
#: lispref/os.texi:323
msgid ""
"On MS-DOS, if the environment variable @code{TERM} is not set, Emacs uses "
"@samp{internal} as the terminal type."
msgstr ""

# type: defvar
#: lispref/os.texi:329
msgid ""
"This variable is a normal hook that Emacs runs after loading your init file, "
"the default initialization file (if any) and the terminal-specific Lisp file."
msgstr ""

# type: defvar
#: lispref/os.texi:332
msgid ""
"You can use @code{term-setup-hook} to override the definitions made by a "
"terminal-specific file."
msgstr ""

# type: Plain text
#: lispref/os.texi:336
msgid ""
"See @code{window-setup-hook} in @ref{Window Systems}, for a related feature."
msgstr ""

# type: cindex
#: lispref/os.texi:339
#, no-wrap
msgid "command-line arguments"
msgstr ""

# type: Plain text
#: lispref/os.texi:350
msgid ""
"You can use command-line arguments to request various actions when you start "
"Emacs.  Since you do not need to start Emacs more than once per day, and "
"will often leave your Emacs session running longer than that, command-line "
"arguments are hardly ever used.  As a practical matter, it is best to avoid "
"making the habit of using them, since this habit would encourage you to kill "
"and restart Emacs unnecessarily often.  These options exist for two reasons: "
"to be compatible with other editors (for invocation by other programs) and "
"to enable shell scripts to run specific Lisp programs."
msgstr ""

# type: Plain text
#: lispref/os.texi:353
msgid ""
"This section describes how Emacs processes command-line arguments, and how "
"you can customize them."
msgstr ""

# type: ignore
#: lispref/os.texi:363
#, no-wrap
msgid ""
"  (Note that some other editors require you to start afresh each time\n"
"you want to edit a file.  With this kind of editor, you will probably\n"
"specify the file as a command-line argument.  The recommended way to\n"
"use GNU Emacs is to start it only once, just after you log in, and do\n"
"all your editing in the same Emacs process.  Each time you want to edit\n"
"a different file, you visit it with the existing Emacs, which eventually\n"
"comes to have many files in it ready for editing.  Usually you do not\n"
"kill the Emacs until you are about to log out.)\n"
msgstr ""

# type: defun
#: lispref/os.texi:365
#, no-wrap
msgid "command-line"
msgstr ""

# type: defun
#: lispref/os.texi:369
msgid ""
"This function parses the command line that Emacs was called with, processes "
"it, loads the user's init file and displays the startup messages."
msgstr ""

# type: defvar
#: lispref/os.texi:371
#, no-wrap
msgid "command-line-processed"
msgstr "command-line-processed"

# type: defvar
#: lispref/os.texi:374
msgid ""
"The value of this variable is @code{t} once the command line has been "
"processed."
msgstr ""

# type: defvar
#: lispref/os.texi:378
msgid ""
"If you redump Emacs by calling @code{dump-emacs}, you may wish to set this "
"variable to @code{nil} first in order to cause the new dumped Emacs to "
"process its new command-line arguments."
msgstr ""

# type: defvar
#: lispref/os.texi:380
#, no-wrap
msgid "command-switch-alist"
msgstr "command-switch-alist"

# type: cindex
#: lispref/os.texi:381
#, no-wrap
msgid "switches on command line"
msgstr ""

# type: cindex
#: lispref/os.texi:382
#, no-wrap
msgid "options on command line"
msgstr ""

# type: cindex
#: lispref/os.texi:383
#, no-wrap
msgid "command-line options"
msgstr ""

# type: defvar
#: lispref/os.texi:387
msgid ""
"The value of this variable is an alist of user-defined command-line options "
"and associated handler functions.  This variable exists so you can add "
"elements to it."
msgstr ""

# type: defvar
#: lispref/os.texi:390
msgid ""
"A @dfn{command-line option} is an argument on the command line, which has "
"the form:"
msgstr ""

# type: example
#: lispref/os.texi:393
#, no-wrap
msgid "-@var{option}\n"
msgstr ""

# type: defvar
#: lispref/os.texi:396
msgid "The elements of the @code{command-switch-alist} look like this:"
msgstr ""

# type: example
#: lispref/os.texi:399
#, no-wrap
msgid "(@var{option} . @var{handler-function})\n"
msgstr ""

# type: defvar
#: lispref/os.texi:405
msgid ""
"The @sc{car}, @var{option}, is a string, the name of a command-line option "
"(not including the initial hyphen).  The @var{handler-function} is called to "
"handle @var{option}, and receives the option name as its sole argument."
msgstr ""

# type: defvar
#: lispref/os.texi:411
msgid ""
"In some cases, the option is followed in the command line by an argument.  "
"In these cases, the @var{handler-function} can find all the remaining "
"command-line arguments in the variable @code{command-line-args-left}.  (The "
"entire list of command-line arguments is in @code{command-line-args}.)"
msgstr ""

# type: defvar
#: lispref/os.texi:416
msgid ""
"The command-line arguments are parsed by the @code{command-line-1} function "
"in the @file{startup.el} file.  See also @ref{Emacs Invocation, , Command "
"Line Arguments for Emacs Invocation, emacs, The GNU Emacs Manual}."
msgstr ""

# type: defvar
#: lispref/os.texi:418
#, no-wrap
msgid "command-line-args"
msgstr "command-line-args"

# type: defvar
#: lispref/os.texi:421
msgid ""
"The value of this variable is the list of command-line arguments passed to "
"Emacs."
msgstr ""

# type: defvar
#: lispref/os.texi:429
msgid ""
"This variable's value is a list of functions for handling an unrecognized "
"command-line argument.  Each time the next argument to be processed has no "
"special meaning, the functions in this list are called, in order of "
"appearance, until one of them returns a non-@code{nil} value."
msgstr ""

# type: defvar
#: lispref/os.texi:435
msgid ""
"These functions are called with no arguments.  They can access the command-"
"line argument under consideration through the variable @code{argi}, which is "
"bound temporarily at this point.  The remaining arguments (not including the "
"current one) are in the variable @code{command-line-args-left}."
msgstr ""

# type: defvar
#: lispref/os.texi:440
msgid ""
"When a function recognizes and processes the argument in @code{argi}, it "
"should return a non-@code{nil} value to say it has dealt with that "
"argument.  If it has also dealt with some of the following arguments, it can "
"indicate that by deleting them from @code{command-line-args-left}."
msgstr ""

# type: defvar
#: lispref/os.texi:443
msgid ""
"If all of these functions return @code{nil}, then the argument is used as a "
"file name to visit."
msgstr ""

# type: section
#: lispref/os.texi:446
#, no-wrap
msgid "Getting Out of Emacs"
msgstr ""

# type: cindex
#: lispref/os.texi:447
#, no-wrap
msgid "exiting Emacs"
msgstr ""

# type: Plain text
#: lispref/os.texi:454
msgid ""
"There are two ways to get out of Emacs: you can kill the Emacs job, which "
"exits permanently, or you can suspend it, which permits you to reenter the "
"Emacs process later.  As a practical matter, you seldom kill Emacs---only "
"when you are about to log out.  Suspending is much more common."
msgstr ""

# type: menu
#: lispref/os.texi:458 lispref/os.texi:460 lispref/os.texi:462
#: lispref/vol1.texi:914 lispref/vol2.texi:915
#, no-wrap
msgid "Killing Emacs"
msgstr ""

# type: menu
#: lispref/os.texi:458 lispref/vol1.texi:914 lispref/vol2.texi:915
msgid "Exiting Emacs irreversibly."
msgstr ""

# type: menu
#: lispref/os.texi:458 lispref/os.texi:513 lispref/os.texi:514
#: lispref/vol1.texi:914 lispref/vol2.texi:915
#, no-wrap
msgid "Suspending Emacs"
msgstr ""

# type: menu
#: lispref/os.texi:458 lispref/vol1.texi:914 lispref/vol2.texi:915
msgid "Exiting Emacs reversibly."
msgstr ""

# type: cindex
#: lispref/os.texi:463
#, no-wrap
msgid "killing Emacs"
msgstr ""

# type: Plain text
#: lispref/os.texi:468
msgid ""
"Killing Emacs means ending the execution of the Emacs process.  The parent "
"process normally resumes control.  The low-level primitive for killing Emacs "
"is @code{kill-emacs}."
msgstr ""

# type: defun
#: lispref/os.texi:469
#, no-wrap
msgid "kill-emacs &optional exit-data"
msgstr ""

# type: defun
#: lispref/os.texi:471
msgid "This function exits the Emacs process and kills it."
msgstr ""

# type: defun
#: lispref/os.texi:475
msgid ""
"If @var{exit-data} is an integer, then it is used as the exit status of the "
"Emacs process.  (This is useful primarily in batch operation; see @ref{Batch "
"Mode}.)"
msgstr ""

# type: defun
#: lispref/os.texi:479
msgid ""
"If @var{exit-data} is a string, its contents are stuffed into the terminal "
"input buffer so that the shell (or whatever program next reads input) can "
"read them."
msgstr ""

# type: Plain text
#: lispref/os.texi:488
msgid ""
"All the information in the Emacs process, aside from files that have been "
"saved, is lost when the Emacs process is killed.  Because killing Emacs "
"inadvertently can lose a lot of work, Emacs queries for confirmation before "
"actually terminating if you have buffers that need saving or subprocesses "
"that are running.  This is done in the function @code{save-buffers-kill-"
"emacs}, the higher level function from which @code{kill-emacs} is usually "
"called."
msgstr ""

# type: defvar
#: lispref/os.texi:497
msgid ""
"After asking the standard questions, @code{save-buffers-kill-emacs} calls "
"the functions in the list @code{kill-emacs-query-functions}, in order of "
"appearance, with no arguments.  These functions can ask for additional "
"confirmation from the user.  If any of them returns @code{nil}, @code{save-"
"buffers-kill-emacs} does not kill Emacs, and does not run the remaining "
"functions in this hook.  Calling @code{kill-emacs} directly does not run "
"this hook."
msgstr ""

# type: defvar
#: lispref/os.texi:504
msgid ""
"This variable is a normal hook; once @code{save-buffers-kill-emacs} is "
"finished with all file saving and confirmation, it calls @code{kill-emacs} "
"which runs the functions in this hook.  @code{kill-emacs} does not run this "
"hook in batch mode."
msgstr ""

# type: defvar
#: lispref/os.texi:511
msgid ""
"@code{kill-emacs} may be invoked directly (that is not via @code{save-"
"buffers-kill-emacs}) if the terminal is disconnected, or in similar "
"situations where interaction with the user is not possible.  Thus, if your "
"hook needs to interact with the user, put it on @code{kill-emacs-query-"
"functions}; if it needs to run regardless of how Emacs is killed, put it on "
"@code{kill-emacs-hook}."
msgstr ""

# type: cindex
#: lispref/os.texi:515
#, no-wrap
msgid "suspending Emacs"
msgstr ""

# type: Plain text
#: lispref/os.texi:523
msgid ""
"@dfn{Suspending Emacs} means stopping Emacs temporarily and returning "
"control to its superior process, which is usually the shell.  This allows "
"you to resume editing later in the same Emacs process, with the same "
"buffers, the same kill ring, the same undo history, and so on.  To resume "
"Emacs, use the appropriate command in the parent shell---most likely @code"
"{fg}."
msgstr ""

# type: Plain text
#: lispref/os.texi:527
msgid ""
"Some operating systems do not support suspension of jobs; on these systems, "
"``suspension'' actually creates a new shell temporarily as a subprocess of "
"Emacs.  Then you would exit the shell to return to Emacs."
msgstr ""

# type: Plain text
#: lispref/os.texi:533
msgid ""
"Suspension is not useful with window systems, because the Emacs job may not "
"have a parent that can resume it again, and in any case you can give input "
"to some other job such as a shell merely by moving to a different window.  "
"Therefore, suspending is not allowed when Emacs is using a window system (X, "
"MS Windows, or Mac)."
msgstr ""

# type: defun
#: lispref/os.texi:534
#, no-wrap
msgid "suspend-emacs &optional string"
msgstr ""

# type: defun
#: lispref/os.texi:538
msgid ""
"This function stops Emacs and returns control to the superior process.  If "
"and when the superior process resumes Emacs, @code{suspend-emacs} returns "
"@code{nil} to its caller in Lisp."
msgstr ""

# type: defun
#: lispref/os.texi:543
msgid ""
"If @var{string} is non-@code{nil}, its characters are sent to be read as "
"terminal input by Emacs's superior shell.  The characters in @var{string} "
"are not echoed by the superior shell; only the results appear."
msgstr ""

# type: defun
#: lispref/os.texi:546
msgid ""
"Before suspending, @code{suspend-emacs} runs the normal hook @code{suspend-"
"hook}."
msgstr ""

# type: defun
#: lispref/os.texi:549
msgid ""
"After the user resumes Emacs, @code{suspend-emacs} runs the normal hook @code"
"{suspend-resume-hook}.  @xref{Hooks}."
msgstr ""

# type: defun
#: lispref/os.texi:553
msgid ""
"The next redisplay after resumption will redraw the entire screen, unless "
"the variable @code{no-redraw-on-reenter} is non-@code{nil} (@pxref{Refresh "
"Screen})."
msgstr ""

# type: defun
#: lispref/os.texi:556
msgid ""
"In the following example, note that @samp{pwd} is not echoed after Emacs is "
"suspended.  But it is read and executed by the shell."
msgstr ""

# type: group
#: lispref/os.texi:561
#, no-wrap
msgid ""
"(suspend-emacs)\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/os.texi:572
#, no-wrap
msgid ""
"(add-hook 'suspend-hook\n"
"          (function (lambda ()\n"
"                      (or (y-or-n-p\n"
"                            \"Really suspend? \")\n"
"                          (error \"Suspend canceled\")))))\n"
"     @result{} (lambda nil\n"
"          (or (y-or-n-p \"Really suspend? \")\n"
"              (error \"Suspend canceled\")))\n"
msgstr ""

# type: group
#: lispref/os.texi:577
#, no-wrap
msgid ""
"(add-hook 'suspend-resume-hook\n"
"          (function (lambda () (message \"Resumed!\"))))\n"
"     @result{} (lambda nil (message \"Resumed!\"))\n"
msgstr ""

# type: group
#: lispref/os.texi:581
#, no-wrap
msgid ""
"(suspend-emacs \"pwd\")\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/os.texi:586
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"Really suspend? @kbd{y}\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

# type: group
#: lispref/os.texi:592
#, no-wrap
msgid ""
"---------- Parent Shell ----------\n"
"lewis@@slug[23] % /user/lewis/manual\n"
"lewis@@slug[24] % fg\n"
msgstr ""

# type: group
#: lispref/os.texi:597
#, no-wrap
msgid ""
"---------- Echo Area ----------\n"
"Resumed!\n"
msgstr ""

# type: defvar
#: lispref/os.texi:603
msgid "This variable is a normal hook that Emacs runs before suspending."
msgstr ""

# type: defvar
#: lispref/os.texi:608
msgid ""
"This variable is a normal hook that Emacs runs on resuming after a "
"suspension."
msgstr ""

# type: section
#: lispref/os.texi:611
#, no-wrap
msgid "Operating System Environment"
msgstr ""

# type: cindex
#: lispref/os.texi:612
#, no-wrap
msgid "operating system environment"
msgstr ""

# type: Plain text
#: lispref/os.texi:617
msgid ""
"Emacs provides access to variables in the operating system environment "
"through various functions.  These variables include the name of the system, "
"the user's @acronym{UID}, and so on."
msgstr ""

# type: defvar
#: lispref/os.texi:618
#, no-wrap
msgid "system-configuration"
msgstr ""

# type: defvar
#: lispref/os.texi:623
msgid ""
"This variable holds the standard GNU configuration name for the hardware/"
"software configuration of your system, as a string.  The convenient way to "
"test parts of this string is with @code{string-match}."
msgstr ""

# type: cindex
#: lispref/os.texi:625
#, no-wrap
msgid "system type and name"
msgstr ""

# type: defvar
#: lispref/os.texi:626
#, no-wrap
msgid "system-type"
msgstr ""

# type: defvar
#: lispref/os.texi:629
msgid ""
"The value of this variable is a symbol indicating the type of operating "
"system Emacs is operating on.  Here is a table of the possible values:"
msgstr ""

# type: item
#: lispref/os.texi:631
#, no-wrap
msgid "alpha-vms"
msgstr ""

# type: table
#: lispref/os.texi:633
msgid "VMS on the Alpha."
msgstr ""

# type: item
#: lispref/os.texi:634
#, no-wrap
msgid "aix-v3"
msgstr ""

# type: table
#: lispref/os.texi:636
msgid "AIX."
msgstr ""

# type: item
#: lispref/os.texi:637
#, no-wrap
msgid "berkeley-unix"
msgstr ""

# type: table
#: lispref/os.texi:639
msgid "Berkeley BSD."
msgstr ""

# type: item
#: lispref/os.texi:640
#, no-wrap
msgid "cygwin"
msgstr ""

# type: table
#: lispref/os.texi:642
msgid "Cygwin."
msgstr ""

# type: item
#: lispref/os.texi:643
#, no-wrap
msgid "dgux"
msgstr ""

# type: table
#: lispref/os.texi:645
msgid "Data General DGUX operating system."
msgstr ""

# type: item
#: lispref/os.texi:646
#, no-wrap
msgid "gnu"
msgstr ""

# type: table
#: lispref/os.texi:648
msgid ""
"the GNU system (using the GNU kernel, which consists of the HURD and Mach)."
msgstr ""

# type: item
#: lispref/os.texi:649
#, no-wrap
msgid "gnu/linux"
msgstr ""

# type: table
#: lispref/os.texi:653
msgid ""
"A GNU/Linux system---that is, a variant GNU system, using the Linux kernel.  "
"(These systems are the ones people often call ``Linux,'' but actually Linux "
"is just the kernel, not the whole system.)"
msgstr ""

# type: item
#: lispref/os.texi:654
#, no-wrap
msgid "hpux"
msgstr ""

# type: table
#: lispref/os.texi:656
msgid "Hewlett-Packard HPUX operating system."
msgstr ""

# type: item
#: lispref/os.texi:657
#, no-wrap
msgid "irix"
msgstr ""

# type: table
#: lispref/os.texi:659
msgid "Silicon Graphics Irix system."
msgstr ""

# type: item
#: lispref/os.texi:660
#, no-wrap
msgid "ms-dos"
msgstr ""

# type: table
#: lispref/os.texi:664
msgid ""
"Microsoft MS-DOS ``operating system.'' Emacs compiled with DJGPP for MS-DOS "
"binds @code{system-type} to @code{ms-dos} even when you run it on MS-Windows."
msgstr ""

# type: item
#: lispref/os.texi:665
#, no-wrap
msgid "next-mach"
msgstr ""

# type: table
#: lispref/os.texi:667
msgid "NeXT Mach-based system."
msgstr ""

# type: item
#: lispref/os.texi:668
#, no-wrap
msgid "rtu"
msgstr ""

# type: table
#: lispref/os.texi:670
msgid "Masscomp RTU, UCB universe."
msgstr ""

# type: item
#: lispref/os.texi:671
#, no-wrap
msgid "unisoft-unix"
msgstr ""

# type: table
#: lispref/os.texi:673
msgid "UniSoft UniPlus."
msgstr ""

# type: item
#: lispref/os.texi:674
#, no-wrap
msgid "usg-unix-v"
msgstr ""

# type: table
#: lispref/os.texi:676
msgid "AT&T System V."
msgstr ""

# type: item
#: lispref/os.texi:677
#, no-wrap
msgid "vax-vms"
msgstr ""

# type: table
#: lispref/os.texi:679
msgid "VAX VMS."
msgstr ""

# type: item
#: lispref/os.texi:680
#, no-wrap
msgid "windows-nt"
msgstr ""

# type: table
#: lispref/os.texi:683
msgid ""
"Microsoft windows NT.  The same executable supports Windows 9X, but the "
"value of @code{system-type} is @code{windows-nt} in either case."
msgstr ""

# type: item
#: lispref/os.texi:684
#, no-wrap
msgid "xenix"
msgstr ""

# type: table
#: lispref/os.texi:686
msgid "SCO Xenix 386."
msgstr ""

# type: defvar
#: lispref/os.texi:693
msgid ""
"We do not wish to add new symbols to make finer distinctions unless it is "
"absolutely necessary! In fact, we hope to eliminate some of these "
"alternatives in the future.  We recommend using @code{system-configuration} "
"to distinguish between different operating systems."
msgstr ""

# type: defun
#: lispref/os.texi:695
#, no-wrap
msgid "system-name"
msgstr ""

# type: defun
#: lispref/os.texi:697
msgid "This function returns the name of the machine you are running on."
msgstr ""

# type: example
#: lispref/os.texi:700
#, no-wrap
msgid ""
"(system-name)\n"
"     @result{} \"www.gnu.org\"\n"
msgstr ""

# type: Plain text
#: lispref/os.texi:709
msgid ""
"The symbol @code{system-name} is a variable as well as a function.  In fact, "
"the function returns whatever value the variable @code{system-name} "
"currently holds.  Thus, you can set the variable @code{system-name} in case "
"Emacs is confused about the name of your system.  The variable is also "
"useful for constructing frame titles (@pxref{Frame Titles})."
msgstr ""

# type: defvar
#: lispref/os.texi:710
#, no-wrap
msgid "mail-host-address"
msgstr ""

# type: defvar
#: lispref/os.texi:717
msgid ""
"If this variable is non-@code{nil}, it is used instead of @code{system-name} "
"for purposes of generating email addresses.  For example, it is used when "
"constructing the default value of @code{user-mail-address}.  @xref{User "
"Identification}.  (Since this is done when Emacs starts up, the value "
"actually used is the one saved when Emacs was dumped.  @xref{Building "
"Emacs}.)"
msgstr ""

# type: deffn
#: lispref/os.texi:719
#, no-wrap
msgid "Command getenv var"
msgstr ""

# type: cindex
#: lispref/os.texi:720
#, no-wrap
msgid "environment variable access"
msgstr ""

# type: deffn
#: lispref/os.texi:726
msgid ""
"This function returns the value of the environment variable @var{var}, as a "
"string.  @var{var} should be a string.  If @var{var} is undefined in the "
"environment, @code{getenv} returns @code{nil}.  If returns @samp{\"\"} if "
"@var{var} is set but null.  Within Emacs, the environment variable values "
"are kept in the Lisp variable @code{process-environment}."
msgstr ""

# type: group
#: lispref/os.texi:731
#, no-wrap
msgid ""
"(getenv \"USER\")\n"
"     @result{} \"lewis\"\n"
msgstr ""

# type: group
#: lispref/os.texi:737
#, no-wrap
msgid ""
"lewis@@slug[10] % printenv\n"
"PATH=.:/user/lewis/bin:/usr/bin:/usr/local/bin\n"
"USER=lewis\n"
msgstr ""

# type: group
#: lispref/os.texi:742
#, no-wrap
msgid ""
"TERM=ibmapa16\n"
"SHELL=/bin/csh\n"
"HOME=/user/lewis\n"
msgstr ""

# type: deffn
#: lispref/os.texi:747
#, no-wrap
msgid "Command setenv variable &optional value"
msgstr ""

# type: deffn
#: lispref/os.texi:757
msgid ""
"This command sets the value of the environment variable named @var{variable} "
"to @var{value}.  @var{variable} should be a string.  Internally, Emacs Lisp "
"can handle any string.  However, normally @var{variable} should be a valid "
"shell identifier, that is, a sequence of letters, digits and underscores, "
"starting with a letter or underscore.  Otherwise, errors may occur if "
"subprocesses of Emacs try to access the value of @var{variable}.  If @var"
"{value} is omitted or @code{nil}, @code{setenv} removes @var{variable} from "
"the environment.  Otherwise, @var{value} should be a string."
msgstr ""

# type: deffn
#: lispref/os.texi:760
msgid ""
"@code{setenv} works by modifying @code{process-environment}; binding that "
"variable with @code{let} is also reasonable practice."
msgstr ""

# type: deffn
#: lispref/os.texi:763
msgid ""
"@code{setenv} returns the new value of @var{variable}, or @code{nil} if it "
"removed @var{variable} from the environment."
msgstr ""

# type: defvar
#: lispref/os.texi:765
#, no-wrap
msgid "process-environment"
msgstr ""

# type: defvar
#: lispref/os.texi:769
msgid ""
"This variable is a list of strings, each describing one environment "
"variable.  The functions @code{getenv} and @code{setenv} work by means of "
"this variable."
msgstr ""

# type: group
#: lispref/os.texi:776
#, no-wrap
msgid ""
"process-environment\n"
"@result{} (\"l=/usr/stanford/lib/gnuemacs/lisp\"\n"
"    \"PATH=.:/user/lewis/bin:/usr/class:/nfsusr/local/bin\"\n"
"    \"USER=lewis\"\n"
msgstr ""

# type: group
#: lispref/os.texi:781
#, no-wrap
msgid ""
"    \"TERM=ibmapa16\"\n"
"    \"SHELL=/bin/csh\"\n"
"    \"HOME=/user/lewis\")\n"
msgstr ""

# type: defvar
#: lispref/os.texi:787
msgid ""
"If @code{process-environment} contains ``duplicate'' elements that specify "
"the same environment variable, the first of these elements specifies the "
"variable, and the other ``duplicates'' are ignored."
msgstr ""

# type: defvar
#: lispref/os.texi:789
#, no-wrap
msgid "path-separator"
msgstr ""

# type: defvar
#: lispref/os.texi:794
msgid ""
"This variable holds a string which says which character separates "
"directories in a search path (as found in an environment variable).  Its "
"value is @code{\":\"} for Unix and GNU systems, and @code{\";\"} for MS-DOS "
"and MS-Windows."
msgstr ""

# type: defun
#: lispref/os.texi:796
#, no-wrap
msgid "parse-colon-path path"
msgstr ""

# type: defun
#: lispref/os.texi:802
msgid ""
"This function takes a search path string such as would be the value of the "
"@code{PATH} environment variable, and splits it at the separators, returning "
"a list of directory names.  @code{nil} in this list stands for ``use the "
"current directory.'' Although the function's name says ``colon,'' it "
"actually uses the value of @code{path-separator}."
msgstr ""

# type: example
#: lispref/os.texi:806
#, no-wrap
msgid ""
"(parse-colon-path \":/foo:/bar\")\n"
"     @result{} (nil \"/foo/\" \"/bar/\")\n"
msgstr ""

# type: defvar
#: lispref/os.texi:809
#, no-wrap
msgid "invocation-name"
msgstr ""

# type: defvar
#: lispref/os.texi:812
msgid ""
"This variable holds the program name under which Emacs was invoked.  The "
"value is a string, and does not include a directory name."
msgstr ""

# type: defvar
#: lispref/os.texi:814
#, no-wrap
msgid "invocation-directory"
msgstr ""

# type: defvar
#: lispref/os.texi:817
msgid ""
"This variable holds the directory from which the Emacs executable was "
"invoked, or perhaps @code{nil} if that directory cannot be determined."
msgstr ""

# type: defvar
#: lispref/os.texi:819
#, no-wrap
msgid "installation-directory"
msgstr ""

# type: defvar
#: lispref/os.texi:825
msgid ""
"If non-@code{nil}, this is a directory within which to look for the @file"
"{lib-src} and @file{etc} subdirectories.  This is non-@code{nil} when Emacs "
"can't find those directories in their standard installed locations, but can "
"find them in a directory related somehow to the one containing the Emacs "
"executable."
msgstr ""

# type: defun
#: lispref/os.texi:827
#, no-wrap
msgid "load-average &optional use-float"
msgstr ""

# type: defun
#: lispref/os.texi:830
msgid ""
"This function returns the current 1-minute, 5-minute, and 15-minute load "
"averages, in a list."
msgstr ""

# type: defun
#: lispref/os.texi:835
msgid ""
"By default, the values are integers that are 100 times the system load "
"averages, which indicate the average number of processes trying to run.  If "
"@var{use-float} is non-@code{nil}, then they are returned as floating point "
"numbers and without multiplying by 100."
msgstr ""

# type: defun
#: lispref/os.texi:840
msgid ""
"If it is impossible to obtain the load average, this function signals an "
"error.  On some platforms, access to load averages requires installing Emacs "
"as setuid or setgid so that it can read kernel information, and that usually "
"isn't advisable."
msgstr ""

# type: defun
#: lispref/os.texi:844
msgid ""
"If the 1-minute load average is available, but the 5- or 15-minute averages "
"are not, this function returns a shortened list containing the available "
"averages."
msgstr ""

# type: group
#: lispref/os.texi:849
#, no-wrap
msgid ""
"(load-average)\n"
"     @result{} (169 48 36)\n"
msgstr ""

# type: group
#: lispref/os.texi:853
#, no-wrap
msgid ""
"(load-average t)\n"
"     @result{} (1.69 0.48 0.36)\n"
msgstr ""

# type: group
#: lispref/os.texi:859
#, no-wrap
msgid ""
"lewis@@rocky[5] % uptime\n"
" 11:55am  up 1 day, 19:37,  3 users,\n"
" load average: 1.69, 0.48, 0.36\n"
msgstr ""

# type: defun
#: lispref/os.texi:863
#, no-wrap
msgid "emacs-pid"
msgstr ""

# type: defun
#: lispref/os.texi:866
msgid ""
"This function returns the process @acronym{ID} of the Emacs process, as an "
"integer."
msgstr ""

# type: defvar
#: lispref/os.texi:868
#, no-wrap
msgid "tty-erase-char"
msgstr ""

# type: defvar
#: lispref/os.texi:872
msgid ""
"This variable holds the erase character that was selected in the system's "
"terminal driver, before Emacs was started.  The value is @code{nil} if Emacs "
"is running under a window system."
msgstr ""

# type: defun
#: lispref/os.texi:874
#, no-wrap
msgid "setprv privilege-name &optional setp getprv"
msgstr ""

# type: defun
#: lispref/os.texi:881
msgid ""
"This function sets or resets a VMS privilege.  (It does not exist on other "
"systems.)  The first argument is the privilege name, as a string.  The "
"second argument, @var{setp}, is @code{t} or @code{nil}, indicating whether "
"the privilege is to be turned on or off.  Its default is @code{nil}.  The "
"function returns @code{t} if successful, @code{nil} otherwise."
msgstr ""

# type: defun
#: lispref/os.texi:885
msgid ""
"If the third argument, @var{getprv}, is non-@code{nil}, @code{setprv} does "
"not change the privilege, but returns @code{t} or @code{nil} indicating "
"whether the privilege is currently enabled."
msgstr ""

# type: cindex
#: lispref/os.texi:889
#, no-wrap
msgid "user identification"
msgstr ""

# type: defvar
#: lispref/os.texi:891
#, no-wrap
msgid "init-file-user"
msgstr ""

# type: defvar
#: lispref/os.texi:896
msgid ""
"This variable says which user's init files should be used by Emacs---or @code"
"{nil} if none.  @code{\"\"} stands for the user who originally logged in.  "
"The value reflects command-line options such as @samp{-q} or @samp{-u @var"
"{user}}."
msgstr ""

# type: defvar
#: lispref/os.texi:903
msgid ""
"Lisp packages that load files of customizations, or any other sort of user "
"profile, should obey this variable in deciding where to find it.  They "
"should load the profile of the user name found in this variable.  If @code"
"{init-file-user} is @code{nil}, meaning that the @samp{-q} option was used, "
"then Lisp packages should not load any customization files or user profile."
msgstr ""

# type: defvar
#: lispref/os.texi:905
#, no-wrap
msgid "user-mail-address"
msgstr ""

# type: defvar
#: lispref/os.texi:911
msgid ""
"This holds the nominal email address of the user who is using Emacs.  Emacs "
"normally sets this variable to a default value after reading your init "
"files, but not if you have already set it.  So you can set the variable to "
"some other value in your init file if you do not want to use the default "
"value."
msgstr ""

# type: defun
#: lispref/os.texi:913
#, no-wrap
msgid "user-login-name &optional uid"
msgstr ""

# type: defun
#: lispref/os.texi:919
msgid ""
"If you don't specify @var{uid}, this function returns the name under which "
"the user is logged in.  If the environment variable @code{LOGNAME} is set, "
"that value is used.  Otherwise, if the environment variable @code{USER} is "
"set, that value is used.  Otherwise, the value is based on the effective "
"@acronym{UID}, not the real @acronym{UID}."
msgstr ""

# type: defun
#: lispref/os.texi:923
msgid ""
"If you specify @var{uid}, the value is the user name that corresponds to @var"
"{uid} (which should be an integer), or @code{nil} if there is no such user."
msgstr ""

# type: group
#: lispref/os.texi:928
#, no-wrap
msgid ""
"(user-login-name)\n"
"     @result{} \"lewis\"\n"
msgstr ""

# type: vindex
#: lispref/os.texi:932 lispref/os.texi:960
#, no-wrap
msgid "user-real-login-name"
msgstr ""

# type: defun
#: lispref/os.texi:936
msgid ""
"This function returns the user name corresponding to Emacs's real @acronym"
"{UID}.  This ignores the effective @acronym{UID} and ignores the environment "
"variables @code{LOGNAME} and @code{USER}."
msgstr ""

# type: defun
#: lispref/os.texi:938
#, no-wrap
msgid "user-full-name &optional uid"
msgstr ""

# type: defun
#: lispref/os.texi:941
msgid ""
"This function returns the full name of the logged-in user---or the value of "
"the environment variable @code{NAME}, if that is set."
msgstr ""

# type: group
#: lispref/os.texi:947
#, no-wrap
msgid ""
"(user-full-name)\n"
"     @result{} \"Bil Lewis\"\n"
msgstr ""

# type: defun
#: lispref/os.texi:952
msgid ""
"If the Emacs job's user-id does not correspond to any known user (and "
"provided @code{NAME} is not set), the value is @code{\"unknown\"}."
msgstr ""

# type: defun
#: lispref/os.texi:957
msgid ""
"If @var{uid} is non-@code{nil}, then it should be a number (a user-id)  or a "
"string (a login name).  Then @code{user-full-name} returns the full name "
"corresponding to that user-id or login name.  If you specify a user-id or "
"login name that isn't defined, it returns @code{nil}."
msgstr ""

# type: vindex
#: lispref/os.texi:959
#, no-wrap
msgid "user-full-name"
msgstr ""

# type: vindex
#: lispref/os.texi:961
#, no-wrap
msgid "user-login-name"
msgstr ""

# type: Plain text
#: lispref/os.texi:968
msgid ""
"The symbols @code{user-login-name}, @code{user-real-login-name} and @code"
"{user-full-name} are variables as well as functions.  The functions return "
"the same values that the variables hold.  These variables allow you to "
"``fake out'' Emacs by telling the functions what to return.  The variables "
"are also useful for constructing frame titles (@pxref{Frame Titles})."
msgstr ""

# type: defun
#: lispref/os.texi:969
#, no-wrap
msgid "user-real-uid"
msgstr ""

# type: defun
#: lispref/os.texi:972
msgid ""
"This function returns the real @acronym{UID} of the user.  The value may be "
"a floating point number."
msgstr ""

# type: group
#: lispref/os.texi:977
#, no-wrap
msgid ""
"(user-real-uid)\n"
"     @result{} 19\n"
msgstr ""

# type: defun
#: lispref/os.texi:981
#, no-wrap
msgid "user-uid"
msgstr ""

# type: defun
#: lispref/os.texi:984
msgid ""
"This function returns the effective @acronym{UID} of the user.  The value "
"may be a floating point number."
msgstr ""

# type: Plain text
#: lispref/os.texi:991
msgid ""
"This section explains how to determine the current time and the time zone."
msgstr ""

# type: defun
#: lispref/os.texi:992
#, no-wrap
msgid "current-time-string &optional time-value"
msgstr ""

# type: defun
#: lispref/os.texi:999
msgid ""
"This function returns the current time and date as a human-readable string.  "
"The format of the string is unvarying; the number of characters used for "
"each part is always the same, so you can reliably use @code{substring} to "
"extract pieces of it.  It is wise to count the characters from the beginning "
"of the string rather than from the end, as additional information may some "
"day be added at the end."
msgstr ""

# type: defun
#: lispref/os.texi:1007
msgid ""
"The argument @var{time-value}, if given, specifies a time to format instead "
"of the current time.  The argument should be a list whose first two elements "
"are integers.  Thus, you can use times obtained from @code{current-time} "
"(see below) and from @code{file-attributes} (@pxref{Definition of file-"
"attributes}).  @var{time-value} can also be a cons of two integers, but this "
"is considered obsolete."
msgstr ""

# type: group
#: lispref/os.texi:1012
#, no-wrap
msgid ""
"(current-time-string)\n"
"     @result{} \"Wed Oct 14 22:21:05 1987\"\n"
msgstr ""

# type: defun
#: lispref/os.texi:1017
#, no-wrap
msgid "current-time"
msgstr ""

# type: defun
#: lispref/os.texi:1022
msgid ""
"This function returns the system's time value as a list of three integers: "
"@code{(@var{high} @var{low} @var{microsec})}.  The integers @var{high} and "
"@var{low} combine to give the number of seconds since 0:00 January 1, 1970 "
"UTC (Coordinated Universal Time), which is"
msgstr ""

# type: ifnottex
#: lispref/os.texi:1024 lispref/os.texi:1322 lispref/os.texi:1565
msgid "@var{high} * 2**16 + @var{low}."
msgstr ""

# type: tex
#: lispref/os.texi:1027 lispref/os.texi:1325 lispref/os.texi:1568
#, no-wrap
msgid "$high*2^{16}+low$.\n"
msgstr ""

# type: defun
#: lispref/os.texi:1032 lispref/os.texi:1573
msgid ""
"The third element, @var{microsec}, gives the microseconds since the start of "
"the current second (or 0 for systems that return time with the resolution of "
"only one second)."
msgstr ""

# type: defun
#: lispref/os.texi:1036
msgid ""
"The first two elements can be compared with file time values such as you get "
"with the function @code{file-attributes}.  @xref{Definition of file-"
"attributes}."
msgstr ""

# type: defun
#: lispref/os.texi:1039
#, no-wrap
msgid "current-time-zone &optional time-value"
msgstr ""

# type: defun
#: lispref/os.texi:1042
msgid ""
"This function returns a list describing the time zone that the user is in."
msgstr ""

# type: defun
#: lispref/os.texi:1050
msgid ""
"The value has the form @code{(@var{offset} @var{name})}.  Here @var{offset} "
"is an integer giving the number of seconds ahead of UTC (east of "
"Greenwich).  A negative value means west of Greenwich.  The second element, "
"@var{name}, is a string giving the name of the time zone.  Both elements "
"change when daylight saving time begins or ends; if the user has specified a "
"time zone that does not use a seasonal time adjustment, then the value is "
"constant through time."
msgstr ""

# type: defun
#: lispref/os.texi:1053
msgid ""
"If the operating system doesn't supply all the information necessary to "
"compute the value, the unknown elements of the list are @code{nil}."
msgstr ""

# type: defun
#: lispref/os.texi:1059
msgid ""
"The argument @var{time-value}, if given, specifies a time to analyze instead "
"of the current time.  The argument should have the same form as for @code"
"{current-time-string} (see above).  Thus, you can use times obtained from "
"@code{current-time} (see above) and from @code{file-attributes}.  @xref"
"{Definition of file-attributes}."
msgstr ""

# type: defun
#: lispref/os.texi:1061
#, no-wrap
msgid "set-time-zone-rule tz"
msgstr ""

# type: defun
#: lispref/os.texi:1067
msgid ""
"This function specifies the local time zone according to @var{tz}.  If @var"
"{tz} is @code{nil}, that means to use an implementation-defined default time "
"zone.  If @var{tz} is @code{t}, that means to use Universal Time.  "
"Otherwise, @var{tz} should be a string specifying a time zone rule."
msgstr ""

# type: defun
#: lispref/os.texi:1069
#, no-wrap
msgid "float-time &optional time-value"
msgstr ""

# type: defun
#: lispref/os.texi:1076
msgid ""
"This function returns the current time as a floating-point number of seconds "
"since the epoch.  The argument @var{time-value}, if given, specifies a time "
"to convert instead of the current time.  The argument should have the same "
"form as for @code{current-time-string} (see above).  Thus, it accepts the "
"output of @code{current-time} and @code{file-attributes}."
msgstr ""

# type: defun
#: lispref/os.texi:1079
msgid ""
"@emph{Warning}: Since the result is floating point, it may not be exact.  Do "
"not use this function if precise time stamps are required."
msgstr ""

# type: Plain text
#: lispref/os.texi:1088
msgid ""
"These functions convert time values (lists of two or three integers)  to "
"calendrical information and vice versa.  You can get time values from the "
"functions @code{current-time} (@pxref{Time of Day}) and @code{file-"
"attributes} (@pxref{Definition of file-attributes})."
msgstr ""

# type: Plain text
#: lispref/os.texi:1094
msgid ""
"Many operating systems are limited to time values that contain 32 bits of "
"information; these systems typically handle only the times from 1901-12-13 "
"20:45:52 UTC through 2038-01-19 03:14:07 UTC.  However, some operating "
"systems have larger time values, and can represent times far in the past or "
"future."
msgstr ""

# type: Plain text
#: lispref/os.texi:1100
msgid ""
"Time conversion functions always use the Gregorian calendar, even for dates "
"before the Gregorian calendar was introduced.  Year numbers count the number "
"of years since the year 1 B.C., and do not skip zero as traditional "
"Gregorian years do; for example, the year number @minus{}37 represents the "
"Gregorian year 38 B.C@."
msgstr ""

# type: defun
#: lispref/os.texi:1101
#, no-wrap
msgid "decode-time &optional time"
msgstr ""

# type: defun
#: lispref/os.texi:1105
msgid ""
"This function converts a time value into calendrical information.  If you "
"don't specify @var{time}, it decodes the current time.  The return value is "
"a list of nine elements, as follows:"
msgstr ""

# type: example
#: lispref/os.texi:1108
#, no-wrap
msgid "(@var{seconds} @var{minutes} @var{hour} @var{day} @var{month} @var{year} @var{dow} @var{dst} @var{zone})\n"
msgstr ""

# type: defun
#: lispref/os.texi:1111
msgid "Here is what the elements mean:"
msgstr ""

# type: item
#: lispref/os.texi:1113
#, no-wrap
msgid "seconds"
msgstr ""

# type: table
#: lispref/os.texi:1116
msgid ""
"The number of seconds past the minute, as an integer between 0 and 59.  On "
"some operating systems, this is 60 for leap seconds."
msgstr ""

# type: item
#: lispref/os.texi:1116
#, no-wrap
msgid "minutes"
msgstr ""

# type: table
#: lispref/os.texi:1118
msgid "The number of minutes past the hour, as an integer between 0 and 59."
msgstr ""

# type: item
#: lispref/os.texi:1118
#, no-wrap
msgid "hour"
msgstr ""

# type: table
#: lispref/os.texi:1120
msgid "The hour of the day, as an integer between 0 and 23."
msgstr ""

# type: item
#: lispref/os.texi:1120
#, no-wrap
msgid "day"
msgstr ""

# type: table
#: lispref/os.texi:1122
msgid "The day of the month, as an integer between 1 and 31."
msgstr ""

# type: item
#: lispref/os.texi:1122
#, no-wrap
msgid "month"
msgstr ""

# type: table
#: lispref/os.texi:1124
msgid "The month of the year, as an integer between 1 and 12."
msgstr ""

# type: item
#: lispref/os.texi:1124
#, no-wrap
msgid "year"
msgstr ""

# type: table
#: lispref/os.texi:1126
msgid "The year, an integer typically greater than 1900."
msgstr ""

# type: item
#: lispref/os.texi:1126
#, no-wrap
msgid "dow"
msgstr ""

# type: table
#: lispref/os.texi:1129
msgid ""
"The day of week, as an integer between 0 and 6, where 0 stands for Sunday."
msgstr ""

# type: item
#: lispref/os.texi:1129
#, no-wrap
msgid "dst"
msgstr ""

# type: table
#: lispref/os.texi:1131
msgid "@code{t} if daylight saving time is effect, otherwise @code{nil}."
msgstr ""

# type: item
#: lispref/os.texi:1131
#, no-wrap
msgid "zone"
msgstr ""

# type: table
#: lispref/os.texi:1134
msgid ""
"An integer indicating the time zone, as the number of seconds east of "
"Greenwich."
msgstr ""

# type: defun
#: lispref/os.texi:1138
msgid ""
"@strong{Common Lisp Note:} Common Lisp has different meanings for @var{dow} "
"and @var{zone}."
msgstr ""

# type: defun
#: lispref/os.texi:1140
#, no-wrap
msgid "encode-time seconds minutes hour day month year &optional zone"
msgstr ""

# type: defun
#: lispref/os.texi:1144
msgid ""
"This function is the inverse of @code{decode-time}.  It converts seven items "
"of calendrical data into a time value.  For the meanings of the arguments, "
"see the table above under @code{decode-time}."
msgstr ""

# type: defun
#: lispref/os.texi:1148
msgid ""
"Year numbers less than 100 are not treated specially.  If you want them to "
"stand for years above 1900, or years above 2000, you must alter them "
"yourself before you call @code{encode-time}."
msgstr ""

# type: defun
#: lispref/os.texi:1155
msgid ""
"The optional argument @var{zone} defaults to the current time zone and its "
"daylight saving time rules.  If specified, it can be either a list (as you "
"would get from @code{current-time-zone}), a string as in the @code{TZ} "
"environment variable, @code{t} for Universal Time, or an integer (as you "
"would get from @code{decode-time}).  The specified zone is used without any "
"further alteration for daylight saving time."
msgstr ""

# type: defun
#: lispref/os.texi:1161
msgid ""
"If you pass more than seven arguments to @code{encode-time}, the first six "
"are used as @var{seconds} through @var{year}, the last argument is used as "
"@var{zone}, and the arguments in between are ignored.  This feature makes it "
"possible to use the elements of a list returned by @code{decode-time} as the "
"arguments to @code{encode-time}, like this:"
msgstr ""

# type: example
#: lispref/os.texi:1164
#, no-wrap
msgid "(apply 'encode-time (decode-time @dots{}))\n"
msgstr ""

# type: defun
#: lispref/os.texi:1169
msgid ""
"You can perform simple date arithmetic by using out-of-range values for the "
"@var{seconds}, @var{minutes}, @var{hour}, @var{day}, and @var{month} "
"arguments; for example, day 0 means the day preceding the given month."
msgstr ""

# type: defun
#: lispref/os.texi:1174
msgid ""
"The operating system puts limits on the range of possible time values; if "
"you try to encode a time that is out of range, an error results.  For "
"instance, years before 1970 do not work on some systems; on others, years as "
"early as 1901 do work."
msgstr ""

# type: section
#: lispref/os.texi:1177
#, no-wrap
msgid "Parsing and Formatting Times"
msgstr ""

# type: Plain text
#: lispref/os.texi:1181
msgid ""
"These functions convert time values (lists of two or three integers)  to "
"text in a string, and vice versa."
msgstr ""

# type: defun
#: lispref/os.texi:1182
#, no-wrap
msgid "date-to-time string"
msgstr ""

# type: defun
#: lispref/os.texi:1185
msgid ""
"This function parses the time-string @var{string} and returns the "
"corresponding time value."
msgstr ""

# type: defun
#: lispref/os.texi:1187
#, no-wrap
msgid "format-time-string format-string &optional time universal"
msgstr ""

# type: defun
#: lispref/os.texi:1193
msgid ""
"This function converts @var{time} (or the current time, if @var{time} is "
"omitted) to a string according to @var{format-string}.  The argument @var"
"{format-string} may contain @samp{%}-sequences which say to substitute parts "
"of the time.  Here is a table of what the @samp{%}-sequences mean:"
msgstr ""

# type: item
#: lispref/os.texi:1195
#, no-wrap
msgid "%a"
msgstr ""

# type: table
#: lispref/os.texi:1197
msgid "This stands for the abbreviated name of the day of week."
msgstr ""

# type: item
#: lispref/os.texi:1197
#, no-wrap
msgid "%A"
msgstr ""

# type: table
#: lispref/os.texi:1199
msgid "This stands for the full name of the day of week."
msgstr ""

# type: table
#: lispref/os.texi:1201
msgid "This stands for the abbreviated name of the month."
msgstr ""

# type: item
#: lispref/os.texi:1201
#, no-wrap
msgid "%B"
msgstr ""

# type: table
#: lispref/os.texi:1203
msgid "This stands for the full name of the month."
msgstr ""

# type: table
#: lispref/os.texi:1205
msgid "This is a synonym for @samp{%x %X}."
msgstr ""

# type: item
#: lispref/os.texi:1205
#, no-wrap
msgid "%C"
msgstr ""

# type: table
#: lispref/os.texi:1208
msgid ""
"This has a locale-specific meaning.  In the default locale (named C), it is "
"equivalent to @samp{%A, %B %e, %Y}."
msgstr ""

# type: table
#: lispref/os.texi:1210
msgid "This stands for the day of month, zero-padded."
msgstr ""

# type: item
#: lispref/os.texi:1210
#, no-wrap
msgid "%D"
msgstr ""

# type: table
#: lispref/os.texi:1212
msgid "This is a synonym for @samp{%m/%d/%y}."
msgstr ""

# type: table
#: lispref/os.texi:1214
msgid "This stands for the day of month, blank-padded."
msgstr ""

# type: table
#: lispref/os.texi:1216
msgid "This is a synonym for @samp{%b}."
msgstr ""

# type: item
#: lispref/os.texi:1216
#, no-wrap
msgid "%H"
msgstr ""

# type: table
#: lispref/os.texi:1218
msgid "This stands for the hour (00-23)."
msgstr ""

# type: table
#: lispref/os.texi:1220
msgid "This stands for the hour (01-12)."
msgstr ""

# type: item
#: lispref/os.texi:1220
#, no-wrap
msgid "%j"
msgstr ""

# type: table
#: lispref/os.texi:1222
msgid "This stands for the day of the year (001-366)."
msgstr ""

# type: item
#: lispref/os.texi:1222
#, no-wrap
msgid "%k"
msgstr ""

# type: table
#: lispref/os.texi:1224
msgid "This stands for the hour (0-23), blank padded."
msgstr ""

# type: table
#: lispref/os.texi:1226
msgid "This stands for the hour (1-12), blank padded."
msgstr ""

# type: table
#: lispref/os.texi:1228
msgid "This stands for the month (01-12)."
msgstr ""

# type: table
#: lispref/os.texi:1230
msgid "This stands for the minute (00-59)."
msgstr ""

# type: table
#: lispref/os.texi:1232
msgid "This stands for a newline."
msgstr ""

# type: table
#: lispref/os.texi:1234
msgid "This stands for @samp{AM} or @samp{PM}, as appropriate."
msgstr ""

# type: item
#: lispref/os.texi:1234
#, no-wrap
msgid "%r"
msgstr ""

# type: table
#: lispref/os.texi:1236
msgid "This is a synonym for @samp{%I:%M:%S %p}."
msgstr ""

# type: item
#: lispref/os.texi:1236
#, no-wrap
msgid "%R"
msgstr ""

# type: table
#: lispref/os.texi:1238
msgid "This is a synonym for @samp{%H:%M}."
msgstr ""

# type: item
#: lispref/os.texi:1238 lispref/strings.texi:760
#, no-wrap
msgid "%S"
msgstr ""

# type: table
#: lispref/os.texi:1240
msgid "This stands for the seconds (00-59)."
msgstr ""

# type: table
#: lispref/os.texi:1242
msgid "This stands for a tab character."
msgstr ""

# type: item
#: lispref/os.texi:1242
#, no-wrap
msgid "%T"
msgstr ""

# type: table
#: lispref/os.texi:1244
msgid "This is a synonym for @samp{%H:%M:%S}."
msgstr ""

# type: item
#: lispref/os.texi:1244
#, no-wrap
msgid "%U"
msgstr ""

# type: table
#: lispref/os.texi:1247
msgid ""
"This stands for the week of the year (01-52), assuming that weeks start on "
"Sunday."
msgstr ""

# type: item
#: lispref/os.texi:1247
#, no-wrap
msgid "%w"
msgstr ""

# type: table
#: lispref/os.texi:1249
msgid "This stands for the numeric day of week (0-6).  Sunday is day 0."
msgstr ""

# type: item
#: lispref/os.texi:1249
#, no-wrap
msgid "%W"
msgstr ""

# type: table
#: lispref/os.texi:1252
msgid ""
"This stands for the week of the year (01-52), assuming that weeks start on "
"Monday."
msgstr ""

# type: item
#: lispref/os.texi:1252 lispref/strings.texi:775
#, no-wrap
msgid "%x"
msgstr ""

# type: table
#: lispref/os.texi:1255
msgid ""
"This has a locale-specific meaning.  In the default locale (named @samp{C}), "
"it is equivalent to @samp{%D}."
msgstr ""

# type: itemx
#: lispref/os.texi:1255 lispref/strings.texi:776
#, no-wrap
msgid "%X"
msgstr ""

# type: table
#: lispref/os.texi:1258
msgid ""
"This has a locale-specific meaning.  In the default locale (named @samp{C}), "
"it is equivalent to @samp{%T}."
msgstr ""

# type: item
#: lispref/os.texi:1258
#, no-wrap
msgid "%y"
msgstr ""

# type: table
#: lispref/os.texi:1260
msgid "This stands for the year without century (00-99)."
msgstr ""

# type: item
#: lispref/os.texi:1260
#, no-wrap
msgid "%Y"
msgstr ""

# type: table
#: lispref/os.texi:1262
msgid "This stands for the year with century."
msgstr ""

# type: table
#: lispref/os.texi:1264
msgid "This stands for the time zone abbreviation (e.g., @samp{EST})."
msgstr ""

# type: table
#: lispref/os.texi:1266
msgid "This stands for the time zone numerical offset (e.g., @samp{-0500})."
msgstr ""

# type: defun
#: lispref/os.texi:1273
msgid ""
"You can also specify the field width and type of padding for any of these "
"@samp{%}-sequences.  This works as in @code{printf}: you write the field "
"width as digits in the middle of a @samp{%}-sequences.  If you start the "
"field width with @samp{0}, it means to pad with zeros.  If you start the "
"field width with @samp{_}, it means to pad with spaces."
msgstr ""

# type: defun
#: lispref/os.texi:1278
msgid ""
"For example, @samp{%S} specifies the number of seconds since the minute; "
"@samp{%03S} means to pad this with zeros to 3 positions, @samp{%_3S} to pad "
"with spaces to 3 positions.  Plain @samp{%3S} pads with zeros, because that "
"is how @samp{%S} normally pads to two positions."
msgstr ""

# type: defun
#: lispref/os.texi:1286
msgid ""
"The characters @samp{E} and @samp{O} act as modifiers when used between @samp"
"{%} and one of the letters in the table above.  @samp{E} specifies using the "
"current locale's ``alternative'' version of the date and time.  In a "
"Japanese locale, for example, @code{%Ex} might yield a date format based on "
"the Japanese Emperors' reigns.  @samp{E} is allowed in @samp{%Ec}, @samp{%"
"EC}, @samp{%Ex}, @samp{%EX}, @samp{%Ey}, and @samp{%EY}."
msgstr ""

# type: defun
#: lispref/os.texi:1290
msgid ""
"@samp{O} means to use the current locale's ``alternative'' representation of "
"numbers, instead of the ordinary decimal digits.  This is allowed with most "
"letters, all the ones that output numbers."
msgstr ""

# type: defun
#: lispref/os.texi:1294
msgid ""
"If @var{universal} is non-@code{nil}, that means to describe the time as "
"Universal Time; @code{nil} means describe it using what Emacs believes is "
"the local time zone (see @code{current-time-zone})."
msgstr ""

# type: defun
#: lispref/os.texi:1303
msgid ""
"This function uses the C library function @code{strftime} (@pxref{Formatting "
"Calendar Time,,, libc, The GNU C Library Reference Manual}) to do most of "
"the work.  In order to communicate with that function, it first encodes its "
"argument using the coding system specified by @code{locale-coding-system} "
"(@pxref{Locales}); after @code{strftime} returns the resulting string, @code"
"{format-time-string} decodes the string using that same coding system."
msgstr ""

# type: defun
#: lispref/os.texi:1305
#, no-wrap
msgid "seconds-to-time seconds"
msgstr ""

# type: defun
#: lispref/os.texi:1309
msgid ""
"This function converts @var{seconds}, a floating point number of seconds "
"since the epoch, to a time value and returns that.  To perform the inverse "
"conversion, use @code{float-time}."
msgstr ""

# type: section
#: lispref/os.texi:1312
#, no-wrap
msgid "Processor Run time"
msgstr ""

# type: cindex
#: lispref/os.texi:1313
#, no-wrap
msgid "processor run time"
msgstr ""

# type: defun
#: lispref/os.texi:1315
#, no-wrap
msgid "get-internal-run-time"
msgstr ""

# type: defun
#: lispref/os.texi:1320
msgid ""
"This function returns the processor run time used by Emacs as a list of "
"three integers: @code{(@var{high} @var{low} @var{microsec})}.  The integers "
"@var{high} and @var{low} combine to give the number of seconds, which is"
msgstr ""

# type: defun
#: lispref/os.texi:1329
msgid ""
"The third element, @var{microsec}, gives the microseconds (or 0 for systems "
"that return time with the resolution of only one second)."
msgstr ""

# type: defun
#: lispref/os.texi:1332
msgid ""
"If the system doesn't provide a way to determine the processor run time, get-"
"internal-run-time returns the same time as current-time."
msgstr ""

# type: Plain text
#: lispref/os.texi:1339
msgid ""
"These functions perform calendrical computations using time values (the kind "
"of list that @code{current-time} returns)."
msgstr ""

# type: defun
#: lispref/os.texi:1340
#, no-wrap
msgid "time-less-p t1 t2"
msgstr ""

# type: defun
#: lispref/os.texi:1343
msgid ""
"This returns @code{t} if time value @var{t1} is less than time value @var"
"{t2}."
msgstr ""

# type: defun
#: lispref/os.texi:1345
#, no-wrap
msgid "time-subtract t1 t2"
msgstr ""

# type: defun
#: lispref/os.texi:1348
msgid ""
"This returns the time difference @var{t1} @minus{} @var{t2} between two time "
"values, in the same format as a time value."
msgstr ""

# type: defun
#: lispref/os.texi:1350
#, no-wrap
msgid "time-add t1 t2"
msgstr ""

# type: defun
#: lispref/os.texi:1354
msgid ""
"This returns the sum of two time values, one of which ought to represent a "
"time difference rather than a point in time.  Here is how to add a number of "
"seconds to a time value:"
msgstr ""

# type: example
#: lispref/os.texi:1357
#, no-wrap
msgid "(time-add @var{time} (seconds-to-time @var{seconds}))\n"
msgstr ""

# type: defun
#: lispref/os.texi:1360
#, no-wrap
msgid "time-to-days time"
msgstr ""

# type: defun
#: lispref/os.texi:1363
msgid ""
"This function returns the number of days between the beginning of year 1 and "
"@var{time}."
msgstr ""

# type: defun
#: lispref/os.texi:1365
#, no-wrap
msgid "time-to-day-in-year time"
msgstr ""

# type: defun
#: lispref/os.texi:1367
msgid ""
"This returns the day number within the year corresponding to @var{time}."
msgstr ""

# type: defun
#: lispref/os.texi:1369
#, no-wrap
msgid "date-leap-year-p year"
msgstr ""

# type: defun
#: lispref/os.texi:1371
msgid "This function returns @code{t} if @var{year} is a leap year."
msgstr ""

# type: section
#: lispref/os.texi:1374
#, no-wrap
msgid "Timers for Delayed Execution"
msgstr ""

# type: cindex
#: lispref/os.texi:1375
#, no-wrap
msgid "timer"
msgstr ""

# type: Plain text
#: lispref/os.texi:1379
msgid ""
"You can set up a @dfn{timer} to call a function at a specified future time "
"or after a certain length of idleness."
msgstr ""

# type: Plain text
#: lispref/os.texi:1386
msgid ""
"Emacs cannot run timers at any arbitrary point in a Lisp program; it can run "
"them only when Emacs could accept output from a subprocess: namely, while "
"waiting or inside certain primitive functions such as @code{sit-for} or @code"
"{read-event} which @emph{can} wait.  Therefore, a timer's execution may be "
"delayed if Emacs is busy.  However, the time of execution is very precise if "
"Emacs is idle."
msgstr ""

# type: Plain text
#: lispref/os.texi:1398
msgid ""
"Emacs binds @code{inhibit-quit} to @code{t} before calling the timer "
"function, because quitting out of many timer functions can leave things in "
"an inconsistent state.  This is normally unproblematical because most timer "
"functions don't do a lot of work.  Indeed, for a timer to call a function "
"that takes substantial time to run is likely to be annoying.  If a timer "
"function needs to allow quitting, it should use @code{with-local-quit} "
"(@pxref{Quitting}).  For example, if a timer function calls @code{accept-"
"process-output} to receive output from an external process, that call should "
"be wrapped inside @code{with-local-quit}, to ensure that @kbd{C-g} works if "
"the external process hangs."
msgstr ""

# type: Plain text
#: lispref/os.texi:1404
msgid ""
"It is usually a bad idea for timer functions to alter buffer contents.  When "
"they do, they usually should call @code{undo-boundary} both before and after "
"changing the buffer, to separate the timer's changes from user commands' "
"changes and prevent a single undo entry from growing to be quite large."
msgstr ""

# type: Plain text
#: lispref/os.texi:1411
msgid ""
"Timer functions should also avoid calling functions that cause Emacs to "
"wait, such as @code{sit-for} (@pxref{Waiting}).  This can lead to "
"unpredictable effects, since other timers (or even the same timer) can run "
"while waiting.  If a timer function needs to perform an action after a "
"certain time has elapsed, it can do this by scheduling a new timer."
msgstr ""

# type: Plain text
#: lispref/os.texi:1414
msgid ""
"If a timer function calls functions that can change the match data, it "
"should save and restore the match data.  @xref{Saving Match Data}."
msgstr ""

# type: deffn
#: lispref/os.texi:1415
#, no-wrap
msgid "Command run-at-time time repeat function &rest args"
msgstr ""

# type: deffn
#: lispref/os.texi:1421
msgid ""
"This sets up a timer that calls the function @var{function} with arguments "
"@var{args} at time @var{time}.  If @var{repeat} is a number (integer or "
"floating point), the timer is scheduled to run again every @var{repeat} "
"seconds after @var{time}.  If @var{repeat} is @code{nil}, the timer runs "
"only once."
msgstr ""

# type: deffn
#: lispref/os.texi:1423
msgid "@var{time} may specify an absolute or a relative time."
msgstr ""

# type: deffn
#: lispref/os.texi:1433
msgid ""
"Absolute times may be specified using a string with a limited variety of "
"formats, and are taken to be times @emph{today}, even if already in the "
"past.  The recognized forms are @samp{@var{xxxx}}, @samp{@var{x}:@var{xx}}, "
"or @samp{@var{xx}:@var{xx}} (military time), and @samp{@var{xx}am}, @samp"
"{@var{xx}AM}, @samp{@var{xx}pm}, @samp{@var{xx}PM}, @samp{@var{xx}:@var{xx}"
"am}, @samp{@var{xx}:@var{xx}AM}, @samp{@var{xx}:@var{xx}pm}, or @samp{@var"
"{xx}:@var{xx}PM}.  A period can be used instead of a colon to separate the "
"hour and minute parts."
msgstr ""

# type: deffn
#: lispref/os.texi:1436
msgid ""
"To specify a relative time as a string, use numbers followed by units.  For "
"example:"
msgstr ""

# type: item
#: lispref/os.texi:1438
#, no-wrap
msgid "1 min"
msgstr ""

# type: table
#: lispref/os.texi:1440
msgid "denotes 1 minute from now."
msgstr ""

# type: item
#: lispref/os.texi:1440
#, no-wrap
msgid "1 min 5 sec"
msgstr ""

# type: table
#: lispref/os.texi:1442
msgid "denotes 65 seconds from now."
msgstr ""

# type: item
#: lispref/os.texi:1442
#, no-wrap
msgid "1 min 2 sec 3 hour 4 day 5 week 6 fortnight 7 month 8 year"
msgstr ""

# type: table
#: lispref/os.texi:1444
msgid "denotes exactly 103 months, 123 days, and 10862 seconds from now."
msgstr ""

# type: deffn
#: lispref/os.texi:1448
msgid ""
"For relative time values, Emacs considers a month to be exactly thirty days, "
"and a year to be exactly 365.25 days."
msgstr ""

# type: deffn
#: lispref/os.texi:1453
msgid ""
"Not all convenient formats are strings.  If @var{time} is a number (integer "
"or floating point), that specifies a relative time measured in seconds.  The "
"result of @code{encode-time} can also be used to specify an absolute value "
"for @var{time}."
msgstr ""

# type: deffn
#: lispref/os.texi:1459
msgid ""
"In most cases, @var{repeat} has no effect on when @emph{first} call takes "
"place---@var{time} alone specifies that.  There is one exception: if @var"
"{time} is @code{t}, then the timer runs whenever the time is a multiple of "
"@var{repeat} seconds after the epoch.  This is useful for functions like "
"@code{display-time}."
msgstr ""

# type: deffn
#: lispref/os.texi:1463
msgid ""
"The function @code{run-at-time} returns a timer value that identifies the "
"particular scheduled future action.  You can use this value to call @code"
"{cancel-timer} (see below)."
msgstr ""

# type: Plain text
#: lispref/os.texi:1475
msgid ""
"A repeating timer nominally ought to run every @var{repeat} seconds, but "
"remember that any invocation of a timer can be late.  Lateness of one "
"repetition has no effect on the scheduled time of the next repetition.  For "
"instance, if Emacs is busy computing for long enough to cover three "
"scheduled repetitions of the timer, and then starts to wait, it will "
"immediately call the timer function three times in immediate succession "
"(presuming no other timers trigger before or between them).  If you want a "
"timer to run again no less than @var{n} seconds after the last invocation, "
"don't use the @var{repeat} argument.  Instead, the timer function should "
"explicitly reschedule the timer."
msgstr ""

# type: defvar
#: lispref/os.texi:1476
#, no-wrap
msgid "timer-max-repeats"
msgstr ""

# type: defvar
#: lispref/os.texi:1480
msgid ""
"This variable's value specifies the maximum number of times to repeat "
"calling a timer function in a row, when many previously scheduled calls were "
"unavoidably delayed."
msgstr ""

# type: defmac
#: lispref/os.texi:1482
#, no-wrap
msgid "with-timeout (seconds timeout-forms@dots{}) body@dots{}"
msgstr ""

# type: defmac
#: lispref/os.texi:1489
msgid ""
"Execute @var{body}, but give up after @var{seconds} seconds.  If @var{body} "
"finishes before the time is up, @code{with-timeout} returns the value of the "
"last form in @var{body}.  If, however, the execution of @var{body} is cut "
"short by the timeout, then @code{with-timeout} executes all the @var{timeout-"
"forms} and returns the value of the last of them."
msgstr ""

# type: defmac
#: lispref/os.texi:1494
msgid ""
"This macro works by setting a timer to run after @var{seconds} seconds.  If "
"@var{body} finishes before that time, it cancels the timer.  If the timer "
"actually runs, it terminates execution of @var{body}, then executes @var"
"{timeout-forms}."
msgstr ""

# type: defmac
#: lispref/os.texi:1500
msgid ""
"Since timers can run within a Lisp program only when the program calls a "
"primitive that can wait, @code{with-timeout} cannot stop executing @var"
"{body} while it is in the midst of a computation---only when it calls one of "
"those primitives.  So use @code{with-timeout} only with a @var{body} that "
"waits for input, not one that does a long computation."
msgstr ""

# type: Plain text
#: lispref/os.texi:1505
msgid ""
"The function @code{y-or-n-p-with-timeout} provides a simple way to use a "
"timer to avoid waiting too long for an answer.  @xref{Yes-or-No Queries}."
msgstr ""

# type: defun
#: lispref/os.texi:1506
#, no-wrap
msgid "cancel-timer timer"
msgstr ""

# type: defun
#: lispref/os.texi:1512
msgid ""
"This cancels the requested action for @var{timer}, which should be a timer---"
"usually, one previously returned by @code{run-at-time} or @code{run-with-"
"idle-timer}.  This cancels the effect of that call to one of these "
"functions; the arrival of the specified time will not cause anything special "
"to happen."
msgstr ""

# type: Plain text
#: lispref/os.texi:1520
msgid ""
"Here is how to set up a timer that runs when Emacs is idle for a certain "
"length of time.  Aside from how to set them up, idle timers work just like "
"ordinary timers."
msgstr ""

# type: deffn
#: lispref/os.texi:1521
#, no-wrap
msgid "Command run-with-idle-timer secs repeat function &rest args"
msgstr ""

# type: deffn
#: lispref/os.texi:1526
msgid ""
"Set up a timer which runs when Emacs has been idle for @var{secs} seconds.  "
"The value of @var{secs} may be an integer or a floating point number; a "
"value of the type returned by @code{current-idle-time} is also allowed."
msgstr ""

# type: deffn
#: lispref/os.texi:1531
msgid ""
"If @var{repeat} is @code{nil}, the timer runs just once, the first time "
"Emacs remains idle for a long enough time.  More often @var{repeat} is non-"
"@code{nil}, which means to run the timer @emph{each time} Emacs remains idle "
"for @var{secs} seconds."
msgstr ""

# type: deffn
#: lispref/os.texi:1534
msgid ""
"The function @code{run-with-idle-timer} returns a timer value which you can "
"use in calling @code{cancel-timer} (@pxref{Timers})."
msgstr ""

# type: cindex
#: lispref/os.texi:1536
#, no-wrap
msgid "idleness"
msgstr ""

# type: Plain text
#: lispref/os.texi:1544
msgid ""
"Emacs becomes ``idle'' when it starts waiting for user input, and it remains "
"idle until the user provides some input.  If a timer is set for five seconds "
"of idleness, it runs approximately five seconds after Emacs first becomes "
"idle.  Even if @var{repeat} is non-@code{nil}, this timer will not run again "
"as long as Emacs remains idle, because the duration of idleness will "
"continue to increase and will not go down to five seconds again."
msgstr ""

# type: Plain text
#: lispref/os.texi:1552
msgid ""
"Emacs can do various things while idle: garbage collect, autosave or handle "
"data from a subprocess.  But these interludes during idleness do not "
"interfere with idle timers, because they do not reset the clock of idleness "
"to zero.  An idle timer set for 600 seconds will run when ten minutes have "
"elapsed since the last user command was finished, even if subprocess output "
"has been accepted thousands of times within those ten minutes, and even if "
"there have been garbage collections and autosaves."
msgstr ""

# type: Plain text
#: lispref/os.texi:1556
msgid ""
"When the user supplies input, Emacs becomes non-idle while executing the "
"input.  Then it becomes idle again, and all the idle timers that are set up "
"to repeat will subsequently run another time, one by one."
msgstr ""

# type: defun
#: lispref/os.texi:1558
#, no-wrap
msgid "current-idle-time"
msgstr ""

# type: defun
#: lispref/os.texi:1563
msgid ""
"This function returns the length of time Emacs has been idle, as a list of "
"three integers: @code{(@var{high} @var{low} @var{microsec})}.  The integers "
"@var{high} and @var{low} combine to give the number of seconds of idleness, "
"which is"
msgstr ""

# type: defun
#: lispref/os.texi:1578
msgid ""
"The main use of this function is when an idle timer function wants to ``take "
"a break'' for a while.  It can set up another idle timer to call the same "
"function again, after a few seconds more idleness.  Here's an example:"
msgstr ""

# type: smallexample
#: lispref/os.texi:1582
#, no-wrap
msgid ""
"(defvar resume-timer nil\n"
"  \"Timer that `timer-function' used to reschedule itself, or nil.\")\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/os.texi:1599
#, no-wrap
msgid ""
"(defun timer-function ()\n"
"  ;; @r{If the user types a command while @code{resume-timer}}\n"
"  ;; @r{is active, the next time this function is called from}\n"
"  ;; @r{its main idle timer, deactivate @code{resume-timer}.}\n"
"  (when resume-timer\n"
"    (cancel-timer resume-timer))\n"
"  ...@var{do the work for a while}...\n"
"  (when @var{taking-a-break}\n"
"    (setq resume-timer\n"
"          (run-with-idle-timer\n"
"            ;; Compute an idle time @var{break-length}\n"
"            ;; more than the current value.\n"
"            (time-add (current-idle-time)\n"
"                      (seconds-to-time @var{break-length}))\n"
"            nil\n"
"            'timer-function))))\n"
msgstr ""

# type: Plain text
#: lispref/os.texi:1606
msgid ""
"Some idle timer functions in user Lisp packages have a loop that does a "
"certain amount of processing each time around, and exits when @code{(input-"
"pending-p)} is non-@code{nil}.  That approach seems very natural but has two "
"problems:"
msgstr ""

# type: itemize
#: lispref/os.texi:1611
msgid ""
"It blocks out all process output (since Emacs accepts process output only "
"while waiting)."
msgstr ""

# type: itemize
#: lispref/os.texi:1614
msgid "It blocks out any idle timers that ought to run during that time."
msgstr ""

# type: Plain text
#: lispref/os.texi:1620
msgid ""
"To avoid these problems, don't use that technique.  Instead, write such idle "
"timers to reschedule themselves after a brief pause, using the method in the "
"@code{timer-function} example above."
msgstr ""

# type: cindex
#: lispref/os.texi:1623
#, no-wrap
msgid "terminal input"
msgstr ""

# type: Plain text
#: lispref/os.texi:1628
msgid ""
"This section describes functions and variables for recording or manipulating "
"terminal input.  See @ref{Display}, for related functions."
msgstr ""

# type: subsection
#: lispref/os.texi:1632 lispref/os.texi:1634 lispref/os.texi:1635
#, no-wrap
msgid "Input Modes"
msgstr ""

# type: menu
#: lispref/os.texi:1632
msgid "Options for how input is processed."
msgstr ""

# type: subsection
#: lispref/os.texi:1632 lispref/os.texi:1695 lispref/os.texi:1696
#, no-wrap
msgid "Recording Input"
msgstr ""

# type: menu
#: lispref/os.texi:1632
msgid "Saving histories of recent or all input events."
msgstr ""

# type: cindex
#: lispref/os.texi:1636
#, no-wrap
msgid "input modes"
msgstr ""

# type: cindex
#: lispref/os.texi:1637
#, no-wrap
msgid "terminal input modes"
msgstr ""

# type: defun
#: lispref/os.texi:1639
#, no-wrap
msgid "set-input-mode interrupt flow meta &optional quit-char"
msgstr ""

# type: defun
#: lispref/os.texi:1645
msgid ""
"This function sets the mode for reading keyboard input.  If @var{interrupt} "
"is non-null, then Emacs uses input interrupts.  If it is @code{nil}, then it "
"uses @sc{cbreak} mode.  The default setting is system-dependent.  Some "
"systems always use @sc{cbreak} mode regardless of what is specified."
msgstr ""

# type: defun
#: lispref/os.texi:1648
msgid ""
"When Emacs communicates directly with X, it ignores this argument and uses "
"interrupts if that is the way it knows how to communicate."
msgstr ""

# type: defun
#: lispref/os.texi:1652
msgid ""
"If @var{flow} is non-@code{nil}, then Emacs uses @sc{xon/xoff} (@kbd{C-q}, "
"@kbd{C-s}) flow control for output to the terminal.  This has no effect "
"except in @sc{cbreak} mode."
msgstr ""

# type: defun
#: lispref/os.texi:1661
msgid ""
"The argument @var{meta} controls support for input character codes above "
"127.  If @var{meta} is @code{t}, Emacs converts characters with the 8th bit "
"set into Meta characters.  If @var{meta} is @code{nil}, Emacs disregards the "
"8th bit; this is necessary when the terminal uses it as a parity bit.  If "
"@var{meta} is neither @code{t} nor @code{nil}, Emacs uses all 8 bits of "
"input unchanged.  This is good for terminals that use 8-bit character sets."
msgstr ""

# type: defun
#: lispref/os.texi:1666
msgid ""
"If @var{quit-char} is non-@code{nil}, it specifies the character to use for "
"quitting.  Normally this character is @kbd{C-g}.  @xref{Quitting}."
msgstr ""

# type: Plain text
#: lispref/os.texi:1670
msgid ""
"The @code{current-input-mode} function returns the input mode settings Emacs "
"is currently using."
msgstr ""

# type: defun
#: lispref/os.texi:1672
#, no-wrap
msgid "current-input-mode"
msgstr ""

# type: defun
#: lispref/os.texi:1677
msgid ""
"This function returns the current mode for reading keyboard input.  It "
"returns a list, corresponding to the arguments of @code{set-input-mode}, of "
"the form @code{(@var{interrupt} @var{flow} @var{meta} @var{quit})} in which:"
msgstr ""

# type: item
#: lispref/os.texi:1678
#, no-wrap
msgid "interrupt"
msgstr ""

# type: table
#: lispref/os.texi:1681
msgid ""
"is non-@code{nil} when Emacs is using interrupt-driven input.  If @code"
"{nil}, Emacs is using @sc{cbreak} mode."
msgstr ""

# type: item
#: lispref/os.texi:1681
#, no-wrap
msgid "flow"
msgstr ""

# type: table
#: lispref/os.texi:1685
msgid ""
"is non-@code{nil} if Emacs uses @sc{xon/xoff} (@kbd{C-q}, @kbd{C-s})  flow "
"control for output to the terminal.  This value is meaningful only when @var"
"{interrupt} is @code{nil}."
msgstr ""

# type: table
#: lispref/os.texi:1690
msgid ""
"is @code{t} if Emacs treats the eighth bit of input characters as the meta "
"bit; @code{nil} means Emacs clears the eighth bit of every input character; "
"any other value means Emacs uses all eight bits as the basic character code."
msgstr ""

# type: table
#: lispref/os.texi:1692
msgid "is the character Emacs currently uses for quitting, usually @kbd{C-g}."
msgstr ""

# type: cindex
#: lispref/os.texi:1697
#, no-wrap
msgid "recording input"
msgstr ""

# type: defun
#: lispref/os.texi:1699
#, no-wrap
msgid "recent-keys"
msgstr ""

# type: defun
#: lispref/os.texi:1706
msgid ""
"This function returns a vector containing the last 300 input events from the "
"keyboard or mouse.  All input events are included, whether or not they were "
"used as parts of key sequences.  Thus, you always get the last 100 input "
"events, not counting events generated by keyboard macros.  (These are "
"excluded because they are less interesting for debugging; it should be "
"enough to see the events that invoked the macros.)"
msgstr ""

# type: defun
#: lispref/os.texi:1709
msgid ""
"A call to @code{clear-this-command-keys} (@pxref{Command Loop Info})  causes "
"this function to return an empty vector immediately afterward."
msgstr ""

# type: deffn
#: lispref/os.texi:1711
#, no-wrap
msgid "Command open-dribble-file filename"
msgstr ""

# type: cindex
#: lispref/os.texi:1712
#, no-wrap
msgid "dribble file"
msgstr ""

# type: deffn
#: lispref/os.texi:1718
msgid ""
"This function opens a @dfn{dribble file} named @var{filename}.  When a "
"dribble file is open, each input event from the keyboard or mouse (but not "
"those from keyboard macros) is written in that file.  A non-character event "
"is expressed using its printed representation surrounded by @samp{<@dots{}>}."
msgstr ""

# type: deffn
#: lispref/os.texi:1721
msgid ""
"You close the dribble file by calling this function with an argument of @code"
"{nil}."
msgstr ""

# type: deffn
#: lispref/os.texi:1724
msgid ""
"This function is normally used to record the input necessary to trigger an "
"Emacs bug, for the sake of a bug report."
msgstr ""

# type: group
#: lispref/os.texi:1729
#, no-wrap
msgid ""
"(open-dribble-file \"~/dribble\")\n"
"     @result{} nil\n"
msgstr ""

# type: Plain text
#: lispref/os.texi:1734
msgid "See also the @code{open-termscript} function (@pxref{Terminal Output})."
msgstr ""

# type: cindex
#: lispref/os.texi:1737
#, no-wrap
msgid "terminal output"
msgstr ""

# type: Plain text
#: lispref/os.texi:1742
msgid ""
"The terminal output functions send output to a text terminal, or keep track "
"of output sent to the terminal.  The variable @code{baud-rate} tells you "
"what Emacs thinks is the output speed of the terminal."
msgstr ""

# type: defun
#: lispref/os.texi:1743 lispref/os.texi:1764
#, no-wrap
msgid "baud-rate"
msgstr ""

# type: defvar
#: lispref/os.texi:1748
msgid ""
"This variable's value is the output speed of the terminal, as far as Emacs "
"knows.  Setting this variable does not change the speed of actual data "
"transmission, but the value is used for calculations such as padding."
msgstr ""

# type: defvar
#: lispref/os.texi:1752
msgid ""
"It also affects decisions about whether to scroll part of the screen or "
"repaint on text terminals.  @xref{Forcing Redisplay}, for the corresponding "
"functionality on graphical terminals."
msgstr ""

# type: defvar
#: lispref/os.texi:1754
msgid "The value is measured in baud."
msgstr ""

# type: Plain text
#: lispref/os.texi:1763
msgid ""
"If you are running across a network, and different parts of the network work "
"at different baud rates, the value returned by Emacs may be different from "
"the value used by your local terminal.  Some network protocols communicate "
"the local terminal speed to the remote machine, so that Emacs and other "
"programs can get the proper value, but others do not.  If Emacs has the "
"wrong value, it makes decisions that are less than optimal.  To fix the "
"problem, set @code{baud-rate}."
msgstr ""

# type: defun
#: lispref/os.texi:1767
msgid ""
"This obsolete function returns the value of the variable @code{baud-rate}."
msgstr ""

# type: defun
#: lispref/os.texi:1769
#, no-wrap
msgid "send-string-to-terminal string"
msgstr ""

# type: defun
#: lispref/os.texi:1773
msgid ""
"This function sends @var{string} to the terminal without alteration.  "
"Control characters in @var{string} have terminal-dependent effects.  This "
"function operates only on text terminals."
msgstr ""

# type: defun
#: lispref/os.texi:1779
msgid ""
"One use of this function is to define function keys on terminals that have "
"downloadable function key definitions.  For example, this is how (on certain "
"terminals) to define function key 4 to move forward four characters (by "
"transmitting the characters @kbd{C-u C-f} to the computer):"
msgstr ""

# type: group
#: lispref/os.texi:1784
#, no-wrap
msgid ""
"(send-string-to-terminal \"\\eF4\\^U\\^F\")\n"
"     @result{} nil\n"
msgstr ""

# type: deffn
#: lispref/os.texi:1788
#, no-wrap
msgid "Command open-termscript filename"
msgstr ""

# type: cindex
#: lispref/os.texi:1789
#, no-wrap
msgid "termscript file"
msgstr ""

# type: deffn
#: lispref/os.texi:1798
msgid ""
"This function is used to open a @dfn{termscript file} that will record all "
"the characters sent by Emacs to the terminal.  It returns @code{nil}.  "
"Termscript files are useful for investigating problems where Emacs garbles "
"the screen, problems that are due to incorrect Termcap entries or to "
"undesirable settings of terminal options more often than to actual Emacs "
"bugs.  Once you are certain which characters were actually output, you can "
"determine reliably whether they correspond to the Termcap specifications in "
"use."
msgstr ""

# type: deffn
#: lispref/os.texi:1801
msgid ""
"You close the termscript file by calling this function with an argument of "
"@code{nil}."
msgstr ""

# type: deffn
#: lispref/os.texi:1803
msgid "See also @code{open-dribble-file} in @ref{Recording Input}."
msgstr ""

# type: group
#: lispref/os.texi:1808
#, no-wrap
msgid ""
"(open-termscript \"../junk/termscript\")\n"
"     @result{} nil\n"
msgstr ""

# type: cindex
#: lispref/os.texi:1814
#, no-wrap
msgid "sound"
msgstr ""

# type: Plain text
#: lispref/os.texi:1820
msgid ""
"To play sound using Emacs, use the function @code{play-sound}.  Only certain "
"systems are supported; if you call @code{play-sound} on a system which "
"cannot really do the job, it gives an error.  Emacs version 20 and earlier "
"did not support sound at all."
msgstr ""

# type: Plain text
#: lispref/os.texi:1823
msgid ""
"The sound must be stored as a file in RIFF-WAVE format (@samp{.wav})  or Sun "
"Audio format (@samp{.au})."
msgstr ""

# type: defun
#: lispref/os.texi:1824
#, no-wrap
msgid "play-sound sound"
msgstr ""

# type: defun
#: lispref/os.texi:1829
msgid ""
"This function plays a specified sound.  The argument, @var{sound}, has the "
"form @code{(sound @var{properties}...)}, where the @var{properties} consist "
"of alternating keywords (particular symbols recognized specially) and values "
"corresponding to them."
msgstr ""

# type: defun
#: lispref/os.texi:1832
msgid ""
"Here is a table of the keywords that are currently meaningful in @var"
"{sound}, and their meanings:"
msgstr ""

# type: table
#: lispref/os.texi:1838
msgid ""
"This specifies the file containing the sound to play.  If the file name is "
"not absolute, it is expanded against the directory @code{data-directory}."
msgstr ""

# type: table
#: lispref/os.texi:1843
msgid ""
"This specifies the sound to play without need to refer to a file.  The "
"value, @var{data}, should be a string containing the same bytes as a sound "
"file.  We recommend using a unibyte string."
msgstr ""

# type: item
#: lispref/os.texi:1844
#, no-wrap
msgid ":volume @var{volume}"
msgstr ""

# type: table
#: lispref/os.texi:1848
msgid ""
"This specifies how loud to play the sound.  It should be a number in the "
"range of 0 to 1.  The default is to use whatever volume has been specified "
"before."
msgstr ""

# type: item
#: lispref/os.texi:1849
#, no-wrap
msgid ":device @var{device}"
msgstr ""

# type: table
#: lispref/os.texi:1852
msgid ""
"This specifies the system device on which to play the sound, as a string.  "
"The default device is system-dependent."
msgstr ""

# type: defun
#: lispref/os.texi:1857
msgid ""
"Before actually playing the sound, @code{play-sound} calls the functions in "
"the list @code{play-sound-functions}.  Each function is called with one "
"argument, @var{sound}."
msgstr ""

# type: defun
#: lispref/os.texi:1859
#, no-wrap
msgid "play-sound-file file &optional volume device"
msgstr ""

# type: defun
#: lispref/os.texi:1862
msgid ""
"This function is an alternative interface to playing a sound @var{file} "
"specifying an optional @var{volume} and @var{device}."
msgstr ""

# type: defvar
#: lispref/os.texi:1864
#, no-wrap
msgid "play-sound-functions"
msgstr ""

# type: defvar
#: lispref/os.texi:1867
msgid ""
"A list of functions to be called before playing a sound.  Each function is "
"called with one argument, a property list that describes the sound."
msgstr ""

# type: section
#: lispref/os.texi:1870
#, no-wrap
msgid "Operating on X11 Keysyms"
msgstr ""

# type: cindex
#: lispref/os.texi:1871
#, no-wrap
msgid "X11 keysyms"
msgstr ""

# type: Plain text
#: lispref/os.texi:1875
msgid ""
"To define system-specific X11 keysyms, set the variable @code{system-key-"
"alist}."
msgstr ""

# type: defvar
#: lispref/os.texi:1876
#, no-wrap
msgid "system-key-alist"
msgstr ""

# type: defvar
#: lispref/os.texi:1881
msgid ""
"This variable's value should be an alist with one element for each system-"
"specific keysym.  Each element has the form @code{(@var{code} . @var"
"{symbol})}, where @var{code} is the numeric keysym code (not including the "
"``vendor specific'' bit,"
msgstr ""

# type: ifnottex
#: lispref/os.texi:1883
msgid "-2**28),"
msgstr ""

# type: tex
#: lispref/os.texi:1886
#, no-wrap
msgid "$-2^{28}$),\n"
msgstr ""

# type: defvar
#: lispref/os.texi:1888
msgid "and @var{symbol} is the name for the function key."
msgstr ""

# type: defvar
#: lispref/os.texi:1891
msgid ""
"For example @code{(168 . mute-acute)} defines a system-specific key (used by "
"HP X servers) whose numeric code is"
msgstr ""

# type: tex
#: lispref/os.texi:1896
#, no-wrap
msgid "$-2^{28}$\n"
msgstr ""

# type: defvar
#: lispref/os.texi:1898
msgid "+ 168."
msgstr ""

# type: defvar
#: lispref/os.texi:1902
msgid ""
"It is not crucial to exclude from the alist the keysyms of other X servers; "
"those do no harm, as long as they don't conflict with the ones used by the X "
"server actually in use."
msgstr ""

# type: defvar
#: lispref/os.texi:1905
msgid ""
"The variable is always local to the current terminal, and cannot be buffer-"
"local.  @xref{Multiple Displays}."
msgstr ""

# type: Plain text
#: lispref/os.texi:1908
msgid ""
"You can specify which keysyms Emacs should use for the Meta, Alt, Hyper, and "
"Super modifiers by setting these variables:"
msgstr ""

# type: defvar
#: lispref/os.texi:1909
#, no-wrap
msgid "x-alt-keysym"
msgstr ""

# type: defvarx
#: lispref/os.texi:1910
#, no-wrap
msgid "x-meta-keysym"
msgstr ""

# type: defvarx
#: lispref/os.texi:1911
#, no-wrap
msgid "x-hyper-keysym"
msgstr ""

# type: defvarx
#: lispref/os.texi:1912
#, no-wrap
msgid "x-super-keysym"
msgstr ""

# type: defvar
#: lispref/os.texi:1916
msgid ""
"The name of the keysym that should stand for the Alt modifier (respectively, "
"for Meta, Hyper, and Super).  For example, here is how to swap the Meta and "
"Alt modifiers within Emacs:"
msgstr ""

# type: lisp
#: lispref/os.texi:1919
#, no-wrap
msgid ""
"(setq x-alt-keysym 'meta)\n"
"(setq x-meta-keysym 'alt)\n"
msgstr ""

# type: cindex
#: lispref/os.texi:1924
#, no-wrap
msgid "batch mode"
msgstr ""

# type: Plain text
#: lispref/os.texi:1934
msgid ""
"The command-line option @samp{-batch} causes Emacs to run noninteractively.  "
"In this mode, Emacs does not read commands from the terminal, it does not "
"alter the terminal modes, and it does not expect to be outputting to an "
"erasable screen.  The idea is that you specify Lisp programs to run; when "
"they are finished, Emacs should exit.  The way to specify the programs to "
"run is with @samp{-l @var{file}}, which loads the library named @var{file}, "
"or @samp{-f @var{function}}, which calls @var{function} with no arguments, "
"or @samp{--eval @var{form}}."
msgstr ""

# type: Plain text
#: lispref/os.texi:1943
msgid ""
"Any Lisp program output that would normally go to the echo area, either "
"using @code{message}, or using @code{prin1}, etc., with @code{t} as the "
"stream, goes instead to Emacs's standard error descriptor when in batch "
"mode.  Similarly, input that would normally come from the minibuffer is read "
"from the standard input descriptor.  Thus, Emacs behaves much like a "
"noninteractive application program.  (The echo area output that Emacs itself "
"normally generates, such as command echoing, is suppressed entirely.)"
msgstr ""

# type: defvar
#: lispref/os.texi:1944
#, no-wrap
msgid "noninteractive"
msgstr ""

# type: defvar
#: lispref/os.texi:1946
msgid "This variable is non-@code{nil} when Emacs is running in batch mode."
msgstr ""

# type: cindex
#: lispref/os.texi:1950
#, no-wrap
msgid "session manager"
msgstr ""

# type: Plain text
#: lispref/os.texi:1958
msgid ""
"Emacs supports the X Session Management Protocol for suspension and restart "
"of applications.  In the X Window System, a program called the @dfn{session "
"manager} has the responsibility to keep track of the applications that are "
"running.  During shutdown, the session manager asks applications to save "
"their state, and delays the actual shutdown until they respond.  An "
"application can also cancel the shutdown."
msgstr ""

# type: Plain text
#: lispref/os.texi:1964
msgid ""
"When the session manager restarts a suspended session, it directs these "
"applications to individually reload their saved state.  It does this by "
"specifying a special command-line argument that says what saved session to "
"restore.  For Emacs, this argument is @samp{--smid @var{session}}."
msgstr ""

# type: defvar
#: lispref/os.texi:1965
#, no-wrap
msgid "emacs-save-session-functions"
msgstr ""

# type: defvar
#: lispref/os.texi:1974
msgid ""
"Emacs supports saving state by using a hook called @code{emacs-save-session-"
"functions}.  Each function in this hook is called when the session manager "
"tells Emacs that the window system is shutting down.  The functions are "
"called with no arguments and with the current buffer set to a temporary "
"buffer.  Each function can use @code{insert} to add Lisp code to this "
"buffer.  At the end, Emacs saves the buffer in a file that a subsequent "
"Emacs invocation will load in order to restart the saved session."
msgstr ""

# type: defvar
#: lispref/os.texi:1978
msgid ""
"If a function in @code{emacs-save-session-functions} returns non-@code{nil}, "
"Emacs tells the session manager to cancel the shutdown."
msgstr ""

# type: Plain text
#: lispref/os.texi:1982
msgid ""
"Here is an example that just inserts some text into @samp{*scratch*} when "
"Emacs is restarted by the session manager."
msgstr ""

# type: group
#: lispref/os.texi:1986
#, no-wrap
msgid "(add-hook 'emacs-save-session-functions 'save-yourself-test)\n"
msgstr ""

# type: group
#: lispref/os.texi:1994
#, no-wrap
msgid ""
"(defun save-yourself-test ()\n"
"  (insert \"(save-excursion\n"
"  (switch-to-buffer \\\"*scratch*\\\")\n"
"  (insert \\\"I am restored\\\"))\")\n"
"  nil)\n"
msgstr ""

# type: ignore
#: lispref/os.texi:1999
#, no-wrap
msgid "   arch-tag: 8378814a-30d7-467c-9615-74a80b9988a7\n"
msgstr "   arch-tag: 8378814a-30d7-467c-9615-74a80b9988a7\n"

# type: cindex
#: lispref/positions.texi:9
#, no-wrap
msgid "position (in buffer)"
msgstr ""

# type: Plain text
#: lispref/positions.texi:17
msgid ""
"A @dfn{position} is the index of a character in the text of a buffer.  More "
"precisely, a position identifies the place between two characters (or before "
"the first character, or after the last character), so we can speak of the "
"character before or after a given position.  However, we often speak of the "
"character ``at'' a position, meaning the character after that position."
msgstr ""

# type: Plain text
#: lispref/positions.texi:29
msgid ""
"Positions are usually represented as integers starting from 1, but can also "
"be represented as @dfn{markers}---special objects that relocate "
"automatically when text is inserted or deleted so they stay with the "
"surrounding characters.  Functions that expect an argument to be a position "
"(an integer), but accept a marker as a substitute, normally ignore which "
"buffer the marker points into; they convert the marker to an integer, and "
"use that integer, exactly as if you had passed the integer as the argument, "
"even if the marker points to the ``wrong'' buffer.  A marker that points "
"nowhere cannot convert to an integer; using it instead of an integer causes "
"an error.  @xref{Markers}."
msgstr ""

# type: Plain text
#: lispref/positions.texi:32
msgid ""
"See also the ``field'' feature (@pxref{Fields}), which provides functions "
"that are used by many cursor-motion commands."
msgstr ""

# type: menu
#: lispref/positions.texi:38 lispref/positions.texi:40
#: lispref/positions.texi:41 lispref/vol1.texi:772 lispref/vol2.texi:773
#, no-wrap
msgid "Point"
msgstr ""

# type: menu
#: lispref/positions.texi:38 lispref/vol1.texi:772 lispref/vol2.texi:773
msgid "The special position where editing takes place."
msgstr ""

# type: menu
#: lispref/positions.texi:38 lispref/positions.texi:124
#: lispref/positions.texi:125 lispref/vol1.texi:772 lispref/vol1.texi:774
#: lispref/vol2.texi:773 lispref/vol2.texi:775
#, no-wrap
msgid "Motion"
msgstr ""

# type: menu
#: lispref/positions.texi:38 lispref/vol1.texi:772 lispref/vol2.texi:773
msgid "Changing point."
msgstr ""

# type: menu
#: lispref/positions.texi:38 lispref/vol1.texi:772 lispref/vol2.texi:773
msgid "Temporary motion and buffer changes."
msgstr ""

# type: menu
#: lispref/positions.texi:38 lispref/vol1.texi:772 lispref/vol2.texi:773
msgid "Restricting editing to a portion of the buffer."
msgstr ""

# type: itemize
#: lispref/positions.texi:42 lispref/positions.texi:70
#: lispref/windows.texi:101
#, no-wrap
msgid "point"
msgstr ""

# type: Plain text
#: lispref/positions.texi:48
msgid ""
"@dfn{Point} is a special buffer position used by many editing commands, "
"including the self-inserting typed characters and text insertion functions.  "
"Other commands move point through the text to allow editing and insertion at "
"different places."
msgstr ""

# type: Plain text
#: lispref/positions.texi:54
msgid ""
"Like other positions, point designates a place between two characters (or "
"before the first character, or after the last character), rather than a "
"particular character.  Usually terminals display the cursor over the "
"character that immediately follows point; point is actually before the "
"character on which the cursor sits."
msgstr ""

# type: cindex
#: lispref/positions.texi:55
#, no-wrap
msgid "point with narrowing"
msgstr ""

# type: Plain text
#: lispref/positions.texi:60
msgid ""
"The value of point is a number no less than 1, and no greater than the "
"buffer size plus 1.  If narrowing is in effect (@pxref{Narrowing}), then "
"point is constrained to fall within the accessible portion of the buffer "
"(possibly at one end of it)."
msgstr ""

# type: Plain text
#: lispref/positions.texi:69
msgid ""
"Each buffer has its own value of point, which is independent of the value of "
"point in other buffers.  Each window also has a value of point, which is "
"independent of the value of point in other windows on the same buffer.  This "
"is why point can have different values in various windows that display the "
"same buffer.  When a buffer appears in only one window, the buffer's point "
"and the window's point normally have the same value, so the distinction is "
"rarely important.  @xref{Window Point}, for more details."
msgstr ""

# type: cindex
#: lispref/positions.texi:71
#, no-wrap
msgid "current buffer position"
msgstr ""

# type: defun
#: lispref/positions.texi:74
msgid ""
"This function returns the value of point in the current buffer, as an "
"integer."
msgstr ""

# type: group
#: lispref/positions.texi:80
#, no-wrap
msgid ""
"(point)\n"
"     @result{} 175\n"
msgstr ""

# type: defun
#: lispref/positions.texi:84
#, no-wrap
msgid "point-min"
msgstr ""

# type: defun
#: lispref/positions.texi:89
msgid ""
"This function returns the minimum accessible value of point in the current "
"buffer.  This is normally 1, but if narrowing is in effect, it is the "
"position of the start of the region that you narrowed to.  (@xref"
"{Narrowing}.)"
msgstr ""

# type: defun
#: lispref/positions.texi:91
#, no-wrap
msgid "point-max"
msgstr ""

# type: defun
#: lispref/positions.texi:96
msgid ""
"This function returns the maximum accessible value of point in the current "
"buffer.  This is @code{(1+ (buffer-size))}, unless narrowing is in effect, "
"in which case it is the position of the end of the region that you narrowed "
"to.  (@xref{Narrowing}.)"
msgstr ""

# type: defun
#: lispref/positions.texi:98
#, no-wrap
msgid "buffer-end flag"
msgstr ""

# type: defun
#: lispref/positions.texi:102
msgid ""
"This function returns @code{(point-max)} if @var{flag} is greater than 0, "
"@code{(point-min)} otherwise.  The argument @var{flag} must be a number."
msgstr ""

# type: defun
#: lispref/positions.texi:104
#, no-wrap
msgid "buffer-size &optional buffer"
msgstr ""

# type: defun
#: lispref/positions.texi:108
msgid ""
"This function returns the total number of characters in the current buffer.  "
"In the absence of any narrowing (@pxref{Narrowing}), @code{point-max} "
"returns a value one larger than this."
msgstr ""

# type: defun
#: lispref/positions.texi:111
msgid ""
"If you specify a buffer, @var{buffer}, then the value is the size of @var"
"{buffer}."
msgstr ""

# type: group
#: lispref/positions.texi:116
#, no-wrap
msgid ""
"(buffer-size)\n"
"     @result{} 35\n"
msgstr ""

# type: group
#: lispref/positions.texi:120
#, no-wrap
msgid ""
"(point-max)\n"
"     @result{} 36\n"
msgstr ""

# type: cindex
#: lispref/positions.texi:126
#, no-wrap
msgid "motion by chars, words, lines, lists"
msgstr ""

# type: Plain text
#: lispref/positions.texi:131
msgid ""
"Motion functions change the value of point, either relative to the current "
"value of point, relative to the beginning or end of the buffer, or relative "
"to the edges of the selected window.  @xref{Point}."
msgstr ""

# type: menu
#: lispref/positions.texi:140 lispref/positions.texi:142 lispref/vol1.texi:782
#: lispref/vol2.texi:783
#, no-wrap
msgid "Character Motion"
msgstr ""

# type: menu
#: lispref/positions.texi:140 lispref/vol1.texi:782 lispref/vol2.texi:783
msgid "Moving in terms of characters."
msgstr ""

# type: menu
#: lispref/positions.texi:140 lispref/positions.texi:188 lispref/vol1.texi:782
#: lispref/vol2.texi:783
#, no-wrap
msgid "Word Motion"
msgstr ""

# type: menu
#: lispref/positions.texi:140 lispref/vol1.texi:782 lispref/vol2.texi:783
msgid "Moving in terms of words."
msgstr ""

# type: menu
#: lispref/positions.texi:140 lispref/positions.texi:237 lispref/vol1.texi:782
#: lispref/vol2.texi:783
#, no-wrap
msgid "Buffer End Motion"
msgstr ""

# type: menu
#: lispref/positions.texi:140 lispref/vol1.texi:782 lispref/vol2.texi:783
msgid "Moving to the beginning or end of the buffer."
msgstr ""

# type: menu
#: lispref/positions.texi:140 lispref/positions.texi:290 lispref/vol1.texi:782
#: lispref/vol2.texi:783
#, no-wrap
msgid "Text Lines"
msgstr ""

# type: menu
#: lispref/positions.texi:140 lispref/vol1.texi:782 lispref/vol2.texi:783
msgid "Moving in terms of lines of text."
msgstr ""

# type: menu
#: lispref/positions.texi:140 lispref/positions.texi:491 lispref/vol1.texi:782
#: lispref/vol2.texi:783
#, no-wrap
msgid "Screen Lines"
msgstr ""

# type: menu
#: lispref/positions.texi:140 lispref/vol1.texi:782 lispref/vol2.texi:783
msgid "Moving in terms of lines as displayed."
msgstr ""

# type: menu
#: lispref/positions.texi:140 lispref/positions.texi:641 lispref/vol1.texi:782
#: lispref/vol2.texi:783
#, no-wrap
msgid "List Motion"
msgstr ""

# type: menu
#: lispref/positions.texi:140 lispref/vol1.texi:782 lispref/vol2.texi:783
msgid "Moving by parsing lists and sexps."
msgstr ""

# type: menu
#: lispref/positions.texi:140 lispref/positions.texi:749
#: lispref/positions.texi:751 lispref/vol1.texi:782 lispref/vol2.texi:783
#, no-wrap
msgid "Skipping Characters"
msgstr ""

# type: menu
#: lispref/positions.texi:140 lispref/vol1.texi:782 lispref/vol2.texi:783
msgid "Skipping characters belonging to a certain set."
msgstr ""

# type: subsection
#: lispref/positions.texi:143
#, no-wrap
msgid "Motion by Characters"
msgstr ""

# type: Plain text
#: lispref/positions.texi:148
msgid ""
"These functions move point based on a count of characters.  @code{goto-char} "
"is the fundamental primitive; the other functions use that."
msgstr ""

# type: deffn
#: lispref/positions.texi:149
#, no-wrap
msgid "Command goto-char position"
msgstr ""

# type: deffn
#: lispref/positions.texi:154
msgid ""
"This function sets point in the current buffer to the value @var{position}.  "
"If @var{position} is less than 1, it moves point to the beginning of the "
"buffer.  If @var{position} is greater than the length of the buffer, it "
"moves point to the end."
msgstr ""

# type: deffn
#: lispref/positions.texi:159
msgid ""
"If narrowing is in effect, @var{position} still counts from the beginning of "
"the buffer, but point cannot go outside the accessible portion.  If @var"
"{position} is out of range, @code{goto-char} moves point to the beginning or "
"the end of the accessible portion."
msgstr ""

# type: deffn
#: lispref/positions.texi:163
msgid ""
"When this function is called interactively, @var{position} is the numeric "
"prefix argument, if provided; otherwise it is read from the minibuffer."
msgstr ""

# type: deffn
#: lispref/positions.texi:165
msgid "@code{goto-char} returns @var{position}."
msgstr ""

# type: deffn
#: lispref/positions.texi:167
#, no-wrap
msgid "Command forward-char &optional count"
msgstr ""

# type: deffn
#: lispref/positions.texi:174
msgid ""
"This function moves point @var{count} characters forward, towards the end of "
"the buffer (or backward, towards the beginning of the buffer, if @var{count} "
"is negative).  If @var{count} is @code{nil}, the default is 1."
msgstr ""

# type: deffn
#: lispref/positions.texi:179
msgid ""
"If this attempts to move past the beginning or end of the buffer (or the "
"limits of the accessible portion, when narrowing is in effect), it signals "
"an error with error symbol @code{beginning-of-buffer} or @code{end-of-"
"buffer}."
msgstr ""

# type: deffn
#: lispref/positions.texi:181 lispref/positions.texi:392
#: lispref/positions.texi:570 lispref/text.texi:489 lispref/windows.texi:656
msgid "In an interactive call, @var{count} is the numeric prefix argument."
msgstr ""

# type: deffn
#: lispref/positions.texi:183
#, no-wrap
msgid "Command backward-char &optional count"
msgstr ""

# type: deffn
#: lispref/positions.texi:186
msgid ""
"This is just like @code{forward-char} except that it moves in the opposite "
"direction."
msgstr ""

# type: subsection
#: lispref/positions.texi:189
#, no-wrap
msgid "Motion by Words"
msgstr ""

# type: Plain text
#: lispref/positions.texi:193
msgid ""
"These functions for parsing words use the syntax table to decide whether a "
"given character is part of a word.  @xref{Syntax Tables}."
msgstr ""

# type: deffn
#: lispref/positions.texi:194
#, no-wrap
msgid "Command forward-word &optional count"
msgstr ""

# type: deffn
#: lispref/positions.texi:198
msgid ""
"This function moves point forward @var{count} words (or backward if @var"
"{count} is negative).  If @var{count} is @code{nil}, it moves forward one "
"word."
msgstr ""

# type: deffn
#: lispref/positions.texi:205
msgid ""
"``Moving one word'' means moving until point crosses a word-constituent "
"character and then encounters a word-separator character.  However, this "
"function cannot move point past the boundary of the accessible portion of "
"the buffer, or across a field boundary (@pxref{Fields}).  The most common "
"case of a field boundary is the end of the prompt in the minibuffer."
msgstr ""

# type: deffn
#: lispref/positions.texi:210
msgid ""
"If it is possible to move @var{count} words, without being stopped "
"prematurely by the buffer boundary or a field boundary, the value is @code"
"{t}.  Otherwise, the return value is @code{nil} and point stops at the "
"buffer boundary or field boundary."
msgstr ""

# type: deffn
#: lispref/positions.texi:213
msgid ""
"If @code{inhibit-field-text-motion} is non-@code{nil}, this function ignores "
"field boundaries."
msgstr ""

# type: deffn
#: lispref/positions.texi:216
msgid ""
"In an interactive call, @var{count} is specified by the numeric prefix "
"argument.  If @var{count} is omitted or @code{nil}, it defaults to 1."
msgstr ""

# type: deffn
#: lispref/positions.texi:218
#, no-wrap
msgid "Command backward-word &optional count"
msgstr ""

# type: deffn
#: lispref/positions.texi:221
msgid ""
"This function is just like @code{forward-word}, except that it moves "
"backward until encountering the front of a word, rather than forward."
msgstr ""

# type: defvar
#: lispref/positions.texi:223
#, no-wrap
msgid "words-include-escapes"
msgstr ""

# type: defvar
#: lispref/positions.texi:229
msgid ""
"This variable affects the behavior of @code{forward-word} and everything "
"that uses it.  If it is non-@code{nil}, then characters in the ``escape'' "
"and ``character quote'' syntax classes count as part of words.  Otherwise, "
"they do not."
msgstr ""

# type: defvar
#: lispref/positions.texi:231
#, no-wrap
msgid "inhibit-field-text-motion"
msgstr ""

# type: defvar
#: lispref/positions.texi:235
msgid ""
"If this variable is non-@code{nil}, certain motion functions including @code"
"{forward-word}, @code{forward-sentence}, and @code{forward-paragraph} ignore "
"field boundaries."
msgstr ""

# type: subsection
#: lispref/positions.texi:238
#, no-wrap
msgid "Motion to an End of the Buffer"
msgstr ""

# type: cindex
#: lispref/positions.texi:239
#, no-wrap
msgid "move to beginning or end of buffer"
msgstr ""

# type: Plain text
#: lispref/positions.texi:242
msgid "To move point to the beginning of the buffer, write:"
msgstr ""

# type: group
#: lispref/positions.texi:246
#, no-wrap
msgid "(goto-char (point-min))\n"
msgstr ""

# type: Plain text
#: lispref/positions.texi:251
msgid "Likewise, to move to the end of the buffer, use:"
msgstr ""

# type: group
#: lispref/positions.texi:255
#, no-wrap
msgid "(goto-char (point-max))\n"
msgstr ""

# type: Plain text
#: lispref/positions.texi:261
msgid ""
"Here are two commands that users use to do these things.  They are "
"documented here to warn you not to use them in Lisp programs, because they "
"set the mark and display messages in the echo area."
msgstr ""

# type: deffn
#: lispref/positions.texi:262
#, no-wrap
msgid "Command beginning-of-buffer &optional n"
msgstr ""

# type: deffn
#: lispref/positions.texi:267
msgid ""
"This function moves point to the beginning of the buffer (or the limits of "
"the accessible portion, when narrowing is in effect), setting the mark at "
"the previous position (except in Transient Mark mode, if the mark is already "
"active, it does not set the mark.)"
msgstr ""

# type: deffn
#: lispref/positions.texi:272
msgid ""
"If @var{n} is non-@code{nil}, then it puts point @var{n} tenths of the way "
"from the beginning of the accessible portion of the buffer.  In an "
"interactive call, @var{n} is the numeric prefix argument, if provided; "
"otherwise @var{n} defaults to @code{nil}."
msgstr ""

# type: deffn
#: lispref/positions.texi:274 lispref/positions.texi:288
msgid "@strong{Warning:} Don't use this function in Lisp programs!"
msgstr ""

# type: deffn
#: lispref/positions.texi:276
#, no-wrap
msgid "Command end-of-buffer &optional n"
msgstr ""

# type: deffn
#: lispref/positions.texi:283
msgid ""
"This function moves point to the end of the buffer (or the limits of the "
"accessible portion, when narrowing is in effect), setting the mark at the "
"previous position (except in Transient Mark mode when the mark is already "
"active).  If @var{n} is non-@code{nil}, then it puts point @var{n} tenths of "
"the way from the end of the accessible portion of the buffer."
msgstr ""

# type: deffn
#: lispref/positions.texi:286
msgid ""
"In an interactive call, @var{n} is the numeric prefix argument, if provided; "
"otherwise @var{n} defaults to @code{nil}."
msgstr ""

# type: subsection
#: lispref/positions.texi:291
#, no-wrap
msgid "Motion by Text Lines"
msgstr ""

# type: cindex
#: lispref/positions.texi:292
#, no-wrap
msgid "lines"
msgstr ""

# type: Plain text
#: lispref/positions.texi:301
msgid ""
"Text lines are portions of the buffer delimited by newline characters, which "
"are regarded as part of the previous line.  The first text line begins at "
"the beginning of the buffer, and the last text line ends at the end of the "
"buffer whether or not the last character is a newline.  The division of the "
"buffer into text lines is not affected by the width of the window, by line "
"continuation in display, or by how tabs and control characters are displayed."
msgstr ""

# type: deffn
#: lispref/positions.texi:302
#, no-wrap
msgid "Command goto-line line"
msgstr ""

# type: deffn
#: lispref/positions.texi:310
msgid ""
"This function moves point to the front of the @var{line}th line, counting "
"from line 1 at beginning of the buffer.  If @var{line} is less than 1, it "
"moves point to the beginning of the buffer.  If @var{line} is greater than "
"the number of lines in the buffer, it moves point to the end of the buffer---"
"that is, the @emph{end of the last line} of the buffer.  This is the only "
"case in which @code{goto-line} does not necessarily move to the beginning of "
"a line."
msgstr ""

# type: deffn
#: lispref/positions.texi:316
msgid ""
"If narrowing is in effect, then @var{line} still counts from the beginning "
"of the buffer, but point cannot go outside the accessible portion.  So @code"
"{goto-line} moves point to the beginning or end of the accessible portion, "
"if the line number specifies an inaccessible position."
msgstr ""

# type: deffn
#: lispref/positions.texi:324
msgid ""
"The return value of @code{goto-line} is the difference between @var{line} "
"and the line number of the line to which point actually was able to move (in "
"the full buffer, before taking account of narrowing).  Thus, the value is "
"positive if the scan encounters the real end of the buffer before finding "
"the specified line.  The value is zero if scan encounters the end of the "
"accessible portion but not the real end of the buffer."
msgstr ""

# type: deffn
#: lispref/positions.texi:327
msgid ""
"In an interactive call, @var{line} is the numeric prefix argument if one has "
"been provided.  Otherwise @var{line} is read in the minibuffer."
msgstr ""

# type: deffn
#: lispref/positions.texi:329
#, no-wrap
msgid "Command beginning-of-line &optional count"
msgstr ""

# type: deffn
#: lispref/positions.texi:333
msgid ""
"This function moves point to the beginning of the current line.  With an "
"argument @var{count} not @code{nil} or 1, it moves forward @var{count}@minus"
"{}1 lines and then to the beginning of the line."
msgstr ""

# type: deffn
#: lispref/positions.texi:342
msgid ""
"This function does not move point across a field boundary (@pxref{Fields}) "
"unless doing so would move beyond there to a different line; therefore, if "
"@var{count} is @code{nil} or 1, and point starts at a field boundary, point "
"does not move.  To ignore field boundaries, either bind @code{inhibit-field-"
"text-motion} to @code{t}, or use the @code{forward-line} function instead.  "
"For instance, @code{(forward-line 0)} does the same thing as @code"
"{(beginning-of-line)}, except that it ignores field boundaries."
msgstr ""

# type: deffn
#: lispref/positions.texi:346 lispref/positions.texi:367
msgid ""
"If this function reaches the end of the buffer (or of the accessible "
"portion, if narrowing is in effect), it positions point there.  No error is "
"signaled."
msgstr ""

# type: defun
#: lispref/positions.texi:348
#, no-wrap
msgid "line-beginning-position &optional count"
msgstr ""

# type: defun
#: lispref/positions.texi:351
msgid ""
"Return the position that @code{(beginning-of-line @var{count})} would move "
"to."
msgstr ""

# type: deffn
#: lispref/positions.texi:353
#, no-wrap
msgid "Command end-of-line &optional count"
msgstr ""

# type: deffn
#: lispref/positions.texi:357
msgid ""
"This function moves point to the end of the current line.  With an argument "
"@var{count} not @code{nil} or 1, it moves forward @var{count}@minus{}1 lines "
"and then to the end of the line."
msgstr ""

# type: deffn
#: lispref/positions.texi:363
msgid ""
"This function does not move point across a field boundary (@pxref{Fields}) "
"unless doing so would move beyond there to a different line; therefore, if "
"@var{count} is @code{nil} or 1, and point starts at a field boundary, point "
"does not move.  To ignore field boundaries, bind @code{inhibit-field-text-"
"motion} to @code{t}."
msgstr ""

# type: defun
#: lispref/positions.texi:369
#, no-wrap
msgid "line-end-position &optional count"
msgstr ""

# type: defun
#: lispref/positions.texi:372
msgid ""
"Return the position that @code{(end-of-line @var{count})} would move to."
msgstr ""

# type: deffn
#: lispref/positions.texi:374
#, no-wrap
msgid "Command forward-line &optional count"
msgstr ""

# type: cindex
#: lispref/positions.texi:375
#, no-wrap
msgid "beginning of line"
msgstr ""

# type: deffn
#: lispref/positions.texi:381
msgid ""
"This function moves point forward @var{count} lines, to the beginning of the "
"line.  If @var{count} is negative, it moves point @minus{}@var{count} lines "
"backward, to the beginning of a line.  If @var{count} is zero, it moves "
"point to the beginning of the current line.  If @var{count} is @code{nil}, "
"that means 1."
msgstr ""

# type: deffn
#: lispref/positions.texi:385
msgid ""
"If @code{forward-line} encounters the beginning or end of the buffer (or of "
"the accessible portion) before finding that many lines, it sets point "
"there.  No error is signaled."
msgstr ""

# type: deffn
#: lispref/positions.texi:390
msgid ""
"@code{forward-line} returns the difference between @var{count} and the "
"number of lines actually moved.  If you attempt to move down five lines from "
"the beginning of a buffer that has only three lines, point stops at the end "
"of the last line, and the value will be 2."
msgstr ""

# type: defun
#: lispref/positions.texi:394
#, no-wrap
msgid "count-lines start end"
msgstr ""

# type: cindex
#: lispref/positions.texi:395
#, no-wrap
msgid "lines in region"
msgstr ""

# type: anchor{#1}
#: lispref/positions.texi:403
msgid "Definition of count-lines"
msgstr ""

# type: defun
#: lispref/positions.texi:403
msgid ""
"This function returns the number of lines between the positions @var{start} "
"and @var{end} in the current buffer.  If @var{start} and @var{end} are "
"equal, then it returns 0.  Otherwise it returns at least 1, even if @var"
"{start} and @var{end} are on the same line.  This is because the text "
"between them, considered in isolation, must contain at least one line unless "
"it is empty."
msgstr ""

# type: defun
#: lispref/positions.texi:405
msgid "Here is an example of using @code{count-lines}:"
msgstr ""

# type: group
#: lispref/positions.texi:412
#, no-wrap
msgid ""
"(defun current-line ()\n"
"  \"Return the vertical position of point@dots{}\"\n"
"  (+ (count-lines (window-start) (point))\n"
"     (if (= (current-column) 0) 1 0)))\n"
msgstr ""

# type: defun
#: lispref/positions.texi:416
#, no-wrap
msgid "line-number-at-pos &optional pos"
msgstr ""

# type: cindex
#: lispref/positions.texi:417
#, no-wrap
msgid "line number"
msgstr ""

# type: defun
#: lispref/positions.texi:421
msgid ""
"This function returns the line number in the current buffer corresponding to "
"the buffer position @var{pos}.  If @var{pos} is @code{nil} or omitted, the "
"current buffer position is used."
msgstr ""

# type: ignore
#: lispref/positions.texi:428
#, no-wrap
msgid ""
"The @code{previous-line} and @code{next-line} commands are functions\n"
"that should not be used in programs.  They are for users and are\n"
"mentioned here only for completeness.\n"
"\n"
msgstr ""

# type: deffn
#: lispref/positions.texi:429
#, no-wrap
msgid "Command previous-line count"
msgstr ""

# type: cindex
#: lispref/positions.texi:430
#, no-wrap
msgid "goal column"
msgstr ""

# type: deffn
#: lispref/positions.texi:434
#, no-wrap
msgid ""
"This function moves point up @var{count} lines (down if @var{count}\n"
"is negative).  In moving, it attempts to keep point in the ``goal column''\n"
"(normally the same column that it was at the beginning of the move).\n"
"\n"
msgstr ""

# type: deffn
#: lispref/positions.texi:438 lispref/positions.texi:463
#, no-wrap
msgid ""
"If there is no character in the target line exactly under the current\n"
"column, point is positioned after the character in that line which\n"
"spans this column, or at the end of the line if it is not long enough.\n"
"\n"
msgstr ""

# type: deffn
#: lispref/positions.texi:442 lispref/positions.texi:467
#, no-wrap
msgid ""
"If it attempts to move beyond the top or bottom of the buffer (or clipped\n"
"region), then point is positioned in the goal column in the top or\n"
"bottom line.  No error is signaled.\n"
"\n"
msgstr ""

# type: deffn
#: lispref/positions.texi:445 lispref/positions.texi:474
#, no-wrap
msgid ""
"In an interactive call, @var{count} will be the numeric\n"
"prefix argument.\n"
"\n"
msgstr ""

# type: deffn
#: lispref/positions.texi:449 lispref/positions.texi:478
#, no-wrap
msgid ""
"The command @code{set-goal-column} can be used to create a semipermanent\n"
"goal column to which this command always moves.  Then it does not try to\n"
"move vertically.\n"
"\n"
msgstr ""

# type: deffn
#: lispref/positions.texi:453
#, no-wrap
msgid ""
"If you are thinking of using this in a Lisp program, consider using\n"
"@code{forward-line} with a negative argument instead.  It is usually easier\n"
"to use and more reliable (no dependence on goal column, etc.).\n"
msgstr ""

# type: deffn
#: lispref/positions.texi:455
#, no-wrap
msgid "Command next-line count"
msgstr ""

# type: deffn
#: lispref/positions.texi:459
#, no-wrap
msgid ""
"This function moves point down @var{count} lines (up if @var{count}\n"
"is negative).  In moving, it attempts to keep point in the ``goal column''\n"
"(normally the same column that it was at the beginning of the move).\n"
"\n"
msgstr ""

# type: deffn
#: lispref/positions.texi:471
#, no-wrap
msgid ""
"In the case where the @var{count} is 1, and point is on the last\n"
"line of the buffer (or clipped region), a new empty line is inserted at the\n"
"end of the buffer (or clipped region) and point moved there.\n"
"\n"
msgstr ""

# type: deffn
#: lispref/positions.texi:482
#, no-wrap
msgid ""
"If you are thinking of using this in a Lisp program, consider using\n"
"@code{forward-line} instead.  It is usually easier\n"
"to use and more reliable (no dependence on goal column, etc.).\n"
msgstr ""

# type: Plain text
#: lispref/positions.texi:490
msgid ""
"Also see the functions @code{bolp} and @code{eolp} in @ref{Near Point}.  "
"These functions do not move point, but test whether it is already at the "
"beginning or end of a line."
msgstr ""

# type: subsection
#: lispref/positions.texi:492
#, no-wrap
msgid "Motion by Screen Lines"
msgstr ""

# type: Plain text
#: lispref/positions.texi:500
msgid ""
"The line functions in the previous section count text lines, delimited only "
"by newline characters.  By contrast, these functions count screen lines, "
"which are defined by the way the text appears on the screen.  A text line is "
"a single screen line if it is short enough to fit the width of the selected "
"window, but otherwise it may occupy several screen lines."
msgstr ""

# type: Plain text
#: lispref/positions.texi:505
msgid ""
"In some cases, text lines are truncated on the screen rather than continued "
"onto additional screen lines.  In these cases, @code{vertical-motion} moves "
"point much like @code{forward-line}.  @xref{Truncation}."
msgstr ""

# type: Plain text
#: lispref/positions.texi:512
msgid ""
"Because the width of a given string depends on the flags that control the "
"appearance of certain characters, @code{vertical-motion} behaves "
"differently, for a given piece of text, depending on the buffer it is in, "
"and even on the selected window (because the width, the truncation flag, and "
"display table may vary between windows).  @xref{Usual Display}."
msgstr ""

# type: Plain text
#: lispref/positions.texi:517
msgid ""
"These functions scan text to determine where screen lines break, and thus "
"take time proportional to the distance scanned.  If you intend to use them "
"heavily, Emacs provides caches which may improve the performance of your "
"code.  @xref{Truncation, cache-long-line-scans}."
msgstr ""

# type: defun
#: lispref/positions.texi:518
#, no-wrap
msgid "vertical-motion count &optional window"
msgstr ""

# type: defun
#: lispref/positions.texi:522
msgid ""
"This function moves point to the start of the screen line @var{count} screen "
"lines down from the screen line containing point.  If @var{count} is "
"negative, it moves up instead."
msgstr ""

# type: defun
#: lispref/positions.texi:526
msgid ""
"@code{vertical-motion} returns the number of screen lines over which it "
"moved point.  The value may be less in absolute value than @var{count} if "
"the beginning or end of the buffer was reached."
msgstr ""

# type: defun
#: lispref/positions.texi:531
msgid ""
"The window @var{window} is used for obtaining parameters such as the width, "
"the horizontal scrolling, and the display table.  But @code{vertical-motion} "
"always operates on the current buffer, even if @var{window} currently "
"displays some other buffer."
msgstr ""

# type: defun
#: lispref/positions.texi:533
#, no-wrap
msgid "count-screen-lines &optional beg end count-final-newline window"
msgstr ""

# type: defun
#: lispref/positions.texi:540
msgid ""
"This function returns the number of screen lines in the text from @var{beg} "
"to @var{end}.  The number of screen lines may be different from the number "
"of actual lines, due to line continuation, the display table, etc.  If @var"
"{beg} and @var{end} are @code{nil} or omitted, they default to the beginning "
"and end of the accessible portion of the buffer."
msgstr ""

# type: defun
#: lispref/positions.texi:543
msgid ""
"If the region ends with a newline, that is ignored unless the optional third "
"argument @var{count-final-newline} is non-@code{nil}."
msgstr ""

# type: defun
#: lispref/positions.texi:547
msgid ""
"The optional fourth argument @var{window} specifies the window for obtaining "
"parameters such as width, horizontal scrolling, and so on.  The default is "
"to use the selected window's parameters."
msgstr ""

# type: defun
#: lispref/positions.texi:552
msgid ""
"Like @code{vertical-motion}, @code{count-screen-lines} always uses the "
"current buffer, regardless of which buffer is displayed in @var{window}.  "
"This makes possible to use @code{count-screen-lines} in any buffer, whether "
"or not it is currently displayed in some window."
msgstr ""

# type: deffn
#: lispref/positions.texi:554
#, no-wrap
msgid "Command move-to-window-line count"
msgstr ""

# type: deffn
#: lispref/positions.texi:561
msgid ""
"This function moves point with respect to the text currently displayed in "
"the selected window.  It moves point to the beginning of the screen line @var"
"{count} screen lines from the top of the window.  If @var{count} is "
"negative, that specifies a position @w{@minus{}@var{count}} lines from the "
"bottom (or the last line of the buffer, if the buffer ends above the "
"specified screen position)."
msgstr ""

# type: deffn
#: lispref/positions.texi:568
msgid ""
"If @var{count} is @code{nil}, then point moves to the beginning of the line "
"in the middle of the window.  If the absolute value of @var{count} is "
"greater than the size of the window, then point moves to the place that "
"would appear on that screen line if the window were tall enough.  This will "
"probably cause the next redisplay to scroll to bring that location onto the "
"screen."
msgstr ""

# type: deffn
#: lispref/positions.texi:573
msgid ""
"The value returned is the window line number point has moved to, with the "
"top line in the window numbered 0."
msgstr ""

# type: defun
#: lispref/positions.texi:575
#, no-wrap
msgid "compute-motion from frompos to topos width offsets window"
msgstr ""

# type: defun
#: lispref/positions.texi:581
msgid ""
"This function scans the current buffer, calculating screen positions.  It "
"scans the buffer forward from position @var{from}, assuming that is at "
"screen coordinates @var{frompos}, to position @var{to} or coordinates @var"
"{topos}, whichever comes first.  It returns the ending buffer position and "
"screen coordinates."
msgstr ""

# type: defun
#: lispref/positions.texi:584
msgid ""
"The coordinate arguments @var{frompos} and @var{topos} are cons cells of the "
"form @code{(@var{hpos} . @var{vpos})}."
msgstr ""

# type: defun
#: lispref/positions.texi:589
msgid ""
"The argument @var{width} is the number of columns available to display text; "
"this affects handling of continuation lines.  @code{nil} means the actual "
"number of usable text columns in the window, which is equivalent to the "
"value returned by @code{(window-width window)}."
msgstr ""

# type: defun
#: lispref/positions.texi:598
msgid ""
"The argument @var{offsets} is either @code{nil} or a cons cell of the form "
"@code{(@var{hscroll} . @var{tab-offset})}.  Here @var{hscroll} is the number "
"of columns not being displayed at the left margin; most callers get this by "
"calling @code{window-hscroll}.  Meanwhile, @var{tab-offset} is the offset "
"between column numbers on the screen and column numbers in the buffer.  This "
"can be nonzero in a continuation line, when the previous screen lines' "
"widths do not add up to a multiple of @code{tab-width}.  It is always zero "
"in a non-continuation line."
msgstr ""

# type: defun
#: lispref/positions.texi:602
msgid ""
"The window @var{window} serves only to specify which display table to use.  "
"@code{compute-motion} always operates on the current buffer, regardless of "
"what buffer is displayed in @var{window}."
msgstr ""

# type: defun
#: lispref/positions.texi:604
msgid "The return value is a list of five elements:"
msgstr ""

# type: example
#: lispref/positions.texi:607
#, no-wrap
msgid "(@var{pos} @var{hpos} @var{vpos} @var{prevhpos} @var{contin})\n"
msgstr ""

# type: defun
#: lispref/positions.texi:613
msgid ""
"Here @var{pos} is the buffer position where the scan stopped, @var{vpos} is "
"the vertical screen position, and @var{hpos} is the horizontal screen "
"position."
msgstr ""

# type: defun
#: lispref/positions.texi:617
msgid ""
"The result @var{prevhpos} is the horizontal position one character back from "
"@var{pos}.  The result @var{contin} is @code{t} if the last line was "
"continued after (or within) the previous character."
msgstr ""

# type: defun
#: lispref/positions.texi:624
msgid ""
"For example, to find the buffer position of column @var{col} of screen line "
"@var{line} of a certain window, pass the window's display start location as "
"@var{from} and the window's upper-left coordinates as @var{frompos}.  Pass "
"the buffer's @code{(point-max)} as @var{to}, to limit the scan to the end of "
"the accessible portion of the buffer, and pass @var{line} and @var{col} as "
"@var{topos}.  Here's a function that does this:"
msgstr ""

# type: example
#: lispref/positions.texi:634
#, no-wrap
msgid ""
"(defun coordinates-of-position (col line)\n"
"  (car (compute-motion (window-start)\n"
"                       '(0 . 0)\n"
"                       (point-max)\n"
"                       (cons col line)\n"
"                       (window-width)\n"
"                       (cons (window-hscroll) 0)\n"
"                       (selected-window))))\n"
msgstr ""

# type: defun
#: lispref/positions.texi:639
msgid ""
"When you use @code{compute-motion} for the minibuffer, you need to use @code"
"{minibuffer-prompt-width} to get the horizontal position of the beginning of "
"the first screen line.  @xref{Minibuffer Contents}."
msgstr ""

# type: subsection
#: lispref/positions.texi:643
#, no-wrap
msgid "Moving over Balanced Expressions"
msgstr ""

# type: cindex
#: lispref/positions.texi:644
#, no-wrap
msgid "sexp motion"
msgstr ""

# type: cindex
#: lispref/positions.texi:645
#, no-wrap
msgid "Lisp expression motion"
msgstr ""

# type: cindex
#: lispref/positions.texi:646
#, no-wrap
msgid "list motion"
msgstr ""

# type: cindex
#: lispref/positions.texi:647
#, no-wrap
msgid "balanced parenthesis motion"
msgstr ""

# type: Plain text
#: lispref/positions.texi:656
msgid ""
"Here are several functions concerned with balanced-parenthesis expressions "
"(also called @dfn{sexps} in connection with moving across them in Emacs).  "
"The syntax table controls how these functions interpret various characters; "
"see @ref{Syntax Tables}.  @xref{Parsing Expressions}, for lower-level "
"primitives for scanning sexps or parts of sexps.  For user-level commands, "
"see @ref{Parentheses,, Commands for Editing with Parentheses, emacs, The GNU "
"Emacs Manual}."
msgstr ""

# type: deffn
#: lispref/positions.texi:657
#, no-wrap
msgid "Command forward-list &optional arg"
msgstr ""

# type: deffn
#: lispref/positions.texi:661
msgid ""
"This function moves forward across @var{arg} (default 1) balanced groups of "
"parentheses.  (Other syntactic entities such as words or paired string "
"quotes are ignored.)"
msgstr ""

# type: deffn
#: lispref/positions.texi:663
#, no-wrap
msgid "Command backward-list &optional arg"
msgstr ""

# type: deffn
#: lispref/positions.texi:667
msgid ""
"This function moves backward across @var{arg} (default 1) balanced groups of "
"parentheses.  (Other syntactic entities such as words or paired string "
"quotes are ignored.)"
msgstr ""

# type: deffn
#: lispref/positions.texi:669
#, no-wrap
msgid "Command up-list &optional arg"
msgstr ""

# type: deffn
#: lispref/positions.texi:672
msgid ""
"This function moves forward out of @var{arg} (default 1) levels of "
"parentheses.  A negative argument means move backward but still to a less "
"deep spot."
msgstr ""

# type: deffn
#: lispref/positions.texi:674
#, no-wrap
msgid "Command down-list &optional arg"
msgstr ""

# type: deffn
#: lispref/positions.texi:678
msgid ""
"This function moves forward into @var{arg} (default 1) levels of "
"parentheses.  A negative argument means move backward but still go deeper in "
"parentheses (@minus{}@var{arg} levels)."
msgstr ""

# type: deffn
#: lispref/positions.texi:680
#, no-wrap
msgid "Command forward-sexp &optional arg"
msgstr ""

# type: deffn
#: lispref/positions.texi:685
msgid ""
"This function moves forward across @var{arg} (default 1) balanced "
"expressions.  Balanced expressions include both those delimited by "
"parentheses and other kinds, such as words and string constants.  @xref"
"{Parsing Expressions}.  For example,"
msgstr ""

# type: group
#: lispref/positions.texi:691
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"(concat@point{} \"foo \" (car x) y z)\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: group
#: lispref/positions.texi:696
#, no-wrap
msgid ""
"(forward-sexp 3)\n"
"     @result{} nil\n"
"\n"
msgstr ""

# type: group
#: lispref/positions.texi:700
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"(concat \"foo \" (car x) y@point{} z)\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: deffn
#: lispref/positions.texi:704
#, no-wrap
msgid "Command backward-sexp &optional arg"
msgstr ""

# type: deffn
#: lispref/positions.texi:706
msgid ""
"This function moves backward across @var{arg} (default 1) balanced "
"expressions."
msgstr ""

# type: deffn
#: lispref/positions.texi:708
#, no-wrap
msgid "Command beginning-of-defun &optional arg"
msgstr ""

# type: deffn
#: lispref/positions.texi:713
msgid ""
"This function moves back to the @var{arg}th beginning of a defun.  If @var"
"{arg} is negative, this actually moves forward, but it still moves to the "
"beginning of a defun, not to the end of one.  @var{arg} defaults to 1."
msgstr ""

# type: deffn
#: lispref/positions.texi:715
#, no-wrap
msgid "Command end-of-defun &optional arg"
msgstr ""

# type: deffn
#: lispref/positions.texi:720
msgid ""
"This function moves forward to the @var{arg}th end of a defun.  If @var{arg} "
"is negative, this actually moves backward, but it still moves to the end of "
"a defun, not to the beginning of one.  @var{arg} defaults to 1."
msgstr ""

# type: defopt
#: lispref/positions.texi:728
msgid ""
"If non-@code{nil}, this buffer-local variable holds a regular expression "
"that specifies what text can appear before the open-parenthesis that starts "
"a defun.  That is to say, a defun begins on a line that starts with a match "
"for this regular expression, followed by a character with open-parenthesis "
"syntax."
msgstr ""

# type: defopt
#: lispref/positions.texi:730
#, no-wrap
msgid "open-paren-in-column-0-is-defun-start"
msgstr "open-paren-in-column-0-is-defun-start"

# type: defopt
#: lispref/positions.texi:735
msgid ""
"If this variable's value is non-@code{nil}, an open parenthesis in column 0 "
"is considered to be the start of a defun.  If it is @code{nil}, an open "
"parenthesis in column 0 has no special meaning.  The default is @code{t}."
msgstr ""

# type: defvar
#: lispref/positions.texi:737
#, no-wrap
msgid "beginning-of-defun-function"
msgstr "beginning-of-defun-function"

# type: defvar
#: lispref/positions.texi:741
msgid ""
"If non-@code{nil}, this variable holds a function for finding the beginning "
"of a defun.  The function @code{beginning-of-defun} calls this function "
"instead of using its normal method."
msgstr ""

# type: defvar
#: lispref/positions.texi:743
#, no-wrap
msgid "end-of-defun-function"
msgstr "end-of-defun-function"

# type: defvar
#: lispref/positions.texi:747
msgid ""
"If non-@code{nil}, this variable holds a function for finding the end of a "
"defun.  The function @code{end-of-defun} calls this function instead of "
"using its normal method."
msgstr ""

# type: cindex
#: lispref/positions.texi:752
#, no-wrap
msgid "skipping characters"
msgstr ""

# type: Plain text
#: lispref/positions.texi:757
msgid ""
"The following two functions move point over a specified set of characters.  "
"For example, they are often used to skip whitespace.  For related functions, "
"see @ref{Motion and Syntax}."
msgstr ""

# type: Plain text
#: lispref/positions.texi:761
msgid ""
"These functions convert the set string to multibyte if the buffer is "
"multibyte, and they convert it to unibyte if the buffer is unibyte, as the "
"search functions do (@pxref{Searching and Matching})."
msgstr ""

# type: defun
#: lispref/positions.texi:762
#, no-wrap
msgid "skip-chars-forward character-set &optional limit"
msgstr ""

# type: defun
#: lispref/positions.texi:768
msgid ""
"This function moves point in the current buffer forward, skipping over a "
"given set of characters.  It examines the character following point, then "
"advances point if the character matches @var{character-set}.  This continues "
"until it reaches a character that does not match.  The function returns the "
"number of characters moved over."
msgstr ""

# type: defun
#: lispref/positions.texi:776
msgid ""
"The argument @var{character-set} is a string, like the inside of a @samp"
"{[@dots{}]} in a regular expression except that @samp{]} does not terminate "
"it, and @samp{\\} quotes @samp{^}, @samp{-} or @samp{\\}.  Thus, @code{\"a-"
"zA-Z\"} skips over all letters, stopping before the first nonletter, and "
"@code{\"^a-zA-Z\"} skips nonletters stopping before the first letter.  See "
"@xref{Regular Expressions}.  Character classes can also be used, e.g. @code"
"{\"[:alnum:]\"}.  See @pxref{Char Classes}."
msgstr ""

# type: defun
#: lispref/positions.texi:780
msgid ""
"If @var{limit} is supplied (it must be a number or a marker), it specifies "
"the maximum position in the buffer that point can be skipped to.  Point will "
"stop at or before @var{limit}."
msgstr ""

# type: defun
#: lispref/positions.texi:785
msgid ""
"In the following example, point is initially located directly before the "
"@samp{T}.  After the form is evaluated, point is located at the end of that "
"line (between the @samp{t} of @samp{hat} and the newline).  The function "
"skips all letters and spaces, but not newlines."
msgstr ""

# type: group
#: lispref/positions.texi:792 lispref/searching.texi:977
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"I read \"@point{}The cat in the hat\n"
"comes back\" twice.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: group
#: lispref/positions.texi:797
#, no-wrap
msgid ""
"(skip-chars-forward \"a-zA-Z \")\n"
"     @result{} nil\n"
"\n"
msgstr ""

# type: group
#: lispref/positions.texi:802 lispref/searching.texi:987
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"I read \"The cat in the hat@point{}\n"
"comes back\" twice.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: defun
#: lispref/positions.texi:806
#, no-wrap
msgid "skip-chars-backward character-set &optional limit"
msgstr ""

# type: defun
#: lispref/positions.texi:810
msgid ""
"This function moves point backward, skipping characters that match @var"
"{character-set}, until @var{limit}.  It is just like @code{skip-chars-"
"forward} except for the direction of motion."
msgstr ""

# type: defun
#: lispref/positions.texi:813 lispref/syntax.texi:591
msgid ""
"The return value indicates the distance traveled.  It is an integer that is "
"zero or less."
msgstr ""

# type: cindex
#: lispref/positions.texi:817
#, no-wrap
msgid "excursion"
msgstr ""

# type: Plain text
#: lispref/positions.texi:825
msgid ""
"It is often useful to move point ``temporarily'' within a localized portion "
"of the program, or to switch buffers temporarily.  This is called an @dfn"
"{excursion}, and it is done with the @code{save-excursion} special form.  "
"This construct initially remembers the identity of the current buffer, and "
"its values of point and the mark, and restores them after the completion of "
"the excursion."
msgstr ""

# type: Plain text
#: lispref/positions.texi:829
msgid ""
"The forms for saving and restoring the configuration of windows are "
"described elsewhere (see @ref{Window Configurations}, and @pxref{Frame "
"Configurations})."
msgstr ""

# type: defspec
#: lispref/positions.texi:830
#, no-wrap
msgid "save-excursion body@dots{}"
msgstr ""

# type: cindex
#: lispref/positions.texi:831
#, no-wrap
msgid "mark excursion"
msgstr ""

# type: cindex
#: lispref/positions.texi:832
#, no-wrap
msgid "point excursion"
msgstr ""

# type: defspec
#: lispref/positions.texi:838
msgid ""
"The @code{save-excursion} special form saves the identity of the current "
"buffer and the values of point and the mark in it, evaluates @var{body}, and "
"finally restores the buffer and its saved values of point and the mark.  All "
"three saved values are restored even in case of an abnormal exit via @code"
"{throw} or error (@pxref{Nonlocal Exits})."
msgstr ""

# type: defspec
#: lispref/positions.texi:843
msgid ""
"The @code{save-excursion} special form is the standard way to switch buffers "
"or move point within one part of a program and avoid affecting the rest of "
"the program.  It is used more than 4000 times in the Lisp sources of Emacs."
msgstr ""

# type: defspec
#: lispref/positions.texi:847
msgid ""
"@code{save-excursion} does not save the values of point and the mark for "
"other buffers, so changes in other buffers remain in effect after @code{save-"
"excursion} exits."
msgstr ""

# type: cindex
#: lispref/positions.texi:848
#, no-wrap
msgid "window excursions"
msgstr ""

# type: defspec
#: lispref/positions.texi:854
msgid ""
"Likewise, @code{save-excursion} does not restore window-buffer "
"correspondences altered by functions such as @code{switch-to-buffer}.  One "
"way to restore these correspondences, and the selected window, is to use "
"@code{save-window-excursion} inside @code{save-excursion} (@pxref{Window "
"Configurations})."
msgstr ""

# type: defspec
#: lispref/positions.texi:857
msgid ""
"The value returned by @code{save-excursion} is the result of the last form "
"in @var{body}, or @code{nil} if no body forms were given."
msgstr ""

# type: group
#: lispref/positions.texi:864
#, no-wrap
msgid ""
"(save-excursion @var{forms})\n"
"@equiv{}\n"
"(let ((old-buf (current-buffer))\n"
"      (old-pnt (point-marker))\n"
msgstr ""

# type: example
#: lispref/positions.texi:869
#, no-wrap
msgid ""
"      (old-mark (copy-marker (mark-marker))))\n"
"  (unwind-protect\n"
"      (progn @var{forms})\n"
"    (set-buffer old-buf)\n"
msgstr ""

# type: group
#: lispref/positions.texi:872
#, no-wrap
msgid ""
"    (goto-char old-pnt)\n"
"    (set-marker (mark-marker) old-mark)))\n"
msgstr ""

# type: Plain text
#: lispref/positions.texi:881
msgid ""
"@strong{Warning:} Ordinary insertion of text adjacent to the saved point "
"value relocates the saved value, just as it relocates all markers.  More "
"precisely, the saved value is a marker with insertion type @code{nil}.  @xref"
"{Marker Insertion Types}.  Therefore, when the saved point value is "
"restored, it normally comes before the inserted text."
msgstr ""

# type: Plain text
#: lispref/positions.texi:886
msgid ""
"Although @code{save-excursion} saves the location of the mark, it does not "
"prevent functions which modify the buffer from setting @code{deactivate-"
"mark}, and thus causing the deactivation of the mark after the command "
"finishes.  @xref{The Mark}."
msgstr ""

# type: cindex
#: lispref/positions.texi:889
#, no-wrap
msgid "narrowing"
msgstr ""

# type: cindex
#: lispref/positions.texi:890
#, no-wrap
msgid "restriction (in a buffer)"
msgstr ""

# type: cindex
#: lispref/positions.texi:891
#, no-wrap
msgid "accessible portion (of a buffer)"
msgstr ""

# type: Plain text
#: lispref/positions.texi:897
msgid ""
"@dfn{Narrowing} means limiting the text addressable by Emacs editing "
"commands to a limited range of characters in a buffer.  The text that "
"remains addressable is called the @dfn{accessible portion} of the buffer."
msgstr ""

# type: Plain text
#: lispref/positions.texi:904
msgid ""
"Narrowing is specified with two buffer positions which become the beginning "
"and end of the accessible portion.  For most editing commands and most Emacs "
"primitives, these positions replace the values of the beginning and end of "
"the buffer.  While narrowing is in effect, no text outside the accessible "
"portion is displayed, and point cannot move outside the accessible portion."
msgstr ""

# type: Plain text
#: lispref/positions.texi:908
msgid ""
"Values such as positions or line numbers, which usually count from the "
"beginning of the buffer, do so despite narrowing, but the functions which "
"use them refuse to operate on text that is inaccessible."
msgstr ""

# type: Plain text
#: lispref/positions.texi:911
msgid ""
"The commands for saving buffers are unaffected by narrowing; they save the "
"entire buffer regardless of any narrowing."
msgstr ""

# type: deffn
#: lispref/positions.texi:912
#, no-wrap
msgid "Command narrow-to-region start end"
msgstr ""

# type: deffn
#: lispref/positions.texi:916
msgid ""
"This function sets the accessible portion of the current buffer to start at "
"@var{start} and end at @var{end}.  Both arguments should be character "
"positions."
msgstr ""

# type: deffn
#: lispref/positions.texi:919
msgid ""
"In an interactive call, @var{start} and @var{end} are set to the bounds of "
"the current region (point and the mark, with the smallest first)."
msgstr ""

# type: deffn
#: lispref/positions.texi:921
#, no-wrap
msgid "Command narrow-to-page &optional move-count"
msgstr ""

# type: deffn
#: lispref/positions.texi:928
msgid ""
"This function sets the accessible portion of the current buffer to include "
"just the current page.  An optional first argument @var{move-count} non-@code"
"{nil} means to move forward or backward by @var{move-count} pages and then "
"narrow to one page.  The variable @code{page-delimiter} specifies where "
"pages start and end (@pxref{Standard Regexps})."
msgstr ""

# type: deffn
#: lispref/positions.texi:931
msgid ""
"In an interactive call, @var{move-count} is set to the numeric prefix "
"argument."
msgstr ""

# type: deffn
#: lispref/positions.texi:933
#, no-wrap
msgid "Command widen"
msgstr ""

# type: cindex
#: lispref/positions.texi:934
#, no-wrap
msgid "widening"
msgstr ""

# type: deffn
#: lispref/positions.texi:938
msgid ""
"This function cancels any narrowing in the current buffer, so that the "
"entire contents are accessible.  This is called @dfn{widening}.  It is "
"equivalent to the following expression:"
msgstr ""

# type: example
#: lispref/positions.texi:941
#, no-wrap
msgid "(narrow-to-region 1 (1+ (buffer-size)))\n"
msgstr ""

# type: defspec
#: lispref/positions.texi:944
#, no-wrap
msgid "save-restriction body@dots{}"
msgstr ""

# type: defspec
#: lispref/positions.texi:951
msgid ""
"This special form saves the current bounds of the accessible portion, "
"evaluates the @var{body} forms, and finally restores the saved bounds, thus "
"restoring the same state of narrowing (or absence thereof) formerly in "
"effect.  The state of narrowing is restored even in the event of an abnormal "
"exit via @code{throw} or error (@pxref{Nonlocal Exits}).  Therefore, this "
"construct is a clean way to narrow a buffer temporarily."
msgstr ""

# type: defspec
#: lispref/positions.texi:954
msgid ""
"The value returned by @code{save-restriction} is that returned by the last "
"form in @var{body}, or @code{nil} if no body forms were given."
msgstr ""

# type: defspec
#: lispref/positions.texi:959
msgid ""
"@strong{Caution:} it is easy to make a mistake when using the @code{save-"
"restriction} construct.  Read the entire description here before you try it."
msgstr ""

# type: defspec
#: lispref/positions.texi:964
msgid ""
"If @var{body} changes the current buffer, @code{save-restriction} still "
"restores the restrictions on the original buffer (the buffer whose "
"restrictions it saved from), but it does not restore the identity of the "
"current buffer."
msgstr ""

# type: defspec
#: lispref/positions.texi:972
msgid ""
"@code{save-restriction} does @emph{not} restore point and the mark; use @code"
"{save-excursion} for that.  If you use both @code{save-restriction} and @code"
"{save-excursion} together, @code{save-excursion} should come first (on the "
"outside).  Otherwise, the old point value would be restored with temporary "
"narrowing still in effect.  If the old point value were outside the limits "
"of the temporary narrowing, this would fail to restore it accurately."
msgstr ""

# type: defspec
#: lispref/positions.texi:974
msgid "Here is a simple example of correct use of @code{save-restriction}:"
msgstr ""

# type: group
#: lispref/positions.texi:982
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of foo\n"
"This is the contents of foo\n"
"This is the contents of foo@point{}\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: group
#: lispref/positions.texi:992
#, no-wrap
msgid ""
"(save-excursion\n"
"  (save-restriction\n"
"    (goto-char 1)\n"
"    (forward-line 2)\n"
"    (narrow-to-region 1 (point))\n"
"    (goto-char (point-min))\n"
"    (replace-string \"foo\" \"bar\")))\n"
"\n"
msgstr ""

# type: group
#: lispref/positions.texi:998
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of bar\n"
"This is the contents of bar\n"
"This is the contents of foo@point{}\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: ignore
#: lispref/positions.texi:1004
#, no-wrap
msgid "   arch-tag: 56e8ff26-4ffe-4832-a141-7e991a2d0f87\n"
msgstr "   arch-tag: 56e8ff26-4ffe-4832-a141-7e991a2d0f87\n"

# type: cindex
#: lispref/processes.texi:9
#, no-wrap
msgid "child process"
msgstr ""

# type: cindex
#: lispref/processes.texi:10
#, no-wrap
msgid "parent process"
msgstr ""

# type: cindex
#: lispref/processes.texi:11
#, no-wrap
msgid "subprocess"
msgstr ""

# type: cindex
#: lispref/processes.texi:12
#, no-wrap
msgid "process"
msgstr ""

# type: Plain text
#: lispref/processes.texi:19
msgid ""
"In the terminology of operating systems, a @dfn{process} is a space in which "
"a program can execute.  Emacs runs in a process.  Emacs Lisp programs can "
"invoke other programs in processes of their own.  These are called @dfn"
"{subprocesses} or @dfn{child processes} of the Emacs process, which is their "
"@dfn{parent process}."
msgstr ""

# type: Plain text
#: lispref/processes.texi:30
msgid ""
"A subprocess of Emacs may be @dfn{synchronous} or @dfn{asynchronous}, "
"depending on how it is created.  When you create a synchronous subprocess, "
"the Lisp program waits for the subprocess to terminate before continuing "
"execution.  When you create an asynchronous subprocess, it can run in "
"parallel with the Lisp program.  This kind of subprocess is represented "
"within Emacs by a Lisp object which is also called a ``process.'' Lisp "
"programs can use this object to communicate with the subprocess or to "
"control it.  For example, you can send signals, obtain status information, "
"receive output from the process, or send input to it."
msgstr ""

# type: defun
#: lispref/processes.texi:31
#, no-wrap
msgid "processp object"
msgstr ""

# type: defun
#: lispref/processes.texi:34
msgid ""
"This function returns @code{t} if @var{object} is a process, @code{nil} "
"otherwise."
msgstr ""

# type: menu
#: lispref/processes.texi:57 lispref/processes.texi:59 lispref/vol1.texi:885
#: lispref/vol2.texi:886
#, no-wrap
msgid "Subprocess Creation"
msgstr ""

# type: menu
#: lispref/processes.texi:57 lispref/vol1.texi:885 lispref/vol2.texi:886
msgid "Functions that start subprocesses."
msgstr ""

# type: section
#: lispref/processes.texi:57 lispref/processes.texi:147
#: lispref/processes.texi:148
#, no-wrap
msgid "Shell Arguments"
msgstr ""

# type: menu
#: lispref/processes.texi:57
msgid "Quoting an argument to pass it to a shell."
msgstr ""

# type: menu
#: lispref/processes.texi:57 lispref/processes.texi:191 lispref/vol1.texi:885
#: lispref/vol2.texi:886
#, no-wrap
msgid "Synchronous Processes"
msgstr ""

# type: menu
#: lispref/processes.texi:57 lispref/vol1.texi:885 lispref/vol2.texi:886
msgid "Details of using synchronous subprocesses."
msgstr ""

# type: menu
#: lispref/processes.texi:57 lispref/processes.texi:440 lispref/vol1.texi:885
#: lispref/vol2.texi:886
#, no-wrap
msgid "Asynchronous Processes"
msgstr ""

# type: menu
#: lispref/processes.texi:57 lispref/vol1.texi:885 lispref/vol2.texi:886
msgid "Starting up an asynchronous subprocess."
msgstr ""

# type: menu
#: lispref/processes.texi:57 lispref/processes.texi:546
#: lispref/processes.texi:547 lispref/vol1.texi:885 lispref/vol2.texi:886
#, no-wrap
msgid "Deleting Processes"
msgstr ""

# type: menu
#: lispref/processes.texi:57 lispref/vol1.texi:885 lispref/vol2.texi:886
msgid "Eliminating an asynchronous subprocess."
msgstr ""

# type: menu
#: lispref/processes.texi:57 lispref/processes.texi:592
#: lispref/processes.texi:593 lispref/vol1.texi:885 lispref/vol2.texi:886
#, no-wrap
msgid "Process Information"
msgstr ""

# type: menu
#: lispref/processes.texi:57 lispref/vol1.texi:885 lispref/vol2.texi:886
msgid "Accessing run-status and other attributes."
msgstr ""

# type: menu
#: lispref/processes.texi:57 lispref/processes.texi:763 lispref/vol1.texi:885
#: lispref/vol2.texi:886
#, no-wrap
msgid "Input to Processes"
msgstr ""

# type: menu
#: lispref/processes.texi:57 lispref/vol1.texi:885 lispref/vol2.texi:886
msgid "Sending input to an asynchronous subprocess."
msgstr ""

# type: menu
#: lispref/processes.texi:57 lispref/processes.texi:851 lispref/vol1.texi:885
#: lispref/vol2.texi:886
#, no-wrap
msgid "Signals to Processes"
msgstr ""

# type: menu
#: lispref/processes.texi:57 lispref/vol1.texi:885 lispref/vol2.texi:886
msgid "Stopping, continuing or interrupting"
msgstr ""

# type: menu
#: lispref/processes.texi:57 lispref/vol1.texi:885 lispref/vol2.texi:886
msgid "an asynchronous subprocess."
msgstr ""

# type: menu
#: lispref/processes.texi:57 lispref/processes.texi:949 lispref/vol1.texi:885
#: lispref/vol2.texi:886
#, no-wrap
msgid "Output from Processes"
msgstr ""

# type: menu
#: lispref/processes.texi:57 lispref/vol1.texi:885 lispref/vol2.texi:886
msgid "Collecting output from an asynchronous subprocess."
msgstr ""

# type: menu
#: lispref/processes.texi:57 lispref/processes.texi:1332 lispref/vol1.texi:885
#: lispref/vol2.texi:886
#, no-wrap
msgid "Sentinels"
msgstr ""

# type: menu
#: lispref/processes.texi:57 lispref/vol1.texi:885 lispref/vol2.texi:886
msgid "Sentinels run when process run-status changes."
msgstr ""

# type: node
#: lispref/processes.texi:57 lispref/processes.texi:1449
#, no-wrap
msgid "Query Before Exit"
msgstr ""

# type: menu
#: lispref/processes.texi:57
msgid "Whether to query if exiting will kill a process."
msgstr ""

# type: section
#: lispref/processes.texi:57 lispref/processes.texi:1497
#: lispref/processes.texi:1498
#, no-wrap
msgid "Transaction Queues"
msgstr ""

# type: menu
#: lispref/processes.texi:57
msgid "Transaction-based communication with subprocesses."
msgstr ""

# type: menu
#: lispref/processes.texi:57 lispref/processes.texi:1542 lispref/vol1.texi:885
#: lispref/vol2.texi:886
#, no-wrap
msgid "Network"
msgstr ""

# type: menu
#: lispref/processes.texi:57 lispref/vol1.texi:885 lispref/vol2.texi:886
msgid "Opening network connections."
msgstr ""

# type: section
#: lispref/processes.texi:57 lispref/processes.texi:1648
#: lispref/processes.texi:1649
#, no-wrap
msgid "Network Servers"
msgstr ""

# type: menu
#: lispref/processes.texi:57
msgid "Network servers let Emacs accept net connections."
msgstr ""

# type: section
#: lispref/processes.texi:57 lispref/processes.texi:1697
#: lispref/processes.texi:1698
#, no-wrap
msgid "Datagrams"
msgstr ""

# type: menu
#: lispref/processes.texi:57
msgid "UDP network connections."
msgstr ""

# type: node
#: lispref/processes.texi:57 lispref/processes.texi:1726
#, no-wrap
msgid "Low-Level Network"
msgstr ""

# type: menu
#: lispref/processes.texi:57
msgid "Lower-level but more general function"
msgstr ""

# type: menu
#: lispref/processes.texi:57
msgid "to create connections and servers."
msgstr ""

# type: node
#: lispref/processes.texi:57 lispref/processes.texi:2026
#, no-wrap
msgid "Misc Network"
msgstr ""

# type: menu
#: lispref/processes.texi:57
msgid "Additional relevant functions for network connections."
msgstr ""

# type: node
#: lispref/processes.texi:57 lispref/processes.texi:2079
#, no-wrap
msgid "Byte Packing"
msgstr ""

# type: menu
#: lispref/processes.texi:57
msgid "Using bindat to pack and unpack binary data."
msgstr ""

# type: section
#: lispref/processes.texi:60
#, no-wrap
msgid "Functions that Create Subprocesses"
msgstr ""

# type: Plain text
#: lispref/processes.texi:68
msgid ""
"There are three functions that create a new subprocess in which to run a "
"program.  One of them, @code{start-process}, creates an asynchronous process "
"and returns a process object (@pxref{Asynchronous Processes}).  The other "
"two, @code{call-process} and @code{call-process-region}, create a "
"synchronous process and do not return a process object (@pxref{Synchronous "
"Processes})."
msgstr ""

# type: Plain text
#: lispref/processes.texi:72
msgid ""
"Synchronous and asynchronous processes are explained in the following "
"sections.  Since the three functions are all called in a similar fashion, "
"their common arguments are described here."
msgstr ""

# type: cindex
#: lispref/processes.texi:73
#, no-wrap
msgid "execute program"
msgstr ""

# type: cindex
#: lispref/processes.texi:74
#, no-wrap
msgid "@code{PATH} environment variable"
msgstr ""

# type: cindex
#: lispref/processes.texi:75
#, no-wrap
msgid "@code{HOME} environment variable"
msgstr ""

# type: Plain text
#: lispref/processes.texi:88
msgid ""
"In all cases, the function's @var{program} argument specifies the program to "
"be run.  An error is signaled if the file is not found or cannot be "
"executed.  If the file name is relative, the variable @code{exec-path} "
"contains a list of directories to search.  Emacs initializes @code{exec-"
"path} when it starts up, based on the value of the environment variable @code"
"{PATH}.  The standard file name constructs, @samp{~}, @samp{.}, and @samp"
"{..}, are interpreted as usual in @code{exec-path}, but environment variable "
"substitutions (@samp{$HOME}, etc.) are not recognized; use @code{substitute-"
"in-file-name} to perform them (@pxref{File Name Expansion}).  @code{nil} in "
"this list refers to @code{default-directory}."
msgstr ""

# type: Plain text
#: lispref/processes.texi:91
msgid "Executing a program can also try adding suffixes to the specified name:"
msgstr ""

# type: defvar
#: lispref/processes.texi:92
#, no-wrap
msgid "exec-suffixes"
msgstr ""

# type: defvar
#: lispref/processes.texi:97
msgid ""
"This variable is a list of suffixes (strings) to try adding to the specified "
"program file name.  The list should include @code{\"\"} if you want the name "
"to be tried exactly as specified.  The default value is system-dependent."
msgstr ""

# type: Plain text
#: lispref/processes.texi:102
msgid ""
"@strong{Please note:} The argument @var{program} contains only the name of "
"the program; it may not contain any command-line arguments.  You must use "
"@var{args} to provide those."
msgstr ""

# type: Plain text
#: lispref/processes.texi:111
msgid ""
"Each of the subprocess-creating functions has a @var{buffer-or-name} "
"argument which specifies where the standard output from the program will "
"go.  It should be a buffer or a buffer name; if it is a buffer name, that "
"will create the buffer if it does not already exist.  It can also be @code"
"{nil}, which says to discard the output unless a filter function handles "
"it.  (@xref{Filter Functions}, and @ref{Read and Print}.)  Normally, you "
"should avoid having multiple processes send output to the same buffer "
"because their output would be intermixed randomly."
msgstr ""

# type: cindex
#: lispref/processes.texi:112
#, no-wrap
msgid "program arguments"
msgstr ""

# type: Plain text
#: lispref/processes.texi:118
msgid ""
"All three of the subprocess-creating functions have a @code{&rest} argument, "
"@var{args}.  The @var{args} must all be strings, and they are supplied to "
"@var{program} as separate command line arguments.  Wildcard characters and "
"other shell constructs have no special meanings in these strings, since the "
"strings are passed directly to the specified program."
msgstr ""

# type: Plain text
#: lispref/processes.texi:121
msgid ""
"The subprocess gets its current directory from the value of @code{default-"
"directory} (@pxref{File Name Expansion})."
msgstr ""

# type: cindex
#: lispref/processes.texi:122
#, no-wrap
msgid "environment variables, subprocesses"
msgstr ""

# type: Plain text
#: lispref/processes.texi:126
msgid ""
"The subprocess inherits its environment from Emacs, but you can specify "
"overrides for it with @code{process-environment}.  @xref{System Environment}."
msgstr ""

# type: defvar
#: lispref/processes.texi:127
#, no-wrap
msgid "exec-directory"
msgstr ""

# type: pindex
#: lispref/processes.texi:128
#, no-wrap
msgid "movemail"
msgstr ""

# type: defvar
#: lispref/processes.texi:133
msgid ""
"The value of this variable is a string, the name of a directory that "
"contains programs that come with GNU Emacs, programs intended for Emacs to "
"invoke.  The program @code{movemail} is an example of such a program; Rmail "
"uses it to fetch new mail from an inbox."
msgstr ""

# type: defopt
#: lispref/processes.texi:135
#, no-wrap
msgid "exec-path"
msgstr "exec-path"

# type: defopt
#: lispref/processes.texi:140
msgid ""
"The value of this variable is a list of directories to search for programs "
"to run in subprocesses.  Each element is either the name of a directory (i."
"e., a string), or @code{nil}, which stands for the default directory (which "
"is the value of @code{default-directory})."
msgstr ""

# type: cindex
#: lispref/processes.texi:140
#, no-wrap
msgid "program directories"
msgstr ""

# type: defopt
#: lispref/processes.texi:145
msgid ""
"The value of @code{exec-path} is used by @code{call-process} and @code{start-"
"process} when the @var{program} argument is not an absolute file name."
msgstr ""

# type: cindex
#: lispref/processes.texi:149
#, no-wrap
msgid "arguments for shell commands"
msgstr ""

# type: cindex
#: lispref/processes.texi:150
#, no-wrap
msgid "shell command arguments"
msgstr ""

# type: Plain text
#: lispref/processes.texi:158
msgid ""
"Lisp programs sometimes need to run a shell and give it a command that "
"contains file names that were specified by the user.  These programs ought "
"to be able to support any valid file name.  But the shell gives special "
"treatment to certain characters, and if these characters occur in the file "
"name, they will confuse the shell.  To handle these characters, use the "
"function @code{shell-quote-argument}:"
msgstr ""

# type: defun
#: lispref/processes.texi:159
#, no-wrap
msgid "shell-quote-argument argument"
msgstr ""

# type: defun
#: lispref/processes.texi:164
msgid ""
"This function returns a string which represents, in shell syntax, an "
"argument whose actual contents are @var{argument}.  It should work reliably "
"to concatenate the return value into a shell command and then pass it to a "
"shell for execution."
msgstr ""

# type: defun
#: lispref/processes.texi:169
msgid ""
"Precisely what this function does depends on your operating system.  The "
"function is designed to work with the syntax of your system's standard "
"shell; if you use an unusual shell, you will need to redefine this function."
msgstr ""

# type: example
#: lispref/processes.texi:174
#, no-wrap
msgid ""
";; @r{This example shows the behavior on GNU and Unix systems.}\n"
"(shell-quote-argument \"foo > bar\")\n"
"     @result{} \"foo\\\\ \\\\>\\\\ bar\"\n"
"\n"
msgstr ""

# type: example
#: lispref/processes.texi:178
#, no-wrap
msgid ""
";; @r{This example shows the behavior on MS-DOS and MS-Windows.}\n"
"(shell-quote-argument \"foo > bar\")\n"
"     @result{} \"\\\"foo > bar\\\"\"\n"
msgstr ""

# type: defun
#: lispref/processes.texi:182
msgid ""
"Here's an example of using @code{shell-quote-argument} to construct a shell "
"command:"
msgstr ""

# type: example
#: lispref/processes.texi:188
#, no-wrap
msgid ""
"(concat \"diff -c \"\n"
"        (shell-quote-argument oldfile)\n"
"        \" \"\n"
"        (shell-quote-argument newfile))\n"
msgstr ""

# type: section
#: lispref/processes.texi:192
#, no-wrap
msgid "Creating a Synchronous Process"
msgstr ""

# type: cindex
#: lispref/processes.texi:193
#, no-wrap
msgid "synchronous subprocess"
msgstr ""

# type: Plain text
#: lispref/processes.texi:202
msgid ""
"After a @dfn{synchronous process} is created, Emacs waits for the process to "
"terminate before continuing.  Starting Dired on GNU or Unix@footnote{On "
"other systems, Emacs uses a Lisp emulation of @code{ls}; see @ref{Contents "
"of Directories}.} is an example of this: it runs @code{ls} in a synchronous "
"process, then modifies the output slightly.  Because the process is "
"synchronous, the entire directory listing arrives in the buffer before Emacs "
"tries to do anything with it."
msgstr ""

# type: Plain text
#: lispref/processes.texi:210
msgid ""
"While Emacs waits for the synchronous subprocess to terminate, the user can "
"quit by typing @kbd{C-g}.  The first @kbd{C-g} tries to kill the subprocess "
"with a @code{SIGINT} signal; but it waits until the subprocess actually "
"terminates before quitting.  If during that time the user types another @kbd"
"{C-g}, that kills the subprocess instantly with @code{SIGKILL} and quits "
"immediately (except on MS-DOS, where killing other processes doesn't work).  "
"@xref{Quitting}."
msgstr ""

# type: Plain text
#: lispref/processes.texi:213
msgid ""
"The synchronous subprocess functions return an indication of how the process "
"terminated."
msgstr ""

# type: Plain text
#: lispref/processes.texi:218
msgid ""
"The output from a synchronous subprocess is generally decoded using a coding "
"system, much like text read from a file.  The input sent to a subprocess by "
"@code{call-process-region} is encoded using a coding system, much like text "
"written into a file.  @xref{Coding Systems}."
msgstr ""

# type: defun
#: lispref/processes.texi:219
#, no-wrap
msgid "call-process program &optional infile destination display &rest args"
msgstr ""

# type: defun
#: lispref/processes.texi:222
msgid ""
"This function calls @var{program} in a separate process and waits for it to "
"finish."
msgstr ""

# type: defun
#: lispref/processes.texi:227
msgid ""
"The standard input for the process comes from file @var{infile} if @var"
"{infile} is not @code{nil}, and from the null device otherwise.  The "
"argument @var{destination} says where to put the process output.  Here are "
"the possibilities:"
msgstr ""

# type: item
#: lispref/processes.texi:229
#, no-wrap
msgid "a buffer"
msgstr ""

# type: table
#: lispref/processes.texi:232
msgid ""
"Insert the output in that buffer, before point.  This includes both the "
"standard output stream and the standard error stream of the process."
msgstr ""

# type: table
#: lispref/processes.texi:235
msgid "Insert the output in a buffer with that name, before point."
msgstr ""

# type: table
#: lispref/processes.texi:238
msgid "Insert the output in the current buffer, before point."
msgstr ""

# type: table
#: lispref/processes.texi:241
msgid "Discard the output."
msgstr ""

# type: table
#: lispref/processes.texi:245
msgid ""
"Discard the output, and return @code{nil} immediately without waiting for "
"the subprocess to finish."
msgstr ""

# type: table
#: lispref/processes.texi:250
msgid ""
"In this case, the process is not truly synchronous, since it can run in "
"parallel with Emacs; but you can think of it as synchronous in that Emacs is "
"essentially finished with the subprocess as soon as this function returns."
msgstr ""

# type: table
#: lispref/processes.texi:253
msgid ""
"MS-DOS doesn't support asynchronous subprocesses, so this option doesn't "
"work there."
msgstr ""

# type: code{#1}
#: lispref/processes.texi:254
#, no-wrap
msgid "(@var{real-destination} @var{error-destination})"
msgstr ""

# type: table
#: lispref/processes.texi:261
msgid ""
"Keep the standard output stream separate from the standard error stream; "
"deal with the ordinary output as specified by @var{real-destination}, and "
"dispose of the error output according to @var{error-destination}.  If @var"
"{error-destination} is @code{nil}, that means to discard the error output, "
"@code{t} means mix it with the ordinary output, and a string specifies a "
"file name to redirect error output into."
msgstr ""

# type: table
#: lispref/processes.texi:266
msgid ""
"You can't directly specify a buffer to put the error output in; that is too "
"difficult to implement.  But you can achieve this result by sending the "
"error output to a temporary file and then inserting the file into a buffer."
msgstr ""

# type: defun
#: lispref/processes.texi:274
msgid ""
"If @var{display} is non-@code{nil}, then @code{call-process} redisplays the "
"buffer as output is inserted.  (However, if the coding system chosen for "
"decoding output is @code{undecided}, meaning deduce the encoding from the "
"actual data, then redisplay sometimes cannot continue once non-@acronym"
"{ASCII} characters are encountered.  There are fundamental reasons why it is "
"hard to fix this; see @ref{Output from Processes}.)"
msgstr ""

# type: defun
#: lispref/processes.texi:278
msgid ""
"Otherwise the function @code{call-process} does no redisplay, and the "
"results become visible on the screen only when Emacs redisplays that buffer "
"in the normal course of events."
msgstr ""

# type: defun
#: lispref/processes.texi:281 lispref/processes.texi:382
#: lispref/processes.texi:466
msgid ""
"The remaining arguments, @var{args}, are strings that specify command line "
"arguments for the program."
msgstr ""

# type: defun
#: lispref/processes.texi:287
msgid ""
"The value returned by @code{call-process} (unless you told it not to wait) "
"indicates the reason for process termination.  A number gives the exit "
"status of the subprocess; 0 means success, and any other value means "
"failure.  If the process terminated with a signal, @code{call-process} "
"returns a string describing the signal."
msgstr ""

# type: defun
#: lispref/processes.texi:289
msgid "In the examples below, the buffer @samp{foo} is current."
msgstr ""

# type: group
#: lispref/processes.texi:294
#, no-wrap
msgid ""
"(call-process \"pwd\" nil t)\n"
"     @result{} 0\n"
"\n"
msgstr ""

# type: group
#: lispref/processes.texi:298
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"/usr/user/lewis/manual\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: group
#: lispref/processes.texi:303
#, no-wrap
msgid ""
"(call-process \"grep\" nil \"bar\" nil \"lewis\" \"/etc/passwd\")\n"
"     @result{} 0\n"
"\n"
msgstr ""

# type: group
#: lispref/processes.texi:306
#, no-wrap
msgid ""
"---------- Buffer: bar ----------\n"
"lewis:5LTsHm66CSWKg:398:21:Bil Lewis:/user/lewis:/bin/csh\n"
"\n"
msgstr ""

# type: group
#: lispref/processes.texi:308
#, no-wrap
msgid "---------- Buffer: bar ----------\n"
msgstr ""

# type: defun
#: lispref/processes.texi:313
msgid ""
"Here is a good example of the use of @code{call-process}, which used to be "
"found in the definition of @code{insert-directory}:"
msgstr ""

# type: group
#: lispref/processes.texi:320
#, no-wrap
msgid ""
"(call-process insert-directory-program nil t nil @var{switches}\n"
"              (if full-directory-p\n"
"                  (concat (file-name-as-directory file) \".\")\n"
"                file))\n"
msgstr ""

# type: defun
#: lispref/processes.texi:324
#, no-wrap
msgid "process-file program &optional infile buffer display &rest args"
msgstr ""

# type: defun
#: lispref/processes.texi:329
msgid ""
"This function processes files synchronously in a separate process.  It is "
"similar to @code{call-process} but may invoke a file handler based on the "
"value of the variable @code{default-directory}.  The current working "
"directory of the subprocess is @code{default-directory}."
msgstr ""

# type: defun
#: lispref/processes.texi:332
msgid ""
"The arguments are handled in almost the same way as for @code{call-process}, "
"with the following differences:"
msgstr ""

# type: defun
#: lispref/processes.texi:339
msgid ""
"Some file handlers may not support all combinations and forms of the "
"arguments @var{infile}, @var{buffer}, and @var{display}.  For example, some "
"file handlers might behave as if @var{display} were @code{nil}, regardless "
"of the value actually passed.  As another example, some file handlers might "
"not support separating standard output and error output by way of the @var"
"{buffer} argument."
msgstr ""

# type: defun
#: lispref/processes.texi:344
msgid ""
"If a file handler is invoked, it determines the program to run based on the "
"first argument @var{program}.  For instance, consider that a handler for "
"remote files is invoked.  Then the path that is used for searching the "
"program might be different than @code{exec-path}."
msgstr ""

# type: defun
#: lispref/processes.texi:351
msgid ""
"The second argument @var{infile} may invoke a file handler.  The file "
"handler could be different from the handler chosen for the @code{process-"
"file} function itself.  (For example, @code{default-directory} could be on a "
"remote host, whereas @var{infile} is on another remote host.  Or @code"
"{default-directory} could be non-special, whereas @var{infile} is on a "
"remote host.)"
msgstr ""

# type: defun
#: lispref/processes.texi:355
msgid ""
"If @var{buffer} is a list of the form @code{(@var{real-destination} @var"
"{error-destination})}, and @var{error-destination} names a file, then the "
"same remarks as for @var{infile} apply."
msgstr ""

# type: defun
#: lispref/processes.texi:363
msgid ""
"The remaining arguments (@var{args}) will be passed to the process "
"verbatim.  Emacs is not involved in processing file names that are present "
"in @var{args}.  To avoid confusion, it may be best to avoid absolute file "
"names in @var{args}, but rather to specify all file names as relative to "
"@code{default-directory}.  The function @code{file-relative-name} is useful "
"for constructing such relative file names."
msgstr ""

# type: defun
#: lispref/processes.texi:365
#, no-wrap
msgid "call-process-region start end program &optional delete destination display &rest args"
msgstr ""

# type: defun
#: lispref/processes.texi:371
msgid ""
"This function sends the text from @var{start} to @var{end} as standard input "
"to a process running @var{program}.  It deletes the text sent if @var"
"{delete} is non-@code{nil}; this is useful when @var{destination} is @code"
"{t}, to insert the output in the current buffer in place of the input."
msgstr ""

# type: defun
#: lispref/processes.texi:379
msgid ""
"The arguments @var{destination} and @var{display} control what to do with "
"the output from the subprocess, and whether to update the display as it "
"comes in.  For details, see the description of @code{call-process}, above.  "
"If @var{destination} is the integer 0, @code{call-process-region} discards "
"the output and returns @code{nil} immediately, without waiting for the "
"subprocess to finish (this only works if asynchronous subprocesses are "
"supported)."
msgstr ""

# type: defun
#: lispref/processes.texi:387
msgid ""
"The return value of @code{call-process-region} is just like that of @code"
"{call-process}: @code{nil} if you told it to return without waiting; "
"otherwise, a number or string which indicates how the subprocess terminated."
msgstr ""

# type: defun
#: lispref/processes.texi:394
msgid ""
"In the following example, we use @code{call-process-region} to run the @code"
"{cat} utility, with standard input being the first five characters in buffer "
"@samp{foo} (the word @samp{input}).  @code{cat} copies its standard input "
"into its standard output.  Since the argument @var{destination} is @code{t}, "
"this output is inserted in the current buffer."
msgstr ""

# type: group
#: lispref/processes.texi:400
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"input@point{}\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: group
#: lispref/processes.texi:405
#, no-wrap
msgid ""
"(call-process-region 1 6 \"cat\" nil t)\n"
"     @result{} 0\n"
"\n"
msgstr ""

# type: group
#: lispref/processes.texi:409
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"inputinput@point{}\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: defun
#: lispref/processes.texi:414
msgid ""
"The @code{shell-command-on-region} command uses @code{call-process-region} "
"like this:"
msgstr ""

# type: group
#: lispref/processes.texi:424
#, no-wrap
msgid ""
"(call-process-region\n"
" start end\n"
" shell-file-name      ; @r{Name of program.}\n"
" nil                  ; @r{Do not delete region.}\n"
" buffer               ; @r{Send output to @code{buffer}.}\n"
" nil                  ; @r{No redisplay during output.}\n"
" \"-c\" command)        ; @r{Arguments for the shell.}\n"
msgstr ""

# type: defun
#: lispref/processes.texi:428
#, no-wrap
msgid "call-process-shell-command command &optional infile destination display &rest args"
msgstr ""

# type: defun
#: lispref/processes.texi:433
msgid ""
"This function executes the shell command @var{command} synchronously in a "
"separate process.  The final arguments @var{args} are additional arguments "
"to add at the end of @var{command}.  The other arguments are handled as in "
"@code{call-process}."
msgstr ""

# type: defun
#: lispref/processes.texi:435
#, no-wrap
msgid "shell-command-to-string command"
msgstr ""

# type: defun
#: lispref/processes.texi:438
msgid ""
"This function executes @var{command} (a string) as a shell command, then "
"returns the command's output as a string."
msgstr ""

# type: section
#: lispref/processes.texi:441
#, no-wrap
msgid "Creating an Asynchronous Process"
msgstr ""

# type: cindex
#: lispref/processes.texi:442
#, no-wrap
msgid "asynchronous subprocess"
msgstr ""

# type: Plain text
#: lispref/processes.texi:452
msgid ""
"After an @dfn{asynchronous process} is created, Emacs and the subprocess "
"both continue running immediately.  The process thereafter runs in parallel "
"with Emacs, and the two can communicate with each other using the functions "
"described in the following sections.  However, communication is only "
"partially asynchronous: Emacs sends data to the process only when certain "
"functions are called, and Emacs accepts data from the process only when "
"Emacs is waiting for input or for a time delay."
msgstr ""

# type: Plain text
#: lispref/processes.texi:454
msgid "Here we describe how to create an asynchronous process."
msgstr ""

# type: defun
#: lispref/processes.texi:455
#, no-wrap
msgid "start-process name buffer-or-name program &rest args"
msgstr ""

# type: defun
#: lispref/processes.texi:463
msgid ""
"This function creates a new asynchronous subprocess and starts the program "
"@var{program} running in it.  It returns a process object that stands for "
"the new subprocess in Lisp.  The argument @var{name} specifies the name for "
"the process object; if a process with this name already exists, then @var"
"{name} is modified (by appending @samp{<1>}, etc.) to be unique.  The buffer "
"@var{buffer-or-name} is the buffer to associate with the process."
msgstr ""

# type: defun
#: lispref/processes.texi:474
msgid ""
"In the example below, the first process is started and runs (rather, sleeps) "
"for 100 seconds.  Meanwhile, the second process is started, and given the "
"name @samp{my-process<1>} for the sake of uniqueness.  It inserts the "
"directory listing at the end of the buffer @samp{foo}, before the first "
"process finishes.  Then it finishes, and a message to that effect is "
"inserted in the buffer.  Much later, the first process finishes, and another "
"message is inserted in the buffer for it."
msgstr ""

# type: group
#: lispref/processes.texi:479
#, no-wrap
msgid ""
"(start-process \"my-process\" \"foo\" \"sleep\" \"100\")\n"
"     @result{} #<process my-process>\n"
msgstr ""

# type: group
#: lispref/processes.texi:484
#, no-wrap
msgid ""
"(start-process \"my-process\" \"foo\" \"ls\" \"-l\" \"/user/lewis/bin\")\n"
"     @result{} #<process my-process<1>>\n"
"\n"
msgstr ""

# type: group
#: lispref/processes.texi:489
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"total 2\n"
"lrwxrwxrwx  1 lewis     14 Jul 22 10:12 gnuemacs --> /emacs\n"
"-rwxrwxrwx  1 lewis     19 Jul 30 21:02 lemon\n"
"\n"
msgstr ""

# type: group
#: lispref/processes.texi:491
#, no-wrap
msgid ""
"Process my-process<1> finished\n"
"\n"
msgstr ""

# type: group
#: lispref/processes.texi:494
#, no-wrap
msgid ""
"Process my-process finished\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: defun
#: lispref/processes.texi:498
#, no-wrap
msgid "start-process-shell-command name buffer-or-name command &rest command-args"
msgstr ""

# type: defun
#: lispref/processes.texi:504
msgid ""
"This function is like @code{start-process} except that it uses a shell to "
"execute the specified command.  The argument @var{command} is a shell "
"command name, and @var{command-args} are the arguments for the shell "
"command.  The variable @code{shell-file-name} specifies which shell to use."
msgstr ""

# type: defun
#: lispref/processes.texi:512
msgid ""
"The point of running a program through the shell, rather than directly with "
"@code{start-process}, is so that you can employ shell features such as "
"wildcards in the arguments.  It follows that if you include an arbitrary "
"user-specified arguments in the command, you should quote it with @code"
"{shell-quote-argument} first, so that any special shell characters do @emph"
"{not} have their special shell meanings.  @xref{Shell Arguments}."
msgstr ""

# type: defvar
#: lispref/processes.texi:514
#, no-wrap
msgid "process-connection-type"
msgstr ""

# type: cindex
#: lispref/processes.texi:515
#, no-wrap
msgid "pipes"
msgstr ""

# type: cindex
#: lispref/processes.texi:516
#, no-wrap
msgid "@acronym{PTY}s"
msgstr ""

# type: defvar
#: lispref/processes.texi:520
msgid ""
"This variable controls the type of device used to communicate with "
"asynchronous subprocesses.  If it is non-@code{nil}, then @acronym{PTY}s are "
"used, when available.  Otherwise, pipes are used."
msgstr ""

# type: defvar
#: lispref/processes.texi:528
msgid ""
"@acronym{PTY}s are usually preferable for processes visible to the user, as "
"in Shell mode, because they allow job control (@kbd{C-c}, @kbd{C-z}, etc.) "
"to work between the process and its children, whereas pipes do not.  For "
"subprocesses used for internal purposes by programs, it is often better to "
"use a pipe, because they are more efficient.  In addition, the total number "
"of @acronym{PTY}s is limited on many systems and it is good not to waste "
"them."
msgstr ""

# type: defvar
#: lispref/processes.texi:533
msgid ""
"The value of @code{process-connection-type} takes effect when @code{start-"
"process} is called.  So you can specify how to communicate with one "
"subprocess by binding the variable around the call to @code{start-process}."
msgstr ""

# type: group
#: lispref/processes.texi:538
#, no-wrap
msgid ""
"(let ((process-connection-type nil))  ; @r{Use a pipe.}\n"
"  (start-process @dots{}))\n"
msgstr ""

# type: defvar
#: lispref/processes.texi:544
msgid ""
"To determine whether a given subprocess actually got a pipe or a @acronym"
"{PTY}, use the function @code{process-tty-name} (@pxref{Process "
"Information})."
msgstr ""

# type: cindex
#: lispref/processes.texi:548
#, no-wrap
msgid "deleting processes"
msgstr ""

# type: Plain text
#: lispref/processes.texi:557
msgid ""
"@dfn{Deleting a process} disconnects Emacs immediately from the subprocess.  "
"Processes are deleted automatically after they terminate, but not "
"necessarily right away.  You can delete a process explicitly at any time.  "
"If you delete a terminated process explicitly before it is deleted "
"automatically, no harm results.  Deleting a running process sends a signal "
"to terminate it (and its child processes if any), and calls the process "
"sentinel if it has one.  @xref{Sentinels}."
msgstr ""

# type: Plain text
#: lispref/processes.texi:564
msgid ""
"When a process is deleted, the process object itself continues to exist as "
"long as other Lisp objects point to it.  All the Lisp primitives that work "
"on process objects accept deleted processes, but those that do I/O or send "
"signals will report an error.  The process mark continues to point to the "
"same place as before, usually into a buffer where output from the process "
"was being inserted."
msgstr ""

# type: defopt
#: lispref/processes.texi:565
#, no-wrap
msgid "delete-exited-processes"
msgstr "delete-exited-processes"

# type: defopt
#: lispref/processes.texi:571
msgid ""
"This variable controls automatic deletion of processes that have terminated "
"(due to calling @code{exit} or to a signal).  If it is @code{nil}, then they "
"continue to exist until the user runs @code{list-processes}.  Otherwise, "
"they are deleted immediately after they exit."
msgstr ""

# type: defun
#: lispref/processes.texi:573
#, no-wrap
msgid "delete-process process"
msgstr ""

# type: defun
#: lispref/processes.texi:583
msgid ""
"This function deletes a process, killing it with a @code{SIGKILL} signal.  "
"The argument may be a process, the name of a process, a buffer, or the name "
"of a buffer.  (A buffer or buffer-name stands for the process that @code{get-"
"buffer-process} returns.)  Calling @code{delete-process} on a running "
"process terminates it, updates the process status, and runs the sentinel (if "
"any) immediately.  If the process has already terminated, calling @code"
"{delete-process} has no effect on its status, or on the running of its "
"sentinel (which will happen sooner or later)."
msgstr ""

# type: group
#: lispref/processes.texi:588
#, no-wrap
msgid ""
"(delete-process \"*shell*\")\n"
"     @result{} nil\n"
msgstr ""

# type: Plain text
#: lispref/processes.texi:597
msgid ""
"Several functions return information about processes.  @code{list-processes} "
"is provided for interactive use."
msgstr ""

# type: deffn
#: lispref/processes.texi:598
#, no-wrap
msgid "Command list-processes &optional query-only"
msgstr ""

# type: deffn
#: lispref/processes.texi:602
msgid ""
"This command displays a listing of all living processes.  In addition, it "
"finally deletes any process whose status was @samp{Exited} or @samp"
"{Signaled}.  It returns @code{nil}."
msgstr ""

# type: deffn
#: lispref/processes.texi:605
msgid ""
"If @var{query-only} is non-@code{nil} then it lists only processes whose "
"query flag is non-@code{nil}.  @xref{Query Before Exit}."
msgstr ""

# type: defun
#: lispref/processes.texi:607
#, no-wrap
msgid "process-list"
msgstr ""

# type: defun
#: lispref/processes.texi:609
msgid ""
"This function returns a list of all processes that have not been deleted."
msgstr ""

# type: group
#: lispref/processes.texi:614
#, no-wrap
msgid ""
"(process-list)\n"
"     @result{} (#<process display-time> #<process shell>)\n"
msgstr ""

# type: defun
#: lispref/processes.texi:618
#, no-wrap
msgid "get-process name"
msgstr ""

# type: defun
#: lispref/processes.texi:621
msgid ""
"This function returns the process named @var{name}, or @code{nil} if there "
"is none.  An error is signaled if @var{name} is not a string."
msgstr ""

# type: group
#: lispref/processes.texi:626
#, no-wrap
msgid ""
"(get-process \"shell\")\n"
"     @result{} #<process shell>\n"
msgstr ""

# type: defun
#: lispref/processes.texi:630
#, no-wrap
msgid "process-command process"
msgstr ""

# type: defun
#: lispref/processes.texi:635
msgid ""
"This function returns the command that was executed to start @var{process}.  "
"This is a list of strings, the first string being the program executed and "
"the rest of the strings being the arguments that were given to the program."
msgstr ""

# type: group
#: lispref/processes.texi:640
#, no-wrap
msgid ""
"(process-command (get-process \"shell\"))\n"
"     @result{} (\"/bin/csh\" \"-i\")\n"
msgstr ""

# type: defun
#: lispref/processes.texi:644
#, no-wrap
msgid "process-id process"
msgstr ""

# type: defun
#: lispref/processes.texi:650
msgid ""
"This function returns the @acronym{PID} of @var{process}.  This is an "
"integer that distinguishes the process @var{process} from all other "
"processes running on the same computer at the current time.  The @acronym"
"{PID} of a process is chosen by the operating system kernel when the process "
"is started and remains constant as long as the process exists."
msgstr ""

# type: defun
#: lispref/processes.texi:652
#, no-wrap
msgid "process-name process"
msgstr ""

# type: defun
#: lispref/processes.texi:654
msgid "This function returns the name of @var{process}."
msgstr ""

# type: defun
#: lispref/processes.texi:656
#, no-wrap
msgid "process-status process-name"
msgstr ""

# type: defun
#: lispref/processes.texi:660
msgid ""
"This function returns the status of @var{process-name} as a symbol.  The "
"argument @var{process-name} must be a process, a buffer, a process name "
"(string) or a buffer name (string)."
msgstr ""

# type: defun
#: lispref/processes.texi:662
msgid "The possible values for an actual subprocess are:"
msgstr ""

# type: item
#: lispref/processes.texi:664
#, no-wrap
msgid "run"
msgstr ""

# type: table
#: lispref/processes.texi:666
msgid "for a process that is running."
msgstr ""

# type: item
#: lispref/processes.texi:666
#, no-wrap
msgid "stop"
msgstr ""

# type: table
#: lispref/processes.texi:668
msgid "for a process that is stopped but continuable."
msgstr ""

# type: table
#: lispref/processes.texi:670
msgid "for a process that has exited."
msgstr ""

# type: item
#: lispref/processes.texi:670
#, no-wrap
msgid "signal"
msgstr ""

# type: table
#: lispref/processes.texi:672
msgid "for a process that has received a fatal signal."
msgstr ""

# type: item
#: lispref/processes.texi:672
#, no-wrap
msgid "open"
msgstr ""

# type: table
#: lispref/processes.texi:674
msgid "for a network connection that is open."
msgstr ""

# type: item
#: lispref/processes.texi:674
#, no-wrap
msgid "closed"
msgstr ""

# type: table
#: lispref/processes.texi:678
msgid ""
"for a network connection that is closed.  Once a connection is closed, you "
"cannot reopen it, though you might be able to open a new connection to the "
"same place."
msgstr ""

# type: item
#: lispref/processes.texi:678
#, no-wrap
msgid "connect"
msgstr ""

# type: table
#: lispref/processes.texi:680
msgid "for a non-blocking connection that is waiting to complete."
msgstr ""

# type: item
#: lispref/processes.texi:680
#, no-wrap
msgid "failed"
msgstr ""

# type: table
#: lispref/processes.texi:682
msgid "for a non-blocking connection that has failed to complete."
msgstr ""

# type: item
#: lispref/processes.texi:682
#, no-wrap
msgid "listen"
msgstr ""

# type: table
#: lispref/processes.texi:684
msgid "for a network server that is listening."
msgstr ""

# type: table
#: lispref/processes.texi:686
msgid "if @var{process-name} is not the name of an existing process."
msgstr ""

# type: group
#: lispref/processes.texi:692
#, no-wrap
msgid ""
"(process-status \"shell\")\n"
"     @result{} run\n"
msgstr ""

# type: group
#: lispref/processes.texi:696
#, no-wrap
msgid ""
"(process-status (get-buffer \"*shell*\"))\n"
"     @result{} run\n"
msgstr ""

# type: group
#: lispref/processes.texi:702
#, no-wrap
msgid ""
"x\n"
"     @result{} #<process xx<1>>\n"
"(process-status x)\n"
"     @result{} exit\n"
msgstr ""

# type: defun
#: lispref/processes.texi:708
msgid ""
"For a network connection, @code{process-status} returns one of the symbols "
"@code{open} or @code{closed}.  The latter means that the other side closed "
"the connection, or Emacs did @code{delete-process}."
msgstr ""

# type: defun
#: lispref/processes.texi:710
#, no-wrap
msgid "process-exit-status process"
msgstr ""

# type: defun
#: lispref/processes.texi:715
msgid ""
"This function returns the exit status of @var{process} or the signal number "
"that killed it.  (Use the result of @code{process-status} to determine which "
"of those it is.)  If @var{process} has not yet terminated, the value is 0."
msgstr ""

# type: defun
#: lispref/processes.texi:717
#, no-wrap
msgid "process-tty-name process"
msgstr ""

# type: defun
#: lispref/processes.texi:722
msgid ""
"This function returns the terminal name that @var{process} is using for its "
"communication with Emacs---or @code{nil} if it is using pipes instead of a "
"terminal (see @code{process-connection-type} in @ref{Asynchronous "
"Processes})."
msgstr ""

# type: defun
#: lispref/processes.texi:724
#, no-wrap
msgid "process-coding-system process"
msgstr ""

# type: anchor{#1}
#: lispref/processes.texi:729
msgid "Coding systems for a subprocess"
msgstr ""

# type: defun
#: lispref/processes.texi:729
msgid ""
"This function returns a cons cell describing the coding systems in use for "
"decoding output from @var{process} and for encoding input to @var{process} "
"(@pxref{Coding Systems}).  The value has this form:"
msgstr ""

# type: example
#: lispref/processes.texi:732
#, no-wrap
msgid "(@var{coding-system-for-decoding} . @var{coding-system-for-encoding})\n"
msgstr ""

# type: defun
#: lispref/processes.texi:735
#, no-wrap
msgid "set-process-coding-system process &optional decoding-system encoding-system"
msgstr ""

# type: defun
#: lispref/processes.texi:740
msgid ""
"This function specifies the coding systems to use for subsequent output from "
"and input to @var{process}.  It will use @var{decoding-system} to decode "
"subprocess output, and @var{encoding-system} to encode subprocess input."
msgstr ""

# type: Plain text
#: lispref/processes.texi:744
msgid ""
"Every process also has a property list that you can use to store "
"miscellaneous values associated with the process."
msgstr ""

# type: defun
#: lispref/processes.texi:745
#, no-wrap
msgid "process-get process propname"
msgstr ""

# type: defun
#: lispref/processes.texi:748
msgid ""
"This function returns the value of the @var{propname} property of @var"
"{process}."
msgstr ""

# type: defun
#: lispref/processes.texi:750
#, no-wrap
msgid "process-put process propname value"
msgstr ""

# type: defun
#: lispref/processes.texi:753
msgid ""
"This function sets the value of the @var{propname} property of @var{process} "
"to @var{value}."
msgstr ""

# type: defun
#: lispref/processes.texi:755
#, no-wrap
msgid "process-plist process"
msgstr ""

# type: defun
#: lispref/processes.texi:757
msgid "This function returns the process plist of @var{process}."
msgstr ""

# type: defun
#: lispref/processes.texi:759
#, no-wrap
msgid "set-process-plist process plist"
msgstr ""

# type: defun
#: lispref/processes.texi:761
msgid "This function sets the process plist of @var{process} to @var{plist}."
msgstr ""

# type: section
#: lispref/processes.texi:764
#, no-wrap
msgid "Sending Input to Processes"
msgstr ""

# type: cindex
#: lispref/processes.texi:765
#, no-wrap
msgid "process input"
msgstr ""

# type: Plain text
#: lispref/processes.texi:771
msgid ""
"Asynchronous subprocesses receive input when it is sent to them by Emacs, "
"which is done with the functions in this section.  You must specify the "
"process to send input to, and the input data to send.  The data appears on "
"the ``standard input'' of the subprocess."
msgstr ""

# type: Plain text
#: lispref/processes.texi:776
msgid ""
"Some operating systems have limited space for buffered input in a @acronym"
"{PTY}.  On these systems, Emacs sends an @acronym{EOF} periodically amidst "
"the other characters, to force them through.  For most programs, these "
"@acronym{EOF}s do no harm."
msgstr ""

# type: Plain text
#: lispref/processes.texi:783
msgid ""
"Subprocess input is normally encoded using a coding system before the "
"subprocess receives it, much like text written into a file.  You can use "
"@code{set-process-coding-system} to specify which coding system to use "
"(@pxref{Process Information}).  Otherwise, the coding system comes from @code"
"{coding-system-for-write}, if that is non-@code{nil}; or else from the "
"defaulting mechanism (@pxref{Default Coding Systems})."
msgstr ""

# type: Plain text
#: lispref/processes.texi:790
msgid ""
"Sometimes the system is unable to accept input for that process, because the "
"input buffer is full.  When this happens, the send functions wait a short "
"while, accepting output from subprocesses, and then try again.  This gives "
"the subprocess a chance to read more of its pending input and make space in "
"the buffer.  It also allows filters, sentinels and timers to run---so take "
"account of that in writing your code."
msgstr ""

# type: Plain text
#: lispref/processes.texi:795
msgid ""
"In these functions, the @var{process} argument can be a process or the name "
"of a process, or a buffer or buffer name (which stands for a process via "
"@code{get-buffer-process}).  @code{nil} means the current buffer's process."
msgstr ""

# type: defun
#: lispref/processes.texi:796
#, no-wrap
msgid "process-send-string process string"
msgstr ""

# type: defun
#: lispref/processes.texi:799
msgid ""
"This function sends @var{process} the contents of @var{string} as standard "
"input.  If it is @code{nil}, the current buffer's process is used."
msgstr ""

# type: defun
#: lispref/processes.texi:801
msgid "The function returns @code{nil}."
msgstr ""

# type: group
#: lispref/processes.texi:806
#, no-wrap
msgid ""
"(process-send-string \"shell<1>\" \"ls\\n\")\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/processes.texi:817
#, no-wrap
msgid ""
"---------- Buffer: *shell* ----------\n"
"...\n"
"introduction.texi               syntax-tables.texi~\n"
"introduction.texi~              text.texi\n"
"introduction.txt                text.texi~\n"
"...\n"
"---------- Buffer: *shell* ----------\n"
msgstr ""

# type: defun
#: lispref/processes.texi:821
#, no-wrap
msgid "process-send-region process start end"
msgstr ""

# type: defun
#: lispref/processes.texi:824
msgid ""
"This function sends the text in the region defined by @var{start} and @var"
"{end} as standard input to @var{process}."
msgstr ""

# type: defun
#: lispref/processes.texi:828
msgid ""
"An error is signaled unless both @var{start} and @var{end} are integers or "
"markers that indicate positions in the current buffer.  (It is unimportant "
"which number is larger.)"
msgstr ""

# type: defun
#: lispref/processes.texi:830
#, no-wrap
msgid "process-send-eof &optional process"
msgstr ""

# type: defun
#: lispref/processes.texi:833
msgid ""
"This function makes @var{process} see an end-of-file in its input.  The "
"@acronym{EOF} comes after any text already sent to it."
msgstr ""

# type: defun
#: lispref/processes.texi:835
msgid "The function returns @var{process}."
msgstr ""

# type: group
#: lispref/processes.texi:840
#, no-wrap
msgid ""
"(process-send-eof \"shell\")\n"
"     @result{} \"shell\"\n"
msgstr ""

# type: defun
#: lispref/processes.texi:844
#, no-wrap
msgid "process-running-child-p process"
msgstr ""

# type: defun
#: lispref/processes.texi:849
msgid ""
"This function will tell you whether a subprocess has given control of its "
"terminal to its own child process.  The value is @code{t} if this is true, "
"or if Emacs cannot tell; it is @code{nil} if Emacs can be certain that this "
"is not so."
msgstr ""

# type: section
#: lispref/processes.texi:852
#, no-wrap
msgid "Sending Signals to Processes"
msgstr ""

# type: cindex
#: lispref/processes.texi:853
#, no-wrap
msgid "process signals"
msgstr ""

# type: cindex
#: lispref/processes.texi:854
#, no-wrap
msgid "sending signals"
msgstr ""

# type: cindex
#: lispref/processes.texi:855
#, no-wrap
msgid "signals"
msgstr ""

# type: Plain text
#: lispref/processes.texi:862
msgid ""
"@dfn{Sending a signal} to a subprocess is a way of interrupting its "
"activities.  There are several different signals, each with its own "
"meaning.  The set of signals and their names is defined by the operating "
"system.  For example, the signal @code{SIGINT} means that the user has typed "
"@kbd{C-c}, or that some analogous thing has happened."
msgstr ""

# type: Plain text
#: lispref/processes.texi:867
msgid ""
"Each signal has a standard effect on the subprocess.  Most signals kill the "
"subprocess, but some stop or resume execution instead.  Most signals can "
"optionally be handled by programs; if the program handles the signal, then "
"we can say nothing in general about its effects."
msgstr ""

# type: Plain text
#: lispref/processes.texi:874
msgid ""
"You can send signals explicitly by calling the functions in this section.  "
"Emacs also sends signals automatically at certain times: killing a buffer "
"sends a @code{SIGHUP} signal to all its associated processes; killing Emacs "
"sends a @code{SIGHUP} signal to all remaining processes.  (@code{SIGHUP} is "
"a signal that usually indicates that the user hung up the phone.)"
msgstr ""

# type: Plain text
#: lispref/processes.texi:877
msgid ""
"Each of the signal-sending functions takes two optional arguments: @var"
"{process} and @var{current-group}."
msgstr ""

# type: Plain text
#: lispref/processes.texi:883
msgid ""
"The argument @var{process} must be either a process, a process name, a "
"buffer, a buffer name, or @code{nil}.  A buffer or buffer name stands for a "
"process through @code{get-buffer-process}.  @code{nil} stands for the "
"process associated with the current buffer.  An error is signaled if @var"
"{process} does not identify a process."
msgstr ""

# type: Plain text
#: lispref/processes.texi:892
msgid ""
"The argument @var{current-group} is a flag that makes a difference when you "
"are running a job-control shell as an Emacs subprocess.  If it is non-@code"
"{nil}, then the signal is sent to the current process-group of the terminal "
"that Emacs uses to communicate with the subprocess.  If the process is a job-"
"control shell, this means the shell's current subjob.  If it is @code{nil}, "
"the signal is sent to the process group of the immediate subprocess of "
"Emacs.  If the subprocess is a job-control shell, this is the shell itself."
msgstr ""

# type: Plain text
#: lispref/processes.texi:898
msgid ""
"The flag @var{current-group} has no effect when a pipe is used to "
"communicate with the subprocess, because the operating system does not "
"support the distinction in the case of pipes.  For the same reason, job-"
"control shells won't work when a pipe is used.  See @code{process-connection-"
"type} in @ref{Asynchronous Processes}."
msgstr ""

# type: defun
#: lispref/processes.texi:899
#, no-wrap
msgid "interrupt-process &optional process current-group"
msgstr ""

# type: defun
#: lispref/processes.texi:906
msgid ""
"This function interrupts the process @var{process} by sending the signal "
"@code{SIGINT}.  Outside of Emacs, typing the ``interrupt "
"character'' (normally @kbd{C-c} on some systems, and @code{DEL} on others) "
"sends this signal.  When the argument @var{current-group} is non-@code{nil}, "
"you can think of this function as ``typing @kbd{C-c}'' on the terminal by "
"which Emacs talks to the subprocess."
msgstr ""

# type: defun
#: lispref/processes.texi:908
#, no-wrap
msgid "kill-process &optional process current-group"
msgstr ""

# type: defun
#: lispref/processes.texi:912
msgid ""
"This function kills the process @var{process} by sending the signal @code"
"{SIGKILL}.  This signal kills the subprocess immediately, and cannot be "
"handled by the subprocess."
msgstr ""

# type: defun
#: lispref/processes.texi:914
#, no-wrap
msgid "quit-process &optional process current-group"
msgstr ""

# type: defun
#: lispref/processes.texi:919
msgid ""
"This function sends the signal @code{SIGQUIT} to the process @var{process}.  "
"This signal is the one sent by the ``quit character'' (usually @kbd{C-b} or "
"@kbd{C-\\}) when you are not inside Emacs."
msgstr ""

# type: defun
#: lispref/processes.texi:921
#, no-wrap
msgid "stop-process &optional process current-group"
msgstr ""

# type: defun
#: lispref/processes.texi:925
msgid ""
"This function stops the process @var{process} by sending the signal @code"
"{SIGTSTP}.  Use @code{continue-process} to resume its execution."
msgstr ""

# type: defun
#: lispref/processes.texi:931
msgid ""
"Outside of Emacs, on systems with job control, the ``stop "
"character'' (usually @kbd{C-z}) normally sends this signal.  When @var"
"{current-group} is non-@code{nil}, you can think of this function as "
"``typing @kbd{C-z}'' on the terminal Emacs uses to communicate with the "
"subprocess."
msgstr ""

# type: defun
#: lispref/processes.texi:933
#, no-wrap
msgid "continue-process &optional process current-group"
msgstr ""

# type: defun
#: lispref/processes.texi:937
msgid ""
"This function resumes execution of the process @var{process} by sending it "
"the signal @code{SIGCONT}.  This presumes that @var{process} was stopped "
"previously."
msgstr ""

# type: defun
#: lispref/processes.texi:940
#, no-wrap
msgid "signal-process process signal"
msgstr ""

# type: defun
#: lispref/processes.texi:943
msgid ""
"This function sends a signal to process @var{process}.  The argument @var"
"{signal} specifies which signal to send; it should be an integer."
msgstr ""

# type: defun
#: lispref/processes.texi:947
msgid ""
"The @var{process} argument can be a system process @acronym{ID}; that allows "
"you to send signals to processes that are not children of Emacs."
msgstr ""

# type: menu
#: lispref/processes.texi:950 lispref/vol1.texi:887 lispref/vol2.texi:888
#, no-wrap
msgid "Receiving Output from Processes"
msgstr ""

# type: cindex
#: lispref/processes.texi:951
#, no-wrap
msgid "process output"
msgstr ""

# type: cindex
#: lispref/processes.texi:952
#, no-wrap
msgid "output from processes"
msgstr ""

# type: Plain text
#: lispref/processes.texi:960
msgid ""
"There are two ways to receive the output that a subprocess writes to its "
"standard output stream.  The output can be inserted in a buffer, which is "
"called the associated buffer of the process, or a function called the @dfn"
"{filter function} can be called to act on the output.  If the process has no "
"buffer and no filter function, its output is discarded."
msgstr ""

# type: Plain text
#: lispref/processes.texi:965
msgid ""
"When a subprocess terminates, Emacs reads any pending output, then stops "
"reading output from that subprocess.  Therefore, if the subprocess has "
"children that are still live and still producing output, Emacs won't receive "
"that output."
msgstr ""

# type: Plain text
#: lispref/processes.texi:974
msgid ""
"Output from a subprocess can arrive only while Emacs is waiting: when "
"reading terminal input, in @code{sit-for} and @code{sleep-for} (@pxref"
"{Waiting}), and in @code{accept-process-output} (@pxref{Accepting Output}).  "
"This minimizes the problem of timing errors that usually plague parallel "
"programming.  For example, you can safely create a process and only then "
"specify its buffer or filter function; no output can arrive before you "
"finish, if the code in between does not call any primitive that waits."
msgstr ""

# type: defvar
#: lispref/processes.texi:975
#, no-wrap
msgid "process-adaptive-read-buffering"
msgstr ""

# type: defvar
#: lispref/processes.texi:983
msgid ""
"On some systems, when Emacs reads the output from a subprocess, the output "
"data is read in very small blocks, potentially resulting in very poor "
"performance.  This behavior can be remedied to some extent by setting the "
"variable @var{process-adaptive-read-buffering} to a non-@code{nil} value "
"(the default), as it will automatically delay reading from such processes, "
"thus allowing them to produce more output before Emacs tries to read it."
msgstr ""

# type: Plain text
#: lispref/processes.texi:991
msgid ""
"It is impossible to separate the standard output and standard error streams "
"of the subprocess, because Emacs normally spawns the subprocess inside a "
"pseudo-TTY, and a pseudo-TTY has only one output channel.  If you want to "
"keep the output to those streams separate, you should redirect one of them "
"to a file---for example, by using an appropriate shell command."
msgstr ""

# type: menu
#: lispref/processes.texi:997 lispref/processes.texi:999
#: lispref/processes.texi:1000 lispref/vol1.texi:891 lispref/vol2.texi:892
#, no-wrap
msgid "Process Buffers"
msgstr ""

# type: menu
#: lispref/processes.texi:997 lispref/vol1.texi:891 lispref/vol2.texi:892
msgid "If no filter, output is put in a buffer."
msgstr ""

# type: menu
#: lispref/processes.texi:997 lispref/processes.texi:1077
#: lispref/vol1.texi:891 lispref/vol2.texi:892
#, no-wrap
msgid "Filter Functions"
msgstr ""

# type: menu
#: lispref/processes.texi:997 lispref/vol1.texi:891 lispref/vol2.texi:892
msgid "Filter functions accept output from the process."
msgstr ""

# type: node
#: lispref/processes.texi:997 lispref/processes.texi:1239
#, no-wrap
msgid "Decoding Output"
msgstr ""

# type: menu
#: lispref/processes.texi:997
msgid "Filters can get unibyte or multibyte strings."
msgstr ""

# type: menu
#: lispref/processes.texi:997 lispref/processes.texi:1289
#: lispref/vol1.texi:891 lispref/vol2.texi:892
#, no-wrap
msgid "Accepting Output"
msgstr ""

# type: menu
#: lispref/processes.texi:997 lispref/vol1.texi:891 lispref/vol2.texi:892
msgid "How to wait until process output arrives."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1009
msgid ""
"A process can (and usually does) have an @dfn{associated buffer}, which is "
"an ordinary Emacs buffer that is used for two purposes: storing the output "
"from the process, and deciding when to kill the process.  You can also use "
"the buffer to identify a process to operate on, since in normal practice "
"only one process is associated with any given buffer.  Many applications of "
"processes also use the buffer for editing input to be sent to the process, "
"but this is not built into Emacs Lisp."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1015
msgid ""
"Unless the process has a filter function (@pxref{Filter Functions}), its "
"output is inserted in the associated buffer.  The position to insert the "
"output is determined by the @code{process-mark}, which is then updated to "
"point to the end of the text just inserted.  Usually, but not always, the "
"@code{process-mark} is at the end of the buffer."
msgstr ""

# type: defun
#: lispref/processes.texi:1016
#, no-wrap
msgid "process-buffer process"
msgstr ""

# type: defun
#: lispref/processes.texi:1019
msgid ""
"This function returns the associated buffer of the process @var{process}."
msgstr ""

# type: group
#: lispref/processes.texi:1024
#, no-wrap
msgid ""
"(process-buffer (get-process \"shell\"))\n"
"     @result{} #<buffer *shell*>\n"
msgstr ""

# type: defun
#: lispref/processes.texi:1028
#, no-wrap
msgid "process-mark process"
msgstr ""

# type: defun
#: lispref/processes.texi:1031
msgid ""
"This function returns the process marker for @var{process}, which is the "
"marker that says where to insert output from the process."
msgstr ""

# type: defun
#: lispref/processes.texi:1034
msgid ""
"If @var{process} does not have a buffer, @code{process-mark} returns a "
"marker that points nowhere."
msgstr ""

# type: defun
#: lispref/processes.texi:1038
msgid ""
"Insertion of process output in a buffer uses this marker to decide where to "
"insert, and updates it to point after the inserted text.  That is why "
"successive batches of output are inserted consecutively."
msgstr ""

# type: defun
#: lispref/processes.texi:1043
msgid ""
"Filter functions normally should use this marker in the same fashion as is "
"done by direct insertion of output in the buffer.  A good example of a "
"filter function that uses @code{process-mark} is found at the end of the "
"following section."
msgstr ""

# type: defun
#: lispref/processes.texi:1047
msgid ""
"When the user is expected to enter input in the process buffer for "
"transmission to the process, the process marker separates the new input from "
"previous output."
msgstr ""

# type: defun
#: lispref/processes.texi:1049
#, no-wrap
msgid "set-process-buffer process buffer"
msgstr ""

# type: defun
#: lispref/processes.texi:1053
msgid ""
"This function sets the buffer associated with @var{process} to @var"
"{buffer}.  If @var{buffer} is @code{nil}, the process becomes associated "
"with no buffer."
msgstr ""

# type: defun
#: lispref/processes.texi:1055
#, no-wrap
msgid "get-buffer-process buffer-or-name"
msgstr ""

# type: defun
#: lispref/processes.texi:1062
msgid ""
"This function returns a nondeleted process associated with the buffer "
"specified by @var{buffer-or-name}.  If there are several processes "
"associated with it, this function chooses one (currently, the one most "
"recently created, but don't count on that).  Deletion of a process (see @code"
"{delete-process}) makes it ineligible for this function to return."
msgstr ""

# type: defun
#: lispref/processes.texi:1065
msgid ""
"It is usually a bad idea to have more than one process associated with the "
"same buffer."
msgstr ""

# type: group
#: lispref/processes.texi:1070
#, no-wrap
msgid ""
"(get-buffer-process \"*shell*\")\n"
"     @result{} #<process shell>\n"
msgstr ""

# type: defun
#: lispref/processes.texi:1075
msgid ""
"Killing the process's buffer deletes the process, which kills the subprocess "
"with a @code{SIGHUP} signal (@pxref{Signals to Processes})."
msgstr ""

# type: subsection
#: lispref/processes.texi:1078
#, no-wrap
msgid "Process Filter Functions"
msgstr ""

# type: cindex
#: lispref/processes.texi:1079
#, no-wrap
msgid "filter function"
msgstr ""

# type: cindex
#: lispref/processes.texi:1080
#, no-wrap
msgid "process filter"
msgstr ""

# type: Plain text
#: lispref/processes.texi:1087
msgid ""
"A process @dfn{filter function} is a function that receives the standard "
"output from the associated process.  If a process has a filter, then @emph"
"{all} output from that process is passed to the filter.  The process buffer "
"is used directly for output from the process only when there is no filter."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1093
msgid ""
"The filter function can only be called when Emacs is waiting for something, "
"because process output arrives only at such times.  Emacs waits when reading "
"terminal input, in @code{sit-for} and @code{sleep-for} (@pxref{Waiting}), "
"and in @code{accept-process-output} (@pxref{Accepting Output})."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1097
msgid ""
"A filter function must accept two arguments: the associated process and a "
"string, which is output just received from it.  The function is then free to "
"do whatever it chooses with the output."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1104
msgid ""
"Quitting is normally inhibited within a filter function---otherwise, the "
"effect of typing @kbd{C-g} at command level or to quit a user command would "
"be unpredictable.  If you want to permit quitting inside a filter function, "
"bind @code{inhibit-quit} to @code{nil}.  In most cases, the right way to do "
"this is with the macro @code{with-local-quit}.  @xref{Quitting}."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1111
msgid ""
"If an error happens during execution of a filter function, it is caught "
"automatically, so that it doesn't stop the execution of whatever program was "
"running when the filter function was started.  However, if @code{debug-on-"
"error} is non-@code{nil}, the error-catching is turned off.  This makes it "
"possible to use the Lisp debugger to debug the filter function.  @xref"
"{Debugger}."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1119
msgid ""
"Many filter functions sometimes or always insert the text in the process's "
"buffer, mimicking the actions of Emacs when there is no filter.  Such filter "
"functions need to use @code{set-buffer} in order to be sure to insert in "
"that buffer.  To avoid setting the current buffer semipermanently, these "
"filter functions must save and restore the current buffer.  They should also "
"update the process marker, and in some cases update the value of point.  "
"Here is how to do these things:"
msgstr ""

# type: group
#: lispref/processes.texi:1125
#, no-wrap
msgid ""
"(defun ordinary-insertion-filter (proc string)\n"
"  (with-current-buffer (process-buffer proc)\n"
"    (let ((moving (= (point) (process-mark proc))))\n"
msgstr ""

# type: group
#: lispref/processes.texi:1133
#, no-wrap
msgid ""
"      (save-excursion\n"
"        ;; @r{Insert the text, advancing the process marker.}\n"
"        (goto-char (process-mark proc))\n"
"        (insert string)\n"
"        (set-marker (process-mark proc) (point)))\n"
"      (if moving (goto-char (process-mark proc))))))\n"
msgstr ""

# type: Plain text
#: lispref/processes.texi:1141
msgid ""
"The reason to use @code{with-current-buffer}, rather than using @code{save-"
"excursion} to save and restore the current buffer, is so as to preserve the "
"change in point made by the second call to @code{goto-char}."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1145
msgid ""
"To make the filter force the process buffer to be visible whenever new text "
"arrives, insert the following line just before the @code{with-current-"
"buffer} construct:"
msgstr ""

# type: smallexample
#: lispref/processes.texi:1148
#, no-wrap
msgid "(display-buffer (process-buffer proc))\n"
msgstr ""

# type: Plain text
#: lispref/processes.texi:1153
msgid ""
"To force point to the end of the new output, no matter where it was "
"previously, eliminate the variable @code{moving} and call @code{goto-char} "
"unconditionally."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1158
msgid ""
"In earlier Emacs versions, every filter function that did regular expression "
"searching or matching had to explicitly save and restore the match data.  "
"Now Emacs does this automatically for filter functions; they never need to "
"do it explicitly.  @xref{Match Data}."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1164
msgid ""
"A filter function that writes the output into the buffer of the process "
"should check whether the buffer is still alive.  If it tries to insert into "
"a dead buffer, it will get an error.  The expression @code{(buffer-name "
"(process-buffer @var{process}))} returns @code{nil} if the buffer is dead."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1171
msgid ""
"The output to the function may come in chunks of any size.  A program that "
"produces the same output twice in a row may send it as one batch of 200 "
"characters one time, and five batches of 40 characters the next.  If the "
"filter looks for certain text strings in the subprocess output, make sure to "
"handle the case where one of these strings is split across two or more "
"batches of output."
msgstr ""

# type: defun
#: lispref/processes.texi:1172
#, no-wrap
msgid "set-process-filter process filter"
msgstr ""

# type: defun
#: lispref/processes.texi:1175
msgid ""
"This function gives @var{process} the filter function @var{filter}.  If @var"
"{filter} is @code{nil}, it gives the process no filter."
msgstr ""

# type: defun
#: lispref/processes.texi:1177
#, no-wrap
msgid "process-filter process"
msgstr ""

# type: defun
#: lispref/processes.texi:1180
msgid ""
"This function returns the filter function of @var{process}, or @code{nil} if "
"it has none."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1183
msgid "Here is an example of use of a filter function:"
msgstr ""

# type: group
#: lispref/processes.texi:1189
#, no-wrap
msgid ""
"(defun keep-output (process output)\n"
"   (setq kept (cons output kept)))\n"
"     @result{} keep-output\n"
msgstr ""

# type: group
#: lispref/processes.texi:1193
#, no-wrap
msgid ""
"(setq kept nil)\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/processes.texi:1197
#, no-wrap
msgid ""
"(set-process-filter (get-process \"shell\") 'keep-output)\n"
"     @result{} keep-output\n"
msgstr ""

# type: group
#: lispref/processes.texi:1203
#, no-wrap
msgid ""
"(process-send-string \"shell\" \"ls ~/other\\n\")\n"
"     @result{} nil\n"
"kept\n"
"     @result{} (\"lewis@@slug[8] % \"\n"
msgstr ""

# type: group
#: lispref/processes.texi:1213
#, no-wrap
msgid ""
"\"FINAL-W87-SHORT.MSS    backup.otl              kolstad.mss~\n"
"address.txt             backup.psf              kolstad.psf\n"
"backup.bib~             david.mss               resume-Dec-86.mss~\n"
"backup.err              david.psf               resume-Dec.psf\n"
"backup.mss              dland                   syllabus.mss\n"
"\"\n"
"\"#backups.mss#          backup.mss~             kolstad.mss\n"
"\")\n"
msgstr ""

# type: ignore
#: lispref/processes.texi:1220
#, no-wrap
msgid ""
"Here is another, more realistic example, which demonstrates how to use\n"
"the process mark to do insertion in the same fashion as is done when\n"
"there is no filter function:\n"
"\n"
msgstr ""

# type: group
#: lispref/processes.texi:1229
#, no-wrap
msgid ""
";; @r{Insert input in the buffer specified by @code{my-shell-buffer}}\n"
";;   @r{and make sure that buffer is shown in some window.}\n"
"(defun my-process-filter (proc str)\n"
"  (let ((cur (selected-window))\n"
"        (pop-up-windows t))\n"
"    (pop-to-buffer my-shell-buffer)\n"
msgstr ""

# type: group
#: lispref/processes.texi:1235
#, no-wrap
msgid ""
"    (goto-char (point-max))\n"
"    (insert str)\n"
"    (set-marker (process-mark proc) (point-max))\n"
"    (select-window cur)))\n"
msgstr ""

# type: subsection
#: lispref/processes.texi:1240
#, no-wrap
msgid "Decoding Process Output"
msgstr ""

# type: cindex
#: lispref/processes.texi:1241
#, no-wrap
msgid "decode process output"
msgstr ""

# type: Plain text
#: lispref/processes.texi:1248
msgid ""
"When Emacs writes process output directly into a multibyte buffer, it "
"decodes the output according to the process output coding system.  If the "
"coding system is @code{raw-text} or @code{no-conversion}, Emacs converts the "
"unibyte output to multibyte using @code{string-to-multibyte}, and inserts "
"the resulting multibyte text."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1254
msgid ""
"You can use @code{set-process-coding-system} to specify which coding system "
"to use (@pxref{Process Information}).  Otherwise, the coding system comes "
"from @code{coding-system-for-read}, if that is non-@code{nil}; or else from "
"the defaulting mechanism (@pxref{Default Coding Systems})."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1264
msgid ""
"@strong{Warning:} Coding systems such as @code{undecided} which determine "
"the coding system from the data do not work entirely reliably with "
"asynchronous subprocess output.  This is because Emacs has to process "
"asynchronous subprocess output in batches, as it arrives.  Emacs must try to "
"detect the proper coding system from one batch at a time, and this does not "
"always work.  Therefore, if at all possible, specify a coding system that "
"determines both the character code conversion and the end of line "
"conversion---that is, one like @code{latin-1-unix}, rather than @code"
"{undecided} or @code{latin-1}."
msgstr ""

# type: cindex
#: lispref/processes.texi:1265
#, no-wrap
msgid "filter multibyte flag, of process"
msgstr ""

# type: cindex
#: lispref/processes.texi:1266
#, no-wrap
msgid "process filter multibyte flag"
msgstr ""

# type: Plain text
#: lispref/processes.texi:1274
msgid ""
"When Emacs calls a process filter function, it provides the process output "
"as a multibyte string or as a unibyte string according to the process's "
"filter multibyte flag.  If the flag is non-@code{nil}, Emacs decodes the "
"output according to the process output coding system to produce a multibyte "
"string, and passes that to the process.  If the flag is @code{nil}, Emacs "
"puts the output into a unibyte string, with no decoding, and passes that."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1279
msgid ""
"When you create a process, the filter multibyte flag takes its initial value "
"from @code{default-enable-multibyte-characters}.  If you want to change the "
"flag later on, use @code{set-process-filter-multibyte}."
msgstr ""

# type: defun
#: lispref/processes.texi:1280
#, no-wrap
msgid "set-process-filter-multibyte process multibyte"
msgstr ""

# type: defun
#: lispref/processes.texi:1283
msgid ""
"This function sets the filter multibyte flag of @var{process} to @var"
"{multibyte}."
msgstr ""

# type: defun
#: lispref/processes.texi:1285
#, no-wrap
msgid "process-filter-multibyte-p process"
msgstr ""

# type: defun
#: lispref/processes.texi:1287
msgid "This function returns the filter multibyte flag of @var{process}."
msgstr ""

# type: subsection
#: lispref/processes.texi:1290
#, no-wrap
msgid "Accepting Output from Processes"
msgstr ""

# type: cindex
#: lispref/processes.texi:1291
#, no-wrap
msgid "accept input from processes"
msgstr ""

# type: Plain text
#: lispref/processes.texi:1298
msgid ""
"Output from asynchronous subprocesses normally arrives only while Emacs is "
"waiting for some sort of external event, such as elapsed time or terminal "
"input.  Occasionally it is useful in a Lisp program to explicitly permit "
"output to arrive at a specific point, or even to wait until output arrives "
"from a process."
msgstr ""

# type: defun
#: lispref/processes.texi:1299
#, no-wrap
msgid "accept-process-output &optional process seconds millisec just-this-one"
msgstr ""

# type: defun
#: lispref/processes.texi:1304
msgid ""
"This function allows Emacs to read pending output from processes.  The "
"output is inserted in the associated buffers or given to their filter "
"functions.  If @var{process} is non-@code{nil} then this function does not "
"return until some output has been received from @var{process}."
msgstr ""

# type: defun
#: lispref/processes.texi:1312
msgid ""
"The arguments @var{seconds} and @var{millisec} let you specify timeout "
"periods.  The former specifies a period measured in seconds and the latter "
"specifies one measured in milliseconds.  The two time periods thus specified "
"are added together, and @code{accept-process-output} returns after that much "
"time, whether or not there has been any subprocess output."
msgstr ""

# type: defun
#: lispref/processes.texi:1317
msgid ""
"The argument @var{millisec} is semi-obsolete nowadays because @var{seconds} "
"can be a floating point number to specify waiting a fractional number of "
"seconds.  If @var{seconds} is 0, the function accepts whatever output is "
"pending but does not wait."
msgstr ""

# type: defun
#: lispref/processes.texi:1326
msgid ""
"If @var{process} is a process, and the argument @var{just-this-one} is non-"
"@code{nil}, only output from that process is handled, suspending output from "
"other processes until some output has been received from that process or the "
"timeout expires.  If @var{just-this-one} is an integer, also inhibit running "
"timers.  This feature is generally not recommended, but may be necessary for "
"specific applications, such as speech synthesis."
msgstr ""

# type: defun
#: lispref/processes.texi:1330
msgid ""
"The function @code{accept-process-output} returns non-@code{nil} if it did "
"get some output, or @code{nil} if the timeout expired before output arrived."
msgstr ""

# type: section
#: lispref/processes.texi:1333
#, no-wrap
msgid "Sentinels: Detecting Process Status Changes"
msgstr ""

# type: cindex
#: lispref/processes.texi:1334
#, no-wrap
msgid "process sentinel"
msgstr ""

# type: cindex
#: lispref/processes.texi:1335
#, no-wrap
msgid "sentinel (of process)"
msgstr ""

# type: Plain text
#: lispref/processes.texi:1344
msgid ""
"A @dfn{process sentinel} is a function that is called whenever the "
"associated process changes status for any reason, including signals (whether "
"sent by Emacs or caused by the process's own actions) that terminate, stop, "
"or continue the process.  The process sentinel is also called if the process "
"exits.  The sentinel receives two arguments: the process for which the event "
"occurred, and a string describing the type of event."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1346
msgid "The string describing the event looks like one of the following:"
msgstr ""

# type: itemize
#: lispref/processes.texi:1350
msgid "@code{\"finished\\n\"}."
msgstr ""

# type: itemize
#: lispref/processes.texi:1353
msgid "@code{\"exited abnormally with code @var{exitcode}\\n\"}."
msgstr ""

# type: itemize
#: lispref/processes.texi:1356
msgid "@code{\"@var{name-of-signal}\\n\"}."
msgstr ""

# type: itemize
#: lispref/processes.texi:1359
msgid "@code{\"@var{name-of-signal} (core dumped)\\n\"}."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1370
msgid ""
"A sentinel runs only while Emacs is waiting (e.g., for terminal input, or "
"for time to elapse, or for process output).  This avoids the timing errors "
"that could result from running them at random places in the middle of other "
"Lisp programs.  A program can wait, so that sentinels will run, by calling "
"@code{sit-for} or @code{sleep-for} (@pxref{Waiting}), or @code{accept-"
"process-output} (@pxref{Accepting Output}).  Emacs also allows sentinels to "
"run when the command loop is reading input.  @code{delete-process} calls the "
"sentinel when it terminates a running process."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1377
msgid ""
"Emacs does not keep a queue of multiple reasons to call the sentinel of one "
"process; it records just the current status and the fact that there has been "
"a change.  Therefore two changes in status, coming in quick succession, can "
"call the sentinel just once.  However, process termination will always run "
"the sentinel exactly once.  This is because the process status can't change "
"again after termination."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1381
msgid ""
"Emacs explicitly checks for output from the process before running the "
"process sentinel.  Once the sentinel runs due to process termination, no "
"further output can arrive from the process."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1386
msgid ""
"A sentinel that writes the output into the buffer of the process should "
"check whether the buffer is still alive.  If it tries to insert into a dead "
"buffer, it will get an error.  If the buffer is dead, @code{(buffer-name "
"(process-buffer @var{process}))} returns @code{nil}."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1393
msgid ""
"Quitting is normally inhibited within a sentinel---otherwise, the effect of "
"typing @kbd{C-g} at command level or to quit a user command would be "
"unpredictable.  If you want to permit quitting inside a sentinel, bind @code"
"{inhibit-quit} to @code{nil}.  In most cases, the right way to do this is "
"with the macro @code{with-local-quit}.  @xref{Quitting}."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1400
msgid ""
"If an error happens during execution of a sentinel, it is caught "
"automatically, so that it doesn't stop the execution of whatever programs "
"was running when the sentinel was started.  However, if @code{debug-on-"
"error} is non-@code{nil}, the error-catching is turned off.  This makes it "
"possible to use the Lisp debugger to debug the sentinel.  @xref{Debugger}."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1405
msgid ""
"While a sentinel is running, the process sentinel is temporarily set to @code"
"{nil} so that the sentinel won't run recursively.  For this reason it is not "
"possible for a sentinel to specify a new sentinel."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1410
msgid ""
"In earlier Emacs versions, every sentinel that did regular expression "
"searching or matching had to explicitly save and restore the match data.  "
"Now Emacs does this automatically for sentinels; they never need to do it "
"explicitly.  @xref{Match Data}."
msgstr ""

# type: defun
#: lispref/processes.texi:1411
#, no-wrap
msgid "set-process-sentinel process sentinel"
msgstr ""

# type: defun
#: lispref/processes.texi:1416
msgid ""
"This function associates @var{sentinel} with @var{process}.  If @var"
"{sentinel} is @code{nil}, then the process will have no sentinel.  The "
"default behavior when there is no sentinel is to insert a message in the "
"process's buffer when the process status changes."
msgstr ""

# type: defun
#: lispref/processes.texi:1420
msgid ""
"Changes in process sentinel take effect immediately---if the sentinel is "
"slated to be run but has not been called yet, and you specify a new "
"sentinel, the eventual call to the sentinel will use the new one."
msgstr ""

# type: group
#: lispref/processes.texi:1428
#, no-wrap
msgid ""
"(defun msg-me (process event)\n"
"   (princ\n"
"     (format \"Process: %s had the event `%s'\" process event)))\n"
"(set-process-sentinel (get-process \"shell\") 'msg-me)\n"
"     @result{} msg-me\n"
msgstr ""

# type: group
#: lispref/processes.texi:1433
#, no-wrap
msgid ""
"(kill-process (get-process \"shell\"))\n"
"     @print{} Process: #<process shell> had the event `killed'\n"
"     @result{} #<process shell>\n"
msgstr ""

# type: defun
#: lispref/processes.texi:1437
#, no-wrap
msgid "process-sentinel process"
msgstr ""

# type: defun
#: lispref/processes.texi:1440
msgid ""
"This function returns the sentinel of @var{process}, or @code{nil} if it has "
"none."
msgstr ""

# type: defun
#: lispref/processes.texi:1442
#, no-wrap
msgid "waiting-for-user-input-p"
msgstr ""

# type: defun
#: lispref/processes.texi:1447
msgid ""
"While a sentinel or filter function is running, this function returns non-"
"@code{nil} if Emacs was waiting for keyboard input from the user at the time "
"the sentinel or filter function was called, @code{nil} if it was not."
msgstr ""

# type: section
#: lispref/processes.texi:1450
#, no-wrap
msgid "Querying Before Exit"
msgstr ""

# type: Plain text
#: lispref/processes.texi:1459
msgid ""
"When Emacs exits, it terminates all its subprocesses by sending them the "
"@code{SIGHUP} signal.  Because subprocesses may be doing valuable work, "
"Emacs normally asks the user to confirm that it is ok to terminate them.  "
"Each process has a query flag which, if non-@code{nil}, says that Emacs "
"should ask for confirmation before exiting and thus killing that process.  "
"The default for the query flag is @code{t}, meaning @emph{do} query."
msgstr ""

# type: defun
#: lispref/processes.texi:1460
#, no-wrap
msgid "process-query-on-exit-flag process"
msgstr ""

# type: defun
#: lispref/processes.texi:1462
msgid "This returns the query flag of @var{process}."
msgstr ""

# type: defun
#: lispref/processes.texi:1464
#, no-wrap
msgid "set-process-query-on-exit-flag process flag"
msgstr ""

# type: defun
#: lispref/processes.texi:1467
msgid ""
"This function sets the query flag of @var{process} to @var{flag}.  It "
"returns @var{flag}."
msgstr ""

# type: group
#: lispref/processes.texi:1473
#, no-wrap
msgid ""
";; @r{Don't query about the shell process}\n"
"(set-process-query-on-exit-flag (get-process \"shell\") nil)\n"
"     @result{} t\n"
msgstr ""

# type: defun
#: lispref/processes.texi:1477
#, no-wrap
msgid "process-kill-without-query process &optional do-query"
msgstr ""

# type: defun
#: lispref/processes.texi:1480
msgid ""
"This function clears the query flag of @var{process}, so that Emacs will not "
"query the user on account of that process."
msgstr ""

# type: defun
#: lispref/processes.texi:1488
msgid ""
"Actually, the function does more than that: it returns the old value of the "
"process's query flag, and sets the query flag to @var{do-query}.  Please "
"don't use this function to do those things any more---please use the newer, "
"cleaner functions @code{process-query-on-exit-flag} and @code{set-process-"
"query-on-exit-flag} in all but the simplest cases.  The only way you should "
"use @code{process-kill-without-query} nowadays is like this:"
msgstr ""

# type: group
#: lispref/processes.texi:1493
#, no-wrap
msgid ""
";; @r{Don't query about the shell process}\n"
"(process-kill-without-query (get-process \"shell\"))\n"
msgstr ""

# type: cindex
#: lispref/processes.texi:1499
#, no-wrap
msgid "transaction queue"
msgstr ""

# type: Plain text
#: lispref/processes.texi:1505
msgid ""
"You can use a @dfn{transaction queue} to communicate with a subprocess using "
"transactions.  First use @code{tq-create} to create a transaction queue "
"communicating with a specified process.  Then you can call @code{tq-enqueue} "
"to send a transaction."
msgstr ""

# type: defun
#: lispref/processes.texi:1506
#, no-wrap
msgid "tq-create process"
msgstr ""

# type: defun
#: lispref/processes.texi:1512
msgid ""
"This function creates and returns a transaction queue communicating with @var"
"{process}.  The argument @var{process} should be a subprocess capable of "
"sending and receiving streams of bytes.  It may be a child process, or it "
"may be a TCP connection to a server, possibly on another machine."
msgstr ""

# type: defun
#: lispref/processes.texi:1514
#, no-wrap
msgid "tq-enqueue queue question regexp closure fn &optional delay-question"
msgstr ""

# type: defun
#: lispref/processes.texi:1517
msgid ""
"This function sends a transaction to queue @var{queue}.  Specifying the "
"queue has the effect of specifying the subprocess to talk to."
msgstr ""

# type: defun
#: lispref/processes.texi:1522
msgid ""
"The argument @var{question} is the outgoing message that starts the "
"transaction.  The argument @var{fn} is the function to call when the "
"corresponding answer comes back; it is called with two arguments: @var"
"{closure}, and the answer received."
msgstr ""

# type: defun
#: lispref/processes.texi:1526
msgid ""
"The argument @var{regexp} is a regular expression that should match text at "
"the end of the entire answer, but nothing before; that's how @code{tq-"
"enqueue} determines where the answer ends."
msgstr ""

# type: defun
#: lispref/processes.texi:1530
msgid ""
"If the argument @var{delay-question} is non-nil, delay sending this question "
"until the process has finished replying to any previous questions.  This "
"produces more reliable results with some processes."
msgstr ""

# type: defun
#: lispref/processes.texi:1532
msgid "The return value of @code{tq-enqueue} itself is not meaningful."
msgstr ""

# type: defun
#: lispref/processes.texi:1534
#, no-wrap
msgid "tq-close queue"
msgstr ""

# type: defun
#: lispref/processes.texi:1537
msgid ""
"Shut down transaction queue @var{queue}, waiting for all pending "
"transactions to complete, and then terminate the connection or child process."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1541
msgid ""
"Transaction queues are implemented by means of a filter function.  @xref"
"{Filter Functions}."
msgstr ""

# type: section
#: lispref/processes.texi:1543
#, no-wrap
msgid "Network Connections"
msgstr ""

# type: cindex
#: lispref/processes.texi:1544
#, no-wrap
msgid "network connection"
msgstr ""

# type: cindex
#: lispref/processes.texi:1545
#, no-wrap
msgid "TCP"
msgstr ""

# type: cindex
#: lispref/processes.texi:1546
#, no-wrap
msgid "UDP"
msgstr ""

# type: Plain text
#: lispref/processes.texi:1557
msgid ""
"Emacs Lisp programs can open stream (TCP) and datagram (UDP) network "
"connections to other processes on the same machine or other machines.  A "
"network connection is handled by Lisp much like a subprocess, and is "
"represented by a process object.  However, the process you are communicating "
"with is not a child of the Emacs process, so it has no process @acronym{ID}, "
"and you can't kill it or send it signals.  All you can do is send and "
"receive data.  @code{delete-process} closes the connection, but does not "
"kill the program at the other end; that program must decide what to do about "
"closure of the connection."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1566
msgid ""
"Lisp programs can listen for connections by creating network servers.  A "
"network server is also represented by a kind of process object, but unlike a "
"network connection, the network server never transfers data itself.  When it "
"receives a connection request, it creates a new network connection to "
"represent the connection just made.  (The network connection inherits "
"certain information, including the process plist, from the server.)  The "
"network server then goes back to listening for more connection requests."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1573
msgid ""
"Network connections and servers are created by calling @code{make-network-"
"process} with an argument list consisting of keyword/argument pairs, for "
"example @code{:server t} to create a server process, or @code{:type "
"'datagram} to create a datagram connection.  @xref{Low-Level Network}, for "
"details.  You can also use the @code{open-network-stream} function described "
"below."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1581
msgid ""
"You can distinguish process objects representing network connections and "
"servers from those representing subprocesses with the @code{process-status} "
"function.  The possible status values for network connections are @code"
"{open}, @code{closed}, @code{connect}, and @code{failed}.  For a network "
"server, the status is always @code{listen}.  None of those values is "
"possible for a real subprocess.  @xref{Process Information}."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1593
msgid ""
"You can stop and resume operation of a network process by calling @code{stop-"
"process} and @code{continue-process}.  For a server process, being stopped "
"means not accepting new connections.  (Up to 5 connection requests will be "
"queued for when you resume the server; you can increase this limit, unless "
"it is imposed by the operating system.)  For a network stream connection, "
"being stopped means not processing input (any arriving input waits until you "
"resume the connection).  For a datagram connection, some number of packets "
"may be queued but input may be lost.  You can use the function @code{process-"
"command} to determine whether a network connection or server is stopped; a "
"non-@code{nil} value means yes."
msgstr ""

# type: defun
#: lispref/processes.texi:1594
#, no-wrap
msgid "open-network-stream name buffer-or-name host service"
msgstr ""

# type: defun
#: lispref/processes.texi:1597
msgid ""
"This function opens a TCP connection, and returns a process object that "
"represents the connection."
msgstr ""

# type: defun
#: lispref/processes.texi:1600
msgid ""
"The @var{name} argument specifies the name for the process object.  It is "
"modified as necessary to make it unique."
msgstr ""

# type: defun
#: lispref/processes.texi:1606
msgid ""
"The @var{buffer-or-name} argument is the buffer to associate with the "
"connection.  Output from the connection is inserted in the buffer, unless "
"you specify a filter function to handle the output.  If @var{buffer-or-name} "
"is @code{nil}, it means that the connection is not associated with any "
"buffer."
msgstr ""

# type: defun
#: lispref/processes.texi:1610
msgid ""
"The arguments @var{host} and @var{service} specify where to connect to; @var"
"{host} is the host name (a string), and @var{service} is the name of a "
"defined network service (a string) or a port number (an integer)."
msgstr ""

# type: defun
#: lispref/processes.texi:1612
#, no-wrap
msgid "process-contact process &optional key"
msgstr ""

# type: defun
#: lispref/processes.texi:1617
msgid ""
"This function returns information about how a network process was set up.  "
"For a connection, when @var{key} is @code{nil}, it returns @code{(@var"
"{hostname} @var{service})} which specifies what you connected to."
msgstr ""

# type: defun
#: lispref/processes.texi:1622
msgid ""
"If @var{key} is @code{t}, the value is the complete status information for "
"the connection or server; that is, the list of keywords and values specified "
"in @code{make-network-process}, except that some of the values represent the "
"current status instead of what you specified:"
msgstr ""

# type: item
#: lispref/processes.texi:1624
#, no-wrap
msgid ":buffer"
msgstr ""

# type: table
#: lispref/processes.texi:1626
msgid "The associated value is the process buffer."
msgstr ""

# type: item
#: lispref/processes.texi:1626
#, no-wrap
msgid ":filter"
msgstr ""

# type: table
#: lispref/processes.texi:1628
msgid "The associated value is the process filter function."
msgstr ""

# type: item
#: lispref/processes.texi:1628
#, no-wrap
msgid ":sentinel"
msgstr ""

# type: table
#: lispref/processes.texi:1630
msgid "The associated value is the process sentinel function."
msgstr ""

# type: item
#: lispref/processes.texi:1630
#, no-wrap
msgid ":remote"
msgstr ""

# type: table
#: lispref/processes.texi:1632
msgid "In a connection, the address in internal format of the remote peer."
msgstr ""

# type: item
#: lispref/processes.texi:1632
#, no-wrap
msgid ":local"
msgstr ""

# type: table
#: lispref/processes.texi:1634
msgid "The local address, in internal format."
msgstr ""

# type: item
#: lispref/processes.texi:1634
#, no-wrap
msgid ":service"
msgstr ""

# type: table
#: lispref/processes.texi:1637
msgid ""
"In a server, if you specified @code{t} for @var{service}, this value is the "
"actual port number."
msgstr ""

# type: defun
#: lispref/processes.texi:1641
msgid ""
"@code{:local} and @code{:remote} are included even if they were not "
"specified explicitly in @code{make-network-process}."
msgstr ""

# type: defun
#: lispref/processes.texi:1644
msgid ""
"If @var{key} is a keyword, the function returns the value corresponding to "
"that keyword."
msgstr ""

# type: defun
#: lispref/processes.texi:1646
msgid "For an ordinary child process, this function always returns @code{t}."
msgstr ""

# type: cindex
#: lispref/processes.texi:1650
#, no-wrap
msgid "network servers"
msgstr ""

# type: Plain text
#: lispref/processes.texi:1657
msgid ""
"You create a server by calling @code{make-network-process} with @code{:"
"server t}.  The server will listen for connection requests from clients.  "
"When it accepts a client connection request, that creates a new network "
"connection, itself a process object, with the following parameters:"
msgstr ""

# type: itemize
#: lispref/processes.texi:1666
msgid ""
"The connection's process name is constructed by concatenating the server "
"process' @var{name} with a client identification string.  The client "
"identification string for an IPv4 connection looks like @samp{<@var{a}.@var"
"{b}.@var{c}.@var{d}:@var{p}>}.  Otherwise, it is a unique number in "
"brackets, as in @samp{<@var{nnn}>}.  The number is unique for each "
"connection in the Emacs session."
msgstr ""

# type: itemize
#: lispref/processes.texi:1672
msgid ""
"If the server's filter is non-@code{nil}, the connection process does not "
"get a separate process buffer; otherwise, Emacs creates a new buffer for the "
"purpose.  The buffer name is the server's buffer name or process name, "
"concatenated with the client identification string."
msgstr ""

# type: itemize
#: lispref/processes.texi:1676
msgid ""
"The server's process buffer value is never used directly by Emacs, but it is "
"passed to the log function, which can log connections by inserting text "
"there."
msgstr ""

# type: itemize
#: lispref/processes.texi:1682
msgid ""
"The communication type and the process filter and sentinel are inherited "
"from those of the server.  The server never directly uses its filter and "
"sentinel; their sole purpose is to initialize connections made to the server."
msgstr ""

# type: itemize
#: lispref/processes.texi:1688
msgid ""
"The connection's process contact info is set according to the client's "
"addressing information (typically an IP address and a port number).  This "
"information is associated with the @code{process-contact} keywords @code{:"
"host}, @code{:service}, @code{:remote}."
msgstr ""

# type: itemize
#: lispref/processes.texi:1692
msgid ""
"The connection's local address is set up according to the port number used "
"for the connection."
msgstr ""

# type: itemize
#: lispref/processes.texi:1695
msgid "The client process' plist is initialized from the server's plist."
msgstr ""

# type: cindex
#: lispref/processes.texi:1699
#, no-wrap
msgid "datagrams"
msgstr ""

# type: Plain text
#: lispref/processes.texi:1705
msgid ""
"A datagram connection communicates with individual packets rather than "
"streams of data.  Each call to @code{process-send} sends one datagram packet "
"(@pxref{Input to Processes}), and each datagram received results in one call "
"to the filter function."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1715
msgid ""
"The datagram connection doesn't have to talk with the same remote peer all "
"the time.  It has a @dfn{remote peer address} which specifies where to send "
"datagrams to.  Each time an incoming datagram is passed to the filter "
"function, the peer address is set to the address that datagram came from; "
"that way, if the filter function sends a datagram, it will go back to that "
"place.  You can specify the remote peer address when you create the datagram "
"connection using the @code{:remote} keyword.  You can change it later on by "
"calling @code{set-process-datagram-address}."
msgstr ""

# type: defun
#: lispref/processes.texi:1716
#, no-wrap
msgid "process-datagram-address process"
msgstr ""

# type: defun
#: lispref/processes.texi:1719
msgid ""
"If @var{process} is a datagram connection or server, this function returns "
"its remote peer address."
msgstr ""

# type: defun
#: lispref/processes.texi:1721
#, no-wrap
msgid "set-process-datagram-address process address"
msgstr ""

# type: defun
#: lispref/processes.texi:1724
msgid ""
"If @var{process} is a datagram connection or server, this function sets its "
"remote peer address to @var{address}."
msgstr ""

# type: section
#: lispref/processes.texi:1727
#, no-wrap
msgid "Low-Level Network Access"
msgstr ""

# type: Plain text
#: lispref/processes.texi:1732
msgid ""
"You can also create network connections by operating at a lower level than "
"that of @code{open-network-stream}, using @code{make-network-process}."
msgstr ""

# type: menu
#: lispref/processes.texi:1739
msgid "Proc: Network Processes"
msgstr ""

# type: menu
#: lispref/processes.texi:1739
msgid "Using @code{make-network-process}."
msgstr ""

# type: menu
#: lispref/processes.texi:1739
msgid "Options: Network Options"
msgstr ""

# type: menu
#: lispref/processes.texi:1739
msgid "Further control over network connections."
msgstr ""

# type: menu
#: lispref/processes.texi:1739
msgid "Features: Network Feature Testing."
msgstr ""

# type: menu
#: lispref/processes.texi:1739
msgid "Determining which network features work on"
msgstr ""

# type: menu
#: lispref/processes.texi:1739
msgid "the machine you are using."
msgstr ""

# type: node
#: lispref/processes.texi:1741
#, no-wrap
msgid "Network Processes"
msgstr ""

# type: code{#1}
#: lispref/processes.texi:1742
#, no-wrap
msgid "make-network-process"
msgstr ""

# type: Plain text
#: lispref/processes.texi:1747
msgid ""
"The basic function for creating network connections and network servers is "
"@code{make-network-process}.  It can do either of those jobs, depending on "
"the arguments you give it."
msgstr ""

# type: defun
#: lispref/processes.texi:1748
#, no-wrap
msgid "make-network-process &rest args"
msgstr ""

# type: defun
#: lispref/processes.texi:1755
msgid ""
"This function creates a network connection or server and returns the process "
"object that represents it.  The arguments @var{args} are a list of keyword/"
"argument pairs.  Omitting a keyword is always equivalent to specifying it "
"with value @code{nil}, except for @code{:coding}, @code{:filter-multibyte}, "
"and @code{:reuseaddr}.  Here are the meaningful keywords:"
msgstr ""

# type: item
#: lispref/processes.texi:1757
#, no-wrap
msgid ":name @var{name}"
msgstr ""

# type: table
#: lispref/processes.texi:1760
msgid ""
"Use the string @var{name} as the process name.  It is modified if necessary "
"to make it unique."
msgstr ""

# type: table
#: lispref/processes.texi:1765
msgid ""
"Specify the communication type.  A value of @code{nil} specifies a stream "
"connection (the default); @code{datagram} specifies a datagram connection.  "
"Both connections and servers can be of either type."
msgstr ""

# type: item
#: lispref/processes.texi:1766
#, no-wrap
msgid ":server @var{server-flag}"
msgstr ""

# type: table
#: lispref/processes.texi:1771
msgid ""
"If @var{server-flag} is non-@code{nil}, create a server.  Otherwise, create "
"a connection.  For a stream type server, @var{server-flag} may be an integer "
"which then specifies the length of the queue of pending connections to the "
"server.  The default queue length is 5."
msgstr ""

# type: item
#: lispref/processes.texi:1772
#, no-wrap
msgid ":host @var{host}"
msgstr ""

# type: table
#: lispref/processes.texi:1778
msgid ""
"Specify the host to connect to.  @var{host} should be a host name or "
"Internet address, as a string, or the symbol @code{local} to specify the "
"local host.  If you specify @var{host} for a server, it must specify a valid "
"address for the local host, and only clients connecting to that address will "
"be accepted."
msgstr ""

# type: item
#: lispref/processes.texi:1779
#, no-wrap
msgid ":service @var{service}"
msgstr ""

# type: table
#: lispref/processes.texi:1785
msgid ""
"@var{service} specifies a port number to connect to, or, for a server, the "
"port number to listen on.  It should be a service name that translates to a "
"port number, or an integer specifying the port number directly.  For a "
"server, it can also be @code{t}, which means to let the system select an "
"unused port number."
msgstr ""

# type: item
#: lispref/processes.texi:1786
#, no-wrap
msgid ":family @var{family}"
msgstr ""

# type: table
#: lispref/processes.texi:1793
msgid ""
"@var{family} specifies the address (and protocol) family for communication.  "
"@code{nil} means determine the proper address family automatically for the "
"given @var{host} and @var{service}.  @code{local} specifies a Unix socket, "
"in which case @var{host} is ignored.  @code{ipv4} and @code{ipv6} specify to "
"use IPv4 and IPv6 respectively."
msgstr ""

# type: item
#: lispref/processes.texi:1794
#, no-wrap
msgid ":local @var{local-address}"
msgstr ""

# type: table
#: lispref/processes.texi:1798
msgid ""
"For a server process, @var{local-address} is the address to listen on.  It "
"overrides @var{family}, @var{host} and @var{service}, and you may as well "
"not specify them."
msgstr ""

# type: item
#: lispref/processes.texi:1799
#, no-wrap
msgid ":remote @var{remote-address}"
msgstr ""

# type: table
#: lispref/processes.texi:1803
msgid ""
"For a connection, @var{remote-address} is the address to connect to.  It "
"overrides @var{family}, @var{host} and @var{service}, and you may as well "
"not specify them."
msgstr ""

# type: table
#: lispref/processes.texi:1806
msgid ""
"For a datagram server, @var{remote-address} specifies the initial setting of "
"the remote datagram address."
msgstr ""

# type: table
#: lispref/processes.texi:1809
msgid ""
"The format of @var{local-address} or @var{remote-address} depends on the "
"address family:"
msgstr ""

# type: itemize
#: lispref/processes.texi:1817
msgid ""
"An IPv4 address is represented as a five-element vector of four 8-bit "
"integers and one 16-bit integer @code{[@var{a} @var{b} @var{c} @var{d} @var"
"{p}]} corresponding to numeric IPv4 address @var{a}.@var{b}.@var{c}.@var{d} "
"and port number @var{p}."
msgstr ""

# type: itemize
#: lispref/processes.texi:1824
msgid ""
"An IPv6 address is represented as a nine-element vector of 16-bit integers "
"@code{[@var{a} @var{b} @var{c} @var{d} @var{e} @var{f} @var{g} @var{h} @var"
"{p}]} corresponding to numeric IPv6 address @var{a}:@var{b}:@var{c}:@var{d}:"
"@var{e}:@var{f}:@var{g}:@var{h} and port number @var{p}."
msgstr ""

# type: itemize
#: lispref/processes.texi:1828
msgid ""
"A local address is represented as a string which specifies the address in "
"the local address space."
msgstr ""

# type: itemize
#: lispref/processes.texi:1836
msgid ""
"An ``unsupported family'' address is represented by a cons @code{(@var{f} . "
"@var{av})}, where @var{f} is the family number and @var{av} is a vector "
"specifying the socket address using one element per address data byte.  Do "
"not rely on this format in portable code, as it may depend on implementation "
"defined constants, data sizes, and data structure alignment."
msgstr ""

# type: item
#: lispref/processes.texi:1838
#, no-wrap
msgid ":nowait @var{bool}"
msgstr ""

# type: table
#: lispref/processes.texi:1846
msgid ""
"If @var{bool} is non-@code{nil} for a stream connection, return without "
"waiting for the connection to complete.  When the connection succeeds or "
"fails, Emacs will call the sentinel function, with a second argument "
"matching @code{\"open\"} (if successful) or @code{\"failed\"}.  The default "
"is to block, so that @code{make-network-process} does not return until the "
"connection has succeeded or failed."
msgstr ""

# type: item
#: lispref/processes.texi:1847
#, no-wrap
msgid ":stop @var{stopped}"
msgstr ""

# type: table
#: lispref/processes.texi:1850
msgid ""
"Start the network connection or server in the `stopped' state if @var"
"{stopped} is non-@code{nil}."
msgstr ""

# type: item
#: lispref/processes.texi:1851
#, no-wrap
msgid ":buffer @var{buffer}"
msgstr ""

# type: table
#: lispref/processes.texi:1853
msgid "Use @var{buffer} as the process buffer."
msgstr ""

# type: item
#: lispref/processes.texi:1854
#, no-wrap
msgid ":coding @var{coding}"
msgstr ""

# type: table
#: lispref/processes.texi:1859
msgid ""
"Use @var{coding} as the coding system for this process.  To specify "
"different coding systems for decoding data from the connection and for "
"encoding data sent to it, specify @code{(@var{decoding} .  @var{encoding})} "
"for @var{coding}."
msgstr ""

# type: table
#: lispref/processes.texi:1862
msgid ""
"If you don't specify this keyword at all, the default is to determine the "
"coding systems from the data."
msgstr ""

# type: item
#: lispref/processes.texi:1863
#, no-wrap
msgid ":noquery @var{query-flag}"
msgstr ""

# type: table
#: lispref/processes.texi:1866
msgid ""
"Initialize the process query flag to @var{query-flag}.  @xref{Query Before "
"Exit}."
msgstr ""

# type: item
#: lispref/processes.texi:1867
#, no-wrap
msgid ":filter @var{filter}"
msgstr ""

# type: table
#: lispref/processes.texi:1869
msgid "Initialize the process filter to @var{filter}."
msgstr ""

# type: item
#: lispref/processes.texi:1870
#, no-wrap
msgid ":filter-multibyte @var{bool}"
msgstr ""

# type: table
#: lispref/processes.texi:1875
msgid ""
"If @var{bool} is non-@code{nil}, strings given to the process filter are "
"multibyte, otherwise they are unibyte.  If you don't specify this keyword at "
"all, the default is that the strings are multibyte if @code{default-enable-"
"multibyte-characters} is non-@code{nil}."
msgstr ""

# type: item
#: lispref/processes.texi:1876
#, no-wrap
msgid ":sentinel @var{sentinel}"
msgstr ""

# type: table
#: lispref/processes.texi:1878
msgid "Initialize the process sentinel to @var{sentinel}."
msgstr ""

# type: item
#: lispref/processes.texi:1879
#, no-wrap
msgid ":log @var{log}"
msgstr ""

# type: table
#: lispref/processes.texi:1887
msgid ""
"Initialize the log function of a server process to @var{log}.  The log "
"function is called each time the server accepts a network connection from a "
"client.  The arguments passed to the log function are @var{server}, @var"
"{connection}, and @var{message}, where @var{server} is the server process, "
"@var{connection} is the new process for the connection, and @var{message} is "
"a string describing what has happened."
msgstr ""

# type: item
#: lispref/processes.texi:1888
#, no-wrap
msgid ":plist @var{plist}"
msgstr ""

# type: table
#: lispref/processes.texi:1890
msgid "Initialize the process plist to @var{plist}."
msgstr ""

# type: defun
#: lispref/processes.texi:1894
msgid ""
"The original argument list, modified with the actual connection information, "
"is available via the @code{process-contact} function."
msgstr ""

# type: subsection
#: lispref/processes.texi:1896 lispref/processes.texi:1897
#, no-wrap
msgid "Network Options"
msgstr ""

# type: Plain text
#: lispref/processes.texi:1902
msgid ""
"The following network options can be specified when you create a network "
"process.  Except for @code{:reuseaddr}, you can also set or modify these "
"options later, using @code{set-network-process-option}."
msgstr ""

# type: Plain text
#: lispref/processes.texi:1907
msgid ""
"For a server process, the options specified with @code{make-network-process} "
"are not inherited by the client connections, so you will need to set the "
"necessary options for each child connection as it is created."
msgstr ""

# type: item
#: lispref/processes.texi:1909
#, no-wrap
msgid ":bindtodevice @var{device-name}"
msgstr ""

# type: table
#: lispref/processes.texi:1914
msgid ""
"If @var{device-name} is a non-empty string identifying a network interface "
"name (see @code{network-interface-list}), only handle packets received on "
"that interface.  If @var{device-name} is @code{nil} (the default), handle "
"packets received on any interface."
msgstr ""

# type: table
#: lispref/processes.texi:1916
msgid "Using this option may require special privileges on some systems."
msgstr ""

# type: item
#: lispref/processes.texi:1917
#, no-wrap
msgid ":broadcast @var{broadcast-flag}"
msgstr ""

# type: table
#: lispref/processes.texi:1922
msgid ""
"If @var{broadcast-flag} is non-@code{nil} for a datagram process, the "
"process will receive datagram packet sent to a broadcast address, and be "
"able to send packets to a broadcast address.  Ignored for a stream "
"connection."
msgstr ""

# type: item
#: lispref/processes.texi:1923
#, no-wrap
msgid ":dontroute @var{dontroute-flag}"
msgstr ""

# type: table
#: lispref/processes.texi:1926
msgid ""
"If @var{dontroute-flag} is non-@code{nil}, the process can only send to "
"hosts on the same network as the local host."
msgstr ""

# type: item
#: lispref/processes.texi:1927
#, no-wrap
msgid ":keepalive @var{keepalive-flag}"
msgstr ""

# type: table
#: lispref/processes.texi:1930
msgid ""
"If @var{keepalive-flag} is non-@code{nil} for a stream connection, enable "
"exchange of low-level keep-alive messages."
msgstr ""

# type: item
#: lispref/processes.texi:1931
#, no-wrap
msgid ":linger @var{linger-arg}"
msgstr ""

# type: table
#: lispref/processes.texi:1939
msgid ""
"If @var{linger-arg} is non-@code{nil}, wait for successful transmission of "
"all queued packets on the connection before it is deleted (see @code{delete-"
"process}).  If @var{linger-arg} is an integer, it specifies the maximum time "
"in seconds to wait for queued packets to be sent before closing the "
"connection.  Default is @code{nil} which means to discard unsent queued "
"packets when the process is deleted."
msgstr ""

# type: item
#: lispref/processes.texi:1940
#, no-wrap
msgid ":oobinline @var{oobinline-flag}"
msgstr ""

# type: table
#: lispref/processes.texi:1944
msgid ""
"If @var{oobinline-flag} is non-@code{nil} for a stream connection, receive "
"out-of-band data in the normal data stream.  Otherwise, ignore out-of-band "
"data."
msgstr ""

# type: item
#: lispref/processes.texi:1945
#, no-wrap
msgid ":priority @var{priority}"
msgstr ""

# type: table
#: lispref/processes.texi:1952
msgid ""
"Set the priority for packets sent on this connection to the integer @var"
"{priority}.  The interpretation of this number is protocol specific, such as "
"setting the TOS (type of service) field on IP packets sent on this "
"connection.  It may also have system dependent effects, such as selecting a "
"specific output queue on the network interface."
msgstr ""

# type: item
#: lispref/processes.texi:1953
#, no-wrap
msgid ":reuseaddr @var{reuseaddr-flag}"
msgstr ""

# type: table
#: lispref/processes.texi:1961
msgid ""
"If @var{reuseaddr-flag} is non-@code{nil} (the default) for a stream server "
"process, allow this server to reuse a specific port number (see @code{:"
"service}) unless another process on this host is already listening on that "
"port.  If @var{reuseaddr-flag} is @code{nil}, there may be a period of time "
"after the last use of that port (by any process on the host), where it is "
"not possible to make a new server on that port."
msgstr ""

# type: defun
#: lispref/processes.texi:1963
#, no-wrap
msgid "set-network-process-option process option value"
msgstr ""

# type: defun
#: lispref/processes.texi:1967
msgid ""
"This function sets or modifies a network option for network process @var"
"{process}.  See @code{make-network-process} for details of options @var"
"{option} and their corresponding values @var{value}."
msgstr ""

# type: defun
#: lispref/processes.texi:1970
msgid ""
"The current setting of an option is available via the @code{process-contact} "
"function."
msgstr ""

# type: node
#: lispref/processes.texi:1972
#, no-wrap
msgid "Network Feature Testing"
msgstr ""

# type: subsection
#: lispref/processes.texi:1973
#, no-wrap
msgid "Testing Availability of Network Features"
msgstr ""

# type: Plain text
#: lispref/processes.texi:1977
msgid ""
"To test for the availability of a given network feature, use @code{featurep} "
"like this:"
msgstr ""

# type: example
#: lispref/processes.texi:1980
#, no-wrap
msgid "(featurep 'make-network-process '(@var{keyword} @var{value}))\n"
msgstr ""

# type: Plain text
#: lispref/processes.texi:1989
msgid ""
"The result of the first form is @code{t} if it works to specify @var"
"{keyword} with value @var{value} in @code{make-network-process}.  The result "
"of the second form is @code{t} if @var{keyword} is supported by @code{make-"
"network-process}.  Here are some of the @var{keyword}---@var{value} pairs "
"you can test in this way."
msgstr ""

# type: item
#: lispref/processes.texi:1991
#, no-wrap
msgid "(:nowait t)"
msgstr ""

# type: table
#: lispref/processes.texi:1993
msgid "Non-@code{nil} if non-blocking connect is supported."
msgstr ""

# type: item
#: lispref/processes.texi:1993
#, no-wrap
msgid "(:type datagram)"
msgstr ""

# type: table
#: lispref/processes.texi:1995
msgid "Non-@code{nil} if datagrams are supported."
msgstr ""

# type: item
#: lispref/processes.texi:1995
#, no-wrap
msgid "(:family local)"
msgstr ""

# type: table
#: lispref/processes.texi:1997
msgid ""
"Non-@code{nil} if local (a.k.a.@: ``UNIX domain'') sockets are supported."
msgstr ""

# type: item
#: lispref/processes.texi:1997
#, no-wrap
msgid "(:family ipv6)"
msgstr ""

# type: table
#: lispref/processes.texi:1999
msgid "Non-@code{nil} if IPv6 is supported."
msgstr ""

# type: item
#: lispref/processes.texi:1999
#, no-wrap
msgid "(:service t)"
msgstr ""

# type: table
#: lispref/processes.texi:2001
msgid "Non-@code{nil} if the system can select the port for a server."
msgstr ""

# type: Plain text
#: lispref/processes.texi:2005
msgid ""
"To test for the availability of a given network option, use @code{featurep} "
"like this:"
msgstr ""

# type: example
#: lispref/processes.texi:2008
#, no-wrap
msgid "(featurep 'make-network-process '@var{keyword})\n"
msgstr ""

# type: Plain text
#: lispref/processes.texi:2012
msgid "Here are some of the options you can test in this way."
msgstr ""

# type: item
#: lispref/processes.texi:2014
#, no-wrap
msgid ":bindtodevice"
msgstr ""

# type: itemx
#: lispref/processes.texi:2015
#, no-wrap
msgid ":broadcast"
msgstr ""

# type: itemx
#: lispref/processes.texi:2016
#, no-wrap
msgid ":dontroute"
msgstr ""

# type: itemx
#: lispref/processes.texi:2017
#, no-wrap
msgid ":keepalive"
msgstr ""

# type: itemx
#: lispref/processes.texi:2018
#, no-wrap
msgid ":linger"
msgstr ""

# type: itemx
#: lispref/processes.texi:2019
#, no-wrap
msgid ":oobinline"
msgstr ""

# type: itemx
#: lispref/processes.texi:2020
#, no-wrap
msgid ":priority"
msgstr ""

# type: itemx
#: lispref/processes.texi:2021
#, no-wrap
msgid ":reuseaddr"
msgstr ""

# type: table
#: lispref/processes.texi:2024
msgid ""
"That particular network option is supported by @code{make-network-process} "
"and @code{set-network-process-option}."
msgstr ""

# type: section
#: lispref/processes.texi:2027
#, no-wrap
msgid "Misc Network Facilities"
msgstr ""

# type: Plain text
#: lispref/processes.texi:2031
msgid ""
"These additional functions are useful for creating and operating on network "
"connections."
msgstr ""

# type: defun
#: lispref/processes.texi:2032
#, no-wrap
msgid "network-interface-list"
msgstr ""

# type: defun
#: lispref/processes.texi:2038
msgid ""
"This function returns a list describing the network interfaces of the "
"machine you are using.  The value is an alist whose elements have the form "
"@code{(@var{name} . @var{address})}.  @var{address} has the same form as the "
"@var{local-address} and @var{remote-address} arguments to @code{make-network-"
"process}."
msgstr ""

# type: defun
#: lispref/processes.texi:2040
#, no-wrap
msgid "network-interface-info ifname"
msgstr ""

# type: defun
#: lispref/processes.texi:2044
msgid ""
"This function returns information about the network interface named @var"
"{ifname}.  The value is a list of the form @code{(@var{addr} @var{bcast} @var"
"{netmask} @var{hwaddr} @var{flags})}."
msgstr ""

# type: item
#: lispref/processes.texi:2046
#, no-wrap
msgid "addr"
msgstr ""

# type: table
#: lispref/processes.texi:2048
msgid "The Internet protocol address."
msgstr ""

# type: item
#: lispref/processes.texi:2048
#, no-wrap
msgid "bcast"
msgstr ""

# type: table
#: lispref/processes.texi:2050
msgid "The broadcast address."
msgstr ""

# type: item
#: lispref/processes.texi:2050
#, no-wrap
msgid "netmask"
msgstr ""

# type: table
#: lispref/processes.texi:2052
msgid "The network mask."
msgstr ""

# type: item
#: lispref/processes.texi:2052
#, no-wrap
msgid "hwaddr"
msgstr ""

# type: table
#: lispref/processes.texi:2054
msgid "The layer 2 address (Ethernet MAC address, for instance)."
msgstr ""

# type: item
#: lispref/processes.texi:2054
#, no-wrap
msgid "flags"
msgstr ""

# type: table
#: lispref/processes.texi:2056
msgid "The current flags of the interface."
msgstr ""

# type: defun
#: lispref/processes.texi:2059
#, no-wrap
msgid "format-network-address address &optional omit-port"
msgstr ""

# type: defun
#: lispref/processes.texi:2062
msgid ""
"This function converts the Lisp representation of a network address to a "
"string."
msgstr ""

# type: defun
#: lispref/processes.texi:2067
msgid ""
"A five-element vector @code{[@var{a} @var{b} @var{c} @var{d} @var{p}]} "
"represents an IPv4 address @var{a}.@var{b}.@var{c}.@var{d} and port number "
"@var{p}.  @code{format-network-address} converts that to the string @code"
"{\"@var{a}.@var{b}.@var{c}.@var{d}:@var{p}\"}."
msgstr ""

# type: defun
#: lispref/processes.texi:2073
msgid ""
"A nine-element vector @code{[@var{a} @var{b} @var{c} @var{d} @var{e} @var{f} "
"@var{g} @var{h} @var{p}]} represents an IPv6 address along with a port "
"number.  @code{format-network-address} converts that to the string @code"
"{\"[@var{a}:@var{b}:@var{c}:@var{d}:@var{e}:@var{f}:@var{g}:@var{h}]:@var{p}"
"\"}."
msgstr ""

# type: defun
#: lispref/processes.texi:2077
msgid ""
"If the vector does not include the port number, @var{p}, or if @var{omit-"
"port} is non-@code{nil}, the result does not include the @code{:@var{p}} "
"suffix."
msgstr ""

# type: section
#: lispref/processes.texi:2080
#, no-wrap
msgid "Packing and Unpacking Byte Arrays"
msgstr ""

# type: cindex
#: lispref/processes.texi:2081
#, no-wrap
msgid "byte packing and unpacking"
msgstr ""

# type: Plain text
#: lispref/processes.texi:2088
msgid ""
"This section describes how to pack and unpack arrays of bytes, usually for "
"binary network protocols.  These functions convert byte arrays to alists, "
"and vice versa.  The byte array can be represented as a unibyte string or as "
"a vector of integers, while the alist associates symbols either with fixed-"
"size objects or with recursive sub-alists."
msgstr ""

# type: cindex
#: lispref/processes.texi:2089
#, no-wrap
msgid "serializing"
msgstr ""

# type: cindex
#: lispref/processes.texi:2090
#, no-wrap
msgid "deserializing"
msgstr ""

# type: cindex
#: lispref/processes.texi:2091
#, no-wrap
msgid "packing"
msgstr ""

# type: cindex
#: lispref/processes.texi:2092
#, no-wrap
msgid "unpacking"
msgstr ""

# type: Plain text
#: lispref/processes.texi:2096
msgid ""
"Conversion from byte arrays to nested alists is also known as @dfn"
"{deserializing} or @dfn{unpacking}, while going in the opposite direction is "
"also known as @dfn{serializing} or @dfn{packing}."
msgstr ""

# type: node
#: lispref/processes.texi:2101 lispref/processes.texi:2103
#, no-wrap
msgid "Bindat Spec"
msgstr ""

# type: menu
#: lispref/processes.texi:2101
msgid "Describing data layout."
msgstr ""

# type: node
#: lispref/processes.texi:2101 lispref/processes.texi:2276
#, no-wrap
msgid "Bindat Functions"
msgstr ""

# type: menu
#: lispref/processes.texi:2101
msgid "Doing the unpacking and packing."
msgstr ""

# type: node
#: lispref/processes.texi:2101 lispref/processes.texi:2342
#, no-wrap
msgid "Bindat Examples"
msgstr ""

# type: menu
#: lispref/processes.texi:2101
msgid "Samples of what bindat.el can do for you!"
msgstr ""

# type: subsection
#: lispref/processes.texi:2104
#, no-wrap
msgid "Describing Data Layout"
msgstr ""

# type: Plain text
#: lispref/processes.texi:2112
msgid ""
"To control unpacking and packing, you write a @dfn{data layout "
"specification}, a special nested list describing named and typed @dfn"
"{fields}.  This specification controls length of each field to be processed, "
"and how to pack or unpack it.  We normally keep bindat specs in variables "
"whose names end in @samp{-bindat-spec}; that kind of name is automatically "
"recognized as ``risky.''"
msgstr ""

# type: cindex
#: lispref/processes.texi:2113
#, no-wrap
msgid "endianness"
msgstr ""

# type: cindex
#: lispref/processes.texi:2114
#, no-wrap
msgid "big endian"
msgstr ""

# type: cindex
#: lispref/processes.texi:2115
#, no-wrap
msgid "little endian"
msgstr ""

# type: cindex
#: lispref/processes.texi:2116
#, no-wrap
msgid "network byte ordering"
msgstr ""

# type: Plain text
#: lispref/processes.texi:2125
msgid ""
"A field's @dfn{type} describes the size (in bytes) of the object that the "
"field represents and, in the case of multibyte fields, how the bytes are "
"ordered within the field.  The two possible orderings are ``big "
"endian'' (also known as ``network byte ordering'') and ``little endian.'' "
"For instance, the number @code{#x23cd} (decimal 9165) in big endian would be "
"the two bytes @code{#x23} @code{#xcd}; and in little endian, @code{#xcd} "
"@code{#x23}.  Here are the possible type values:"
msgstr ""

# type: item
#: lispref/processes.texi:2127
#, no-wrap
msgid "u8"
msgstr ""

# type: itemx
#: lispref/processes.texi:2128
#, no-wrap
msgid "byte"
msgstr ""

# type: table
#: lispref/processes.texi:2130
msgid "Unsigned byte, with length 1."
msgstr ""

# type: item
#: lispref/processes.texi:2131
#, no-wrap
msgid "u16"
msgstr ""

# type: itemx
#: lispref/processes.texi:2132
#, no-wrap
msgid "word"
msgstr ""

# type: itemx
#: lispref/processes.texi:2133
#, no-wrap
msgid "short"
msgstr ""

# type: table
#: lispref/processes.texi:2135
msgid "Unsigned integer in network byte order, with length 2."
msgstr ""

# type: item
#: lispref/processes.texi:2136
#, no-wrap
msgid "u24"
msgstr ""

# type: table
#: lispref/processes.texi:2138
msgid "Unsigned integer in network byte order, with length 3."
msgstr ""

# type: item
#: lispref/processes.texi:2139
#, no-wrap
msgid "u32"
msgstr ""

# type: itemx
#: lispref/processes.texi:2140
#, no-wrap
msgid "dword"
msgstr ""

# type: itemx
#: lispref/processes.texi:2141
#, no-wrap
msgid "long"
msgstr ""

# type: table
#: lispref/processes.texi:2144
msgid ""
"Unsigned integer in network byte order, with length 4.  Note: These values "
"may be limited by Emacs' integer implementation limits."
msgstr ""

# type: item
#: lispref/processes.texi:2145
#, no-wrap
msgid "u16r"
msgstr ""

# type: itemx
#: lispref/processes.texi:2146
#, no-wrap
msgid "u24r"
msgstr ""

# type: itemx
#: lispref/processes.texi:2147
#, no-wrap
msgid "u32r"
msgstr ""

# type: table
#: lispref/processes.texi:2149
msgid ""
"Unsigned integer in little endian order, with length 2, 3 and 4, "
"respectively."
msgstr ""

# type: item
#: lispref/processes.texi:2150
#, no-wrap
msgid "str @var{len}"
msgstr ""

# type: table
#: lispref/processes.texi:2152
msgid "String of length @var{len}."
msgstr ""

# type: item
#: lispref/processes.texi:2153
#, no-wrap
msgid "strz @var{len}"
msgstr ""

# type: table
#: lispref/processes.texi:2155
msgid "Zero-terminated string, in a fixed-size field with length @var{len}."
msgstr ""

# type: item
#: lispref/processes.texi:2156
#, no-wrap
msgid "vec @var{len} [@var{type}]"
msgstr ""

# type: table
#: lispref/processes.texi:2161
msgid ""
"Vector of @var{len} elements of type @var{type}, or bytes if not @var{type} "
"is specified.  The @var{type} is any of the simple types above, or another "
"vector specified as a list @code{(vec @var{len} [@var{type}])}."
msgstr ""

# type: item
#: lispref/processes.texi:2162
#, no-wrap
msgid "ip"
msgstr ""

# type: table
#: lispref/processes.texi:2165
msgid ""
"Four-byte vector representing an Internet address.  For example: @code{[127 "
"0 0 1]} for localhost."
msgstr ""

# type: item
#: lispref/processes.texi:2166
#, no-wrap
msgid "bits @var{len}"
msgstr ""

# type: table
#: lispref/processes.texi:2172
msgid ""
"List of set bits in @var{len} bytes.  The bytes are taken in big endian "
"order and the bits are numbered starting with @code{8 * @var{len} @minus{} "
"1} and ending with zero.  For example: @code{bits 2} unpacks @code{#x28} "
"@code{#x1c} to @code{(2 3 4 11 13)} and @code{#x1c} @code{#x28} to @code{(3 "
"5 10 11 12)}."
msgstr ""

# type: item
#: lispref/processes.texi:2173
#, no-wrap
msgid "(eval @var{form})"
msgstr ""

# type: table
#: lispref/processes.texi:2177
msgid ""
"@var{form} is a Lisp expression evaluated at the moment the field is "
"unpacked or packed.  The result of the evaluation should be one of the above-"
"listed type specifications."
msgstr ""

# type: Plain text
#: lispref/processes.texi:2181
msgid ""
"For a fixed-size field, the length @var{len} is given as an integer "
"specifying the number of bytes in the field."
msgstr ""

# type: Plain text
#: lispref/processes.texi:2188
msgid ""
"When the length of a field is not fixed, it typically depends on the value "
"of a preceding field.  In this case, the length @var{len} can be given "
"either as a list @code{(@var{name} ...)} identifying a @dfn{field name} in "
"the format specified for @code{bindat-get-field} below, or by an expression "
"@code{(eval @var{form})} where @var{form} should evaluate to an integer, "
"specifying the field length."
msgstr ""

# type: Plain text
#: lispref/processes.texi:2196
msgid ""
"A field specification generally has the form @code{([@var{name}] @var"
"{handler})}.  The square braces indicate that @var{name} is optional.  "
"(Don't use names that are symbols meaningful as type specifications (above) "
"or handler specifications (below), since that would be ambiguous.)  @var"
"{name} can be a symbol or the expression @code{(eval @var{form})}, in which "
"case @var{form} should evaluate to a symbol."
msgstr ""

# type: Plain text
#: lispref/processes.texi:2199
msgid ""
"@var{handler} describes how to unpack or pack the field and can be one of "
"the following:"
msgstr ""

# type: table
#: lispref/processes.texi:2203
msgid "Unpack/pack this field according to the type specification @var{type}."
msgstr ""

# type: item
#: lispref/processes.texi:2204
#, no-wrap
msgid "eval @var{form}"
msgstr ""

# type: table
#: lispref/processes.texi:2207
msgid ""
"Evaluate @var{form}, a Lisp expression, for side-effect only.  If the field "
"name is specified, the value is bound to that field name."
msgstr ""

# type: item
#: lispref/processes.texi:2208
#, no-wrap
msgid "fill @var{len}"
msgstr ""

# type: table
#: lispref/processes.texi:2212
msgid ""
"Skip @var{len} bytes.  In packing, this leaves them unchanged, which "
"normally means they remain zero.  In unpacking, this means they are ignored."
msgstr ""

# type: item
#: lispref/processes.texi:2213
#, no-wrap
msgid "align @var{len}"
msgstr ""

# type: table
#: lispref/processes.texi:2215
msgid "Skip to the next multiple of @var{len} bytes."
msgstr ""

# type: item
#: lispref/processes.texi:2216
#, no-wrap
msgid "struct @var{spec-name}"
msgstr ""

# type: table
#: lispref/processes.texi:2219
msgid ""
"Process @var{spec-name} as a sub-specification.  This describes a structure "
"nested within another structure."
msgstr ""

# type: item
#: lispref/processes.texi:2220
#, no-wrap
msgid "union @var{form} (@var{tag} @var{spec})@dots{}"
msgstr ""

# type: table
#: lispref/processes.texi:2226
msgid ""
"Evaluate @var{form}, a Lisp expression, find the first @var{tag} that "
"matches it, and process its associated data layout specification @var"
"{spec}.  Matching can occur in one of three ways:"
msgstr ""

# type: itemize
#: lispref/processes.texi:2232
msgid ""
"If a @var{tag} has the form @code{(eval @var{expr})}, evaluate @var{expr} "
"with the variable @code{tag} dynamically bound to the value of @var{form}.  "
"A non-@code{nil} result indicates a match."
msgstr ""

# type: itemize
#: lispref/processes.texi:2235
msgid "@var{tag} matches if it is @code{equal} to the value of @var{form}."
msgstr ""

# type: itemize
#: lispref/processes.texi:2238
msgid "@var{tag} matches unconditionally if it is @code{t}."
msgstr ""

# type: item
#: lispref/processes.texi:2240
#, no-wrap
msgid "repeat @var{count} @var{field-specs}@dots{}"
msgstr ""

# type: table
#: lispref/processes.texi:2246
msgid ""
"Process the @var{field-specs} recursively, in order, then repeat starting "
"from the first one, processing all the specs @var{count} times overall.  The "
"@var{count} is given using the same formats as a field length---if an @code"
"{eval} form is used, it is evaluated just once.  For correct operation, each "
"spec in @var{field-specs} must include a name."
msgstr ""

# type: Plain text
#: lispref/processes.texi:2251
msgid ""
"For the @code{(eval @var{form})} forms used in a bindat specification, the "
"@var{form} can access and update these dynamically bound variables during "
"evaluation:"
msgstr ""

# type: item
#: lispref/processes.texi:2253
#, no-wrap
msgid "last"
msgstr ""

# type: table
#: lispref/processes.texi:2255
msgid "Value of the last field processed."
msgstr ""

# type: item
#: lispref/processes.texi:2256
#, no-wrap
msgid "bindat-raw"
msgstr ""

# type: table
#: lispref/processes.texi:2258
msgid "The data as a byte array."
msgstr ""

# type: item
#: lispref/processes.texi:2259
#, no-wrap
msgid "bindat-idx"
msgstr ""

# type: table
#: lispref/processes.texi:2261
msgid "Current index (within @code{bindat-raw}) for unpacking or packing."
msgstr ""

# type: item
#: lispref/processes.texi:2262
#, no-wrap
msgid "struct"
msgstr ""

# type: table
#: lispref/processes.texi:2266
msgid ""
"The alist containing the structured data that have been unpacked so far, or "
"the entire structure being packed.  You can use @code{bindat-get-field} to "
"access specific fields of this structure."
msgstr ""

# type: item
#: lispref/processes.texi:2267
#, no-wrap
msgid "count"
msgstr ""

# type: itemx
#: lispref/processes.texi:2268
#, no-wrap
msgid "index"
msgstr ""

# type: table
#: lispref/processes.texi:2274
msgid ""
"Inside a @code{repeat} block, these contain the maximum number of "
"repetitions (as specified by the @var{count} parameter), and the current "
"repetition number (counting from 0).  Setting @code{count} to zero will "
"terminate the inner-most repeat block after the current repetition has "
"completed."
msgstr ""

# type: subsection
#: lispref/processes.texi:2277
#, no-wrap
msgid "Functions to Unpack and Pack Bytes"
msgstr ""

# type: Plain text
#: lispref/processes.texi:2282
msgid ""
"In the following documentation, @var{spec} refers to a data layout "
"specification, @code{bindat-raw} to a byte array, and @var{struct} to an "
"alist representing unpacked field data."
msgstr ""

# type: defun
#: lispref/processes.texi:2283
#, no-wrap
msgid "bindat-unpack spec bindat-raw &optional bindat-idx"
msgstr ""

# type: defun
#: lispref/processes.texi:2289
msgid ""
"This function unpacks data from the unibyte string or byte array @code"
"{bindat-raw} according to @var{spec}.  Normally this starts unpacking at the "
"beginning of the byte array, but if @var{bindat-idx} is non-@code{nil}, it "
"specifies a zero-based starting position to use instead."
msgstr ""

# type: defun
#: lispref/processes.texi:2292
msgid ""
"The value is an alist or nested alist in which each element describes one "
"unpacked field."
msgstr ""

# type: defun
#: lispref/processes.texi:2294
#, no-wrap
msgid "bindat-get-field struct &rest name"
msgstr ""

# type: defun
#: lispref/processes.texi:2301
msgid ""
"This function selects a field's data from the nested alist @var{struct}.  "
"Usually @var{struct} was returned by @code{bindat-unpack}.  If @var{name} "
"corresponds to just one argument, that means to extract a top-level field "
"value.  Multiple @var{name} arguments specify repeated lookup of sub-"
"structures.  An integer name acts as an array index."
msgstr ""

# type: defun
#: lispref/processes.texi:2305
msgid ""
"For example, if @var{name} is @code{(a b 2 c)}, that means to find field "
"@code{c} in the third element of subfield @code{b} of field @code{a}.  (This "
"corresponds to @code{struct.a.b[2].c} in C.)"
msgstr ""

# type: Plain text
#: lispref/processes.texi:2314
msgid ""
"Although packing and unpacking operations change the organization of data "
"(in memory), they preserve the data's @dfn{total length}, which is the sum "
"of all the fields' lengths, in bytes.  This value is not generally inherent "
"in either the specification or alist alone; instead, both pieces of "
"information contribute to its calculation.  Likewise, the length of a string "
"or array being unpacked may be longer than the data's total length as "
"described by the specification."
msgstr ""

# type: defun
#: lispref/processes.texi:2315
#, no-wrap
msgid "bindat-length spec struct"
msgstr ""

# type: defun
#: lispref/processes.texi:2318
msgid ""
"This function returns the total length of the data in @var{struct}, "
"according to @var{spec}."
msgstr ""

# type: defun
#: lispref/processes.texi:2320
#, no-wrap
msgid "bindat-pack spec struct &optional bindat-raw bindat-idx"
msgstr ""

# type: defun
#: lispref/processes.texi:2327
msgid ""
"This function returns a byte array packed according to @var{spec} from the "
"data in the alist @var{struct}.  Normally it creates and fills a new byte "
"array starting at the beginning.  However, if @var{bindat-raw} is non-@code"
"{nil}, it specifies a pre-allocated unibyte string or vector to pack into.  "
"If @var{bindat-idx} is non-@code{nil}, it specifies the starting offset for "
"packing into @code{bindat-raw}."
msgstr ""

# type: defun
#: lispref/processes.texi:2330
msgid ""
"When pre-allocating, you should make sure @code{(length @var{bindat-raw})} "
"meets or exceeds the total length to avoid an out-of-range error."
msgstr ""

# type: defun
#: lispref/processes.texi:2332
#, no-wrap
msgid "bindat-ip-to-string ip"
msgstr ""

# type: defun
#: lispref/processes.texi:2335
msgid ""
"Convert the Internet address vector @var{ip} to a string in the usual dotted "
"notation."
msgstr ""

# type: example
#: lispref/processes.texi:2339
#, no-wrap
msgid ""
"(bindat-ip-to-string [127 0 0 1])\n"
"     @result{} \"127.0.0.1\"\n"
msgstr ""

# type: subsection
#: lispref/processes.texi:2343
#, no-wrap
msgid "Examples of Byte Unpacking and Packing"
msgstr ""

# type: Plain text
#: lispref/processes.texi:2346
msgid "Here is a complete example of byte unpacking and packing:"
msgstr ""

# type: lisp
#: lispref/processes.texi:2359
#, no-wrap
msgid ""
"(defvar fcookie-index-spec\n"
"  '((:version  u32)\n"
"    (:count    u32)\n"
"    (:longest  u32)\n"
"    (:shortest u32)\n"
"    (:flags    u32)\n"
"    (:delim    u8)\n"
"    (:ignored  fill 3)\n"
"    (:offset   repeat (:count)\n"
"               (:foo u32)))\n"
"  \"Description of a fortune cookie index file's contents.\")\n"
"\n"
msgstr ""

# type: lisp
#: lispref/processes.texi:2385
#, no-wrap
msgid ""
"(defun fcookie (cookies &optional index)\n"
"  \"Display a random fortune cookie from file COOKIES.\n"
"Optional second arg INDEX specifies the associated index\n"
"filename, which is by default constructed by appending\n"
"\\\".dat\\\" to COOKIES.  Display cookie text in possibly\n"
"new buffer \\\"*Fortune Cookie: BASENAME*\\\" where BASENAME\n"
"is COOKIES without the directory part.\"\n"
"  (interactive \"fCookies file: \")\n"
"  (let* ((info (with-temp-buffer\n"
"                 (insert-file-contents-literally\n"
"                  (or index (concat cookies \".dat\")))\n"
"                 (bindat-unpack fcookie-index-spec\n"
"                                (buffer-string))))\n"
"         (sel (random (bindat-get-field info :count)))\n"
"         (beg (cdar (bindat-get-field info :offset sel)))\n"
"         (end (or (cdar (bindat-get-field info\n"
"                                          :offset (1+ sel)))\n"
"                  (nth 7 (file-attributes cookies)))))\n"
"    (switch-to-buffer\n"
"     (get-buffer-create\n"
"      (format \"*Fortune Cookie: %s*\"\n"
"              (file-name-nondirectory cookies))))\n"
"    (erase-buffer)\n"
"    (insert-file-contents-literally\n"
"     cookies nil beg (- end 3))))\n"
"\n"
msgstr ""

# type: lisp
#: lispref/processes.texi:2426
#, no-wrap
msgid ""
"(defun fcookie-create-index (cookies &optional index delim)\n"
"  \"Scan file COOKIES, and write out its index file.\n"
"Optional second arg INDEX specifies the index filename,\n"
"which is by default constructed by appending \\\".dat\\\" to\n"
"COOKIES.  Optional third arg DELIM specifies the unibyte\n"
"character which, when found on a line of its own in\n"
"COOKIES, indicates the border between entries.\"\n"
"  (interactive \"fCookies file: \")\n"
"  (setq delim (or delim ?%))\n"
"  (let ((delim-line (format \"\\n%c\\n\" delim))\n"
"        (count 0)\n"
"        (max 0)\n"
"        min p q len offsets)\n"
"    (unless (= 3 (string-bytes delim-line))\n"
"      (error \"Delimiter cannot be represented in one byte\"))\n"
"    (with-temp-buffer\n"
"      (insert-file-contents-literally cookies)\n"
"      (while (and (setq p (point))\n"
"                  (search-forward delim-line (point-max) t)\n"
"                  (setq len (- (point) 3 p)))\n"
"        (setq count (1+ count)\n"
"              max (max max len)\n"
"              min (min (or min max) len)\n"
"              offsets (cons (1- p) offsets))))\n"
"    (with-temp-buffer\n"
"      (set-buffer-multibyte nil)\n"
"      (insert\n"
"       (bindat-pack\n"
"        fcookie-index-spec\n"
"        `((:version . 2)\n"
"          (:count . ,count)\n"
"          (:longest . ,max)\n"
"          (:shortest . ,min)\n"
"          (:flags . 0)\n"
"          (:delim . ,delim)\n"
"          (:offset . ,(mapcar (lambda (o)\n"
"                                (list (cons :foo o)))\n"
"                              (nreverse offsets))))))\n"
"      (let ((coding-system-for-write 'raw-text-unix))\n"
"        (write-file (or index (concat cookies \".dat\")))))))\n"
msgstr ""

# type: Plain text
#: lispref/processes.texi:2430
msgid ""
"Following is an example of defining and unpacking a complex structure.  "
"Consider the following C structures:"
msgstr ""

# type: example
#: lispref/processes.texi:2438
#, no-wrap
msgid ""
"struct header @{\n"
"    unsigned long    dest_ip;\n"
"    unsigned long    src_ip;\n"
"    unsigned short   dest_port;\n"
"    unsigned short   src_port;\n"
"@};\n"
"\n"
msgstr ""

# type: example
#: lispref/processes.texi:2446
#, no-wrap
msgid ""
"struct data @{\n"
"    unsigned char    type;\n"
"    unsigned char    opcode;\n"
"    unsigned short   length;  /* In network byte order */\n"
"    unsigned char    id[8];   /* null-terminated string  */\n"
"    unsigned char    data[/* (length + 3) & ~3 */];\n"
"@};\n"
"\n"
msgstr ""

# type: example
#: lispref/processes.texi:2453
#, no-wrap
msgid ""
"struct packet @{\n"
"    struct header    header;\n"
"    unsigned long    counters[2];  /* In little endian order */\n"
"    unsigned char    items;\n"
"    unsigned char    filler[3];\n"
"    struct data      item[/* items */];\n"
"\n"
msgstr ""

# type: example
#: lispref/processes.texi:2455
#, no-wrap
msgid "@};\n"
msgstr ""

# type: Plain text
#: lispref/processes.texi:2458
msgid "The corresponding data layout specification:"
msgstr ""

# type: lisp
#: lispref/processes.texi:2465
#, no-wrap
msgid ""
"(setq header-spec\n"
"      '((dest-ip   ip)\n"
"        (src-ip    ip)\n"
"        (dest-port u16)\n"
"        (src-port  u16)))\n"
"\n"
msgstr ""

# type: lisp
#: lispref/processes.texi:2473
#, no-wrap
msgid ""
"(setq data-spec\n"
"      '((type      u8)\n"
"        (opcode    u8)\n"
"        (length    u16)  ;; network byte order\n"
"        (id        strz 8)\n"
"        (data      vec (length))\n"
"        (align     4)))\n"
"\n"
msgstr ""

# type: lisp
#: lispref/processes.texi:2481
#, no-wrap
msgid ""
"(setq packet-spec\n"
"      '((header    struct header-spec)\n"
"        (counters  vec 2 u32r)   ;; little endian order\n"
"        (items     u8)\n"
"        (fill      3)\n"
"        (item      repeat (items)\n"
"                   (struct data-spec))))\n"
msgstr ""

# type: Plain text
#: lispref/processes.texi:2484
msgid "A binary data representation:"
msgstr ""

# type: lisp
#: lispref/processes.texi:2491
#, no-wrap
msgid ""
"(setq binary-data\n"
"      [ 192 168 1 100 192 168 1 101 01 28 21 32\n"
"        160 134 1 0 5 1 0 0 2 0 0 0\n"
"        2 3 0 5 ?A ?B ?C ?D ?E ?F 0 0 1 2 3 4 5 0 0 0\n"
"        1 4 0 7 ?B ?C ?D ?E ?F ?G 0 0 6 7 8 9 10 11 12 0 ])\n"
msgstr ""

# type: Plain text
#: lispref/processes.texi:2494
msgid "The corresponding decoded structure:"
msgstr ""

# type: lisp
#: lispref/processes.texi:2515
#, no-wrap
msgid ""
"(setq decoded (bindat-unpack packet-spec binary-data))\n"
"     @result{}\n"
"((header\n"
"  (dest-ip   . [192 168 1 100])\n"
"  (src-ip    . [192 168 1 101])\n"
"  (dest-port . 284)\n"
"  (src-port  . 5408))\n"
" (counters . [100000 261])\n"
" (items . 2)\n"
" (item ((data . [1 2 3 4 5])\n"
"        (id . \"ABCDEF\")\n"
"        (length . 5)\n"
"        (opcode . 3)\n"
"        (type . 2))\n"
"       ((data . [6 7 8 9 10 11 12])\n"
"        (id . \"BCDEFG\")\n"
"        (length . 7)\n"
"        (opcode . 4)\n"
"        (type . 1))))\n"
msgstr ""

# type: Plain text
#: lispref/processes.texi:2518
msgid "Fetching data from this structure:"
msgstr ""

# type: lisp
#: lispref/processes.texi:2522
#, no-wrap
msgid ""
"(bindat-get-field decoded 'item 1 'id)\n"
"     @result{} \"BCDEFG\"\n"
msgstr ""

# type: ignore
#: lispref/processes.texi:2526
#, no-wrap
msgid "   arch-tag: ba9da253-e65f-4e7f-b727-08fba0a1df7a\n"
msgstr "   arch-tag: ba9da253-e65f-4e7f-b727-08fba0a1df7a\n"

# type: cindex
#: lispref/searching.texi:9
#, no-wrap
msgid "searching"
msgstr ""

# type: Plain text
#: lispref/searching.texi:16
msgid ""
"GNU Emacs provides two ways to search through a buffer for specified text: "
"exact string searches and regular expression searches.  After a regular "
"expression search, you can examine the @dfn{match data} to determine which "
"text matched the whole regular expression or various portions of it."
msgstr ""

# type: menu
#: lispref/searching.texi:27 lispref/searching.texi:33 lispref/vol1.texi:843
#: lispref/vol2.texi:844
#, no-wrap
msgid "String Search"
msgstr ""

# type: menu
#: lispref/searching.texi:27 lispref/vol1.texi:843 lispref/vol2.texi:844
msgid "Search for an exact match."
msgstr ""

# type: menu
#: lispref/searching.texi:27 lispref/searching.texi:165
#: lispref/searching.texi:166 lispref/vol1.texi:843 lispref/vol2.texi:844
#, no-wrap
msgid "Searching and Case"
msgstr ""

# type: menu
#: lispref/searching.texi:27 lispref/vol1.texi:843 lispref/vol2.texi:844
msgid "Case-independent or case-significant searching."
msgstr ""

# type: menu
#: lispref/searching.texi:27 lispref/searching.texi:212
#: lispref/searching.texi:213 lispref/vol1.texi:843 lispref/vol1.texi:845
#: lispref/vol2.texi:844 lispref/vol2.texi:846
#, no-wrap
msgid "Regular Expressions"
msgstr ""

# type: menu
#: lispref/searching.texi:27 lispref/vol1.texi:843 lispref/vol2.texi:844
msgid "Describing classes of strings."
msgstr ""

# type: menu
#: lispref/searching.texi:27 lispref/searching.texi:923 lispref/vol1.texi:843
#: lispref/vol2.texi:844
#, no-wrap
msgid "Regexp Search"
msgstr ""

# type: menu
#: lispref/searching.texi:27 lispref/vol1.texi:843 lispref/vol2.texi:844
msgid "Searching for a match for a regexp."
msgstr ""

# type: node
#: lispref/searching.texi:27 lispref/searching.texi:1119
#, no-wrap
msgid "POSIX Regexps"
msgstr ""

# type: menu
#: lispref/searching.texi:27
msgid "Searching POSIX-style for the longest match."
msgstr ""

# type: menu
#: lispref/searching.texi:27 lispref/searching.texi:1162 lispref/vol1.texi:843
#: lispref/vol2.texi:844
#, no-wrap
msgid "Match Data"
msgstr ""

# type: menu
#: lispref/searching.texi:27
msgid "Finding out which part of the text matched,"
msgstr ""

# type: menu
#: lispref/searching.texi:27
msgid "after a string or regexp search."
msgstr ""

# type: section
#: lispref/searching.texi:27 lispref/searching.texi:1544
#: lispref/searching.texi:1545
#, no-wrap
msgid "Search and Replace"
msgstr ""

# type: menu
#: lispref/searching.texi:27
msgid "Commands that loop, searching and replacing."
msgstr ""

# type: menu
#: lispref/searching.texi:27 lispref/searching.texi:1695 lispref/vol1.texi:843
#: lispref/vol2.texi:844
#, no-wrap
msgid "Standard Regexps"
msgstr ""

# type: menu
#: lispref/searching.texi:27 lispref/vol1.texi:843 lispref/vol2.texi:844
msgid "Useful regexps for finding sentences, pages,..."
msgstr ""

# type: Plain text
#: lispref/searching.texi:32
msgid ""
"The @samp{skip-chars@dots{}} functions also perform a kind of searching.  "
"@xref{Skipping Characters}.  To search for changes in character properties, "
"see @ref{Property Search}."
msgstr ""

# type: section
#: lispref/searching.texi:34
#, no-wrap
msgid "Searching for Strings"
msgstr ""

# type: cindex
#: lispref/searching.texi:35
#, no-wrap
msgid "string search"
msgstr ""

# type: Plain text
#: lispref/searching.texi:42
msgid ""
"These are the primitive functions for searching through the text in a "
"buffer.  They are meant for use in programs, but you may call them "
"interactively.  If you do so, they prompt for the search string; the "
"arguments @var{limit} and @var{noerror} are @code{nil}, and @var{repeat} is "
"1."
msgstr ""

# type: Plain text
#: lispref/searching.texi:46
msgid ""
"These search functions convert the search string to multibyte if the buffer "
"is multibyte; they convert the search string to unibyte if the buffer is "
"unibyte.  @xref{Text Representations}."
msgstr ""

# type: deffn
#: lispref/searching.texi:47
#, no-wrap
msgid "Command search-forward string &optional limit noerror repeat"
msgstr ""

# type: deffn
#: lispref/searching.texi:53
msgid ""
"This function searches forward from point for an exact match for @var"
"{string}.  If successful, it sets point to the end of the occurrence found, "
"and returns the new value of point.  If no match is found, the value and "
"side effects depend on @var{noerror} (see below)."
msgstr ""

# type: deffn
#: lispref/searching.texi:57
msgid ""
"In the following example, point is initially at the beginning of the line.  "
"Then @code{(search-forward \"fox\")} moves point after the last letter of "
"@samp{fox}:"
msgstr ""

# type: group
#: lispref/searching.texi:63
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"@point{}The quick brown fox jumped over the lazy dog.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: group
#: lispref/searching.texi:68
#, no-wrap
msgid ""
"(search-forward \"fox\")\n"
"     @result{} 20\n"
"\n"
msgstr ""

# type: group
#: lispref/searching.texi:72
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"The quick brown fox@point{} jumped over the lazy dog.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: deffn
#: lispref/searching.texi:79
msgid ""
"The argument @var{limit} specifies the upper bound to the search.  (It must "
"be a position in the current buffer.)  No match extending after that "
"position is accepted.  If @var{limit} is omitted or @code{nil}, it defaults "
"to the end of the accessible portion of the buffer."
msgstr ""

# type: deffn
#: lispref/searching.texi:89
msgid ""
"What happens when the search fails depends on the value of @var{noerror}.  "
"If @var{noerror} is @code{nil}, a @code{search-failed} error is signaled.  "
"If @var{noerror} is @code{t}, @code{search-forward} returns @code{nil} and "
"does nothing.  If @var{noerror} is neither @code{nil} nor @code{t}, then "
"@code{search-forward} moves point to the upper bound and returns @code"
"{nil}.  (It would be more consistent now to return the new position of point "
"in that case, but some existing programs may depend on a value of @code"
"{nil}.)"
msgstr ""

# type: deffn
#: lispref/searching.texi:93
msgid ""
"The argument @var{noerror} only affects valid searches which fail to find a "
"match.  Invalid arguments cause errors regardless of @var{noerror}."
msgstr ""

# type: deffn
#: lispref/searching.texi:100
msgid ""
"If @var{repeat} is supplied (it must be a positive number), then the search "
"is repeated that many times (each time starting at the end of the previous "
"time's match).  If these successive searches succeed, the function succeeds, "
"moving point and returning its new value.  Otherwise the search fails, with "
"results depending on the value of @var{noerror}, as described above."
msgstr ""

# type: deffn
#: lispref/searching.texi:102
#, no-wrap
msgid "Command search-backward string &optional limit noerror repeat"
msgstr ""

# type: deffn
#: lispref/searching.texi:106
msgid ""
"This function searches backward from point for @var{string}.  It is just "
"like @code{search-forward} except that it searches backwards and leaves "
"point at the beginning of the match."
msgstr ""

# type: deffn
#: lispref/searching.texi:108
#, no-wrap
msgid "Command word-search-forward string &optional limit noerror repeat"
msgstr ""

# type: deffn
#: lispref/searching.texi:114
msgid ""
"This function searches forward from point for a ``word'' match for @var"
"{string}.  If it finds a match, it sets point to the end of the match found, "
"and returns the new value of point."
msgstr ""

# type: deffn
#: lispref/searching.texi:121
msgid ""
"Word matching regards @var{string} as a sequence of words, disregarding "
"punctuation that separates them.  It searches the buffer for the same "
"sequence of words.  Each word must be distinct in the buffer (searching for "
"the word @samp{ball} does not match the word @samp{balls}), but the details "
"of punctuation and spacing are ignored (searching for @samp{ball boy} does "
"match @samp{ball.  Boy!})."
msgstr ""

# type: deffn
#: lispref/searching.texi:124
msgid ""
"In this example, point is initially at the beginning of the buffer; the "
"search leaves it between the @samp{y} and the @samp{!}."
msgstr ""

# type: group
#: lispref/searching.texi:131
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"@point{}He said \"Please!  Find\n"
"the ball boy!\"\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: group
#: lispref/searching.texi:136
#, no-wrap
msgid ""
"(word-search-forward \"Please find the ball, boy.\")\n"
"     @result{} 35\n"
"\n"
msgstr ""

# type: group
#: lispref/searching.texi:141
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"He said \"Please!  Find\n"
"the ball boy@point{}!\"\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: deffn
#: lispref/searching.texi:147
msgid ""
"If @var{limit} is non-@code{nil}, it must be a position in the current "
"buffer; it specifies the upper bound to the search.  The match found must "
"not extend after that position."
msgstr ""

# type: deffn
#: lispref/searching.texi:153
msgid ""
"If @var{noerror} is @code{nil}, then @code{word-search-forward} signals an "
"error if the search fails.  If @var{noerror} is @code{t}, then it returns "
"@code{nil} instead of signaling an error.  If @var{noerror} is neither @code"
"{nil} nor @code{t}, it moves point to @var{limit} (or the end of the "
"accessible portion of the buffer) and returns @code{nil}."
msgstr ""

# type: deffn
#: lispref/searching.texi:156
msgid ""
"If @var{repeat} is non-@code{nil}, then the search is repeated that many "
"times.  Point is positioned at the end of the last match."
msgstr ""

# type: deffn
#: lispref/searching.texi:158
#, no-wrap
msgid "Command word-search-backward string &optional limit noerror repeat"
msgstr ""

# type: deffn
#: lispref/searching.texi:163
msgid ""
"This function searches backward from point for a word match to @var"
"{string}.  This function is just like @code{word-search-forward} except that "
"it searches backward and normally leaves point at the beginning of the match."
msgstr ""

# type: cindex
#: lispref/searching.texi:167
#, no-wrap
msgid "searching and case"
msgstr ""

# type: Plain text
#: lispref/searching.texi:174
msgid ""
"By default, searches in Emacs ignore the case of the text they are searching "
"through; if you specify searching for @samp{FOO}, then @samp{Foo} or @samp"
"{foo} is also considered a match.  This applies to regular expressions, too; "
"thus, @samp{[aB]} would match @samp{a} or @samp{A} or @samp{b} or @samp{B}."
msgstr ""

# type: Plain text
#: lispref/searching.texi:182
msgid ""
"If you do not want this feature, set the variable @code{case-fold-search} to "
"@code{nil}.  Then all letters must match exactly, including case.  This is a "
"buffer-local variable; altering the variable affects only the current "
"buffer.  (@xref{Intro to Buffer-Local}.)  Alternatively, you may change the "
"value of @code{default-case-fold-search}, which is the default value of @code"
"{case-fold-search} for buffers that do not override it."
msgstr ""

# type: Plain text
#: lispref/searching.texi:188
msgid ""
"Note that the user-level incremental search feature handles case "
"distinctions differently.  When given a lower case letter, it looks for a "
"match of either case, but when given an upper case letter, it looks for an "
"upper case letter only.  But this has nothing to do with the searching "
"functions used in Lisp code."
msgstr ""

# type: defopt
#: lispref/searching.texi:189
#, no-wrap
msgid "case-replace"
msgstr "case-replace"

# type: defopt
#: lispref/searching.texi:195
msgid ""
"This variable determines whether the higher level replacement functions "
"should preserve case.  If the variable is @code{nil}, that means to use the "
"replacement text verbatim.  A non-@code{nil} value means to convert the case "
"of the replacement text according to the text being replaced."
msgstr ""

# type: defopt
#: lispref/searching.texi:198
msgid ""
"This variable is used by passing it as an argument to the function @code"
"{replace-match}.  @xref{Replacing Match}."
msgstr ""

# type: defopt
#: lispref/searching.texi:204
msgid ""
"This buffer-local variable determines whether searches should ignore case.  "
"If the variable is @code{nil} they do not ignore case; otherwise they do "
"ignore case."
msgstr ""

# type: defvar
#: lispref/searching.texi:206
#, no-wrap
msgid "default-case-fold-search"
msgstr "default-case-fold-search"

# type: defvar
#: lispref/searching.texi:210
msgid ""
"The value of this variable is the default value for @code{case-fold-search} "
"in buffers that do not override it.  This is the same as @code{(default-"
"value 'case-fold-search)}."
msgstr ""

# type: cindex
#: lispref/searching.texi:214
#, no-wrap
msgid "regular expression"
msgstr ""

# type: Plain text
#: lispref/searching.texi:221
msgid ""
"A @dfn{regular expression} (@dfn{regexp}, for short) is a pattern that "
"denotes a (possibly infinite) set of strings.  Searching for matches for a "
"regexp is a very powerful operation.  This section explains how to write "
"regexps; the following section says how to search for them."
msgstr ""

# type: findex
#: lispref/searching.texi:222
#, no-wrap
msgid "re-builder"
msgstr "re-builder"

# type: cindex
#: lispref/searching.texi:223
#, no-wrap
msgid "regular expressions, developing"
msgstr ""

# type: Plain text
#: lispref/searching.texi:231
msgid ""
"For convenient interactive development of regular expressions, you can use "
"the @kbd{M-x re-builder} command.  It provides a convenient interface for "
"creating regular expressions, by giving immediate visual feedback in a "
"separate buffer.  As you edit the regexp, all its matches in the target "
"buffer are highlighted.  Each parenthesized sub-expression of the regexp is "
"shown in a distinct face, which makes it easier to verify even very complex "
"regexps."
msgstr ""

# type: menu
#: lispref/searching.texi:236 lispref/searching.texi:238 lispref/vol1.texi:848
#: lispref/vol2.texi:849
#, no-wrap
msgid "Syntax of Regexps"
msgstr ""

# type: menu
#: lispref/searching.texi:236 lispref/vol1.texi:848 lispref/vol2.texi:849
msgid "Rules for writing regular expressions."
msgstr ""

# type: menu
#: lispref/searching.texi:236 lispref/searching.texi:790 lispref/vol1.texi:848
#: lispref/vol2.texi:849
#, no-wrap
msgid "Regexp Example"
msgstr ""

# type: menu
#: lispref/searching.texi:236 lispref/vol1.texi:848 lispref/vol2.texi:849
msgid "Illustrates regular expression syntax."
msgstr ""

# type: node
#: lispref/searching.texi:236 lispref/searching.texi:857
#, no-wrap
msgid "Regexp Functions"
msgstr ""

# type: menu
#: lispref/searching.texi:236
msgid "Functions for operating on regular expressions."
msgstr ""

# type: subsection
#: lispref/searching.texi:239
#, no-wrap
msgid "Syntax of Regular Expressions"
msgstr ""

# type: Plain text
#: lispref/searching.texi:252
msgid ""
"Regular expressions have a syntax in which a few characters are special "
"constructs and the rest are @dfn{ordinary}.  An ordinary character is a "
"simple regular expression that matches that character and nothing else.  The "
"special characters are @samp{.}, @samp{*}, @samp{+}, @samp{?}, @samp{[}, "
"@samp{^}, @samp{$}, and @samp{\\}; no new special characters will be defined "
"in the future.  The character @samp{]} is special if it ends a character "
"alternative (see later).  The character @samp{-} is special inside a "
"character alternative.  A @samp{[:} and balancing @samp{:]} enclose a "
"character class inside a character alternative.  Any other character "
"appearing in a regular expression is ordinary, unless a @samp{\\} precedes "
"it."
msgstr ""

# type: Plain text
#: lispref/searching.texi:258
msgid ""
"For example, @samp{f} is not a special character, so it is ordinary, and "
"therefore @samp{f} is a regular expression that matches the string @samp{f} "
"and no other string.  (It does @emph{not} match the string @samp{fg}, but it "
"does match a @emph{part} of that string.)  Likewise, @samp{o} is a regular "
"expression that matches only @samp{o}."
msgstr ""

# type: Plain text
#: lispref/searching.texi:263
msgid ""
"Any two regular expressions @var{a} and @var{b} can be concatenated.  The "
"result is a regular expression that matches a string if @var{a} matches some "
"amount of the beginning of that string and @var{b} matches the rest of the "
"string."
msgstr ""

# type: Plain text
#: lispref/searching.texi:268
msgid ""
"As a simple example, we can concatenate the regular expressions @samp{f} and "
"@samp{o} to get the regular expression @samp{fo}, which matches only the "
"string @samp{fo}.  Still trivial.  To do something more powerful, you need "
"to use one of the special regular expression constructs."
msgstr ""

# type: node
#: lispref/searching.texi:273 lispref/searching.texi:275
#, no-wrap
msgid "Regexp Special"
msgstr ""

# type: menu
#: lispref/searching.texi:273
msgid "Special characters in regular expressions."
msgstr ""

# type: node
#: lispref/searching.texi:273 lispref/searching.texi:509
#, no-wrap
msgid "Char Classes"
msgstr ""

# type: menu
#: lispref/searching.texi:273
msgid "Character classes used in regular expressions."
msgstr ""

# type: node
#: lispref/searching.texi:273 lispref/searching.texi:564
#, no-wrap
msgid "Regexp Backslash"
msgstr ""

# type: menu
#: lispref/searching.texi:273
msgid "Backslash-sequences in regular expressions."
msgstr ""

# type: subsubsection
#: lispref/searching.texi:276
#, no-wrap
msgid "Special Characters in Regular Expressions"
msgstr ""

# type: Plain text
#: lispref/searching.texi:280
msgid ""
"Here is a list of the characters that are special in a regular expression."
msgstr ""

# type: item
#: lispref/searching.texi:283
#, no-wrap
msgid "@samp{.}@: @r{(Period)}"
msgstr ""

# type: cindex
#: lispref/searching.texi:284
#, no-wrap
msgid "@samp{.} in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:289
msgid ""
"is a special character that matches any single character except a newline.  "
"Using concatenation, we can make regular expressions like @samp{a.b}, which "
"matches any three-character string that begins with @samp{a} and ends with "
"@samp{b}."
msgstr ""

# type: cindex
#: lispref/searching.texi:291
#, no-wrap
msgid "@samp{*} in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:296
msgid ""
"is not a construct by itself; it is a postfix operator that means to match "
"the preceding regular expression repetitively as many times as possible.  "
"Thus, @samp{o*} matches any number of @samp{o}s (including no @samp{o}s)."
msgstr ""

# type: table
#: lispref/searching.texi:300
msgid ""
"@samp{*} always applies to the @emph{smallest} possible preceding "
"expression.  Thus, @samp{fo*} has a repeating @samp{o}, not a repeating @samp"
"{fo}.  It matches @samp{f}, @samp{fo}, @samp{foo}, and so on."
msgstr ""

# type: table
#: lispref/searching.texi:311
msgid ""
"The matcher processes a @samp{*} construct by matching, immediately, as many "
"repetitions as can be found.  Then it continues with the rest of the "
"pattern.  If that fails, backtracking occurs, discarding some of the matches "
"of the @samp{*}-modified construct in the hope that that will make it "
"possible to match the rest of the pattern.  For example, in matching @samp"
"{ca*ar} against the string @samp{caaar}, the @samp{a*} first tries to match "
"all three @samp{a}s; but the rest of the pattern is @samp{ar} and there is "
"only @samp{r} left to match, so this try fails.  The next alternative is for "
"@samp{a*} to match only two @samp{a}s.  With this choice, the rest of the "
"regexp matches successfully."
msgstr ""

# type: table
#: lispref/searching.texi:322
msgid ""
"@strong{Warning:} Nested repetition operators can run for an indefinitely "
"long time, if they lead to ambiguous matching.  For example, trying to match "
"the regular expression @samp{\\(x+y*\\)*a} against the string @samp"
"{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxz} could take hours before it "
"ultimately fails.  Emacs must try each way of grouping the @samp{x}s before "
"concluding that none of them can work.  Even worse, @samp{\\(x*\\)*} can "
"match the null string in infinitely many ways, so it causes an infinite "
"loop.  To avoid these problems, check nested repetitions carefully, to make "
"sure that they do not cause combinatorial explosions in backtracking."
msgstr ""

# type: samp{#1}
#: lispref/searching.texi:323
#, no-wrap
msgid "+"
msgstr "+"

# type: cindex
#: lispref/searching.texi:324
#, no-wrap
msgid "@samp{+} in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:329
msgid ""
"is a postfix operator, similar to @samp{*} except that it must match the "
"preceding expression at least once.  So, for example, @samp{ca+r} matches "
"the strings @samp{car} and @samp{caaaar} but not the string @samp{cr}, "
"whereas @samp{ca*r} matches all three strings."
msgstr ""

# type: cindex
#: lispref/searching.texi:331
#, no-wrap
msgid "@samp{?} in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:335
msgid ""
"is a postfix operator, similar to @samp{*} except that it must match the "
"preceding expression either once or not at all.  For example, @samp{ca?r} "
"matches @samp{car} or @samp{cr}; nothing else."
msgstr ""

# type: item
#: lispref/searching.texi:336
#, no-wrap
msgid "@samp{*?}, @samp{+?}, @samp{??}"
msgstr "@samp{*?}, @samp{+?}, @samp{??}"

# type: table
#: lispref/searching.texi:342
msgid ""
"These are ``non-greedy'' variants of the operators @samp{*}, @samp{+} and "
"@samp{?}.  Where those operators match the largest possible substring "
"(consistent with matching the entire containing expression), the non-greedy "
"variants match the smallest possible substring (consistent with matching the "
"entire containing expression)."
msgstr ""

# type: table
#: lispref/searching.texi:348
msgid ""
"For example, the regular expression @samp{c[ad]*a} when applied to the "
"string @samp{cdaaada} matches the whole string; but the regular expression "
"@samp{c[ad]*?a}, applied to that same string, matches just @samp{cda}.  (The "
"smallest possible match here for @samp{[ad]*?} that permits the whole "
"expression to match is @samp{d}.)"
msgstr ""

# type: samp{#1}
#: lispref/searching.texi:349
#, no-wrap
msgid "[ @dots{} ]"
msgstr "[ @dots{} ]"

# type: cindex
#: lispref/searching.texi:350
#, no-wrap
msgid "character alternative (in regexp)"
msgstr ""

# type: cindex
#: lispref/searching.texi:351
#, no-wrap
msgid "@samp{[} in regexp"
msgstr ""

# type: cindex
#: lispref/searching.texi:352
#, no-wrap
msgid "@samp{]} in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:356
msgid ""
"is a @dfn{character alternative}, which begins with @samp{[} and is "
"terminated by @samp{]}.  In the simplest case, the characters between the "
"two brackets are what this character alternative can match."
msgstr ""

# type: table
#: lispref/searching.texi:361
msgid ""
"Thus, @samp{[ad]} matches either one @samp{a} or one @samp{d}, and @samp{[ad]"
"*} matches any string composed of just @samp{a}s and @samp{d}s (including "
"the empty string), from which it follows that @samp{c[ad]*r} matches @samp"
"{cr}, @samp{car}, @samp{cdr}, @samp{caddaar}, etc."
msgstr ""

# type: table
#: lispref/searching.texi:368
msgid ""
"You can also include character ranges in a character alternative, by writing "
"the starting and ending characters with a @samp{-} between them.  Thus, @samp"
"{[a-z]} matches any lower-case @acronym{ASCII} letter.  Ranges may be "
"intermixed freely with individual characters, as in @samp{[a-z$%.]}, which "
"matches any lower case @acronym{ASCII} letter or @samp{$}, @samp{%} or "
"period."
msgstr ""

# type: table
#: lispref/searching.texi:372
msgid ""
"Note that the usual regexp special characters are not special inside a "
"character alternative.  A completely different set of characters is special "
"inside character alternatives: @samp{]}, @samp{-} and @samp{^}."
msgstr ""

# type: table
#: lispref/searching.texi:378
msgid ""
"To include a @samp{]} in a character alternative, you must make it the first "
"character.  For example, @samp{[]a]} matches @samp{]} or @samp{a}.  To "
"include a @samp{-}, write @samp{-} as the first or last character of the "
"character alternative, or put it after a range.  Thus, @samp{[]-]} matches "
"both @samp{]} and @samp{-}."
msgstr ""

# type: table
#: lispref/searching.texi:381
msgid ""
"To include @samp{^} in a character alternative, put it anywhere but at the "
"beginning."
msgstr ""

# type: table
#: lispref/searching.texi:390
msgid ""
"The beginning and end of a range of multibyte characters must be in the same "
"character set (@pxref{Character Sets}).  Thus, @code{\"[\\x8e0-\\x97c]\"} is "
"invalid because character 0x8e0 (@samp{a} with grave accent) is in the Emacs "
"character set for Latin-1 but the character 0x97c (@samp{u} with diaeresis) "
"is in the Emacs character set for Latin-2.  (We use Lisp string syntax to "
"write that example, and a few others in the next few paragraphs, in order to "
"include hex escape sequences in them.)"
msgstr ""

# type: table
#: lispref/searching.texi:396
msgid ""
"If a range starts with a unibyte character @var{c} and ends with a multibyte "
"character @var{c2}, the range is divided into two parts: one is @samp{@var"
"{c}..?\\377}, the other is @samp{@var{c1}..@var{c2}}, where @var{c1} is the "
"first character of the charset to which @var{c2} belongs."
msgstr ""

# type: table
#: lispref/searching.texi:405
msgid ""
"You cannot always match all non-@acronym{ASCII} characters with the regular "
"expression @code{\"[\\200-\\377]\"}.  This works when searching a unibyte "
"buffer or string (@pxref{Text Representations}), but not in a multibyte "
"buffer or string, because many non-@acronym{ASCII} characters have codes "
"above octal 0377.  However, the regular expression @code{\"[^\\000-\\177]\"} "
"does match all non-@acronym{ASCII} characters (see below regarding @samp"
"{^}), in both multibyte and unibyte representations, because only the "
"@acronym{ASCII} characters are excluded."
msgstr ""

# type: table
#: lispref/searching.texi:412
msgid ""
"A character alternative can also specify named character classes (@pxref"
"{Char Classes}).  This is a POSIX feature whose syntax is @samp{[:@var"
"{class}:]}.  Using a character class is equivalent to mentioning each of the "
"characters in that class; but the latter is not feasible in practice, since "
"some classes include thousands of different characters."
msgstr ""

# type: samp{#1}
#: lispref/searching.texi:413
#, no-wrap
msgid "[^ @dots{} ]"
msgstr "[^ @dots{} ]"

# type: cindex
#: lispref/searching.texi:414
#, no-wrap
msgid "@samp{^} in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:419
msgid ""
"@samp{[^} begins a @dfn{complemented character alternative}.  This matches "
"any character except the ones specified.  Thus, @samp{[^a-z0-9A-Z]} matches "
"all characters @emph{except} letters and digits."
msgstr ""

# type: table
#: lispref/searching.texi:423
msgid ""
"@samp{^} is not special in a character alternative unless it is the first "
"character.  The character following the @samp{^} is treated as if it were "
"first (in other words, @samp{-} and @samp{]} are not special there)."
msgstr ""

# type: table
#: lispref/searching.texi:427
msgid ""
"A complemented character alternative can match a newline, unless newline is "
"mentioned as one of the characters not to match.  This is in contrast to the "
"handling of regexps in programs such as @code{grep}."
msgstr ""

# type: samp{#1}
#: lispref/searching.texi:428
#, no-wrap
msgid "^"
msgstr "^"

# type: cindex
#: lispref/searching.texi:429
#, no-wrap
msgid "beginning of line in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:435
msgid ""
"When matching a buffer, @samp{^} matches the empty string, but only at the "
"beginning of a line in the text being matched (or the beginning of the "
"accessible portion of the buffer).  Otherwise it fails to match anything.  "
"Thus, @samp{^foo} matches a @samp{foo} that occurs at the beginning of a "
"line."
msgstr ""

# type: table
#: lispref/searching.texi:438
msgid ""
"When matching a string instead of a buffer, @samp{^} matches at the "
"beginning of the string or after a newline character."
msgstr ""

# type: table
#: lispref/searching.texi:442
msgid ""
"For historical compatibility reasons, @samp{^} can be used only at the "
"beginning of the regular expression, or after @samp{\\(}, @samp{\\(?:} or "
"@samp{\\|}."
msgstr ""

# type: samp{#1}
#: lispref/searching.texi:443
#, no-wrap
msgid "$"
msgstr "$"

# type: cindex
#: lispref/searching.texi:444
#, no-wrap
msgid "@samp{$} in regexp"
msgstr ""

# type: cindex
#: lispref/searching.texi:445
#, no-wrap
msgid "end of line in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:449
msgid ""
"is similar to @samp{^} but matches only at the end of a line (or the end of "
"the accessible portion of the buffer).  Thus, @samp{x+$} matches a string of "
"one @samp{x} or more at the end of a line."
msgstr ""

# type: table
#: lispref/searching.texi:452
msgid ""
"When matching a string instead of a buffer, @samp{$} matches at the end of "
"the string or before a newline character."
msgstr ""

# type: table
#: lispref/searching.texi:455
msgid ""
"For historical compatibility reasons, @samp{$} can be used only at the end "
"of the regular expression, or before @samp{\\)} or @samp{\\|}."
msgstr ""

# type: samp{#1}
#: lispref/searching.texi:456
#, no-wrap
msgid "\\"
msgstr "\\"

# type: cindex
#: lispref/searching.texi:457
#, no-wrap
msgid "@samp{\\} in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:460
msgid ""
"has two functions: it quotes the special characters (including @samp{\\}), "
"and it introduces additional special constructs."
msgstr ""

# type: table
#: lispref/searching.texi:464
msgid ""
"Because @samp{\\} quotes special characters, @samp{\\$} is a regular "
"expression that matches only @samp{$}, and @samp{\\[} is a regular "
"expression that matches only @samp{[}, and so on."
msgstr ""

# type: table
#: lispref/searching.texi:472
msgid ""
"Note that @samp{\\} also has special meaning in the read syntax of Lisp "
"strings (@pxref{String Type}), and must be quoted with @samp{\\}.  For "
"example, the regular expression that matches the @samp{\\} character is @samp"
"{\\\\}.  To write a Lisp string that contains the characters @samp{\\\\}, "
"Lisp syntax requires you to quote each @samp{\\} with another @samp{\\}.  "
"Therefore, the read syntax for a regular expression matching @samp{\\} is "
"@code{\"\\\\\\\\\"}."
msgstr ""

# type: Plain text
#: lispref/searching.texi:480
msgid ""
"@strong{Please note:} For historical compatibility, special characters are "
"treated as ordinary ones if they are in contexts where their special "
"meanings make no sense.  For example, @samp{*foo} treats @samp{*} as "
"ordinary since there is no preceding expression on which the @samp{*} can "
"act.  It is poor practice to depend on this behavior; quote the special "
"character anyway, regardless of where it appears."
msgstr ""

# type: Plain text
#: lispref/searching.texi:488
msgid ""
"As a @samp{\\} is not special inside a character alternative, it can never "
"remove the special meaning of @samp{-} or @samp{]}.  So you should not quote "
"these characters when they have no special meaning either.  This would not "
"clarify anything, since backslashes can legitimately precede these "
"characters where they @emph{have} special meaning, as in @samp{[^\\]} (@code"
"{\"[^\\\\]\"} for Lisp string syntax), which matches any single character "
"except a backslash."
msgstr ""

# type: Plain text
#: lispref/searching.texi:498
msgid ""
"In practice, most @samp{]} that occur in regular expressions close a "
"character alternative and hence are special.  However, occasionally a "
"regular expression may try to match a complex pattern of literal @samp{[} "
"and @samp{]}.  In such situations, it sometimes may be necessary to "
"carefully parse the regexp from the start to determine which square brackets "
"enclose a character alternative.  For example, @samp{[^][]]} consists of the "
"complemented character alternative @samp{[^][]} (which matches any single "
"character that is not a square bracket), followed by a literal @samp{]}."
msgstr ""

# type: Plain text
#: lispref/searching.texi:508
msgid ""
"The exact rules are that at the beginning of a regexp, @samp{[} is special "
"and @samp{]} not.  This lasts until the first unquoted @samp{[}, after which "
"we are in a character alternative; @samp{[} is no longer special (except "
"when it starts a character class) but @samp{]} is special, unless it "
"immediately follows the special @samp{[} or that @samp{[} followed by a @samp"
"{^}.  This lasts until the next special @samp{]} that does not end a "
"character class.  This ends the character alternative and restores the "
"ordinary syntax of regular expressions; an unquoted @samp{[} is special "
"again and a @samp{]} not."
msgstr ""

# type: subsubsection
#: lispref/searching.texi:510
#, no-wrap
msgid "Character Classes"
msgstr ""

# type: cindex
#: lispref/searching.texi:511
#, no-wrap
msgid "character classes in regexp"
msgstr ""

# type: Plain text
#: lispref/searching.texi:515
msgid ""
"Here is a table of the classes you can use in a character alternative, and "
"what they mean:"
msgstr ""

# type: item
#: lispref/searching.texi:517
#, no-wrap
msgid "[:ascii:]"
msgstr ""

# type: table
#: lispref/searching.texi:519
msgid "This matches any @acronym{ASCII} character (codes 0--127)."
msgstr ""

# type: item
#: lispref/searching.texi:519
#, no-wrap
msgid "[:alnum:]"
msgstr ""

# type: table
#: lispref/searching.texi:522
msgid ""
"This matches any letter or digit.  (At present, for multibyte characters, it "
"matches anything that has word syntax.)"
msgstr ""

# type: item
#: lispref/searching.texi:522
#, no-wrap
msgid "[:alpha:]"
msgstr ""

# type: table
#: lispref/searching.texi:525
msgid ""
"This matches any letter.  (At present, for multibyte characters, it matches "
"anything that has word syntax.)"
msgstr ""

# type: item
#: lispref/searching.texi:525
#, no-wrap
msgid "[:blank:]"
msgstr ""

# type: table
#: lispref/searching.texi:527
msgid "This matches space and tab only."
msgstr ""

# type: item
#: lispref/searching.texi:527
#, no-wrap
msgid "[:cntrl:]"
msgstr ""

# type: table
#: lispref/searching.texi:529
msgid "This matches any @acronym{ASCII} control character."
msgstr ""

# type: item
#: lispref/searching.texi:529
#, no-wrap
msgid "[:digit:]"
msgstr ""

# type: table
#: lispref/searching.texi:532
msgid ""
"This matches @samp{0} through @samp{9}.  Thus, @samp{[-+[:digit:]]} matches "
"any digit, as well as @samp{+} and @samp{-}."
msgstr ""

# type: item
#: lispref/searching.texi:532
#, no-wrap
msgid "[:graph:]"
msgstr ""

# type: table
#: lispref/searching.texi:535
msgid ""
"This matches graphic characters---everything except @acronym{ASCII} control "
"characters, space, and the delete character."
msgstr ""

# type: item
#: lispref/searching.texi:535
#, no-wrap
msgid "[:lower:]"
msgstr ""

# type: table
#: lispref/searching.texi:538
msgid ""
"This matches any lower-case letter, as determined by the current case table "
"(@pxref{Case Tables})."
msgstr ""

# type: item
#: lispref/searching.texi:538
#, no-wrap
msgid "[:multibyte:]"
msgstr ""

# type: table
#: lispref/searching.texi:540
msgid "This matches any multibyte character (@pxref{Text Representations})."
msgstr ""

# type: item
#: lispref/searching.texi:540
#, no-wrap
msgid "[:nonascii:]"
msgstr ""

# type: table
#: lispref/searching.texi:542
msgid "This matches any non-@acronym{ASCII} character."
msgstr ""

# type: item
#: lispref/searching.texi:542
#, no-wrap
msgid "[:print:]"
msgstr ""

# type: table
#: lispref/searching.texi:545
msgid ""
"This matches printing characters---everything except @acronym{ASCII} control "
"characters and the delete character."
msgstr ""

# type: item
#: lispref/searching.texi:545
#, no-wrap
msgid "[:punct:]"
msgstr ""

# type: table
#: lispref/searching.texi:548
msgid ""
"This matches any punctuation character.  (At present, for multibyte "
"characters, it matches anything that has non-word syntax.)"
msgstr ""

# type: item
#: lispref/searching.texi:548
#, no-wrap
msgid "[:space:]"
msgstr ""

# type: table
#: lispref/searching.texi:551
msgid ""
"This matches any character that has whitespace syntax (@pxref{Syntax Class "
"Table})."
msgstr ""

# type: item
#: lispref/searching.texi:551
#, no-wrap
msgid "[:unibyte:]"
msgstr ""

# type: table
#: lispref/searching.texi:553
msgid "This matches any unibyte character (@pxref{Text Representations})."
msgstr ""

# type: item
#: lispref/searching.texi:553
#, no-wrap
msgid "[:upper:]"
msgstr ""

# type: table
#: lispref/searching.texi:556
msgid ""
"This matches any upper-case letter, as determined by the current case table "
"(@pxref{Case Tables})."
msgstr ""

# type: item
#: lispref/searching.texi:556
#, no-wrap
msgid "[:word:]"
msgstr ""

# type: table
#: lispref/searching.texi:559
msgid ""
"This matches any character that has word syntax (@pxref{Syntax Class Table})."
msgstr ""

# type: item
#: lispref/searching.texi:559
#, no-wrap
msgid "[:xdigit:]"
msgstr ""

# type: table
#: lispref/searching.texi:562
msgid ""
"This matches the hexadecimal digits: @samp{0} through @samp{9}, @samp{a} "
"through @samp{f} and @samp{A} through @samp{F}."
msgstr ""

# type: subsubsection
#: lispref/searching.texi:565
#, no-wrap
msgid "Backslash Constructs in Regular Expressions"
msgstr ""

# type: Plain text
#: lispref/searching.texi:573
msgid ""
"For the most part, @samp{\\} followed by any character matches only that "
"character.  However, there are several exceptions: certain two-character "
"sequences starting with @samp{\\} that have special meanings.  (The "
"character after the @samp{\\} in such a sequence is always ordinary when "
"used on its own.)  Here is a table of the special @samp{\\} constructs."
msgstr ""

# type: item
#: lispref/searching.texi:575
#, no-wrap
msgid "\\|"
msgstr ""

# type: cindex
#: lispref/searching.texi:576
#, no-wrap
msgid "@samp{|} in regexp"
msgstr ""

# type: cindex
#: lispref/searching.texi:577
#, no-wrap
msgid "regexp alternative"
msgstr ""

# type: table
#: lispref/searching.texi:582
msgid ""
"specifies an alternative.  Two regular expressions @var{a} and @var{b} with "
"@samp{\\|} in between form an expression that matches anything that either "
"@var{a} or @var{b} matches."
msgstr ""

# type: table
#: lispref/searching.texi:585
msgid ""
"Thus, @samp{foo\\|bar} matches either @samp{foo} or @samp{bar} but no other "
"string."
msgstr ""

# type: table
#: lispref/searching.texi:589
msgid ""
"@samp{\\|} applies to the largest possible surrounding expressions.  Only a "
"surrounding @samp{\\( @dots{} \\)} grouping can limit the grouping power of "
"@samp{\\|}."
msgstr ""

# type: table
#: lispref/searching.texi:593
msgid ""
"If you need full backtracking capability to handle multiple uses of @samp"
"{\\|}, use the POSIX regular expression functions (@pxref{POSIX Regexps})."
msgstr ""

# type: item
#: lispref/searching.texi:594
#, no-wrap
msgid "\\@{@var{m}\\@}"
msgstr ""

# type: table
#: lispref/searching.texi:599
msgid ""
"is a postfix operator that repeats the previous pattern exactly @var{m} "
"times.  Thus, @samp{x\\@{5\\@}} matches the string @samp{xxxxx} and nothing "
"else.  @samp{c[ad]\\@{3\\@}r} matches string such as @samp{caaar}, @samp"
"{cdddr}, @samp{cadar}, and so on."
msgstr ""

# type: item
#: lispref/searching.texi:600
#, no-wrap
msgid "\\@{@var{m},@var{n}\\@}"
msgstr ""

# type: table
#: lispref/searching.texi:605
msgid ""
"is a more general postfix operator that specifies repetition with a minimum "
"of @var{m} repeats and a maximum of @var{n} repeats.  If @var{m} is omitted, "
"the minimum is 0; if @var{n} is omitted, there is no maximum."
msgstr ""

# type: table
#: lispref/searching.texi:612
msgid ""
"For example, @samp{c[ad]\\@{1,2\\@}r} matches the strings @samp{car}, @samp"
"{cdr}, @samp{caar}, @samp{cadr}, @samp{cdar}, and @samp{cddr}, and nothing "
"else.@* @samp{\\@{0,1\\@}} or @samp{\\@{,1\\@}} is equivalent to @samp{?}."
"\t@* @samp{\\@{0,\\@}} or @samp{\\@{,\\@}} is equivalent to @samp{*}.\t@* "
"@samp{\\@{1,\\@}} is equivalent to @samp{+}."
msgstr ""

# type: item
#: lispref/searching.texi:613
#, no-wrap
msgid "\\( @dots{} \\)"
msgstr ""

# type: cindex
#: lispref/searching.texi:614
#, no-wrap
msgid "@samp{(} in regexp"
msgstr ""

# type: cindex
#: lispref/searching.texi:615
#, no-wrap
msgid "@samp{)} in regexp"
msgstr ""

# type: cindex
#: lispref/searching.texi:616
#, no-wrap
msgid "regexp grouping"
msgstr ""

# type: table
#: lispref/searching.texi:618
msgid "is a grouping construct that serves three purposes:"
msgstr ""

# type: enumerate
#: lispref/searching.texi:624
msgid ""
"To enclose a set of @samp{\\|} alternatives for other operations.  Thus, the "
"regular expression @samp{\\(foo\\|bar\\)x} matches either @samp{foox} or "
"@samp{barx}."
msgstr ""

# type: enumerate
#: lispref/searching.texi:630
msgid ""
"To enclose a complicated expression for the postfix operators @samp{*}, @samp"
"{+} and @samp{?} to operate on.  Thus, @samp{ba\\(na\\)*} matches @samp{ba}, "
"@samp{bana}, @samp{banana}, @samp{bananana}, etc., with any number (zero or "
"more) of @samp{na} strings."
msgstr ""

# type: enumerate
#: lispref/searching.texi:634
msgid ""
"To record a matched substring for future reference with @samp{\\@var{digit}} "
"(see below)."
msgstr ""

# type: table
#: lispref/searching.texi:642
msgid ""
"This last application is not a consequence of the idea of a parenthetical "
"grouping; it is a separate feature that was assigned as a second meaning to "
"the same @samp{\\( @dots{} \\)} construct because, in practice, there was "
"usually no conflict between the two meanings.  But occasionally there is a "
"conflict, and that led to the introduction of shy groups."
msgstr ""

# type: item
#: lispref/searching.texi:643
#, no-wrap
msgid "\\(?: @dots{} \\)"
msgstr ""

# type: table
#: lispref/searching.texi:648
msgid ""
"is the @dfn{shy group} construct.  A shy group serves the first two purposes "
"of an ordinary group (controlling the nesting of other operators), but it "
"does not get a number, so you cannot refer back to its value with @samp"
"{\\@var{digit}}."
msgstr ""

# type: table
#: lispref/searching.texi:652
msgid ""
"Shy groups are particularly useful for mechanically-constructed regular "
"expressions because they can be added automatically without altering the "
"numbering of any ordinary, non-shy groups."
msgstr ""

# type: samp{#1}
#: lispref/searching.texi:653 lispref/text.texi:1973
#, no-wrap
msgid "\\@var{digit}"
msgstr ""

# type: table
#: lispref/searching.texi:656
msgid ""
"matches the same text that matched the @var{digit}th occurrence of a "
"grouping (@samp{\\( @dots{} \\)}) construct."
msgstr ""

# type: table
#: lispref/searching.texi:661
msgid ""
"In other words, after the end of a group, the matcher remembers the "
"beginning and end of the text matched by that group.  Later on in the "
"regular expression you can use @samp{\\} followed by @var{digit} to match "
"that same text, whatever it may have been."
msgstr ""

# type: table
#: lispref/searching.texi:668
msgid ""
"The strings matching the first nine grouping constructs appearing in the "
"entire regular expression passed to a search or matching function are "
"assigned numbers 1 through 9 in the order that the open parentheses appear "
"in the regular expression.  So you can use @samp{\\1} through @samp{\\9} to "
"refer to the text matched by the corresponding grouping constructs."
msgstr ""

# type: table
#: lispref/searching.texi:673
msgid ""
"For example, @samp{\\(.*\\)\\1} matches any newline-free string that is "
"composed of two identical halves.  The @samp{\\(.*\\)} matches the first "
"half, which may be anything, but the @samp{\\1} that follows must match the "
"same exact text."
msgstr ""

# type: table
#: lispref/searching.texi:677
msgid ""
"If a @samp{\\( @dots{} \\)} construct matches more than once (which can "
"happen, for instance, if it is followed by @samp{*}), only the last match is "
"recorded."
msgstr ""

# type: table
#: lispref/searching.texi:687
msgid ""
"If a particular grouping construct in the regular expression was never "
"matched---for instance, if it appears inside of an alternative that wasn't "
"used, or inside of a repetition that repeated zero times---then the "
"corresponding @samp{\\@var{digit}} construct never matches anything.  To use "
"an artificial example,, @samp{\\(foo\\(b*\\)\\|lose\\)\\2} cannot match @samp"
"{lose}: the second alternative inside the larger group matches it, but then "
"@samp{\\2} is undefined and can't match anything.  But it can match @samp"
"{foobb}, because the first alternative matches @samp{foob} and @samp{\\2} "
"matches @samp{b}."
msgstr ""

# type: item
#: lispref/searching.texi:688
#, no-wrap
msgid "\\w"
msgstr ""

# type: cindex
#: lispref/searching.texi:689
#, no-wrap
msgid "@samp{\\w} in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:692
msgid ""
"matches any word-constituent character.  The editor syntax table determines "
"which characters these are.  @xref{Syntax Tables}."
msgstr ""

# type: item
#: lispref/searching.texi:693
#, no-wrap
msgid "\\W"
msgstr ""

# type: cindex
#: lispref/searching.texi:694
#, no-wrap
msgid "@samp{\\W} in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:696
msgid "matches any character that is not a word constituent."
msgstr ""

# type: item
#: lispref/searching.texi:697
#, no-wrap
msgid "\\s@var{code}"
msgstr ""

# type: cindex
#: lispref/searching.texi:698
#, no-wrap
msgid "@samp{\\s} in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:705
msgid ""
"matches any character whose syntax is @var{code}.  Here @var{code} is a "
"character that represents a syntax code: thus, @samp{w} for word "
"constituent, @samp{-} for whitespace, @samp{(} for open parenthesis, etc.  "
"To represent whitespace syntax, use either @samp{-} or a space character.  "
"@xref{Syntax Class Table}, for a list of syntax codes and the characters "
"that stand for them."
msgstr ""

# type: item
#: lispref/searching.texi:706
#, no-wrap
msgid "\\S@var{code}"
msgstr ""

# type: cindex
#: lispref/searching.texi:707
#, no-wrap
msgid "@samp{\\S} in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:709
msgid "matches any character whose syntax is not @var{code}."
msgstr ""

# type: item
#: lispref/searching.texi:710
#, no-wrap
msgid "\\c@var{c}"
msgstr ""

# type: table
#: lispref/searching.texi:715
msgid ""
"matches any character whose category is @var{c}.  Here @var{c} is a "
"character that represents a category: thus, @samp{c} for Chinese characters "
"or @samp{g} for Greek characters in the standard category table."
msgstr ""

# type: item
#: lispref/searching.texi:716
#, no-wrap
msgid "\\C@var{c}"
msgstr ""

# type: table
#: lispref/searching.texi:718
msgid "matches any character whose category is not @var{c}."
msgstr ""

# type: Plain text
#: lispref/searching.texi:725
msgid ""
"The following regular expression constructs match the empty string---that "
"is, they don't use up any characters---but whether they match depends on the "
"context.  For all, the beginning and end of the accessible portion of the "
"buffer are treated as if they were the actual beginning and end of the "
"buffer."
msgstr ""

# type: item
#: lispref/searching.texi:727
#, no-wrap
msgid "\\`"
msgstr ""

# type: cindex
#: lispref/searching.texi:728
#, no-wrap
msgid "@samp{\\`} in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:731
msgid ""
"matches the empty string, but only at the beginning of the buffer or string "
"being matched against."
msgstr ""

# type: item
#: lispref/searching.texi:732
#, no-wrap
msgid "\\'"
msgstr ""

# type: cindex
#: lispref/searching.texi:733
#, no-wrap
msgid "@samp{\\'} in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:736
msgid ""
"matches the empty string, but only at the end of the buffer or string being "
"matched against."
msgstr ""

# type: cindex
#: lispref/searching.texi:738
#, no-wrap
msgid "@samp{\\=} in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:741
msgid ""
"matches the empty string, but only at point.  (This construct is not defined "
"when matching against a string.)"
msgstr ""

# type: cindex
#: lispref/searching.texi:743
#, no-wrap
msgid "@samp{\\b} in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:748
msgid ""
"matches the empty string, but only at the beginning or end of a word.  Thus, "
"@samp{\\bfoo\\b} matches any occurrence of @samp{foo} as a separate word.  "
"@samp{\\bballs?\\b} matches @samp{ball} or @samp{balls} as a separate word."
msgstr ""

# type: table
#: lispref/searching.texi:751
msgid ""
"@samp{\\b} matches at the beginning or end of the buffer (or string)  "
"regardless of what text appears next to it."
msgstr ""

# type: item
#: lispref/searching.texi:752
#, no-wrap
msgid "\\B"
msgstr ""

# type: cindex
#: lispref/searching.texi:753
#, no-wrap
msgid "@samp{\\B} in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:756
msgid ""
"matches the empty string, but @emph{not} at the beginning or end of a word, "
"nor at the beginning or end of the buffer (or string)."
msgstr ""

# type: item
#: lispref/searching.texi:757
#, no-wrap
msgid "\\<"
msgstr ""

# type: cindex
#: lispref/searching.texi:758
#, no-wrap
msgid "@samp{\\<} in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:762
msgid ""
"matches the empty string, but only at the beginning of a word.  @samp{\\<} "
"matches at the beginning of the buffer (or string) only if a word-"
"constituent character follows."
msgstr ""

# type: item
#: lispref/searching.texi:763
#, no-wrap
msgid "\\>"
msgstr ""

# type: cindex
#: lispref/searching.texi:764
#, no-wrap
msgid "@samp{\\>} in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:768
msgid ""
"matches the empty string, but only at the end of a word.  @samp{\\>} matches "
"at the end of the buffer (or string) only if the contents end with a word-"
"constituent character."
msgstr ""

# type: item
#: lispref/searching.texi:769
#, no-wrap
msgid "\\_<"
msgstr ""

# type: cindex
#: lispref/searching.texi:770
#, no-wrap
msgid "@samp{\\_<} in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:775
msgid ""
"matches the empty string, but only at the beginning of a symbol.  A symbol "
"is a sequence of one or more word or symbol constituent characters.  @samp"
"{\\_<} matches at the beginning of the buffer (or string) only if a symbol-"
"constituent character follows."
msgstr ""

# type: item
#: lispref/searching.texi:776
#, no-wrap
msgid "\\_>"
msgstr ""

# type: cindex
#: lispref/searching.texi:777
#, no-wrap
msgid "@samp{\\_>} in regexp"
msgstr ""

# type: table
#: lispref/searching.texi:781
msgid ""
"matches the empty string, but only at the end of a symbol.  @samp{\\_>} "
"matches at the end of the buffer (or string) only if the contents end with a "
"symbol-constituent character."
msgstr ""

# type: Plain text
#: lispref/searching.texi:789
msgid ""
"Not every string is a valid regular expression.  For example, a string that "
"ends inside a character alternative without terminating @samp{]} is invalid, "
"and so is a string that ends with a single @samp{\\}.  If an invalid regular "
"expression is passed to any of the search functions, an @code{invalid-"
"regexp} error is signaled."
msgstr ""

# type: subsection
#: lispref/searching.texi:792
#, no-wrap
msgid "Complex Regexp Example"
msgstr ""

# type: Plain text
#: lispref/searching.texi:799
msgid ""
"Here is a complicated regexp which was formerly used by Emacs to recognize "
"the end of a sentence together with any whitespace that follows.  (Nowadays "
"Emacs uses a similar but more complex default regexp constructed by the "
"function @code{sentence-end}.  @xref{Standard Regexps}.)"
msgstr ""

# type: Plain text
#: lispref/searching.texi:805
msgid ""
"First, we show the regexp as a string in Lisp syntax to distinguish spaces "
"from tab characters.  The string constant begins and ends with a double-"
"quote.  @samp{\\\"} stands for a double-quote as part of the string, @samp{\\"
"\\} for a backslash as part of the string, @samp{\\t} for a tab and @samp"
"{\\n} for a newline."
msgstr ""

# type: example
#: lispref/searching.texi:808
#, no-wrap
msgid "\"[.?!][]\\\"')@}]*\\\\($\\\\| $\\\\|\\t\\\\|@ @ \\\\)[ \\t\\n]*\"\n"
msgstr ""

# type: Plain text
#: lispref/searching.texi:812
msgid "In contrast, if you evaluate this string, you will see the following:"
msgstr ""

# type: group
#: lispref/searching.texi:818
#, no-wrap
msgid ""
"\"[.?!][]\\\"')@}]*\\\\($\\\\| $\\\\|\\t\\\\|@ @ \\\\)[ \\t\\n]*\"\n"
"     @result{} \"[.?!][]\\\"')@}]*\\\\($\\\\| $\\\\|  \\\\|@ @ \\\\)[\n"
"]*\"\n"
msgstr ""

# type: Plain text
#: lispref/searching.texi:823
msgid "In this output, tab and newline appear as themselves."
msgstr ""

# type: Plain text
#: lispref/searching.texi:826
msgid ""
"This regular expression contains four parts in succession and can be "
"deciphered as follows:"
msgstr ""

# type: item
#: lispref/searching.texi:828
#, no-wrap
msgid "[.?!]"
msgstr ""

# type: table
#: lispref/searching.texi:835
msgid ""
"The first part of the pattern is a character alternative that matches any "
"one of three characters: period, question mark, and exclamation mark.  The "
"match must begin with one of these three characters.  (This is one point "
"where the new default regexp used by Emacs differs from the old.  The new "
"value also allows some non-@acronym{ASCII} characters that end a sentence "
"without any following whitespace.)"
msgstr ""

# type: item
#: lispref/searching.texi:836
#, no-wrap
msgid "[]\\\"')@}]*"
msgstr ""

# type: table
#: lispref/searching.texi:843
msgid ""
"The second part of the pattern matches any closing braces and quotation "
"marks, zero or more of them, that may follow the period, question mark or "
"exclamation mark.  The @code{\\\"} is Lisp syntax for a double-quote in a "
"string.  The @samp{*} at the end indicates that the immediately preceding "
"regular expression (a character alternative, in this case) may be repeated "
"zero or more times."
msgstr ""

# type: item
#: lispref/searching.texi:844
#, no-wrap
msgid "\\\\($\\\\|@ $\\\\|\\t\\\\|@ @ \\\\)"
msgstr ""

# type: table
#: lispref/searching.texi:851
msgid ""
"The third part of the pattern matches the whitespace that follows the end of "
"a sentence: the end of a line (optionally with a space), or a tab, or two "
"spaces.  The double backslashes mark the parentheses and vertical bars as "
"regular expression syntax; the parentheses delimit a group and the vertical "
"bars separate alternatives.  The dollar sign is used to match the end of a "
"line."
msgstr ""

# type: item
#: lispref/searching.texi:852
#, no-wrap
msgid "[ \\t\\n]*"
msgstr ""

# type: table
#: lispref/searching.texi:855
msgid ""
"Finally, the last part of the pattern matches any additional whitespace "
"beyond the minimum needed to end a sentence."
msgstr ""

# type: subsection
#: lispref/searching.texi:858
#, no-wrap
msgid "Regular Expression Functions"
msgstr ""

# type: Plain text
#: lispref/searching.texi:861
msgid "These functions operate on regular expressions."
msgstr ""

# type: defun
#: lispref/searching.texi:862
#, no-wrap
msgid "regexp-quote string"
msgstr ""

# type: defun
#: lispref/searching.texi:868
msgid ""
"This function returns a regular expression whose only exact match is @var"
"{string}.  Using this regular expression in @code{looking-at} will succeed "
"only if the next characters in the buffer are @var{string}; using it in a "
"search function will succeed if the text being searched contains @var"
"{string}."
msgstr ""

# type: defun
#: lispref/searching.texi:871
msgid ""
"This allows you to request an exact string match or search when calling a "
"function that wants a regular expression."
msgstr ""

# type: group
#: lispref/searching.texi:876
#, no-wrap
msgid ""
"(regexp-quote \"^The cat$\")\n"
"     @result{} \"\\\\^The cat\\\\$\"\n"
msgstr ""

# type: defun
#: lispref/searching.texi:883
msgid ""
"One use of @code{regexp-quote} is to combine an exact string match with "
"context described as a regular expression.  For example, this searches for "
"the string that is the value of @var{string}, surrounded by whitespace:"
msgstr ""

# type: group
#: lispref/searching.texi:888
#, no-wrap
msgid ""
"(re-search-forward\n"
" (concat \"\\\\s-\" (regexp-quote string) \"\\\\s-\"))\n"
msgstr ""

# type: defun
#: lispref/searching.texi:892
#, no-wrap
msgid "regexp-opt strings &optional paren"
msgstr ""

# type: defun
#: lispref/searching.texi:897
msgid ""
"This function returns an efficient regular expression that will match any of "
"the strings in the list @var{strings}.  This is useful when you need to make "
"matching or searching as fast as possible---for example, for Font Lock mode."
msgstr ""

# type: defun
#: lispref/searching.texi:902
msgid ""
"If the optional argument @var{paren} is non-@code{nil}, then the returned "
"regular expression is always enclosed by at least one parentheses-grouping "
"construct.  If @var{paren} is @code{words}, then that construct is "
"additionally surrounded by @samp{\\<} and @samp{\\>}."
msgstr ""

# type: defun
#: lispref/searching.texi:906
msgid ""
"This simplified definition of @code{regexp-opt} produces a regular "
"expression which is equivalent to the actual value (but not as efficient):"
msgstr ""

# type: example
#: lispref/searching.texi:914
#, no-wrap
msgid ""
"(defun regexp-opt (strings paren)\n"
"  (let ((open-paren (if paren \"\\\\(\" \"\"))\n"
"        (close-paren (if paren \"\\\\)\" \"\")))\n"
"    (concat open-paren\n"
"            (mapconcat 'regexp-quote strings \"\\\\|\")\n"
"            close-paren)))\n"
msgstr ""

# type: defun
#: lispref/searching.texi:917
#, no-wrap
msgid "regexp-opt-depth regexp"
msgstr ""

# type: defun
#: lispref/searching.texi:921
msgid ""
"This function returns the total number of grouping constructs (parenthesized "
"expressions) in @var{regexp}.  (This does not include shy groups.)"
msgstr ""

# type: section
#: lispref/searching.texi:924
#, no-wrap
msgid "Regular Expression Searching"
msgstr ""

# type: cindex
#: lispref/searching.texi:925
#, no-wrap
msgid "regular expression searching"
msgstr ""

# type: cindex
#: lispref/searching.texi:926
#, no-wrap
msgid "regexp searching"
msgstr ""

# type: cindex
#: lispref/searching.texi:927
#, no-wrap
msgid "searching for regexp"
msgstr ""

# type: Plain text
#: lispref/searching.texi:934
msgid ""
"In GNU Emacs, you can search for the next match for a regular expression "
"either incrementally or not.  For incremental search commands, see @ref"
"{Regexp Search, , Regular Expression Search, emacs, The GNU Emacs Manual}.  "
"Here we describe only the search functions useful in programs.  The "
"principal one is @code{re-search-forward}."
msgstr ""

# type: Plain text
#: lispref/searching.texi:938
msgid ""
"These search functions convert the regular expression to multibyte if the "
"buffer is multibyte; they convert the regular expression to unibyte if the "
"buffer is unibyte.  @xref{Text Representations}."
msgstr ""

# type: deffn
#: lispref/searching.texi:939
#, no-wrap
msgid "Command re-search-forward regexp &optional limit noerror repeat"
msgstr ""

# type: deffn
#: lispref/searching.texi:945
msgid ""
"This function searches forward in the current buffer for a string of text "
"that is matched by the regular expression @var{regexp}.  The function skips "
"over any amount of text that is not matched by @var{regexp}, and leaves "
"point at the end of the first match found.  It returns the new value of "
"point."
msgstr ""

# type: deffn
#: lispref/searching.texi:949
msgid ""
"If @var{limit} is non-@code{nil}, it must be a position in the current "
"buffer.  It specifies the upper bound to the search.  No match extending "
"after that position is accepted."
msgstr ""

# type: deffn
#: lispref/searching.texi:956
msgid ""
"If @var{repeat} is supplied, it must be a positive number; the search is "
"repeated that many times; each repetition starts at the end of the previous "
"match.  If all these successive searches succeed, the search succeeds, "
"moving point and returning its new value.  Otherwise the search fails.  What "
"@code{re-search-forward} does when the search fails depends on the value of "
"@var{noerror}:"
msgstr ""

# type: table
#: lispref/searching.texi:960
msgid "Signal a @code{search-failed} error."
msgstr ""

# type: table
#: lispref/searching.texi:962
msgid "Do nothing and return @code{nil}."
msgstr ""

# type: table
#: lispref/searching.texi:965
msgid ""
"Move point to @var{limit} (or the end of the accessible portion of the "
"buffer) and return @code{nil}."
msgstr ""

# type: deffn
#: lispref/searching.texi:970
msgid ""
"In the following example, point is initially before the @samp{T}.  "
"Evaluating the search call moves point to the end of that line (between the "
"@samp{t} of @samp{hat} and the newline)."
msgstr ""

# type: group
#: lispref/searching.texi:982
#, no-wrap
msgid ""
"(re-search-forward \"[a-z]+\" nil t 5)\n"
"     @result{} 27\n"
"\n"
msgstr ""

# type: deffn
#: lispref/searching.texi:991
#, no-wrap
msgid "Command re-search-backward regexp &optional limit noerror repeat"
msgstr ""

# type: deffn
#: lispref/searching.texi:995
msgid ""
"This function searches backward in the current buffer for a string of text "
"that is matched by the regular expression @var{regexp}, leaving point at the "
"beginning of the first text found."
msgstr ""

# type: deffn
#: lispref/searching.texi:1005
msgid ""
"This function is analogous to @code{re-search-forward}, but they are not "
"simple mirror images.  @code{re-search-forward} finds the match whose "
"beginning is as close as possible to the starting point.  If @code{re-search-"
"backward} were a perfect mirror image, it would find the match whose end is "
"as close as possible.  However, in fact it finds the match whose beginning "
"is as close as possible (and yet ends before the starting point).  The "
"reason for this is that matching a regular expression at a given spot always "
"works from beginning to end, and starts at a specified beginning position."
msgstr ""

# type: deffn
#: lispref/searching.texi:1009
msgid ""
"A true mirror-image of @code{re-search-forward} would require a special "
"feature for matching regular expressions from end to beginning.  It's not "
"worth the trouble of implementing that."
msgstr ""

# type: defun
#: lispref/searching.texi:1011
#, no-wrap
msgid "string-match regexp string &optional start"
msgstr ""

# type: defun
#: lispref/searching.texi:1016
msgid ""
"This function returns the index of the start of the first match for the "
"regular expression @var{regexp} in @var{string}, or @code{nil} if there is "
"no match.  If @var{start} is non-@code{nil}, the search starts at that index "
"in @var{string}."
msgstr ""

# type: group
#: lispref/searching.texi:1024
#, no-wrap
msgid ""
"(string-match\n"
" \"quick\" \"The quick brown fox jumped quickly.\")\n"
"     @result{} 4\n"
msgstr ""

# type: group
#: lispref/searching.texi:1029 lispref/searching.texi:1044
#, no-wrap
msgid ""
"(string-match\n"
" \"quick\" \"The quick brown fox jumped quickly.\" 8)\n"
"     @result{} 27\n"
msgstr ""

# type: defun
#: lispref/searching.texi:1035
msgid ""
"The index of the first character of the string is 0, the index of the second "
"character is 1, and so on."
msgstr ""

# type: defun
#: lispref/searching.texi:1038
msgid ""
"After this function returns, the index of the first character beyond the "
"match is available as @code{(match-end 0)}.  @xref{Match Data}."
msgstr ""

# type: group
#: lispref/searching.texi:1049
#, no-wrap
msgid ""
"(match-end 0)\n"
"     @result{} 32\n"
msgstr ""

# type: defun
#: lispref/searching.texi:1053
#, no-wrap
msgid "looking-at regexp"
msgstr ""

# type: defun
#: lispref/searching.texi:1059
msgid ""
"This function determines whether the text in the current buffer directly "
"following point matches the regular expression @var{regexp}.  ``Directly "
"following'' means precisely that: the search is ``anchored'' and it can "
"succeed only starting with the first character following point.  The result "
"is @code{t} if so, @code{nil} otherwise."
msgstr ""

# type: defun
#: lispref/searching.texi:1063
msgid ""
"This function does not move point, but it updates the match data, which you "
"can access using @code{match-beginning} and @code{match-end}.  @xref{Match "
"Data}."
msgstr ""

# type: defun
#: lispref/searching.texi:1066
msgid ""
"In this example, point is located directly before the @samp{T}.  If it were "
"anywhere else, the result would be @code{nil}."
msgstr ""

# type: group
#: lispref/searching.texi:1073 lispref/searching.texi:1097
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"I read \"@point{}The cat in the hat\n"
"comes back\" twice.\n"
"---------- Buffer: foo ----------\n"
"\n"
msgstr ""

# type: group
#: lispref/searching.texi:1076
#, no-wrap
msgid ""
"(looking-at \"The cat in the hat$\")\n"
"     @result{} t\n"
msgstr ""

# type: defun
#: lispref/searching.texi:1080
#, no-wrap
msgid "looking-back regexp &optional limit"
msgstr ""

# type: defun
#: lispref/searching.texi:1083
msgid ""
"This function returns @code{t} if @var{regexp} matches text before point, "
"ending at point, and @code{nil} otherwise."
msgstr ""

# type: defun
#: lispref/searching.texi:1090
msgid ""
"Because regular expression matching works only going forward, this is "
"implemented by searching backwards from point for a match that ends at "
"point.  That can be quite slow if it has to search a long distance.  You can "
"bound the time required by specifying @var{limit}, which says not to search "
"before @var{limit}.  In this case, the match that is found must begin at or "
"after @var{limit}."
msgstr ""

# type: group
#: lispref/searching.texi:1102
#, no-wrap
msgid ""
"(looking-back \"read \\\"\" 3)\n"
"     @result{} t\n"
"(looking-back \"read \\\"\" 4)\n"
"     @result{} nil\n"
msgstr ""

# type: defvar
#: lispref/searching.texi:1106
#, no-wrap
msgid "search-spaces-regexp"
msgstr ""

# type: defvar
#: lispref/searching.texi:1113
msgid ""
"If this variable is non-@code{nil}, it should be a regular expression that "
"says how to search for whitespace.  In that case, any group of spaces in a "
"regular expression being searched for stands for use of this regular "
"expression.  However, spaces inside of constructs such as @samp{[@dots{}]} "
"and @samp{*}, @samp{+}, @samp{?} are not affected by @code{search-spaces-"
"regexp}."
msgstr ""

# type: defvar
#: lispref/searching.texi:1117
msgid ""
"Since this variable affects all regular expression search and match "
"constructs, you should bind it temporarily for as small as possible a part "
"of the code."
msgstr ""

# type: section
#: lispref/searching.texi:1120
#, no-wrap
msgid "POSIX Regular Expression Searching"
msgstr ""

# type: Plain text
#: lispref/searching.texi:1126
msgid ""
"The usual regular expression functions do backtracking when necessary to "
"handle the @samp{\\|} and repetition constructs, but they continue this only "
"until they find @emph{some} match.  Then they succeed and report the first "
"match found."
msgstr ""

# type: Plain text
#: lispref/searching.texi:1133
msgid ""
"This section describes alternative search functions which perform the full "
"backtracking specified by the POSIX standard for regular expression "
"matching.  They continue backtracking until they have tried all "
"possibilities and found all matches, so they can report the longest match, "
"as required by POSIX.  This is much slower, so use these functions only when "
"you really need the longest match."
msgstr ""

# type: Plain text
#: lispref/searching.texi:1137
msgid ""
"The POSIX search and match functions do not properly support the non-greedy "
"repetition operators.  This is because POSIX backtracking conflicts with the "
"semantics of non-greedy repetition."
msgstr ""

# type: defun
#: lispref/searching.texi:1138
#, no-wrap
msgid "posix-search-forward regexp &optional limit noerror repeat"
msgstr ""

# type: defun
#: lispref/searching.texi:1142
msgid ""
"This is like @code{re-search-forward} except that it performs the full "
"backtracking specified by the POSIX standard for regular expression matching."
msgstr ""

# type: defun
#: lispref/searching.texi:1144
#, no-wrap
msgid "posix-search-backward regexp &optional limit noerror repeat"
msgstr ""

# type: defun
#: lispref/searching.texi:1148
msgid ""
"This is like @code{re-search-backward} except that it performs the full "
"backtracking specified by the POSIX standard for regular expression matching."
msgstr ""

# type: defun
#: lispref/searching.texi:1150
#, no-wrap
msgid "posix-looking-at regexp"
msgstr ""

# type: defun
#: lispref/searching.texi:1154
msgid ""
"This is like @code{looking-at} except that it performs the full backtracking "
"specified by the POSIX standard for regular expression matching."
msgstr ""

# type: defun
#: lispref/searching.texi:1156
#, no-wrap
msgid "posix-string-match regexp string &optional start"
msgstr ""

# type: defun
#: lispref/searching.texi:1160
msgid ""
"This is like @code{string-match} except that it performs the full "
"backtracking specified by the POSIX standard for regular expression matching."
msgstr ""

# type: section
#: lispref/searching.texi:1163
#, no-wrap
msgid "The Match Data"
msgstr ""

# type: cindex
#: lispref/searching.texi:1164
#, no-wrap
msgid "match data"
msgstr ""

# type: Plain text
#: lispref/searching.texi:1171
msgid ""
"Emacs keeps track of the start and end positions of the segments of text "
"found during a search; this is called the @dfn{match data}.  Thanks to the "
"match data, you can search for a complex pattern, such as a date in a mail "
"message, and then extract parts of the match under control of the pattern."
msgstr ""

# type: Plain text
#: lispref/searching.texi:1177
msgid ""
"Because the match data normally describe the most recent search only, you "
"must be careful not to do another search inadvertently between the search "
"you wish to refer back to and the use of the match data.  If you can't avoid "
"another intervening search, you must save and restore the match data around "
"it, to prevent it from being overwritten."
msgstr ""

# type: node
#: lispref/searching.texi:1184 lispref/searching.texi:1186
#, no-wrap
msgid "Replacing Match"
msgstr ""

# type: menu
#: lispref/searching.texi:1184
msgid "Replacing a substring that was matched."
msgstr ""

# type: node
#: lispref/searching.texi:1184 lispref/searching.texi:1253
#, no-wrap
msgid "Simple Match Data"
msgstr ""

# type: menu
#: lispref/searching.texi:1184
msgid "Accessing single items of match data,"
msgstr ""

# type: menu
#: lispref/searching.texi:1184
msgid "such as where a particular subexpression started."
msgstr ""

# type: node
#: lispref/searching.texi:1184 lispref/searching.texi:1394
#, no-wrap
msgid "Entire Match Data"
msgstr ""

# type: menu
#: lispref/searching.texi:1184
msgid "Accessing the entire match data at once, as a list."
msgstr ""

# type: menu
#: lispref/searching.texi:1184 lispref/searching.texi:1475
#: lispref/vol1.texi:843 lispref/vol2.texi:844
#, no-wrap
msgid "Saving Match Data"
msgstr ""

# type: menu
#: lispref/searching.texi:1184
msgid "Saving and restoring the match data."
msgstr ""

# type: subsection
#: lispref/searching.texi:1187
#, no-wrap
msgid "Replacing the Text that Matched"
msgstr ""

# type: cindex
#: lispref/searching.texi:1188
#, no-wrap
msgid "replace matched text"
msgstr ""

# type: Plain text
#: lispref/searching.texi:1192
msgid ""
"This function replaces all or part of the text matched by the last search.  "
"It works by means of the match data."
msgstr ""

# type: cindex
#: lispref/searching.texi:1193
#, no-wrap
msgid "case in replacements"
msgstr ""

# type: defun
#: lispref/searching.texi:1194
#, no-wrap
msgid "replace-match replacement &optional fixedcase literal string subexp"
msgstr ""

# type: defun
#: lispref/searching.texi:1198
msgid ""
"This function replaces the text in the buffer (or in @var{string}) that was "
"matched by the last search.  It replaces that text with @var{replacement}."
msgstr ""

# type: defun
#: lispref/searching.texi:1205
msgid ""
"If you did the last search in a buffer, you should specify @code{nil} for "
"@var{string} and make sure that the current buffer when you call @code"
"{replace-match} is the one in which you did the searching or matching.  Then "
"@code{replace-match} does the replacement by editing the buffer; it leaves "
"point at the end of the replacement text, and returns @code{t}."
msgstr ""

# type: defun
#: lispref/searching.texi:1209
msgid ""
"If you did the search in a string, pass the same string as @var{string}.  "
"Then @code{replace-match} does the replacement by constructing and returning "
"a new string."
msgstr ""

# type: defun
#: lispref/searching.texi:1219
msgid ""
"If @var{fixedcase} is non-@code{nil}, then @code{replace-match} uses the "
"replacement text without case conversion; otherwise, it converts the "
"replacement text depending upon the capitalization of the text to be "
"replaced.  If the original text is all upper case, this converts the "
"replacement text to upper case.  If all words of the original text are "
"capitalized, this capitalizes all the words of the replacement text.  If all "
"the words are one-letter and they are all upper case, they are treated as "
"capitalized words rather than all-upper-case words."
msgstr ""

# type: defun
#: lispref/searching.texi:1225
msgid ""
"If @var{literal} is non-@code{nil}, then @var{replacement} is inserted "
"exactly as it is, the only alterations being case changes as needed.  If it "
"is @code{nil} (the default), then the character @samp{\\} is treated "
"specially.  If a @samp{\\} appears in @var{replacement}, then it must be "
"part of one of the following sequences:"
msgstr ""

# type: samp{#1}
#: lispref/searching.texi:1227 lispref/text.texi:1977
#, no-wrap
msgid "\\&"
msgstr "\\&"

# type: cindex
#: lispref/searching.texi:1228
#, no-wrap
msgid "@samp{&} in replacement"
msgstr ""

# type: table
#: lispref/searching.texi:1230
msgid "@samp{\\&} stands for the entire text being replaced."
msgstr ""

# type: samp{#1}
#: lispref/searching.texi:1231
#, no-wrap
msgid "\\@var{n}"
msgstr "\\@var{n}"

# type: cindex
#: lispref/searching.texi:1232
#, no-wrap
msgid "@samp{\\@var{n}} in replacement"
msgstr ""

# type: table
#: lispref/searching.texi:1237
msgid ""
"@samp{\\@var{n}}, where @var{n} is a digit, stands for the text that matched "
"the @var{n}th subexpression in the original regexp.  Subexpressions are "
"those expressions grouped inside @samp{\\(@dots{}\\)}.  If the @var{n}th "
"subexpression never matched, an empty string is substituted."
msgstr ""

# type: samp{#1}
#: lispref/searching.texi:1238
#, no-wrap
msgid "\\\\"
msgstr "\\\\"

# type: cindex
#: lispref/searching.texi:1239
#, no-wrap
msgid "@samp{\\} in replacement"
msgstr ""

# type: table
#: lispref/searching.texi:1241
msgid "@samp{\\\\} stands for a single @samp{\\} in the replacement text."
msgstr ""

# type: defun
#: lispref/searching.texi:1245
msgid ""
"These substitutions occur after case conversion, if any, so the strings they "
"substitute are never case-converted."
msgstr ""

# type: defun
#: lispref/searching.texi:1251
msgid ""
"If @var{subexp} is non-@code{nil}, that says to replace just subexpression "
"number @var{subexp} of the regexp that was matched, not the entire match.  "
"For example, after matching @samp{foo \\(ba*r\\)}, calling @code{replace-"
"match} with 1 as @var{subexp} means to replace just the text that matched "
"@samp{\\(ba*r\\)}."
msgstr ""

# type: subsection
#: lispref/searching.texi:1254
#, no-wrap
msgid "Simple Match Data Access"
msgstr ""

# type: Plain text
#: lispref/searching.texi:1258
msgid ""
"This section explains how to use the match data to find out what was matched "
"by the last search or match operation, if it succeeded."
msgstr ""

# type: Plain text
#: lispref/searching.texi:1264
msgid ""
"You can ask about the entire matching text, or about a particular "
"parenthetical subexpression of a regular expression.  The @var{count} "
"argument in the functions below specifies which.  If @var{count} is zero, "
"you are asking about the entire match.  If @var{count} is positive, it "
"specifies which subexpression you want."
msgstr ""

# type: Plain text
#: lispref/searching.texi:1272
msgid ""
"Recall that the subexpressions of a regular expression are those expressions "
"grouped with escaped parentheses, @samp{\\(@dots{}\\)}.  The @var{count}th "
"subexpression is found by counting occurrences of @samp{\\(} from the "
"beginning of the whole regular expression.  The first subexpression is "
"numbered 1, the second 2, and so on.  Only regular expressions can have "
"subexpressions---after a simple string search, the only information "
"available is about the entire match."
msgstr ""

# type: Plain text
#: lispref/searching.texi:1278
msgid ""
"Every successful search sets the match data.  Therefore, you should query "
"the match data immediately after searching, before calling any other "
"function that might perform another search.  Alternatively, you may save and "
"restore the match data (@pxref{Saving Match Data}) around the call to "
"functions that could perform another search."
msgstr ""

# type: Plain text
#: lispref/searching.texi:1283
msgid ""
"A search which fails may or may not alter the match data.  In the past, a "
"failing search did not do this, but we may change it in the future.  So "
"don't try to rely on the value of the match data after a failing search."
msgstr ""

# type: defun
#: lispref/searching.texi:1284
#, no-wrap
msgid "match-string count &optional in-string"
msgstr ""

# type: defun
#: lispref/searching.texi:1289
msgid ""
"This function returns, as a string, the text matched in the last search or "
"match operation.  It returns the entire text if @var{count} is zero, or just "
"the portion corresponding to the @var{count}th parenthetical subexpression, "
"if @var{count} is positive."
msgstr ""

# type: defun
#: lispref/searching.texi:1297
msgid ""
"If the last such operation was done against a string with @code{string-"
"match}, then you should pass the same string as the argument @var{in-"
"string}.  After a buffer search or match, you should omit @var{in-string} or "
"pass @code{nil} for it; but you should make sure that the current buffer "
"when you call @code{match-string} is the one in which you did the searching "
"or matching."
msgstr ""

# type: defun
#: lispref/searching.texi:1301
msgid ""
"The value is @code{nil} if @var{count} is out of range, or for a "
"subexpression inside a @samp{\\|} alternative that wasn't used or a "
"repetition that repeated zero times."
msgstr ""

# type: defun
#: lispref/searching.texi:1303
#, no-wrap
msgid "match-string-no-properties count &optional in-string"
msgstr ""

# type: defun
#: lispref/searching.texi:1306
msgid ""
"This function is like @code{match-string} except that the result has no text "
"properties."
msgstr ""

# type: defun
#: lispref/searching.texi:1308
#, no-wrap
msgid "match-beginning count"
msgstr ""

# type: defun
#: lispref/searching.texi:1311
msgid ""
"This function returns the position of the start of text matched by the last "
"regular expression searched for, or a subexpression of it."
msgstr ""

# type: defun
#: lispref/searching.texi:1316
msgid ""
"If @var{count} is zero, then the value is the position of the start of the "
"entire match.  Otherwise, @var{count} specifies a subexpression in the "
"regular expression, and the value of the function is the starting position "
"of the match for that subexpression."
msgstr ""

# type: defun
#: lispref/searching.texi:1319
msgid ""
"The value is @code{nil} for a subexpression inside a @samp{\\|} alternative "
"that wasn't used or a repetition that repeated zero times."
msgstr ""

# type: defun
#: lispref/searching.texi:1321
#, no-wrap
msgid "match-end count"
msgstr ""

# type: defun
#: lispref/searching.texi:1325
msgid ""
"This function is like @code{match-beginning} except that it returns the "
"position of the end of the match, rather than the position of the beginning."
msgstr ""

# type: Plain text
#: lispref/searching.texi:1329
msgid ""
"Here is an example of using the match data, with a comment showing the "
"positions within the text:"
msgstr ""

# type: group
#: lispref/searching.texi:1336
#, no-wrap
msgid ""
"(string-match \"\\\\(qu\\\\)\\\\(ick\\\\)\"\n"
"              \"The quick fox jumped quickly.\")\n"
"              ;0123456789\n"
"     @result{} 4\n"
msgstr ""

# type: group
#: lispref/searching.texi:1345
#, no-wrap
msgid ""
"(match-string 0 \"The quick fox jumped quickly.\")\n"
"     @result{} \"quick\"\n"
"(match-string 1 \"The quick fox jumped quickly.\")\n"
"     @result{} \"qu\"\n"
"(match-string 2 \"The quick fox jumped quickly.\")\n"
"     @result{} \"ick\"\n"
msgstr ""

# type: group
#: lispref/searching.texi:1350
#, no-wrap
msgid ""
"(match-beginning 1)       ; @r{The beginning of the match}\n"
"     @result{} 4                 ;   @r{with @samp{qu} is at index 4.}\n"
msgstr ""

# type: group
#: lispref/searching.texi:1355
#, no-wrap
msgid ""
"(match-beginning 2)       ; @r{The beginning of the match}\n"
"     @result{} 6                 ;   @r{with @samp{ick} is at index 6.}\n"
msgstr ""

# type: group
#: lispref/searching.texi:1360
#, no-wrap
msgid ""
"(match-end 1)             ; @r{The end of the match}\n"
"     @result{} 6                 ;   @r{with @samp{qu} is at index 6.}\n"
"\n"
msgstr ""

# type: group
#: lispref/searching.texi:1363
#, no-wrap
msgid ""
"(match-end 2)             ; @r{The end of the match}\n"
"     @result{} 9                 ;   @r{with @samp{ick} is at index 9.}\n"
msgstr ""

# type: Plain text
#: lispref/searching.texi:1371
msgid ""
"Here is another example.  Point is initially located at the beginning of the "
"line.  Searching moves point to between the space and the word @samp{in}.  "
"The beginning of the entire match is at the 9th character of the buffer "
"(@samp{T}), and the beginning of the match for the first subexpression is at "
"the 13th character (@samp{c})."
msgstr ""

# type: group
#: lispref/searching.texi:1379
#, no-wrap
msgid ""
"(list\n"
"  (re-search-forward \"The \\\\(cat \\\\)\")\n"
"  (match-beginning 0)\n"
"  (match-beginning 1))\n"
"    @result{} (9 9 13)\n"
msgstr ""

# type: group
#: lispref/searching.texi:1387
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"I read \"The cat @point{}in the hat comes back\" twice.\n"
"        ^   ^\n"
"        9  13\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: Plain text
#: lispref/searching.texi:1393
msgid ""
"(In this case, the index returned is a buffer position; the first character "
"of the buffer counts as 1.)"
msgstr ""

# type: subsection
#: lispref/searching.texi:1395
#, no-wrap
msgid "Accessing the Entire Match Data"
msgstr ""

# type: Plain text
#: lispref/searching.texi:1399
msgid ""
"The functions @code{match-data} and @code{set-match-data} read or write the "
"entire match data, all at once."
msgstr ""

# type: defun
#: lispref/searching.texi:1400
#, no-wrap
msgid "match-data &optional integers reuse reseat"
msgstr ""

# type: defun
#: lispref/searching.texi:1408
msgid ""
"This function returns a list of positions (markers or integers) that record "
"all the information on what text the last search matched.  Element zero is "
"the position of the beginning of the match for the whole expression; element "
"one is the position of the end of the match for the expression.  The next "
"two elements are the positions of the beginning and end of the match for the "
"first subexpression, and so on.  In general, element"
msgstr ""

# type: ifnottex
#: lispref/searching.texi:1410
msgid "number 2@var{n}"
msgstr ""

# type: tex
#: lispref/searching.texi:1413
#, no-wrap
msgid "number {\\mathsurround=0pt $2n$}\n"
msgstr ""

# type: defun
#: lispref/searching.texi:1416
msgid "corresponds to @code{(match-beginning @var{n})}; and element"
msgstr ""

# type: ifnottex
#: lispref/searching.texi:1418
msgid "number 2@var{n} + 1"
msgstr ""

# type: tex
#: lispref/searching.texi:1421
#, no-wrap
msgid "number {\\mathsurround=0pt $2n+1$}\n"
msgstr ""

# type: defun
#: lispref/searching.texi:1423
msgid "corresponds to @code{(match-end @var{n})}."
msgstr ""

# type: defun
#: lispref/searching.texi:1431
msgid ""
"Normally all the elements are markers or @code{nil}, but if @var{integers} "
"is non-@code{nil}, that means to use integers instead of markers.  (In that "
"case, the buffer itself is appended as an additional element at the end of "
"the list, to facilitate complete restoration of the match data.)  If the "
"last match was done on a string with @code{string-match}, then integers are "
"always used, since markers can't point into a string."
msgstr ""

# type: defun
#: lispref/searching.texi:1440
msgid ""
"If @var{reuse} is non-@code{nil}, it should be a list.  In that case, @code"
"{match-data} stores the match data in @var{reuse}.  That is, @var{reuse} is "
"destructively modified.  @var{reuse} does not need to have the right "
"length.  If it is not long enough to contain the match data, it is "
"extended.  If it is too long, the length of @var{reuse} stays the same, but "
"the elements that were not used are set to @code{nil}.  The purpose of this "
"feature is to reduce the need for garbage collection."
msgstr ""

# type: defun
#: lispref/searching.texi:1443
msgid ""
"If @var{reseat} is non-@code{nil}, all markers on the @var{reuse} list are "
"reseated to point to nowhere."
msgstr ""

# type: defun
#: lispref/searching.texi:1447
msgid ""
"As always, there must be no possibility of intervening searches between the "
"call to a search function and the call to @code{match-data} that is intended "
"to access the match data for that search."
msgstr ""

# type: group
#: lispref/searching.texi:1455
#, no-wrap
msgid ""
"(match-data)\n"
"     @result{}  (#<marker at 9 in foo>\n"
"          #<marker at 17 in foo>\n"
"          #<marker at 13 in foo>\n"
"          #<marker at 17 in foo>)\n"
msgstr ""

# type: defun
#: lispref/searching.texi:1459
#, no-wrap
msgid "set-match-data match-list &optional reseat"
msgstr ""

# type: defun
#: lispref/searching.texi:1464
msgid ""
"This function sets the match data from the elements of @var{match-list}, "
"which should be a list that was the value of a previous call to @code{match-"
"data}.  (More precisely, anything that has the same format will work.)"
msgstr ""

# type: defun
#: lispref/searching.texi:1467
msgid ""
"If @var{match-list} refers to a buffer that doesn't exist, you don't get an "
"error; that sets the match data in a meaningless but harmless way."
msgstr ""

# type: defun
#: lispref/searching.texi:1470
msgid ""
"If @var{reseat} is non-@code{nil}, all markers on the @var{match-list} list "
"are reseated to point to nowhere."
msgstr ""

# type: findex
#: lispref/searching.texi:1471
#, no-wrap
msgid "store-match-data"
msgstr "store-match-data"

# type: defun
#: lispref/searching.texi:1473
msgid ""
"@code{store-match-data} is a semi-obsolete alias for @code{set-match-data}."
msgstr ""

# type: subsection
#: lispref/searching.texi:1476
#, no-wrap
msgid "Saving and Restoring the Match Data"
msgstr ""

# type: Plain text
#: lispref/searching.texi:1482
msgid ""
"When you call a function that may do a search, you may need to save and "
"restore the match data around that call, if you want to preserve the match "
"data from an earlier search for later use.  Here is an example that shows "
"the problem that arises if you fail to save the match data:"
msgstr ""

# type: group
#: lispref/searching.texi:1491
#, no-wrap
msgid ""
"(re-search-forward \"The \\\\(cat \\\\)\")\n"
"     @result{} 48\n"
"(foo)                   ; @r{Perhaps @code{foo} does}\n"
"                        ;   @r{more searching.}\n"
"(match-end 0)\n"
"     @result{} 61              ; @r{Unexpected result---not 48!}\n"
msgstr ""

# type: Plain text
#: lispref/searching.texi:1495
msgid "You can save and restore the match data with @code{save-match-data}:"
msgstr ""

# type: defmac
#: lispref/searching.texi:1496
#, no-wrap
msgid "save-match-data body@dots{}"
msgstr ""

# type: defmac
#: lispref/searching.texi:1500
msgid ""
"This macro executes @var{body}, saving and restoring the match data around "
"it.  The return value is the value of the last form in @var{body}."
msgstr ""

# type: Plain text
#: lispref/searching.texi:1505
msgid ""
"You could use @code{set-match-data} together with @code{match-data} to "
"imitate the effect of the special form @code{save-match-data}.  Here is how:"
msgstr ""

# type: group
#: lispref/searching.texi:1512
#, no-wrap
msgid ""
"(let ((data (match-data)))\n"
"  (unwind-protect\n"
"      @dots{}   ; @r{Ok to change the original match data.}\n"
"    (set-match-data data)))\n"
msgstr ""

# type: Plain text
#: lispref/searching.texi:1518
msgid ""
"Emacs automatically saves and restores the match data when it runs process "
"filter functions (@pxref{Filter Functions}) and process sentinels (@pxref"
"{Sentinels})."
msgstr ""

# type: ignore
#: lispref/searching.texi:1522
#, no-wrap
msgid ""
"  Here is a function which restores the match data provided the buffer\n"
"associated with it still exists.\n"
"\n"
msgstr ""

# type: group
#: lispref/searching.texi:1531
#, no-wrap
msgid ""
"(defun restore-match-data (data)\n"
"  \"Restore the match data DATA unless the buffer is missing.\"\n"
"  (catch 'foo\n"
"    (let ((d data))\n"
msgstr ""

# type: smallexample
#: lispref/searching.texi:1535
#, no-wrap
msgid ""
"      (while d\n"
"        (and (car d)\n"
"             (null (marker-buffer (car d)))\n"
msgstr ""

# type: group
#: lispref/searching.texi:1540
#, no-wrap
msgid ""
"             ;; @file{match-data} @r{buffer is deleted.}\n"
"             (throw 'foo nil))\n"
"        (setq d (cdr d)))\n"
"      (set-match-data data))))\n"
msgstr ""

# type: cindex
#: lispref/searching.texi:1546
#, no-wrap
msgid "replacement after search"
msgstr ""

# type: cindex
#: lispref/searching.texi:1547
#, no-wrap
msgid "searching and replacing"
msgstr ""

# type: Plain text
#: lispref/searching.texi:1552
msgid ""
"If you want to find all matches for a regexp in part of the buffer, and "
"replace them, the best way is to write an explicit loop using @code{re-"
"search-forward} and @code{replace-match}, like this:"
msgstr ""

# type: example
#: lispref/searching.texi:1556
#, no-wrap
msgid ""
"(while (re-search-forward \"foo[ \\t]+bar\" nil t)\n"
"  (replace-match \"foobar\"))\n"
msgstr ""

# type: Plain text
#: lispref/searching.texi:1561
msgid ""
"@xref{Replacing Match,, Replacing the Text that Matched}, for a description "
"of @code{replace-match}."
msgstr ""

# type: Plain text
#: lispref/searching.texi:1565
msgid ""
"However, replacing matches in a string is more complex, especially if you "
"want to do it efficiently.  So Emacs provides a function to do this."
msgstr ""

# type: defun
#: lispref/searching.texi:1566
#, no-wrap
msgid "replace-regexp-in-string regexp rep string &optional fixedcase literal subexp start"
msgstr ""

# type: defun
#: lispref/searching.texi:1572
msgid ""
"This function copies @var{string} and searches it for matches for @var"
"{regexp}, and replaces them with @var{rep}.  It returns the modified copy.  "
"If @var{start} is non-@code{nil}, the search for matches starts at that "
"index in @var{string}, so matches starting before that index are not changed."
msgstr ""

# type: defun
#: lispref/searching.texi:1576
msgid ""
"This function uses @code{replace-match} to do the replacement, and it passes "
"the optional arguments @var{fixedcase}, @var{literal} and @var{subexp} along "
"to @code{replace-match}."
msgstr ""

# type: defun
#: lispref/searching.texi:1583
msgid ""
"Instead of a string, @var{rep} can be a function.  In that case, @code"
"{replace-regexp-in-string} calls @var{rep} for each match, passing the text "
"of the match as its sole argument.  It collects the value @var{rep} returns "
"and passes that to @code{replace-match} as the replacement string.  The "
"match-data at this point are the result of matching @var{regexp} against a "
"substring of @var{string}."
msgstr ""

# type: Plain text
#: lispref/searching.texi:1587
msgid ""
"If you want to write a command along the lines of @code{query-replace}, you "
"can use @code{perform-replace} to do the work."
msgstr ""

# type: defun
#: lispref/searching.texi:1588
#, no-wrap
msgid "perform-replace from-string replacements query-flag regexp-flag delimited-flag &optional repeat-count map start end"
msgstr ""

# type: defun
#: lispref/searching.texi:1595
msgid ""
"This function is the guts of @code{query-replace} and related commands.  It "
"searches for occurrences of @var{from-string} in the text between positions "
"@var{start} and @var{end} and replaces some or all of them.  If @var{start} "
"is @code{nil} (or omitted), point is used instead, and the end of the "
"buffer's accessible portion is used for @var{end}."
msgstr ""

# type: defun
#: lispref/searching.texi:1598
msgid ""
"If @var{query-flag} is @code{nil}, it replaces all occurrences; otherwise, "
"it asks the user what to do about each one."
msgstr ""

# type: defun
#: lispref/searching.texi:1603
msgid ""
"If @var{regexp-flag} is non-@code{nil}, then @var{from-string} is considered "
"a regular expression; otherwise, it must match literally.  If @var{delimited-"
"flag} is non-@code{nil}, then only replacements surrounded by word "
"boundaries are considered."
msgstr ""

# type: defun
#: lispref/searching.texi:1607
msgid ""
"The argument @var{replacements} specifies what to replace occurrences with.  "
"If it is a string, that string is used.  It can also be a list of strings, "
"to be used in cyclic order."
msgstr ""

# type: defun
#: lispref/searching.texi:1612
msgid ""
"If @var{replacements} is a cons cell, @code{(@var{function} . @var{data})}, "
"this means to call @var{function} after each match to get the replacement "
"text.  This function is called with two arguments: @var{data}, and the "
"number of replacements already made."
msgstr ""

# type: defun
#: lispref/searching.texi:1616
msgid ""
"If @var{repeat-count} is non-@code{nil}, it should be an integer.  Then it "
"specifies how many times to use each of the strings in the @var"
"{replacements} list before advancing cyclically to the next one."
msgstr ""

# type: defun
#: lispref/searching.texi:1620
msgid ""
"If @var{from-string} contains upper-case letters, then @code{perform-"
"replace} binds @code{case-fold-search} to @code{nil}, and it uses the @code"
"{replacements} without altering the case of them."
msgstr ""

# type: defun
#: lispref/searching.texi:1625
msgid ""
"Normally, the keymap @code{query-replace-map} defines the possible user "
"responses for queries.  The argument @var{map}, if non-@code{nil}, specifies "
"a keymap to use instead of @code{query-replace-map}."
msgstr ""

# type: defvar
#: lispref/searching.texi:1632
msgid ""
"This variable holds a special keymap that defines the valid user responses "
"for @code{perform-replace} and the commands that use it, as well as @code{y-"
"or-n-p} and @code{map-y-or-n-p}.  This map is unusual in two ways:"
msgstr ""

# type: itemize
#: lispref/searching.texi:1637
msgid ""
"The ``key bindings'' are not commands, just symbols that are meaningful to "
"the functions that use this map."
msgstr ""

# type: itemize
#: lispref/searching.texi:1643
msgid ""
"Prefix keys are not supported; each key binding must be for a single-event "
"key sequence.  This is because the functions don't use @code{read-key-"
"sequence} to get the input; instead, they read a single event and look it up "
"``by hand.''"
msgstr ""

# type: Plain text
#: lispref/searching.texi:1649
msgid ""
"Here are the meaningful ``bindings'' for @code{query-replace-map}.  Several "
"of them are meaningful only for @code{query-replace} and friends."
msgstr ""

# type: item
#: lispref/searching.texi:1651
#, no-wrap
msgid "act"
msgstr ""

# type: table
#: lispref/searching.texi:1653
msgid "Do take the action being considered---in other words, ``yes.''"
msgstr ""

# type: item
#: lispref/searching.texi:1654
#, no-wrap
msgid "skip"
msgstr ""

# type: table
#: lispref/searching.texi:1656
msgid "Do not take action for this question---in other words, ``no.''"
msgstr ""

# type: table
#: lispref/searching.texi:1660
msgid ""
"Answer this question ``no,'' and give up on the entire series of questions, "
"assuming that the answers will be ``no.''"
msgstr ""

# type: item
#: lispref/searching.texi:1661
#, no-wrap
msgid "act-and-exit"
msgstr ""

# type: table
#: lispref/searching.texi:1664
msgid ""
"Answer this question ``yes,'' and give up on the entire series of questions, "
"assuming that subsequent answers will be ``no.''"
msgstr ""

# type: item
#: lispref/searching.texi:1665
#, no-wrap
msgid "act-and-show"
msgstr ""

# type: table
#: lispref/searching.texi:1668
msgid ""
"Answer this question ``yes,'' but show the results---don't advance yet to "
"the next question."
msgstr ""

# type: item
#: lispref/searching.texi:1669
#, no-wrap
msgid "automatic"
msgstr ""

# type: table
#: lispref/searching.texi:1672
msgid ""
"Answer this question and all subsequent questions in the series with "
"``yes,'' without further user interaction."
msgstr ""

# type: item
#: lispref/searching.texi:1673
#, no-wrap
msgid "backup"
msgstr ""

# type: table
#: lispref/searching.texi:1675
msgid "Move back to the previous place that a question was asked about."
msgstr ""

# type: item
#: lispref/searching.texi:1676
#, no-wrap
msgid "edit"
msgstr ""

# type: table
#: lispref/searching.texi:1679
msgid ""
"Enter a recursive edit to deal with this question---instead of any other "
"action that would normally be taken."
msgstr ""

# type: item
#: lispref/searching.texi:1680
#, no-wrap
msgid "delete-and-edit"
msgstr ""

# type: table
#: lispref/searching.texi:1683
msgid ""
"Delete the text being considered, then enter a recursive edit to replace it."
msgstr ""

# type: item
#: lispref/searching.texi:1684
#, no-wrap
msgid "recenter"
msgstr ""

# type: table
#: lispref/searching.texi:1686
msgid "Redisplay and center the window, then ask the same question again."
msgstr ""

# type: table
#: lispref/searching.texi:1690
msgid ""
"Perform a quit right away.  Only @code{y-or-n-p} and related functions use "
"this answer."
msgstr ""

# type: item
#: lispref/searching.texi:1691
#, no-wrap
msgid "help"
msgstr ""

# type: table
#: lispref/searching.texi:1693
msgid "Display some help, then ask again."
msgstr ""

# type: section
#: lispref/searching.texi:1696
#, no-wrap
msgid "Standard Regular Expressions Used in Editing"
msgstr ""

# type: cindex
#: lispref/searching.texi:1697
#, no-wrap
msgid "regexps used standardly in editing"
msgstr ""

# type: cindex
#: lispref/searching.texi:1698
#, no-wrap
msgid "standard regexps used in editing"
msgstr ""

# type: Plain text
#: lispref/searching.texi:1702
msgid ""
"This section describes some variables that hold regular expressions used for "
"certain purposes in editing:"
msgstr ""

# type: defvar
#: lispref/searching.texi:1703
#, no-wrap
msgid "page-delimiter"
msgstr ""

# type: defvar
#: lispref/searching.texi:1708
msgid ""
"This is the regular expression describing line-beginnings that separate "
"pages.  The default value is @code{\"^\\014\"} (i.e., @code{\"^^L\"} or @code"
"{\"^\\C-l\"}); this matches a line that starts with a formfeed character."
msgstr ""

# type: Plain text
#: lispref/searching.texi:1718
msgid ""
"The following two regular expressions should @emph{not} assume the match "
"always starts at the beginning of a line; they should not use @samp{^} to "
"anchor the match.  Most often, the paragraph commands do check for a match "
"only at the beginning of a line, which means that @samp{^} would be "
"superfluous.  When there is a nonzero left margin, they accept matches that "
"start after the left margin.  In that case, a @samp{^} would be incorrect.  "
"However, a @samp{^} is harmless in modes where a left margin is never used."
msgstr ""

# type: defvar
#: lispref/searching.texi:1719
#, no-wrap
msgid "paragraph-separate"
msgstr ""

# type: defvar
#: lispref/searching.texi:1725
msgid ""
"This is the regular expression for recognizing the beginning of a line that "
"separates paragraphs.  (If you change this, you may have to change @code"
"{paragraph-start} also.)  The default value is @w{@code{\"[@ \\t\\f]*$\"}}, "
"which matches a line that consists entirely of spaces, tabs, and form feeds "
"(after its left margin)."
msgstr ""

# type: defvar
#: lispref/searching.texi:1727
#, no-wrap
msgid "paragraph-start"
msgstr ""

# type: defvar
#: lispref/searching.texi:1732
msgid ""
"This is the regular expression for recognizing the beginning of a line that "
"starts @emph{or} separates paragraphs.  The default value is @w{@code{\"\\f\\"
"\\|[ \\t]*$\"}}, which matches a line containing only whitespace or starting "
"with a form feed (after its left margin)."
msgstr ""

# type: defun
#: lispref/searching.texi:1734 lispref/searching.texi:1745
#, no-wrap
msgid "sentence-end"
msgstr ""

# type: defvar
#: lispref/searching.texi:1738
msgid ""
"If non-@code{nil}, the value should be a regular expression describing the "
"end of a sentence, including the whitespace following the sentence.  (All "
"paragraph boundaries also end sentences, regardless.)"
msgstr ""

# type: defvar
#: lispref/searching.texi:1743
msgid ""
"If the value is @code{nil}, the default, then the function @code{sentence-"
"end} has to construct the regexp.  That is why you should always call the "
"function @code{sentence-end} to obtain the regexp to be used to recognize "
"the end of a sentence."
msgstr ""

# type: defun
#: lispref/searching.texi:1752
msgid ""
"This function returns the value of the variable @code{sentence-end}, if non-"
"@code{nil}.  Otherwise it returns a default value based on the values of the "
"variables @code{sentence-end-double-space} (@pxref{Definition of sentence-"
"end-double-space}), @code{sentence-end-without-period} and @code{sentence-"
"end-without-space}."
msgstr ""

# type: ignore
#: lispref/searching.texi:1756
#, no-wrap
msgid "   arch-tag: c2573ca2-18aa-4839-93b8-924043ef831f\n"
msgstr "   arch-tag: c2573ca2-18aa-4839-93b8-924043ef831f\n"

# type: menu
#: lispref/sequences.texi:8 lispref/vol1.texi:389 lispref/vol2.texi:390
#, no-wrap
msgid "Sequences, Arrays, and Vectors"
msgstr ""

# type: cindex
#: lispref/sequences.texi:9
#, no-wrap
msgid "sequence"
msgstr ""

# type: Plain text
#: lispref/sequences.texi:15
msgid ""
"Recall that the @dfn{sequence} type is the union of two other Lisp types: "
"lists and arrays.  In other words, any list is a sequence, and any array is "
"a sequence.  The common property that all sequences have is that each is an "
"ordered collection of elements."
msgstr ""

# type: Plain text
#: lispref/sequences.texi:20
msgid ""
"An @dfn{array} is a single primitive object that has a slot for each of its "
"elements.  All the elements are accessible in constant time, but the length "
"of an existing array cannot be changed.  Strings, vectors, char-tables and "
"bool-vectors are the four types of arrays."
msgstr ""

# type: Plain text
#: lispref/sequences.texi:26
msgid ""
"A list is a sequence of elements, but it is not a single primitive object; "
"it is made of cons cells, one cell per element.  Finding the @var{n}th "
"element requires looking through @var{n} cons cells, so elements farther "
"from the beginning of the list take longer to access.  But it is possible to "
"add elements to the list, or remove elements."
msgstr ""

# type: Plain text
#: lispref/sequences.texi:28
msgid "The following diagram shows the relationship between these types:"
msgstr ""

# type: group
#: lispref/sequences.texi:47
#, no-wrap
msgid ""
"          _____________________________________________\n"
"         |                                             |\n"
"         |          Sequence                           |\n"
"         |  ______   ________________________________  |\n"
"         | |      | |                                | |\n"
"         | | List | |             Array              | |\n"
"         | |      | |    ________       ________     | |\n"
"         | |______| |   |        |     |        |    | |\n"
"         |          |   | Vector |     | String |    | |\n"
"         |          |   |________|     |________|    | |\n"
"         |          |  ____________   _____________  | |\n"
"         |          | |            | |             | | |\n"
"         |          | | Char-table | | Bool-vector | | |\n"
"         |          | |____________| |_____________| | |\n"
"         |          |________________________________| |\n"
"         |_____________________________________________|\n"
msgstr ""

# type: Plain text
#: lispref/sequences.texi:52
msgid ""
"The elements of vectors and lists may be any Lisp objects.  The elements of "
"strings are all characters."
msgstr ""

# type: menu
#: lispref/sequences.texi:61 lispref/sequences.texi:63 lispref/vol1.texi:394
#: lispref/vol2.texi:395
#, no-wrap
msgid "Sequence Functions"
msgstr ""

# type: menu
#: lispref/sequences.texi:61 lispref/vol1.texi:394 lispref/vol2.texi:395
msgid "Functions that accept any kind of sequence."
msgstr ""

# type: menu
#: lispref/sequences.texi:61 lispref/sequences.texi:221
#: lispref/sequences.texi:222 lispref/vol1.texi:394 lispref/vol2.texi:395
#, no-wrap
msgid "Arrays"
msgstr ""

# type: menu
#: lispref/sequences.texi:61 lispref/vol1.texi:394 lispref/vol2.texi:395
msgid "Characteristics of arrays in Emacs Lisp."
msgstr ""

# type: menu
#: lispref/sequences.texi:61 lispref/sequences.texi:289 lispref/vol1.texi:394
#: lispref/vol2.texi:395
#, no-wrap
msgid "Array Functions"
msgstr ""

# type: menu
#: lispref/sequences.texi:61 lispref/vol1.texi:394 lispref/vol2.texi:395
msgid "Functions specifically for arrays."
msgstr ""

# type: menu
#: lispref/sequences.texi:61 lispref/sequences.texi:389
#: lispref/sequences.texi:390 lispref/vol1.texi:394 lispref/vol2.texi:395
#, no-wrap
msgid "Vectors"
msgstr ""

# type: menu
#: lispref/sequences.texi:61
msgid "Special characteristics of Emacs Lisp vectors."
msgstr ""

# type: node
#: lispref/sequences.texi:61 lispref/sequences.texi:428
#, no-wrap
msgid "Vector Functions"
msgstr ""

# type: menu
#: lispref/sequences.texi:61 lispref/vol1.texi:394 lispref/vol2.texi:395
msgid "Functions specifically for vectors."
msgstr ""

# type: section
#: lispref/sequences.texi:61 lispref/sequences.texi:524
#: lispref/sequences.texi:525
#, no-wrap
msgid "Char-Tables"
msgstr ""

# type: menu
#: lispref/sequences.texi:61
msgid "How to work with char-tables."
msgstr ""

# type: node
#: lispref/sequences.texi:61 lispref/sequences.texi:688
#, no-wrap
msgid "Bool-Vectors"
msgstr ""

# type: menu
#: lispref/sequences.texi:61
msgid "How to work with bool-vectors."
msgstr ""

# type: section
#: lispref/sequences.texi:64
#, no-wrap
msgid "Sequences"
msgstr ""

# type: Plain text
#: lispref/sequences.texi:70
msgid ""
"In Emacs Lisp, a @dfn{sequence} is either a list or an array.  The common "
"property of all sequences is that they are ordered collections of elements.  "
"This section describes functions that accept any kind of sequence."
msgstr ""

# type: defun
#: lispref/sequences.texi:71
#, no-wrap
msgid "sequencep object"
msgstr ""

# type: defun
#: lispref/sequences.texi:74
msgid ""
"Returns @code{t} if @var{object} is a list, vector, string, bool-vector, or "
"char-table, @code{nil} otherwise."
msgstr ""

# type: defun
#: lispref/sequences.texi:76
#, no-wrap
msgid "length sequence"
msgstr ""

# type: cindex
#: lispref/sequences.texi:77
#, no-wrap
msgid "string length"
msgstr ""

# type: cindex
#: lispref/sequences.texi:78
#, no-wrap
msgid "list length"
msgstr ""

# type: cindex
#: lispref/sequences.texi:79
#, no-wrap
msgid "vector length"
msgstr ""

# type: cindex
#: lispref/sequences.texi:80
#, no-wrap
msgid "sequence length"
msgstr ""

# type: cindex
#: lispref/sequences.texi:81
#, no-wrap
msgid "char-table length"
msgstr ""

# type: defun
#: lispref/sequences.texi:87
msgid ""
"This function returns the number of elements in @var{sequence}.  If @var"
"{sequence} is a dotted list, a @code{wrong-type-argument} error is "
"signaled.  Circular lists may cause an infinite loop.  For a char-table, the "
"value returned is always one more than the maximum Emacs character code."
msgstr ""

# type: defun
#: lispref/sequences.texi:89
msgid ""
"@xref{Definition of safe-length}, for the related function @code{safe-"
"length}."
msgstr ""

# type: group
#: lispref/sequences.texi:94
#, no-wrap
msgid ""
"(length '(1 2 3))\n"
"    @result{} 3\n"
msgstr ""

# type: group
#: lispref/sequences.texi:98
#, no-wrap
msgid ""
"(length ())\n"
"    @result{} 0\n"
msgstr ""

# type: group
#: lispref/sequences.texi:102
#, no-wrap
msgid ""
"(length \"foobar\")\n"
"    @result{} 6\n"
msgstr ""

# type: group
#: lispref/sequences.texi:106
#, no-wrap
msgid ""
"(length [1 2 3])\n"
"    @result{} 3\n"
msgstr ""

# type: group
#: lispref/sequences.texi:110
#, no-wrap
msgid ""
"(length (make-bool-vector 5 nil))\n"
"    @result{} 5\n"
msgstr ""

# type: Plain text
#: lispref/sequences.texi:116
msgid "See also @code{string-bytes}, in @ref{Text Representations}."
msgstr ""

# type: defun
#: lispref/sequences.texi:117
#, no-wrap
msgid "elt sequence index"
msgstr ""

# type: cindex
#: lispref/sequences.texi:118
#, no-wrap
msgid "elements of sequences"
msgstr ""

# type: defun
#: lispref/sequences.texi:125
msgid ""
"This function returns the element of @var{sequence} indexed by @var{index}.  "
"Legitimate values of @var{index} are integers ranging from 0 up to one less "
"than the length of @var{sequence}.  If @var{sequence} is a list, out-of-"
"range values behave as for @code{nth}.  @xref{Definition of nth}.  "
"Otherwise, out-of-range values trigger an @code{args-out-of-range} error."
msgstr ""

# type: group
#: lispref/sequences.texi:130
#, no-wrap
msgid ""
"(elt [1 2 3 4] 2)\n"
"     @result{} 3\n"
msgstr ""

# type: group
#: lispref/sequences.texi:134
#, no-wrap
msgid ""
"(elt '(1 2 3 4) 2)\n"
"     @result{} 3\n"
msgstr ""

# type: group
#: lispref/sequences.texi:139
#, no-wrap
msgid ""
";; @r{We use @code{string} to show clearly which character @code{elt} returns.}\n"
"(string (elt \"1234\" 2))\n"
"     @result{} \"3\"\n"
msgstr ""

# type: group
#: lispref/sequences.texi:143
#, no-wrap
msgid ""
"(elt [1 2 3 4] 4)\n"
"     @error{} Args out of range: [1 2 3 4], 4\n"
msgstr ""

# type: group
#: lispref/sequences.texi:147
#, no-wrap
msgid ""
"(elt [1 2 3 4] -1)\n"
"     @error{} Args out of range: [1 2 3 4], -1\n"
msgstr ""

# type: defun
#: lispref/sequences.texi:152
msgid ""
"This function generalizes @code{aref} (@pxref{Array Functions}) and @code"
"{nth} (@pxref{Definition of nth})."
msgstr ""

# type: defun
#: lispref/sequences.texi:154
#, no-wrap
msgid "copy-sequence sequence"
msgstr ""

# type: cindex
#: lispref/sequences.texi:155
#, no-wrap
msgid "copying sequences"
msgstr ""

# type: defun
#: lispref/sequences.texi:158
msgid ""
"Returns a copy of @var{sequence}.  The copy is the same type of object as "
"the original sequence, and it has the same elements in the same order."
msgstr ""

# type: defun
#: lispref/sequences.texi:165
msgid ""
"Storing a new element into the copy does not affect the original @var"
"{sequence}, and vice versa.  However, the elements of the new sequence are "
"not copies; they are identical (@code{eq}) to the elements of the original.  "
"Therefore, changes made within these elements, as found via the copied "
"sequence, are also visible in the original sequence."
msgstr ""

# type: defun
#: lispref/sequences.texi:170
msgid ""
"If the sequence is a string with text properties, the property list in the "
"copy is itself a copy, not shared with the original's property list.  "
"However, the actual values of the properties are shared.  @xref{Text "
"Properties}."
msgstr ""

# type: defun
#: lispref/sequences.texi:173
msgid ""
"This function does not work for dotted lists.  Trying to copy a circular "
"list may cause an infinite loop."
msgstr ""

# type: defun
#: lispref/sequences.texi:177
msgid ""
"See also @code{append} in @ref{Building Lists}, @code{concat} in @ref"
"{Creating Strings}, and @code{vconcat} in @ref{Vector Functions}, for other "
"ways to copy sequences."
msgstr ""

# type: group
#: lispref/sequences.texi:182
#, no-wrap
msgid ""
"(setq bar '(1 2))\n"
"     @result{} (1 2)\n"
msgstr ""

# type: group
#: lispref/sequences.texi:186
#, no-wrap
msgid ""
"(setq x (vector 'foo bar))\n"
"     @result{} [foo (1 2)]\n"
msgstr ""

# type: group
#: lispref/sequences.texi:190
#, no-wrap
msgid ""
"(setq y (copy-sequence x))\n"
"     @result{} [foo (1 2)]\n"
msgstr ""

# type: group
#: lispref/sequences.texi:195
#, no-wrap
msgid ""
"(eq x y)\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/sequences.texi:199
#, no-wrap
msgid ""
"(equal x y)\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/sequences.texi:203
#, no-wrap
msgid ""
"(eq (elt x 1) (elt y 1))\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/sequences.texi:210
#, no-wrap
msgid ""
";; @r{Replacing an element of one sequence.}\n"
"(aset x 0 'quux)\n"
"x @result{} [quux (1 2)]\n"
"y @result{} [foo (1 2)]\n"
msgstr ""

# type: group
#: lispref/sequences.texi:217
#, no-wrap
msgid ""
";; @r{Modifying the inside of a shared element.}\n"
"(setcar (aref x 1) 69)\n"
"x @result{} [quux (69 2)]\n"
"y @result{} [foo (69 2)]\n"
msgstr ""

# type: Plain text
#: lispref/sequences.texi:230
msgid ""
"An @dfn{array} object has slots that hold a number of other Lisp objects, "
"called the elements of the array.  Any element of an array may be accessed "
"in constant time.  In contrast, an element of a list requires access time "
"that is proportional to the position of the element in the list."
msgstr ""

# type: Plain text
#: lispref/sequences.texi:237
msgid ""
"Emacs defines four types of array, all one-dimensional: @dfn{strings}, @dfn"
"{vectors}, @dfn{bool-vectors} and @dfn{char-tables}.  A vector is a general "
"array; its elements can be any Lisp objects.  A string is a specialized "
"array; its elements must be characters.  Each type of array has its own read "
"syntax.  @xref{String Type}, and @ref{Vector Type}."
msgstr ""

# type: Plain text
#: lispref/sequences.texi:239
msgid "All four kinds of array share these characteristics:"
msgstr ""

# type: itemize
#: lispref/sequences.texi:245
msgid ""
"The first element of an array has index zero, the second element has index "
"1, and so on.  This is called @dfn{zero-origin} indexing.  For example, an "
"array of four elements has indices 0, 1, 2, @w{and 3}."
msgstr ""

# type: itemize
#: lispref/sequences.texi:249
msgid ""
"The length of the array is fixed once you create it; you cannot change the "
"length of an existing array."
msgstr ""

# type: itemize
#: lispref/sequences.texi:253
msgid ""
"For purposes of evaluation, the array is a constant---in other words, it "
"evaluates to itself."
msgstr ""

# type: itemize
#: lispref/sequences.texi:257
msgid ""
"The elements of an array may be referenced or changed with the functions "
"@code{aref} and @code{aset}, respectively (@pxref{Array Functions})."
msgstr ""

# type: Plain text
#: lispref/sequences.texi:262
msgid ""
"When you create an array, other than a char-table, you must specify its "
"length.  You cannot specify the length of a char-table, because that is "
"determined by the range of character codes."
msgstr ""

# type: Plain text
#: lispref/sequences.texi:266
msgid ""
"In principle, if you want an array of text characters, you could use either "
"a string or a vector.  In practice, we always choose strings for such "
"applications, for four reasons:"
msgstr ""

# type: itemize
#: lispref/sequences.texi:270
msgid "They occupy one-fourth the space of a vector of the same elements."
msgstr ""

# type: itemize
#: lispref/sequences.texi:274
msgid ""
"Strings are printed in a way that shows the contents more clearly as text."
msgstr ""

# type: itemize
#: lispref/sequences.texi:277
msgid "Strings can hold text properties.  @xref{Text Properties}."
msgstr ""

# type: itemize
#: lispref/sequences.texi:282
msgid ""
"Many of the specialized editing and I/O facilities of Emacs accept only "
"strings.  For example, you cannot insert a vector of characters into a "
"buffer the way you can insert a string.  @xref{Strings and Characters}."
msgstr ""

# type: Plain text
#: lispref/sequences.texi:288
msgid ""
"By contrast, for an array of keyboard input characters (such as a key "
"sequence), a vector may be necessary, because many keyboard input characters "
"are outside the range that will fit in a string.  @xref{Key Sequence Input}."
msgstr ""

# type: section
#: lispref/sequences.texi:290
#, no-wrap
msgid "Functions that Operate on Arrays"
msgstr ""

# type: Plain text
#: lispref/sequences.texi:294
msgid ""
"In this section, we describe the functions that accept all types of arrays."
msgstr ""

# type: defun
#: lispref/sequences.texi:295
#, no-wrap
msgid "arrayp object"
msgstr ""

# type: defun
#: lispref/sequences.texi:298
msgid ""
"This function returns @code{t} if @var{object} is an array (i.e., a vector, "
"a string, a bool-vector or a char-table)."
msgstr ""

# type: group
#: lispref/sequences.texi:307
#, no-wrap
msgid ""
"(arrayp [a])\n"
"     @result{} t\n"
"(arrayp \"asdf\")\n"
"     @result{} t\n"
"(arrayp (syntax-table))    ;; @r{A char-table.}\n"
"     @result{} t\n"
msgstr ""

# type: defun
#: lispref/sequences.texi:311
#, no-wrap
msgid "aref array index"
msgstr ""

# type: cindex
#: lispref/sequences.texi:312
#, no-wrap
msgid "array elements"
msgstr ""

# type: defun
#: lispref/sequences.texi:315
msgid ""
"This function returns the @var{index}th element of @var{array}.  The first "
"element is at index zero."
msgstr ""

# type: group
#: lispref/sequences.texi:322
#, no-wrap
msgid ""
"(setq primes [2 3 5 7 11 13])\n"
"     @result{} [2 3 5 7 11 13]\n"
"(aref primes 4)\n"
"     @result{} 11\n"
msgstr ""

# type: group
#: lispref/sequences.texi:326
#, no-wrap
msgid ""
"(aref \"abcdefg\" 1)\n"
"     @result{} 98           ; @r{@samp{b} is @acronym{ASCII} code 98.}\n"
msgstr ""

# type: defun
#: lispref/sequences.texi:330
msgid "See also the function @code{elt}, in @ref{Sequence Functions}."
msgstr ""

# type: defun
#: lispref/sequences.texi:332
#, no-wrap
msgid "aset array index object"
msgstr ""

# type: defun
#: lispref/sequences.texi:335
msgid ""
"This function sets the @var{index}th element of @var{array} to be @var"
"{object}.  It returns @var{object}."
msgstr ""

# type: group
#: lispref/sequences.texi:344
#, no-wrap
msgid ""
"(setq w [foo bar baz])\n"
"     @result{} [foo bar baz]\n"
"(aset w 0 'fu)\n"
"     @result{} fu\n"
"w\n"
"     @result{} [fu bar baz]\n"
msgstr ""

# type: group
#: lispref/sequences.texi:353
#, no-wrap
msgid ""
"(setq x \"asdfasfd\")\n"
"     @result{} \"asdfasfd\"\n"
"(aset x 3 ?Z)\n"
"     @result{} 90\n"
"x\n"
"     @result{} \"asdZasfd\"\n"
msgstr ""

# type: defun
#: lispref/sequences.texi:359
msgid ""
"If @var{array} is a string and @var{object} is not a character, a @code"
"{wrong-type-argument} error results.  The function converts a unibyte string "
"to multibyte if necessary to insert a character."
msgstr ""

# type: defun
#: lispref/sequences.texi:361
#, no-wrap
msgid "fillarray array object"
msgstr ""

# type: defun
#: lispref/sequences.texi:364
msgid ""
"This function fills the array @var{array} with @var{object}, so that each "
"element of @var{array} is @var{object}.  It returns @var{array}."
msgstr ""

# type: group
#: lispref/sequences.texi:373
#, no-wrap
msgid ""
"(setq a [a b c d e f g])\n"
"     @result{} [a b c d e f g]\n"
"(fillarray a 0)\n"
"     @result{} [0 0 0 0 0 0 0]\n"
"a\n"
"     @result{} [0 0 0 0 0 0 0]\n"
msgstr ""

# type: group
#: lispref/sequences.texi:379
#, no-wrap
msgid ""
"(setq s \"When in the course\")\n"
"     @result{} \"When in the course\"\n"
"(fillarray s ?-)\n"
"     @result{} \"------------------\"\n"
msgstr ""

# type: defun
#: lispref/sequences.texi:384
msgid ""
"If @var{array} is a string and @var{object} is not a character, a @code"
"{wrong-type-argument} error results."
msgstr ""

# type: Plain text
#: lispref/sequences.texi:388
msgid ""
"The general sequence functions @code{copy-sequence} and @code{length} are "
"often useful for objects known to be arrays.  @xref{Sequence Functions}."
msgstr ""

# type: cindex
#: lispref/sequences.texi:391
#, no-wrap
msgid "vector (type)"
msgstr ""

# type: Plain text
#: lispref/sequences.texi:401
msgid ""
"Arrays in Lisp, like arrays in most languages, are blocks of memory whose "
"elements can be accessed in constant time.  A @dfn{vector} is a general-"
"purpose array of specified length; its elements can be any Lisp objects.  "
"(By contrast, a string can hold only characters as elements.)  Vectors in "
"Emacs are used for obarrays (vectors of symbols), and as part of keymaps "
"(vectors of commands).  They are also used internally as part of the "
"representation of a byte-compiled function; if you print such a function, "
"you will see a vector in it."
msgstr ""

# type: Plain text
#: lispref/sequences.texi:404
msgid ""
"In Emacs Lisp, the indices of the elements of a vector start from zero and "
"count up from there."
msgstr ""

# type: Plain text
#: lispref/sequences.texi:409
msgid ""
"Vectors are printed with square brackets surrounding the elements.  Thus, a "
"vector whose elements are the symbols @code{a}, @code{b} and @code{a} is "
"printed as @code{[a b a]}.  You can write vectors in the same way in Lisp "
"input."
msgstr ""

# type: Plain text
#: lispref/sequences.texi:414
msgid ""
"A vector, like a string or a number, is considered a constant for "
"evaluation: the result of evaluating it is the same vector.  This does not "
"evaluate or even examine the elements of the vector.  @xref{Self-Evaluating "
"Forms}."
msgstr ""

# type: Plain text
#: lispref/sequences.texi:416
msgid "Here are examples illustrating these principles:"
msgstr ""

# type: group
#: lispref/sequences.texi:425
#, no-wrap
msgid ""
"(setq avector [1 two '(three) \"four\" [five]])\n"
"     @result{} [1 two (quote (three)) \"four\" [five]]\n"
"(eval avector)\n"
"     @result{} [1 two (quote (three)) \"four\" [five]]\n"
"(eq avector (eval avector))\n"
"     @result{} t\n"
msgstr ""

# type: section
#: lispref/sequences.texi:429
#, no-wrap
msgid "Functions for Vectors"
msgstr ""

# type: Plain text
#: lispref/sequences.texi:432
msgid "Here are some functions that relate to vectors:"
msgstr ""

# type: defun
#: lispref/sequences.texi:433
#, no-wrap
msgid "vectorp object"
msgstr ""

# type: defun
#: lispref/sequences.texi:435
msgid "This function returns @code{t} if @var{object} is a vector."
msgstr ""

# type: group
#: lispref/sequences.texi:442
#, no-wrap
msgid ""
"(vectorp [a])\n"
"     @result{} t\n"
"(vectorp \"asdf\")\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/sequences.texi:446
#, no-wrap
msgid "vector &rest objects"
msgstr ""

# type: defun
#: lispref/sequences.texi:449
msgid ""
"This function creates and returns a vector whose elements are the arguments, "
"@var{objects}."
msgstr ""

# type: group
#: lispref/sequences.texi:456
#, no-wrap
msgid ""
"(vector 'foo 23 [bar baz] \"rats\")\n"
"     @result{} [foo 23 [bar baz] \"rats\"]\n"
"(vector)\n"
"     @result{} []\n"
msgstr ""

# type: defun
#: lispref/sequences.texi:460
#, no-wrap
msgid "make-vector length object"
msgstr ""

# type: defun
#: lispref/sequences.texi:463
msgid ""
"This function returns a new vector consisting of @var{length} elements, each "
"initialized to @var{object}."
msgstr ""

# type: group
#: lispref/sequences.texi:468
#, no-wrap
msgid ""
"(setq sleepy (make-vector 9 'Z))\n"
"     @result{} [Z Z Z Z Z Z Z Z Z]\n"
msgstr ""

# type: defun
#: lispref/sequences.texi:472
#, no-wrap
msgid "vconcat &rest sequences"
msgstr ""

# type: cindex
#: lispref/sequences.texi:473
#, no-wrap
msgid "copying vectors"
msgstr ""

# type: defun
#: lispref/sequences.texi:478
msgid ""
"This function returns a new vector containing all the elements of the @var"
"{sequences}.  The arguments @var{sequences} may be true lists, vectors, "
"strings or bool-vectors.  If no @var{sequences} are given, an empty vector "
"is returned."
msgstr ""

# type: defun
#: lispref/sequences.texi:481
msgid ""
"The value is a newly constructed vector that is not @code{eq} to any "
"existing vector."
msgstr ""

# type: group
#: lispref/sequences.texi:488
#, no-wrap
msgid ""
"(setq a (vconcat '(A B C) '(D E F)))\n"
"     @result{} [A B C D E F]\n"
"(eq a (vconcat a))\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/sequences.texi:494
#, no-wrap
msgid ""
"(vconcat)\n"
"     @result{} []\n"
"(vconcat [A B C] \"aa\" '(foo (6 7)))\n"
"     @result{} [A B C 97 97 foo (6 7)]\n"
msgstr ""

# type: defun
#: lispref/sequences.texi:500
msgid ""
"The @code{vconcat} function also allows byte-code function objects as "
"arguments.  This is a special feature to make it easy to access the entire "
"contents of a byte-code function object.  @xref{Byte-Code Objects}."
msgstr ""

# type: defun
#: lispref/sequences.texi:506
msgid ""
"In Emacs versions before 21, the @code{vconcat} function allowed integers as "
"arguments, converting them to strings of digits, but that feature has been "
"eliminated.  The proper way to convert an integer to a decimal number in "
"this way is with @code{format} (@pxref{Formatting Strings}) or @code{number-"
"to-string} (@pxref{String Conversion})."
msgstr ""

# type: defun
#: lispref/sequences.texi:510
msgid ""
"For other concatenation functions, see @code{mapconcat} in @ref{Mapping "
"Functions}, @code{concat} in @ref{Creating Strings}, and @code{append} in "
"@ref{Building Lists}."
msgstr ""

# type: Plain text
#: lispref/sequences.texi:514
msgid ""
"The @code{append} function also provides a way to convert a vector into a "
"list with the same elements:"
msgstr ""

# type: group
#: lispref/sequences.texi:521
#, no-wrap
msgid ""
"(setq avector [1 two (quote (three)) \"four\" [five]])\n"
"     @result{} [1 two (quote (three)) \"four\" [five]]\n"
"(append avector nil)\n"
"     @result{} (1 two (quote (three)) \"four\" [five])\n"
msgstr ""

# type: cindex
#: lispref/sequences.texi:526
#, no-wrap
msgid "char-tables"
msgstr ""

# type: cindex
#: lispref/sequences.texi:527
#, no-wrap
msgid "extra slots of char-table"
msgstr ""

# type: Plain text
#: lispref/sequences.texi:536
msgid ""
"A char-table is much like a vector, except that it is indexed by character "
"codes.  Any valid character code, without modifiers, can be used as an index "
"in a char-table.  You can access a char-table's elements with @code{aref} "
"and @code{aset}, as with any array.  In addition, a char-table can have @dfn"
"{extra slots} to hold additional data not associated with particular "
"character codes.  Char-tables are constants when evaluated."
msgstr ""

# type: cindex
#: lispref/sequences.texi:537
#, no-wrap
msgid "subtype of char-table"
msgstr ""

# type: Plain text
#: lispref/sequences.texi:546
msgid ""
"Each char-table has a @dfn{subtype} which is a symbol.  The subtype has two "
"purposes: to distinguish char-tables meant for different uses, and to "
"control the number of extra slots.  For example, display tables are char-"
"tables with @code{display-table} as the subtype, and syntax tables are char-"
"tables with @code{syntax-table} as the subtype.  A valid subtype must have a "
"@code{char-table-extra-slots} property which is an integer between 0 and "
"10.  This integer specifies the number of @dfn{extra slots} in the char-"
"table."
msgstr ""

# type: cindex
#: lispref/sequences.texi:547
#, no-wrap
msgid "parent of char-table"
msgstr ""

# type: Plain text
#: lispref/sequences.texi:554
msgid ""
"A char-table can have a @dfn{parent}, which is another char-table.  If it "
"does, then whenever the char-table specifies @code{nil} for a particular "
"character @var{c}, it inherits the value specified in the parent.  In other "
"words, @code{(aref @var{char-table} @var{c})} returns the value from the "
"parent of @var{char-table} if @var{char-table} itself specifies @code{nil}."
msgstr ""

# type: cindex
#: lispref/sequences.texi:555
#, no-wrap
msgid "default value of char-table"
msgstr ""

# type: Plain text
#: lispref/sequences.texi:559
msgid ""
"A char-table can also have a @dfn{default value}.  If so, then @code{(aref "
"@var{char-table} @var{c})} returns the default value whenever the char-table "
"does not specify any other non-@code{nil} value."
msgstr ""

# type: defun
#: lispref/sequences.texi:560
#, no-wrap
msgid "make-char-table subtype &optional init"
msgstr ""

# type: defun
#: lispref/sequences.texi:565
msgid ""
"Return a newly created char-table, with subtype @var{subtype}.  Each element "
"is initialized to @var{init}, which defaults to @code{nil}.  You cannot "
"alter the subtype of a char-table after the char-table is created."
msgstr ""

# type: defun
#: lispref/sequences.texi:568
msgid ""
"There is no argument to specify the length of the char-table, because all "
"char-tables have room for any valid character code as an index."
msgstr ""

# type: defun
#: lispref/sequences.texi:570
#, no-wrap
msgid "char-table-p object"
msgstr ""

# type: defun
#: lispref/sequences.texi:573
msgid ""
"This function returns @code{t} if @var{object} is a char-table, otherwise "
"@code{nil}."
msgstr ""

# type: defun
#: lispref/sequences.texi:575
#, no-wrap
msgid "char-table-subtype char-table"
msgstr ""

# type: defun
#: lispref/sequences.texi:577
msgid "This function returns the subtype symbol of @var{char-table}."
msgstr ""

# type: defun
#: lispref/sequences.texi:579
#, no-wrap
msgid "set-char-table-default char-table char new-default"
msgstr ""

# type: defun
#: lispref/sequences.texi:582
msgid ""
"This function sets the default value of generic character @var{char} in @var"
"{char-table} to @var{new-default}."
msgstr ""

# type: defun
#: lispref/sequences.texi:585
msgid ""
"There is no special function to access default values in a char-table.  To "
"do that, use @code{char-table-range} (see below)."
msgstr ""

# type: defun
#: lispref/sequences.texi:587
#, no-wrap
msgid "char-table-parent char-table"
msgstr ""

# type: defun
#: lispref/sequences.texi:590
msgid ""
"This function returns the parent of @var{char-table}.  The parent is always "
"either @code{nil} or another char-table."
msgstr ""

# type: defun
#: lispref/sequences.texi:592
#, no-wrap
msgid "set-char-table-parent char-table new-parent"
msgstr ""

# type: defun
#: lispref/sequences.texi:594
msgid "This function sets the parent of @var{char-table} to @var{new-parent}."
msgstr ""

# type: defun
#: lispref/sequences.texi:596
#, no-wrap
msgid "char-table-extra-slot char-table n"
msgstr ""

# type: defun
#: lispref/sequences.texi:600
msgid ""
"This function returns the contents of extra slot @var{n} of @var{char-"
"table}.  The number of extra slots in a char-table is determined by its "
"subtype."
msgstr ""

# type: defun
#: lispref/sequences.texi:602
#, no-wrap
msgid "set-char-table-extra-slot char-table n value"
msgstr ""

# type: defun
#: lispref/sequences.texi:605
msgid ""
"This function stores @var{value} in extra slot @var{n} of @var{char-table}."
msgstr ""

# type: Plain text
#: lispref/sequences.texi:609
msgid ""
"A char-table can specify an element value for a single character code; it "
"can also specify a value for an entire character set."
msgstr ""

# type: defun
#: lispref/sequences.texi:610
#, no-wrap
msgid "char-table-range char-table range"
msgstr ""

# type: defun
#: lispref/sequences.texi:613
msgid ""
"This returns the value specified in @var{char-table} for a range of "
"characters @var{range}.  Here are the possibilities for @var{range}:"
msgstr ""

# type: table
#: lispref/sequences.texi:617 lispref/sequences.texi:641
msgid "Refers to the default value."
msgstr ""

# type: var{#1}
#: lispref/sequences.texi:618 lispref/sequences.texi:645
#, no-wrap
msgid "char"
msgstr ""

# type: table
#: lispref/sequences.texi:621 lispref/sequences.texi:648
msgid ""
"Refers to the element for character @var{char} (supposing @var{char} is a "
"valid character code)."
msgstr ""

# type: var{#1}
#: lispref/sequences.texi:622 lispref/sequences.texi:649
#, no-wrap
msgid "charset"
msgstr ""

# type: table
#: lispref/sequences.texi:625 lispref/sequences.texi:652
msgid ""
"Refers to the value specified for the whole character set @var{charset} "
"(@pxref{Character Sets})."
msgstr ""

# type: var{#1}
#: lispref/sequences.texi:626 lispref/sequences.texi:653
#, no-wrap
msgid "generic-char"
msgstr ""

# type: table
#: lispref/sequences.texi:631
msgid ""
"A generic character stands for a character set, or a row of a character set; "
"specifying the generic character as argument is equivalent to specifying the "
"character set name.  @xref{Splitting Characters}, for a description of "
"generic characters."
msgstr ""

# type: defun
#: lispref/sequences.texi:634
#, no-wrap
msgid "set-char-table-range char-table range value"
msgstr ""

# type: defun
#: lispref/sequences.texi:637
msgid ""
"This function sets the value in @var{char-table} for a range of characters "
"@var{range}.  Here are the possibilities for @var{range}:"
msgstr ""

# type: table
#: lispref/sequences.texi:644
msgid "Refers to the whole range of character codes."
msgstr ""

# type: table
#: lispref/sequences.texi:657
msgid ""
"A generic character stands for a character set; specifying the generic "
"character as argument is equivalent to specifying the character set name.  "
"@xref{Splitting Characters}, for a description of generic characters."
msgstr ""

# type: defun
#: lispref/sequences.texi:660
#, no-wrap
msgid "map-char-table function char-table"
msgstr ""

# type: defun
#: lispref/sequences.texi:666
msgid ""
"This function calls @var{function} for each element of @var{char-table}.  "
"@var{function} is called with two arguments, a key and a value.  The key is "
"a possible @var{range} argument for @code{char-table-range}---either a valid "
"character or a generic character---and the value is @code{(char-table-range "
"@var{char-table} @var{key})}."
msgstr ""

# type: defun
#: lispref/sequences.texi:669
msgid ""
"Overall, the key-value pairs passed to @var{function} describe all the "
"values stored in @var{char-table}."
msgstr ""

# type: defun
#: lispref/sequences.texi:673
msgid ""
"The return value is always @code{nil}; to make this function useful, @var"
"{function} should have side effects.  For example, here is how to examine "
"each element of the syntax table:"
msgstr ""

# type: example
#: lispref/sequences.texi:685
#, no-wrap
msgid ""
"(let (accumulator)\n"
"  (map-char-table\n"
"   #'(lambda (key value)\n"
"       (setq accumulator\n"
"             (cons (list key value) accumulator)))\n"
"   (syntax-table))\n"
"  accumulator)\n"
"@result{}\n"
"((475008 nil) (474880 nil) (474752 nil) (474624 nil)\n"
" ... (5 (3)) (4 (3)) (3 (3)) (2 (3)) (1 (3)) (0 (3)))\n"
msgstr ""

# type: cindex
#: lispref/sequences.texi:689 lispref/sequences.texi:690
#, no-wrap
msgid "Bool-vectors"
msgstr ""

# type: Plain text
#: lispref/sequences.texi:698
msgid ""
"A bool-vector is much like a vector, except that it stores only the values "
"@code{t} and @code{nil}.  If you try to store any non-@code{nil} value into "
"an element of the bool-vector, the effect is to store @code{t} there.  As "
"with all arrays, bool-vector indices start from 0, and the length cannot be "
"changed once the bool-vector is created.  Bool-vectors are constants when "
"evaluated."
msgstr ""

# type: Plain text
#: lispref/sequences.texi:702
msgid ""
"There are two special functions for working with bool-vectors; aside from "
"that, you manipulate them with same functions used for other kinds of arrays."
msgstr ""

# type: defun
#: lispref/sequences.texi:703
#, no-wrap
msgid "make-bool-vector length initial"
msgstr ""

# type: defun
#: lispref/sequences.texi:706
msgid ""
"Return a new bool-vector of @var{length} elements, each one initialized to "
"@var{initial}."
msgstr ""

# type: defun
#: lispref/sequences.texi:708
#, no-wrap
msgid "bool-vector-p object"
msgstr ""

# type: defun
#: lispref/sequences.texi:711
msgid ""
"This returns @code{t} if @var{object} is a bool-vector, and @code{nil} "
"otherwise."
msgstr ""

# type: Plain text
#: lispref/sequences.texi:716
msgid ""
"Here is an example of creating, examining, and updating a bool-vector.  Note "
"that the printed form represents up to 8 boolean values as a single "
"character."
msgstr ""

# type: example
#: lispref/sequences.texi:726
#, no-wrap
msgid ""
"(setq bv (make-bool-vector 5 t))\n"
"     @result{} #&5\"^_\"\n"
"(aref bv 1)\n"
"     @result{} t\n"
"(aset bv 3 nil)\n"
"     @result{} nil\n"
"bv\n"
"     @result{} #&5\"^W\"\n"
msgstr ""

# type: Plain text
#: lispref/sequences.texi:731
msgid ""
"These results make sense because the binary codes for control-_ and control-"
"W are 11111 and 10111, respectively."
msgstr ""

# type: ignore
#: lispref/sequences.texi:734
#, no-wrap
msgid "   arch-tag: fcf1084a-cd29-4adc-9f16-68586935b386\n"
msgstr "   arch-tag: fcf1084a-cd29-4adc-9f16-68586935b386\n"

# type: menu
#: lispref/streams.texi:9 lispref/vol1.texi:544 lispref/vol2.texi:545
#, no-wrap
msgid "Reading and Printing Lisp Objects"
msgstr ""

# type: Plain text
#: lispref/streams.texi:14
msgid ""
"@dfn{Printing} and @dfn{reading} are the operations of converting Lisp "
"objects to textual form and vice versa.  They use the printed "
"representations and read syntax described in @ref{Lisp Data Types}."
msgstr ""

# type: Plain text
#: lispref/streams.texi:18
msgid ""
"This chapter describes the Lisp functions for reading and printing.  It also "
"describes @dfn{streams}, which specify where to get the text (if reading) or "
"where to put it (if printing)."
msgstr ""

# type: menu
#: lispref/streams.texi:26 lispref/streams.texi:28 lispref/vol1.texi:552
#: lispref/vol2.texi:553
#, no-wrap
msgid "Streams Intro"
msgstr ""

# type: menu
#: lispref/streams.texi:26 lispref/vol1.texi:552 lispref/vol2.texi:553
msgid "Overview of streams, reading and printing."
msgstr ""

# type: menu
#: lispref/streams.texi:26 lispref/streams.texi:77 lispref/streams.texi:78
#: lispref/vol1.texi:552 lispref/vol2.texi:553
#, no-wrap
msgid "Input Streams"
msgstr ""

# type: menu
#: lispref/streams.texi:26
msgid "Various data types that can be used as input streams."
msgstr ""

# type: menu
#: lispref/streams.texi:26 lispref/streams.texi:276 lispref/streams.texi:277
#: lispref/vol1.texi:552 lispref/vol2.texi:553
#, no-wrap
msgid "Input Functions"
msgstr ""

# type: menu
#: lispref/streams.texi:26 lispref/vol1.texi:552 lispref/vol2.texi:553
msgid "Functions to read Lisp objects from text."
msgstr ""

# type: menu
#: lispref/streams.texi:26 lispref/streams.texi:344 lispref/streams.texi:345
#: lispref/vol1.texi:552 lispref/vol2.texi:553
#, no-wrap
msgid "Output Streams"
msgstr ""

# type: menu
#: lispref/streams.texi:26
msgid "Various data types that can be used as output streams."
msgstr ""

# type: menu
#: lispref/streams.texi:26 lispref/streams.texi:516 lispref/streams.texi:517
#: lispref/vol1.texi:552 lispref/vol2.texi:553
#, no-wrap
msgid "Output Functions"
msgstr ""

# type: menu
#: lispref/streams.texi:26 lispref/vol1.texi:552 lispref/vol2.texi:553
msgid "Functions to print Lisp objects as text."
msgstr ""

# type: node
#: lispref/streams.texi:26 lispref/streams.texi:682
#, no-wrap
msgid "Output Variables"
msgstr ""

# type: menu
#: lispref/streams.texi:26
msgid "Variables that control what the printing functions do."
msgstr ""

# type: section
#: lispref/streams.texi:29
#, no-wrap
msgid "Introduction to Reading and Printing"
msgstr ""

# type: cindex
#: lispref/streams.texi:30
#, no-wrap
msgid "Lisp reader"
msgstr ""

# type: cindex
#: lispref/streams.texi:31
#, no-wrap
msgid "printing"
msgstr ""

# type: cindex
#: lispref/streams.texi:32
#, no-wrap
msgid "reading"
msgstr ""

# type: Plain text
#: lispref/streams.texi:40
msgid ""
"@dfn{Reading} a Lisp object means parsing a Lisp expression in textual form "
"and producing a corresponding Lisp object.  This is how Lisp programs get "
"into Lisp from files of Lisp code.  We call the text the @dfn{read syntax} "
"of the object.  For example, the text @samp{(a .@: 5)} is the read syntax "
"for a cons cell whose @sc{car} is @code{a} and whose @sc{cdr} is the number "
"5."
msgstr ""

# type: Plain text
#: lispref/streams.texi:45
msgid ""
"@dfn{Printing} a Lisp object means producing text that represents that "
"object---converting the object to its @dfn{printed representation} (@pxref"
"{Printed Representation}).  Printing the cons cell described above produces "
"the text @samp{(a .@: 5)}."
msgstr ""

# type: Plain text
#: lispref/streams.texi:55
msgid ""
"Reading and printing are more or less inverse operations: printing the "
"object that results from reading a given piece of text often produces the "
"same text, and reading the text that results from printing an object usually "
"produces a similar-looking object.  For example, printing the symbol @code"
"{foo} produces the text @samp{foo}, and reading that text returns the symbol "
"@code{foo}.  Printing a list whose elements are @code{a} and @code{b} "
"produces the text @samp{(a b)}, and reading that text produces a list (but "
"not the same list) with elements @code{a} and @code{b}."
msgstr ""

# type: Plain text
#: lispref/streams.texi:58
msgid ""
"However, these two operations are not precisely inverse to each other.  "
"There are three kinds of exceptions:"
msgstr ""

# type: itemize
#: lispref/streams.texi:65
msgid ""
"Printing can produce text that cannot be read.  For example, buffers, "
"windows, frames, subprocesses and markers print as text that starts with "
"@samp{#}; if you try to read this text, you get an error.  There is no way "
"to read those data types."
msgstr ""

# type: itemize
#: lispref/streams.texi:71
msgid ""
"One object can have multiple textual representations.  For example, @samp{1} "
"and @samp{01} represent the same integer, and @samp{(a b)} and @samp{(a .@: "
"(b))} represent the same list.  Reading will accept any of the alternatives, "
"but printing must choose one of them."
msgstr ""

# type: itemize
#: lispref/streams.texi:75
msgid ""
"Comments can appear at certain points in the middle of an object's read "
"sequence without affecting the result of reading it."
msgstr ""

# type: cindex
#: lispref/streams.texi:79
#, no-wrap
msgid "stream (for reading)"
msgstr ""

# type: cindex
#: lispref/streams.texi:80
#, no-wrap
msgid "input stream"
msgstr ""

# type: Plain text
#: lispref/streams.texi:86
msgid ""
"Most of the Lisp functions for reading text take an @dfn{input stream} as an "
"argument.  The input stream specifies where or how to get the characters of "
"the text to be read.  Here are the possible types of input stream:"
msgstr ""

# type: cindex
#: lispref/streams.texi:89
#, no-wrap
msgid "buffer input stream"
msgstr ""

# type: table
#: lispref/streams.texi:92
msgid ""
"The input characters are read from @var{buffer}, starting with the character "
"directly after point.  Point advances as characters are read."
msgstr ""

# type: var{#1}
#: lispref/streams.texi:93 lispref/streams.texi:359
#, no-wrap
msgid "marker"
msgstr ""

# type: cindex
#: lispref/streams.texi:94
#, no-wrap
msgid "marker input stream"
msgstr ""

# type: table
#: lispref/streams.texi:99
msgid ""
"The input characters are read from the buffer that @var{marker} is in, "
"starting with the character directly after the marker.  The marker position "
"advances as characters are read.  The value of point in the buffer has no "
"effect when the stream is a marker."
msgstr ""

# type: cindex
#: lispref/streams.texi:101
#, no-wrap
msgid "string input stream"
msgstr ""

# type: table
#: lispref/streams.texi:104
msgid ""
"The input characters are taken from @var{string}, starting at the first "
"character in the string and using as many characters as required."
msgstr ""

# type: cindex
#: lispref/streams.texi:106
#, no-wrap
msgid "function input stream"
msgstr ""

# type: table
#: lispref/streams.texi:109
msgid ""
"The input characters are generated by @var{function}, which must support two "
"kinds of calls:"
msgstr ""

# type: itemize
#: lispref/streams.texi:113
msgid ""
"When it is called with no arguments, it should return the next character."
msgstr ""

# type: itemize
#: lispref/streams.texi:121
msgid ""
"When it is called with one argument (always a character), @var{function} "
"should save the argument and arrange to return it on the next call.  This is "
"called @dfn{unreading} the character; it happens when the Lisp reader reads "
"one character too many and wants to ``put it back where it came from.'' In "
"this case, it makes no difference what value @var{function} returns."
msgstr ""

# type: cindex
#: lispref/streams.texi:124
#, no-wrap
msgid "@code{t} input stream"
msgstr ""

# type: table
#: lispref/streams.texi:130
msgid ""
"@code{t} used as a stream means that the input is read from the minibuffer.  "
"In fact, the minibuffer is invoked once and the text given by the user is "
"made into a string that is then used as the input stream.  If Emacs is "
"running in batch mode, standard input is used instead of the minibuffer.  "
"For example,"
msgstr ""

# type: example
#: lispref/streams.texi:132
#, no-wrap
msgid "(message \"%s\" (read t))\n"
msgstr ""

# type: table
#: lispref/streams.texi:135
msgid ""
"will read a Lisp expression from standard input and print the result to "
"standard output."
msgstr ""

# type: cindex
#: lispref/streams.texi:137
#, no-wrap
msgid "@code{nil} input stream"
msgstr ""

# type: table
#: lispref/streams.texi:141
msgid ""
"@code{nil} supplied as an input stream means to use the value of @code"
"{standard-input} instead; that value is the @dfn{default input stream}, and "
"must be a non-@code{nil} input stream."
msgstr ""

# type: table
#: lispref/streams.texi:145
msgid ""
"A symbol as input stream is equivalent to the symbol's function definition "
"(if any)."
msgstr ""

# type: Plain text
#: lispref/streams.texi:149
msgid ""
"Here is an example of reading from a stream that is a buffer, showing where "
"point is located before and after:"
msgstr ""

# type: group
#: lispref/streams.texi:155
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This@point{} is the contents of foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: group
#: lispref/streams.texi:160
#, no-wrap
msgid ""
"(read (get-buffer \"foo\"))\n"
"     @result{} is\n"
msgstr ""

# type: group
#: lispref/streams.texi:164
#, no-wrap
msgid ""
"(read (get-buffer \"foo\"))\n"
"     @result{} the\n"
msgstr ""

# type: group
#: lispref/streams.texi:170
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the@point{} contents of foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: Plain text
#: lispref/streams.texi:176
msgid ""
"Note that the first read skips a space.  Reading skips any amount of "
"whitespace preceding the significant text."
msgstr ""

# type: Plain text
#: lispref/streams.texi:180
msgid ""
"Here is an example of reading from a stream that is a marker, initially "
"positioned at the beginning of the buffer shown.  The value read is the "
"symbol @code{This}."
msgstr ""

# type: group
#: lispref/streams.texi:187
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: group
#: lispref/streams.texi:192
#, no-wrap
msgid ""
"(setq m (set-marker (make-marker) 1 (get-buffer \"foo\")))\n"
"     @result{} #<marker at 1 in foo>\n"
msgstr ""

# type: group
#: lispref/streams.texi:196
#, no-wrap
msgid ""
"(read m)\n"
"     @result{} This\n"
msgstr ""

# type: group
#: lispref/streams.texi:200
#, no-wrap
msgid ""
"m\n"
"     @result{} #<marker at 5 in foo>   ;; @r{Before the first space.}\n"
msgstr ""

# type: Plain text
#: lispref/streams.texi:204
msgid "Here we read from the contents of a string:"
msgstr ""

# type: group
#: lispref/streams.texi:209
#, no-wrap
msgid ""
"(read \"(When in) the course\")\n"
"     @result{} (When in)\n"
msgstr ""

# type: Plain text
#: lispref/streams.texi:216
msgid ""
"The following example reads from the minibuffer.  The prompt is: @w{@samp"
"{Lisp expression: }}.  (That is always the prompt used when you read from "
"the stream @code{t}.)  The user's input is shown following the prompt."
msgstr ""

# type: group
#: lispref/streams.texi:224
#, no-wrap
msgid ""
"(read t)\n"
"     @result{} 23\n"
"---------- Buffer: Minibuffer ----------\n"
"Lisp expression: @kbd{23 @key{RET}}\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

# type: Plain text
#: lispref/streams.texi:232
msgid ""
"Finally, here is an example of a stream that is a function, named @code"
"{useless-stream}.  Before we use the stream, we initialize the variable @code"
"{useless-list} to a list of characters.  Then each call to the function @code"
"{useless-stream} obtains the next character in the list or unreads a "
"character by adding it to the front of the list."
msgstr ""

# type: group
#: lispref/streams.texi:237
#, no-wrap
msgid ""
"(setq useless-list (append \"XY()\" nil))\n"
"     @result{} (88 89 40 41)\n"
msgstr ""

# type: group
#: lispref/streams.texi:246
#, no-wrap
msgid ""
"(defun useless-stream (&optional unread)\n"
"  (if unread\n"
"      (setq useless-list (cons unread useless-list))\n"
"    (prog1 (car useless-list)\n"
"           (setq useless-list (cdr useless-list)))))\n"
"     @result{} useless-stream\n"
msgstr ""

# type: Plain text
#: lispref/streams.texi:251
msgid "Now we read using the stream thus constructed:"
msgstr ""

# type: group
#: lispref/streams.texi:256
#, no-wrap
msgid ""
"(read 'useless-stream)\n"
"     @result{} XY\n"
msgstr ""

# type: group
#: lispref/streams.texi:261
#, no-wrap
msgid ""
"useless-list\n"
"     @result{} (40 41)\n"
msgstr ""

# type: Plain text
#: lispref/streams.texi:269
msgid ""
"Note that the open and close parentheses remain in the list.  The Lisp "
"reader encountered the open parenthesis, decided that it ended the input, "
"and unread it.  Another attempt to read from the stream at this point would "
"read @samp{()} and return @code{nil}."
msgstr ""

# type: defun
#: lispref/streams.texi:270
#, no-wrap
msgid "get-file-char"
msgstr ""

# type: defun
#: lispref/streams.texi:274
msgid ""
"This function is used internally as an input stream to read from the input "
"file opened by the function @code{load}.  Don't use this function yourself."
msgstr ""

# type: Plain text
#: lispref/streams.texi:281
msgid ""
"This section describes the Lisp functions and variables that pertain to "
"reading."
msgstr ""

# type: Plain text
#: lispref/streams.texi:285
msgid ""
"In the functions below, @var{stream} stands for an input stream (see the "
"previous section).  If @var{stream} is @code{nil} or omitted, it defaults to "
"the value of @code{standard-input}."
msgstr ""

# type: Plain text
#: lispref/streams.texi:289
msgid ""
"An @code{end-of-file} error is signaled if reading encounters an "
"unterminated list, vector, or string."
msgstr ""

# type: defun
#: lispref/streams.texi:290
#, no-wrap
msgid "read &optional stream"
msgstr ""

# type: defun
#: lispref/streams.texi:293
msgid ""
"This function reads one textual Lisp expression from @var{stream}, returning "
"it as a Lisp object.  This is the basic Lisp input function."
msgstr ""

# type: defun
#: lispref/streams.texi:295
#, no-wrap
msgid "read-from-string string &optional start end"
msgstr ""

# type: cindex
#: lispref/streams.texi:296
#, no-wrap
msgid "string to object"
msgstr ""

# type: defun
#: lispref/streams.texi:301
msgid ""
"This function reads the first textual Lisp expression from the text in @var"
"{string}.  It returns a cons cell whose @sc{car} is that expression, and "
"whose @sc{cdr} is an integer giving the position of the next remaining "
"character in the string (i.e., the first one not read)."
msgstr ""

# type: defun
#: lispref/streams.texi:306
msgid ""
"If @var{start} is supplied, then reading begins at index @var{start} in the "
"string (where the first character is at index 0).  If you specify @var{end}, "
"then reading is forced to stop just before that index, as if the rest of the "
"string were not there."
msgstr ""

# type: group
#: lispref/streams.texi:313
#, no-wrap
msgid ""
"(read-from-string \"(setq x 55) (setq y 5)\")\n"
"     @result{} ((setq x 55) . 11)\n"
msgstr ""

# type: group
#: lispref/streams.texi:317
#, no-wrap
msgid ""
"(read-from-string \"\\\"A short string\\\"\")\n"
"     @result{} (\"A short string\" . 16)\n"
msgstr ""

# type: group
#: lispref/streams.texi:323
#, no-wrap
msgid ""
";; @r{Read starting at the first character.}\n"
"(read-from-string \"(list 112)\" 0)\n"
"     @result{} ((list 112) . 10)\n"
msgstr ""

# type: group
#: lispref/streams.texi:328
#, no-wrap
msgid ""
";; @r{Read starting at the second character.}\n"
"(read-from-string \"(list 112)\" 1)\n"
"     @result{} (list . 5)\n"
msgstr ""

# type: group
#: lispref/streams.texi:334
#, no-wrap
msgid ""
";; @r{Read starting at the seventh character,}\n"
";;   @r{and stopping at the ninth.}\n"
"(read-from-string \"(list 112)\" 6 8)\n"
"     @result{} (11 . 8)\n"
msgstr ""

# type: defvar
#: lispref/streams.texi:338
#, no-wrap
msgid "standard-input"
msgstr ""

# type: defvar
#: lispref/streams.texi:342
msgid ""
"This variable holds the default input stream---the stream that @code{read} "
"uses when the @var{stream} argument is @code{nil}.  The default is @code{t}, "
"meaning use the minibuffer."
msgstr ""

# type: cindex
#: lispref/streams.texi:346
#, no-wrap
msgid "stream (for printing)"
msgstr ""

# type: cindex
#: lispref/streams.texi:347
#, no-wrap
msgid "output stream"
msgstr ""

# type: Plain text
#: lispref/streams.texi:352
msgid ""
"An output stream specifies what to do with the characters produced by "
"printing.  Most print functions accept an output stream as an optional "
"argument.  Here are the possible types of output stream:"
msgstr ""

# type: cindex
#: lispref/streams.texi:355
#, no-wrap
msgid "buffer output stream"
msgstr ""

# type: table
#: lispref/streams.texi:358
msgid ""
"The output characters are inserted into @var{buffer} at point.  Point "
"advances as characters are inserted."
msgstr ""

# type: cindex
#: lispref/streams.texi:360
#, no-wrap
msgid "marker output stream"
msgstr ""

# type: table
#: lispref/streams.texi:368
msgid ""
"The output characters are inserted into the buffer that @var{marker} points "
"into, at the marker position.  The marker position advances as characters "
"are inserted.  The value of point in the buffer has no effect on printing "
"when the stream is a marker, and this kind of printing does not move point "
"(except that if the marker points at or before the position of point, point "
"advances with the surrounding text, as usual)."
msgstr ""

# type: cindex
#: lispref/streams.texi:370
#, no-wrap
msgid "function output stream"
msgstr ""

# type: table
#: lispref/streams.texi:375
msgid ""
"The output characters are passed to @var{function}, which is responsible for "
"storing them away.  It is called with a single character as argument, as "
"many times as there are characters to be output, and is responsible for "
"storing the characters wherever you want to put them."
msgstr ""

# type: cindex
#: lispref/streams.texi:377
#, no-wrap
msgid "@code{t} output stream"
msgstr ""

# type: table
#: lispref/streams.texi:379
msgid "The output characters are displayed in the echo area."
msgstr ""

# type: cindex
#: lispref/streams.texi:381
#, no-wrap
msgid "@code{nil} output stream"
msgstr ""

# type: table
#: lispref/streams.texi:385
msgid ""
"@code{nil} specified as an output stream means to use the value of @code"
"{standard-output} instead; that value is the @dfn{default output stream}, "
"and must not be @code{nil}."
msgstr ""

# type: table
#: lispref/streams.texi:389
msgid ""
"A symbol as output stream is equivalent to the symbol's function definition "
"(if any)."
msgstr ""

# type: Plain text
#: lispref/streams.texi:394
msgid ""
"Many of the valid output streams are also valid as input streams.  The "
"difference between input and output streams is therefore more a matter of "
"how you use a Lisp object, than of different types of object."
msgstr ""

# type: Plain text
#: lispref/streams.texi:399
msgid ""
"Here is an example of a buffer used as an output stream.  Point is initially "
"located as shown immediately before the @samp{h} in @samp{the}.  At the end, "
"point is located directly before that same @samp{h}."
msgstr ""

# type: cindex
#: lispref/streams.texi:400
#, no-wrap
msgid "print example"
msgstr ""

# type: group
#: lispref/streams.texi:406
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is t@point{}he contents of foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: example
#: lispref/streams.texi:410
#, no-wrap
msgid ""
"(print \"This is the output\" (get-buffer \"foo\"))\n"
"     @result{} \"This is the output\"\n"
"\n"
msgstr ""

# type: group
#: lispref/streams.texi:417
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is t\n"
"\"This is the output\"\n"
"@point{}he contents of foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: Plain text
#: lispref/streams.texi:426
msgid ""
"Now we show a use of a marker as an output stream.  Initially, the marker is "
"in buffer @code{foo}, between the @samp{t} and the @samp{h} in the word @samp"
"{the}.  At the end, the marker has advanced over the inserted text so that "
"it remains positioned before the same @samp{h}.  Note that the location of "
"point, shown in the usual fashion, has no effect."
msgstr ""

# type: group
#: lispref/streams.texi:432
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the @point{}output\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: group
#: lispref/streams.texi:437
#, no-wrap
msgid ""
"(setq m (copy-marker 10))\n"
"     @result{} #<marker at 10 in foo>\n"
msgstr ""

# type: group
#: lispref/streams.texi:442
#, no-wrap
msgid ""
"(print \"More output for foo.\" m)\n"
"     @result{} \"More output for foo.\"\n"
msgstr ""

# type: group
#: lispref/streams.texi:450
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is t\n"
"\"More output for foo.\"\n"
"he @point{}output\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: group
#: lispref/streams.texi:455
#, no-wrap
msgid ""
"m\n"
"     @result{} #<marker at 34 in foo>\n"
msgstr ""

# type: Plain text
#: lispref/streams.texi:459
msgid "The following example shows output to the echo area:"
msgstr ""

# type: group
#: lispref/streams.texi:467
#, no-wrap
msgid ""
"(print \"Echo Area output\" t)\n"
"     @result{} \"Echo Area output\"\n"
"---------- Echo Area ----------\n"
"\"Echo Area output\"\n"
"---------- Echo Area ----------\n"
msgstr ""

# type: Plain text
#: lispref/streams.texi:475
msgid ""
"Finally, we show the use of a function as an output stream.  The function "
"@code{eat-output} takes each character that it is given and conses it onto "
"the front of the list @code{last-output} (@pxref{Building Lists}).  At the "
"end, the list contains all the characters output, but in reverse order."
msgstr ""

# type: group
#: lispref/streams.texi:480
#, no-wrap
msgid ""
"(setq last-output nil)\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/streams.texi:486
#, no-wrap
msgid ""
"(defun eat-output (c)\n"
"  (setq last-output (cons c last-output)))\n"
"     @result{} eat-output\n"
msgstr ""

# type: group
#: lispref/streams.texi:491
#, no-wrap
msgid ""
"(print \"This is the output\" 'eat-output)\n"
"     @result{} \"This is the output\"\n"
msgstr ""

# type: group
#: lispref/streams.texi:497
#, no-wrap
msgid ""
"last-output\n"
"     @result{} (10 34 116 117 112 116 117 111 32 101 104\n"
"    116 32 115 105 32 115 105 104 84 34 10)\n"
msgstr ""

# type: Plain text
#: lispref/streams.texi:502
msgid "Now we can put the output in the proper order by reversing the list:"
msgstr ""

# type: group
#: lispref/streams.texi:509
#, no-wrap
msgid ""
"(concat (nreverse last-output))\n"
"     @result{} \"\n"
"\\\"This is the output\\\"\n"
"\"\n"
msgstr ""

# type: Plain text
#: lispref/streams.texi:515
msgid ""
"Calling @code{concat} converts the list to a string so you can see its "
"contents more clearly."
msgstr ""

# type: Plain text
#: lispref/streams.texi:521
msgid ""
"This section describes the Lisp functions for printing Lisp objects---"
"converting objects into their printed representation."
msgstr ""

# type: cindex
#: lispref/streams.texi:522
#, no-wrap
msgid "@samp{\"} in printing"
msgstr ""

# type: cindex
#: lispref/streams.texi:523
#, no-wrap
msgid "@samp{\\} in printing"
msgstr ""

# type: cindex
#: lispref/streams.texi:524
#, no-wrap
msgid "quoting characters in printing"
msgstr ""

# type: cindex
#: lispref/streams.texi:525
#, no-wrap
msgid "escape characters in printing"
msgstr ""

# type: Plain text
#: lispref/streams.texi:533
msgid ""
"Some of the Emacs printing functions add quoting characters to the output "
"when necessary so that it can be read properly.  The quoting characters used "
"are @samp{\"} and @samp{\\}; they distinguish strings from symbols, and "
"prevent punctuation characters in strings and symbols from being taken as "
"delimiters when reading.  @xref{Printed Representation}, for full details.  "
"You specify quoting or no quoting by the choice of printing function."
msgstr ""

# type: Plain text
#: lispref/streams.texi:539
msgid ""
"If the text is to be read back into Lisp, then you should print with quoting "
"characters to avoid ambiguity.  Likewise, if the purpose is to describe a "
"Lisp object clearly for a Lisp programmer.  However, if the purpose of the "
"output is to look nice for humans, then it is usually better to print "
"without quoting."
msgstr ""

# type: Plain text
#: lispref/streams.texi:547
msgid ""
"Lisp objects can refer to themselves.  Printing a self-referential object in "
"the normal way would require an infinite amount of text, and the attempt "
"could cause infinite recursion.  Emacs detects such recursion and prints "
"@samp{#@var{level}} instead of recursively printing an object already being "
"printed.  For example, here @samp{#0} indicates a recursive reference to the "
"object at level 0 of the current print operation:"
msgstr ""

# type: example
#: lispref/streams.texi:553
#, no-wrap
msgid ""
"(setq foo (list nil))\n"
"     @result{} (nil)\n"
"(setcar foo foo)\n"
"     @result{} (#0)\n"
msgstr ""

# type: Plain text
#: lispref/streams.texi:559
msgid ""
"In the functions below, @var{stream} stands for an output stream.  (See the "
"previous section for a description of output streams.)  If @var{stream} is "
"@code{nil} or omitted, it defaults to the value of @code{standard-output}."
msgstr ""

# type: defun
#: lispref/streams.texi:560
#, no-wrap
msgid "print object &optional stream"
msgstr ""

# type: cindex
#: lispref/streams.texi:561
#, no-wrap
msgid "Lisp printer"
msgstr ""

# type: defun
#: lispref/streams.texi:566
msgid ""
"The @code{print} function is a convenient way of printing.  It outputs the "
"printed representation of @var{object} to @var{stream}, printing in addition "
"one newline before @var{object} and another after it.  Quoting characters "
"are used.  @code{print} returns @var{object}.  For example:"
msgstr ""

# type: group
#: lispref/streams.texi:579
#, no-wrap
msgid ""
"(progn (print 'The\\ cat\\ in)\n"
"       (print \"the hat\")\n"
"       (print \" came back\"))\n"
"     @print{}\n"
"     @print{} The\\ cat\\ in\n"
"     @print{}\n"
"     @print{} \"the hat\"\n"
"     @print{}\n"
"     @print{} \" came back\"\n"
"     @result{} \" came back\"\n"
msgstr ""

# type: defun
#: lispref/streams.texi:583
#, no-wrap
msgid "prin1 object &optional stream"
msgstr ""

# type: defun
#: lispref/streams.texi:588
msgid ""
"This function outputs the printed representation of @var{object} to @var"
"{stream}.  It does not print newlines to separate output as @code{print} "
"does, but it does use quoting characters just like @code{print}.  It returns "
"@var{object}."
msgstr ""

# type: group
#: lispref/streams.texi:596
#, no-wrap
msgid ""
"(progn (prin1 'The\\ cat\\ in)\n"
"       (prin1 \"the hat\")\n"
"       (prin1 \" came back\"))\n"
"     @print{} The\\ cat\\ in\"the hat\"\" came back\"\n"
"     @result{} \" came back\"\n"
msgstr ""

# type: defun
#: lispref/streams.texi:600
#, no-wrap
msgid "princ object &optional stream"
msgstr ""

# type: defun
#: lispref/streams.texi:603
msgid ""
"This function outputs the printed representation of @var{object} to @var"
"{stream}.  It returns @var{object}."
msgstr ""

# type: defun
#: lispref/streams.texi:608
msgid ""
"This function is intended to produce output that is readable by people, not "
"by @code{read}, so it doesn't insert quoting characters and doesn't put "
"double-quotes around the contents of strings.  It does not add any spacing "
"between calls."
msgstr ""

# type: group
#: lispref/streams.texi:616
#, no-wrap
msgid ""
"(progn\n"
"  (princ 'The\\ cat)\n"
"  (princ \" in the \\\"hat\\\"\"))\n"
"     @print{} The cat in the \"hat\"\n"
"     @result{} \" in the \\\"hat\\\"\"\n"
msgstr ""

# type: defun
#: lispref/streams.texi:620
#, no-wrap
msgid "terpri &optional stream"
msgstr ""

# type: cindex
#: lispref/streams.texi:621
#, no-wrap
msgid "newline in print"
msgstr ""

# type: defun
#: lispref/streams.texi:624
msgid ""
"This function outputs a newline to @var{stream}.  The name stands for "
"``terminate print.''"
msgstr ""

# type: defun
#: lispref/streams.texi:626
#, no-wrap
msgid "write-char character &optional stream"
msgstr ""

# type: defun
#: lispref/streams.texi:629
msgid ""
"This function outputs @var{character} to @var{stream}.  It returns @var"
"{character}."
msgstr ""

# type: defun
#: lispref/streams.texi:631
#, no-wrap
msgid "prin1-to-string object &optional noescape"
msgstr ""

# type: cindex
#: lispref/streams.texi:632
#, no-wrap
msgid "object to string"
msgstr ""

# type: defun
#: lispref/streams.texi:635
msgid ""
"This function returns a string containing the text that @code{prin1} would "
"have printed for the same argument."
msgstr ""

# type: group
#: lispref/streams.texi:640
#, no-wrap
msgid ""
"(prin1-to-string 'foo)\n"
"     @result{} \"foo\"\n"
msgstr ""

# type: group
#: lispref/streams.texi:644
#, no-wrap
msgid ""
"(prin1-to-string (mark-marker))\n"
"     @result{} \"#<marker at 2773 in strings.texi>\"\n"
msgstr ""

# type: defun
#: lispref/streams.texi:650
msgid ""
"If @var{noescape} is non-@code{nil}, that inhibits use of quoting characters "
"in the output.  (This argument is supported in Emacs versions 19 and later.)"
msgstr ""

# type: group
#: lispref/streams.texi:655
#, no-wrap
msgid ""
"(prin1-to-string \"foo\")\n"
"     @result{} \"\\\"foo\\\"\"\n"
msgstr ""

# type: group
#: lispref/streams.texi:659
#, no-wrap
msgid ""
"(prin1-to-string \"foo\" t)\n"
"     @result{} \"foo\"\n"
msgstr ""

# type: defun
#: lispref/streams.texi:664
msgid ""
"See @code{format}, in @ref{Formatting Strings}, for other ways to obtain the "
"printed representation of a Lisp object as a string."
msgstr ""

# type: defmac
#: lispref/streams.texi:666
#, no-wrap
msgid "with-output-to-string body@dots{}"
msgstr ""

# type: defmac
#: lispref/streams.texi:669
msgid ""
"This macro executes the @var{body} forms with @code{standard-output} set up "
"to feed output into a string.  Then it returns that string."
msgstr ""

# type: defmac
#: lispref/streams.texi:671
msgid "For example, if the current buffer name is @samp{foo},"
msgstr ""

# type: example
#: lispref/streams.texi:676
#, no-wrap
msgid ""
"(with-output-to-string\n"
"  (princ \"The buffer is \")\n"
"  (princ (buffer-name)))\n"
msgstr ""

# type: defmac
#: lispref/streams.texi:680
msgid "returns @code{\"The buffer is foo\"}."
msgstr ""

# type: section
#: lispref/streams.texi:683
#, no-wrap
msgid "Variables Affecting Output"
msgstr ""

# type: cindex
#: lispref/streams.texi:684
#, no-wrap
msgid "output-controlling variables"
msgstr ""

# type: defvar
#: lispref/streams.texi:686
#, no-wrap
msgid "standard-output"
msgstr ""

# type: defvar
#: lispref/streams.texi:690
msgid ""
"The value of this variable is the default output stream---the stream that "
"print functions use when the @var{stream} argument is @code{nil}.  The "
"default is @code{t}, meaning display in the echo area."
msgstr ""

# type: defvar
#: lispref/streams.texi:692
#, no-wrap
msgid "print-quoted"
msgstr ""

# type: defvar
#: lispref/streams.texi:697
msgid ""
"If this is non-@code{nil}, that means to print quoted forms using "
"abbreviated reader syntax.  @code{(quote foo)} prints as @code{'foo}, @code"
"{(function foo)} as @code{#'foo}, and backquoted forms print using modern "
"backquote syntax."
msgstr ""

# type: defvar
#: lispref/streams.texi:699
#, no-wrap
msgid "print-escape-newlines"
msgstr ""

# type: cindex
#: lispref/streams.texi:700
#, no-wrap
msgid "@samp{\\n} in print"
msgstr ""

# type: cindex
#: lispref/streams.texi:701
#, no-wrap
msgid "escape characters"
msgstr ""

# type: defvar
#: lispref/streams.texi:705
msgid ""
"If this variable is non-@code{nil}, then newline characters in strings are "
"printed as @samp{\\n} and formfeeds are printed as @samp{\\f}.  Normally "
"these characters are printed as actual newlines and formfeeds."
msgstr ""

# type: defvar
#: lispref/streams.texi:709
msgid ""
"This variable affects the print functions @code{prin1} and @code{print} that "
"print with quoting.  It does not affect @code{princ}.  Here is an example "
"using @code{prin1}:"
msgstr ""

# type: group
#: lispref/streams.texi:717
#, no-wrap
msgid ""
"(prin1 \"a\\nb\")\n"
"     @print{} \"a\n"
"     @print{} b\"\n"
"     @result{} \"a\n"
"b\"\n"
msgstr ""

# type: group
#: lispref/streams.texi:725
#, no-wrap
msgid ""
"(let ((print-escape-newlines t))\n"
"  (prin1 \"a\\nb\"))\n"
"     @print{} \"a\\nb\"\n"
"     @result{} \"a\n"
"b\"\n"
msgstr ""

# type: defvar
#: lispref/streams.texi:732
msgid ""
"In the second expression, the local binding of @code{print-escape-newlines} "
"is in effect during the call to @code{prin1}, but not during the printing of "
"the result."
msgstr ""

# type: defvar
#: lispref/streams.texi:734
#, no-wrap
msgid "print-escape-nonascii"
msgstr ""

# type: defvar
#: lispref/streams.texi:739
msgid ""
"If this variable is non-@code{nil}, then unibyte non-@acronym{ASCII} "
"characters in strings are unconditionally printed as backslash sequences by "
"the print functions @code{prin1} and @code{print} that print with quoting."
msgstr ""

# type: defvar
#: lispref/streams.texi:743
msgid ""
"Those functions also use backslash sequences for unibyte non-@acronym{ASCII} "
"characters, regardless of the value of this variable, when the output stream "
"is a multibyte buffer or a marker pointing into one."
msgstr ""

# type: defvar
#: lispref/streams.texi:745
#, no-wrap
msgid "print-escape-multibyte"
msgstr ""

# type: defvar
#: lispref/streams.texi:750
msgid ""
"If this variable is non-@code{nil}, then multibyte non-@acronym{ASCII} "
"characters in strings are unconditionally printed as backslash sequences by "
"the print functions @code{prin1} and @code{print} that print with quoting."
msgstr ""

# type: defvar
#: lispref/streams.texi:755
msgid ""
"Those functions also use backslash sequences for multibyte non-@acronym"
"{ASCII} characters, regardless of the value of this variable, when the "
"output stream is a unibyte buffer or a marker pointing into one."
msgstr ""

# type: defvar
#: lispref/streams.texi:757
#, no-wrap
msgid "print-length"
msgstr ""

# type: cindex
#: lispref/streams.texi:758
#, no-wrap
msgid "printing limits"
msgstr ""

# type: defvar
#: lispref/streams.texi:762
msgid ""
"The value of this variable is the maximum number of elements to print in any "
"list, vector or bool-vector.  If an object being printed has more than this "
"many elements, it is abbreviated with an ellipsis."
msgstr ""

# type: defvar
#: lispref/streams.texi:764
msgid "If the value is @code{nil} (the default), then there is no limit."
msgstr ""

# type: group
#: lispref/streams.texi:769
#, no-wrap
msgid ""
"(setq print-length 2)\n"
"     @result{} 2\n"
msgstr ""

# type: group
#: lispref/streams.texi:774
#, no-wrap
msgid ""
"(print '(1 2 3 4 5))\n"
"     @print{} (1 2 ...)\n"
"     @result{} (1 2 ...)\n"
msgstr ""

# type: defvar
#: lispref/streams.texi:778
#, no-wrap
msgid "print-level"
msgstr ""

# type: defvar
#: lispref/streams.texi:783
msgid ""
"The value of this variable is the maximum depth of nesting of parentheses "
"and brackets when printed.  Any list or vector at a depth exceeding this "
"limit is abbreviated with an ellipsis.  A value of @code{nil} (which is the "
"default) means no limit."
msgstr ""

# type: defopt
#: lispref/streams.texi:785
#, no-wrap
msgid "eval-expression-print-length"
msgstr "eval-expression-print-length"

# type: defoptx
#: lispref/streams.texi:786
#, no-wrap
msgid "eval-expression-print-level"
msgstr "eval-expression-print-level"

# type: defopt
#: lispref/streams.texi:791
msgid ""
"These are the values for @code{print-length} and @code{print-level} used by "
"@code{eval-expression}, and thus, indirectly, by many interactive evaluation "
"commands (@pxref{Lisp Eval,, Evaluating Emacs-Lisp Expressions, emacs, The "
"GNU Emacs Manual})."
msgstr ""

# type: Plain text
#: lispref/streams.texi:795
msgid ""
"These variables are used for detecting and reporting circular and shared "
"structure:"
msgstr ""

# type: defvar
#: lispref/streams.texi:796
#, no-wrap
msgid "print-circle"
msgstr "print-circle"

# type: defvar
#: lispref/streams.texi:799
msgid ""
"If non-@code{nil}, this variable enables detection of circular and shared "
"structure in printing."
msgstr ""

# type: defvar
#: lispref/streams.texi:801
#, no-wrap
msgid "print-gensym"
msgstr "print-gensym"

# type: defvar
#: lispref/streams.texi:806
msgid ""
"If non-@code{nil}, this variable enables detection of uninterned symbols "
"(@pxref{Creating Symbols}) in printing.  When this is enabled, uninterned "
"symbols print with the prefix @samp{#:}, which tells the Lisp reader to "
"produce an uninterned symbol."
msgstr ""

# type: defvar
#: lispref/streams.texi:808
#, no-wrap
msgid "print-continuous-numbering"
msgstr "print-continuous-numbering"

# type: defvar
#: lispref/streams.texi:812
msgid ""
"If non-@code{nil}, that means number continuously across print calls.  This "
"affects the numbers printed for @samp{#@var{n}=} labels and @samp{#@var{m}#} "
"references."
msgstr ""

# type: defvar
#: lispref/streams.texi:816
msgid ""
"Don't set this variable with @code{setq}; you should only bind it "
"temporarily to @code{t} with @code{let}.  When you do that, you should also "
"bind @code{print-number-table} to @code{nil}."
msgstr ""

# type: defvar
#: lispref/streams.texi:818
#, no-wrap
msgid "print-number-table"
msgstr "print-number-table"

# type: defvar
#: lispref/streams.texi:822
msgid ""
"This variable holds a vector used internally by printing to implement the "
"@code{print-circle} feature.  You should not use it except to bind it to "
"@code{nil} when you bind @code{print-continuous-numbering}."
msgstr ""

# type: defvar
#: lispref/streams.texi:824
#, no-wrap
msgid "float-output-format"
msgstr "float-output-format"

# type: defvar
#: lispref/streams.texi:828
msgid ""
"This variable specifies how to print floating point numbers.  Its default "
"value is @code{nil}, meaning use the shortest output that represents the "
"number without losing information."
msgstr ""

# type: defvar
#: lispref/streams.texi:833
msgid ""
"To control output format more precisely, you can put a string in this "
"variable.  The string should hold a @samp{%}-specification to be used in the "
"C function @code{sprintf}.  For further restrictions on what you can use, "
"see the variable's documentation string."
msgstr ""

# type: ignore
#: lispref/streams.texi:837
#, no-wrap
msgid "   arch-tag: 07636b8c-c4e3-4735-9e06-2e864320b434\n"
msgstr "   arch-tag: 07636b8c-c4e3-4735-9e06-2e864320b434\n"

# type: cindex
#: lispref/strings.texi:10
#, no-wrap
msgid "strings"
msgstr ""

# type: cindex
#: lispref/strings.texi:11
#, no-wrap
msgid "character arrays"
msgstr ""

# type: cindex
#: lispref/strings.texi:12
#, no-wrap
msgid "characters"
msgstr ""

# type: cindex
#: lispref/strings.texi:13
#, no-wrap
msgid "bytes"
msgstr ""

# type: Plain text
#: lispref/strings.texi:21
msgid ""
"A string in Emacs Lisp is an array that contains an ordered sequence of "
"characters.  Strings are used as names of symbols, buffers, and files; to "
"send messages to users; to hold text being copied between buffers; and for "
"many other purposes.  Because strings are so important, Emacs Lisp has many "
"functions expressly for manipulating them.  Emacs Lisp programs use strings "
"more often than individual characters."
msgstr ""

# type: Plain text
#: lispref/strings.texi:24
msgid ""
"@xref{Strings of Events}, for special considerations for strings of keyboard "
"character events."
msgstr ""

# type: menu
#: lispref/strings.texi:35
msgid "Basics: String Basics"
msgstr ""

# type: menu
#: lispref/strings.texi:35 lispref/vol1.texi:369 lispref/vol2.texi:370
msgid "Basic properties of strings and characters."
msgstr ""

# type: menu
#: lispref/strings.texi:35 lispref/strings.texi:94 lispref/vol1.texi:369
#: lispref/vol2.texi:370
#, no-wrap
msgid "Predicates for Strings"
msgstr ""

# type: menu
#: lispref/strings.texi:35 lispref/vol1.texi:369 lispref/vol2.texi:370
msgid "Testing whether an object is a string or char."
msgstr ""

# type: menu
#: lispref/strings.texi:35 lispref/strings.texi:115 lispref/strings.texi:116
#: lispref/vol1.texi:369 lispref/vol2.texi:370
#, no-wrap
msgid "Creating Strings"
msgstr ""

# type: menu
#: lispref/strings.texi:35 lispref/vol1.texi:369 lispref/vol2.texi:370
msgid "Functions to allocate new strings."
msgstr ""

# type: section
#: lispref/strings.texi:35 lispref/strings.texi:366 lispref/strings.texi:367
#, no-wrap
msgid "Modifying Strings"
msgstr ""

# type: menu
#: lispref/strings.texi:35
msgid "Altering the contents of an existing string."
msgstr ""

# type: menu
#: lispref/strings.texi:35 lispref/strings.texi:398 lispref/vol1.texi:369
#: lispref/vol2.texi:370
#, no-wrap
msgid "Text Comparison"
msgstr ""

# type: menu
#: lispref/strings.texi:35 lispref/vol1.texi:369 lispref/vol2.texi:370
msgid "Comparing characters or strings."
msgstr ""

# type: menu
#: lispref/strings.texi:35 lispref/strings.texi:553 lispref/vol1.texi:369
#: lispref/vol2.texi:370
#, no-wrap
msgid "String Conversion"
msgstr ""

# type: menu
#: lispref/strings.texi:35
msgid "Converting to and from characters and strings."
msgstr ""

# type: menu
#: lispref/strings.texi:35 lispref/strings.texi:681 lispref/strings.texi:683
#: lispref/vol1.texi:369 lispref/vol2.texi:370
#, no-wrap
msgid "Formatting Strings"
msgstr ""

# type: menu
#: lispref/strings.texi:35
msgid "@code{format}: Emacs's analogue of @code{printf}."
msgstr ""

# type: node
#: lispref/strings.texi:35 lispref/strings.texi:909
#, no-wrap
msgid "Case Conversion"
msgstr ""

# type: menu
#: lispref/strings.texi:35 lispref/vol1.texi:369 lispref/vol2.texi:370
msgid "Case conversion functions."
msgstr ""

# type: node
#: lispref/strings.texi:35 lispref/strings.texi:1030
#, no-wrap
msgid "Case Tables"
msgstr ""

# type: menu
#: lispref/strings.texi:35
msgid "Customizing case conversion."
msgstr ""

# type: menu
#: lispref/strings.texi:37 lispref/vol1.texi:369 lispref/vol2.texi:370
#, no-wrap
msgid "String Basics"
msgstr ""

# type: section
#: lispref/strings.texi:38
#, no-wrap
msgid "String and Character Basics"
msgstr ""

# type: Plain text
#: lispref/strings.texi:43
msgid ""
"Characters are represented in Emacs Lisp as integers; whether an integer is "
"a character or not is determined only by how it is used.  Thus, strings "
"really contain integers."
msgstr ""

# type: Plain text
#: lispref/strings.texi:48
msgid ""
"The length of a string (like any array) is fixed, and cannot be altered once "
"the string exists.  Strings in Lisp are @emph{not} terminated by a "
"distinguished character code.  (By contrast, strings in C are terminated by "
"a character with @acronym{ASCII} code 0.)"
msgstr ""

# type: Plain text
#: lispref/strings.texi:54
msgid ""
"Since strings are arrays, and therefore sequences as well, you can operate "
"on them with the general array and sequence functions.  (@xref{Sequences "
"Arrays Vectors}.)  For example, you can access or change individual "
"characters in a string using the functions @code{aref} and @code{aset} "
"(@pxref{Array Functions})."
msgstr ""

# type: Plain text
#: lispref/strings.texi:62
msgid ""
"There are two text representations for non-@acronym{ASCII} characters in "
"Emacs strings (and in buffers): unibyte and multibyte (@pxref{Text "
"Representations}).  An @acronym{ASCII} character always occupies one byte in "
"a string; in fact, when a string is all @acronym{ASCII}, there is no real "
"difference between the unibyte and multibyte representations.  For most Lisp "
"programming, you don't need to be concerned with these two representations."
msgstr ""

# type: Plain text
#: lispref/strings.texi:67
msgid ""
"Sometimes key sequences are represented as strings.  When a string is a key "
"sequence, string elements in the range 128 to 255 represent meta characters "
"(which are large integers) rather than character codes in the range 128 to "
"255."
msgstr ""

# type: Plain text
#: lispref/strings.texi:75
msgid ""
"Strings cannot hold characters that have the hyper, super or alt modifiers; "
"they can hold @acronym{ASCII} control characters, but no other control "
"characters.  They do not distinguish case in @acronym{ASCII} control "
"characters.  If you want to store such characters in a sequence, such as a "
"key sequence, you must use a vector instead of a string.  @xref{Character "
"Type}, for more information about the representation of meta and other "
"modifiers for keyboard input characters."
msgstr ""

# type: Plain text
#: lispref/strings.texi:82
msgid ""
"Strings are useful for holding regular expressions.  You can also match "
"regular expressions against strings with @code{string-match} (@pxref{Regexp "
"Search}).  The functions @code{match-string} (@pxref{Simple Match Data}) and "
"@code{replace-match} (@pxref{Replacing Match}) are useful for decomposing "
"and modifying strings after matching regular expressions against them."
msgstr ""

# type: Plain text
#: lispref/strings.texi:87
msgid ""
"Like a buffer, a string can contain text properties for the characters in "
"it, as well as the characters themselves.  @xref{Text Properties}.  All the "
"Lisp primitives that copy text from strings to buffers or other strings also "
"copy the properties of the characters being copied."
msgstr ""

# type: Plain text
#: lispref/strings.texi:93
msgid ""
"@xref{Text}, for information about functions that display strings or copy "
"them into buffers.  @xref{Character Type}, and @ref{String Type}, for "
"information about the syntax of characters and strings.  @xref{Non-ASCII "
"Characters}, for functions to convert between text representations and to "
"encode and decode character codes."
msgstr ""

# type: section
#: lispref/strings.texi:95
#, no-wrap
msgid "The Predicates for Strings"
msgstr ""

# type: Plain text
#: lispref/strings.texi:99
msgid ""
"For more information about general sequence and array predicates, see @ref"
"{Sequences Arrays Vectors}, and @ref{Arrays}."
msgstr ""

# type: defun
#: lispref/strings.texi:100
#, no-wrap
msgid "stringp object"
msgstr ""

# type: defun
#: lispref/strings.texi:103
msgid ""
"This function returns @code{t} if @var{object} is a string, @code{nil} "
"otherwise."
msgstr ""

# type: defun
#: lispref/strings.texi:105
#, no-wrap
msgid "string-or-null-p object"
msgstr ""

# type: defun
#: lispref/strings.texi:108
msgid ""
"This function returns @code{t} if @var{object} is a string or nil, @code"
"{nil} otherwise."
msgstr ""

# type: defun
#: lispref/strings.texi:110
#, no-wrap
msgid "char-or-string-p object"
msgstr ""

# type: defun
#: lispref/strings.texi:113
msgid ""
"This function returns @code{t} if @var{object} is a string or a character (i."
"e., an integer), @code{nil} otherwise."
msgstr ""

# type: Plain text
#: lispref/strings.texi:120
msgid ""
"The following functions create strings, either from scratch, or by putting "
"strings together, or by taking them apart."
msgstr ""

# type: defun
#: lispref/strings.texi:121
#, no-wrap
msgid "make-string count character"
msgstr ""

# type: defun
#: lispref/strings.texi:124
msgid ""
"This function returns a string made up of @var{count} repetitions of @var"
"{character}.  If @var{count} is negative, an error is signaled."
msgstr ""

# type: example
#: lispref/strings.texi:130
#, no-wrap
msgid ""
"(make-string 5 ?x)\n"
"     @result{} \"xxxxx\"\n"
"(make-string 0 ?x)\n"
"     @result{} \"\"\n"
msgstr ""

# type: defun
#: lispref/strings.texi:135
msgid ""
"Other functions to compare with this one include @code{char-to-string} "
"(@pxref{String Conversion}), @code{make-vector} (@pxref{Vectors}), and @code"
"{make-list} (@pxref{Building Lists})."
msgstr ""

# type: defun
#: lispref/strings.texi:137
#, no-wrap
msgid "string &rest characters"
msgstr ""

# type: defun
#: lispref/strings.texi:139
msgid "This returns a string containing the characters @var{characters}."
msgstr ""

# type: example
#: lispref/strings.texi:143
#, no-wrap
msgid ""
"(string ?a ?b ?c)\n"
"     @result{} \"abc\"\n"
msgstr ""

# type: defun
#: lispref/strings.texi:146
#, no-wrap
msgid "substring string start &optional end"
msgstr ""

# type: defun
#: lispref/strings.texi:151
msgid ""
"This function returns a new string which consists of those characters from "
"@var{string} in the range from (and including) the character at the index "
"@var{start} up to (but excluding) the character at the index @var{end}.  The "
"first character is at index zero."
msgstr ""

# type: group
#: lispref/strings.texi:156
#, no-wrap
msgid ""
"(substring \"abcdefg\" 0 3)\n"
"     @result{} \"abc\"\n"
msgstr ""

# type: defun
#: lispref/strings.texi:165
msgid ""
"Here the index for @samp{a} is 0, the index for @samp{b} is 1, and the index "
"for @samp{c} is 2.  Thus, three letters, @samp{abc}, are copied from the "
"string @code{\"abcdefg\"}.  The index 3 marks the character position up to "
"which the substring is copied.  The character whose index is 3 is actually "
"the fourth character in the string."
msgstr ""

# type: defun
#: lispref/strings.texi:168
msgid ""
"A negative number counts from the end of the string, so that @minus{}1 "
"signifies the index of the last character of the string.  For example:"
msgstr ""

# type: group
#: lispref/strings.texi:173
#, no-wrap
msgid ""
"(substring \"abcdefg\" -3 -1)\n"
"     @result{} \"ef\"\n"
msgstr ""

# type: defun
#: lispref/strings.texi:180
msgid ""
"In this example, the index for @samp{e} is @minus{}3, the index for @samp{f} "
"is @minus{}2, and the index for @samp{g} is @minus{}1.  Therefore, @samp{e} "
"and @samp{f} are included, and @samp{g} is excluded."
msgstr ""

# type: defun
#: lispref/strings.texi:183
msgid ""
"When @code{nil} is used for @var{end}, it stands for the length of the "
"string.  Thus,"
msgstr ""

# type: group
#: lispref/strings.texi:188
#, no-wrap
msgid ""
"(substring \"abcdefg\" -3 nil)\n"
"     @result{} \"efg\"\n"
msgstr ""

# type: defun
#: lispref/strings.texi:194
msgid ""
"Omitting the argument @var{end} is equivalent to specifying @code{nil}.  It "
"follows that @code{(substring @var{string} 0)} returns a copy of all of @var"
"{string}."
msgstr ""

# type: group
#: lispref/strings.texi:199
#, no-wrap
msgid ""
"(substring \"abcdefg\" 0)\n"
"     @result{} \"abcdefg\"\n"
msgstr ""

# type: defun
#: lispref/strings.texi:205
msgid ""
"But we recommend @code{copy-sequence} for this purpose (@pxref{Sequence "
"Functions})."
msgstr ""

# type: defun
#: lispref/strings.texi:208
msgid ""
"If the characters copied from @var{string} have text properties, the "
"properties are copied into the new string also.  @xref{Text Properties}."
msgstr ""

# type: defun
#: lispref/strings.texi:211
msgid ""
"@code{substring} also accepts a vector for the first argument.  For example:"
msgstr ""

# type: example
#: lispref/strings.texi:215
#, no-wrap
msgid ""
"(substring [a b (c) \"d\"] 1 3)\n"
"     @result{} [b (c)]\n"
msgstr ""

# type: defun
#: lispref/strings.texi:222
msgid ""
"A @code{wrong-type-argument} error is signaled if @var{start} is not an "
"integer or if @var{end} is neither an integer nor @code{nil}.  An @code{args-"
"out-of-range} error is signaled if @var{start} indicates a character "
"following @var{end}, or if either integer is out of range for @var{string}."
msgstr ""

# type: defun
#: lispref/strings.texi:227
msgid ""
"Contrast this function with @code{buffer-substring} (@pxref{Buffer "
"Contents}), which returns a string containing a portion of the text in the "
"current buffer.  The beginning of a string is at index 0, but the beginning "
"of a buffer is at index 1."
msgstr ""

# type: defun
#: lispref/strings.texi:229
#, no-wrap
msgid "substring-no-properties string &optional start end"
msgstr ""

# type: defun
#: lispref/strings.texi:235
msgid ""
"This works like @code{substring} but discards all text properties from the "
"value.  Also, @var{start} may be omitted or @code{nil}, which is equivalent "
"to 0.  Thus, @w{@code{(substring-no-properties @var{string})}} returns a "
"copy of @var{string}, with all text properties removed."
msgstr ""

# type: defun
#: lispref/strings.texi:237
#, no-wrap
msgid "concat &rest sequences"
msgstr ""

# type: cindex
#: lispref/strings.texi:238
#, no-wrap
msgid "copying strings"
msgstr ""

# type: cindex
#: lispref/strings.texi:239
#, no-wrap
msgid "concatenating strings"
msgstr ""

# type: defun
#: lispref/strings.texi:245
msgid ""
"This function returns a new string consisting of the characters in the "
"arguments passed to it (along with their text properties, if any).  The "
"arguments may be strings, lists of numbers, or vectors of numbers; they are "
"not themselves changed.  If @code{concat} receives no arguments, it returns "
"an empty string."
msgstr ""

# type: example
#: lispref/strings.texi:258
#, no-wrap
msgid ""
"(concat \"abc\" \"-def\")\n"
"     @result{} \"abc-def\"\n"
"(concat \"abc\" (list 120 121) [122])\n"
"     @result{} \"abcxyz\"\n"
";; @r{@code{nil} is an empty sequence.}\n"
"(concat \"abc\" nil \"-def\")\n"
"     @result{} \"abc-def\"\n"
"(concat \"The \" \"quick brown \" \"fox.\")\n"
"     @result{} \"The quick brown fox.\"\n"
"(concat)\n"
"     @result{} \"\"\n"
msgstr ""

# type: defun
#: lispref/strings.texi:263
msgid ""
"The @code{concat} function always constructs a new string that is not @code"
"{eq} to any existing string."
msgstr ""

# type: defun
#: lispref/strings.texi:270
msgid ""
"In Emacs versions before 21, when an argument was an integer (not a sequence "
"of integers), it was converted to a string of digits making up the decimal "
"printed representation of the integer.  This obsolete usage no longer "
"works.  The proper way to convert an integer to its decimal printed form is "
"with @code{format} (@pxref{Formatting Strings}) or @code{number-to-string} "
"(@pxref{String Conversion})."
msgstr ""

# type: defun
#: lispref/strings.texi:275
msgid ""
"For information about other concatenation functions, see the description of "
"@code{mapconcat} in @ref{Mapping Functions}, @code{vconcat} in @ref{Vector "
"Functions}, and @code{append} in @ref{Building Lists}."
msgstr ""

# type: defun
#: lispref/strings.texi:277
#, no-wrap
msgid "split-string string &optional separators omit-nulls"
msgstr ""

# type: defun
#: lispref/strings.texi:283
msgid ""
"This function splits @var{string} into substrings at matches for the regular "
"expression @var{separators}.  Each match for @var{separators} defines a "
"splitting point; the substrings between the splitting points are made into a "
"list, which is the value returned by @code{split-string}."
msgstr ""

# type: defun
#: lispref/strings.texi:289
msgid ""
"If @var{omit-nulls} is @code{nil}, the result contains null strings whenever "
"there are two consecutive matches for @var{separators}, or a match is "
"adjacent to the beginning or end of @var{string}.  If @var{omit-nulls} is "
"@code{t}, these null strings are omitted from the result."
msgstr ""

# type: defun
#: lispref/strings.texi:292
msgid ""
"If @var{separators} is @code{nil} (or omitted), the default is the value of "
"@code{split-string-default-separators}."
msgstr ""

# type: defun
#: lispref/strings.texi:295
msgid ""
"As a special case, when @var{separators} is @code{nil} (or omitted), null "
"strings are always omitted from the result.  Thus:"
msgstr ""

# type: example
#: lispref/strings.texi:299
#, no-wrap
msgid ""
"(split-string \"  two words \")\n"
"     @result{} (\"two\" \"words\")\n"
msgstr ""

# type: defun
#: lispref/strings.texi:304
msgid ""
"The result is not @code{(\"\" \"two\" \"words\" \"\")}, which would rarely "
"be useful.  If you need such a result, use an explicit value for @var"
"{separators}:"
msgstr ""

# type: example
#: lispref/strings.texi:309
#, no-wrap
msgid ""
"(split-string \"  two words \"\n"
"              split-string-default-separators)\n"
"     @result{} (\"\" \"two\" \"words\" \"\")\n"
msgstr ""

# type: defun
#: lispref/strings.texi:312
msgid "More examples:"
msgstr ""

# type: example
#: lispref/strings.texi:320
#, no-wrap
msgid ""
"(split-string \"Soup is good food\" \"o\")\n"
"     @result{} (\"S\" \"up is g\" \"\" \"d f\" \"\" \"d\")\n"
"(split-string \"Soup is good food\" \"o\" t)\n"
"     @result{} (\"S\" \"up is g\" \"d f\" \"d\")\n"
"(split-string \"Soup is good food\" \"o+\")\n"
"     @result{} (\"S\" \"up is g\" \"d f\" \"d\")\n"
msgstr ""

# type: defun
#: lispref/strings.texi:325
msgid ""
"Empty matches do count, except that @code{split-string} will not look for a "
"final empty match when it already reached the end of the string using a non-"
"empty match or when @var{string} is empty:"
msgstr ""

# type: example
#: lispref/strings.texi:333
#, no-wrap
msgid ""
"(split-string \"aooob\" \"o*\")\n"
"     @result{} (\"\" \"a\" \"\" \"b\" \"\")\n"
"(split-string \"ooaboo\" \"o*\")\n"
"     @result{} (\"\" \"\" \"a\" \"b\" \"\")\n"
"(split-string \"\" \"\")\n"
"     @result{} (\"\")\n"
msgstr ""

# type: defun
#: lispref/strings.texi:338
msgid ""
"However, when @var{separators} can match the empty string, @var{omit-nulls} "
"is usually @code{t}, so that the subtleties in the three previous examples "
"are rarely relevant:"
msgstr ""

# type: example
#: lispref/strings.texi:346
#, no-wrap
msgid ""
"(split-string \"Soup is good food\" \"o*\" t)\n"
"     @result{} (\"S\" \"u\" \"p\" \" \" \"i\" \"s\" \" \" \"g\" \"d\" \" \" \"f\" \"d\")\n"
"(split-string \"Nice doggy!\" \"\" t)\n"
"     @result{} (\"N\" \"i\" \"c\" \"e\" \" \" \"d\" \"o\" \"g\" \"g\" \"y\" \"!\")\n"
"(split-string \"\" \"\" t)\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/strings.texi:352
msgid ""
"Somewhat odd, but predictable, behavior can occur for certain ``non-greedy'' "
"values of @var{separators} that can prefer empty matches over non-empty "
"matches.  Again, such values rarely occur in practice:"
msgstr ""

# type: example
#: lispref/strings.texi:358
#, no-wrap
msgid ""
"(split-string \"ooo\" \"o*\" t)\n"
"     @result{} nil\n"
"(split-string \"ooo\" \"\\\\|o+\" t)\n"
"     @result{} (\"o\" \"o\" \"o\")\n"
msgstr ""

# type: defvar
#: lispref/strings.texi:361
#, no-wrap
msgid "split-string-default-separators"
msgstr ""

# type: defvar
#: lispref/strings.texi:364
msgid ""
"The default value of @var{separators} for @code{split-string}.  Its usual "
"value is @w{@code{\"[ \\f\\t\\n\\r\\v]+\"}}."
msgstr ""

# type: Plain text
#: lispref/strings.texi:375
msgid ""
"The most basic way to alter the contents of an existing string is with @code"
"{aset} (@pxref{Array Functions}).  @code{(aset @var{string} @var{idx} @var"
"{char})} stores @var{char} into @var{string} at index @var{idx}.  Each "
"character occupies one or more bytes, and if @var{char} needs a different "
"number of bytes from the character already present at that index, @code"
"{aset} signals an error."
msgstr ""

# type: Plain text
#: lispref/strings.texi:377
msgid "A more powerful function is @code{store-substring}:"
msgstr ""

# type: defun
#: lispref/strings.texi:378
#, no-wrap
msgid "store-substring string idx obj"
msgstr ""

# type: defun
#: lispref/strings.texi:382
msgid ""
"This function alters part of the contents of the string @var{string}, by "
"storing @var{obj} starting at index @var{idx}.  The argument @var{obj} may "
"be either a character or a (smaller) string."
msgstr ""

# type: defun
#: lispref/strings.texi:387
msgid ""
"Since it is impossible to change the length of an existing string, it is an "
"error if @var{obj} doesn't fit within @var{string}'s actual length, or if "
"any new character requires a different number of bytes from the character "
"currently present at that point in @var{string}."
msgstr ""

# type: Plain text
#: lispref/strings.texi:391
msgid ""
"To clear out a string that contained a password, use @code{clear-string}:"
msgstr ""

# type: defun
#: lispref/strings.texi:392
#, no-wrap
msgid "clear-string string"
msgstr ""

# type: defun
#: lispref/strings.texi:395
msgid ""
"This makes @var{string} a unibyte string and clears its contents to zeros.  "
"It may also change @var{string}'s length."
msgstr ""

# type: section
#: lispref/strings.texi:399
#, no-wrap
msgid "Comparison of Characters and Strings"
msgstr ""

# type: cindex
#: lispref/strings.texi:400
#, no-wrap
msgid "string equality"
msgstr ""

# type: defun
#: lispref/strings.texi:402
#, no-wrap
msgid "char-equal character1 character2"
msgstr ""

# type: defun
#: lispref/strings.texi:406
msgid ""
"This function returns @code{t} if the arguments represent the same "
"character, @code{nil} otherwise.  This function ignores differences in case "
"if @code{case-fold-search} is non-@code{nil}."
msgstr ""

# type: example
#: lispref/strings.texi:413
#, no-wrap
msgid ""
"(char-equal ?x ?x)\n"
"     @result{} t\n"
"(let ((case-fold-search nil))\n"
"  (char-equal ?x ?X))\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/strings.texi:416
#, no-wrap
msgid "string= string1 string2"
msgstr ""

# type: defun
#: lispref/strings.texi:421
msgid ""
"This function returns @code{t} if the characters of the two strings match "
"exactly.  Symbols are also allowed as arguments, in which case their print "
"names are used.  Case is always significant, regardless of @code{case-fold-"
"search}."
msgstr ""

# type: example
#: lispref/strings.texi:429
#, no-wrap
msgid ""
"(string= \"abc\" \"abc\")\n"
"     @result{} t\n"
"(string= \"abc\" \"ABC\")\n"
"     @result{} nil\n"
"(string= \"ab\" \"ABC\")\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/strings.texi:434
msgid ""
"The function @code{string=} ignores the text properties of the two strings.  "
"When @code{equal} (@pxref{Equality Predicates}) compares two strings, it "
"uses @code{string=}."
msgstr ""

# type: defun
#: lispref/strings.texi:450
msgid ""
"For technical reasons, a unibyte and a multibyte string are @code{equal} if "
"and only if they contain the same sequence of character codes and all these "
"codes are either in the range 0 through 127 (@acronym{ASCII}) or 160 through "
"255 (@code{eight-bit-graphic}).  However, when a unibyte string gets "
"converted to a multibyte string, all characters with codes in the range 160 "
"through 255 get converted to characters with higher codes, whereas @acronym"
"{ASCII} characters remain unchanged.  Thus, a unibyte string and its "
"conversion to multibyte are only @code{equal} if the string is all @acronym"
"{ASCII}.  Character codes 160 through 255 are not entirely proper in "
"multibyte text, even though they can occur.  As a consequence, the situation "
"where a unibyte and a multibyte string are @code{equal} without both being "
"all @acronym{ASCII} is a technical oddity that very few Emacs Lisp "
"programmers ever get confronted with.  @xref{Text Representations}."
msgstr ""

# type: defun
#: lispref/strings.texi:452
#, no-wrap
msgid "string-equal string1 string2"
msgstr ""

# type: defun
#: lispref/strings.texi:454
msgid "@code{string-equal} is another name for @code{string=}."
msgstr ""

# type: cindex
#: lispref/strings.texi:456
#, no-wrap
msgid "lexical comparison"
msgstr ""

# type: defun
#: lispref/strings.texi:457
#, no-wrap
msgid "string< string1 string2"
msgstr ""

# type: defun
#: lispref/strings.texi:466
msgid ""
"This function compares two strings a character at a time.  It scans both the "
"strings at the same time to find the first pair of corresponding characters "
"that do not match.  If the lesser character of these two is the character "
"from @var{string1}, then @var{string1} is less, and this function returns "
"@code{t}.  If the lesser character is the one from @var{string2}, then @var"
"{string1} is greater, and this function returns @code{nil}.  If the two "
"strings match entirely, the value is @code{nil}."
msgstr ""

# type: defun
#: lispref/strings.texi:474
msgid ""
"Pairs of characters are compared according to their character codes.  Keep "
"in mind that lower case letters have higher numeric values in the @acronym"
"{ASCII} character set than their upper case counterparts; digits and many "
"punctuation characters have a lower numeric value than upper case letters.  "
"An @acronym{ASCII} character is less than any non-@acronym{ASCII} character; "
"a unibyte non-@acronym{ASCII} character is always less than any multibyte "
"non-@acronym{ASCII} character (@pxref{Text Representations})."
msgstr ""

# type: group
#: lispref/strings.texi:483
#, no-wrap
msgid ""
"(string< \"abc\" \"abd\")\n"
"     @result{} t\n"
"(string< \"abd\" \"abc\")\n"
"     @result{} nil\n"
"(string< \"123\" \"abc\")\n"
"     @result{} t\n"
msgstr ""

# type: defun
#: lispref/strings.texi:490
msgid ""
"When the strings have different lengths, and they match up to the length of "
"@var{string1}, then the result is @code{t}.  If they match up to the length "
"of @var{string2}, the result is @code{nil}.  A string of no characters is "
"less than any other string."
msgstr ""

# type: group
#: lispref/strings.texi:503
#, no-wrap
msgid ""
"(string< \"\" \"abc\")\n"
"     @result{} t\n"
"(string< \"ab\" \"abc\")\n"
"     @result{} t\n"
"(string< \"abc\" \"\")\n"
"     @result{} nil\n"
"(string< \"abc\" \"ab\")\n"
"     @result{} nil\n"
"(string< \"\" \"\")\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/strings.texi:508
msgid ""
"Symbols are also allowed as arguments, in which case their print names are "
"used."
msgstr ""

# type: defun
#: lispref/strings.texi:510
#, no-wrap
msgid "string-lessp string1 string2"
msgstr ""

# type: defun
#: lispref/strings.texi:512
msgid "@code{string-lessp} is another name for @code{string<}."
msgstr ""

# type: defun
#: lispref/strings.texi:514
#, no-wrap
msgid "compare-strings string1 start1 end1 string2 start2 end2 &optional ignore-case"
msgstr ""

# type: defun
#: lispref/strings.texi:521
msgid ""
"This function compares the specified part of @var{string1} with the "
"specified part of @var{string2}.  The specified part of @var{string1} runs "
"from index @var{start1} up to index @var{end1} (@code{nil} means the end of "
"the string).  The specified part of @var{string2} runs from index @var"
"{start2} up to index @var{end2} (@code{nil} means the end of the string)."
msgstr ""

# type: defun
#: lispref/strings.texi:527
msgid ""
"The strings are both converted to multibyte for the comparison (@pxref{Text "
"Representations}) so that a unibyte string and its conversion to multibyte "
"are always regarded as equal.  If @var{ignore-case} is non-@code{nil}, then "
"case is ignored, so that upper case letters can be equal to lower case "
"letters."
msgstr ""

# type: defun
#: lispref/strings.texi:534
msgid ""
"If the specified portions of the two strings match, the value is @code{t}.  "
"Otherwise, the value is an integer which indicates how many leading "
"characters agree, and which string is less.  Its absolute value is one plus "
"the number of characters that agree at the beginning of the two strings.  "
"The sign is negative if @var{string1} (or its specified portion) is less."
msgstr ""

# type: defun
#: lispref/strings.texi:536
#, no-wrap
msgid "assoc-string key alist &optional case-fold"
msgstr ""

# type: defun
#: lispref/strings.texi:545
msgid ""
"This function works like @code{assoc}, except that @var{key} must be a "
"string or symbol, and comparison is done using @code{compare-strings}.  "
"Symbols are converted to strings before testing.  If @var{case-fold} is non-"
"@code{nil}, it ignores case differences.  Unlike @code{assoc}, this function "
"can also match elements of the alist that are strings or symbols rather than "
"conses.  In particular, @var{alist} can be a list of strings or symbols "
"rather than an actual alist.  @xref{Association Lists}."
msgstr ""

# type: Plain text
#: lispref/strings.texi:552
msgid ""
"See also the @code{compare-buffer-substrings} function in @ref{Comparing "
"Text}, for a way to compare text in buffers.  The function @code{string-"
"match}, which matches a regular expression against a string, can be used for "
"a kind of string comparison; see @ref{Regexp Search}."
msgstr ""

# type: section
#: lispref/strings.texi:555
#, no-wrap
msgid "Conversion of Characters and Strings"
msgstr ""

# type: cindex
#: lispref/strings.texi:556
#, no-wrap
msgid "conversion of strings"
msgstr ""

# type: Plain text
#: lispref/strings.texi:566
msgid ""
"This section describes functions for conversions between characters, strings "
"and integers.  @code{format} (@pxref{Formatting Strings})  and @code{prin1-"
"to-string} (@pxref{Output Functions}) can also convert Lisp objects into "
"strings.  @code{read-from-string} (@pxref{Input Functions}) can ``convert'' "
"a string representation of a Lisp object into an object.  The functions @code"
"{string-make-multibyte} and @code{string-make-unibyte} convert the text "
"representation of a string (@pxref{Converting Representations})."
msgstr ""

# type: Plain text
#: lispref/strings.texi:571
msgid ""
"@xref{Documentation}, for functions that produce textual descriptions of "
"text characters and general input events (@code{single-key-description} and "
"@code{text-char-description}).  These are used primarily for making help "
"messages."
msgstr ""

# type: defun
#: lispref/strings.texi:572
#, no-wrap
msgid "char-to-string character"
msgstr ""

# type: cindex
#: lispref/strings.texi:573
#, no-wrap
msgid "character to string"
msgstr ""

# type: defun
#: lispref/strings.texi:577
msgid ""
"This function returns a new string containing one character, @var"
"{character}.  This function is semi-obsolete because the function @code"
"{string} is more general.  @xref{Creating Strings}."
msgstr ""

# type: defun
#: lispref/strings.texi:579
#, no-wrap
msgid "string-to-char string"
msgstr ""

# type: cindex
#: lispref/strings.texi:580
#, no-wrap
msgid "string to character"
msgstr ""

# type: defun
#: lispref/strings.texi:585
msgid ""
"This function returns the first character in @var{string}.  If the string is "
"empty, the function returns 0.  The value is also 0 when the first character "
"of @var{string} is the null character, @acronym{ASCII} code 0."
msgstr ""

# type: example
#: lispref/strings.texi:589
#, no-wrap
msgid ""
"(string-to-char \"ABC\")\n"
"     @result{} 65\n"
"\n"
msgstr ""

# type: example
#: lispref/strings.texi:594
#, no-wrap
msgid ""
"(string-to-char \"xyz\")\n"
"     @result{} 120\n"
"(string-to-char \"\")\n"
"     @result{} 0\n"
msgstr ""

# type: group
#: lispref/strings.texi:597
#, no-wrap
msgid ""
"(string-to-char \"\\000\")\n"
"     @result{} 0\n"
msgstr ""

# type: defun
#: lispref/strings.texi:602
msgid ""
"This function may be eliminated in the future if it does not seem useful "
"enough to retain."
msgstr ""

# type: defun
#: lispref/strings.texi:604
#, no-wrap
msgid "number-to-string number"
msgstr ""

# type: cindex
#: lispref/strings.texi:605
#, no-wrap
msgid "integer to string"
msgstr ""

# type: cindex
#: lispref/strings.texi:606
#, no-wrap
msgid "integer to decimal"
msgstr ""

# type: defun
#: lispref/strings.texi:611
msgid ""
"This function returns a string consisting of the printed base-ten "
"representation of @var{number}, which may be an integer or a floating point "
"number.  The returned value starts with a minus sign if the argument is "
"negative."
msgstr ""

# type: example
#: lispref/strings.texi:615
#, no-wrap
msgid ""
"(number-to-string 256)\n"
"     @result{} \"256\"\n"
msgstr ""

# type: group
#: lispref/strings.texi:618
#, no-wrap
msgid ""
"(number-to-string -23)\n"
"     @result{} \"-23\"\n"
msgstr ""

# type: example
#: lispref/strings.texi:621
#, no-wrap
msgid ""
"(number-to-string -23.5)\n"
"     @result{} \"-23.5\"\n"
msgstr ""

# type: cindex
#: lispref/strings.texi:623
#, no-wrap
msgid "int-to-string"
msgstr ""

# type: defun
#: lispref/strings.texi:625
msgid "@code{int-to-string} is a semi-obsolete alias for this function."
msgstr ""

# type: defun
#: lispref/strings.texi:627
msgid "See also the function @code{format} in @ref{Formatting Strings}."
msgstr ""

# type: defun
#: lispref/strings.texi:629
#, no-wrap
msgid "string-to-number string &optional base"
msgstr ""

# type: cindex
#: lispref/strings.texi:630
#, no-wrap
msgid "string to number"
msgstr ""

# type: defun
#: lispref/strings.texi:640
msgid ""
"This function returns the numeric value of the characters in @var{string}.  "
"If @var{base} is non-@code{nil}, it must be an integer between 2 and 16 "
"(inclusive), and integers are converted in that base.  If @var{base} is @code"
"{nil}, then base ten is used.  Floating point conversion only works in base "
"ten; we have not implemented other radices for floating point numbers, "
"because that would be much more work and does not seem useful.  If @var"
"{string} looks like an integer but its value is too large to fit into a Lisp "
"integer, @code{string-to-number} returns a floating point result."
msgstr ""

# type: defun
#: lispref/strings.texi:648
msgid ""
"The parsing skips spaces and tabs at the beginning of @var{string}, then "
"reads as much of @var{string} as it can interpret as a number in the given "
"base.  (On some systems it ignores other whitespace at the beginning, not "
"just spaces and tabs.)  If the first character after the ignored whitespace "
"is neither a digit in the given base, nor a plus or minus sign, nor the "
"leading dot of a floating point number, this function returns 0."
msgstr ""

# type: example
#: lispref/strings.texi:660
#, no-wrap
msgid ""
"(string-to-number \"256\")\n"
"     @result{} 256\n"
"(string-to-number \"25 is a perfect square.\")\n"
"     @result{} 25\n"
"(string-to-number \"X256\")\n"
"     @result{} 0\n"
"(string-to-number \"-4.5\")\n"
"     @result{} -4.5\n"
"(string-to-number \"1e5\")\n"
"     @result{} 100000.0\n"
msgstr ""

# type: findex
#: lispref/strings.texi:662
#, no-wrap
msgid "string-to-int"
msgstr "string-to-int"

# type: defun
#: lispref/strings.texi:664
msgid "@code{string-to-int} is an obsolete alias for this function."
msgstr ""

# type: Plain text
#: lispref/strings.texi:667
msgid "Here are some other functions that can convert to or from a string:"
msgstr ""

# type: item
#: lispref/strings.texi:669
#, no-wrap
msgid "concat"
msgstr ""

# type: table
#: lispref/strings.texi:672
msgid ""
"@code{concat} can convert a vector or a list into a string.  @xref{Creating "
"Strings}."
msgstr ""

# type: item
#: lispref/strings.texi:673
#, no-wrap
msgid "vconcat"
msgstr ""

# type: table
#: lispref/strings.texi:676
msgid ""
"@code{vconcat} can convert a string into a vector.  @xref{Vector Functions}."
msgstr ""

# type: item
#: lispref/strings.texi:677
#, no-wrap
msgid "append"
msgstr ""

# type: table
#: lispref/strings.texi:679
msgid "@code{append} can convert a string into a list.  @xref{Building Lists}."
msgstr ""

# type: cindex
#: lispref/strings.texi:684
#, no-wrap
msgid "formatting strings"
msgstr ""

# type: cindex
#: lispref/strings.texi:685
#, no-wrap
msgid "strings, formatting them"
msgstr ""

# type: Plain text
#: lispref/strings.texi:691
msgid ""
"@dfn{Formatting} means constructing a string by substitution of computed "
"values at various places in a constant string.  This constant string "
"controls how the other values are printed, as well as where they appear; it "
"is called a @dfn{format string}."
msgstr ""

# type: Plain text
#: lispref/strings.texi:696
msgid ""
"Formatting is often useful for computing messages to be displayed.  In fact, "
"the functions @code{message} and @code{error} provide the same formatting "
"feature described here; they differ from @code{format} only in how they use "
"the result of formatting."
msgstr ""

# type: defun
#: lispref/strings.texi:697
#, no-wrap
msgid "format string &rest objects"
msgstr ""

# type: defun
#: lispref/strings.texi:702
msgid ""
"This function returns a new string that is made by copying @var{string} and "
"then replacing any format specification in the copy with encodings of the "
"corresponding @var{objects}.  The arguments @var{objects} are the computed "
"values to be formatted."
msgstr ""

# type: defun
#: lispref/strings.texi:706
msgid ""
"The characters in @var{string}, other than the format specifications, are "
"copied directly into the output, including their text properties, if any."
msgstr ""

# type: cindex
#: lispref/strings.texi:708
#, no-wrap
msgid "@samp{%} in format"
msgstr ""

# type: cindex
#: lispref/strings.texi:709
#, no-wrap
msgid "format specification"
msgstr ""

# type: Plain text
#: lispref/strings.texi:715
msgid ""
"A format specification is a sequence of characters beginning with a @samp"
"{%}.  Thus, if there is a @samp{%d} in @var{string}, the @code{format} "
"function replaces it with the printed representation of one of the values to "
"be formatted (one of the arguments @var{objects}).  For example:"
msgstr ""

# type: group
#: lispref/strings.texi:720
#, no-wrap
msgid ""
"(format \"The value of fill-column is %d.\" fill-column)\n"
"     @result{} \"The value of fill-column is 72.\"\n"
msgstr ""

# type: Plain text
#: lispref/strings.texi:729
msgid ""
"Since @code{format} interprets @samp{%} characters as format specifications, "
"you should @emph{never} pass an arbitrary string as the first argument.  "
"This is particularly true when the string is generated by some Lisp code.  "
"Unless the string is @emph{known} to never include any @samp{%} characters, "
"pass @code{\"%s\"}, described below, as the first argument, and the string "
"as the second, like this:"
msgstr ""

# type: example
#: lispref/strings.texi:732
#, no-wrap
msgid "  (format \"%s\" @var{arbitrary-string})\n"
msgstr ""

# type: Plain text
#: lispref/strings.texi:741
msgid ""
"If @var{string} contains more than one format specification, the format "
"specifications correspond to successive values from @var{objects}.  Thus, "
"the first format specification in @var{string} uses the first such value, "
"the second format specification uses the second such value, and so on.  Any "
"extra format specifications (those for which there are no corresponding "
"values) cause an error.  Any extra values to be formatted are ignored."
msgstr ""

# type: Plain text
#: lispref/strings.texi:745
msgid ""
"Certain format specifications require values of particular types.  If you "
"supply a value that doesn't fit the requirements, an error is signaled."
msgstr ""

# type: Plain text
#: lispref/strings.texi:747
msgid "Here is a table of valid format specifications:"
msgstr ""

# type: table
#: lispref/strings.texi:755
msgid ""
"Replace the specification with the printed representation of the object, "
"made without quoting (that is, using @code{princ}, not @code{prin1}---@pxref"
"{Output Functions}).  Thus, strings are represented by their contents alone, "
"with no @samp{\"} characters, and symbols appear without @samp{\\} "
"characters."
msgstr ""

# type: table
#: lispref/strings.texi:759
msgid ""
"If the object is a string, its text properties are copied into the output.  "
"The text properties of the @samp{%s} itself are also copied, but those of "
"the object take priority."
msgstr ""

# type: table
#: lispref/strings.texi:765
msgid ""
"Replace the specification with the printed representation of the object, "
"made with quoting (that is, using @code{prin1}---@pxref{Output Functions}).  "
"Thus, strings are enclosed in @samp{\"} characters, and @samp{\\} characters "
"appear where necessary before special characters."
msgstr ""

# type: item
#: lispref/strings.texi:766
#, no-wrap
msgid "%o"
msgstr ""

# type: cindex
#: lispref/strings.texi:767
#, no-wrap
msgid "integer to octal"
msgstr ""

# type: table
#: lispref/strings.texi:770
msgid ""
"Replace the specification with the base-eight representation of an integer."
msgstr ""

# type: table
#: lispref/strings.texi:774
msgid ""
"Replace the specification with the base-ten representation of an integer."
msgstr ""

# type: cindex
#: lispref/strings.texi:777
#, no-wrap
msgid "integer to hexadecimal"
msgstr ""

# type: table
#: lispref/strings.texi:780
msgid ""
"Replace the specification with the base-sixteen representation of an "
"integer.  @samp{%x} uses lower case and @samp{%X} uses upper case."
msgstr ""

# type: table
#: lispref/strings.texi:783
msgid "Replace the specification with the character which is the value given."
msgstr ""

# type: table
#: lispref/strings.texi:787
msgid ""
"Replace the specification with the exponential notation for a floating point "
"number."
msgstr ""

# type: table
#: lispref/strings.texi:791
msgid ""
"Replace the specification with the decimal-point notation for a floating "
"point number."
msgstr ""

# type: item
#: lispref/strings.texi:792
#, no-wrap
msgid "%g"
msgstr ""

# type: table
#: lispref/strings.texi:796
msgid ""
"Replace the specification with notation for a floating point number, using "
"either exponential notation or decimal-point notation, whichever is shorter."
msgstr ""

# type: table
#: lispref/strings.texi:801
msgid ""
"Replace the specification with a single @samp{%}.  This format specification "
"is unusual in that it does not use a value.  For example, @code{(format \"%% "
"%d\" 30)} returns @code{\"% 30\"}."
msgstr ""

# type: Plain text
#: lispref/strings.texi:805
msgid ""
"Any other format character results in an @samp{Invalid format operation} "
"error."
msgstr ""

# type: Plain text
#: lispref/strings.texi:807
msgid "Here are several examples:"
msgstr ""

# type: group
#: lispref/strings.texi:812
#, no-wrap
msgid ""
"(format \"The name of this buffer is %s.\" (buffer-name))\n"
"     @result{} \"The name of this buffer is strings.texi.\"\n"
"\n"
msgstr ""

# type: group
#: lispref/strings.texi:815
#, no-wrap
msgid ""
"(format \"The buffer object prints as %s.\" (current-buffer))\n"
"     @result{} \"The buffer object prints as strings.texi.\"\n"
"\n"
msgstr ""

# type: group
#: lispref/strings.texi:820
#, no-wrap
msgid ""
"(format \"The octal value of %d is %o,\n"
"         and the hex value is %x.\" 18 18 18)\n"
"     @result{} \"The octal value of 18 is 22,\n"
"         and the hex value is 12.\"\n"
msgstr ""

# type: cindex
#: lispref/strings.texi:823
#, no-wrap
msgid "field width"
msgstr ""

# type: cindex
#: lispref/strings.texi:824
#, no-wrap
msgid "padding"
msgstr ""

# type: Plain text
#: lispref/strings.texi:832
msgid ""
"A specification can have a @dfn{width}, which is a signed decimal number "
"between the @samp{%} and the specification character.  If the printed "
"representation of the object contains fewer characters than this width, @code"
"{format} extends it with padding.  The padding goes on the left if the width "
"is positive (or starts with zero) and on the right if the width is "
"negative.  The padding character is normally a space, but it's @samp{0} if "
"the width starts with a zero."
msgstr ""

# type: Plain text
#: lispref/strings.texi:838
msgid ""
"Some of these conventions are ignored for specification characters for which "
"they do not make sense.  That is, @samp{%s}, @samp{%S} and @samp{%c} accept "
"a width starting with 0, but still pad with @emph{spaces} on the left.  "
"Also, @samp{%%} accepts a width, but ignores it.  Here are some examples of "
"padding:"
msgstr ""

# type: example
#: lispref/strings.texi:842
#, no-wrap
msgid ""
"(format \"%06d is padded on the left with zeros\" 123)\n"
"     @result{} \"000123 is padded on the left with zeros\"\n"
"\n"
msgstr ""

# type: example
#: lispref/strings.texi:845
#, no-wrap
msgid ""
"(format \"%-6d is padded on the right\" 123)\n"
"     @result{} \"123    is padded on the right\"\n"
msgstr ""

# type: Plain text
#: lispref/strings.texi:851
msgid ""
"If the width is too small, @code{format} does not truncate the object's "
"printed representation.  Thus, you can use a width to specify a minimum "
"spacing between columns with no risk of losing information."
msgstr ""

# type: Plain text
#: lispref/strings.texi:857
msgid ""
"In the following three examples, @samp{%7s} specifies a minimum width of 7.  "
"In the first case, the string inserted in place of @samp{%7s} has only 3 "
"letters, it needs 4 blank spaces as padding.  In the second case, the string "
"@code{\"specification\"} is 13 letters wide but is not truncated.  In the "
"third case, the padding is on the right."
msgstr ""

# type: group
#: lispref/strings.texi:863
#, no-wrap
msgid ""
"(format \"The word `%7s' actually has %d letters in it.\"\n"
"        \"foo\" (length \"foo\"))\n"
"     @result{} \"The word `    foo' actually has 3 letters in it.\"\n"
msgstr ""

# type: group
#: lispref/strings.texi:869
#, no-wrap
msgid ""
"(format \"The word `%7s' actually has %d letters in it.\"\n"
"        \"specification\" (length \"specification\"))\n"
"     @result{} \"The word `specification' actually has 13 letters in it.\"\n"
msgstr ""

# type: group
#: lispref/strings.texi:875
#, no-wrap
msgid ""
"(format \"The word `%-7s' actually has %d letters in it.\"\n"
"        \"foo\" (length \"foo\"))\n"
"     @result{} \"The word `foo    ' actually has 3 letters in it.\"\n"
msgstr ""

# type: cindex
#: lispref/strings.texi:878
#, no-wrap
msgid "precision in format specifications"
msgstr ""

# type: Plain text
#: lispref/strings.texi:889
msgid ""
"All the specification characters allow an optional @dfn{precision} before "
"the character (after the width, if present).  The precision is a decimal-"
"point @samp{.} followed by a digit-string.  For the floating-point "
"specifications (@samp{%e}, @samp{%f}, @samp{%g}), the precision specifies "
"how many decimal places to show; if zero, the decimal-point itself is also "
"omitted.  For @samp{%s} and @samp{%S}, the precision truncates the string to "
"the given width, so @samp{%.3s} shows only the first three characters of the "
"representation for @var{object}.  Precision has no effect for other "
"specification characters."
msgstr ""

# type: cindex
#: lispref/strings.texi:890
#, no-wrap
msgid "flags in format specifications"
msgstr ""

# type: Plain text
#: lispref/strings.texi:893
msgid ""
"Immediately after the @samp{%} and before the optional width and precision, "
"you can put certain ``flag'' characters."
msgstr ""

# type: Plain text
#: lispref/strings.texi:901
msgid ""
"@samp{+} as a flag inserts a plus sign before a positive number, so that it "
"always has a sign.  A space character as flag inserts a space before a "
"positive number.  (Otherwise, positive numbers start with the first digit.)  "
"Either of these two flags ensures that positive numbers and negative numbers "
"use the same number of columns.  These flags are ignored except for @samp{%"
"d}, @samp{%e}, @samp{%f}, @samp{%g}, and if both flags are used, the @samp"
"{+} takes precedence."
msgstr ""

# type: Plain text
#: lispref/strings.texi:908
msgid ""
"The flag @samp{#} specifies an ``alternate form'' which depends on the "
"format in use.  For @samp{%o} it ensures that the result begins with a @samp"
"{0}.  For @samp{%x} and @samp{%X}, it prefixes the result with @samp{0x} or "
"@samp{0X}.  For @samp{%e}, @samp{%f}, and @samp{%g}, the @samp{#} flag means "
"include a decimal point even if the precision is zero."
msgstr ""

# type: section
#: lispref/strings.texi:911
#, no-wrap
msgid "Case Conversion in Lisp"
msgstr ""

# type: cindex
#: lispref/strings.texi:912
#, no-wrap
msgid "upper case"
msgstr ""

# type: cindex
#: lispref/strings.texi:913
#, no-wrap
msgid "lower case"
msgstr ""

# type: cindex
#: lispref/strings.texi:914
#, no-wrap
msgid "character case"
msgstr ""

# type: cindex
#: lispref/strings.texi:915
#, no-wrap
msgid "case conversion in Lisp"
msgstr ""

# type: Plain text
#: lispref/strings.texi:923
msgid ""
"The character case functions change the case of single characters or of the "
"contents of strings.  The functions normally convert only alphabetic "
"characters (the letters @samp{A} through @samp{Z} and @samp{a} through @samp"
"{z}, as well as non-@acronym{ASCII} letters); other characters are not "
"altered.  You can specify a different case conversion mapping by specifying "
"a case table (@pxref{Case Tables})."
msgstr ""

# type: Plain text
#: lispref/strings.texi:926
msgid ""
"These functions do not modify the strings that are passed to them as "
"arguments."
msgstr ""

# type: Plain text
#: lispref/strings.texi:929
msgid ""
"The examples below use the characters @samp{X} and @samp{x} which have "
"@acronym{ASCII} codes 88 and 120 respectively."
msgstr ""

# type: defun
#: lispref/strings.texi:930
#, no-wrap
msgid "downcase string-or-char"
msgstr ""

# type: defun
#: lispref/strings.texi:932
msgid "This function converts a character or a string to lower case."
msgstr ""

# type: defun
#: lispref/strings.texi:940
msgid ""
"When the argument to @code{downcase} is a string, the function creates and "
"returns a new string in which each letter in the argument that is upper case "
"is converted to lower case.  When the argument to @code{downcase} is a "
"character, @code{downcase} returns the corresponding lower case character.  "
"This value is an integer.  If the original character is lower case, or is "
"not a letter, then the value equals the original character."
msgstr ""

# type: example
#: lispref/strings.texi:944
#, no-wrap
msgid ""
"(downcase \"The cat in the hat\")\n"
"     @result{} \"the cat in the hat\"\n"
"\n"
msgstr ""

# type: example
#: lispref/strings.texi:947
#, no-wrap
msgid ""
"(downcase ?X)\n"
"     @result{} 120\n"
msgstr ""

# type: defun
#: lispref/strings.texi:950
#, no-wrap
msgid "upcase string-or-char"
msgstr ""

# type: defun
#: lispref/strings.texi:952
msgid "This function converts a character or a string to upper case."
msgstr ""

# type: defun
#: lispref/strings.texi:956
msgid ""
"When the argument to @code{upcase} is a string, the function creates and "
"returns a new string in which each letter in the argument that is lower case "
"is converted to upper case."
msgstr ""

# type: defun
#: lispref/strings.texi:961
msgid ""
"When the argument to @code{upcase} is a character, @code{upcase} returns the "
"corresponding upper case character.  This value is an integer.  If the "
"original character is upper case, or is not a letter, then the value "
"returned equals the original character."
msgstr ""

# type: example
#: lispref/strings.texi:965
#, no-wrap
msgid ""
"(upcase \"The cat in the hat\")\n"
"     @result{} \"THE CAT IN THE HAT\"\n"
"\n"
msgstr ""

# type: example
#: lispref/strings.texi:968
#, no-wrap
msgid ""
"(upcase ?x)\n"
"     @result{} 88\n"
msgstr ""

# type: defun
#: lispref/strings.texi:971
#, no-wrap
msgid "capitalize string-or-char"
msgstr ""

# type: cindex
#: lispref/strings.texi:972
#, no-wrap
msgid "capitalization"
msgstr ""

# type: defun
#: lispref/strings.texi:979
msgid ""
"This function capitalizes strings or characters.  If @var{string-or-char} is "
"a string, the function creates and returns a new string, whose contents are "
"a copy of @var{string-or-char} in which each word has been capitalized.  "
"This means that the first character of each word is converted to upper case, "
"and the rest are converted to lower case."
msgstr ""

# type: defun
#: lispref/strings.texi:983 lispref/strings.texi:1015
msgid ""
"The definition of a word is any sequence of consecutive characters that are "
"assigned to the word constituent syntax class in the current syntax table "
"(@pxref{Syntax Class Table})."
msgstr ""

# type: defun
#: lispref/strings.texi:986
msgid ""
"When the argument to @code{capitalize} is a character, @code{capitalize} has "
"the same result as @code{upcase}."
msgstr ""

# type: group
#: lispref/strings.texi:991
#, no-wrap
msgid ""
"(capitalize \"The cat in the hat\")\n"
"     @result{} \"The Cat In The Hat\"\n"
msgstr ""

# type: group
#: lispref/strings.texi:996
#, no-wrap
msgid ""
"(capitalize \"THE 77TH-HATTED CAT\")\n"
"     @result{} \"The 77th-Hatted Cat\"\n"
msgstr ""

# type: group
#: lispref/strings.texi:1001
#, no-wrap
msgid ""
"(capitalize ?x)\n"
"     @result{} 88\n"
msgstr ""

# type: defun
#: lispref/strings.texi:1005
#, no-wrap
msgid "upcase-initials string-or-char"
msgstr ""

# type: defun
#: lispref/strings.texi:1011
msgid ""
"If @var{string-or-char} is a string, this function capitalizes the initials "
"of the words in @var{string-or-char}, without altering any letters other "
"than the initials.  It returns a new string whose contents are a copy of @var"
"{string-or-char}, in which each word has had its initial letter converted to "
"upper case."
msgstr ""

# type: defun
#: lispref/strings.texi:1018
msgid ""
"When the argument to @code{upcase-initials} is a character, @code{upcase-"
"initials} has the same result as @code{upcase}."
msgstr ""

# type: group
#: lispref/strings.texi:1023
#, no-wrap
msgid ""
"(upcase-initials \"The CAT in the hAt\")\n"
"     @result{} \"The CAT In The HAt\"\n"
msgstr ""

# type: Plain text
#: lispref/strings.texi:1029
msgid ""
"@xref{Text Comparison}, for functions that compare strings; some of them "
"ignore case differences, or can optionally ignore case differences."
msgstr ""

# type: section
#: lispref/strings.texi:1031
#, no-wrap
msgid "The Case Table"
msgstr ""

# type: Plain text
#: lispref/strings.texi:1040
msgid ""
"You can customize case conversion by installing a special @dfn{case table}.  "
"A case table specifies the mapping between upper case and lower case "
"letters.  It affects both the case conversion functions for Lisp objects "
"(see the previous section) and those that apply to text in the buffer (@pxref"
"{Case Changes}).  Each buffer has a case table; there is also a standard "
"case table which is used to initialize the case table of new buffers."
msgstr ""

# type: Plain text
#: lispref/strings.texi:1045
msgid ""
"A case table is a char-table (@pxref{Char-Tables}) whose subtype is @code"
"{case-table}.  This char-table maps each character into the corresponding "
"lower case character.  It has three extra slots, which hold related tables:"
msgstr ""

# type: item
#: lispref/strings.texi:1047
#, no-wrap
msgid "upcase"
msgstr ""

# type: table
#: lispref/strings.texi:1050
msgid ""
"The upcase table maps each character into the corresponding upper case "
"character."
msgstr ""

# type: item
#: lispref/strings.texi:1050
#, no-wrap
msgid "canonicalize"
msgstr ""

# type: table
#: lispref/strings.texi:1053
msgid ""
"The canonicalize table maps all of a set of case-related characters into a "
"particular member of that set."
msgstr ""

# type: item
#: lispref/strings.texi:1053
#, no-wrap
msgid "equivalences"
msgstr ""

# type: table
#: lispref/strings.texi:1056
msgid ""
"The equivalences table maps each one of a set of case-related characters "
"into the next character in that set."
msgstr ""

# type: Plain text
#: lispref/strings.texi:1060
msgid ""
"In simple cases, all you need to specify is the mapping to lower-case; the "
"three related tables will be calculated automatically from that one."
msgstr ""

# type: Plain text
#: lispref/strings.texi:1065
msgid ""
"For some languages, upper and lower case letters are not in one-to-one "
"correspondence.  There may be two different lower case letters with the same "
"upper case equivalent.  In these cases, you need to specify the maps for "
"both lower case and upper case."
msgstr ""

# type: Plain text
#: lispref/strings.texi:1072
msgid ""
"The extra table @var{canonicalize} maps each character to a canonical "
"equivalent; any two characters that are related by case-conversion have the "
"same canonical equivalent character.  For example, since @samp{a} and @samp"
"{A} are related by case-conversion, they should have the same canonical "
"equivalent character (which should be either @samp{a} for both of them, or "
"@samp{A} for both of them)."
msgstr ""

# type: Plain text
#: lispref/strings.texi:1078
msgid ""
"The extra table @var{equivalences} is a map that cyclically permutes each "
"equivalence class (of characters with the same canonical equivalent).  (For "
"ordinary @acronym{ASCII}, this would map @samp{a} into @samp{A} and @samp{A} "
"into @samp{a}, and likewise for each set of equivalent characters.)"
msgstr ""

# type: Plain text
#: lispref/strings.texi:1086
msgid ""
"When you construct a case table, you can provide @code{nil} for @var"
"{canonicalize}; then Emacs fills in this slot from the lower case and upper "
"case mappings.  You can also provide @code{nil} for @var{equivalences}; then "
"Emacs fills in this slot from @var{canonicalize}.  In a case table that is "
"actually in use, those components are non-@code{nil}.  Do not try to specify "
"@var{equivalences} without also specifying @var{canonicalize}."
msgstr ""

# type: Plain text
#: lispref/strings.texi:1088
msgid "Here are the functions for working with case tables:"
msgstr ""

# type: defun
#: lispref/strings.texi:1089
#, no-wrap
msgid "case-table-p object"
msgstr ""

# type: defun
#: lispref/strings.texi:1092
msgid ""
"This predicate returns non-@code{nil} if @var{object} is a valid case table."
msgstr ""

# type: defun
#: lispref/strings.texi:1094
#, no-wrap
msgid "set-standard-case-table table"
msgstr ""

# type: defun
#: lispref/strings.texi:1097
msgid ""
"This function makes @var{table} the standard case table, so that it will be "
"used in any buffers created subsequently."
msgstr ""

# type: defun
#: lispref/strings.texi:1099
#, no-wrap
msgid "standard-case-table"
msgstr ""

# type: defun
#: lispref/strings.texi:1101
msgid "This returns the standard case table."
msgstr ""

# type: defun
#: lispref/strings.texi:1103
#, no-wrap
msgid "current-case-table"
msgstr ""

# type: defun
#: lispref/strings.texi:1105
msgid "This function returns the current buffer's case table."
msgstr ""

# type: defun
#: lispref/strings.texi:1107
#, no-wrap
msgid "set-case-table table"
msgstr ""

# type: defun
#: lispref/strings.texi:1109
msgid "This sets the current buffer's case table to @var{table}."
msgstr ""

# type: defmac
#: lispref/strings.texi:1111
#, no-wrap
msgid "with-case-table table body@dots{}"
msgstr ""

# type: defmac
#: lispref/strings.texi:1118
msgid ""
"The @code{with-case-table} macro saves the current case table, makes @var"
"{table} the current case table, evaluates the @var{body} forms, and finally "
"restores the case table.  The return value is the value of the last form in "
"@var{body}.  The case table is restored even in case of an abnormal exit via "
"@code{throw} or error (@pxref{Nonlocal Exits})."
msgstr ""

# type: Plain text
#: lispref/strings.texi:1129
msgid ""
"Some language environments may modify the case conversions of @acronym"
"{ASCII} characters; for example, in the Turkish language environment, the "
"@acronym{ASCII} character @samp{I} is downcased into a Turkish ``dotless "
"i''.  This can interfere with code that requires ordinary ASCII case "
"conversion, such as implementations of @acronym{ASCII}-based network "
"protocols.  In that case, use the @code{with-case-table} macro with the "
"variable @var{ascii-case-table}, which stores the unmodified case table for "
"the @acronym{ASCII} character set."
msgstr ""

# type: defvar
#: lispref/strings.texi:1130
#, no-wrap
msgid "ascii-case-table"
msgstr ""

# type: defvar
#: lispref/strings.texi:1133
msgid ""
"The case table for the @acronym{ASCII} character set.  This should not be "
"modified by any language environment settings."
msgstr ""

# type: Plain text
#: lispref/strings.texi:1140
msgid ""
"The following three functions are convenient subroutines for packages that "
"define non-@acronym{ASCII} character sets.  They modify the specified case "
"table @var{case-table}; they also modify the standard syntax table.  @xref"
"{Syntax Tables}.  Normally you would use these functions to change the "
"standard case table."
msgstr ""

# type: defun
#: lispref/strings.texi:1141
#, no-wrap
msgid "set-case-syntax-pair uc lc case-table"
msgstr ""

# type: defun
#: lispref/strings.texi:1144
msgid ""
"This function specifies a pair of corresponding letters, one upper case and "
"one lower case."
msgstr ""

# type: defun
#: lispref/strings.texi:1146
#, no-wrap
msgid "set-case-syntax-delims l r case-table"
msgstr ""

# type: defun
#: lispref/strings.texi:1149
msgid ""
"This function makes characters @var{l} and @var{r} a matching pair of case-"
"invariant delimiters."
msgstr ""

# type: defun
#: lispref/strings.texi:1151
#, no-wrap
msgid "set-case-syntax char syntax case-table"
msgstr ""

# type: defun
#: lispref/strings.texi:1154
msgid ""
"This function makes @var{char} case-invariant, with syntax @var{syntax}."
msgstr ""

# type: deffn
#: lispref/strings.texi:1156
#, no-wrap
msgid "Command describe-buffer-case-table"
msgstr ""

# type: deffn
#: lispref/strings.texi:1159
msgid ""
"This command displays a description of the contents of the current buffer's "
"case table."
msgstr ""

# type: ignore
#: lispref/strings.texi:1163
#, no-wrap
msgid "   arch-tag: 700b8e95-7aa5-4b52-9eb3-8f2e1ea152b4\n"
msgstr "   arch-tag: 700b8e95-7aa5-4b52-9eb3-8f2e1ea152b4\n"

# NOTE: interned
# type: Plain text
#: lispref/symbols.texi:17
msgid ""
"A @dfn{symbol} is an object with a unique name.  This chapter describes "
"symbols, their components, their property lists, and how they are created "
"and interned.  Separate chapters describe the use of symbols as variables "
"and as function names; see @ref{Variables}, and @ref{Functions}.  For the "
"precise read syntax for symbols, see @ref{Symbol Type}."
msgstr ""
"Un @dfn{symbole} est un objet avec un nom unique. Ce chapitre décrit les "
"symboles, leurs composants, leurs listes de propriétés et comment ils sont "
"créés et conservés. L'utilisation de symboles comme noms de variables ou de "
"fonctions est décrit dans d'autres chapitres ; consultez @ref{Variables} et "
"@ref{Functions}. Pour la syntaxe exacte des symboles, consultez @ref{Le type "
"symbole}."

# type: Plain text
#: lispref/symbols.texi:20
msgid ""
"You can test whether an arbitrary Lisp object is a symbol with @code"
"{symbolp}:"
msgstr ""
"Vous pouvez tester si n'importe quel objet Lisp est un symbole avec @code"
"{symbolp} :"

# type: defun
#: lispref/symbols.texi:21
#, no-wrap
msgid "symbolp object"
msgstr "symbolp objet"

# type: defun
#: lispref/symbols.texi:24
msgid ""
"This function returns @code{t} if @var{object} is a symbol, @code{nil} "
"otherwise."
msgstr ""
"Cette fonction renvoie @code{t} si l'@var{objet} est un symbole et autrement "
"@code{nil}."

# type: menu
#: lispref/symbols.texi:33 lispref/symbols.texi:35 lispref/symbols.texi:36
#: lispref/symbols.texi:140 lispref/vol1.texi:403 lispref/vol2.texi:404
#, no-wrap
msgid "Symbol Components"
msgstr "Composants des symboles"

# type: menu
#: lispref/symbols.texi:33 lispref/vol1.texi:403 lispref/vol2.texi:404
msgid "Symbols have names, values, function definitions"
msgstr "Les symboles ont des noms, des valeurs, des définitions de fonction"

# type: menu
#: lispref/symbols.texi:33 lispref/vol1.texi:403 lispref/vol2.texi:404
msgid "and property lists."
msgstr "et des listes de propriétés."

# type: menu
#: lispref/symbols.texi:33 lispref/symbols.texi:35 lispref/symbols.texi:140
#: lispref/symbols.texi:185 lispref/vol1.texi:403 lispref/vol2.texi:404
#, no-wrap
msgid "Definitions"
msgstr "Definitions"

# type: menu
#: lispref/symbols.texi:33 lispref/vol1.texi:403 lispref/vol2.texi:404
msgid "A definition says how a symbol will be used."
msgstr "Une définition indique comment un symbole sera utilisé."

# type: menu
#: lispref/symbols.texi:33 lispref/symbols.texi:140 lispref/symbols.texi:185
#: lispref/symbols.texi:400 lispref/vol1.texi:403 lispref/vol2.texi:404
#, no-wrap
msgid "Creating Symbols"
msgstr "Créer des symboles"

# type: menu
#: lispref/symbols.texi:33 lispref/vol1.texi:403 lispref/vol2.texi:404
msgid "How symbols are kept unique."
msgstr "Comment les symboles sont gardés uniques."

# type: menu
#: lispref/symbols.texi:33 lispref/symbols.texi:185 lispref/symbols.texi:400
#: lispref/symbols.texi:401 lispref/vol1.texi:403 lispref/vol2.texi:404
#, no-wrap
msgid "Property Lists"
msgstr "Listes de propriétés"

# type: menu
#: lispref/symbols.texi:33 lispref/vol1.texi:403 lispref/vol2.texi:404
msgid "Each symbol has a property list"
msgstr "Chaque symbole a une liste de propriétés"

# type: menu
#: lispref/symbols.texi:33 lispref/vol1.texi:403 lispref/vol2.texi:404
msgid "for recording miscellaneous information."
msgstr "pour l'enregistrement d'informations diverses."

# type: cindex
#: lispref/symbols.texi:37
#, no-wrap
msgid "symbol components"
msgstr ""

# type: Plain text
#: lispref/symbols.texi:41
msgid ""
"Each symbol has four components (or ``cells''), each of which references "
"another object:"
msgstr ""

# type: item
#: lispref/symbols.texi:43
#, no-wrap
msgid "Print name"
msgstr ""

# type: cindex
#: lispref/symbols.texi:44
#, no-wrap
msgid "print name cell"
msgstr ""

# type: table
#: lispref/symbols.texi:47
msgid ""
"The @dfn{print name cell} holds a string that names the symbol for reading "
"and printing.  See @code{symbol-name} in @ref{Creating Symbols}."
msgstr ""

# type: item
#: lispref/symbols.texi:48
#, no-wrap
msgid "Value"
msgstr "Valeur"

# type: cindex
#: lispref/symbols.texi:49
#, no-wrap
msgid "value cell"
msgstr ""

# type: table
#: lispref/symbols.texi:54
msgid ""
"The @dfn{value cell} holds the current value of the symbol as a variable.  "
"When a symbol is used as a form, the value of the form is the contents of "
"the symbol's value cell.  See @code{symbol-value} in @ref{Accessing "
"Variables}."
msgstr ""

# type: item
#: lispref/symbols.texi:55
#, no-wrap
msgid "Function"
msgstr "Fonction"

# type: cindex
#: lispref/symbols.texi:56
#, no-wrap
msgid "function cell"
msgstr ""

# type: table
#: lispref/symbols.texi:63
msgid ""
"The @dfn{function cell} holds the function definition of the symbol.  When a "
"symbol is used as a function, its function definition is used in its place.  "
"This cell is also used to make a symbol stand for a keymap or a keyboard "
"macro, for editor command execution.  Because each symbol has separate value "
"and function cells, variables names and function names do not conflict.  See "
"@code{symbol-function} in @ref{Function Cells}."
msgstr ""

# type: item
#: lispref/symbols.texi:64
#, no-wrap
msgid "Property list"
msgstr ""

# type: cindex
#: lispref/symbols.texi:65
#, no-wrap
msgid "property list cell"
msgstr ""

# type: table
#: lispref/symbols.texi:68
msgid ""
"The @dfn{property list cell} holds the property list of the symbol.  See "
"@code{symbol-plist} in @ref{Property Lists}."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:72
msgid ""
"The print name cell always holds a string, and cannot be changed.  The other "
"three cells can be set individually to any specified Lisp object."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:80
msgid ""
"The print name cell holds the string that is the name of the symbol.  Since "
"symbols are represented textually by their names, it is important not to "
"have two symbols with the same name.  The Lisp reader ensures this: every "
"time it reads a symbol, it looks for an existing symbol with the specified "
"name before it creates a new one.  (In GNU Emacs Lisp, this lookup uses a "
"hashing algorithm and an obarray; see @ref{Creating Symbols}.)"
msgstr ""

# type: Plain text
#: lispref/symbols.texi:87
msgid ""
"The value cell holds the symbol's value as a variable (@pxref{Variables}).  "
"That is what you get if you evaluate the symbol as a Lisp expression (@pxref"
"{Evaluation}).  Any Lisp object is a legitimate value.  Certain symbols have "
"values that cannot be changed; these include @code{nil} and @code{t}, and "
"any symbol whose name starts with @samp{:} (those are called @dfn"
"{keywords}).  @xref{Constant Variables}."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:97
msgid ""
"We often refer to ``the function @code{foo}'' when we really mean the "
"function stored in the function cell of the symbol @code{foo}.  We make the "
"distinction explicit only when necessary.  In normal usage, the function "
"cell usually contains a function (@pxref{Functions}) or a macro (@pxref"
"{Macros}), as that is what the Lisp interpreter expects to see there (@pxref"
"{Evaluation}).  Keyboard macros (@pxref{Keyboard Macros}), keymaps (@pxref"
"{Keymaps}) and autoload objects (@pxref{Autoloading}) are also sometimes "
"stored in the function cells of symbols."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:101
msgid ""
"The property list cell normally should hold a correctly formatted property "
"list (@pxref{Property Lists}), as a number of functions expect to see a "
"property list there."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:107
msgid ""
"The function cell or the value cell may be @dfn{void}, which means that the "
"cell does not reference any object.  (This is not the same thing as holding "
"the symbol @code{void}, nor the same as holding the symbol @code{nil}.)  "
"Examining a function or value cell that is void results in an error, such as "
"@samp{Symbol's value as variable is void}."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:112
msgid ""
"The four functions @code{symbol-name}, @code{symbol-value}, @code{symbol-"
"plist}, and @code{symbol-function} return the contents of the four cells of "
"a symbol.  Here as an example we show the contents of the four cells of the "
"symbol @code{buffer-file-name}:"
msgstr ""

# type: example
#: lispref/symbols.texi:122
#, no-wrap
msgid ""
"(symbol-name 'buffer-file-name)\n"
"     @result{} \"buffer-file-name\"\n"
"(symbol-value 'buffer-file-name)\n"
"     @result{} \"/gnu/elisp/symbols.texi\"\n"
"(symbol-function 'buffer-file-name)\n"
"     @result{} #<subr buffer-file-name>\n"
"(symbol-plist 'buffer-file-name)\n"
"     @result{} (variable-documentation 29529)\n"
msgstr ""

# type: Plain text
#: lispref/symbols.texi:139
msgid ""
"Because this symbol is the variable which holds the name of the file being "
"visited in the current buffer, the value cell contents we see are the name "
"of the source file of this chapter of the Emacs Lisp Manual.  The property "
"list cell contains the list @code{(variable-documentation 29529)} which "
"tells the documentation functions where to find the documentation string for "
"the variable @code{buffer-file-name} in the @file{DOC-@var{version}} file.  "
"(29529 is the offset from the beginning of the @file{DOC-@var{version}} file "
"to where that documentation string begins---see @ref{Documentation "
"Basics}.)  The function cell contains the function for returning the name of "
"the file.  @code{buffer-file-name} names a primitive function, which has no "
"read syntax and prints in hash notation (@pxref{Primitive Function Type}).  "
"A symbol naming a function written in Lisp would have a lambda expression "
"(or a byte-code object) in this cell."
msgstr ""

# type: section
#: lispref/symbols.texi:141
#, no-wrap
msgid "Defining Symbols"
msgstr "Définir des symboles"

# type: cindex
#: lispref/symbols.texi:142
#, no-wrap
msgid "definitions of symbols"
msgstr "définitions de symboles"

# type: Plain text
#: lispref/symbols.texi:148
msgid ""
"A @dfn{definition} in Lisp is a special form that announces your intention "
"to use a certain symbol in a particular way.  In Emacs Lisp, you can define "
"a symbol as a variable, or define it as a function (or macro), or both "
"independently."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:154
msgid ""
"A definition construct typically specifies a value or meaning for the symbol "
"for one kind of use, plus documentation for its meaning when used in this "
"way.  Thus, when you define a symbol as a variable, you can supply an "
"initial value for the variable, plus documentation for the variable."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:159
msgid ""
"@code{defvar} and @code{defconst} are special forms that define a symbol as "
"a global variable.  They are documented in detail in @ref{Defining "
"Variables}.  For defining user option variables that can be customized, use "
"@code{defcustom} (@pxref{Customization})."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:167
msgid ""
"@code{defun} defines a symbol as a function, creating a lambda expression "
"and storing it in the function cell of the symbol.  This lambda expression "
"thus becomes the function definition of the symbol.  (The term ``function "
"definition,'' meaning the contents of the function cell, is derived from the "
"idea that @code{defun} gives the symbol its definition as a function.)  @code"
"{defsubst} and @code{defalias} are two other ways of defining a function.  "
"@xref{Functions}."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:174
msgid ""
"@code{defmacro} defines a symbol as a macro.  It creates a macro object and "
"stores it in the function cell of the symbol.  Note that a given symbol can "
"be a macro or a function, but not both at once, because both macro and "
"function definitions are kept in the function cell, and that cell can hold "
"only one Lisp object at any given time.  @xref{Macros}."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:184
msgid ""
"In Emacs Lisp, a definition is not required in order to use a symbol as a "
"variable or function.  Thus, you can make a symbol a global variable with "
"@code{setq}, whether you define it first or not.  The real purpose of "
"definitions is to guide programmers and programming tools.  They inform "
"programmers who read the code that certain symbols are @emph{intended} to be "
"used as variables, or as functions.  In addition, utilities such as @file"
"{etags} and @file{make-docfile} recognize definitions, and add appropriate "
"information to tag tables and the @file{DOC-@var{version}} file.  @xref"
"{Accessing Documentation}."
msgstr ""

# type: section
#: lispref/symbols.texi:186
#, no-wrap
msgid "Creating and Interning Symbols"
msgstr ""

# type: cindex
#: lispref/symbols.texi:187
#, no-wrap
msgid "reading symbols"
msgstr "Lecture de symboles"

# type: Plain text
#: lispref/symbols.texi:193
msgid ""
"To understand how symbols are created in GNU Emacs Lisp, you must know how "
"Lisp reads them.  Lisp must ensure that it finds the same symbol every time "
"it reads the same set of characters.  Failure to do so would cause complete "
"confusion."
msgstr ""

# type: cindex
#: lispref/symbols.texi:194
#, no-wrap
msgid "symbol name hashing"
msgstr ""

# type: cindex
#: lispref/symbols.texi:195
#, no-wrap
msgid "hashing"
msgstr ""

# type: defvar
#: lispref/symbols.texi:196 lispref/symbols.texi:358
#, no-wrap
msgid "obarray"
msgstr ""

# type: cindex
#: lispref/symbols.texi:197
#, no-wrap
msgid "bucket (in obarray)"
msgstr ""

# type: Plain text
#: lispref/symbols.texi:209
msgid ""
"When the Lisp reader encounters a symbol, it reads all the characters of the "
"name.  Then it ``hashes'' those characters to find an index in a table "
"called an @dfn{obarray}.  Hashing is an efficient method of looking "
"something up.  For example, instead of searching a telephone book cover to "
"cover when looking up Jan Jones, you start with the J's and go from there.  "
"That is a simple version of hashing.  Each element of the obarray is a @dfn"
"{bucket} which holds all the symbols with a given hash code; to look for a "
"given name, it is sufficient to look through all the symbols in the bucket "
"for that name's hash code.  (The same idea is used for general Emacs hash "
"tables, but they are a different data type; see @ref{Hash Tables}.)"
msgstr ""

# type: cindex
#: lispref/symbols.texi:210
#, no-wrap
msgid "interning"
msgstr ""

# type: Plain text
#: lispref/symbols.texi:216
msgid ""
"If a symbol with the desired name is found, the reader uses that symbol.  If "
"the obarray does not contain a symbol with that name, the reader makes a new "
"symbol and adds it to the obarray.  Finding or adding a symbol with a "
"certain name is called @dfn{interning} it, and the symbol is then called an "
"@dfn{interned symbol}."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:221
msgid ""
"Interning ensures that each obarray has just one symbol with any particular "
"name.  Other like-named symbols may exist, but not in the same obarray.  "
"Thus, the reader gets the same symbols for the same names, as long as you "
"keep reading with the same obarray."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:226
msgid ""
"Interning usually happens automatically in the reader, but sometimes other "
"programs need to do it.  For example, after the @kbd{M-x} command obtains "
"the command name as a string using the minibuffer, it then interns the "
"string, to get the interned symbol with that name."
msgstr ""

# type: cindex
#: lispref/symbols.texi:227
#, no-wrap
msgid "symbol equality"
msgstr ""

# type: cindex
#: lispref/symbols.texi:228
#, no-wrap
msgid "uninterned symbol"
msgstr ""

# type: Plain text
#: lispref/symbols.texi:234
msgid ""
"No obarray contains all symbols; in fact, some symbols are not in any "
"obarray.  They are called @dfn{uninterned symbols}.  An uninterned symbol "
"has the same four cells as other symbols; however, the only way to gain "
"access to it is by finding it in some other object or as the value of a "
"variable."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:238
msgid ""
"Creating an uninterned symbol is useful in generating Lisp code, because an "
"uninterned symbol used as a variable in the code you generate cannot clash "
"with any variables used in other Lisp programs."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:246
msgid ""
"In Emacs Lisp, an obarray is actually a vector.  Each element of the vector "
"is a bucket; its value is either an interned symbol whose name hashes to "
"that bucket, or 0 if the bucket is empty.  Each interned symbol has an "
"internal link (invisible to the user) to the next symbol in the bucket.  "
"Because these links are invisible, there is no way to find all the symbols "
"in an obarray except using @code{mapatoms} (below).  The order of symbols in "
"a bucket is not significant."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:252
msgid ""
"In an empty obarray, every element is 0, so you can create an obarray with "
"@code{(make-vector @var{length} 0)}.  @strong{This is the only valid way to "
"create an obarray.} Prime numbers as lengths tend to result in good hashing; "
"lengths one less than a power of two are also good."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:255
msgid ""
"@strong{Do not try to put symbols in an obarray yourself.} This does not "
"work---only @code{intern} can enter a symbol in an obarray properly."
msgstr ""

# type: cindex
#: lispref/symbols.texi:256
#, no-wrap
msgid "CL note---symbol in obarrays"
msgstr ""

# type: quotation
#: lispref/symbols.texi:260
msgid ""
"@b{Common Lisp note:} In Common Lisp, a single symbol may be interned in "
"several obarrays."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:265
msgid ""
"Most of the functions below take a name and sometimes an obarray as "
"arguments.  A @code{wrong-type-argument} error is signaled if the name is "
"not a string, or if the obarray is not a vector."
msgstr ""

# type: defun
#: lispref/symbols.texi:266
#, no-wrap
msgid "symbol-name symbol"
msgstr "symbol-name symbole"

# type: defun
#: lispref/symbols.texi:268
msgid ""
"This function returns the string that is @var{symbol}'s name.  For example:"
msgstr ""
"Cette fonction renvoie la chaîne correspondant au nom du symbole. Par "
"exemple :"

# type: group
#: lispref/symbols.texi:273
#, no-wrap
msgid ""
"(symbol-name 'foo)\n"
"     @result{} \"foo\"\n"
msgstr ""
"(symbol-name 'toto)\n"
"     @result{} \"toto\"\n"

# type: defun
#: lispref/symbols.texi:279
msgid ""
"@strong{Warning:} Changing the string by substituting characters does change "
"the name of the symbol, but fails to update the obarray, so don't do it!"
msgstr ""

# type: defun
#: lispref/symbols.texi:281
#, no-wrap
msgid "make-symbol name"
msgstr "make-symbol nom"

# type: defun
#: lispref/symbols.texi:287
msgid ""
"This function returns a newly-allocated, uninterned symbol whose name is @var"
"{name} (which must be a string).  Its value and function definition are "
"void, and its property list is @code{nil}.  In the example below, the value "
"of @code{sym} is not @code{eq} to @code{foo} because it is a distinct "
"uninterned symbol whose name is also @samp{foo}."
msgstr ""

# type: example
#: lispref/symbols.texi:293
#, no-wrap
msgid ""
"(setq sym (make-symbol \"foo\"))\n"
"     @result{} foo\n"
"(eq sym 'foo)\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/symbols.texi:296
#, no-wrap
msgid "intern name &optional obarray"
msgstr ""

# type: defun
#: lispref/symbols.texi:302
msgid ""
"This function returns the interned symbol whose name is @var{name}.  If "
"there is no such symbol in the obarray @var{obarray}, @code{intern} creates "
"a new one, adds it to the obarray, and returns it.  If @var{obarray} is "
"omitted, the value of the global variable @code{obarray} is used."
msgstr ""

# type: example
#: lispref/symbols.texi:308
#, no-wrap
msgid ""
"(setq sym (intern \"foo\"))\n"
"     @result{} foo\n"
"(eq sym 'foo)\n"
"     @result{} t\n"
"\n"
msgstr ""

# type: example
#: lispref/symbols.texi:313
#, no-wrap
msgid ""
"(setq sym1 (intern \"foo\" other-obarray))\n"
"     @result{} foo\n"
"(eq sym1 'foo)\n"
"     @result{} nil\n"
msgstr ""

# type: cindex
#: lispref/symbols.texi:316
#, no-wrap
msgid "CL note---interning existing symbol"
msgstr ""

# type: quotation
#: lispref/symbols.texi:321
msgid ""
"@b{Common Lisp note:} In Common Lisp, you can intern an existing symbol in "
"an obarray.  In Emacs Lisp, you cannot do this, because the argument to @code"
"{intern} must be a string, not a symbol."
msgstr ""

# type: defun
#: lispref/symbols.texi:323
#, no-wrap
msgid "intern-soft name &optional obarray"
msgstr ""

# type: defun
#: lispref/symbols.texi:329
msgid ""
"This function returns the symbol in @var{obarray} whose name is @var{name}, "
"or @code{nil} if @var{obarray} has no symbol with that name.  Therefore, you "
"can use @code{intern-soft} to test whether a symbol with a given name is "
"already interned.  If @var{obarray} is omitted, the value of the global "
"variable @code{obarray} is used."
msgstr ""

# type: defun
#: lispref/symbols.texi:333
msgid ""
"The argument @var{name} may also be a symbol; in that case, the function "
"returns @var{name} if @var{name} is interned in the specified obarray, and "
"otherwise @code{nil}."
msgstr ""

# type: smallexample
#: lispref/symbols.texi:339
#, no-wrap
msgid ""
"(intern-soft \"frazzle\")        ; @r{No such symbol exists.}\n"
"     @result{} nil\n"
"(make-symbol \"frazzle\")        ; @r{Create an uninterned one.}\n"
"     @result{} frazzle\n"
msgstr ""

# type: group
#: lispref/symbols.texi:342
#, no-wrap
msgid ""
"(intern-soft \"frazzle\")        ; @r{That one cannot be found.}\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/symbols.texi:346
#, no-wrap
msgid ""
"(setq sym (intern \"frazzle\"))  ; @r{Create an interned one.}\n"
"     @result{} frazzle\n"
msgstr ""

# type: group
#: lispref/symbols.texi:350
#, no-wrap
msgid ""
"(intern-soft \"frazzle\")        ; @r{That one can be found!}\n"
"     @result{} frazzle\n"
msgstr ""

# type: group
#: lispref/symbols.texi:354
#, no-wrap
msgid ""
"(eq sym 'frazzle)              ; @r{And it is the same one.}\n"
"     @result{} t\n"
msgstr ""

# type: defvar
#: lispref/symbols.texi:361
msgid ""
"This variable is the standard obarray for use by @code{intern} and @code"
"{read}."
msgstr ""

# type: defun
#: lispref/symbols.texi:363
#, no-wrap
msgid "mapatoms function &optional obarray"
msgstr ""

# type: anchor{#1}
#: lispref/symbols.texi:369
msgid "Definition of mapatoms"
msgstr "Définition de mapatoms"

# type: defun
#: lispref/symbols.texi:369
msgid ""
"This function calls @var{function} once with each symbol in the obarray @var"
"{obarray}.  Then it returns @code{nil}.  If @var{obarray} is omitted, it "
"defaults to the value of @code{obarray}, the standard obarray for ordinary "
"symbols."
msgstr ""

# type: smallexample
#: lispref/symbols.texi:380
#, no-wrap
msgid ""
"(setq count 0)\n"
"     @result{} 0\n"
"(defun count-syms (s)\n"
"  (setq count (1+ count)))\n"
"     @result{} count-syms\n"
"(mapatoms 'count-syms)\n"
"     @result{} nil\n"
"count\n"
"     @result{} 1871\n"
msgstr ""

# type: defun
#: lispref/symbols.texi:384
msgid ""
"See @code{documentation} in @ref{Accessing Documentation}, for another "
"example using @code{mapatoms}."
msgstr ""

# type: defun
#: lispref/symbols.texi:386
#, no-wrap
msgid "unintern symbol &optional obarray"
msgstr ""

# type: defun
#: lispref/symbols.texi:390
msgid ""
"This function deletes @var{symbol} from the obarray @var{obarray}.  If @code"
"{symbol} is not actually in the obarray, @code{unintern} does nothing.  If "
"@var{obarray} is @code{nil}, the current obarray is used."
msgstr ""

# type: defun
#: lispref/symbols.texi:395
msgid ""
"If you provide a string instead of a symbol as @var{symbol}, it stands for a "
"symbol name.  Then @code{unintern} deletes the symbol (if any) in the "
"obarray which has that name.  If there is no such symbol, @code{unintern} "
"does nothing."
msgstr ""

# type: defun
#: lispref/symbols.texi:398
msgid ""
"If @code{unintern} does delete a symbol, it returns @code{t}.  Otherwise it "
"returns @code{nil}."
msgstr ""

# type: cindex
#: lispref/symbols.texi:402
#, no-wrap
msgid "property list"
msgstr ""

# type: Plain text
#: lispref/symbols.texi:412
msgid ""
"A @dfn{property list} (@dfn{plist} for short) is a list of paired elements "
"stored in the property list cell of a symbol.  Each of the pairs associates "
"a property name (usually a symbol) with a property or value.  Property lists "
"are generally used to record information about a symbol, such as its "
"documentation as a variable, the name of the file where it was defined, or "
"perhaps even the grammatical class of the symbol (representing a word) in a "
"language-understanding system."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:415
msgid ""
"Character positions in a string or buffer can also have property lists.  "
"@xref{Text Properties}."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:421
msgid ""
"The property names and values in a property list can be any Lisp objects, "
"but the names are usually symbols.  Property list functions compare the "
"property names using @code{eq}.  Here is an example of a property list, "
"found on the symbol @code{progn} when the compiler is loaded:"
msgstr ""

# type: example
#: lispref/symbols.texi:424
#, no-wrap
msgid "(lisp-indent-function 0 byte-compile byte-compile-progn)\n"
msgstr ""

# type: Plain text
#: lispref/symbols.texi:429
msgid ""
"Here @code{lisp-indent-function} and @code{byte-compile} are property names, "
"and the other two elements are the corresponding values."
msgstr ""

# type: node
#: lispref/symbols.texi:435 lispref/symbols.texi:437
#, no-wrap
msgid "Plists and Alists"
msgstr ""

# type: menu
#: lispref/symbols.texi:435
msgid "Comparison of the advantages of property"
msgstr ""

# type: menu
#: lispref/symbols.texi:435
msgid "lists and association lists."
msgstr ""

# type: node
#: lispref/symbols.texi:435 lispref/symbols.texi:471
#, no-wrap
msgid "Symbol Plists"
msgstr ""

# type: menu
#: lispref/symbols.texi:435
msgid "Functions to access symbols' property lists."
msgstr ""

# type: node
#: lispref/symbols.texi:435 lispref/symbols.texi:525
#, no-wrap
msgid "Other Plists"
msgstr ""

# type: menu
#: lispref/symbols.texi:435
msgid "Accessing property lists stored elsewhere."
msgstr ""

# type: subsection
#: lispref/symbols.texi:438
#, no-wrap
msgid "Property Lists and Association Lists"
msgstr ""

# type: cindex
#: lispref/symbols.texi:439
#, no-wrap
msgid "plist vs. alist"
msgstr ""

# type: cindex
#: lispref/symbols.texi:440
#, no-wrap
msgid "alist vs. plist"
msgstr ""

# type: cindex
#: lispref/symbols.texi:442
#, no-wrap
msgid "property lists vs association lists"
msgstr ""

# type: Plain text
#: lispref/symbols.texi:447
msgid ""
"Association lists (@pxref{Association Lists}) are very similar to property "
"lists.  In contrast to association lists, the order of the pairs in the "
"property list is not significant since the property names must be distinct."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:459
msgid ""
"Property lists are better than association lists for attaching information "
"to various Lisp function names or variables.  If your program keeps all of "
"its associations in one association list, it will typically need to search "
"that entire list each time it checks for an association.  This could be "
"slow.  By contrast, if you keep the same information in the property lists "
"of the function names or variables themselves, each search will scan only "
"the length of one property list, which is usually short.  This is why the "
"documentation for a variable is recorded in a property named @code{variable-"
"documentation}.  The byte compiler likewise uses properties to record those "
"functions needing special treatment."
msgstr ""

# type: Plain text
#: lispref/symbols.texi:470
msgid ""
"However, association lists have their own advantages.  Depending on your "
"application, it may be faster to add an association to the front of an "
"association list than to update a property.  All properties for a symbol are "
"stored in the same property list, so there is a possibility of a conflict "
"between different uses of a property name.  (For this reason, it is a good "
"idea to choose property names that are probably unique, such as by beginning "
"the property name with the program's usual name-prefix for variables and "
"functions.)  An association list may be used like a stack where associations "
"are pushed on the front of the list and later discarded; this is not "
"possible with a property list."
msgstr ""

# type: subsection
#: lispref/symbols.texi:472
#, no-wrap
msgid "Property List Functions for Symbols"
msgstr ""

# type: defun
#: lispref/symbols.texi:474
#, no-wrap
msgid "symbol-plist symbol"
msgstr "symbol-plist symbole"

# type: defun
#: lispref/symbols.texi:476
msgid "This function returns the property list of @var{symbol}."
msgstr ""

# type: defun
#: lispref/symbols.texi:478
#, no-wrap
msgid "setplist symbol plist"
msgstr ""

# type: defun
#: lispref/symbols.texi:482
msgid ""
"This function sets @var{symbol}'s property list to @var{plist}.  Normally, "
"@var{plist} should be a well-formed property list, but this is not "
"enforced.  The return value is @var{plist}."
msgstr ""

# type: smallexample
#: lispref/symbols.texi:488
#, no-wrap
msgid ""
"(setplist 'foo '(a 1 b (2 3) c nil))\n"
"     @result{} (a 1 b (2 3) c nil)\n"
"(symbol-plist 'foo)\n"
"     @result{} (a 1 b (2 3) c nil)\n"
msgstr ""

# type: defun
#: lispref/symbols.texi:494
msgid ""
"For symbols in special obarrays, which are not used for ordinary purposes, "
"it may make sense to use the property list cell in a nonstandard fashion; in "
"fact, the abbrev mechanism does so (@pxref{Abbrevs})."
msgstr ""

# type: defun
#: lispref/symbols.texi:496
#, no-wrap
msgid "get symbol property"
msgstr "get symbole propriété"

# type: defun
#: lispref/symbols.texi:501
msgid ""
"This function finds the value of the property named @var{property} in @var"
"{symbol}'s property list.  If there is no such property, @code{nil} is "
"returned.  Thus, there is no distinction between a value of @code{nil} and "
"the absence of the property."
msgstr ""

# type: defun
#: lispref/symbols.texi:504
msgid ""
"The name @var{property} is compared with the existing property names using "
"@code{eq}, so any object is a legitimate property."
msgstr ""

# type: defun
#: lispref/symbols.texi:506
msgid "See @code{put} for an example."
msgstr "Consultez @code{put} pour un exemple."

# type: defun
#: lispref/symbols.texi:508
#, no-wrap
msgid "put symbol property value"
msgstr "put symbole propriété valeur"

# type: defun
#: lispref/symbols.texi:512
msgid ""
"This function puts @var{value} onto @var{symbol}'s property list under the "
"property name @var{property}, replacing any previous property value.  The "
"@code{put} function returns @var{value}."
msgstr ""

# type: smallexample
#: lispref/symbols.texi:522
#, no-wrap
msgid ""
"(put 'fly 'verb 'transitive)\n"
"     @result{}'transitive\n"
"(put 'fly 'noun '(a buzzing little bug))\n"
"     @result{} (a buzzing little bug)\n"
"(get 'fly 'verb)\n"
"     @result{} transitive\n"
"(symbol-plist 'fly)\n"
"     @result{} (verb transitive noun (a buzzing little bug))\n"
msgstr ""

# type: subsection
#: lispref/symbols.texi:526
#, no-wrap
msgid "Property Lists Outside Symbols"
msgstr ""

# type: Plain text
#: lispref/symbols.texi:530
msgid ""
"These functions are useful for manipulating property lists that are stored "
"in places other than symbols:"
msgstr ""

# type: defun
#: lispref/symbols.texi:531
#, no-wrap
msgid "plist-get plist property"
msgstr ""

# type: defun
#: lispref/symbols.texi:534
msgid ""
"This returns the value of the @var{property} property stored in the property "
"list @var{plist}.  For example,"
msgstr ""

# type: example
#: lispref/symbols.texi:542
#, no-wrap
msgid ""
"(plist-get '(foo 4) 'foo)\n"
"     @result{} 4\n"
"(plist-get '(foo 4 bad) 'foo)\n"
"     @result{} 4\n"
"(plist-get '(foo 4 bad) 'bar)\n"
"     @result{} @code{wrong-type-argument} error\n"
msgstr ""

# type: defun
#: lispref/symbols.texi:546
msgid ""
"It accepts a malformed @var{plist} argument and always returns @code{nil} if "
"@var{property} is not found in the @var{plist}.  For example,"
msgstr ""

# type: example
#: lispref/symbols.texi:550
#, no-wrap
msgid ""
"(plist-get '(foo 4 bad) 'bar)\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/symbols.texi:553
#, no-wrap
msgid "plist-put plist property value"
msgstr ""

# type: defun
#: lispref/symbols.texi:559
msgid ""
"This stores @var{value} as the value of the @var{property} property in the "
"property list @var{plist}.  It may modify @var{plist} destructively, or it "
"may construct a new list structure without altering the old.  The function "
"returns the modified property list, so you can store that back in the place "
"where you got @var{plist}.  For example,"
msgstr ""

# type: example
#: lispref/symbols.texi:567
#, no-wrap
msgid ""
"(setq my-plist '(bar t foo 4))\n"
"     @result{} (bar t foo 4)\n"
"(setq my-plist (plist-put my-plist 'foo 69))\n"
"     @result{} (bar t foo 69)\n"
"(setq my-plist (plist-put my-plist 'quux '(a)))\n"
"     @result{} (bar t foo 69 quux (a))\n"
msgstr ""

# type: Plain text
#: lispref/symbols.texi:571
msgid "You could define @code{put} in terms of @code{plist-put} as follows:"
msgstr ""

# type: example
#: lispref/symbols.texi:576
#, no-wrap
msgid ""
"(defun put (symbol prop value)\n"
"  (setplist symbol\n"
"            (plist-put (symbol-plist symbol) prop value)))\n"
msgstr ""

# type: defun
#: lispref/symbols.texi:578
#, no-wrap
msgid "lax-plist-get plist property"
msgstr ""

# type: defun
#: lispref/symbols.texi:581
msgid ""
"Like @code{plist-get} except that it compares properties using @code{equal} "
"instead of @code{eq}."
msgstr ""

# type: defun
#: lispref/symbols.texi:583
#, no-wrap
msgid "lax-plist-put plist property value"
msgstr ""

# type: defun
#: lispref/symbols.texi:586
msgid ""
"Like @code{plist-put} except that it compares properties using @code{equal} "
"instead of @code{eq}."
msgstr ""

# type: defun
#: lispref/symbols.texi:588
#, no-wrap
msgid "plist-member plist property"
msgstr ""

# type: defun
#: lispref/symbols.texi:594
msgid ""
"This returns non-@code{nil} if @var{plist} contains the given @var"
"{property}.  Unlike @code{plist-get}, this allows you to distinguish between "
"a missing property and a property with the value @code{nil}.  The value is "
"actually the tail of @var{plist} whose @code{car} is @var{property}."
msgstr ""

# type: ignore
#: lispref/symbols.texi:598
#, no-wrap
msgid "   arch-tag: 8750b7d2-de4c-4923-809a-d35fc39fd8ce\n"
msgstr "   arch-tag: 8750b7d2-de4c-4923-809a-d35fc39fd8ce\n"

# type: cindex
#: lispref/syntax.texi:9
#, no-wrap
msgid "parsing buffer text"
msgstr ""

# type: cindex
#: lispref/syntax.texi:10
#, no-wrap
msgid "syntax table"
msgstr ""

# type: cindex
#: lispref/syntax.texi:11
#, no-wrap
msgid "text parsing"
msgstr ""

# type: Plain text
#: lispref/syntax.texi:20
msgid ""
"A @dfn{syntax table} specifies the syntactic textual function of each "
"character.  This information is used by the @dfn{parsing functions}, the "
"complex movement commands, and others to determine where words, symbols, and "
"other syntactic constructs begin and end.  The current syntax table controls "
"the meaning of the word motion functions (@pxref{Word Motion})  and the list "
"motion functions (@pxref{List Motion}), as well as the functions in this "
"chapter."
msgstr ""

# type: menu
#: lispref/syntax.texi:32
msgid "Basics: Syntax Basics"
msgstr ""

# type: menu
#: lispref/syntax.texi:32
msgid "Basic concepts of syntax tables."
msgstr ""

# type: menu
#: lispref/syntax.texi:32
msgid "Desc: Syntax Descriptors"
msgstr ""

# type: menu
#: lispref/syntax.texi:32 lispref/vol1.texi:857 lispref/vol2.texi:858
msgid "How characters are classified."
msgstr ""

# type: menu
#: lispref/syntax.texi:32 lispref/syntax.texi:395 lispref/syntax.texi:396
#: lispref/vol1.texi:857 lispref/vol2.texi:858
#, no-wrap
msgid "Syntax Table Functions"
msgstr ""

# type: menu
#: lispref/syntax.texi:32 lispref/vol1.texi:857 lispref/vol2.texi:858
msgid "How to create, examine and alter syntax tables."
msgstr ""

# type: section
#: lispref/syntax.texi:32 lispref/syntax.texi:526 lispref/syntax.texi:527
#, no-wrap
msgid "Syntax Properties"
msgstr ""

# type: menu
#: lispref/syntax.texi:32
msgid "Overriding syntax with text properties."
msgstr ""

# type: section
#: lispref/syntax.texi:32 lispref/syntax.texi:560 lispref/syntax.texi:561
#, no-wrap
msgid "Motion and Syntax"
msgstr ""

# type: menu
#: lispref/syntax.texi:32
msgid "Moving over characters with certain syntaxes."
msgstr ""

# type: menu
#: lispref/syntax.texi:32 lispref/syntax.texi:599 lispref/syntax.texi:600
#: lispref/vol1.texi:857 lispref/vol2.texi:858
#, no-wrap
msgid "Parsing Expressions"
msgstr ""

# type: menu
#: lispref/syntax.texi:32 lispref/vol1.texi:857 lispref/vol2.texi:858
msgid "Parsing balanced expressions"
msgstr ""

# type: menu
#: lispref/syntax.texi:32 lispref/vol1.texi:857 lispref/vol2.texi:858
msgid "using the syntax table."
msgstr ""

# type: menu
#: lispref/syntax.texi:32 lispref/syntax.texi:887 lispref/vol1.texi:857
#: lispref/vol2.texi:858
#, no-wrap
msgid "Standard Syntax Tables"
msgstr ""

# type: menu
#: lispref/syntax.texi:32 lispref/vol1.texi:857 lispref/vol2.texi:858
msgid "Syntax tables used by various major modes."
msgstr ""

# type: menu
#: lispref/syntax.texi:32 lispref/syntax.texi:912 lispref/syntax.texi:913
#: lispref/vol1.texi:857 lispref/vol2.texi:858
#, no-wrap
msgid "Syntax Table Internals"
msgstr ""

# type: menu
#: lispref/syntax.texi:32 lispref/vol1.texi:857 lispref/vol2.texi:858
msgid "How syntax table information is stored."
msgstr ""

# type: section
#: lispref/syntax.texi:32 lispref/syntax.texi:1043 lispref/syntax.texi:1044
#, no-wrap
msgid "Categories"
msgstr ""

# type: menu
#: lispref/syntax.texi:32
msgid "Another way of classifying character syntax."
msgstr ""

# type: node
#: lispref/syntax.texi:34
#, no-wrap
msgid "Syntax Basics"
msgstr ""

# type: section
#: lispref/syntax.texi:35
#, no-wrap
msgid "Syntax Table Concepts"
msgstr ""

# type: ifnottex
#: lispref/syntax.texi:46
msgid ""
"A @dfn{syntax table} provides Emacs with the information that determines the "
"syntactic use of each character in a buffer.  This information is used by "
"the parsing commands, the complex movement commands, and others to determine "
"where words, symbols, and other syntactic constructs begin and end.  The "
"current syntax table controls the meaning of the word motion functions "
"(@pxref{Word Motion}) and the list motion functions (@pxref{List Motion}) as "
"well as the functions in this chapter."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:52
msgid ""
"A syntax table is a char-table (@pxref{Char-Tables}).  The element at index "
"@var{c} describes the character with code @var{c}.  The element's value "
"should be a list that encodes the syntax of the character in question."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:58
msgid ""
"Syntax tables are used only for moving across text, not for the Emacs Lisp "
"reader.  Emacs Lisp uses built-in syntactic rules when reading Lisp "
"expressions, and these rules cannot be changed.  (Some Lisp systems provide "
"ways to redefine the read syntax, but we decided to leave this feature out "
"of Emacs Lisp for simplicity.)"
msgstr ""

# type: Plain text
#: lispref/syntax.texi:70
msgid ""
"Each buffer has its own major mode, and each major mode has its own idea of "
"the syntactic class of various characters.  For example, in Lisp mode, the "
"character @samp{;} begins a comment, but in C mode, it terminates a "
"statement.  To support these variations, Emacs makes the choice of syntax "
"table local to each buffer.  Typically, each major mode has its own syntax "
"table and installs that table in each buffer that uses that mode.  Changing "
"this table alters the syntax in all those buffers as well as in any buffers "
"subsequently put in that mode.  Occasionally several similar modes share one "
"syntax table.  @xref{Example Major Modes}, for an example of how to set up a "
"syntax table."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:76
msgid ""
"A syntax table can inherit the data for some characters from the standard "
"syntax table, while specifying other characters itself.  The ``inherit'' "
"syntax class means ``inherit this character's syntax from the standard "
"syntax table.'' Just changing the standard syntax for a character affects "
"all syntax tables that inherit from it."
msgstr ""

# type: defun
#: lispref/syntax.texi:77
#, no-wrap
msgid "syntax-table-p object"
msgstr ""

# type: defun
#: lispref/syntax.texi:79
msgid "This function returns @code{t} if @var{object} is a syntax table."
msgstr ""

# type: menu
#: lispref/syntax.texi:81 lispref/syntax.texi:82 lispref/vol1.texi:857
#: lispref/vol1.texi:859 lispref/vol2.texi:858 lispref/vol2.texi:860
#, no-wrap
msgid "Syntax Descriptors"
msgstr ""

# type: cindex
#: lispref/syntax.texi:83
#, no-wrap
msgid "syntax class"
msgstr ""

# type: Plain text
#: lispref/syntax.texi:89
msgid ""
"This section describes the syntax classes and flags that denote the syntax "
"of a character, and how they are represented as a @dfn{syntax descriptor}, "
"which is a Lisp string that you pass to @code{modify-syntax-entry} to "
"specify the syntax you want."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:93
msgid ""
"The syntax table specifies a syntax class for each character.  There is no "
"necessary relationship between the class of a character in one syntax table "
"and its class in any other table."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:101
msgid ""
"Each class is designated by a mnemonic character, which serves as the name "
"of the class when you need to specify a class.  Usually the designator "
"character is one that is often assigned that class; however, its meaning as "
"a designator is unvarying and independent of what syntax that character "
"currently has.  Thus, @samp{\\} as a designator character always gives "
"``escape character'' syntax, regardless of what syntax @samp{\\} currently "
"has."
msgstr ""

# type: cindex
#: lispref/syntax.texi:102
#, no-wrap
msgid "syntax descriptor"
msgstr ""

# type: Plain text
#: lispref/syntax.texi:109
msgid ""
"A syntax descriptor is a Lisp string that specifies a syntax class, a "
"matching character (used only for the parenthesis classes) and flags.  The "
"first character is the designator for a syntax class.  The second character "
"is the character to match; if it is unused, put a space there.  Then come "
"the characters for any desired flags.  If no matching character or flags are "
"needed, one character is sufficient."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:116
msgid ""
"For example, the syntax descriptor for the character @samp{*} in C mode is "
"@samp{@w{. 23}} (i.e., punctuation, matching character slot unused, second "
"character of a comment-starter, first character of a comment-ender), and the "
"entry for @samp{/} is @samp{@w{. 14}} (i.e., punctuation, matching character "
"slot unused, first character of a comment-starter, second character of a "
"comment-ender)."
msgstr ""

# type: menu
#: lispref/syntax.texi:120 lispref/syntax.texi:122 lispref/vol1.texi:862
#: lispref/vol2.texi:863
#, no-wrap
msgid "Syntax Class Table"
msgstr ""

# type: menu
#: lispref/syntax.texi:120 lispref/vol1.texi:862 lispref/vol2.texi:863
msgid "Table of syntax classes."
msgstr ""

# type: menu
#: lispref/syntax.texi:120 lispref/syntax.texi:289 lispref/syntax.texi:290
#: lispref/vol1.texi:862 lispref/vol2.texi:863
#, no-wrap
msgid "Syntax Flags"
msgstr ""

# type: menu
#: lispref/syntax.texi:120 lispref/vol1.texi:862 lispref/vol2.texi:863
msgid "Additional flags each character can have."
msgstr ""

# type: subsection
#: lispref/syntax.texi:123
#, no-wrap
msgid "Table of Syntax Classes"
msgstr ""

# type: Plain text
#: lispref/syntax.texi:127
msgid ""
"Here is a table of syntax classes, the characters that stand for them, their "
"meanings, and examples of their use."
msgstr ""

# type: deffn
#: lispref/syntax.texi:128
#, no-wrap
msgid "{Syntax class} @w{whitespace character}"
msgstr ""

# type: deffn
#: lispref/syntax.texi:135
msgid ""
"@dfn{Whitespace characters} (designated by @w{@samp{@ }} or @samp{-})  "
"separate symbols and words from each other.  Typically, whitespace "
"characters have no other syntactic significance, and multiple whitespace "
"characters are syntactically equivalent to a single one.  Space, tab, "
"newline and formfeed are classified as whitespace in almost all major modes."
msgstr ""

# #-#-#-#-#  fr.po (PACKAGE VERSION)  #-#-#-#-#
# NOTE: @deffn pourrait être mieux => 1 arg + text
# type: deffn
#: lispref/syntax.texi:137
#, no-wrap
msgid "{Syntax class} @w{word constituent}"
msgstr ""

# type: deffn
#: lispref/syntax.texi:142
msgid ""
"@dfn{Word constituents} (designated by @samp{w}) are parts of words in human "
"languages, and are typically used in variable and command names in "
"programs.  All upper- and lower-case letters, and the digits, are typically "
"word constituents."
msgstr ""

# type: deffn
#: lispref/syntax.texi:144
#, no-wrap
msgid "{Syntax class} @w{symbol constituent}"
msgstr ""

# type: deffn
#: lispref/syntax.texi:152
msgid ""
"@dfn{Symbol constituents} (designated by @samp{_}) are the extra characters "
"that are used in variable and command names along with word constituents.  "
"For example, the symbol constituents class is used in Lisp mode to indicate "
"that certain characters may be part of symbol names even though they are not "
"part of English words.  These characters are @samp{$&*+-_<>}.  In standard "
"C, the only non-word-constituent character that is valid in symbols is "
"underscore (@samp{_})."
msgstr ""

# type: deffn
#: lispref/syntax.texi:154
#, no-wrap
msgid "{Syntax class} @w{punctuation character}"
msgstr ""

# type: deffn
#: lispref/syntax.texi:162
msgid ""
"@dfn{Punctuation characters} (designated by @samp{.}) are those characters "
"that are used as punctuation in English, or are used in some way in a "
"programming language to separate symbols from one another.  Some programming "
"language modes, such as Emacs Lisp mode, have no characters in this class "
"since the few characters that are not symbol or word constituents all have "
"other uses.  Other programming language modes, such as C mode, use "
"punctuation syntax for operators."
msgstr ""

# type: deffn
#: lispref/syntax.texi:164
#, no-wrap
msgid "{Syntax class} @w{open parenthesis character}"
msgstr ""

# type: deffnx
#: lispref/syntax.texi:165
#, no-wrap
msgid "{Syntax class} @w{close parenthesis character}"
msgstr ""

# type: cindex
#: lispref/syntax.texi:166
#, no-wrap
msgid "parenthesis syntax"
msgstr ""

# type: deffn
#: lispref/syntax.texi:174
msgid ""
"Open and close @dfn{parenthesis characters} are characters used in "
"dissimilar pairs to surround sentences or expressions.  Such a grouping is "
"begun with an open parenthesis character and terminated with a close.  Each "
"open parenthesis character matches a particular close parenthesis character, "
"and vice versa.  Normally, Emacs indicates momentarily the matching open "
"parenthesis when you insert a close parenthesis.  @xref{Blinking}."
msgstr ""

# type: deffn
#: lispref/syntax.texi:177
msgid ""
"The class of open parentheses is designated by @samp{(}, and that of close "
"parentheses by @samp{)}."
msgstr ""

# type: deffn
#: lispref/syntax.texi:182
msgid ""
"In English text, and in C code, the parenthesis pairs are @samp{()}, @samp"
"{[]}, and @samp{@{@}}.  In Emacs Lisp, the delimiters for lists and vectors "
"(@samp{()} and @samp{[]}) are classified as parenthesis characters."
msgstr ""

# type: deffn
#: lispref/syntax.texi:184
#, no-wrap
msgid "{Syntax class} @w{string quote}"
msgstr ""

# type: deffn
#: lispref/syntax.texi:189
msgid ""
"@dfn{String quote characters} (designated by @samp{\"}) are used in many "
"languages, including Lisp and C, to delimit string constants.  The same "
"string quote character appears at the beginning and the end of a string.  "
"Such quoted strings do not nest."
msgstr ""

# type: deffn
#: lispref/syntax.texi:193
msgid ""
"The parsing facilities of Emacs consider a string as a single token.  The "
"usual syntactic meanings of the characters in the string are suppressed."
msgstr ""

# type: deffn
#: lispref/syntax.texi:199
msgid ""
"The Lisp modes have two string quote characters: double-quote (@samp{\"})  "
"and vertical bar (@samp{|}).  @samp{|} is not used in Emacs Lisp, but it is "
"used in Common Lisp.  C also has two string quote characters: double-quote "
"for strings, and single-quote (@samp{'}) for character constants."
msgstr ""

# type: deffn
#: lispref/syntax.texi:204
msgid ""
"English text has no string quote characters because English is not a "
"programming language.  Although quotation marks are used in English, we do "
"not want them to turn off the usual syntactic properties of other characters "
"in the quotation."
msgstr ""

# type: deffn
#: lispref/syntax.texi:206
#, no-wrap
msgid "{Syntax class} @w{escape-syntax character}"
msgstr ""

# type: deffn
#: lispref/syntax.texi:212
msgid ""
"An @dfn{escape character} (designated by @samp{\\}) starts an escape "
"sequence such as is used in C string and character constants.  The character "
"@samp{\\} belongs to this class in both C and Lisp.  (In C, it is used thus "
"only inside strings, but it turns out to cause no trouble to treat it this "
"way throughout C code.)"
msgstr ""

# type: deffn
#: lispref/syntax.texi:215 lispref/syntax.texi:225
msgid ""
"Characters in this class count as part of words if @code{words-include-"
"escapes} is non-@code{nil}.  @xref{Word Motion}."
msgstr ""

# type: deffn
#: lispref/syntax.texi:217
#, no-wrap
msgid "{Syntax class} @w{character quote}"
msgstr ""

# type: deffn
#: lispref/syntax.texi:222
msgid ""
"A @dfn{character quote character} (designated by @samp{/}) quotes the "
"following character so that it loses its normal syntactic meaning.  This "
"differs from an escape character in that only the character immediately "
"following is ever affected."
msgstr ""

# type: deffn
#: lispref/syntax.texi:227
msgid "This class is used for backslash in @TeX{} mode."
msgstr ""

# type: deffn
#: lispref/syntax.texi:229
#, no-wrap
msgid "{Syntax class} @w{paired delimiter}"
msgstr ""

# type: deffn
#: lispref/syntax.texi:235
msgid ""
"@dfn{Paired delimiter characters} (designated by @samp{$}) are like string "
"quote characters except that the syntactic properties of the characters "
"between the delimiters are not suppressed.  Only @TeX{} mode uses a paired "
"delimiter presently---the @samp{$} that both enters and leaves math mode."
msgstr ""

# type: deffn
#: lispref/syntax.texi:237
#, no-wrap
msgid "{Syntax class} @w{expression prefix}"
msgstr ""

# type: deffn
#: lispref/syntax.texi:243
msgid ""
"An @dfn{expression prefix operator} (designated by @samp{'}) is used for "
"syntactic operators that are considered as part of an expression if they "
"appear next to one.  In Lisp modes, these characters include the apostrophe, "
"@samp{'} (used for quoting), the comma, @samp{,} (used in macros), and @samp"
"{#} (used in the read syntax for certain data types)."
msgstr ""

# type: deffn
#: lispref/syntax.texi:245
#, no-wrap
msgid "{Syntax class} @w{comment starter}"
msgstr ""

# type: deffnx
#: lispref/syntax.texi:246
#, no-wrap
msgid "{Syntax class} @w{comment ender}"
msgstr ""

# type: cindex
#: lispref/syntax.texi:247
#, no-wrap
msgid "comment syntax"
msgstr ""

# type: deffn
#: lispref/syntax.texi:251
msgid ""
"The @dfn{comment starter} and @dfn{comment ender} characters are used in "
"various languages to delimit comments.  These classes are designated by @samp"
"{<} and @samp{>}, respectively."
msgstr ""

# type: deffn
#: lispref/syntax.texi:254
msgid ""
"English text has no comment characters.  In Lisp, the semicolon (@samp{;}) "
"starts a comment and a newline or formfeed ends one."
msgstr ""

# type: deffn
#: lispref/syntax.texi:256
#, no-wrap
msgid "{Syntax class} @w{inherit standard syntax}"
msgstr ""

# type: deffn
#: lispref/syntax.texi:260
msgid ""
"This syntax class does not specify a particular syntax.  It says to look in "
"the standard syntax table to find the syntax of this character.  The "
"designator for this syntax class is @samp{@@}."
msgstr ""

# type: deffn
#: lispref/syntax.texi:262
#, no-wrap
msgid "{Syntax class} @w{generic comment delimiter}"
msgstr ""

# type: deffn
#: lispref/syntax.texi:268
msgid ""
"A @dfn{generic comment delimiter} (designated by @samp{!}) starts or ends a "
"special kind of comment.  @emph{Any} generic comment delimiter matches @emph"
"{any} generic comment delimiter, but they cannot match a comment starter or "
"comment ender; generic comment delimiters can only match each other."
msgstr ""

# type: deffn
#: lispref/syntax.texi:274
msgid ""
"This syntax class is primarily meant for use with the @code{syntax-table} "
"text property (@pxref{Syntax Properties}).  You can mark any range of "
"characters as forming a comment, by giving the first and last characters of "
"the range @code{syntax-table} properties identifying them as generic comment "
"delimiters."
msgstr ""

# type: deffn
#: lispref/syntax.texi:276
#, no-wrap
msgid "{Syntax class} @w{generic string delimiter}"
msgstr ""

# type: deffn
#: lispref/syntax.texi:281
msgid ""
"A @dfn{generic string delimiter} (designated by @samp{|}) starts or ends a "
"string.  This class differs from the string quote class in that @emph{any} "
"generic string delimiter can match any other generic string delimiter; but "
"they do not match ordinary string quote characters."
msgstr ""

# type: deffn
#: lispref/syntax.texi:287
msgid ""
"This syntax class is primarily meant for use with the @code{syntax-table} "
"text property (@pxref{Syntax Properties}).  You can mark any range of "
"characters as forming a string constant, by giving the first and last "
"characters of the range @code{syntax-table} properties identifying them as "
"generic string delimiters."
msgstr ""

# type: cindex
#: lispref/syntax.texi:291
#, no-wrap
msgid "syntax flags"
msgstr ""

# type: Plain text
#: lispref/syntax.texi:297
msgid ""
"In addition to the classes, entries for characters in a syntax table can "
"specify flags.  There are seven possible flags, represented by the "
"characters @samp{1}, @samp{2}, @samp{3}, @samp{4}, @samp{b}, @samp{n}, and "
"@samp{p}."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:307
msgid ""
"All the flags except @samp{n} and @samp{p} are used to describe multi-"
"character comment delimiters.  The digit flags indicate that a character can "
"@emph{also} be part of a comment sequence, in addition to the syntactic "
"properties associated with its character class.  The flags are independent "
"of the class and each other for the sake of characters such as @samp{*} in C "
"mode, which is a punctuation character, @emph{and} the second character of a "
"start-of-comment sequence (@samp{/*}), @emph{and} the first character of an "
"end-of-comment sequence (@samp{*/})."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:310
msgid ""
"Here is a table of the possible flags for a character @var{c}, and what they "
"mean:"
msgstr ""

# type: itemize
#: lispref/syntax.texi:315
msgid ""
"@samp{1} means @var{c} is the start of a two-character comment-start "
"sequence."
msgstr ""

# type: itemize
#: lispref/syntax.texi:318
msgid "@samp{2} means @var{c} is the second character of such a sequence."
msgstr ""

# type: itemize
#: lispref/syntax.texi:322
msgid ""
"@samp{3} means @var{c} is the start of a two-character comment-end sequence."
msgstr ""

# type: itemize
#: lispref/syntax.texi:325
msgid "@samp{4} means @var{c} is the second character of such a sequence."
msgstr ""

# type: itemize
#: lispref/syntax.texi:330
msgid ""
"@samp{b} means that @var{c} as a comment delimiter belongs to the "
"alternative ``b'' comment style."
msgstr ""

# type: itemize
#: lispref/syntax.texi:337
msgid ""
"Emacs supports two comment styles simultaneously in any one syntax table.  "
"This is for the sake of C++.  Each style of comment syntax has its own "
"comment-start sequence and its own comment-end sequence.  Each comment must "
"stick to one style or the other; thus, if it starts with the comment-start "
"sequence of style ``b,'' it must also end with the comment-end sequence of "
"style ``b.''"
msgstr ""

# type: itemize
#: lispref/syntax.texi:341
msgid ""
"The two comment-start sequences must begin with the same character; only the "
"second character may differ.  Mark the second character of the ``b''-style "
"comment-start sequence with the @samp{b} flag."
msgstr ""

# type: itemize
#: lispref/syntax.texi:345
msgid ""
"A comment-end sequence (one or two characters) applies to the ``b'' style if "
"its first character has the @samp{b} flag set; otherwise, it applies to the "
"``a'' style."
msgstr ""

# type: itemize
#: lispref/syntax.texi:347
msgid "The appropriate comment syntax settings for C++ are as follows:"
msgstr ""

# type: samp{#1}
#: lispref/syntax.texi:349
#, no-wrap
msgid "/"
msgstr "/"

# type: samp{#1}
#: lispref/syntax.texi:351
msgid "124b"
msgstr "124b"

# type: samp{#1}
#: lispref/syntax.texi:353
msgid "23"
msgstr "23"

# type: samp{#1}
#: lispref/syntax.texi:355
msgid ">b"
msgstr ">b"

# type: itemize
#: lispref/syntax.texi:358
msgid "This defines four comment-delimiting sequences:"
msgstr ""

# type: samp{#1}
#: lispref/syntax.texi:360
#, no-wrap
msgid "/*"
msgstr "/*"

# type: table
#: lispref/syntax.texi:363
msgid ""
"This is a comment-start sequence for ``a'' style because the second "
"character, @samp{*}, does not have the @samp{b} flag."
msgstr ""

# type: samp{#1}
#: lispref/syntax.texi:364
#, no-wrap
msgid "//"
msgstr "//"

# type: table
#: lispref/syntax.texi:367
msgid ""
"This is a comment-start sequence for ``b'' style because the second "
"character, @samp{/}, does have the @samp{b} flag."
msgstr ""

# type: samp{#1}
#: lispref/syntax.texi:368
#, no-wrap
msgid "*/"
msgstr "*/"

# type: table
#: lispref/syntax.texi:371
msgid ""
"This is a comment-end sequence for ``a'' style because the first character, "
"@samp{*}, does not have the @samp{b} flag."
msgstr ""

# type: table
#: lispref/syntax.texi:375
msgid ""
"This is a comment-end sequence for ``b'' style, because the newline "
"character has the @samp{b} flag."
msgstr ""

# type: itemize
#: lispref/syntax.texi:382
msgid ""
"@samp{n} on a comment delimiter character specifies that this kind of "
"comment can be nested.  For a two-character comment delimiter, @samp{n} on "
"either character makes it nestable."
msgstr ""

# type: itemize
#: lispref/syntax.texi:389
msgid ""
"@samp{p} identifies an additional ``prefix character'' for Lisp syntax.  "
"These characters are treated as whitespace when they appear between "
"expressions.  When they appear within an expression, they are handled "
"according to their usual syntax classes."
msgstr ""

# type: itemize
#: lispref/syntax.texi:393
msgid ""
"The function @code{backward-prefix-chars} moves back over these characters, "
"as well as over characters whose primary syntax class is prefix (@samp{'}).  "
"@xref{Motion and Syntax}."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:400
msgid ""
"In this section we describe functions for creating, accessing and altering "
"syntax tables."
msgstr ""

# type: defun
#: lispref/syntax.texi:401
#, no-wrap
msgid "make-syntax-table &optional table"
msgstr ""

# type: defun
#: lispref/syntax.texi:408
msgid ""
"This function creates a new syntax table, with all values initialized to "
"@code{nil}.  If @var{table} is non-@code{nil}, it becomes the parent of the "
"new syntax table, otherwise the standard syntax table is the parent.  Like "
"all char-tables, a syntax table inherits from its parent.  Thus the original "
"syntax of all characters in the returned syntax table is determined by the "
"parent.  @xref{Char-Tables}."
msgstr ""

# type: defun
#: lispref/syntax.texi:410
msgid "Most major mode syntax tables are created in this way."
msgstr ""

# type: defun
#: lispref/syntax.texi:412
#, no-wrap
msgid "copy-syntax-table &optional table"
msgstr ""

# type: defun
#: lispref/syntax.texi:417
msgid ""
"This function constructs a copy of @var{table} and returns it.  If @var"
"{table} is not supplied (or is @code{nil}), it returns a copy of the "
"standard syntax table.  Otherwise, an error is signaled if @var{table} is "
"not a syntax table."
msgstr ""

# type: deffn
#: lispref/syntax.texi:419
#, no-wrap
msgid "Command modify-syntax-entry char syntax-descriptor  &optional table"
msgstr ""

# type: deffn
#: lispref/syntax.texi:427
msgid ""
"This function sets the syntax entry for @var{char} according to @var{syntax-"
"descriptor}.  The syntax is changed only for @var{table}, which defaults to "
"the current buffer's syntax table, and not in any other syntax table.  The "
"argument @var{syntax-descriptor} specifies the desired syntax; this is a "
"string beginning with a class designator character, and optionally "
"containing a matching character and flags as well.  @xref{Syntax "
"Descriptors}."
msgstr ""

# type: deffn
#: lispref/syntax.texi:430
msgid ""
"This function always returns @code{nil}.  The old syntax information in the "
"table for this character is discarded."
msgstr ""

# type: deffn
#: lispref/syntax.texi:434
msgid ""
"An error is signaled if the first character of the syntax descriptor is not "
"one of the seventeen syntax class designator characters.  An error is also "
"signaled if @var{char} is not a character."
msgstr ""

# #-#-#-#-#  fr.po (PACKAGE VERSION)  #-#-#-#-#
# NOTE: aurrait du être extrait
# type: exdent
#: lispref/syntax.texi:437
#, no-wrap
msgid "@r{Examples:}"
msgstr ""

# type: group
#: lispref/syntax.texi:442
#, no-wrap
msgid ""
";; @r{Put the space character in class whitespace.}\n"
"(modify-syntax-entry ?\\s \" \")\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/syntax.texi:449
#, no-wrap
msgid ""
";; @r{Make @samp{$} an open parenthesis character,}\n"
";;   @r{with @samp{^} as its matching close.}\n"
"(modify-syntax-entry ?$ \"(^\")\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/syntax.texi:456
#, no-wrap
msgid ""
";; @r{Make @samp{^} a close parenthesis character,}\n"
";;   @r{with @samp{$} as its matching open.}\n"
"(modify-syntax-entry ?^ \")$\")\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/syntax.texi:465
#, no-wrap
msgid ""
";; @r{Make @samp{/} a punctuation character,}\n"
";;   @r{the first character of a start-comment sequence,}\n"
";;   @r{and the second character of an end-comment sequence.}\n"
";;   @r{This is used in C mode.}\n"
"(modify-syntax-entry ?/ \". 14\")\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/syntax.texi:469
#, no-wrap
msgid "char-syntax character"
msgstr "char-syntax caractère"

# type: defun
#: lispref/syntax.texi:473
msgid ""
"This function returns the syntax class of @var{character}, represented by "
"its mnemonic designator character.  This returns @emph{only} the class, not "
"any matching parenthesis or flags."
msgstr ""

# type: defun
#: lispref/syntax.texi:475
msgid "An error is signaled if @var{char} is not a character."
msgstr ""

# type: defun
#: lispref/syntax.texi:483
msgid ""
"The following examples apply to C mode.  The first example shows that the "
"syntax class of space is whitespace (represented by a space).  The second "
"example shows that the syntax of @samp{/} is punctuation.  This does not "
"show the fact that it is also part of comment-start and -end sequences.  The "
"third example shows that open parenthesis is in the class of open "
"parentheses.  This does not show the fact that it has a matching character, "
"@samp{)}."
msgstr ""

# type: group
#: lispref/syntax.texi:488
#, no-wrap
msgid ""
"(string (char-syntax ?\\s))\n"
"     @result{} \" \"\n"
msgstr ""

# type: group
#: lispref/syntax.texi:493
#, no-wrap
msgid ""
"(string (char-syntax ?/))\n"
"     @result{} \".\"\n"
msgstr ""

# type: group
#: lispref/syntax.texi:498
#, no-wrap
msgid ""
"(string (char-syntax ?\\())\n"
"     @result{} \"(\"\n"
msgstr ""

# type: defun
#: lispref/syntax.texi:503
msgid ""
"We use @code{string} to make it easier to see the character returned by @code"
"{char-syntax}."
msgstr ""

# type: defun
#: lispref/syntax.texi:505
#, no-wrap
msgid "set-syntax-table table"
msgstr "set-syntax-table table"

# type: defun
#: lispref/syntax.texi:508
msgid ""
"This function makes @var{table} the syntax table for the current buffer.  It "
"returns @var{table}."
msgstr ""

# type: item
#: lispref/syntax.texi:510 lispref/syntax.texi:540 lispref/text.texi:3100
#, no-wrap
msgid "syntax-table"
msgstr "syntax-table"

# type: defun
#: lispref/syntax.texi:513
msgid ""
"This function returns the current syntax table, which is the table for the "
"current buffer."
msgstr ""

# type: defmac
#: lispref/syntax.texi:515
#, no-wrap
msgid "with-syntax-table @var{table} @var{body}@dots{}"
msgstr "with-syntax-table @var{table} @var{corps}@dots{}"

# type: defmac
#: lispref/syntax.texi:519
msgid ""
"This macro executes @var{body} using @var{table} as the current syntax "
"table.  It returns the value of the last form in @var{body}, after restoring "
"the old current syntax table."
msgstr ""

# type: defmac
#: lispref/syntax.texi:524
msgid ""
"Since each buffer has its own current syntax table, we should make that more "
"precise: @code{with-syntax-table} temporarily alters the current syntax "
"table of whichever buffer is current at the time the macro execution "
"starts.  Other buffers are not affected."
msgstr ""

# type: kindex
#: lispref/syntax.texi:528
#, no-wrap
msgid "syntax-table @r{(text property)}"
msgstr ""

# type: Plain text
#: lispref/syntax.texi:536
msgid ""
"When the syntax table is not flexible enough to specify the syntax of a "
"language, you can use @code{syntax-table} text properties to override the "
"syntax table for specific character occurrences in the buffer.  @xref{Text "
"Properties}.  You can use Font Lock mode to set @code{syntax-table} text "
"properties.  @xref{Setting Syntax Properties}."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:538
msgid "The valid values of @code{syntax-table} text property are:"
msgstr ""

# type: table
#: lispref/syntax.texi:544
msgid ""
"If the property value is a syntax table, that table is used instead of the "
"current buffer's syntax table to determine the syntax for this occurrence of "
"the character."
msgstr ""

# type: code{#1}
#: lispref/syntax.texi:545
#, no-wrap
msgid "(@var{syntax-code} . @var{matching-char})"
msgstr ""

# type: table
#: lispref/syntax.texi:548
msgid ""
"A cons cell of this format specifies the syntax for this occurrence of the "
"character.  (@pxref{Syntax Table Internals})"
msgstr ""

# type: table
#: lispref/syntax.texi:552
msgid ""
"If the property is @code{nil}, the character's syntax is determined from the "
"current syntax table in the usual way."
msgstr ""

# type: vindex
#: lispref/syntax.texi:554 lispref/syntax.texi:880
#, no-wrap
msgid "parse-sexp-lookup-properties"
msgstr ""

# type: defvar
#: lispref/syntax.texi:558
msgid ""
"If this is non-@code{nil}, the syntax scanning functions pay attention to "
"syntax text properties.  Otherwise they use only the current syntax table."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:565
msgid ""
"This section describes functions for moving across characters that have "
"certain syntax classes."
msgstr ""

# type: defun
#: lispref/syntax.texi:566
#, no-wrap
msgid "skip-syntax-forward syntaxes &optional limit"
msgstr ""

# type: defun
#: lispref/syntax.texi:572
msgid ""
"This function moves point forward across characters having syntax classes "
"mentioned in @var{syntaxes} (a string of syntax class characters).  It stops "
"when it encounters the end of the buffer, or position @var{limit} (if "
"specified), or a character it is not supposed to skip."
msgstr ""

# type: defun
#: lispref/syntax.texi:575 lispref/syntax.texi:588
msgid ""
"If @var{syntaxes} starts with @samp{^}, then the function skips characters "
"whose syntax is @emph{not} in @var{syntaxes}."
msgstr ""

# type: defun
#: lispref/syntax.texi:578
msgid ""
"The return value is the distance traveled, which is a nonnegative integer."
msgstr ""

# type: defun
#: lispref/syntax.texi:580
#, no-wrap
msgid "skip-syntax-backward syntaxes &optional limit"
msgstr ""

# type: defun
#: lispref/syntax.texi:585
msgid ""
"This function moves point backward across characters whose syntax classes "
"are mentioned in @var{syntaxes}.  It stops when it encounters the beginning "
"of the buffer, or position @var{limit} (if specified), or a character it is "
"not supposed to skip."
msgstr ""

# type: defun
#: lispref/syntax.texi:593
#, no-wrap
msgid "backward-prefix-chars"
msgstr ""

# type: defun
#: lispref/syntax.texi:597
msgid ""
"This function moves point backward over any number of characters with "
"expression prefix syntax.  This includes both characters in the expression "
"prefix syntax class, and characters with the @samp{p} flag."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:608
msgid ""
"This section describes functions for parsing and scanning balanced "
"expressions, also known as @dfn{sexps}.  Basically, a sexp is either a "
"balanced parenthetical grouping, a string, or a symbol name (a sequence of "
"characters whose syntax is either word constituent or symbol constituent).  "
"However, characters whose syntax is expression prefix are treated as part of "
"the sexp if they appear next to it."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:613
msgid ""
"The syntax table controls the interpretation of characters, so these "
"functions can be used for Lisp expressions when in Lisp mode and for C "
"expressions when in C mode.  @xref{List Motion}, for convenient higher-level "
"functions for moving over balanced expressions."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:620
msgid ""
"A character's syntax controls how it changes the state of the parser, rather "
"than describing the state itself.  For example, a string delimiter character "
"toggles the parser state between ``in-string'' and ``in-code,'' but the "
"syntax of characters does not directly say whether they are inside a "
"string.  For example (note that 15 is the syntax code for generic string "
"delimiters),"
msgstr ""

# type: example
#: lispref/syntax.texi:623
#, no-wrap
msgid "(put-text-property 1 9 'syntax-table '(15 . nil))\n"
msgstr ""

# type: Plain text
#: lispref/syntax.texi:629
msgid ""
"does not tell Emacs that the first eight chars of the current buffer are a "
"string, but rather that they are all string delimiters.  As a result, Emacs "
"treats them as four consecutive empty string constants."
msgstr ""

# type: node
#: lispref/syntax.texi:636 lispref/syntax.texi:638
#, no-wrap
msgid "Motion via Parsing"
msgstr ""

# type: menu
#: lispref/syntax.texi:636
msgid "Motion functions that work by parsing."
msgstr ""

# type: node
#: lispref/syntax.texi:636 lispref/syntax.texi:701
#, no-wrap
msgid "Position Parse"
msgstr ""

# type: menu
#: lispref/syntax.texi:636
msgid "Determining the syntactic state of a position."
msgstr ""

# type: subsection
#: lispref/syntax.texi:636 lispref/syntax.texi:742 lispref/syntax.texi:743
#, no-wrap
msgid "Parser State"
msgstr ""

# type: menu
#: lispref/syntax.texi:636
msgid "How Emacs represents a syntactic state."
msgstr ""

# type: subsection
#: lispref/syntax.texi:636 lispref/syntax.texi:828 lispref/syntax.texi:829
#, no-wrap
msgid "Low-Level Parsing"
msgstr ""

# type: menu
#: lispref/syntax.texi:636
msgid "Parsing across a specified region."
msgstr ""

# type: node
#: lispref/syntax.texi:636 lispref/syntax.texi:863
#, no-wrap
msgid "Control Parsing"
msgstr ""

# type: menu
#: lispref/syntax.texi:636
msgid "Parameters that affect parsing."
msgstr ""

# type: subsection
#: lispref/syntax.texi:639
#, no-wrap
msgid "Motion Commands Based on Parsing"
msgstr ""

# type: Plain text
#: lispref/syntax.texi:643
msgid ""
"This section describes simple point-motion functions that operate based on "
"parsing expressions."
msgstr ""

# type: defun
#: lispref/syntax.texi:644
#, no-wrap
msgid "scan-lists from count depth"
msgstr ""

# type: defun
#: lispref/syntax.texi:648
msgid ""
"This function scans forward @var{count} balanced parenthetical groupings "
"from position @var{from}.  It returns the position where the scan stops.  If "
"@var{count} is negative, the scan moves backwards."
msgstr ""

# type: defun
#: lispref/syntax.texi:654
msgid ""
"If @var{depth} is nonzero, parenthesis depth counting begins from that "
"value.  The only candidates for stopping are places where the depth in "
"parentheses becomes zero; @code{scan-lists} counts @var{count} such places "
"and then stops.  Thus, a positive value for @var{depth} means go out @var"
"{depth} levels of parenthesis."
msgstr ""

# type: defun
#: lispref/syntax.texi:657 lispref/syntax.texi:671
msgid ""
"Scanning ignores comments if @code{parse-sexp-ignore-comments} is non-@code"
"{nil}."
msgstr ""

# type: defun
#: lispref/syntax.texi:662
msgid ""
"If the scan reaches the beginning or end of the buffer (or its accessible "
"portion), and the depth is not zero, an error is signaled.  If the depth is "
"zero but the count is not used up, @code{nil} is returned."
msgstr ""

# type: defun
#: lispref/syntax.texi:664
#, no-wrap
msgid "scan-sexps from count"
msgstr ""

# type: defun
#: lispref/syntax.texi:668
msgid ""
"This function scans forward @var{count} sexps from position @var{from}.  It "
"returns the position where the scan stops.  If @var{count} is negative, the "
"scan moves backwards."
msgstr ""

# type: defun
#: lispref/syntax.texi:676
msgid ""
"If the scan reaches the beginning or end of (the accessible part of) the "
"buffer while in the middle of a parenthetical grouping, an error is "
"signaled.  If it reaches the beginning or end between groupings but before "
"count is used up, @code{nil} is returned."
msgstr ""

# type: defun
#: lispref/syntax.texi:678
#, no-wrap
msgid "forward-comment count"
msgstr ""

# type: defun
#: lispref/syntax.texi:690
msgid ""
"This function moves point forward across @var{count} complete comments (that "
"is, including the starting delimiter and the terminating delimiter if any), "
"plus any whitespace encountered on the way.  It moves backward if @var"
"{count} is negative.  If it encounters anything other than a comment or "
"whitespace, it stops, leaving point at the place where it stopped.  This "
"includes (for instance) finding the end of a comment when moving forward and "
"expecting the beginning of one.  The function also stops immediately after "
"moving over the specified number of complete comments.  If @var{count} "
"comments are found as expected, with nothing except whitespace between them, "
"it returns @code{t}; otherwise it returns @code{nil}."
msgstr ""

# type: defun
#: lispref/syntax.texi:694
msgid ""
"This function cannot tell whether the ``comments'' it traverses are embedded "
"within a string.  If they look like comments, it treats them as comments."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:700
msgid ""
"To move forward over all comments and whitespace following point, use @code"
"{(forward-comment (buffer-size))}.  @code{(buffer-size)} is a good argument "
"to use, because the number of comments in the buffer cannot exceed that many."
msgstr ""

# type: subsection
#: lispref/syntax.texi:702
#, no-wrap
msgid "Finding the Parse State for a Position"
msgstr ""

# type: Plain text
#: lispref/syntax.texi:707
msgid ""
"For syntactic analysis, such as in indentation, often the useful thing is to "
"compute the syntactic state corresponding to a given buffer position.  This "
"function does that conveniently."
msgstr ""

# type: defun
#: lispref/syntax.texi:708
#, no-wrap
msgid "syntax-ppss &optional pos"
msgstr ""

# type: defun
#: lispref/syntax.texi:716
msgid ""
"This function returns the parser state (see next section) that the parser "
"would reach at position @var{pos} starting from the beginning of the "
"buffer.  This is equivalent to @code{(parse-partial-sexp (point-min) @var"
"{pos})}, except that @code{syntax-ppss} uses a cache to speed up the "
"computation.  Due to this optimization, the 2nd value (previous complete "
"subexpression) and 6th value (minimum parenthesis depth) of the returned "
"parser state are not meaningful."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:725
msgid ""
"@code{syntax-ppss} automatically hooks itself to @code{before-change-"
"functions} to keep its cache consistent.  But updating can fail if @code"
"{syntax-ppss} is called while @code{before-change-functions} is temporarily "
"let-bound, or if the buffer is modified without obeying the hook, such as "
"when using @code{inhibit-modification-hooks}.  For this reason, it is "
"sometimes necessary to flush the cache manually."
msgstr ""

# type: defun
#: lispref/syntax.texi:726
#, no-wrap
msgid "syntax-ppss-flush-cache beg"
msgstr ""

# type: defun
#: lispref/syntax.texi:729
msgid ""
"This function flushes the cache used by @code{syntax-ppss}, starting at "
"position @var{beg}."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:733
msgid ""
"Major modes can make @code{syntax-ppss} run faster by specifying where it "
"needs to start parsing."
msgstr ""

# type: defvar
#: lispref/syntax.texi:734
#, no-wrap
msgid "syntax-begin-function"
msgstr ""

# type: defvar
#: lispref/syntax.texi:740
msgid ""
"If this is non-@code{nil}, it should be a function that moves to an earlier "
"buffer position where the parser state is equivalent to @code{nil}---in "
"other words, a position outside of any comment, string, or parenthesis.  "
"@code{syntax-ppss} uses it to further optimize its computations, when the "
"cache gives no help."
msgstr ""

# type: cindex
#: lispref/syntax.texi:744
#, no-wrap
msgid "parser state"
msgstr ""

# type: Plain text
#: lispref/syntax.texi:752
msgid ""
"A @dfn{parser state} is a list of ten elements describing the final state of "
"parsing text syntactically as part of an expression.  The parsing functions "
"in the following sections return a parser state as the value, and in some "
"cases accept one as an argument also, so that you can resume parsing after "
"it stops.  Here are the meanings of the elements of the parser state:"
msgstr ""

# type: enumerate
#: lispref/syntax.texi:758
msgid ""
"The depth in parentheses, counting from 0.  @strong{Warning:} this can be "
"negative if there are more close parens than open parens between the start "
"of the defun and point."
msgstr ""

# type: cindex
#: lispref/syntax.texi:760
#, no-wrap
msgid "innermost containing parentheses"
msgstr ""

# type: enumerate
#: lispref/syntax.texi:763
msgid ""
"The character position of the start of the innermost parenthetical grouping "
"containing the stopping point; @code{nil} if none."
msgstr ""

# type: cindex
#: lispref/syntax.texi:765
#, no-wrap
msgid "previous complete subexpression"
msgstr ""

# type: enumerate
#: lispref/syntax.texi:768
msgid ""
"The character position of the start of the last complete subexpression "
"terminated; @code{nil} if none."
msgstr ""

# type: cindex
#: lispref/syntax.texi:770
#, no-wrap
msgid "inside string"
msgstr ""

# type: enumerate
#: lispref/syntax.texi:774
msgid ""
"Non-@code{nil} if inside a string.  More precisely, this is the character "
"that will terminate the string, or @code{t} if a generic string delimiter "
"character should terminate it."
msgstr ""

# type: cindex
#: lispref/syntax.texi:776
#, no-wrap
msgid "inside comment"
msgstr ""

# type: enumerate
#: lispref/syntax.texi:780
msgid ""
"@code{t} if inside a comment (of either style), or the comment nesting level "
"if inside a kind of comment that can be nested."
msgstr ""

# type: cindex
#: lispref/syntax.texi:782
#, no-wrap
msgid "quote character"
msgstr ""

# type: enumerate
#: lispref/syntax.texi:784
msgid "@code{t} if point is just after a quote character."
msgstr ""

# type: enumerate
#: lispref/syntax.texi:787
msgid "The minimum parenthesis depth encountered during this scan."
msgstr ""

# type: enumerate
#: lispref/syntax.texi:793
msgid ""
"What kind of comment is active: @code{nil} for a comment of style ``a'' or "
"when not inside a comment, @code{t} for a comment of style ``b,'' and @code"
"{syntax-table} for a comment that should be ended by a generic comment "
"delimiter character."
msgstr ""

# type: enumerate
#: lispref/syntax.texi:799
msgid ""
"The string or comment start position.  While inside a comment, this is the "
"position where the comment began; while inside a string, this is the "
"position where the string began.  When outside of strings and comments, this "
"element is @code{nil}."
msgstr ""

# type: enumerate
#: lispref/syntax.texi:804
msgid ""
"Internal data for continuing the parsing.  The meaning of this data is "
"subject to change; it is used if you pass this list as the @var{state} "
"argument to another call."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:810
msgid ""
"Elements 1, 2, and 6 are ignored in a state which you pass as an argument to "
"continue parsing, and elements 8 and 9 are used only in trivial cases.  "
"Those elements serve primarily to convey information to the Lisp program "
"which does the parsing."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:813
msgid ""
"One additional piece of useful information is available from a parser state "
"using this function:"
msgstr ""

# type: defun
#: lispref/syntax.texi:814
#, no-wrap
msgid "syntax-ppss-toplevel-pos state"
msgstr ""

# type: defun
#: lispref/syntax.texi:819
msgid ""
"This function extracts, from parser state @var{state}, the last position "
"scanned in the parse which was at top level in grammatical structure.  ``At "
"top level'' means outside of any parentheses, comments, or strings."
msgstr ""

# type: defun
#: lispref/syntax.texi:822
msgid ""
"The value is @code{nil} if @var{state} represents a parse which has arrived "
"at a top level position."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:827
msgid ""
"We have provided this access function rather than document how the data is "
"represented in the state, because we plan to change the representation in "
"the future."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:834
msgid ""
"The most basic way to use the expression parser is to tell it to start at a "
"given position with a certain state, and parse up to a specified end "
"position."
msgstr ""

# type: defun
#: lispref/syntax.texi:835
#, no-wrap
msgid "parse-partial-sexp start limit &optional target-depth stop-before state stop-comment"
msgstr ""

# type: defun
#: lispref/syntax.texi:841
msgid ""
"This function parses a sexp in the current buffer starting at @var{start}, "
"not scanning past @var{limit}.  It stops at position @var{limit} or when "
"certain criteria described below are met, and sets point to the location "
"where parsing stops.  It returns a parser state describing the status of the "
"parse at the point where it stops."
msgstr ""

# type: cindex
#: lispref/syntax.texi:842
#, no-wrap
msgid "parenthesis depth"
msgstr ""

# type: defun
#: lispref/syntax.texi:846
msgid ""
"If the third argument @var{target-depth} is non-@code{nil}, parsing stops if "
"the depth in parentheses becomes equal to @var{target-depth}.  The depth "
"starts at 0, or at whatever is given in @var{state}."
msgstr ""

# type: defun
#: lispref/syntax.texi:853
msgid ""
"If the fourth argument @var{stop-before} is non-@code{nil}, parsing stops "
"when it comes to any character that starts a sexp.  If @var{stop-comment} is "
"non-@code{nil}, parsing stops when it comes to the start of a comment.  If "
"@var{stop-comment} is the symbol @code{syntax-table}, parsing stops after "
"the start of a comment or a string, or the end of a comment or a string, "
"whichever comes first."
msgstr ""

# type: defun
#: lispref/syntax.texi:861
msgid ""
"If @var{state} is @code{nil}, @var{start} is assumed to be at the top level "
"of parenthesis structure, such as the beginning of a function definition.  "
"Alternatively, you might wish to resume parsing in the middle of the "
"structure.  To do this, you must provide a @var{state} argument that "
"describes the initial status of parsing.  The value returned by a previous "
"call to @code{parse-partial-sexp} will do nicely."
msgstr ""

# type: subsection
#: lispref/syntax.texi:864
#, no-wrap
msgid "Parameters to Control Parsing"
msgstr ""

# type: defvar
#: lispref/syntax.texi:866
#, no-wrap
msgid "multibyte-syntax-as-symbol"
msgstr ""

# type: defvar
#: lispref/syntax.texi:871
msgid ""
"If this variable is non-@code{nil}, @code{scan-sexps} treats all non-@acronym"
"{ASCII} characters as symbol constituents regardless of what the syntax "
"table says about them.  (However, text properties can still override the "
"syntax.)"
msgstr ""

# type: defopt
#: lispref/syntax.texi:873
#, no-wrap
msgid "parse-sexp-ignore-comments"
msgstr "parse-sexp-ignore-comments"

# type: cindex
#: lispref/syntax.texi:874
#, no-wrap
msgid "skipping comments"
msgstr ""

# type: defopt
#: lispref/syntax.texi:878
msgid ""
"If the value is non-@code{nil}, then comments are treated as whitespace by "
"the functions in this section and by @code{forward-sexp}, @code{scan-lists} "
"and @code{scan-sexps}."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:883
msgid ""
"The behavior of @code{parse-partial-sexp} is also affected by @code{parse-"
"sexp-lookup-properties} (@pxref{Syntax Properties})."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:886
msgid ""
"You can use @code{forward-comment} to move forward or backward over one "
"comment or several comments."
msgstr ""

# type: section
#: lispref/syntax.texi:888
#, no-wrap
msgid "Some Standard Syntax Tables"
msgstr ""

# type: Plain text
#: lispref/syntax.texi:892
msgid ""
"Most of the major modes in Emacs have their own syntax tables.  Here are "
"several of them:"
msgstr ""

# type: defun
#: lispref/syntax.texi:893
#, no-wrap
msgid "standard-syntax-table"
msgstr ""

# type: defun
#: lispref/syntax.texi:896
msgid ""
"This function returns the standard syntax table, which is the syntax table "
"used in Fundamental mode."
msgstr ""

# type: defvar
#: lispref/syntax.texi:898
#, no-wrap
msgid "text-mode-syntax-table"
msgstr ""

# type: defvar
#: lispref/syntax.texi:900
msgid "The value of this variable is the syntax table used in Text mode."
msgstr ""

# type: defvar
#: lispref/syntax.texi:902
#, no-wrap
msgid "c-mode-syntax-table"
msgstr ""

# type: defvar
#: lispref/syntax.texi:904
msgid "The value of this variable is the syntax table for C-mode buffers."
msgstr ""

# type: defvar
#: lispref/syntax.texi:906
#, no-wrap
msgid "emacs-lisp-mode-syntax-table"
msgstr ""

# type: defvar
#: lispref/syntax.texi:910
msgid ""
"The value of this variable is the syntax table used in Emacs Lisp mode by "
"editing commands.  (It has no effect on the Lisp @code{read} function.)"
msgstr ""

# type: cindex
#: lispref/syntax.texi:914
#, no-wrap
msgid "syntax table internals"
msgstr ""

# type: Plain text
#: lispref/syntax.texi:921
msgid ""
"Lisp programs don't usually work with the elements directly; the Lisp-level "
"syntax table functions usually work with syntax descriptors (@pxref{Syntax "
"Descriptors}).  Nonetheless, here we document the internal format.  This "
"format is used mostly when manipulating syntax properties."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:927
msgid ""
"Each element of a syntax table is a cons cell of the form @code{(@var{syntax-"
"code} . @var{matching-char})}.  The @sc{car}, @var{syntax-code}, is an "
"integer that encodes the syntax class, and any flags.  The @sc{cdr}, @var"
"{matching-char}, is non-@code{nil} if a character to match was specified."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:930
msgid ""
"This table gives the value of @var{syntax-code} which corresponds to each "
"syntactic type."
msgstr ""

# type: multitable
#: lispref/syntax.texi:939
msgid "@i{Integer} @i{Class}"
msgstr ""

# type: multitable
#: lispref/syntax.texi:946
msgid "0 @ @ whitespace"
msgstr ""

# type: multitable
#: lispref/syntax.texi:946
msgid "5 @ @ close parenthesis"
msgstr ""

# type: multitable
#: lispref/syntax.texi:946
msgid "10 @ @ character quote"
msgstr ""

# type: multitable
#: lispref/syntax.texi:953
msgid "1 @ @ punctuation"
msgstr ""

# type: multitable
#: lispref/syntax.texi:953
msgid "6 @ @ expression prefix"
msgstr ""

# type: multitable
#: lispref/syntax.texi:953
msgid "11 @ @ comment-start"
msgstr ""

# type: multitable
#: lispref/syntax.texi:960
msgid "2 @ @ word"
msgstr ""

# type: multitable
#: lispref/syntax.texi:960
msgid "7 @ @ string quote"
msgstr ""

# type: multitable
#: lispref/syntax.texi:960
msgid "12 @ @ comment-end"
msgstr ""

# type: multitable
#: lispref/syntax.texi:967
msgid "3 @ @ symbol"
msgstr ""

# type: multitable
#: lispref/syntax.texi:967
msgid "8 @ @ paired delimiter"
msgstr ""

# type: multitable
#: lispref/syntax.texi:967
msgid "13 @ @ inherit"
msgstr ""

# type: multitable
#: lispref/syntax.texi:974
msgid "4 @ @ open parenthesis"
msgstr ""

# type: multitable
#: lispref/syntax.texi:974
msgid "9 @ @ escape"
msgstr ""

# type: multitable
#: lispref/syntax.texi:974
msgid "14 @ @ generic comment"
msgstr ""

# type: multitable
#: lispref/syntax.texi:977
msgid "15 @ generic string"
msgstr ""

# type: Plain text
#: lispref/syntax.texi:981
msgid ""
"For example, the usual syntax value for @samp{(} is @code{(4 . 41)}.  (41 is "
"the character code for @samp{)}.)"
msgstr ""

# type: Plain text
#: lispref/syntax.texi:985
msgid ""
"The flags are encoded in higher order bits, starting 16 bits from the least "
"significant bit.  This table gives the power of two which corresponds to "
"each syntax flag."
msgstr ""

# type: multitable
#: lispref/syntax.texi:994
msgid "@i{Prefix} @i{Flag}"
msgstr ""

# type: multitable
#: lispref/syntax.texi:1001
msgid "@samp{1} @ @ @code{(lsh 1 16)}"
msgstr ""

# type: multitable
#: lispref/syntax.texi:1001
msgid "@samp{4} @ @ @code{(lsh 1 19)}"
msgstr ""

# type: multitable
#: lispref/syntax.texi:1001
msgid "@samp{b} @ @ @code{(lsh 1 21)}"
msgstr ""

# type: multitable
#: lispref/syntax.texi:1008
msgid "@samp{2} @ @ @code{(lsh 1 17)}"
msgstr ""

# type: multitable
#: lispref/syntax.texi:1008
msgid "@samp{p} @ @ @code{(lsh 1 20)}"
msgstr ""

# type: multitable
#: lispref/syntax.texi:1008
msgid "@samp{n} @ @ @code{(lsh 1 22)}"
msgstr ""

# type: multitable
#: lispref/syntax.texi:1011
msgid "@samp{3} @ @ @code{(lsh 1 18)}"
msgstr ""

# type: defun
#: lispref/syntax.texi:1013
#, no-wrap
msgid "string-to-syntax @var{desc}"
msgstr ""

# type: defun
#: lispref/syntax.texi:1017
msgid ""
"This function returns the internal form corresponding to the syntax "
"descriptor @var{desc}, a cons cell @code{(@var{syntax-code} . @var{matching-"
"char})}."
msgstr ""

# type: defun
#: lispref/syntax.texi:1019
#, no-wrap
msgid "syntax-after pos"
msgstr ""

# type: defun
#: lispref/syntax.texi:1025
msgid ""
"This function returns the syntax code of the character in the buffer after "
"position @var{pos}, taking account of syntax properties as well as the "
"syntax table.  If @var{pos} is outside the buffer's accessible portion "
"(@pxref{Narrowing, accessible portion}), this function returns @code{nil}."
msgstr ""

# type: defun
#: lispref/syntax.texi:1027
#, no-wrap
msgid "syntax-class syntax"
msgstr ""

# type: defun
#: lispref/syntax.texi:1032
msgid ""
"This function returns the syntax class of the syntax code @var{syntax}.  (It "
"masks off the high 16 bits that hold the flags encoded in the syntax "
"descriptor.)  If @var{syntax} is @code{nil}, it returns @code{nil}; this is "
"so evaluating the expression"
msgstr ""

# type: example
#: lispref/syntax.texi:1035
#, no-wrap
msgid "(syntax-class (syntax-after pos))\n"
msgstr ""

# type: defun
#: lispref/syntax.texi:1041
msgid ""
"where @code{pos} is outside the buffer's accessible portion, will yield @code"
"{nil} without throwing errors or producing wrong syntax class codes."
msgstr ""

# type: cindex
#: lispref/syntax.texi:1045
#, no-wrap
msgid "categories of characters"
msgstr ""

# type: cindex
#: lispref/syntax.texi:1046
#, no-wrap
msgid "character categories"
msgstr ""

# type: Plain text
#: lispref/syntax.texi:1053
msgid ""
"@dfn{Categories} provide an alternate way of classifying characters "
"syntactically.  You can define several categories as needed, then "
"independently assign each character to one or more categories.  Unlike "
"syntax classes, categories are not mutually exclusive; it is normal for one "
"character to belong to several categories."
msgstr ""

# type: cindex
#: lispref/syntax.texi:1054
#, no-wrap
msgid "category table"
msgstr ""

# type: Plain text
#: lispref/syntax.texi:1060
msgid ""
"Each buffer has a @dfn{category table} which records which categories are "
"defined and also which characters belong to each category.  Each category "
"table defines its own categories, but normally these are initialized by "
"copying from the standard categories table, so that the standard categories "
"are available in all modes."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:1064
msgid ""
"Each category has a name, which is an @acronym{ASCII} printing character in "
"the range @w{@samp{ }} to @samp{~}.  You specify the name of a category when "
"you define it with @code{define-category}."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:1071
msgid ""
"The category table is actually a char-table (@pxref{Char-Tables}).  The "
"element of the category table at index @var{c} is a @dfn{category set}---a "
"bool-vector---that indicates which categories character @var{c} belongs to.  "
"In this category set, if the element at index @var{cat} is @code{t}, that "
"means category @var{cat} is a member of the set, and that character @var{c} "
"belongs to category @var{cat}."
msgstr ""

# type: Plain text
#: lispref/syntax.texi:1074
msgid ""
"For the next three functions, the optional argument @var{table} defaults to "
"the current buffer's category table."
msgstr ""

# type: defun
#: lispref/syntax.texi:1075
#, no-wrap
msgid "define-category char docstring &optional table"
msgstr ""

# type: defun
#: lispref/syntax.texi:1078
msgid ""
"This function defines a new category, with name @var{char} and documentation "
"@var{docstring}, for the category table @var{table}."
msgstr ""

# type: defun
#: lispref/syntax.texi:1080
#, no-wrap
msgid "category-docstring category &optional table"
msgstr ""

# type: defun
#: lispref/syntax.texi:1083
msgid ""
"This function returns the documentation string of category @var{category} in "
"category table @var{table}."
msgstr ""

# type: example
#: lispref/syntax.texi:1089
#, no-wrap
msgid ""
"(category-docstring ?a)\n"
"     @result{} \"ASCII\"\n"
"(category-docstring ?l)\n"
"     @result{} \"Latin\"\n"
msgstr ""

# type: defun
#: lispref/syntax.texi:1092
#, no-wrap
msgid "get-unused-category &optional table"
msgstr ""

# type: defun
#: lispref/syntax.texi:1096
msgid ""
"This function returns a category name (a character) which is not currently "
"defined in @var{table}.  If all possible categories are in use in @var"
"{table}, it returns @code{nil}."
msgstr ""

# type: defun
#: lispref/syntax.texi:1098
#, no-wrap
msgid "category-table"
msgstr ""

# type: defun
#: lispref/syntax.texi:1100
msgid "This function returns the current buffer's category table."
msgstr ""

# type: defun
#: lispref/syntax.texi:1102
#, no-wrap
msgid "category-table-p object"
msgstr ""

# type: defun
#: lispref/syntax.texi:1105
msgid ""
"This function returns @code{t} if @var{object} is a category table, "
"otherwise @code{nil}."
msgstr ""

# type: defun
#: lispref/syntax.texi:1107
#, no-wrap
msgid "standard-category-table"
msgstr ""

# type: defun
#: lispref/syntax.texi:1109
msgid "This function returns the standard category table."
msgstr ""

# type: defun
#: lispref/syntax.texi:1111
#, no-wrap
msgid "copy-category-table &optional table"
msgstr ""

# type: defun
#: lispref/syntax.texi:1116
msgid ""
"This function constructs a copy of @var{table} and returns it.  If @var"
"{table} is not supplied (or is @code{nil}), it returns a copy of the "
"standard category table.  Otherwise, an error is signaled if @var{table} is "
"not a category table."
msgstr ""

# type: defun
#: lispref/syntax.texi:1118
#, no-wrap
msgid "set-category-table table"
msgstr ""

# type: defun
#: lispref/syntax.texi:1121
msgid ""
"This function makes @var{table} the category table for the current buffer.  "
"It returns @var{table}."
msgstr ""

# type: defun
#: lispref/syntax.texi:1123
#, no-wrap
msgid "make-category-table"
msgstr ""

# type: defun
#: lispref/syntax.texi:1127
msgid ""
"This creates and returns an empty category table.  In an empty category "
"table, no categories have been allocated, and no characters belong to any "
"categories."
msgstr ""

# type: defun
#: lispref/syntax.texi:1129
#, no-wrap
msgid "make-category-set categories"
msgstr ""

# type: defun
#: lispref/syntax.texi:1135
msgid ""
"This function returns a new category set---a bool-vector---whose initial "
"contents are the categories listed in the string @var{categories}.  The "
"elements of @var{categories} should be category names; the new category set "
"has @code{t} for each of those categories, and @code{nil} for all other "
"categories."
msgstr ""

# type: example
#: lispref/syntax.texi:1139
#, no-wrap
msgid ""
"(make-category-set \"al\")\n"
"     @result{} #&128\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\2\\20\\0\\0\"\n"
msgstr ""

# type: defun
#: lispref/syntax.texi:1142
#, no-wrap
msgid "char-category-set char"
msgstr ""

# type: defun
#: lispref/syntax.texi:1148
msgid ""
"This function returns the category set for character @var{char} in the "
"current buffer's category table.  This is the bool-vector which records "
"which categories the character @var{char} belongs to.  The function @code"
"{char-category-set} does not allocate storage, because it returns the same "
"bool-vector that exists in the category table."
msgstr ""

# type: example
#: lispref/syntax.texi:1152
#, no-wrap
msgid ""
"(char-category-set ?a)\n"
"     @result{} #&128\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\2\\20\\0\\0\"\n"
msgstr ""

# type: defun
#: lispref/syntax.texi:1155
#, no-wrap
msgid "category-set-mnemonics category-set"
msgstr ""

# type: defun
#: lispref/syntax.texi:1159
msgid ""
"This function converts the category set @var{category-set} into a string "
"containing the characters that designate the categories that are members of "
"the set."
msgstr ""

# type: example
#: lispref/syntax.texi:1163
#, no-wrap
msgid ""
"(category-set-mnemonics (char-category-set ?a))\n"
"     @result{} \"al\"\n"
msgstr ""

# type: defun
#: lispref/syntax.texi:1166
#, no-wrap
msgid "modify-category-entry character category &optional table reset"
msgstr ""

# type: defun
#: lispref/syntax.texi:1170
msgid ""
"This function modifies the category set of @var{character} in category table "
"@var{table} (which defaults to the current buffer's category table)."
msgstr ""

# type: defun
#: lispref/syntax.texi:1174
msgid ""
"Normally, it modifies the category set by adding @var{category} to it.  But "
"if @var{reset} is non-@code{nil}, then it deletes @var{category} instead."
msgstr ""

# type: deffn
#: lispref/syntax.texi:1176
#, no-wrap
msgid "Command describe-categories &optional buffer-or-name"
msgstr ""

# type: deffn
#: lispref/syntax.texi:1181
msgid ""
"This function describes the category specifications in the current category "
"table.  It inserts the descriptions in a buffer, and then displays that "
"buffer.  If @var{buffer-or-name} is non-@code{nil}, it describes the "
"category table of that buffer instead."
msgstr ""

# type: ignore
#: lispref/syntax.texi:1185
#, no-wrap
msgid "   arch-tag: 4d914e96-0283-445c-9233-75d33662908c\n"
msgstr ""

# type: Plain text
#: lispref/text.texi:16
msgid ""
"This chapter describes the functions that deal with the text in a buffer.  "
"Most examine, insert, or delete text in the current buffer, often operating "
"at point or on text adjacent to point.  Many are interactive.  All the "
"functions that change the text provide for undoing the changes (@pxref"
"{Undo})."
msgstr ""

# type: Plain text
#: lispref/text.texi:27
msgid ""
"Many text-related functions operate on a region of text defined by two "
"buffer positions passed in arguments named @var{start} and @var{end}.  These "
"arguments should be either markers (@pxref{Markers}) or numeric character "
"positions (@pxref{Positions}).  The order of these arguments does not "
"matter; it is all right for @var{start} to be the end of the region and @var"
"{end} the beginning.  For example, @code{(delete-region 1 10)} and @code"
"{(delete-region 10 1)} are equivalent.  An @code{args-out-of-range} error is "
"signaled if either @var{start} or @var{end} is outside the accessible "
"portion of the buffer.  In an interactive call, point and the mark are used "
"for these arguments."
msgstr ""

# type: cindex
#: lispref/text.texi:28
#, no-wrap
msgid "buffer contents"
msgstr ""

# type: Plain text
#: lispref/text.texi:33
msgid ""
"Throughout this chapter, ``text'' refers to the characters in the buffer, "
"together with their properties (when relevant).  Keep in mind that point is "
"always between two characters, and the cursor appears on the character after "
"point."
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/text.texi:65 lispref/vol1.texi:815
#: lispref/vol2.texi:816
#, no-wrap
msgid "Near Point"
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/vol1.texi:815 lispref/vol2.texi:816
msgid "Examining text in the vicinity of point."
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/text.texi:163 lispref/vol1.texi:815
#: lispref/vol2.texi:816
#, no-wrap
msgid "Buffer Contents"
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/vol1.texi:815 lispref/vol2.texi:816
msgid "Examining text in a general fashion."
msgstr ""

# type: section
#: lispref/text.texi:63 lispref/text.texi:319 lispref/text.texi:320
#, no-wrap
msgid "Comparing Text"
msgstr ""

# type: menu
#: lispref/text.texi:63
msgid "Comparing substrings of buffers."
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/text.texi:354 lispref/vol1.texi:815
#: lispref/vol2.texi:816
#, no-wrap
msgid "Insertion"
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/vol1.texi:815 lispref/vol2.texi:816
msgid "Adding new text to a buffer."
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/text.texi:465 lispref/vol1.texi:815
#: lispref/vol2.texi:816
#, no-wrap
msgid "Commands for Insertion"
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/vol1.texi:815 lispref/vol2.texi:816
msgid "User-level commands to insert text."
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/text.texi:539 lispref/vol1.texi:815
#: lispref/vol2.texi:816
#, no-wrap
msgid "Deletion"
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/vol1.texi:815 lispref/vol2.texi:816
msgid "Removing text from a buffer."
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/text.texi:645 lispref/vol1.texi:815
#: lispref/vol2.texi:816
#, no-wrap
msgid "User-Level Deletion"
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/vol1.texi:815 lispref/vol2.texi:816
msgid "User-level commands to delete text."
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/text.texi:783 lispref/text.texi:784
#: lispref/vol1.texi:815 lispref/vol1.texi:817 lispref/vol2.texi:816
#: lispref/vol2.texi:818
#, no-wrap
msgid "The Kill Ring"
msgstr ""

# type: menu
#: lispref/text.texi:63
msgid "Where removed text sometimes is saved for later use."
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/text.texi:1202 lispref/text.texi:1204
#: lispref/vol1.texi:815 lispref/vol2.texi:816
#, no-wrap
msgid "Undo"
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/vol1.texi:815 lispref/vol2.texi:816
msgid "Undoing changes to the text of a buffer."
msgstr ""

# type: node
#: lispref/text.texi:63 lispref/text.texi:1328
#, no-wrap
msgid "Maintaining Undo"
msgstr ""

# type: menu
#: lispref/text.texi:63
msgid ""
"How to enable and disable undo information.  How to control how much "
"information is kept."
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/text.texi:1402 lispref/text.texi:1404
#: lispref/vol1.texi:815 lispref/vol2.texi:816
#, no-wrap
msgid "Filling"
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/vol1.texi:815 lispref/vol2.texi:816
msgid "Functions for explicit filling."
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/text.texi:1577 lispref/vol1.texi:815
#: lispref/vol2.texi:816
#, no-wrap
msgid "Margins"
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/vol1.texi:815 lispref/vol2.texi:816
msgid "How to specify margins for filling commands."
msgstr ""

# type: node
#: lispref/text.texi:63 lispref/text.texi:1679
#, no-wrap
msgid "Adaptive Fill"
msgstr ""

# type: menu
#: lispref/text.texi:63
msgid "Adaptive Fill mode chooses a fill prefix from context."
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/text.texi:1769 lispref/text.texi:1771
#: lispref/vol1.texi:815 lispref/vol2.texi:816
#, no-wrap
msgid "Auto Filling"
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/vol1.texi:815 lispref/vol2.texi:816
msgid "How auto-fill mode is implemented to break lines."
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/text.texi:1813 lispref/vol1.texi:815
#: lispref/vol2.texi:816
#, no-wrap
msgid "Sorting"
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/vol1.texi:815 lispref/vol2.texi:816
msgid "Functions for sorting parts of the buffer."
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/text.texi:2070 lispref/vol1.texi:815
#: lispref/vol2.texi:816
#, no-wrap
msgid "Columns"
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/vol1.texi:815 lispref/vol2.texi:816
msgid "Computing horizontal positions, and using them."
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/text.texi:2130 lispref/text.texi:2131
#: lispref/vol1.texi:815 lispref/vol1.texi:825 lispref/vol2.texi:816
#: lispref/vol2.texi:826
#, no-wrap
msgid "Indentation"
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/vol1.texi:815 lispref/vol2.texi:816
msgid "Functions to insert or adjust indentation."
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/text.texi:2446 lispref/text.texi:2448
#: lispref/vol1.texi:815 lispref/vol2.texi:816
#, no-wrap
msgid "Case Changes"
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/vol1.texi:815 lispref/vol2.texi:816
msgid "Case conversion of parts of the buffer."
msgstr ""

# type: section
#: lispref/text.texi:63 lispref/text.texi:2539 lispref/text.texi:2540
#, no-wrap
msgid "Text Properties"
msgstr ""

# type: menu
#: lispref/text.texi:63
msgid "Assigning Lisp property lists to text characters."
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/text.texi:3888 lispref/vol1.texi:815
#: lispref/vol2.texi:816
#, no-wrap
msgid "Substitution"
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/vol1.texi:815 lispref/vol2.texi:816
msgid "Replacing a given character wherever it appears."
msgstr ""

# type: node
#: lispref/text.texi:63 lispref/text.texi:4093
#, no-wrap
msgid "Transposition"
msgstr ""

# type: menu
#: lispref/text.texi:63
msgid "Swapping two portions of a buffer."
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/text.texi:3943 lispref/text.texi:3944
#: lispref/vol1.texi:815 lispref/vol2.texi:816
#, no-wrap
msgid "Registers"
msgstr ""

# type: menu
#: lispref/text.texi:63 lispref/vol1.texi:815 lispref/vol2.texi:816
msgid "How registers are implemented"
msgstr ""

# type: menu
#: lispref/text.texi:63
msgid "Accessing the text or"
msgstr ""

# type: menu
#: lispref/text.texi:63
msgid "position stored in a register."
msgstr ""

# type: node
#: lispref/text.texi:63 lispref/text.texi:4112
#, no-wrap
msgid "Base 64"
msgstr ""

# type: menu
#: lispref/text.texi:63
msgid "Conversion to or from base 64 encoding."
msgstr ""

# type: section
#: lispref/text.texi:63 lispref/text.texi:4169 lispref/text.texi:4170
#, no-wrap
msgid "MD5 Checksum"
msgstr ""

# type: menu
#: lispref/text.texi:63
msgid "Compute the MD5 \"message digest\"/\"checksum\"."
msgstr ""

# type: node
#: lispref/text.texi:63 lispref/text.texi:4217
#, no-wrap
msgid "Atomic Changes"
msgstr ""

# type: menu
#: lispref/text.texi:63
msgid "Installing several buffer changes \"atomically\"."
msgstr ""

# type: section
#: lispref/text.texi:63 lispref/text.texi:4307 lispref/text.texi:4308
#, no-wrap
msgid "Change Hooks"
msgstr ""

# type: menu
#: lispref/text.texi:63
msgid "Supplying functions to be run when text is changed."
msgstr ""

# type: section
#: lispref/text.texi:66
#, no-wrap
msgid "Examining Text Near Point"
msgstr ""

# type: cindex
#: lispref/text.texi:67
#, no-wrap
msgid "text near point"
msgstr ""

# type: Plain text
#: lispref/text.texi:72
msgid ""
"Many functions are provided to look at the characters around point.  Several "
"simple functions are described here.  See also @code{looking-at} in @ref"
"{Regexp Search}."
msgstr ""

# type: Plain text
#: lispref/text.texi:75
msgid ""
"In the following four functions, ``beginning'' or ``end'' of buffer refers "
"to the beginning or end of the accessible portion."
msgstr ""

# type: defun
#: lispref/text.texi:76
#, no-wrap
msgid "char-after &optional position"
msgstr ""

# type: defun
#: lispref/text.texi:82
msgid ""
"This function returns the character in the current buffer at (i.e., "
"immediately after) position @var{position}.  If @var{position} is out of "
"range for this purpose, either before the beginning of the buffer, or at or "
"beyond the end, then the value is @code{nil}.  The default for @var"
"{position} is point."
msgstr ""

# type: defun
#: lispref/text.texi:85
msgid ""
"In the following example, assume that the first character in the buffer is "
"@samp{@@}:"
msgstr ""

# type: group
#: lispref/text.texi:90
#, no-wrap
msgid ""
"(char-to-string (char-after 1))\n"
"     @result{} \"@@\"\n"
msgstr ""

# type: defun
#: lispref/text.texi:94
#, no-wrap
msgid "char-before &optional position"
msgstr ""

# type: defun
#: lispref/text.texi:100
msgid ""
"This function returns the character in the current buffer immediately before "
"position @var{position}.  If @var{position} is out of range for this "
"purpose, either at or before the beginning of the buffer, or beyond the end, "
"then the value is @code{nil}.  The default for @var{position} is point."
msgstr ""

# type: defun
#: lispref/text.texi:102
#, no-wrap
msgid "following-char"
msgstr ""

# type: defun
#: lispref/text.texi:106
msgid ""
"This function returns the character following point in the current buffer.  "
"This is similar to @code{(char-after (point))}.  However, if point is at the "
"end of the buffer, then @code{following-char} returns 0."
msgstr ""

# type: defun
#: lispref/text.texi:111
msgid ""
"Remember that point is always between characters, and the cursor normally "
"appears over the character following point.  Therefore, the character "
"returned by @code{following-char} is the character the cursor is over."
msgstr ""

# type: defun
#: lispref/text.texi:113
msgid "In this example, point is between the @samp{a} and the @samp{c}."
msgstr ""

# type: group
#: lispref/text.texi:120
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"Gentlemen may cry ``Pea@point{}ce! Peace!,''\n"
"but there is no peace.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: group
#: lispref/text.texi:127
#, no-wrap
msgid ""
"(char-to-string (preceding-char))\n"
"     @result{} \"a\"\n"
"(char-to-string (following-char))\n"
"     @result{} \"c\"\n"
msgstr ""

# type: defun
#: lispref/text.texi:131
#, no-wrap
msgid "preceding-char"
msgstr ""

# type: defun
#: lispref/text.texi:136
msgid ""
"This function returns the character preceding point in the current buffer.  "
"See above, under @code{following-char}, for an example.  If point is at the "
"beginning of the buffer, @code{preceding-char} returns 0."
msgstr ""

# type: defun
#: lispref/text.texi:138
#, no-wrap
msgid "bobp"
msgstr ""

# type: defun
#: lispref/text.texi:143
msgid ""
"This function returns @code{t} if point is at the beginning of the buffer.  "
"If narrowing is in effect, this means the beginning of the accessible "
"portion of the text.  See also @code{point-min} in @ref{Point}."
msgstr ""

# type: defun
#: lispref/text.texi:145
#, no-wrap
msgid "eobp"
msgstr ""

# type: defun
#: lispref/text.texi:149
msgid ""
"This function returns @code{t} if point is at the end of the buffer.  If "
"narrowing is in effect, this means the end of accessible portion of the "
"text.  See also @code{point-max} in @xref{Point}."
msgstr ""

# type: defun
#: lispref/text.texi:151
#, no-wrap
msgid "bolp"
msgstr ""

# type: defun
#: lispref/text.texi:155
msgid ""
"This function returns @code{t} if point is at the beginning of a line.  @xref"
"{Text Lines}.  The beginning of the buffer (or of its accessible portion) "
"always counts as the beginning of a line."
msgstr ""

# type: defun
#: lispref/text.texi:157
#, no-wrap
msgid "eolp"
msgstr ""

# type: defun
#: lispref/text.texi:161
msgid ""
"This function returns @code{t} if point is at the end of a line.  The end of "
"the buffer (or of its accessible portion) is always considered the end of a "
"line."
msgstr ""

# type: section
#: lispref/text.texi:164
#, no-wrap
msgid "Examining Buffer Contents"
msgstr ""

# type: Plain text
#: lispref/text.texi:168
msgid ""
"This section describes functions that allow a Lisp program to convert any "
"portion of the text in the buffer into a string."
msgstr ""

# type: defun
#: lispref/text.texi:169
#, no-wrap
msgid "buffer-substring start end"
msgstr ""

# type: defun
#: lispref/text.texi:175
msgid ""
"This function returns a string containing a copy of the text of the region "
"defined by positions @var{start} and @var{end} in the current buffer.  If "
"the arguments are not positions in the accessible portion of the buffer, "
"@code{buffer-substring} signals an @code{args-out-of-range} error."
msgstr ""

# type: defun
#: lispref/text.texi:179
msgid ""
"It is not necessary for @var{start} to be less than @var{end}; the arguments "
"can be given in either order.  But most often the smaller argument is "
"written first."
msgstr ""

# type: defun
#: lispref/text.texi:181
msgid "Here's an example which assumes Font-Lock mode is not enabled:"
msgstr ""

# type: group
#: lispref/text.texi:186 lispref/text.texi:273
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of buffer foo\n"
"\n"
msgstr ""

# type: group
#: lispref/text.texi:193
#, no-wrap
msgid ""
"(buffer-substring 1 10)\n"
"     @result{} \"This is t\"\n"
msgstr ""

# type: group
#: lispref/text.texi:197
#, no-wrap
msgid ""
"(buffer-substring (point-max) 10)\n"
"     @result{} \"he contents of buffer foo\\n\"\n"
msgstr ""

# type: defun
#: lispref/text.texi:204
msgid ""
"If the text being copied has any text properties, these are copied into the "
"string along with the characters they belong to.  @xref{Text Properties}.  "
"However, overlays (@pxref{Overlays}) in the buffer and their properties are "
"ignored, not copied."
msgstr ""

# type: defun
#: lispref/text.texi:207
msgid ""
"For example, if Font-Lock mode is enabled, you might get results like these:"
msgstr ""

# type: group
#: lispref/text.texi:212
#, no-wrap
msgid ""
"(buffer-substring 1 10)\n"
"     @result{} #(\"This is t\" 0 1 (fontified t) 1 9 (fontified t))\n"
msgstr ""

# type: defun
#: lispref/text.texi:216
#, no-wrap
msgid "buffer-substring-no-properties start end"
msgstr ""

# type: defun
#: lispref/text.texi:219
msgid ""
"This is like @code{buffer-substring}, except that it does not copy text "
"properties, just the characters themselves.  @xref{Text Properties}."
msgstr ""

# type: defun
#: lispref/text.texi:221
#, no-wrap
msgid "filter-buffer-substring start end &optional delete noprops"
msgstr ""

# type: defun
#: lispref/text.texi:228
msgid ""
"This function passes the buffer text between @var{start} and @var{end} "
"through the filter functions specified by the variable @code{buffer-"
"substring-filters}, and returns the value from the last filter function.  If "
"@code{buffer-substring-filters} is @code{nil}, the value is the unaltered "
"text from the buffer, what @code{buffer-substring} would return."
msgstr ""

# type: defun
#: lispref/text.texi:232
msgid ""
"If @var{delete} is non-@code{nil}, this function deletes the text between "
"@var{start} and @var{end} after copying it, like @code{delete-and-extract-"
"region}."
msgstr ""

# type: defun
#: lispref/text.texi:236
msgid ""
"If @var{noprops} is non-@code{nil}, the final string returned does not "
"include text properties, while the string passed through the filters still "
"includes text properties from the buffer text."
msgstr ""

# type: defun
#: lispref/text.texi:244
msgid ""
"Lisp code should use this function instead of @code{buffer-substring}, @code"
"{buffer-substring-no-properties}, or @code{delete-and-extract-region} when "
"copying into user-accessible data structures such as the kill-ring, X "
"clipboard, and registers.  Major and minor modes can add functions to @code"
"{buffer-substring-filters} to alter such text as it is copied out of the "
"buffer."
msgstr ""

# type: defvar
#: lispref/text.texi:246
#, no-wrap
msgid "buffer-substring-filters"
msgstr ""

# type: defvar
#: lispref/text.texi:253
msgid ""
"This variable should be a list of functions that accept a single argument, a "
"string, and return a string.  @code{filter-buffer-substring} passes the "
"buffer substring to the first function in this list, and the return value of "
"each function is passed to the next function.  The return value of the last "
"function is used as the return value of @code{filter-buffer-substring}."
msgstr ""

# type: defvar
#: lispref/text.texi:257
msgid ""
"As a special convention, point is set to the start of the buffer text being "
"operated on (i.e., the @var{start} argument for @code{filter-buffer-"
"substring}) before these functions are called."
msgstr ""

# type: defvar
#: lispref/text.texi:259
msgid "If this variable is @code{nil}, no filtering is performed."
msgstr ""

# type: defun
#: lispref/text.texi:261
#, no-wrap
msgid "buffer-string"
msgstr ""

# type: defun
#: lispref/text.texi:264
msgid ""
"This function returns the contents of the entire accessible portion of the "
"current buffer as a string.  It is equivalent to"
msgstr ""

# type: example
#: lispref/text.texi:267
#, no-wrap
msgid "(buffer-substring (point-min) (point-max))\n"
msgstr ""

# type: group
#: lispref/text.texi:275
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"\n"
msgstr ""

# type: group
#: lispref/text.texi:278
#, no-wrap
msgid ""
"(buffer-string)\n"
"     @result{} \"This is the contents of buffer foo\\n\"\n"
msgstr ""

# type: defun
#: lispref/text.texi:282
#, no-wrap
msgid "current-word &optional strict really-word"
msgstr ""

# type: defun
#: lispref/text.texi:285
msgid ""
"This function returns the symbol (or word) at or near point, as a string.  "
"The return value includes no text properties."
msgstr ""

# type: defun
#: lispref/text.texi:289
msgid ""
"If the optional argument @var{really-word} is non-@code{nil}, it finds a "
"word; otherwise, it finds a symbol (which includes both word characters and "
"symbol constituent characters)."
msgstr ""

# type: defun
#: lispref/text.texi:294
msgid ""
"If the optional argument @var{strict} is non-@code{nil}, then point must be "
"in or next to the symbol or word---if no symbol or word is there, the "
"function returns @code{nil}.  Otherwise, a nearby symbol or word on the same "
"line is acceptable."
msgstr ""

# type: defun
#: lispref/text.texi:296
#, no-wrap
msgid "thing-at-point thing"
msgstr ""

# type: defun
#: lispref/text.texi:298
msgid "Return the @var{thing} around or next to point, as a string."
msgstr ""

# type: defun
#: lispref/text.texi:303
msgid ""
"The argument @var{thing} is a symbol which specifies a kind of syntactic "
"entity.  Possibilities include @code{symbol}, @code{list}, @code{sexp}, @code"
"{defun}, @code{filename}, @code{url}, @code{word}, @code{sentence}, @code"
"{whitespace}, @code{line}, @code{page}, and others."
msgstr ""

# type: example
#: lispref/text.texi:309
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"Gentlemen may cry ``Pea@point{}ce! Peace!,''\n"
"but there is no peace.\n"
"---------- Buffer: foo ----------\n"
"\n"
msgstr ""

# type: example
#: lispref/text.texi:316
#, no-wrap
msgid ""
"(thing-at-point 'word)\n"
"     @result{} \"Peace\"\n"
"(thing-at-point 'line)\n"
"     @result{} \"Gentlemen may cry ``Peace! Peace!,''\\n\"\n"
"(thing-at-point 'whitespace)\n"
"     @result{} nil\n"
msgstr ""

# type: cindex
#: lispref/text.texi:321
#, no-wrap
msgid "comparing buffer text"
msgstr ""

# type: Plain text
#: lispref/text.texi:325
msgid ""
"This function lets you compare portions of the text in a buffer, without "
"copying them into strings first."
msgstr ""

# type: defun
#: lispref/text.texi:326
#, no-wrap
msgid "compare-buffer-substrings buffer1 start1 end1 buffer2 start2 end2"
msgstr ""

# type: defun
#: lispref/text.texi:333
msgid ""
"This function lets you compare two substrings of the same buffer or two "
"different buffers.  The first three arguments specify one substring, giving "
"a buffer (or a buffer name) and two positions within the buffer.  The last "
"three arguments specify the other substring in the same way.  You can use "
"@code{nil} for @var{buffer1}, @var{buffer2}, or both to stand for the "
"current buffer."
msgstr ""

# type: defun
#: lispref/text.texi:338
msgid ""
"The value is negative if the first substring is less, positive if the first "
"is greater, and zero if they are equal.  The absolute value of the result is "
"one plus the index of the first differing characters within the substrings."
msgstr ""

# type: defun
#: lispref/text.texi:342
msgid ""
"This function ignores case when comparing characters if @code{case-fold-"
"search} is non-@code{nil}.  It always ignores text properties."
msgstr ""

# type: defun
#: lispref/text.texi:347
msgid ""
"Suppose the current buffer contains the text @samp{foobarbar haha!rara!}; "
"then in this example the two substrings are @samp{rbar } and @samp{rara!}.  "
"The value is 2 because the first substring is greater at the second "
"character."
msgstr ""

# type: example
#: lispref/text.texi:351
#, no-wrap
msgid ""
"(compare-buffer-substrings nil 6 11 nil 16 21)\n"
"     @result{} 2\n"
msgstr ""

# type: section
#: lispref/text.texi:355
#, no-wrap
msgid "Inserting Text"
msgstr ""

# type: cindex
#: lispref/text.texi:356
#, no-wrap
msgid "insertion of text"
msgstr ""

# type: cindex
#: lispref/text.texi:357
#, no-wrap
msgid "text insertion"
msgstr ""

# type: cindex
#: lispref/text.texi:359
#, no-wrap
msgid "insertion before point"
msgstr ""

# type: cindex
#: lispref/text.texi:360
#, no-wrap
msgid "before point, insertion"
msgstr ""

# type: Plain text
#: lispref/text.texi:366
msgid ""
"@dfn{Insertion} means adding new text to a buffer.  The inserted text goes "
"at point---between the character before point and the character after "
"point.  Some insertion functions leave point before the inserted text, while "
"other functions leave it after.  We call the former insertion @dfn{after "
"point} and the latter insertion @dfn{before point}."
msgstr ""

# type: Plain text
#: lispref/text.texi:375
msgid ""
"Insertion relocates markers that point at positions after the insertion "
"point, so that they stay with the surrounding text (@pxref{Markers}).  When "
"a marker points at the place of insertion, insertion may or may not relocate "
"the marker, depending on the marker's insertion type (@pxref{Marker "
"Insertion Types}).  Certain special functions such as @code{insert-before-"
"markers} relocate all such markers to point after the inserted text, "
"regardless of the markers' insertion type."
msgstr ""

# type: Plain text
#: lispref/text.texi:378
msgid ""
"Insertion functions signal an error if the current buffer is read-only or if "
"they insert within read-only text."
msgstr ""

# type: Plain text
#: lispref/text.texi:384
msgid ""
"These functions copy text characters from strings and buffers along with "
"their properties.  The inserted characters have exactly the same properties "
"as the characters they were copied from.  By contrast, characters specified "
"as separate arguments, not part of a string or buffer, inherit their text "
"properties from the neighboring text."
msgstr ""

# type: Plain text
#: lispref/text.texi:391
msgid ""
"The insertion functions convert text from unibyte to multibyte in order to "
"insert in a multibyte buffer, and vice versa---if the text comes from a "
"string or from a buffer.  However, they do not convert unibyte character "
"codes 128 through 255 to multibyte characters, not even if the current "
"buffer is a multibyte buffer.  @xref{Converting Representations}."
msgstr ""

# type: defun
#: lispref/text.texi:392
#, no-wrap
msgid "insert &rest args"
msgstr ""

# type: defun
#: lispref/text.texi:397
msgid ""
"This function inserts the strings and/or characters @var{args} into the "
"current buffer, at point, moving point forward.  In other words, it inserts "
"the text before point.  An error is signaled unless all @var{args} are "
"either strings or characters.  The value is @code{nil}."
msgstr ""

# type: defun
#: lispref/text.texi:399
#, no-wrap
msgid "insert-before-markers &rest args"
msgstr ""

# type: defun
#: lispref/text.texi:404
msgid ""
"This function inserts the strings and/or characters @var{args} into the "
"current buffer, at point, moving point forward.  An error is signaled unless "
"all @var{args} are either strings or characters.  The value is @code{nil}."
msgstr ""

# type: defun
#: lispref/text.texi:411
msgid ""
"This function is unlike the other insertion functions in that it relocates "
"markers initially pointing at the insertion point, to point after the "
"inserted text.  If an overlay begins at the insertion point, the inserted "
"text falls outside the overlay; if a nonempty overlay ends at the insertion "
"point, the inserted text falls inside that overlay."
msgstr ""

# type: defun
#: lispref/text.texi:413
#, no-wrap
msgid "insert-char character count &optional inherit"
msgstr ""

# type: defun
#: lispref/text.texi:417
msgid ""
"This function inserts @var{count} instances of @var{character} into the "
"current buffer before point.  The argument @var{count} should be an integer, "
"and @var{character} must be a character.  The value is @code{nil}."
msgstr ""

# type: defun
#: lispref/text.texi:421
msgid ""
"This function does not convert unibyte character codes 128 through 255 to "
"multibyte characters, not even if the current buffer is a multibyte buffer.  "
"@xref{Converting Representations}."
msgstr ""

# type: defun
#: lispref/text.texi:425
msgid ""
"If @var{inherit} is non-@code{nil}, then the inserted characters inherit "
"sticky text properties from the two characters before and after the "
"insertion point.  @xref{Sticky Properties}."
msgstr ""

# type: defun
#: lispref/text.texi:427
#, no-wrap
msgid "insert-buffer-substring from-buffer-or-name &optional start end"
msgstr ""

# type: defun
#: lispref/text.texi:433
msgid ""
"This function inserts a portion of buffer @var{from-buffer-or-name} (which "
"must already exist) into the current buffer before point.  The text inserted "
"is the region between @var{start} and @var{end}.  (These arguments default "
"to the beginning and end of the accessible portion of that buffer.)  This "
"function returns @code{nil}."
msgstr ""

# type: defun
#: lispref/text.texi:436
msgid ""
"In this example, the form is executed with buffer @samp{bar} as the current "
"buffer.  We assume that buffer @samp{bar} is initially empty."
msgstr ""

# type: group
#: lispref/text.texi:442
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"We hold these truths to be self-evident, that all\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: group
#: lispref/text.texi:447
#, no-wrap
msgid ""
"(insert-buffer-substring \"foo\" 1 20)\n"
"     @result{} nil\n"
"\n"
msgstr ""

# type: group
#: lispref/text.texi:451
#, no-wrap
msgid ""
"---------- Buffer: bar ----------\n"
"We hold these truth@point{}\n"
"---------- Buffer: bar ----------\n"
msgstr ""

# type: defun
#: lispref/text.texi:455
#, no-wrap
msgid "insert-buffer-substring-no-properties from-buffer-or-name &optional start end"
msgstr ""

# type: defun
#: lispref/text.texi:458
msgid ""
"This is like @code{insert-buffer-substring} except that it does not copy any "
"text properties."
msgstr ""

# type: Plain text
#: lispref/text.texi:464
msgid ""
"@xref{Sticky Properties}, for other insertion functions that inherit text "
"properties from the nearby text in addition to inserting it.  Whitespace "
"inserted by indentation functions also inherits text properties."
msgstr ""

# type: section
#: lispref/text.texi:466
#, no-wrap
msgid "User-Level Insertion Commands"
msgstr ""

# type: Plain text
#: lispref/text.texi:471
msgid ""
"This section describes higher-level commands for inserting text, commands "
"intended primarily for the user but useful also in Lisp programs."
msgstr ""

# type: deffn
#: lispref/text.texi:472
#, no-wrap
msgid "Command insert-buffer from-buffer-or-name"
msgstr ""

# type: deffn
#: lispref/text.texi:477
msgid ""
"This command inserts the entire accessible contents of @var{from-buffer-or-"
"name} (which must exist) into the current buffer after point.  It leaves the "
"mark after the inserted text.  The value is @code{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:479
#, no-wrap
msgid "Command self-insert-command count"
msgstr ""

# type: cindex
#: lispref/text.texi:480
#, no-wrap
msgid "character insertion"
msgstr ""

# type: cindex
#: lispref/text.texi:481
#, no-wrap
msgid "self-insertion"
msgstr ""

# type: deffn
#: lispref/text.texi:487
msgid ""
"This command inserts the last character typed; it does so @var{count} times, "
"before point, and returns @code{nil}.  Most printing characters are bound to "
"this command.  In routine use, @code{self-insert-command} is the most "
"frequently called function in Emacs, but programs rarely use it except to "
"install it on a keymap."
msgstr ""

# type: deffn
#: lispref/text.texi:492
msgid ""
"Self-insertion translates the input character through @code{translation-"
"table-for-input}.  @xref{Translation of Characters}."
msgstr ""

# type: deffn
#: lispref/text.texi:496
msgid ""
"This command calls @code{auto-fill-function} whenever that is non-@code{nil} "
"and the character inserted is in the table @code{auto-fill-chars} (@pxref"
"{Auto Filling})."
msgstr ""

# type: deffn
#: lispref/text.texi:503
msgid ""
"This command performs abbrev expansion if Abbrev mode is enabled and the "
"inserted character does not have word-constituent syntax. (@xref{Abbrevs}, "
"and @ref{Syntax Class Table}.)  It is also responsible for calling @code"
"{blink-paren-function} when the inserted character has close parenthesis "
"syntax (@pxref{Blinking})."
msgstr ""

# type: deffn
#: lispref/text.texi:507
msgid ""
"Do not try substituting your own definition of @code{self-insert-command} "
"for the standard one.  The editor command loop handles this function "
"specially."
msgstr ""

# type: deffn
#: lispref/text.texi:509
#, no-wrap
msgid "Command newline &optional number-of-newlines"
msgstr ""

# type: deffn
#: lispref/text.texi:513
msgid ""
"This command inserts newlines into the current buffer before point.  If @var"
"{number-of-newlines} is supplied, that many newline characters are inserted."
msgstr ""

# type: cindex
#: lispref/text.texi:514
#, no-wrap
msgid "newline and Auto Fill mode"
msgstr ""

# type: deffn
#: lispref/text.texi:522
msgid ""
"This function calls @code{auto-fill-function} if the current column number "
"is greater than the value of @code{fill-column} and @var{number-of-newlines} "
"is @code{nil}.  Typically what @code{auto-fill-function} does is insert a "
"newline; thus, the overall result in this case is to insert two newlines at "
"different places: one at point, and another earlier in the line.  @code"
"{newline} does not auto-fill if @var{number-of-newlines} is non-@code{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:525
msgid ""
"This command indents to the left margin if that is not zero.  @xref{Margins}."
msgstr ""

# type: deffn
#: lispref/text.texi:528
msgid ""
"The value returned is @code{nil}.  In an interactive call, @var{count} is "
"the numeric prefix argument."
msgstr ""

# type: defvar
#: lispref/text.texi:530
#, no-wrap
msgid "overwrite-mode"
msgstr ""

# type: defvar
#: lispref/text.texi:537
msgid ""
"This variable controls whether overwrite mode is in effect.  The value "
"should be @code{overwrite-mode-textual}, @code{overwrite-mode-binary}, or "
"@code{nil}.  @code{overwrite-mode-textual} specifies textual overwrite mode "
"(treats newlines and tabs specially), and @code{overwrite-mode-binary} "
"specifies binary overwrite mode (treats newlines and tabs like any other "
"characters)."
msgstr ""

# type: section
#: lispref/text.texi:540
#, no-wrap
msgid "Deleting Text"
msgstr ""

# type: cindex
#: lispref/text.texi:541
#, no-wrap
msgid "text deletion"
msgstr ""

# type: cindex
#: lispref/text.texi:543
#, no-wrap
msgid "deleting text vs killing"
msgstr ""

# type: Plain text
#: lispref/text.texi:549
msgid ""
"Deletion means removing part of the text in a buffer, without saving it in "
"the kill ring (@pxref{The Kill Ring}).  Deleted text can't be yanked, but "
"can be reinserted using the undo mechanism (@pxref{Undo}).  Some deletion "
"functions do save text in the kill ring in some special cases."
msgstr ""

# type: Plain text
#: lispref/text.texi:551
msgid "All of the deletion functions operate on the current buffer."
msgstr ""

# type: deffn
#: lispref/text.texi:552
#, no-wrap
msgid "Command erase-buffer"
msgstr ""

# type: deffn
#: lispref/text.texi:559
msgid ""
"This function deletes the entire text of the current buffer (@emph{not} just "
"the accessible portion), leaving it empty.  If the buffer is read-only, it "
"signals a @code{buffer-read-only} error; if some of the text in it is read-"
"only, it signals a @code{text-read-only} error.  Otherwise, it deletes the "
"text without asking for any confirmation.  It returns @code{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:565
msgid ""
"Normally, deleting a large amount of text from a buffer inhibits further "
"auto-saving of that buffer ``because it has shrunk.'' However, @code{erase-"
"buffer} does not do this, the idea being that the future text is not really "
"related to the former text, and its size should not be compared with that of "
"the former text."
msgstr ""

# type: deffn
#: lispref/text.texi:567
#, no-wrap
msgid "Command delete-region start end"
msgstr ""

# type: deffn
#: lispref/text.texi:572
msgid ""
"This command deletes the text between positions @var{start} and @var{end} in "
"the current buffer, and returns @code{nil}.  If point was inside the deleted "
"region, its value afterward is @var{start}.  Otherwise, point relocates with "
"the surrounding text, as markers do."
msgstr ""

# type: defun
#: lispref/text.texi:574
#, no-wrap
msgid "delete-and-extract-region start end"
msgstr ""

# type: defun
#: lispref/text.texi:578
msgid ""
"This function deletes the text between positions @var{start} and @var{end} "
"in the current buffer, and returns a string containing the text just deleted."
msgstr ""

# type: defun
#: lispref/text.texi:582
msgid ""
"If point was inside the deleted region, its value afterward is @var{start}.  "
"Otherwise, point relocates with the surrounding text, as markers do."
msgstr ""

# type: deffn
#: lispref/text.texi:584
#, no-wrap
msgid "Command delete-char count &optional killp"
msgstr ""

# type: deffn
#: lispref/text.texi:588
msgid ""
"This command deletes @var{count} characters directly after point, or before "
"point if @var{count} is negative.  If @var{killp} is non-@code{nil}, then it "
"saves the deleted characters in the kill ring."
msgstr ""

# type: deffn
#: lispref/text.texi:594 lispref/text.texi:609 lispref/text.texi:631
msgid ""
"In an interactive call, @var{count} is the numeric prefix argument, and @var"
"{killp} is the unprocessed prefix argument.  Therefore, if a prefix argument "
"is supplied, the text is saved in the kill ring.  If no prefix argument is "
"supplied, then one character is deleted, but not saved in the kill ring."
msgstr ""

# type: deffn
#: lispref/text.texi:596 lispref/text.texi:611 lispref/text.texi:633
msgid "The value returned is always @code{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:598
#, no-wrap
msgid "Command delete-backward-char count &optional killp"
msgstr ""

# type: cindex
#: lispref/text.texi:599
#, no-wrap
msgid "deleting previous char"
msgstr ""

# type: deffn
#: lispref/text.texi:603
msgid ""
"This command deletes @var{count} characters directly before point, or after "
"point if @var{count} is negative.  If @var{killp} is non-@code{nil}, then it "
"saves the deleted characters in the kill ring."
msgstr ""

# type: deffn
#: lispref/text.texi:613
#, no-wrap
msgid "Command backward-delete-char-untabify count &optional killp"
msgstr ""

# type: cindex
#: lispref/text.texi:614
#, no-wrap
msgid "tab deletion"
msgstr ""

# type: deffn
#: lispref/text.texi:621
msgid ""
"This command deletes @var{count} characters backward, changing tabs into "
"spaces.  When the next character to be deleted is a tab, it is first "
"replaced with the proper number of spaces to preserve alignment and then one "
"of those spaces is deleted instead of the tab.  If @var{killp} is non-@code"
"{nil}, then the command saves the deleted characters in the kill ring."
msgstr ""

# type: deffn
#: lispref/text.texi:625
msgid ""
"Conversion of tabs to spaces happens only if @var{count} is positive.  If it "
"is negative, exactly @minus{}@var{count} characters after point are deleted."
msgstr ""

# type: defopt
#: lispref/text.texi:635
#, no-wrap
msgid "backward-delete-char-untabify-method"
msgstr "backward-delete-char-untabify-method"

# type: defopt
#: lispref/text.texi:643
msgid ""
"This option specifies how @code{backward-delete-char-untabify} should deal "
"with whitespace.  Possible values include @code{untabify}, the default, "
"meaning convert a tab to many spaces and delete one; @code{hungry}, meaning "
"delete all tabs and spaces before point with one command; @code{all} meaning "
"delete all tabs, spaces and newlines before point, and @code{nil}, meaning "
"do nothing special for whitespace characters."
msgstr ""

# type: section
#: lispref/text.texi:646
#, no-wrap
msgid "User-Level Deletion Commands"
msgstr ""

# type: Plain text
#: lispref/text.texi:651
msgid ""
"This section describes higher-level commands for deleting text, commands "
"intended primarily for the user but useful also in Lisp programs."
msgstr ""

# type: deffn
#: lispref/text.texi:652
#, no-wrap
msgid "Command delete-horizontal-space &optional backward-only"
msgstr ""

# type: cindex
#: lispref/text.texi:653
#, no-wrap
msgid "deleting whitespace"
msgstr ""

# type: deffn
#: lispref/text.texi:656
msgid ""
"This function deletes all spaces and tabs around point.  It returns @code"
"{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:659
msgid ""
"If @var{backward-only} is non-@code{nil}, the function deletes spaces and "
"tabs before point, but not after point."
msgstr ""

# type: deffn
#: lispref/text.texi:663
msgid ""
"In the following examples, we call @code{delete-horizontal-space} four "
"times, once on each line, with point between the second and third characters "
"on the line each time."
msgstr ""

# type: group
#: lispref/text.texi:672
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"I @point{}thought\n"
"I @point{}     thought\n"
"We@point{} thought\n"
"Yo@point{}u thought\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: group
#: lispref/text.texi:677
#, no-wrap
msgid ""
"(delete-horizontal-space)   ; @r{Four times.}\n"
"     @result{} nil\n"
"\n"
msgstr ""

# type: group
#: lispref/text.texi:684
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"Ithought\n"
"Ithought\n"
"Wethought\n"
"You thought\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: deffn
#: lispref/text.texi:688
#, no-wrap
msgid "Command delete-indentation &optional join-following-p"
msgstr ""

# type: deffn
#: lispref/text.texi:694
msgid ""
"This function joins the line point is on to the previous line, deleting any "
"whitespace at the join and in some cases replacing it with one space.  If "
"@var{join-following-p} is non-@code{nil}, @code{delete-indentation} joins "
"this line to the following line instead.  The function returns @code{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:698
msgid ""
"If there is a fill prefix, and the second of the lines being joined starts "
"with the prefix, then @code{delete-indentation} deletes the fill prefix "
"before joining the lines.  @xref{Margins}."
msgstr ""

# type: deffn
#: lispref/text.texi:702
msgid ""
"In the example below, point is located on the line starting @samp{events}, "
"and it makes no difference if there are trailing spaces in the preceding "
"line."
msgstr ""

# type: group
#: lispref/text.texi:709
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"When in the course of human\n"
"@point{}    events, it becomes necessary\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: smallexample
#: lispref/text.texi:713
#, no-wrap
msgid ""
"(delete-indentation)\n"
"     @result{} nil\n"
"\n"
msgstr ""

# type: group
#: lispref/text.texi:718
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"When in the course of human@point{} events, it becomes necessary\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: deffn
#: lispref/text.texi:723
msgid ""
"After the lines are joined, the function @code{fixup-whitespace} is "
"responsible for deciding whether to leave a space at the junction."
msgstr ""

# type: deffn
#: lispref/text.texi:725
#, no-wrap
msgid "Command fixup-whitespace"
msgstr ""

# type: deffn
#: lispref/text.texi:729
msgid ""
"This function replaces all the horizontal whitespace surrounding point with "
"either one space or no space, according to the context.  It returns @code"
"{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:735
msgid ""
"At the beginning or end of a line, the appropriate amount of space is none.  "
"Before a character with close parenthesis syntax, or after a character with "
"open parenthesis or expression-prefix syntax, no space is also appropriate.  "
"Otherwise, one space is appropriate.  @xref{Syntax Class Table}."
msgstr ""

# type: deffn
#: lispref/text.texi:739
msgid ""
"In the example below, @code{fixup-whitespace} is called the first time with "
"point before the word @samp{spaces} in the first line.  For the second "
"invocation, point is directly after the @samp{(}."
msgstr ""

# type: group
#: lispref/text.texi:746
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This has too many     @point{}spaces\n"
"This has too many spaces at the start of (@point{}   this list)\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: group
#: lispref/text.texi:753
#, no-wrap
msgid ""
"(fixup-whitespace)\n"
"     @result{} nil\n"
"(fixup-whitespace)\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/text.texi:760
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This has too many spaces\n"
"This has too many spaces at the start of (this list)\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: deffn
#: lispref/text.texi:764
#, no-wrap
msgid "Command just-one-space &optional n"
msgstr ""

# type: deffn
#: lispref/text.texi:769
msgid ""
"This command replaces any spaces and tabs around point with a single space, "
"or @var{n} spaces if @var{n} is specified.  It returns @code{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:771
#, no-wrap
msgid "Command delete-blank-lines"
msgstr ""

# type: deffn
#: lispref/text.texi:777
msgid ""
"This function deletes blank lines surrounding point.  If point is on a blank "
"line with one or more blank lines before or after it, then all but one of "
"them are deleted.  If point is on an isolated blank line, then it is "
"deleted.  If point is on a nonblank line, the command deletes all blank "
"lines immediately following it."
msgstr ""

# type: deffn
#: lispref/text.texi:779
msgid "A blank line is defined as a line containing only tabs and spaces."
msgstr ""

# type: deffn
#: lispref/text.texi:781
msgid "@code{delete-blank-lines} returns @code{nil}."
msgstr ""

# type: cindex
#: lispref/text.texi:785
#, no-wrap
msgid "kill ring"
msgstr ""

# type: Plain text
#: lispref/text.texi:793
msgid ""
"@dfn{Kill functions} delete text like the deletion functions, but save it so "
"that the user can reinsert it by @dfn{yanking}.  Most of these functions "
"have @samp{kill-} in their name.  By contrast, the functions whose names "
"start with @samp{delete-} normally do not save text for yanking (though they "
"can still be undone); these are ``deletion'' functions."
msgstr ""

# type: Plain text
#: lispref/text.texi:801
msgid ""
"Most of the kill commands are primarily for interactive use, and are not "
"described here.  What we do describe are the functions provided for use in "
"writing such commands.  You can use these functions to write commands for "
"killing text.  When you need to delete text for internal purposes within a "
"Lisp function, you should normally use deletion functions, so as not to "
"disturb the kill ring contents.  @xref{Deletion}."
msgstr ""

# type: Plain text
#: lispref/text.texi:809
msgid ""
"Killed text is saved for later yanking in the @dfn{kill ring}.  This is a "
"list that holds a number of recent kills, not just the last text kill.  We "
"call this a ``ring'' because yanking treats it as having elements in a "
"cyclic order.  The list is kept in the variable @code{kill-ring}, and can be "
"operated on with the usual functions for lists; there are also specialized "
"functions, described in this section, that treat it as a ring."
msgstr ""

# type: Plain text
#: lispref/text.texi:818
msgid ""
"Some people think this use of the word ``kill'' is unfortunate, since it "
"refers to operations that specifically @emph{do not} destroy the entities "
"``killed.'' This is in sharp contrast to ordinary life, in which death is "
"permanent and ``killed'' entities do not come back to life.  Therefore, "
"other metaphors have been proposed.  For example, the term ``cut ring'' "
"makes sense to people who, in pre-computer days, used scissors and paste to "
"cut up and rearrange manuscripts.  However, it would be difficult to change "
"the terminology now."
msgstr ""

# type: menu
#: lispref/text.texi:826 lispref/text.texi:828 lispref/text.texi:830
#: lispref/vol1.texi:823 lispref/vol2.texi:824
#, no-wrap
msgid "Kill Ring Concepts"
msgstr ""

# type: menu
#: lispref/text.texi:826 lispref/vol1.texi:823 lispref/vol2.texi:824
msgid "What text looks like in the kill ring."
msgstr ""

# type: menu
#: lispref/text.texi:826 lispref/text.texi:855 lispref/vol1.texi:823
#: lispref/vol2.texi:824
#, no-wrap
msgid "Kill Functions"
msgstr ""

# type: menu
#: lispref/text.texi:826 lispref/vol1.texi:823 lispref/vol2.texi:824
msgid "Functions that kill text."
msgstr ""

# type: subsection
#: lispref/text.texi:826 lispref/text.texi:908 lispref/text.texi:909
#, no-wrap
msgid "Yanking"
msgstr ""

# type: menu
#: lispref/text.texi:826
msgid "How yanking is done."
msgstr ""

# type: menu
#: lispref/text.texi:826 lispref/text.texi:969 lispref/vol1.texi:823
#: lispref/vol2.texi:824
#, no-wrap
msgid "Yank Commands"
msgstr ""

# type: menu
#: lispref/text.texi:826 lispref/vol1.texi:823 lispref/vol2.texi:824
msgid "Commands that access the kill ring."
msgstr ""

# type: menu
#: lispref/text.texi:826 lispref/text.texi:1039 lispref/text.texi:1040
#: lispref/vol1.texi:823 lispref/vol2.texi:824
#, no-wrap
msgid "Low-Level Kill Ring"
msgstr ""

# type: menu
#: lispref/text.texi:826 lispref/vol1.texi:823 lispref/vol2.texi:824
msgid "Functions and variables for kill ring access."
msgstr ""

# type: menu
#: lispref/text.texi:826 lispref/text.texi:1129 lispref/vol1.texi:823
#: lispref/vol2.texi:824
#, no-wrap
msgid "Internals of Kill Ring"
msgstr ""

# type: menu
#: lispref/text.texi:826
msgid "Variables that hold kill ring data."
msgstr ""

# type: Plain text
#: lispref/text.texi:834
msgid ""
"The kill ring records killed text as strings in a list, most recent first.  "
"A short kill ring, for example, might look like this:"
msgstr ""

# type: example
#: lispref/text.texi:837
#, no-wrap
msgid "(\"some text\" \"a different piece of text\" \"even older text\")\n"
msgstr ""

# type: Plain text
#: lispref/text.texi:842
msgid ""
"When the list reaches @code{kill-ring-max} entries in length, adding a new "
"entry automatically deletes the last entry."
msgstr ""

# type: Plain text
#: lispref/text.texi:848
msgid ""
"When kill commands are interwoven with other commands, each kill command "
"makes a new entry in the kill ring.  Multiple kill commands in succession "
"build up a single kill ring entry, which would be yanked as a unit; the "
"second and subsequent consecutive kill commands add text to the entry made "
"by the first one."
msgstr ""

# type: Plain text
#: lispref/text.texi:854
msgid ""
"For yanking, one entry in the kill ring is designated the ``front'' of the "
"ring.  Some yank commands ``rotate'' the ring by designating a different "
"element as the ``front.'' But this virtual rotation doesn't change the list "
"itself---the most recent entry always comes first in the list."
msgstr ""

# type: subsection
#: lispref/text.texi:857
#, no-wrap
msgid "Functions for Killing"
msgstr ""

# type: Plain text
#: lispref/text.texi:866
msgid ""
"@code{kill-region} is the usual subroutine for killing text.  Any command "
"that calls this function is a ``kill command'' (and should probably have "
"@samp{kill} in its name).  @code{kill-region} puts the newly killed text in "
"a new element at the beginning of the kill ring or adds it to the most "
"recent element.  It determines automatically (using @code{last-command}) "
"whether the previous command was a kill command, and if so appends the "
"killed text to the most recent entry."
msgstr ""

# type: deffn
#: lispref/text.texi:867
#, no-wrap
msgid "Command kill-region start end &optional yank-handler"
msgstr ""

# type: deffn
#: lispref/text.texi:871
msgid ""
"This function kills the text in the region defined by @var{start} and @var"
"{end}.  The text is deleted but saved in the kill ring, along with its text "
"properties.  The value is always @code{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:874
msgid ""
"In an interactive call, @var{start} and @var{end} are point and the mark."
msgstr ""

# type: deffn
#: lispref/text.texi:880
msgid ""
"If the buffer or text is read-only, @code{kill-region} modifies the kill "
"ring just the same, then signals an error without modifying the buffer.  "
"This is convenient because it lets the user use a series of kill commands to "
"copy text from a read-only buffer into the kill ring."
msgstr ""

# type: deffn
#: lispref/text.texi:886
msgid ""
"If @var{yank-handler} is non-@code{nil}, this puts that value onto the "
"string of killed text, as a @code{yank-handler} text property.  @xref"
"{Yanking}.  Note that if @var{yank-handler} is @code{nil}, any @code{yank-"
"handler} properties present on the killed text are copied onto the kill "
"ring, like other text properties."
msgstr ""

# type: defopt
#: lispref/text.texi:888
#, no-wrap
msgid "kill-read-only-ok"
msgstr "kill-read-only-ok"

# type: defopt
#: lispref/text.texi:892
msgid ""
"If this option is non-@code{nil}, @code{kill-region} does not signal an "
"error if the buffer or text is read-only.  Instead, it simply returns, "
"updating the kill ring but not changing the buffer."
msgstr ""

# type: deffn
#: lispref/text.texi:894
#, no-wrap
msgid "Command copy-region-as-kill start end"
msgstr ""

# type: deffn
#: lispref/text.texi:898
msgid ""
"This command saves the region defined by @var{start} and @var{end} on the "
"kill ring (including text properties), but does not delete the text from the "
"buffer.  It returns @code{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:901
msgid ""
"The command does not set @code{this-command} to @code{kill-region}, so a "
"subsequent kill command does not append to the same kill ring entry."
msgstr ""

# type: deffn
#: lispref/text.texi:906
msgid ""
"Don't call @code{copy-region-as-kill} in Lisp programs unless you aim to "
"support Emacs 18.  For newer Emacs versions, it is better to use @code{kill-"
"new} or @code{kill-append} instead.  @xref{Low-Level Kill Ring}."
msgstr ""

# type: Plain text
#: lispref/text.texi:915
msgid ""
"Yanking means inserting text from the kill ring, but it does not insert the "
"text blindly.  Yank commands and some other commands use @code{insert-for-"
"yank} to perform special processing on the text that they copy into the "
"buffer."
msgstr ""

# type: defun
#: lispref/text.texi:916
#, no-wrap
msgid "insert-for-yank string"
msgstr ""

# type: defun
#: lispref/text.texi:922
msgid ""
"This function normally works like @code{insert} except that it doesn't "
"insert the text properties in the @code{yank-excluded-properties} list.  "
"However, if any part of @var{string} has a non-@code{nil} @code{yank-"
"handler} text property, that property can do various special processing on "
"that part of the text being inserted."
msgstr ""

# type: defun
#: lispref/text.texi:924
#, no-wrap
msgid "insert-buffer-substring-as-yank buf &optional start end"
msgstr ""

# type: defun
#: lispref/text.texi:928
msgid ""
"This function resembles @code{insert-buffer-substring} except that it "
"doesn't insert the text properties in the @code{yank-excluded-properties} "
"list."
msgstr ""

# type: Plain text
#: lispref/text.texi:935
msgid ""
"You can put a @code{yank-handler} text property on all or part of the text "
"to control how it will be inserted if it is yanked.  The @code{insert-for-"
"yank} function looks for that property.  The property value must be a list "
"of one to four elements, with the following format (where elements after the "
"first may be omitted):"
msgstr ""

# type: example
#: lispref/text.texi:938
#, no-wrap
msgid "(@var{function} @var{param} @var{noexclude} @var{undo})\n"
msgstr ""

# type: Plain text
#: lispref/text.texi:941
msgid "Here is what the elements do:"
msgstr ""

# type: table
#: lispref/text.texi:947
msgid ""
"When @var{function} is present and non-@code{nil}, it is called instead of "
"@code{insert} to insert the string.  @var{function} takes one argument---the "
"string to insert."
msgstr ""

# type: item
#: lispref/text.texi:948
#, no-wrap
msgid "param"
msgstr ""

# type: table
#: lispref/text.texi:954
msgid ""
"If @var{param} is present and non-@code{nil}, it replaces @var{string} (or "
"the part of @var{string} being processed) as the object passed to @var"
"{function} (or @code{insert}); for example, if @var{function} is @code{yank-"
"rectangle}, @var{param} should be a list of strings to insert as a rectangle."
msgstr ""

# type: item
#: lispref/text.texi:955
#, no-wrap
msgid "noexclude"
msgstr ""

# type: table
#: lispref/text.texi:960
msgid ""
"If @var{noexclude} is present and non-@code{nil}, the normal removal of the "
"yank-excluded-properties is not performed; instead @var{function} is "
"responsible for removing those properties.  This may be necessary if @var"
"{function} adjusts point before or after inserting the object."
msgstr ""

# type: item
#: lispref/text.texi:961
#, no-wrap
msgid "undo"
msgstr ""

# type: table
#: lispref/text.texi:967
msgid ""
"If @var{undo} is present and non-@code{nil}, it is a function that will be "
"called by @code{yank-pop} to undo the insertion of the current object.  It "
"is called with two arguments, the start and end of the current region.  @var"
"{function} can set @code{yank-undo-function} to override the @var{undo} "
"value."
msgstr ""

# type: subsection
#: lispref/text.texi:971
#, no-wrap
msgid "Functions for Yanking"
msgstr ""

# type: Plain text
#: lispref/text.texi:978
msgid ""
"This section describes higher-level commands for yanking, which are intended "
"primarily for the user but useful also in Lisp programs.  Both @code{yank} "
"and @code{yank-pop} honor the @code{yank-excluded-properties} variable and "
"@code{yank-handler} text property (@pxref{Yanking})."
msgstr ""

# type: deffn
#: lispref/text.texi:979
#, no-wrap
msgid "Command yank &optional arg"
msgstr ""

# type: cindex
#: lispref/text.texi:980
#, no-wrap
msgid "inserting killed text"
msgstr ""

# type: deffn
#: lispref/text.texi:984
msgid ""
"This command inserts before point the text at the front of the kill ring.  "
"It positions the mark at the beginning of that text, and point at the end."
msgstr ""

# type: deffn
#: lispref/text.texi:989
msgid ""
"If @var{arg} is a non-@code{nil} list (which occurs interactively when the "
"user types @kbd{C-u} with no digits), then @code{yank} inserts the text as "
"described above, but puts point before the yanked text and puts the mark "
"after it."
msgstr ""

# type: deffn
#: lispref/text.texi:994
msgid ""
"If @var{arg} is a number, then @code{yank} inserts the @var{arg}th most "
"recently killed text---the @var{arg}th element of the kill ring list, "
"counted cyclically from the front, which is considered the first element for "
"this purpose."
msgstr ""

# type: deffn
#: lispref/text.texi:999
msgid ""
"@code{yank} does not alter the contents of the kill ring, unless it used "
"text provided by another program, in which case it pushes that text onto the "
"kill ring.  However if @var{arg} is an integer different from one, it "
"rotates the kill ring to place the yanked string at the front."
msgstr ""

# type: deffn
#: lispref/text.texi:1001
msgid "@code{yank} returns @code{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:1003
#, no-wrap
msgid "Command yank-pop &optional arg"
msgstr ""

# type: deffn
#: lispref/text.texi:1006
msgid ""
"This command replaces the just-yanked entry from the kill ring with a "
"different entry from the kill ring."
msgstr ""

# type: deffn
#: lispref/text.texi:1014
msgid ""
"This is allowed only immediately after a @code{yank} or another @code{yank-"
"pop}.  At such a time, the region contains text that was just inserted by "
"yanking.  @code{yank-pop} deletes that text and inserts in its place a "
"different piece of killed text.  It does not add the deleted text to the "
"kill ring, since it is already in the kill ring somewhere.  It does however "
"rotate the kill ring to place the newly yanked string at the front."
msgstr ""

# type: deffn
#: lispref/text.texi:1019
msgid ""
"If @var{arg} is @code{nil}, then the replacement text is the previous "
"element of the kill ring.  If @var{arg} is numeric, the replacement is the "
"@var{arg}th previous kill.  If @var{arg} is negative, a more recent kill is "
"the replacement."
msgstr ""

# type: deffn
#: lispref/text.texi:1023
msgid ""
"The sequence of kills in the kill ring wraps around, so that after the "
"oldest one comes the newest one, and before the newest one goes the oldest."
msgstr ""

# type: deffn
#: lispref/text.texi:1025
msgid "The return value is always @code{nil}."
msgstr ""

# type: defvar
#: lispref/text.texi:1027
#, no-wrap
msgid "yank-undo-function"
msgstr ""

# type: defvar
#: lispref/text.texi:1033
msgid ""
"If this variable is non-@code{nil}, the function @code{yank-pop} uses its "
"value instead of @code{delete-region} to delete the text inserted by the "
"previous @code{yank} or @code{yank-pop} command.  The value must be a "
"function of two arguments, the start and end of the current region."
msgstr ""

# type: defvar
#: lispref/text.texi:1037
msgid ""
"The function @code{insert-for-yank} automatically sets this variable "
"according to the @var{undo} element of the @code{yank-handler} text "
"property, if there is one."
msgstr ""

# type: Plain text
#: lispref/text.texi:1046
msgid ""
"These functions and variables provide access to the kill ring at a lower "
"level, but still convenient for use in Lisp programs, because they take care "
"of interaction with window system selections (@pxref{Window System "
"Selections})."
msgstr ""

# type: defun
#: lispref/text.texi:1047
#, no-wrap
msgid "current-kill n &optional do-not-move"
msgstr ""

# type: defun
#: lispref/text.texi:1051
msgid ""
"The function @code{current-kill} rotates the yanking pointer, which "
"designates the ``front'' of the kill ring, by @var{n} places (from newer "
"kills to older ones), and returns the text at that place in the ring."
msgstr ""

# type: defun
#: lispref/text.texi:1055
msgid ""
"If the optional second argument @var{do-not-move} is non-@code{nil}, then "
"@code{current-kill} doesn't alter the yanking pointer; it just returns the "
"@var{n}th kill, counting from the current yanking pointer."
msgstr ""

# type: defun
#: lispref/text.texi:1066
msgid ""
"If @var{n} is zero, indicating a request for the latest kill, @code{current-"
"kill} calls the value of @code{interprogram-paste-function} (documented "
"below) before consulting the kill ring.  If that value is a function and "
"calling it returns a string, @code{current-kill} pushes that string onto the "
"kill ring and returns it.  It also sets the yanking pointer to point to that "
"new entry, regardless of the value of @var{do-not-move}.  Otherwise, @code"
"{current-kill} does not treat a zero value for @var{n} specially: it returns "
"the entry pointed at by the yanking pointer and does not move the yanking "
"pointer."
msgstr ""

# type: defun
#: lispref/text.texi:1068
#, no-wrap
msgid "kill-new string &optional replace yank-handler"
msgstr ""

# type: defun
#: lispref/text.texi:1073
msgid ""
"This function pushes the text @var{string} onto the kill ring and makes the "
"yanking pointer point to it.  It discards the oldest entry if appropriate.  "
"It also invokes the value of @code{interprogram-cut-function} (see below)."
msgstr ""

# type: defun
#: lispref/text.texi:1077
msgid ""
"If @var{replace} is non-@code{nil}, then @code{kill-new} replaces the first "
"element of the kill ring with @var{string}, rather than pushing @var{string} "
"onto the kill ring."
msgstr ""

# type: defun
#: lispref/text.texi:1083
msgid ""
"If @var{yank-handler} is non-@code{nil}, this puts that value onto the "
"string of killed text, as a @code{yank-handler} property.  @xref{Yanking}.  "
"Note that if @var{yank-handler} is @code{nil}, then @code{kill-new} copies "
"any @code{yank-handler} properties present on @var{string} onto the kill "
"ring, as it does with other text properties."
msgstr ""

# type: defun
#: lispref/text.texi:1085
#, no-wrap
msgid "kill-append string before-p &optional yank-handler"
msgstr ""

# type: defun
#: lispref/text.texi:1096
msgid ""
"This function appends the text @var{string} to the first entry in the kill "
"ring and makes the yanking pointer point to the combined entry.  Normally "
"@var{string} goes at the end of the entry, but if @var{before-p} is non-@code"
"{nil}, it goes at the beginning.  This function also invokes the value of "
"@code{interprogram-cut-function} (see below).  This handles @var{yank-"
"handler} just like @code{kill-new}, except that if @var{yank-handler} is "
"different from the @code{yank-handler} property of the first entry of the "
"kill ring, @code{kill-append} pushes the concatenated string onto the kill "
"ring, instead of replacing the original first entry with it."
msgstr ""

# type: defvar
#: lispref/text.texi:1098
#, no-wrap
msgid "interprogram-paste-function"
msgstr ""

# type: defvar
#: lispref/text.texi:1102
msgid ""
"This variable provides a way of transferring killed text from other "
"programs, when you are using a window system.  Its value should be @code"
"{nil} or a function of no arguments."
msgstr ""

# type: defvar
#: lispref/text.texi:1107
msgid ""
"If the value is a function, @code{current-kill} calls it to get the ``most "
"recent kill.'' If the function returns a non-@code{nil} value, then that "
"value is used as the ``most recent kill.'' If it returns @code{nil}, then "
"the front of the kill ring is used."
msgstr ""

# type: defvar
#: lispref/text.texi:1111
msgid ""
"The normal use of this hook is to get the window system's primary selection "
"as the most recent kill, even if the selection belongs to another "
"application.  @xref{Window System Selections}."
msgstr ""

# type: defvar
#: lispref/text.texi:1113
#, no-wrap
msgid "interprogram-cut-function"
msgstr ""

# type: defvar
#: lispref/text.texi:1117
msgid ""
"This variable provides a way of communicating killed text to other programs, "
"when you are using a window system.  Its value should be @code{nil} or a "
"function of one required and one optional argument."
msgstr ""

# type: defvar
#: lispref/text.texi:1123
msgid ""
"If the value is a function, @code{kill-new} and @code{kill-append} call it "
"with the new first element of the kill ring as the first argument.  The "
"second, optional, argument has the same meaning as the @var{push} argument "
"to @code{x-set-cut-buffer} (@pxref{Definition of x-set-cut-buffer}) and only "
"affects the second and later cut buffers."
msgstr ""

# type: defvar
#: lispref/text.texi:1127
msgid ""
"The normal use of this hook is to set the window system's primary selection "
"(and first cut buffer) from the newly killed text.  @xref{Window System "
"Selections}."
msgstr ""

# type: subsection
#: lispref/text.texi:1131
#, no-wrap
msgid "Internals of the Kill Ring"
msgstr ""

# type: Plain text
#: lispref/text.texi:1136
msgid ""
"The variable @code{kill-ring} holds the kill ring contents, in the form of a "
"list of strings.  The most recent kill is always at the front of the list."
msgstr ""

# type: Plain text
#: lispref/text.texi:1145
msgid ""
"The @code{kill-ring-yank-pointer} variable points to a link in the kill ring "
"list, whose @sc{car} is the text to yank next.  We say it identifies the "
"``front'' of the ring.  Moving @code{kill-ring-yank-pointer} to a different "
"link is called @dfn{rotating the kill ring}.  We call the kill ring a "
"``ring'' because the functions that move the yank pointer wrap around from "
"the end of the list to the beginning, or vice-versa.  Rotation of the kill "
"ring is virtual; it does not change the value of @code{kill-ring}."
msgstr ""

# type: Plain text
#: lispref/text.texi:1151
msgid ""
"Both @code{kill-ring} and @code{kill-ring-yank-pointer} are Lisp variables "
"whose values are normally lists.  The word ``pointer'' in the name of the "
"@code{kill-ring-yank-pointer} indicates that the variable's purpose is to "
"identify one element of the list for use by the next yank command."
msgstr ""

# type: Plain text
#: lispref/text.texi:1157
msgid ""
"The value of @code{kill-ring-yank-pointer} is always @code{eq} to one of the "
"links in the kill ring list.  The element it identifies is the @sc{car} of "
"that link.  Kill commands, which change the kill ring, also set this "
"variable to the value of @code{kill-ring}.  The effect is to rotate the ring "
"so that the newly killed text is at the front."
msgstr ""

# type: Plain text
#: lispref/text.texi:1161
msgid ""
"Here is a diagram that shows the variable @code{kill-ring-yank-pointer} "
"pointing to the second entry in the kill ring @code{(\"some text\" \"a "
"different piece of text\" \"yet older text\")}."
msgstr ""

# type: group
#: lispref/text.texi:1177
#, no-wrap
msgid ""
"kill-ring                  ---- kill-ring-yank-pointer\n"
"  |                       |\n"
"  |                       v\n"
"  |     --- ---          --- ---      --- ---\n"
"   --> |   |   |------> |   |   |--> |   |   |--> nil\n"
"        --- ---          --- ---      --- ---\n"
"         |                |            |\n"
"         |                |            |\n"
"         |                |             -->\"yet older text\"\n"
"         |                |\n"
"         |                 --> \"a different piece of text\"\n"
"         |\n"
"          --> \"some text\"\n"
msgstr ""

# type: Plain text
#: lispref/text.texi:1183
msgid ""
"This state of affairs might occur after @kbd{C-y} (@code{yank})  immediately "
"followed by @kbd{M-y} (@code{yank-pop})."
msgstr ""

# type: defvar
#: lispref/text.texi:1184
#, no-wrap
msgid "kill-ring"
msgstr ""

# type: defvar
#: lispref/text.texi:1187
msgid ""
"This variable holds the list of killed text sequences, most recently killed "
"first."
msgstr ""

# type: defvar
#: lispref/text.texi:1189
#, no-wrap
msgid "kill-ring-yank-pointer"
msgstr ""

# type: defvar
#: lispref/text.texi:1194
msgid ""
"This variable's value indicates which element of the kill ring is at the "
"``front'' of the ring for yanking.  More precisely, the value is a tail of "
"the value of @code{kill-ring}, and its @sc{car} is the kill string that @kbd"
"{C-y} should yank."
msgstr ""

# type: defopt
#: lispref/text.texi:1196
#, no-wrap
msgid "kill-ring-max"
msgstr "kill-ring-max"

# type: defopt
#: lispref/text.texi:1200
msgid ""
"The value of this variable is the maximum length to which the kill ring can "
"grow, before elements are thrown away at the end.  The default value for "
"@code{kill-ring-max} is 60."
msgstr ""

# type: cindex
#: lispref/text.texi:1205
#, no-wrap
msgid "redo"
msgstr ""

# type: Plain text
#: lispref/text.texi:1215
msgid ""
"Most buffers have an @dfn{undo list}, which records all changes made to the "
"buffer's text so that they can be undone.  (The buffers that don't have one "
"are usually special-purpose buffers for which Emacs assumes that undoing is "
"not useful.  In particular, any buffer whose name begins with a space has "
"its undo recording off by default; see @ref{Buffer Names}.)  All the "
"primitives that modify the text in the buffer automatically add elements to "
"the front of the undo list, which is in the variable @code{buffer-undo-list}."
msgstr ""

# type: defvar
#: lispref/text.texi:1219
msgid ""
"This buffer-local variable's value is the undo list of the current buffer. A "
"value of @code{t} disables the recording of undo information."
msgstr ""

# type: Plain text
#: lispref/text.texi:1222
msgid "Here are the kinds of elements an undo list can have:"
msgstr ""

# type: table
#: lispref/text.texi:1229
msgid ""
"This kind of element records a previous value of point; undoing this element "
"moves point to @var{position}.  Ordinary cursor motion does not make any "
"sort of undo record, but deletion operations use these entries to record "
"where point was before the command."
msgstr ""

# type: item
#: lispref/text.texi:1230
#, no-wrap
msgid "(@var{beg} . @var{end})"
msgstr ""

# type: table
#: lispref/text.texi:1234
msgid ""
"This kind of element indicates how to delete text that was inserted.  Upon "
"insertion, the text occupied the range @var{beg}--@var{end} in the buffer."
msgstr ""

# type: item
#: lispref/text.texi:1235
#, no-wrap
msgid "(@var{text} . @var{position})"
msgstr ""

# type: table
#: lispref/text.texi:1241
msgid ""
"This kind of element indicates how to reinsert text that was deleted.  The "
"deleted text itself is the string @var{text}.  The place to reinsert it is "
"@code{(abs @var{position})}.  If @var{position} is positive, point was at "
"the beginning of the deleted text, otherwise it was at the end."
msgstr ""

# type: item
#: lispref/text.texi:1242
#, no-wrap
msgid "(t @var{high} . @var{low})"
msgstr ""

# type: table
#: lispref/text.texi:1249
msgid ""
"This kind of element indicates that an unmodified buffer became modified.  "
"The elements @var{high} and @var{low} are two integers, each recording 16 "
"bits of the visited file's modification time as of when it was previously "
"visited or saved.  @code{primitive-undo} uses those values to determine "
"whether to mark the buffer as unmodified once again; it does so only if the "
"file's modification time matches those numbers."
msgstr ""

# type: item
#: lispref/text.texi:1250
#, no-wrap
msgid "(nil @var{property} @var{value} @var{beg} . @var{end})"
msgstr ""

# type: table
#: lispref/text.texi:1253
msgid ""
"This kind of element records a change in a text property.  Here's how you "
"might undo the change:"
msgstr ""

# type: example
#: lispref/text.texi:1256
#, no-wrap
msgid "(put-text-property @var{beg} @var{end} @var{property} @var{value})\n"
msgstr ""

# type: item
#: lispref/text.texi:1258
#, no-wrap
msgid "(@var{marker} . @var{adjustment})"
msgstr ""

# type: table
#: lispref/text.texi:1263
msgid ""
"This kind of element records the fact that the marker @var{marker} was "
"relocated due to deletion of surrounding text, and that it moved @var"
"{adjustment} character positions.  Undoing this element moves @var{marker} "
"@minus{} @var{adjustment} characters."
msgstr ""

# type: item
#: lispref/text.texi:1264
#, no-wrap
msgid "(apply @var{funname} . @var{args})"
msgstr ""

# type: table
#: lispref/text.texi:1267
msgid ""
"This is an extensible undo item, which is undone by calling @var{funname} "
"with arguments @var{args}."
msgstr ""

# type: item
#: lispref/text.texi:1268
#, no-wrap
msgid "(apply @var{delta} @var{beg} @var{end} @var{funname} . @var{args})"
msgstr ""

# type: table
#: lispref/text.texi:1273
msgid ""
"This is an extensible undo item, which records a change limited to the range "
"@var{beg} to @var{end}, which increased the size of the buffer by @var"
"{delta}.  It is undone by calling @var{funname} with arguments @var{args}."
msgstr ""

# type: table
#: lispref/text.texi:1276
msgid ""
"This kind of element enables undo limited to a region to determine whether "
"the element pertains to that region."
msgstr ""

# type: table
#: lispref/text.texi:1282
msgid ""
"This element is a boundary.  The elements between two boundaries are called "
"a @dfn{change group}; normally, each change group corresponds to one "
"keyboard command, and undo commands normally undo an entire group as a unit."
msgstr ""

# type: defun
#: lispref/text.texi:1284
#, no-wrap
msgid "undo-boundary"
msgstr ""

# type: defun
#: lispref/text.texi:1288
msgid ""
"This function places a boundary element in the undo list.  The undo command "
"stops at such a boundary, and successive undo commands undo to earlier and "
"earlier boundaries.  This function returns @code{nil}."
msgstr ""

# type: defun
#: lispref/text.texi:1296
msgid ""
"The editor command loop automatically creates an undo boundary before each "
"key sequence is executed.  Thus, each undo normally undoes the effects of "
"one command.  Self-inserting input characters are an exception.  The command "
"loop makes a boundary for the first such character; the next 19 consecutive "
"self-inserting input characters do not make boundaries, and then the 20th "
"does, and so on as long as self-inserting characters continue."
msgstr ""

# type: defun
#: lispref/text.texi:1300
msgid ""
"All buffer modifications add a boundary whenever the previous undoable "
"change was made in some other buffer.  This is to ensure that each command "
"makes a boundary in each buffer where it makes changes."
msgstr ""

# type: defun
#: lispref/text.texi:1305
msgid ""
"Calling this function explicitly is useful for splitting the effects of a "
"command into more than one unit.  For example, @code{query-replace} calls "
"@code{undo-boundary} after each replacement, so that the user can undo "
"individual replacements one by one."
msgstr ""

# type: defvar
#: lispref/text.texi:1307
#, no-wrap
msgid "undo-in-progress"
msgstr ""

# type: defvar
#: lispref/text.texi:1311
msgid ""
"This variable is normally @code{nil}, but the undo commands bind it to @code"
"{t}.  This is so that various kinds of change hooks can tell when they're "
"being called for the sake of undoing."
msgstr ""

# type: defun
#: lispref/text.texi:1313
#, no-wrap
msgid "primitive-undo count list"
msgstr ""

# type: defun
#: lispref/text.texi:1317
msgid ""
"This is the basic function for undoing elements of an undo list.  It undoes "
"the first @var{count} elements of @var{list}, returning the rest of @var"
"{list}."
msgstr ""

# type: defun
#: lispref/text.texi:1324
msgid ""
"@code{primitive-undo} adds elements to the buffer's undo list when it "
"changes the buffer.  Undo commands avoid confusion by saving the undo list "
"value at the beginning of a sequence of undo operations.  Then the undo "
"operations use and update the saved value.  The new elements added by "
"undoing are not part of this saved value, so they don't interfere with "
"continuing to undo."
msgstr ""

# type: defun
#: lispref/text.texi:1326
msgid "This function does not bind @code{undo-in-progress}."
msgstr ""

# type: section
#: lispref/text.texi:1329
#, no-wrap
msgid "Maintaining Undo Lists"
msgstr ""

# type: Plain text
#: lispref/text.texi:1334
msgid ""
"This section describes how to enable and disable undo information for a "
"given buffer.  It also explains how the undo list is truncated automatically "
"so it doesn't get too big."
msgstr ""

# type: Plain text
#: lispref/text.texi:1340
msgid ""
"Recording of undo information in a newly created buffer is normally enabled "
"to start with; but if the buffer name starts with a space, the undo "
"recording is initially disabled.  You can explicitly enable or disable undo "
"recording with the following two functions, or by setting @code{buffer-undo-"
"list} yourself."
msgstr ""

# type: deffn
#: lispref/text.texi:1341
#, no-wrap
msgid "Command buffer-enable-undo &optional buffer-or-name"
msgstr ""

# type: deffn
#: lispref/text.texi:1347
msgid ""
"This command enables recording undo information for buffer @var{buffer-or-"
"name}, so that subsequent changes can be undone.  If no argument is "
"supplied, then the current buffer is used.  This function does nothing if "
"undo recording is already enabled in the buffer.  It returns @code{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:1350
msgid ""
"In an interactive call, @var{buffer-or-name} is the current buffer.  You "
"cannot specify any other buffer."
msgstr ""

# type: deffn
#: lispref/text.texi:1352
#, no-wrap
msgid "Command buffer-disable-undo &optional buffer-or-name"
msgstr ""

# type: cindex
#: lispref/text.texi:1353
#, no-wrap
msgid "disabling undo"
msgstr ""

# type: deffn
#: lispref/text.texi:1359
msgid ""
"This function discards the undo list of @var{buffer-or-name}, and disables "
"further recording of undo information.  As a result, it is no longer "
"possible to undo either previous changes or any subsequent changes.  If the "
"undo list of @var{buffer-or-name} is already disabled, this function has no "
"effect."
msgstr ""

# type: deffn
#: lispref/text.texi:1361 lispref/windows.texi:907
msgid "This function returns @code{nil}."
msgstr ""

# type: Plain text
#: lispref/text.texi:1372
msgid ""
"As editing continues, undo lists get longer and longer.  To prevent them "
"from using up all available memory space, garbage collection trims them back "
"to size limits you can set.  (For this purpose, the ``size'' of an undo list "
"measures the cons cells that make up the list, plus the strings of deleted "
"text.)  Three variables control the range of acceptable sizes: @code{undo-"
"limit}, @code{undo-strong-limit} and @code{undo-outer-limit}.  In these "
"variables, size is counted as the number of bytes occupied, which includes "
"both saved text and other data."
msgstr ""

# type: defopt
#: lispref/text.texi:1373
#, no-wrap
msgid "undo-limit"
msgstr "undo-limit"

# type: defopt
#: lispref/text.texi:1376
msgid ""
"This is the soft limit for the acceptable size of an undo list.  The change "
"group at which this size is exceeded is the last one kept."
msgstr ""

# type: defopt
#: lispref/text.texi:1378
#, no-wrap
msgid "undo-strong-limit"
msgstr "undo-strong-limit"

# type: defopt
#: lispref/text.texi:1383
msgid ""
"This is the upper limit for the acceptable size of an undo list.  The change "
"group at which this size is exceeded is discarded itself (along with all "
"older change groups).  There is one exception: the very latest change group "
"is only discarded if it exceeds @code{undo-outer-limit}."
msgstr ""

# type: defopt
#: lispref/text.texi:1385
#, no-wrap
msgid "undo-outer-limit"
msgstr "undo-outer-limit"

# type: defopt
#: lispref/text.texi:1389
msgid ""
"If at garbage collection time the undo info for the current command exceeds "
"this limit, Emacs discards the info and displays a warning.  This is a last "
"ditch limit to prevent memory overflow."
msgstr ""

# type: defopt
#: lispref/text.texi:1391
#, no-wrap
msgid "undo-ask-before-discard"
msgstr "undo-ask-before-discard"

# type: defopt
#: lispref/text.texi:1396
msgid ""
"If this variable is non-@code{nil}, when the undo info exceeds @code{undo-"
"outer-limit}, Emacs asks in the echo area whether to discard the info.  The "
"default value is @code{nil}, which means to discard it automatically."
msgstr ""

# type: defopt
#: lispref/text.texi:1400
msgid ""
"This option is mainly intended for debugging.  Garbage collection is "
"inhibited while the question is asked, which means that Emacs might leak "
"memory if the user waits too long before answering the question."
msgstr ""

# type: cindex
#: lispref/text.texi:1405
#, no-wrap
msgid "filling text"
msgstr ""

# type: Plain text
#: lispref/text.texi:1413
msgid ""
"@dfn{Filling} means adjusting the lengths of lines (by moving the line "
"breaks) so that they are nearly (but no greater than) a specified maximum "
"width.  Additionally, lines can be @dfn{justified}, which means inserting "
"spaces to make the left and/or right margins line up precisely.  The width "
"is controlled by the variable @code{fill-column}.  For ease of reading, "
"lines should be no longer than 70 or so columns."
msgstr ""

# type: Plain text
#: lispref/text.texi:1417
msgid ""
"You can use Auto Fill mode (@pxref{Auto Filling}) to fill text automatically "
"as you insert it, but changes to existing text may leave it improperly "
"filled.  Then you must fill the text explicitly."
msgstr ""

# type: Plain text
#: lispref/text.texi:1423
msgid ""
"Most of the commands in this section return values that are not meaningful.  "
"All the functions that do filling take note of the current left margin, "
"current right margin, and current justification style (@pxref{Margins}).  If "
"the current justification style is @code{none}, the filling functions don't "
"actually do anything."
msgstr ""

# type: Plain text
#: lispref/text.texi:1431
msgid ""
"Several of the filling functions have an argument @var{justify}.  If it is "
"non-@code{nil}, that requests some kind of justification.  It can be @code"
"{left}, @code{right}, @code{full}, or @code{center}, to request a specific "
"style of justification.  If it is @code{t}, that means to use the current "
"justification style for this part of the text (see @code{current-"
"justification}, below).  Any other value is treated as @code{full}."
msgstr ""

# type: Plain text
#: lispref/text.texi:1434
msgid ""
"When you call the filling functions interactively, using a prefix argument "
"implies the value @code{full} for @var{justify}."
msgstr ""

# type: deffn
#: lispref/text.texi:1435
#, no-wrap
msgid "Command fill-paragraph justify"
msgstr ""

# type: deffn
#: lispref/text.texi:1440
msgid ""
"This command fills the paragraph at or after point.  If @var{justify} is non-"
"@code{nil}, each line is justified as well.  It uses the ordinary paragraph "
"motion commands to find paragraph boundaries.  @xref{Paragraphs,,, emacs, "
"The GNU Emacs Manual}."
msgstr ""

# type: deffn
#: lispref/text.texi:1442
#, no-wrap
msgid "Command fill-region start end &optional justify nosqueeze to-eop"
msgstr ""

# type: deffn
#: lispref/text.texi:1446
msgid ""
"This command fills each of the paragraphs in the region from @var{start} to "
"@var{end}.  It justifies as well if @var{justify} is non-@code{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:1451
msgid ""
"If @var{nosqueeze} is non-@code{nil}, that means to leave whitespace other "
"than line breaks untouched.  If @var{to-eop} is non-@code{nil}, that means "
"to keep filling to the end of the paragraph---or the next hard newline, if "
"@code{use-hard-newlines} is enabled (see below)."
msgstr ""

# type: deffn
#: lispref/text.texi:1454
msgid ""
"The variable @code{paragraph-separate} controls how to distinguish "
"paragraphs.  @xref{Standard Regexps}."
msgstr ""

# type: deffn
#: lispref/text.texi:1456
#, no-wrap
msgid "Command fill-individual-paragraphs start end &optional justify citation-regexp"
msgstr ""

# type: deffn
#: lispref/text.texi:1461
msgid ""
"This command fills each paragraph in the region according to its individual "
"fill prefix.  Thus, if the lines of a paragraph were indented with spaces, "
"the filled paragraph will remain indented in the same fashion."
msgstr ""

# type: deffn
#: lispref/text.texi:1471
msgid ""
"The first two arguments, @var{start} and @var{end}, are the beginning and "
"end of the region to be filled.  The third and fourth arguments, @var"
"{justify} and @var{citation-regexp}, are optional.  If @var{justify} is non-"
"@code{nil}, the paragraphs are justified as well as filled.  If @var"
"{citation-regexp} is non-@code{nil}, it means the function is operating on a "
"mail message and therefore should not fill the header lines.  If @var"
"{citation-regexp} is a string, it is used as a regular expression; if it "
"matches the beginning of a line, that line is treated as a citation marker."
msgstr ""

# type: deffn
#: lispref/text.texi:1477
msgid ""
"Ordinarily, @code{fill-individual-paragraphs} regards each change in "
"indentation as starting a new paragraph.  If @code{fill-individual-varying-"
"indent} is non-@code{nil}, then only separator lines separate paragraphs.  "
"That mode can handle indented paragraphs with additional indentation on the "
"first line."
msgstr ""

# type: defopt
#: lispref/text.texi:1479
#, no-wrap
msgid "fill-individual-varying-indent"
msgstr "fill-individual-varying-indent"

# type: defopt
#: lispref/text.texi:1482
msgid ""
"This variable alters the action of @code{fill-individual-paragraphs} as "
"described above."
msgstr ""

# type: deffn
#: lispref/text.texi:1484
#, no-wrap
msgid "Command fill-region-as-paragraph start end &optional justify nosqueeze squeeze-after"
msgstr ""

# type: deffn
#: lispref/text.texi:1489
msgid ""
"This command considers a region of text as a single paragraph and fills it.  "
"If the region was made up of many paragraphs, the blank lines between "
"paragraphs are removed.  This function justifies as well as filling when @var"
"{justify} is non-@code{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:1494
msgid ""
"If @var{nosqueeze} is non-@code{nil}, that means to leave whitespace other "
"than line breaks untouched.  If @var{squeeze-after} is non-@code{nil}, it "
"specifies a position in the region, and means don't canonicalize spaces "
"before that position."
msgstr ""

# type: deffn
#: lispref/text.texi:1497
msgid ""
"In Adaptive Fill mode, this command calls @code{fill-context-prefix} to "
"choose a fill prefix by default.  @xref{Adaptive Fill}."
msgstr ""

# type: deffn
#: lispref/text.texi:1499
#, no-wrap
msgid "Command justify-current-line &optional how eop nosqueeze"
msgstr ""

# type: deffn
#: lispref/text.texi:1503
msgid ""
"This command inserts spaces between the words of the current line so that "
"the line ends exactly at @code{fill-column}.  It returns @code{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:1509
msgid ""
"The argument @var{how}, if non-@code{nil} specifies explicitly the style of "
"justification.  It can be @code{left}, @code{right}, @code{full}, @code"
"{center}, or @code{none}.  If it is @code{t}, that means to do follow "
"specified justification style (see @code{current-justification}, below).  "
"@code{nil} means to do full justification."
msgstr ""

# type: deffn
#: lispref/text.texi:1514
msgid ""
"If @var{eop} is non-@code{nil}, that means do only left-justification if "
"@code{current-justification} specifies full justification.  This is used for "
"the last line of a paragraph; even if the paragraph as a whole is fully "
"justified, the last line should not be."
msgstr ""

# type: deffn
#: lispref/text.texi:1517
msgid ""
"If @var{nosqueeze} is non-@code{nil}, that means do not change interior "
"whitespace."
msgstr ""

# type: defopt
#: lispref/text.texi:1519
#, no-wrap
msgid "default-justification"
msgstr "default-justification"

# type: defopt
#: lispref/text.texi:1524
msgid ""
"This variable's value specifies the style of justification to use for text "
"that doesn't specify a style with a text property.  The possible values are "
"@code{left}, @code{right}, @code{full}, @code{center}, or @code{none}.  The "
"default value is @code{left}."
msgstr ""

# type: defun
#: lispref/text.texi:1526
#, no-wrap
msgid "current-justification"
msgstr "current-justification"

# type: defun
#: lispref/text.texi:1529
msgid ""
"This function returns the proper justification style to use for filling the "
"text around point."
msgstr ""

# type: defun
#: lispref/text.texi:1534
msgid ""
"This returns the value of the @code{justification} text property at point, "
"or the variable @var{default-justification} if there is no such text "
"property.  However, it returns @code{nil} rather than @code{none} to mean "
"``don't justify''."
msgstr ""

# type: defopt
#: lispref/text.texi:1536
#, no-wrap
msgid "sentence-end-double-space"
msgstr "sentence-end-double-space"

# type: anchor{#1}
#: lispref/text.texi:1541
msgid "Definition of sentence-end-double-space"
msgstr "Définition de sentence-end-double-space"

# type: defopt
#: lispref/text.texi:1541
msgid ""
"If this variable is non-@code{nil}, a period followed by just one space does "
"not count as the end of a sentence, and the filling functions avoid breaking "
"the line at such a place."
msgstr ""

# type: defopt
#: lispref/text.texi:1543
#, no-wrap
msgid "sentence-end-without-period"
msgstr "sentence-end-without-period"

# type: defopt
#: lispref/text.texi:1547
msgid ""
"If this variable is non-@code{nil}, a sentence can end without a period.  "
"This is used for languages like Thai, where sentences end with a double "
"space but without a period."
msgstr ""

# type: defopt
#: lispref/text.texi:1549
#, no-wrap
msgid "sentence-end-without-space"
msgstr "sentence-end-without-space"

# type: defopt
#: lispref/text.texi:1552
msgid ""
"If this variable is non-@code{nil}, it should be a string of characters that "
"can end a sentence without following spaces."
msgstr ""

# type: defvar
#: lispref/text.texi:1554
#, no-wrap
msgid "fill-paragraph-function"
msgstr "fill-paragraph-function"

# type: defvar
#: lispref/text.texi:1560
msgid ""
"This variable provides a way for major modes to override the filling of "
"paragraphs.  If the value is non-@code{nil}, @code{fill-paragraph} calls "
"this function to do the work.  If the function returns a non-@code{nil} "
"value, @code{fill-paragraph} assumes the job is done, and immediately "
"returns that value."
msgstr ""

# type: defvar
#: lispref/text.texi:1564
msgid ""
"The usual use of this feature is to fill comments in programming language "
"modes.  If the function needs to fill a paragraph in the usual way, it can "
"do so as follows:"
msgstr ""

# type: example
#: lispref/text.texi:1568
#, no-wrap
msgid ""
"(let ((fill-paragraph-function nil))\n"
"  (fill-paragraph arg))\n"
msgstr ""

# type: defvar
#: lispref/text.texi:1571
#, no-wrap
msgid "use-hard-newlines"
msgstr "use-hard-newlines"

# type: defvar
#: lispref/text.texi:1575
msgid ""
"If this variable is non-@code{nil}, the filling functions do not delete "
"newlines that have the @code{hard} text property.  These ``hard newlines'' "
"act as paragraph separators."
msgstr ""

# type: section
#: lispref/text.texi:1578
#, no-wrap
msgid "Margins for Filling"
msgstr ""

# type: defopt
#: lispref/text.texi:1589
msgid ""
"This buffer-local variable, if non-@code{nil}, specifies a string of text "
"that appears at the beginning of normal text lines and should be disregarded "
"when filling them.  Any line that fails to start with the fill prefix is "
"considered the start of a paragraph; so is any line that starts with the "
"fill prefix followed by additional whitespace.  Lines that start with the "
"fill prefix but no additional whitespace are ordinary text lines that can be "
"filled together.  The resulting filled lines also start with the fill prefix."
msgstr ""

# type: defopt
#: lispref/text.texi:1591
msgid "The fill prefix follows the left margin whitespace, if any."
msgstr ""

# type: defopt
#: lispref/text.texi:1598
msgid ""
"This buffer-local variable specifies the maximum width of filled lines.  Its "
"value should be an integer, which is a number of columns.  All the filling, "
"justification, and centering commands are affected by this variable, "
"including Auto Fill mode (@pxref{Auto Filling})."
msgstr ""

# type: defopt
#: lispref/text.texi:1603
msgid ""
"As a practical matter, if you are writing text for other people to read, you "
"should set @code{fill-column} to no more than 70.  Otherwise the line will "
"be too long for people to read comfortably, and this can make the text seem "
"clumsy."
msgstr ""

# type: defvar
#: lispref/text.texi:1605
#, no-wrap
msgid "default-fill-column"
msgstr "default-fill-column"

# type: defvar
#: lispref/text.texi:1609
msgid ""
"The value of this variable is the default value for @code{fill-column} in "
"buffers that do not override it.  This is the same as @code{(default-value "
"'fill-column)}."
msgstr ""

# type: defvar
#: lispref/text.texi:1611
msgid "The default value for @code{default-fill-column} is 70."
msgstr ""

# type: deffn
#: lispref/text.texi:1613
#, no-wrap
msgid "Command set-left-margin from to margin"
msgstr ""

# type: deffn
#: lispref/text.texi:1617
msgid ""
"This sets the @code{left-margin} property on the text from @var{from} to @var"
"{to} to the value @var{margin}.  If Auto Fill mode is enabled, this command "
"also refills the region to fit the new margin."
msgstr ""

# type: deffn
#: lispref/text.texi:1619
#, no-wrap
msgid "Command set-right-margin from to margin"
msgstr ""

# type: deffn
#: lispref/text.texi:1623
msgid ""
"This sets the @code{right-margin} property on the text from @var{from} to "
"@var{to} to the value @var{margin}.  If Auto Fill mode is enabled, this "
"command also refills the region to fit the new margin."
msgstr ""

# type: defun
#: lispref/text.texi:1625
#, no-wrap
msgid "current-left-margin"
msgstr "current-left-margin"

# type: defun
#: lispref/text.texi:1630
msgid ""
"This function returns the proper left margin value to use for filling the "
"text around point.  The value is the sum of the @code{left-margin} property "
"of the character at the start of the current line (or zero if none), and the "
"value of the variable @code{left-margin}."
msgstr ""

# type: defun
#: lispref/text.texi:1632
#, no-wrap
msgid "current-fill-column"
msgstr "current-fill-column"

# type: defun
#: lispref/text.texi:1637
msgid ""
"This function returns the proper fill column value to use for filling the "
"text around point.  The value is the value of the @code{fill-column} "
"variable, minus the value of the @code{right-margin} property of the "
"character after point."
msgstr ""

# type: deffn
#: lispref/text.texi:1639
#, no-wrap
msgid "Command move-to-left-margin &optional n force"
msgstr ""

# type: deffn
#: lispref/text.texi:1644
msgid ""
"This function moves point to the left margin of the current line.  The "
"column moved to is determined by calling the function @code{current-left-"
"margin}.  If the argument @var{n} is non-@code{nil}, @code{move-to-left-"
"margin} moves forward @var{n}@minus{}1 lines first."
msgstr ""

# type: deffn
#: lispref/text.texi:1647
msgid ""
"If @var{force} is non-@code{nil}, that says to fix the line's indentation if "
"that doesn't match the left margin value."
msgstr ""

# type: defun
#: lispref/text.texi:1649
#, no-wrap
msgid "delete-to-left-margin &optional from to"
msgstr ""

# type: defun
#: lispref/text.texi:1655
msgid ""
"This function removes left margin indentation from the text between @var"
"{from} and @var{to}.  The amount of indentation to delete is determined by "
"calling @code{current-left-margin}.  In no case does this function delete "
"non-whitespace.  If @var{from} and @var{to} are omitted, they default to the "
"whole buffer."
msgstr ""

# type: defun
#: lispref/text.texi:1657
#, no-wrap
msgid "indent-to-left-margin"
msgstr ""

# type: defun
#: lispref/text.texi:1662
msgid ""
"This function adjusts the indentation at the beginning of the current line "
"to the value specified by the variable @code{left-margin}.  (That may "
"involve either inserting or deleting whitespace.)  This function is value of "
"@code{indent-line-function} in Paragraph-Indent Text mode."
msgstr ""

# type: defvar
#: lispref/text.texi:1668
msgid ""
"This variable specifies the base left margin column.  In Fundamental mode, "
"@kbd{C-j} indents to this column.  This variable automatically becomes "
"buffer-local when set in any fashion."
msgstr ""

# type: defvar
#: lispref/text.texi:1670
#, no-wrap
msgid "fill-nobreak-predicate"
msgstr "fill-nobreak-predicate"

# type: defvar
#: lispref/text.texi:1677
msgid ""
"This variable gives major modes a way to specify not to break a line at "
"certain places.  Its value should be a list of functions.  Whenever filling "
"considers breaking the line at a certain place in the buffer, it calls each "
"of these functions with no arguments and with point located at that place.  "
"If any of the functions returns non-@code{nil}, then the line won't be "
"broken there."
msgstr ""

# type: section
#: lispref/text.texi:1680
#, no-wrap
msgid "Adaptive Fill Mode"
msgstr ""

# type: Plain text
#: lispref/text.texi:1689
msgid ""
"When @dfn{Adaptive Fill Mode} is enabled, Emacs determines the fill prefix "
"automatically from the text in each paragraph being filled rather than using "
"a predetermined value.  During filling, this fill prefix gets inserted at "
"the start of the second and subsequent lines of the paragraph as described "
"in @ref{Filling}, and in @ref{Auto Filling}."
msgstr ""

# type: defopt
#: lispref/text.texi:1690
#, no-wrap
msgid "adaptive-fill-mode"
msgstr "adaptive-fill-mode"

# type: defopt
#: lispref/text.texi:1693
msgid ""
"Adaptive Fill mode is enabled when this variable is non-@code{nil}.  It is "
"@code{t} by default."
msgstr ""

# type: defun
#: lispref/text.texi:1695
#, no-wrap
msgid "fill-context-prefix from to"
msgstr "fill-context-prefix de à"

# type: defun
#: lispref/text.texi:1704
msgid ""
"This function implements the heart of Adaptive Fill mode; it chooses a fill "
"prefix based on the text between @var{from} and @var{to}, typically the "
"start and end of a paragraph.  It does this by looking at the first two "
"lines of the paragraph, based on the variables described below."
msgstr ""

# type: defun
#: lispref/text.texi:1710
msgid ""
"Usually, this function returns the fill prefix, a string.  However, before "
"doing this, the function makes a final check (not specially mentioned in the "
"following) that a line starting with this prefix wouldn't look like the "
"start of a paragraph.  Should this happen, the function signals the anomaly "
"by returning @code{nil} instead."
msgstr ""

# type: defun
#: lispref/text.texi:1712
msgid "In detail, @code{fill-context-prefix} does this:"
msgstr ""

# type: enumerate
#: lispref/text.texi:1720
msgid ""
"It takes a candidate for the fill prefix from the first line---it tries "
"first the function in @code{adaptive-fill-function} (if any), then the "
"regular expression @code{adaptive-fill-regexp} (see below).  The first non-"
"@code{nil} result of these, or the empty string if they're both @code{nil}, "
"becomes the first line's candidate."
msgstr ""

# type: enumerate
#: lispref/text.texi:1725
msgid ""
"If the paragraph has as yet only one line, the function tests the validity "
"of the prefix candidate just found.  The function then returns the candidate "
"if it's valid, or a string of spaces otherwise.  (see the description of "
"@code{adaptive-fill-first-line-regexp} below)."
msgstr ""

# type: enumerate
#: lispref/text.texi:1729
msgid ""
"When the paragraph already has two lines, the function next looks for a "
"prefix candidate on the second line, in just the same way it did for the "
"first line.  If it doesn't find one, it returns @code{nil}."
msgstr ""

# type: enumerate
#: lispref/text.texi:1735
msgid ""
"The function now compares the two candidate prefixes heuristically: if the "
"non-whitespace characters in the line 2 candidate occur in the same order in "
"the line 1 candidate, the function returns the line 2 candidate.  Otherwise, "
"it returns the largest initial substring which is common to both candidates "
"(which might be the empty string)."
msgstr ""

# type: defopt
#: lispref/text.texi:1738
#, no-wrap
msgid "adaptive-fill-regexp"
msgstr "adaptive-fill-regexp"

# type: defopt
#: lispref/text.texi:1742
msgid ""
"Adaptive Fill mode matches this regular expression against the text starting "
"after the left margin whitespace (if any) on a line; the characters it "
"matches are that line's candidate for the fill prefix."
msgstr ""

# type: defopt
#: lispref/text.texi:1745
msgid ""
"The default value matches whitespace with certain punctuation characters "
"intermingled."
msgstr ""

# type: defopt
#: lispref/text.texi:1747
#, no-wrap
msgid "adaptive-fill-first-line-regexp"
msgstr "adaptive-fill-first-line-regexp"

# type: defopt
#: lispref/text.texi:1754
msgid ""
"Used only in one-line paragraphs, this regular expression acts as an "
"additional check of the validity of the one available candidate fill prefix: "
"the candidate must match this regular expression, or match @code{comment-"
"start-skip}.  If it doesn't, @code{fill-context-prefix} replaces the "
"candidate with a string of spaces ``of the same width'' as it."
msgstr ""

# type: defopt
#: lispref/text.texi:1759
msgid ""
"The default value of this variable is @w{@code{\"\\\\`[ \\t]*\\\\'\"}}, "
"which matches only a string of whitespace.  The effect of this default is to "
"force the fill prefixes found in one-line paragraphs always to be pure "
"whitespace."
msgstr ""

# type: defopt
#: lispref/text.texi:1761
#, no-wrap
msgid "adaptive-fill-function"
msgstr "adaptive-fill-function"

# type: defopt
#: lispref/text.texi:1767
msgid ""
"You can specify more complex ways of choosing a fill prefix automatically by "
"setting this variable to a function.  The function is called with point "
"after the left margin (if any) of a line, and it must preserve point.  It "
"should return either ``that line's'' fill prefix or @code{nil}, meaning it "
"has failed to determine a prefix."
msgstr ""

# type: cindex
#: lispref/text.texi:1772
#, no-wrap
msgid "filling, automatic"
msgstr ""

# type: cindex
#: lispref/text.texi:1773
#, no-wrap
msgid "Auto Fill mode"
msgstr ""

# type: Plain text
#: lispref/text.texi:1779
msgid ""
"Auto Fill mode is a minor mode that fills lines automatically as text is "
"inserted.  This section describes the hook used by Auto Fill mode.  For a "
"description of functions that you can call explicitly to fill and justify "
"existing text, see @ref{Filling}."
msgstr ""

# type: Plain text
#: lispref/text.texi:1782
msgid ""
"Auto Fill mode also enables the functions that change the margins and "
"justification style to refill portions of the text.  @xref{Margins}."
msgstr ""

# type: defvar
#: lispref/text.texi:1788
msgid ""
"The value of this buffer-local variable should be a function (of no "
"arguments) to be called after self-inserting a character from the table @code"
"{auto-fill-chars}.  It may be @code{nil}, in which case nothing special is "
"done in that case."
msgstr ""

# type: defvar
#: lispref/text.texi:1792
msgid ""
"The value of @code{auto-fill-function} is @code{do-auto-fill} when Auto-Fill "
"mode is enabled.  That is a function whose sole purpose is to implement the "
"usual strategy for breaking a line."
msgstr ""

# type: quotation
#: lispref/text.texi:1797
msgid ""
"In older Emacs versions, this variable was named @code{auto-fill-hook}, but "
"since it is not called with the standard convention for hooks, it was "
"renamed to @code{auto-fill-function} in version 19."
msgstr ""

# type: defvar
#: lispref/text.texi:1800
#, no-wrap
msgid "normal-auto-fill-function"
msgstr "normal-auto-fill-function"

# type: defvar
#: lispref/text.texi:1805
msgid ""
"This variable specifies the function to use for @code{auto-fill-function}, "
"if and when Auto Fill is turned on.  Major modes can set buffer-local values "
"for this variable to alter how Auto Fill works."
msgstr ""

# type: defvar
#: lispref/text.texi:1807
#, no-wrap
msgid "auto-fill-chars"
msgstr "auto-fill-chars"

# type: defvar
#: lispref/text.texi:1811
msgid ""
"A char table of characters which invoke @code{auto-fill-function} when self-"
"inserted---space and newline in most language environments.  They have an "
"entry @code{t} in the table."
msgstr ""

# type: section
#: lispref/text.texi:1814
#, no-wrap
msgid "Sorting Text"
msgstr ""

# type: cindex
#: lispref/text.texi:1815
#, no-wrap
msgid "sorting text"
msgstr ""

# type: Plain text
#: lispref/text.texi:1821
msgid ""
"The sorting functions described in this section all rearrange text in a "
"buffer.  This is in contrast to the function @code{sort}, which rearranges "
"the order of the elements of a list (@pxref{Rearrangement}).  The values "
"returned by these functions are not meaningful."
msgstr ""

# type: defun
#: lispref/text.texi:1822
#, no-wrap
msgid "sort-subr reverse nextrecfun endrecfun &optional startkeyfun endkeyfun predicate"
msgstr ""

# type: defun
#: lispref/text.texi:1826
msgid ""
"This function is the general text-sorting routine that subdivides a buffer "
"into records and then sorts them.  Most of the commands in this section use "
"this function."
msgstr ""

# type: defun
#: lispref/text.texi:1833
msgid ""
"To understand how @code{sort-subr} works, consider the whole accessible "
"portion of the buffer as being divided into disjoint pieces called @dfn{sort "
"records}.  The records may or may not be contiguous, but they must not "
"overlap.  A portion of each sort record (perhaps all of it) is designated as "
"the sort key.  Sorting rearranges the records in order by their sort keys."
msgstr ""

# type: defun
#: lispref/text.texi:1838
msgid ""
"Usually, the records are rearranged in order of ascending sort key.  If the "
"first argument to the @code{sort-subr} function, @var{reverse}, is non-@code"
"{nil}, the sort records are rearranged in order of descending sort key."
msgstr ""

# type: defun
#: lispref/text.texi:1842
msgid ""
"The next four arguments to @code{sort-subr} are functions that are called to "
"move point across a sort record.  They are called many times from within "
"@code{sort-subr}."
msgstr ""

# type: enumerate
#: lispref/text.texi:1850
msgid ""
"@var{nextrecfun} is called with point at the end of a record.  This function "
"moves point to the start of the next record.  The first record is assumed to "
"start at the position of point when @code{sort-subr} is called.  Therefore, "
"you should usually move point to the beginning of the buffer before calling "
"@code{sort-subr}."
msgstr ""

# type: enumerate
#: lispref/text.texi:1853
msgid ""
"This function can indicate there are no more sort records by leaving point "
"at the end of the buffer."
msgstr ""

# type: enumerate
#: lispref/text.texi:1857
msgid ""
"@var{endrecfun} is called with point within a record.  It moves point to the "
"end of the record."
msgstr ""

# type: enumerate
#: lispref/text.texi:1866
msgid ""
"@var{startkeyfun} is called to move point from the start of a record to the "
"start of the sort key.  This argument is optional; if it is omitted, the "
"whole record is the sort key.  If supplied, the function should either "
"return a non-@code{nil} value to be used as the sort key, or return @code"
"{nil} to indicate that the sort key is in the buffer starting at point.  In "
"the latter case, @var{endkeyfun} is called to find the end of the sort key."
msgstr ""

# type: enumerate
#: lispref/text.texi:1874
msgid ""
"@var{endkeyfun} is called to move point from the start of the sort key to "
"the end of the sort key.  This argument is optional.  If @var{startkeyfun} "
"returns @code{nil} and this argument is omitted (or @code{nil}), then the "
"sort key extends to the end of the record.  There is no need for @var"
"{endkeyfun} if @var{startkeyfun} returns a non-@code{nil} value."
msgstr ""

# type: defun
#: lispref/text.texi:1879
msgid ""
"The argument @var{predicate} is the function to use to compare keys.  If "
"keys are numbers, it defaults to @code{<}; otherwise it defaults to @code"
"{string<}."
msgstr ""

# type: defun
#: lispref/text.texi:1882
msgid ""
"As an example of @code{sort-subr}, here is the complete function definition "
"for @code{sort-lines}:"
msgstr ""

# type: group
#: lispref/text.texi:1891
#, no-wrap
msgid ""
";; @r{Note that the first two lines of doc string}\n"
";; @r{are effectively one line when viewed by a user.}\n"
"(defun sort-lines (reverse beg end)\n"
"  \"Sort lines in region alphabetically;\\\n"
" argument means descending order.\n"
"Called from a program, there are three arguments:\n"
msgstr ""

# type: group
#: lispref/text.texi:1898
#, no-wrap
msgid ""
"REVERSE (non-nil means reverse order),\\\n"
" BEG and END (region to sort).\n"
"The variable `sort-fold-case' determines\\\n"
" whether alphabetic case affects\n"
"the sort order.\"\n"
msgstr ""

# type: group
#: lispref/text.texi:1907
#, no-wrap
msgid ""
"  (interactive \"P\\nr\")\n"
"  (save-excursion\n"
"    (save-restriction\n"
"      (narrow-to-region beg end)\n"
"      (goto-char (point-min))\n"
"      (let ((inhibit-field-text-motion t))\n"
"        (sort-subr reverse 'forward-line 'end-of-line)))))\n"
msgstr ""

# type: defun
#: lispref/text.texi:1914
msgid ""
"Here @code{forward-line} moves point to the start of the next record, and "
"@code{end-of-line} moves point to the end of record.  We do not pass the "
"arguments @var{startkeyfun} and @var{endkeyfun}, because the entire record "
"is used as the sort key."
msgstr ""

# type: defun
#: lispref/text.texi:1917
msgid ""
"The @code{sort-paragraphs} function is very much the same, except that its "
"@code{sort-subr} call looks like this:"
msgstr ""

# type: group
#: lispref/text.texi:1927
#, no-wrap
msgid ""
"(sort-subr reverse\n"
"           (function\n"
"             (lambda ()\n"
"               (while (and (not (eobp))\n"
"                      (looking-at paragraph-separate))\n"
"                 (forward-line 1))))\n"
"           'forward-paragraph)\n"
msgstr ""

# type: defun
#: lispref/text.texi:1932
msgid ""
"Markers pointing into any sort records are left with no useful position "
"after @code{sort-subr} returns."
msgstr ""

# type: defopt
#: lispref/text.texi:1934
#, no-wrap
msgid "sort-fold-case"
msgstr "sort-fold-case"

# type: defopt
#: lispref/text.texi:1937
msgid ""
"If this variable is non-@code{nil}, @code{sort-subr} and the other buffer "
"sorting functions ignore case when comparing strings."
msgstr ""

# type: deffn
#: lispref/text.texi:1939
#, no-wrap
msgid "Command sort-regexp-fields reverse record-regexp key-regexp start end"
msgstr ""

# type: deffn
#: lispref/text.texi:1944
msgid ""
"This command sorts the region between @var{start} and @var{end} "
"alphabetically as specified by @var{record-regexp} and @var{key-regexp}.  If "
"@var{reverse} is a negative integer, then sorting is in reverse order."
msgstr ""

# type: deffn
#: lispref/text.texi:1951
msgid ""
"Alphabetical sorting means that two sort keys are compared by comparing the "
"first characters of each, the second characters of each, and so on.  If a "
"mismatch is found, it means that the sort keys are unequal; the sort key "
"whose character is less at the point of first mismatch is the lesser sort "
"key.  The individual characters are compared according to their numerical "
"character codes in the Emacs character set."
msgstr ""

# type: deffn
#: lispref/text.texi:1959
msgid ""
"The value of the @var{record-regexp} argument specifies how to divide the "
"buffer into sort records.  At the end of each record, a search is done for "
"this regular expression, and the text that matches it is taken as the next "
"record.  For example, the regular expression @samp{^.+$}, which matches "
"lines with at least one character besides a newline, would make each such "
"line into a sort record.  @xref{Regular Expressions}, for a description of "
"the syntax and meaning of regular expressions."
msgstr ""

# type: deffn
#: lispref/text.texi:1965
msgid ""
"The value of the @var{key-regexp} argument specifies what part of each "
"record is the sort key.  The @var{key-regexp} could match the whole record, "
"or only a part.  In the latter case, the rest of the record has no effect on "
"the sorted order of records, but it is carried along when the record moves "
"to its new position."
msgstr ""

# type: deffn
#: lispref/text.texi:1969
msgid ""
"The @var{key-regexp} argument can refer to the text matched by a "
"subexpression of @var{record-regexp}, or it can be a regular expression on "
"its own."
msgstr ""

# type: deffn
#: lispref/text.texi:1971
msgid "If @var{key-regexp} is:"
msgstr ""

# type: table
#: lispref/text.texi:1976
msgid ""
"then the text matched by the @var{digit}th @samp{\\(...\\)} parenthesis "
"grouping in @var{record-regexp} is the sort key."
msgstr ""

# type: table
#: lispref/text.texi:1979
msgid "then the whole record is the sort key."
msgstr ""

# type: item
#: lispref/text.texi:1980
#, no-wrap
msgid "a regular expression"
msgstr ""

# type: table
#: lispref/text.texi:1986
msgid ""
"then @code{sort-regexp-fields} searches for a match for the regular "
"expression within the record.  If such a match is found, it is the sort "
"key.  If there is no match for @var{key-regexp} within a record then that "
"record is ignored, which means its position in the buffer is not changed.  "
"(The other records may move around it.)"
msgstr ""

# type: deffn
#: lispref/text.texi:1992
msgid ""
"For example, if you plan to sort all the lines in the region by the first "
"word on each line starting with the letter @samp{f}, you should set @var"
"{record-regexp} to @samp{^.*$} and set @var{key-regexp} to @samp{\\<f\\w*"
"\\>}.  The resulting expression looks like this:"
msgstr ""

# type: group
#: lispref/text.texi:1998
#, no-wrap
msgid ""
"(sort-regexp-fields nil \"^.*$\" \"\\\\<f\\\\w*\\\\>\"\n"
"                    (region-beginning)\n"
"                    (region-end))\n"
msgstr ""

# type: deffn
#: lispref/text.texi:2003
msgid ""
"If you call @code{sort-regexp-fields} interactively, it prompts for @var"
"{record-regexp} and @var{key-regexp} in the minibuffer."
msgstr ""

# type: deffn
#: lispref/text.texi:2005
#, no-wrap
msgid "Command sort-lines reverse start end"
msgstr ""

# type: deffn
#: lispref/text.texi:2009
msgid ""
"This command alphabetically sorts lines in the region between @var{start} "
"and @var{end}.  If @var{reverse} is non-@code{nil}, the sort is in reverse "
"order."
msgstr ""

# type: deffn
#: lispref/text.texi:2011
#, no-wrap
msgid "Command sort-paragraphs reverse start end"
msgstr ""

# type: deffn
#: lispref/text.texi:2015
msgid ""
"This command alphabetically sorts paragraphs in the region between @var"
"{start} and @var{end}.  If @var{reverse} is non-@code{nil}, the sort is in "
"reverse order."
msgstr ""

# type: deffn
#: lispref/text.texi:2017
#, no-wrap
msgid "Command sort-pages reverse start end"
msgstr ""

# type: deffn
#: lispref/text.texi:2021
msgid ""
"This command alphabetically sorts pages in the region between @var{start} "
"and @var{end}.  If @var{reverse} is non-@code{nil}, the sort is in reverse "
"order."
msgstr ""

# type: deffn
#: lispref/text.texi:2023
#, no-wrap
msgid "Command sort-fields field start end"
msgstr ""

# type: deffn
#: lispref/text.texi:2030
msgid ""
"This command sorts lines in the region between @var{start} and @var{end}, "
"comparing them alphabetically by the @var{field}th field of each line.  "
"Fields are separated by whitespace and numbered starting from 1.  If @var"
"{field} is negative, sorting is by the @w{@minus{}@var{field}th} field from "
"the end of the line.  This command is useful for sorting tables."
msgstr ""

# type: deffn
#: lispref/text.texi:2032
#, no-wrap
msgid "Command sort-numeric-fields field start end"
msgstr ""

# type: deffn
#: lispref/text.texi:2039
msgid ""
"This command sorts lines in the region between @var{start} and @var{end}, "
"comparing them numerically by the @var{field}th field of each line.  Fields "
"are separated by whitespace and numbered starting from 1.  The specified "
"field must contain a number in each line of the region.  Numbers starting "
"with 0 are treated as octal, and numbers starting with @samp{0x} are treated "
"as hexadecimal."
msgstr ""

# type: deffn
#: lispref/text.texi:2043
msgid ""
"If @var{field} is negative, sorting is by the @w{@minus{}@var{field}th} "
"field from the end of the line.  This command is useful for sorting tables."
msgstr ""

# type: defopt
#: lispref/text.texi:2045
#, no-wrap
msgid "sort-numeric-base"
msgstr "sort-numeric-base"

# type: defopt
#: lispref/text.texi:2048
msgid ""
"This variable specifies the default radix for @code{sort-numeric-fields} to "
"parse numbers."
msgstr ""

# type: deffn
#: lispref/text.texi:2050
#, no-wrap
msgid "Command sort-columns reverse &optional beg end"
msgstr ""

# type: deffn
#: lispref/text.texi:2055
msgid ""
"This command sorts the lines in the region between @var{beg} and @var{end}, "
"comparing them alphabetically by a certain range of columns.  The column "
"positions of @var{beg} and @var{end} bound the range of columns to sort on."
msgstr ""

# type: deffn
#: lispref/text.texi:2057
msgid "If @var{reverse} is non-@code{nil}, the sort is in reverse order."
msgstr ""

# type: deffn
#: lispref/text.texi:2061
msgid ""
"One unusual thing about this command is that the entire line containing "
"position @var{beg}, and the entire line containing position @var{end}, are "
"included in the region sorted."
msgstr ""

# type: deffn
#: lispref/text.texi:2065
msgid ""
"Note that @code{sort-columns} rejects text that contains tabs, because tabs "
"could be split across the specified columns.  Use @kbd{M-x untabify} to "
"convert tabs to spaces before sorting."
msgstr ""

# type: deffn
#: lispref/text.texi:2068
msgid ""
"When possible, this command actually works by calling the @code{sort} "
"utility program."
msgstr ""

# type: section
#: lispref/text.texi:2072
#, no-wrap
msgid "Counting Columns"
msgstr ""

# type: cindex
#: lispref/text.texi:2073
#, no-wrap
msgid "columns"
msgstr ""

# type: cindex
#: lispref/text.texi:2074
#, no-wrap
msgid "counting columns"
msgstr ""

# type: cindex
#: lispref/text.texi:2075
#, no-wrap
msgid "horizontal position"
msgstr ""

# type: Plain text
#: lispref/text.texi:2080
msgid ""
"The column functions convert between a character position (counting "
"characters from the beginning of the buffer) and a column position (counting "
"screen characters from the beginning of a line)."
msgstr ""

# type: Plain text
#: lispref/text.texi:2087
msgid ""
"These functions count each character according to the number of columns it "
"occupies on the screen.  This means control characters count as occupying 2 "
"or 4 columns, depending upon the value of @code{ctl-arrow}, and tabs count "
"as occupying a number of columns that depends on the value of @code{tab-"
"width} and on the column where the tab begins.  @xref{Usual Display}."
msgstr ""

# type: Plain text
#: lispref/text.texi:2092
msgid ""
"Column number computations ignore the width of the window and the amount of "
"horizontal scrolling.  Consequently, a column value can be arbitrarily "
"high.  The first (or leftmost) column is numbered 0.  They also ignore "
"overlays and text properties, aside from invisibility."
msgstr ""

# type: defun
#: lispref/text.texi:2093
#, no-wrap
msgid "current-column"
msgstr ""

# type: defun
#: lispref/text.texi:2098
msgid ""
"This function returns the horizontal position of point, measured in columns, "
"counting from 0 at the left margin.  The column position is the sum of the "
"widths of all the displayed representations of the characters between the "
"start of the current line and point."
msgstr ""

# type: defun
#: lispref/text.texi:2101
msgid ""
"For an example of using @code{current-column}, see the description of @code"
"{count-lines} in @ref{Text Lines}."
msgstr ""

# type: defun
#: lispref/text.texi:2103
#, no-wrap
msgid "move-to-column column &optional force"
msgstr ""

# type: defun
#: lispref/text.texi:2108
msgid ""
"This function moves point to @var{column} in the current line.  The "
"calculation of @var{column} takes into account the widths of the displayed "
"representations of the characters between the start of the line and point."
msgstr ""

# type: defun
#: lispref/text.texi:2112
msgid ""
"If column @var{column} is beyond the end of the line, point moves to the end "
"of the line.  If @var{column} is negative, point moves to the beginning of "
"the line."
msgstr ""

# type: defun
#: lispref/text.texi:2120
msgid ""
"If it is impossible to move to column @var{column} because that is in the "
"middle of a multicolumn character such as a tab, point moves to the end of "
"that character.  However, if @var{force} is non-@code{nil}, and @var{column} "
"is in the middle of a tab, then @code{move-to-column} converts the tab into "
"spaces so that it can move precisely to column @var{column}.  Other "
"multicolumn characters can cause anomalies despite @var{force}, since there "
"is no way to split them."
msgstr ""

# type: defun
#: lispref/text.texi:2124
msgid ""
"The argument @var{force} also has an effect if the line isn't long enough to "
"reach column @var{column}; if it is @code{t}, that means to add whitespace "
"at the end of the line to reach that column."
msgstr ""

# type: defun
#: lispref/text.texi:2126
msgid "If @var{column} is not an integer, an error is signaled."
msgstr ""

# type: defun
#: lispref/text.texi:2128
msgid "The return value is the column number actually moved to."
msgstr ""

# type: cindex
#: lispref/text.texi:2132
#, no-wrap
msgid "indentation"
msgstr ""

# type: Plain text
#: lispref/text.texi:2138
msgid ""
"The indentation functions are used to examine, move to, and change "
"whitespace that is at the beginning of a line.  Some of the functions can "
"also change whitespace elsewhere on a line.  Columns and indentation count "
"from zero at the left margin."
msgstr ""

# type: menu
#: lispref/text.texi:2146 lispref/text.texi:2148 lispref/vol1.texi:832
#: lispref/vol2.texi:833
#, no-wrap
msgid "Primitive Indent"
msgstr ""

# type: menu
#: lispref/text.texi:2146 lispref/vol1.texi:832 lispref/vol2.texi:833
msgid "Functions used to count and insert indentation."
msgstr ""

# type: menu
#: lispref/text.texi:2146 lispref/text.texi:2186 lispref/vol1.texi:832
#: lispref/vol2.texi:833
#, no-wrap
msgid "Mode-Specific Indent"
msgstr ""

# type: menu
#: lispref/text.texi:2146 lispref/vol1.texi:832 lispref/vol2.texi:833
msgid "Customize indentation for different modes."
msgstr ""

# type: menu
#: lispref/text.texi:2146 lispref/text.texi:2242 lispref/vol1.texi:832
#: lispref/vol2.texi:833
#, no-wrap
msgid "Region Indent"
msgstr ""

# type: menu
#: lispref/text.texi:2146 lispref/vol1.texi:832 lispref/vol2.texi:833
msgid "Indent all the lines in a region."
msgstr ""

# type: menu
#: lispref/text.texi:2146 lispref/text.texi:2310 lispref/vol1.texi:832
#: lispref/vol2.texi:833
#, no-wrap
msgid "Relative Indent"
msgstr ""

# type: menu
#: lispref/text.texi:2146 lispref/vol1.texi:832 lispref/vol2.texi:833
msgid "Indent the current line based on previous lines."
msgstr ""

# type: menu
#: lispref/text.texi:2146 lispref/text.texi:2387 lispref/vol1.texi:832
#: lispref/vol2.texi:833
#, no-wrap
msgid "Indent Tabs"
msgstr ""

# type: menu
#: lispref/text.texi:2146 lispref/vol1.texi:832 lispref/vol2.texi:833
msgid "Adjustable, typewriter-like tab stops."
msgstr ""

# type: menu
#: lispref/text.texi:2146 lispref/text.texi:2419 lispref/vol1.texi:832
#: lispref/vol2.texi:833
#, no-wrap
msgid "Motion by Indent"
msgstr ""

# type: menu
#: lispref/text.texi:2146 lispref/vol1.texi:832 lispref/vol2.texi:833
msgid "Move to first non-blank character."
msgstr ""

# type: subsection
#: lispref/text.texi:2149
#, no-wrap
msgid "Indentation Primitives"
msgstr ""

# type: Plain text
#: lispref/text.texi:2154
msgid ""
"This section describes the primitive functions used to count and insert "
"indentation.  The functions in the following sections use these primitives.  "
"@xref{Width}, for related functions."
msgstr ""

# type: defun
#: lispref/text.texi:2155
#, no-wrap
msgid "current-indentation"
msgstr ""

# type: defun
#: lispref/text.texi:2162
msgid ""
"This function returns the indentation of the current line, which is the "
"horizontal position of the first nonblank character.  If the contents are "
"entirely blank, then this is the horizontal position of the end of the line."
msgstr ""

# type: deffn
#: lispref/text.texi:2164
#, no-wrap
msgid "Command indent-to column &optional minimum"
msgstr ""

# type: deffn
#: lispref/text.texi:2173
msgid ""
"This function indents from point with tabs and spaces until @var{column} is "
"reached.  If @var{minimum} is specified and non-@code{nil}, then at least "
"that many spaces are inserted even if this requires going beyond @var"
"{column}.  Otherwise the function does nothing if point is already beyond "
"@var{column}.  The value is the column at which the inserted indentation "
"ends."
msgstr ""

# type: deffn
#: lispref/text.texi:2177
msgid ""
"The inserted whitespace characters inherit text properties from the "
"surrounding text (usually, from the preceding text only).  @xref{Sticky "
"Properties}."
msgstr ""

# type: defopt
#: lispref/text.texi:2179
#, no-wrap
msgid "indent-tabs-mode"
msgstr "indent-tabs-mode"

# type: defopt
#: lispref/text.texi:2184
msgid ""
"If this variable is non-@code{nil}, indentation functions can insert tabs as "
"well as spaces.  Otherwise, they insert only spaces.  Setting this variable "
"automatically makes it buffer-local in the current buffer."
msgstr ""

# type: subsection
#: lispref/text.texi:2187
#, no-wrap
msgid "Indentation Controlled by Major Mode"
msgstr ""

# type: Plain text
#: lispref/text.texi:2193
msgid ""
"An important function of each major mode is to customize the @key{TAB} key "
"to indent properly for the language being edited.  This section describes "
"the mechanism of the @key{TAB} key and how to control it.  The functions in "
"this section return unpredictable values."
msgstr ""

# type: defvar
#: lispref/text.texi:2194
#, no-wrap
msgid "indent-line-function"
msgstr "indent-line-function"

# type: defvar
#: lispref/text.texi:2198
msgid ""
"This variable's value is the function to be used by @key{TAB} (and various "
"commands) to indent the current line.  The command @code{indent-according-to-"
"mode} does no more than call this function."
msgstr ""

# type: defvar
#: lispref/text.texi:2202
msgid ""
"In Lisp mode, the value is the symbol @code{lisp-indent-line}; in C mode, "
"@code{c-indent-line}; in Fortran mode, @code{fortran-indent-line}.  The "
"default value is @code{indent-relative}."
msgstr ""

# type: deffn
#: lispref/text.texi:2204
#, no-wrap
msgid "Command indent-according-to-mode"
msgstr ""

# type: deffn
#: lispref/text.texi:2207
msgid ""
"This command calls the function in @code{indent-line-function} to indent the "
"current line in a way appropriate for the current major mode."
msgstr ""

# type: deffn
#: lispref/text.texi:2209
#, no-wrap
msgid "Command indent-for-tab-command"
msgstr ""

# type: deffn
#: lispref/text.texi:2214
msgid ""
"This command calls the function in @code{indent-line-function} to indent the "
"current line; however, if that function is @code{indent-to-left-margin}, "
"@code{insert-tab} is called instead.  (That is a trivial command that "
"inserts a tab character.)"
msgstr ""

# type: deffn
#: lispref/text.texi:2216
#, no-wrap
msgid "Command newline-and-indent"
msgstr ""

# type: deffn
#: lispref/text.texi:2220
msgid ""
"This function inserts a newline, then indents the new line (the one "
"following the newline just inserted) according to the major mode."
msgstr ""

# type: deffn
#: lispref/text.texi:2226
msgid ""
"It does indentation by calling the current @code{indent-line-function}.  In "
"programming language modes, this is the same thing @key{TAB} does, but in "
"some text modes, where @key{TAB} inserts a tab, @code{newline-and-indent} "
"indents to the column specified by @code{left-margin}."
msgstr ""

# type: deffn
#: lispref/text.texi:2228
#, no-wrap
msgid "Command reindent-then-newline-and-indent"
msgstr ""

# type: deffn
#: lispref/text.texi:2233
msgid ""
"This command reindents the current line, inserts a newline at point, and "
"then indents the new line (the one following the newline just inserted)."
msgstr ""

# type: deffn
#: lispref/text.texi:2240
msgid ""
"This command does indentation on both lines according to the current major "
"mode, by calling the current value of @code{indent-line-function}.  In "
"programming language modes, this is the same thing @key{TAB} does, but in "
"some text modes, where @key{TAB} inserts a tab, @code{reindent-then-newline-"
"and-indent} indents to the column specified by @code{left-margin}."
msgstr ""

# type: subsection
#: lispref/text.texi:2243
#, no-wrap
msgid "Indenting an Entire Region"
msgstr ""

# type: Plain text
#: lispref/text.texi:2247
msgid ""
"This section describes commands that indent all the lines in the region.  "
"They return unpredictable values."
msgstr ""

# type: deffn
#: lispref/text.texi:2248
#, no-wrap
msgid "Command indent-region start end to-column"
msgstr ""

# type: deffn
#: lispref/text.texi:2254
msgid ""
"This command indents each nonblank line starting between @var{start} "
"(inclusive) and @var{end} (exclusive).  If @var{to-column} is @code{nil}, "
"@code{indent-region} indents each nonblank line by calling the current "
"mode's indentation function, the value of @code{indent-line-function}."
msgstr ""

# type: deffn
#: lispref/text.texi:2259
msgid ""
"If @var{to-column} is non-@code{nil}, it should be an integer specifying the "
"number of columns of indentation; then this function gives each line exactly "
"that much indentation, by either adding or deleting whitespace."
msgstr ""

# type: deffn
#: lispref/text.texi:2262
msgid ""
"If there is a fill prefix, @code{indent-region} indents each line by making "
"it start with the fill prefix."
msgstr ""

# type: defvar
#: lispref/text.texi:2264
#, no-wrap
msgid "indent-region-function"
msgstr "indent-region-function"

# type: defvar
#: lispref/text.texi:2270
msgid ""
"The value of this variable is a function that can be used by @code{indent-"
"region} as a short cut.  It should take two arguments, the start and end of "
"the region.  You should design the function so that it will produce the same "
"results as indenting the lines of the region one by one, but presumably "
"faster."
msgstr ""

# type: defvar
#: lispref/text.texi:2273
msgid ""
"If the value is @code{nil}, there is no short cut, and @code{indent-region} "
"actually works line by line."
msgstr ""

# type: defvar
#: lispref/text.texi:2280
msgid ""
"A short-cut function is useful in modes such as C mode and Lisp mode, where "
"the @code{indent-line-function} must scan from the beginning of the function "
"definition: applying it to each line would be quadratic in time.  The short "
"cut can update the scan information as it moves through the lines indenting "
"them; this takes linear time.  In a mode where indenting a line individually "
"is fast, there is no need for a short cut."
msgstr ""

# type: defvar
#: lispref/text.texi:2283
msgid ""
"@code{indent-region} with a non-@code{nil} argument @var{to-column} has a "
"different meaning and does not use this variable."
msgstr ""

# type: deffn
#: lispref/text.texi:2285
#, no-wrap
msgid "Command indent-rigidly start end count"
msgstr ""

# type: deffn
#: lispref/text.texi:2293
msgid ""
"This command indents all lines starting between @var{start} (inclusive) and "
"@var{end} (exclusive) sideways by @var{count} columns.  This ``preserves the "
"shape'' of the affected region, moving it as a rigid unit.  Consequently, "
"this command is useful not only for indenting regions of unindented text, "
"but also for indenting regions of formatted code."
msgstr ""

# type: deffn
#: lispref/text.texi:2296
msgid ""
"For example, if @var{count} is 3, this command adds 3 columns of indentation "
"to each of the lines beginning in the region specified."
msgstr ""

# type: deffn
#: lispref/text.texi:2300
msgid ""
"In Mail mode, @kbd{C-c C-y} (@code{mail-yank-original}) uses @code{indent-"
"rigidly} to indent the text copied from the message being replied to."
msgstr ""

# type: defun
#: lispref/text.texi:2302
#, no-wrap
msgid "indent-code-rigidly start end columns &optional nochange-regexp"
msgstr ""

# type: defun
#: lispref/text.texi:2305
msgid ""
"This is like @code{indent-rigidly}, except that it doesn't alter lines that "
"start within strings or comments."
msgstr ""

# type: defun
#: lispref/text.texi:2308
msgid ""
"In addition, it doesn't alter a line if @var{nochange-regexp} matches at the "
"beginning of the line (if @var{nochange-regexp} is non-@code{nil})."
msgstr ""

# type: subsection
#: lispref/text.texi:2311
#, no-wrap
msgid "Indentation Relative to Previous Lines"
msgstr ""

# type: Plain text
#: lispref/text.texi:2315
msgid ""
"This section describes two commands that indent the current line based on "
"the contents of previous lines."
msgstr ""

# type: deffn
#: lispref/text.texi:2316
#, no-wrap
msgid "Command indent-relative &optional unindented-ok"
msgstr ""

# type: deffn
#: lispref/text.texi:2324
msgid ""
"This command inserts whitespace at point, extending to the same column as "
"the next @dfn{indent point} of the previous nonblank line.  An indent point "
"is a non-whitespace character following whitespace.  The next indent point "
"is the first one at a column greater than the current column of point.  For "
"example, if point is underneath and to the left of the first non-blank "
"character of a line of text, it moves to that column by inserting whitespace."
msgstr ""

# type: deffn
#: lispref/text.texi:2331
msgid ""
"If the previous nonblank line has no next indent point (i.e., none at a "
"great enough column position), @code{indent-relative} either does nothing "
"(if @var{unindented-ok} is non-@code{nil}) or calls @code{tab-to-tab-stop}.  "
"Thus, if point is underneath and to the right of the last column of a short "
"line of text, this command ordinarily moves point to the next tab stop by "
"inserting whitespace."
msgstr ""

# type: deffn
#: lispref/text.texi:2333
msgid "The return value of @code{indent-relative} is unpredictable."
msgstr ""

# type: deffn
#: lispref/text.texi:2336
msgid "In the following example, point is at the beginning of the second line:"
msgstr ""

# type: group
#: lispref/text.texi:2341
#, no-wrap
msgid ""
"            This line is indented twelve spaces.\n"
"@point{}The quick brown fox jumped.\n"
msgstr ""

# type: deffn
#: lispref/text.texi:2347 lispref/text.texi:2368
msgid ""
"Evaluation of the expression @code{(indent-relative nil)} produces the "
"following:"
msgstr ""

# type: group
#: lispref/text.texi:2352
#, no-wrap
msgid ""
"            This line is indented twelve spaces.\n"
"            @point{}The quick brown fox jumped.\n"
msgstr ""

# type: deffn
#: lispref/text.texi:2357
msgid ""
"In this next example, point is between the @samp{m} and @samp{p} of @samp"
"{jumped}:"
msgstr ""

# type: group
#: lispref/text.texi:2362
#, no-wrap
msgid ""
"            This line is indented twelve spaces.\n"
"The quick brown fox jum@point{}ped.\n"
msgstr ""

# type: group
#: lispref/text.texi:2373
#, no-wrap
msgid ""
"            This line is indented twelve spaces.\n"
"The quick brown fox jum  @point{}ped.\n"
msgstr ""

# type: deffn
#: lispref/text.texi:2377
#, no-wrap
msgid "Command indent-relative-maybe"
msgstr ""

# type: deffn
#: lispref/text.texi:2382
msgid ""
"This command indents the current line like the previous nonblank line, by "
"calling @code{indent-relative} with @code{t} as the @var{unindented-ok} "
"argument.  The return value is unpredictable."
msgstr ""

# type: deffn
#: lispref/text.texi:2385
msgid ""
"If the previous nonblank line has no indent points beyond the current "
"column, this command does nothing."
msgstr ""

# type: subsection
#: lispref/text.texi:2389
#, no-wrap
msgid "Adjustable ``Tab Stops''"
msgstr ""

# type: cindex
#: lispref/text.texi:2390
#, no-wrap
msgid "tabs stops for indentation"
msgstr ""

# type: Plain text
#: lispref/text.texi:2401
msgid ""
"This section explains the mechanism for user-specified ``tab stops'' and the "
"mechanisms that use and set them.  The name ``tab stops'' is used because "
"the feature is similar to that of the tab stops on a typewriter.  The "
"feature works by inserting an appropriate number of spaces and tab "
"characters to reach the next tab stop column; it does not affect the display "
"of tab characters in the buffer (@pxref{Usual Display}).  Note that the @key"
"{TAB} character as input uses this tab stop feature only in a few major "
"modes, such as Text mode.  @xref{Tab Stops,,, emacs, The GNU Emacs Manual}."
msgstr ""

# type: deffn
#: lispref/text.texi:2402
#, no-wrap
msgid "Command tab-to-tab-stop"
msgstr ""

# type: deffn
#: lispref/text.texi:2408
msgid ""
"This command inserts spaces or tabs before point, up to the next tab stop "
"column defined by @code{tab-stop-list}.  It searches the list for an element "
"greater than the current column number, and uses that element as the column "
"to indent to.  It does nothing if no such element is found."
msgstr ""

# type: defopt
#: lispref/text.texi:2410
#, no-wrap
msgid "tab-stop-list"
msgstr "tab-stop-list"

# type: defopt
#: lispref/text.texi:2414
msgid ""
"This variable is the list of tab stop columns used by @code{tab-to-tab-"
"stops}.  The elements should be integers in increasing order.  The tab stop "
"columns need not be evenly spaced."
msgstr ""

# type: defopt
#: lispref/text.texi:2417
msgid ""
"Use @kbd{M-x edit-tab-stops} to edit the location of tab stops interactively."
msgstr ""

# type: subsection
#: lispref/text.texi:2420
#, no-wrap
msgid "Indentation-Based Motion Commands"
msgstr ""

# type: Plain text
#: lispref/text.texi:2424
msgid ""
"These commands, primarily for interactive use, act based on the indentation "
"in the text."
msgstr ""

# type: deffn
#: lispref/text.texi:2425
#, no-wrap
msgid "Command back-to-indentation"
msgstr ""

# type: deffn
#: lispref/text.texi:2430
msgid ""
"This command moves point to the first non-whitespace character in the "
"current line (which is the line in which point is located).  It returns @code"
"{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:2432
#, no-wrap
msgid "Command backward-to-indentation &optional arg"
msgstr ""

# type: deffn
#: lispref/text.texi:2437
msgid ""
"This command moves point backward @var{arg} lines and then to the first "
"nonblank character on that line.  It returns @code{nil}.  If @var{arg} is "
"omitted or @code{nil}, it defaults to 1."
msgstr ""

# type: deffn
#: lispref/text.texi:2439
#, no-wrap
msgid "Command forward-to-indentation &optional arg"
msgstr ""

# type: deffn
#: lispref/text.texi:2444
msgid ""
"This command moves point forward @var{arg} lines and then to the first "
"nonblank character on that line.  It returns @code{nil}.  If @var{arg} is "
"omitted or @code{nil}, it defaults to 1."
msgstr ""

# type: cindex
#: lispref/text.texi:2449
#, no-wrap
msgid "case conversion in buffers"
msgstr ""

# type: Plain text
#: lispref/text.texi:2455
msgid ""
"The case change commands described here work on text in the current buffer.  "
"@xref{Case Conversion}, for case conversion functions that work on strings "
"and characters.  @xref{Case Tables}, for how to customize which characters "
"are upper or lower case and how to convert them."
msgstr ""

# type: deffn
#: lispref/text.texi:2456
#, no-wrap
msgid "Command capitalize-region start end"
msgstr ""

# type: deffn
#: lispref/text.texi:2461
msgid ""
"This function capitalizes all words in the region defined by @var{start} and "
"@var{end}.  To capitalize means to convert each word's first character to "
"upper case and convert the rest of each word to lower case.  The function "
"returns @code{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:2464
msgid ""
"If one end of the region is in the middle of a word, the part of the word "
"within the region is treated as an entire word."
msgstr ""

# type: deffn
#: lispref/text.texi:2467
msgid ""
"When @code{capitalize-region} is called interactively, @var{start} and @var"
"{end} are point and the mark, with the smallest first."
msgstr ""

# type: group
#: lispref/text.texi:2473
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of the 5th foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: group
#: lispref/text.texi:2478
#, no-wrap
msgid ""
"(capitalize-region 1 44)\n"
"@result{} nil\n"
"\n"
msgstr ""

# type: group
#: lispref/text.texi:2482
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This Is The Contents Of The 5th Foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: deffn
#: lispref/text.texi:2486
#, no-wrap
msgid "Command downcase-region start end"
msgstr ""

# type: deffn
#: lispref/text.texi:2490
msgid ""
"This function converts all of the letters in the region defined by @var"
"{start} and @var{end} to lower case.  The function returns @code{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:2493
msgid ""
"When @code{downcase-region} is called interactively, @var{start} and @var"
"{end} are point and the mark, with the smallest first."
msgstr ""

# type: deffn
#: lispref/text.texi:2495
#, no-wrap
msgid "Command upcase-region start end"
msgstr ""

# type: deffn
#: lispref/text.texi:2499
msgid ""
"This function converts all of the letters in the region defined by @var"
"{start} and @var{end} to upper case.  The function returns @code{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:2502
msgid ""
"When @code{upcase-region} is called interactively, @var{start} and @var{end} "
"are point and the mark, with the smallest first."
msgstr ""

# type: deffn
#: lispref/text.texi:2504
#, no-wrap
msgid "Command capitalize-word count"
msgstr ""

# type: deffn
#: lispref/text.texi:2511
msgid ""
"This function capitalizes @var{count} words after point, moving point over "
"as it does.  To capitalize means to convert each word's first character to "
"upper case and convert the rest of each word to lower case.  If @var{count} "
"is negative, the function capitalizes the @minus{}@var{count} previous words "
"but does not move point.  The value is @code{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:2514
msgid ""
"If point is in the middle of a word, the part of the word before point is "
"ignored when moving forward.  The rest is treated as an entire word."
msgstr ""

# type: deffn
#: lispref/text.texi:2517
msgid ""
"When @code{capitalize-word} is called interactively, @var{count} is set to "
"the numeric prefix argument."
msgstr ""

# type: deffn
#: lispref/text.texi:2519
#, no-wrap
msgid "Command downcase-word count"
msgstr ""

# type: deffn
#: lispref/text.texi:2524
msgid ""
"This function converts the @var{count} words after point to all lower case, "
"moving point over as it does.  If @var{count} is negative, it converts the "
"@minus{}@var{count} previous words but does not move point.  The value is "
"@code{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:2527
msgid ""
"When @code{downcase-word} is called interactively, @var{count} is set to the "
"numeric prefix argument."
msgstr ""

# type: deffn
#: lispref/text.texi:2529
#, no-wrap
msgid "Command upcase-word count"
msgstr ""

# type: deffn
#: lispref/text.texi:2534
msgid ""
"This function converts the @var{count} words after point to all upper case, "
"moving point over as it does.  If @var{count} is negative, it converts the "
"@minus{}@var{count} previous words but does not move point.  The value is "
"@code{nil}."
msgstr ""

# type: deffn
#: lispref/text.texi:2537
msgid ""
"When @code{upcase-word} is called interactively, @var{count} is set to the "
"numeric prefix argument."
msgstr ""

# type: cindex
#: lispref/text.texi:2541
#, no-wrap
msgid "text properties"
msgstr ""

# type: cindex
#: lispref/text.texi:2542
#, no-wrap
msgid "attributes of text"
msgstr ""

# type: cindex
#: lispref/text.texi:2543
#, no-wrap
msgid "properties of text"
msgstr ""

# type: Plain text
#: lispref/text.texi:2552
msgid ""
"Each character position in a buffer or a string can have a @dfn{text "
"property list}, much like the property list of a symbol (@pxref{Property "
"Lists}).  The properties belong to a particular character at a particular "
"place, such as, the letter @samp{T} at the beginning of this sentence or the "
"first @samp{o} in @samp{foo}---if the same character occurs in two different "
"places, the two occurrences in general have different properties."
msgstr ""

# type: Plain text
#: lispref/text.texi:2559
msgid ""
"Each property has a name and a value.  Both of these can be any Lisp object, "
"but the name is normally a symbol.  Typically each property name symbol is "
"used for a particular purpose; for instance, the text property @code{face} "
"specifies the faces for displaying the character (@pxref{Special "
"Properties}).  The usual way to access the property list is to specify a "
"name and ask what value corresponds to it."
msgstr ""

# type: Plain text
#: lispref/text.texi:2564
msgid ""
"If a character has a @code{category} property, we call it the @dfn{property "
"category} of the character.  It should be a symbol.  The properties of the "
"symbol serve as defaults for the properties of the character."
msgstr ""

# type: Plain text
#: lispref/text.texi:2568
msgid ""
"Copying text between strings and buffers preserves the properties along with "
"the characters; this includes such diverse functions as @code{substring}, "
"@code{insert}, and @code{buffer-substring}."
msgstr ""

# type: node
#: lispref/text.texi:2588 lispref/text.texi:2590
#, no-wrap
msgid "Examining Properties"
msgstr ""

# type: menu
#: lispref/text.texi:2588
msgid "Looking at the properties of one character."
msgstr ""

# type: node
#: lispref/text.texi:2588 lispref/text.texi:2674
#, no-wrap
msgid "Changing Properties"
msgstr ""

# type: menu
#: lispref/text.texi:2588
msgid "Setting the properties of a range of text."
msgstr ""

# type: node
#: lispref/text.texi:2588 lispref/text.texi:2808
#, no-wrap
msgid "Property Search"
msgstr ""

# type: menu
#: lispref/text.texi:2588
msgid "Searching for where a property changes value."
msgstr ""

# type: node
#: lispref/text.texi:2588 lispref/text.texi:2948
#, no-wrap
msgid "Special Properties"
msgstr ""

# type: menu
#: lispref/text.texi:2588
msgid "Particular properties with special meanings."
msgstr ""

# type: node
#: lispref/text.texi:2588 lispref/text.texi:3282
#, no-wrap
msgid "Format Properties"
msgstr ""

# type: menu
#: lispref/text.texi:2588
msgid "Properties for representing formatting of text."
msgstr ""

# type: node
#: lispref/text.texi:2588 lispref/text.texi:3310
#, no-wrap
msgid "Sticky Properties"
msgstr ""

# type: menu
#: lispref/text.texi:2588
msgid "How inserted text gets properties from"
msgstr ""

# type: menu
#: lispref/text.texi:2588
msgid "neighboring text."
msgstr ""

# type: node
#: lispref/text.texi:2588 lispref/text.texi:3395
#, no-wrap
msgid "Saving Properties"
msgstr ""

# type: menu
#: lispref/text.texi:2588
msgid "Saving text properties in files, and reading"
msgstr ""

# type: menu
#: lispref/text.texi:2588
msgid "them back."
msgstr ""

# type: node
#: lispref/text.texi:2588 lispref/text.texi:3464
#, no-wrap
msgid "Lazy Properties"
msgstr ""

# type: menu
#: lispref/text.texi:2588
msgid "Computing text properties in a lazy fashion"
msgstr ""

# type: menu
#: lispref/text.texi:2588
msgid "only when text is examined."
msgstr ""

# type: node
#: lispref/text.texi:2588 lispref/text.texi:3509
#, no-wrap
msgid "Clickable Text"
msgstr ""

# type: menu
#: lispref/text.texi:2588
msgid "Using text properties to make regions of text"
msgstr ""

# type: menu
#: lispref/text.texi:2588
msgid "do something when you click on them."
msgstr ""

# type: subsection
#: lispref/text.texi:2588 lispref/text.texi:3604 lispref/text.texi:3605
#, no-wrap
msgid "Links and Mouse-1"
msgstr ""

# type: menu
#: lispref/text.texi:2588
msgid "How to make @key{Mouse-1} follow a link."
msgstr ""

# type: node
#: lispref/text.texi:2588 lispref/text.texi:3723
#, no-wrap
msgid "Fields"
msgstr ""

# type: menu
#: lispref/text.texi:2588
msgid "The @code{field} property defines"
msgstr ""

# type: menu
#: lispref/text.texi:2588
msgid "fields within the buffer."
msgstr ""

# type: node
#: lispref/text.texi:2588 lispref/text.texi:3840
#, no-wrap
msgid "Not Intervals"
msgstr ""

# type: menu
#: lispref/text.texi:2588
msgid "Why text properties do not use"
msgstr ""

# type: menu
#: lispref/text.texi:2588
msgid "Lisp-visible text intervals."
msgstr ""

# type: subsection
#: lispref/text.texi:2591
#, no-wrap
msgid "Examining Text Properties"
msgstr ""

# type: Plain text
#: lispref/text.texi:2598
msgid ""
"The simplest way to examine text properties is to ask for the value of a "
"particular property of a particular character.  For that, use @code{get-text-"
"property}.  Use @code{text-properties-at} to get the entire property list of "
"a character.  @xref{Property Search}, for functions to examine the "
"properties of a number of characters at once."
msgstr ""

# type: Plain text
#: lispref/text.texi:2602
msgid ""
"These functions handle both strings and buffers.  Keep in mind that "
"positions in a string start from 0, whereas positions in a buffer start from "
"1."
msgstr ""

# type: defun
#: lispref/text.texi:2603
#, no-wrap
msgid "get-text-property pos prop &optional object"
msgstr ""

# type: defun
#: lispref/text.texi:2608
msgid ""
"This function returns the value of the @var{prop} property of the character "
"after position @var{pos} in @var{object} (a buffer or string).  The argument "
"@var{object} is optional and defaults to the current buffer."
msgstr ""

# type: defun
#: lispref/text.texi:2612
msgid ""
"If there is no @var{prop} property strictly speaking, but the character has "
"a property category that is a symbol, then @code{get-text-property} returns "
"the @var{prop} property of that symbol."
msgstr ""

# type: defun
#: lispref/text.texi:2614
#, no-wrap
msgid "get-char-property position prop &optional object"
msgstr ""

# type: defun
#: lispref/text.texi:2617
msgid ""
"This function is like @code{get-text-property}, except that it checks "
"overlays first and then text properties.  @xref{Overlays}."
msgstr ""

# type: defun
#: lispref/text.texi:2625
msgid ""
"The argument @var{object} may be a string, a buffer, or a window.  If it is "
"a window, then the buffer displayed in that window is used for text "
"properties and overlays, but only the overlays active for that window are "
"considered.  If @var{object} is a buffer, then all overlays in that buffer "
"are considered, as well as text properties.  If @var{object} is a string, "
"only text properties are considered, since strings never have overlays."
msgstr ""

# type: defun
#: lispref/text.texi:2627
#, no-wrap
msgid "get-char-property-and-overlay position prop &optional object"
msgstr ""

# type: defun
#: lispref/text.texi:2630
msgid ""
"This is like @code{get-char-property}, but gives extra information about the "
"overlay that the property value comes from."
msgstr ""

# type: defun
#: lispref/text.texi:2636
msgid ""
"Its value is a cons cell whose @sc{car} is the property value, the same "
"value @code{get-char-property} would return with the same arguments.  Its @sc"
"{cdr} is the overlay in which the property was found, or @code{nil}, if it "
"was found as a text property or not found at all."
msgstr ""

# type: defun
#: lispref/text.texi:2639
msgid ""
"If @var{position} is at the end of @var{object}, both the @sc{car} and the "
"@sc{cdr} of the value are @code{nil}."
msgstr ""

# type: defvar
#: lispref/text.texi:2641
#, no-wrap
msgid "char-property-alias-alist"
msgstr ""

# type: defvar
#: lispref/text.texi:2648
msgid ""
"This variable holds an alist which maps property names to a list of "
"alternative property names.  If a character does not specify a direct value "
"for a property, the alternative property names are consulted in order; the "
"first non-@code{nil} value is used.  This variable takes precedence over "
"@code{default-text-properties}, and @code{category} properties take "
"precedence over this variable."
msgstr ""

# type: defun
#: lispref/text.texi:2650
#, no-wrap
msgid "text-properties-at position &optional object"
msgstr ""

# type: defun
#: lispref/text.texi:2654
msgid ""
"This function returns the entire property list of the character at @var"
"{position} in the string or buffer @var{object}.  If @var{object} is @code"
"{nil}, it defaults to the current buffer."
msgstr ""

# type: defvar
#: lispref/text.texi:2656
#, no-wrap
msgid "default-text-properties"
msgstr ""

# type: defvar
#: lispref/text.texi:2662
msgid ""
"This variable holds a property list giving default values for text "
"properties.  Whenever a character does not specify a value for a property, "
"neither directly, through a category symbol, or through @code{char-property-"
"alias-alist}, the value stored in this list is used instead.  Here is an "
"example:"
msgstr ""

# type: example
#: lispref/text.texi:2671
#, no-wrap
msgid ""
"(setq default-text-properties '(foo 69)\n"
"      char-property-alias-alist nil)\n"
";; @r{Make sure character 1 has no properties of its own.}\n"
"(set-text-properties 1 2 nil)\n"
";; @r{What we get, when we ask, is the default value.}\n"
"(get-text-property 1 'foo)\n"
"     @result{} 69\n"
msgstr ""

# type: subsection
#: lispref/text.texi:2675
#, no-wrap
msgid "Changing Text Properties"
msgstr ""

# type: Plain text
#: lispref/text.texi:2682
msgid ""
"The primitives for changing properties apply to a specified range of text in "
"a buffer or string.  The function @code{set-text-properties} (see end of "
"section) sets the entire property list of the text in that range; more "
"often, it is useful to add, change, or delete just certain properties "
"specified by name."
msgstr ""

# type: Plain text
#: lispref/text.texi:2689
msgid ""
"Since text properties are considered part of the contents of the buffer (or "
"string), and can affect how a buffer looks on the screen, any change in "
"buffer text properties marks the buffer as modified.  Buffer text property "
"changes are undoable also (@pxref{Undo}).  Positions in a string start from "
"0, whereas positions in a buffer start from 1."
msgstr ""

# type: defun
#: lispref/text.texi:2690
#, no-wrap
msgid "put-text-property start end prop value &optional object"
msgstr ""

# type: defun
#: lispref/text.texi:2694
msgid ""
"This function sets the @var{prop} property to @var{value} for the text "
"between @var{start} and @var{end} in the string or buffer @var{object}.  If "
"@var{object} is @code{nil}, it defaults to the current buffer."
msgstr ""

# type: defun
#: lispref/text.texi:2696
#, no-wrap
msgid "add-text-properties start end props &optional object"
msgstr ""

# type: defun
#: lispref/text.texi:2700
msgid ""
"This function adds or overrides text properties for the text between @var"
"{start} and @var{end} in the string or buffer @var{object}.  If @var{object} "
"is @code{nil}, it defaults to the current buffer."
msgstr ""

# type: defun
#: lispref/text.texi:2705
msgid ""
"The argument @var{props} specifies which properties to add.  It should have "
"the form of a property list (@pxref{Property Lists}): a list whose elements "
"include the property names followed alternately by the corresponding values."
msgstr ""

# type: defun
#: lispref/text.texi:2709
msgid ""
"The return value is @code{t} if the function actually changed some "
"property's value; @code{nil} otherwise (if @var{props} is @code{nil} or its "
"values agree with those in the text)."
msgstr ""

# type: defun
#: lispref/text.texi:2712
msgid ""
"For example, here is how to set the @code{comment} and @code{face} "
"properties of a range of text:"
msgstr ""

# type: example
#: lispref/text.texi:2716
#, no-wrap
msgid ""
"(add-text-properties @var{start} @var{end}\n"
"                     '(comment t face highlight))\n"
msgstr ""

# type: defun
#: lispref/text.texi:2719
#, no-wrap
msgid "remove-text-properties start end props &optional object"
msgstr ""

# type: defun
#: lispref/text.texi:2723
msgid ""
"This function deletes specified text properties from the text between @var"
"{start} and @var{end} in the string or buffer @var{object}.  If @var{object} "
"is @code{nil}, it defaults to the current buffer."
msgstr ""

# type: defun
#: lispref/text.texi:2729
msgid ""
"The argument @var{props} specifies which properties to delete.  It should "
"have the form of a property list (@pxref{Property Lists}): a list whose "
"elements are property names alternating with corresponding values.  But only "
"the names matter---the values that accompany them are ignored.  For example, "
"here's how to remove the @code{face} property."
msgstr ""

# type: example
#: lispref/text.texi:2732
#, no-wrap
msgid "(remove-text-properties @var{start} @var{end} '(face nil))\n"
msgstr ""

# type: defun
#: lispref/text.texi:2737
msgid ""
"The return value is @code{t} if the function actually changed some "
"property's value; @code{nil} otherwise (if @var{props} is @code{nil} or if "
"no character in the specified text had any of those properties)."
msgstr ""

# type: defun
#: lispref/text.texi:2741
msgid ""
"To remove all text properties from certain text, use @code{set-text-"
"properties} and specify @code{nil} for the new property list."
msgstr ""

# type: defun
#: lispref/text.texi:2743
#, no-wrap
msgid "remove-list-of-text-properties start end list-of-properties &optional object"
msgstr ""

# type: defun
#: lispref/text.texi:2747
msgid ""
"Like @code{remove-text-properties} except that @var{list-of-properties} is a "
"list of property names only, not an alternating list of property names and "
"values."
msgstr ""

# type: defun
#: lispref/text.texi:2749
#, no-wrap
msgid "set-text-properties start end props &optional object"
msgstr ""

# type: defun
#: lispref/text.texi:2753
msgid ""
"This function completely replaces the text property list for the text "
"between @var{start} and @var{end} in the string or buffer @var{object}.  If "
"@var{object} is @code{nil}, it defaults to the current buffer."
msgstr ""

# type: defun
#: lispref/text.texi:2756
msgid ""
"The argument @var{props} is the new property list.  It should be a list "
"whose elements are property names alternating with corresponding values."
msgstr ""

# type: defun
#: lispref/text.texi:2759
msgid ""
"After @code{set-text-properties} returns, all the characters in the "
"specified range have identical properties."
msgstr ""

# type: defun
#: lispref/text.texi:2762
msgid ""
"If @var{props} is @code{nil}, the effect is to get rid of all properties "
"from the specified range of text.  Here's an example:"
msgstr ""

# type: example
#: lispref/text.texi:2765
#, no-wrap
msgid "(set-text-properties @var{start} @var{end} nil)\n"
msgstr ""

# type: defun
#: lispref/text.texi:2768
msgid "Do not rely on the return value of this function."
msgstr ""

# type: Plain text
#: lispref/text.texi:2772
msgid ""
"The easiest way to make a string with text properties is with @code"
"{propertize}:"
msgstr ""

# type: defun
#: lispref/text.texi:2773
#, no-wrap
msgid "propertize string &rest properties"
msgstr ""

# type: defun
#: lispref/text.texi:2779
msgid ""
"This function returns a copy of @var{string} which has the text properties "
"@var{properties}.  These properties apply to all the characters in the "
"string that is returned.  Here is an example that constructs a string with a "
"@code{face} property and a @code{mouse-face} property:"
msgstr ""

# type: smallexample
#: lispref/text.texi:2784
#, no-wrap
msgid ""
"(propertize \"foo\" 'face 'italic\n"
"            'mouse-face 'bold-italic)\n"
"     @result{} #(\"foo\" 0 3 (mouse-face bold-italic face italic))\n"
msgstr ""

# type: defun
#: lispref/text.texi:2789
msgid ""
"To put different properties on various parts of a string, you can construct "
"each part with @code{propertize} and then combine them with @code{concat}:"
msgstr ""

# type: smallexample
#: lispref/text.texi:2801
#, no-wrap
msgid ""
"(concat\n"
" (propertize \"foo\" 'face 'italic\n"
"             'mouse-face 'bold-italic)\n"
" \" and \"\n"
" (propertize \"bar\" 'face 'italic\n"
"             'mouse-face 'bold-italic))\n"
"     @result{} #(\"foo and bar\"\n"
"                 0 3 (face italic mouse-face bold-italic)\n"
"                 3 8 nil\n"
"                 8 11 (face italic mouse-face bold-italic))\n"
msgstr ""

# type: Plain text
#: lispref/text.texi:2807
msgid ""
"See also the function @code{buffer-substring-no-properties} (@pxref{Buffer "
"Contents}) which copies text from the buffer but does not copy its "
"properties."
msgstr ""

# type: subsection
#: lispref/text.texi:2809
#, no-wrap
msgid "Text Property Search Functions"
msgstr ""

# type: Plain text
#: lispref/text.texi:2815
msgid ""
"In typical use of text properties, most of the time several or many "
"consecutive characters have the same value for a property.  Rather than "
"writing your programs to examine characters one by one, it is much faster to "
"process chunks of text that have the same property value."
msgstr ""

# type: Plain text
#: lispref/text.texi:2819
msgid ""
"Here are functions you can use to do this.  They use @code{eq} for comparing "
"property values.  In all cases, @var{object} defaults to the current buffer."
msgstr ""

# type: Plain text
#: lispref/text.texi:2824
msgid ""
"For high performance, it's very important to use the @var{limit} argument to "
"these functions, especially the ones that search for a single property---"
"otherwise, they may spend a long time scanning to the end of the buffer, if "
"the property you are interested in does not change."
msgstr ""

# type: Plain text
#: lispref/text.texi:2829
msgid ""
"These functions do not move point; instead, they return a position (or @code"
"{nil}).  Remember that a position is always between two characters; the "
"position returned by these functions is between two characters with "
"different properties."
msgstr ""

# type: defun
#: lispref/text.texi:2830
#, no-wrap
msgid "next-property-change pos &optional object limit"
msgstr ""

# type: defun
#: lispref/text.texi:2837
msgid ""
"The function scans the text forward from position @var{pos} in the string or "
"buffer @var{object} till it finds a change in some text property, then "
"returns the position of the change.  In other words, it returns the position "
"of the first character beyond @var{pos} whose properties are not identical "
"to those of the character just after @var{pos}."
msgstr ""

# type: defun
#: lispref/text.texi:2841
msgid ""
"If @var{limit} is non-@code{nil}, then the scan ends at position @var"
"{limit}.  If there is no property change before that point, @code{next-"
"property-change} returns @var{limit}."
msgstr ""

# type: defun
#: lispref/text.texi:2846
msgid ""
"The value is @code{nil} if the properties remain unchanged all the way to "
"the end of @var{object} and @var{limit} is @code{nil}.  If the value is non-"
"@code{nil}, it is a position greater than or equal to @var{pos}.  The value "
"equals @var{pos} only when @var{limit} equals @var{pos}."
msgstr ""

# type: defun
#: lispref/text.texi:2849
msgid ""
"Here is an example of how to scan the buffer by chunks of text within which "
"all properties are constant:"
msgstr ""

# type: smallexample
#: lispref/text.texi:2858
#, no-wrap
msgid ""
"(while (not (eobp))\n"
"  (let ((plist (text-properties-at (point)))\n"
"        (next-change\n"
"         (or (next-property-change (point) (current-buffer))\n"
"             (point-max))))\n"
"    @r{Process text from point to @var{next-change}@dots{}}\n"
"    (goto-char next-change)))\n"
msgstr ""

# type: defun
#: lispref/text.texi:2861
#, no-wrap
msgid "previous-property-change pos &optional object limit"
msgstr ""

# type: defun
#: lispref/text.texi:2866
msgid ""
"This is like @code{next-property-change}, but scans back from @var{pos} "
"instead of forward.  If the value is non-@code{nil}, it is a position less "
"than or equal to @var{pos}; it equals @var{pos} only if @var{limit} equals "
"@var{pos}."
msgstr ""

# type: defun
#: lispref/text.texi:2868
#, no-wrap
msgid "next-single-property-change pos prop &optional object limit"
msgstr ""

# type: defun
#: lispref/text.texi:2875
msgid ""
"The function scans text for a change in the @var{prop} property, then "
"returns the position of the change.  The scan goes forward from position @var"
"{pos} in the string or buffer @var{object}.  In other words, this function "
"returns the position of the first character beyond @var{pos} whose @var"
"{prop} property differs from that of the character just after @var{pos}."
msgstr ""

# type: defun
#: lispref/text.texi:2879
msgid ""
"If @var{limit} is non-@code{nil}, then the scan ends at position @var"
"{limit}.  If there is no property change before that point, @code{next-"
"single-property-change} returns @var{limit}."
msgstr ""

# type: defun
#: lispref/text.texi:2884
msgid ""
"The value is @code{nil} if the property remains unchanged all the way to the "
"end of @var{object} and @var{limit} is @code{nil}.  If the value is non-@code"
"{nil}, it is a position greater than or equal to @var{pos}; it equals @var"
"{pos} only if @var{limit} equals @var{pos}."
msgstr ""

# type: defun
#: lispref/text.texi:2886
#, no-wrap
msgid "previous-single-property-change pos prop &optional object limit"
msgstr ""

# type: defun
#: lispref/text.texi:2891
msgid ""
"This is like @code{next-single-property-change}, but scans back from @var"
"{pos} instead of forward.  If the value is non-@code{nil}, it is a position "
"less than or equal to @var{pos}; it equals @var{pos} only if @var{limit} "
"equals @var{pos}."
msgstr ""

# type: defun
#: lispref/text.texi:2893
#, no-wrap
msgid "next-char-property-change pos &optional limit"
msgstr ""

# type: defun
#: lispref/text.texi:2902
msgid ""
"This is like @code{next-property-change} except that it considers overlay "
"properties as well as text properties, and if no change is found before the "
"end of the buffer, it returns the maximum buffer position rather than @code"
"{nil} (in this sense, it resembles the corresponding overlay function @code"
"{next-overlay-change}, rather than @code{next-property-change}).  There is "
"no @var{object} operand because this function operates only on the current "
"buffer.  It returns the next address at which either kind of property "
"changes."
msgstr ""

# type: defun
#: lispref/text.texi:2904
#, no-wrap
msgid "previous-char-property-change pos &optional limit"
msgstr ""

# type: defun
#: lispref/text.texi:2908
msgid ""
"This is like @code{next-char-property-change}, but scans back from @var{pos} "
"instead of forward, and returns the minimum buffer position if no change is "
"found."
msgstr ""

# type: defun
#: lispref/text.texi:2910
#, no-wrap
msgid "next-single-char-property-change pos prop &optional object limit"
msgstr ""

# type: defun
#: lispref/text.texi:2918
msgid ""
"This is like @code{next-single-property-change} except that it considers "
"overlay properties as well as text properties, and if no change is found "
"before the end of the @var{object}, it returns the maximum valid position in "
"@var{object} rather than @code{nil}.  Unlike @code{next-char-property-"
"change}, this function @emph{does} have an @var{object} operand; if @var"
"{object} is not a buffer, only text-properties are considered."
msgstr ""

# type: defun
#: lispref/text.texi:2920
#, no-wrap
msgid "previous-single-char-property-change pos prop &optional object limit"
msgstr ""

# type: defun
#: lispref/text.texi:2924
msgid ""
"This is like @code{next-single-char-property-change}, but scans back from "
"@var{pos} instead of forward, and returns the minimum valid position in @var"
"{object} if no change is found."
msgstr ""

# type: defun
#: lispref/text.texi:2926
#, no-wrap
msgid "text-property-any start end prop value &optional object"
msgstr ""

# type: defun
#: lispref/text.texi:2931
msgid ""
"This function returns non-@code{nil} if at least one character between @var"
"{start} and @var{end} has a property @var{prop} whose value is @var{value}.  "
"More precisely, it returns the position of the first such character.  "
"Otherwise, it returns @code{nil}."
msgstr ""

# type: defun
#: lispref/text.texi:2935 lispref/text.texi:2946
msgid ""
"The optional fifth argument, @var{object}, specifies the string or buffer to "
"scan.  Positions are relative to @var{object}.  The default for @var{object} "
"is the current buffer."
msgstr ""

# type: defun
#: lispref/text.texi:2937
#, no-wrap
msgid "text-property-not-all start end prop value &optional object"
msgstr ""

# type: defun
#: lispref/text.texi:2942
msgid ""
"This function returns non-@code{nil} if at least one character between @var"
"{start} and @var{end} does not have a property @var{prop} with value @var"
"{value}.  More precisely, it returns the position of the first such "
"character.  Otherwise, it returns @code{nil}."
msgstr ""

# type: subsection
#: lispref/text.texi:2949
#, no-wrap
msgid "Properties with Special Meanings"
msgstr ""

# type: Plain text
#: lispref/text.texi:2955
msgid ""
"Here is a table of text property names that have special built-in meanings.  "
"The following sections list a few additional special property names that "
"control filling and property inheritance.  All other names have no standard "
"meaning, and you can use them as you like."
msgstr ""

# type: Plain text
#: lispref/text.texi:2960
msgid ""
"Note: the properties @code{composition}, @code{display}, @code{invisible} "
"and @code{intangible} can also cause point to move to an acceptable place, "
"after each Emacs command.  @xref{Adjusting Point}."
msgstr ""

# type: cindex
#: lispref/text.texi:2962
#, no-wrap
msgid "property category of text character"
msgstr ""

# type: kindex
#: lispref/text.texi:2963
#, no-wrap
msgid "category @r{(text property)}"
msgstr ""

# type: table
#: lispref/text.texi:2969
msgid ""
"If a character has a @code{category} property, we call it the @dfn{property "
"category} of the character.  It should be a symbol.  The properties of this "
"symbol serve as defaults for the properties of the character."
msgstr ""

# type: cindex
#: lispref/text.texi:2971
#, no-wrap
msgid "face codes of text"
msgstr ""

# type: kindex
#: lispref/text.texi:2972
#, no-wrap
msgid "face @r{(text property)}"
msgstr ""

# type: table
#: lispref/text.texi:2975
msgid ""
"You can use the property @code{face} to control the font and color of text.  "
"@xref{Faces}, for more information."
msgstr ""

# type: table
#: lispref/text.texi:2978
msgid ""
"In the simplest case, the value is a face name.  It can also be a list; then "
"each element can be any of these possibilities;"
msgstr ""

# type: itemize
#: lispref/text.texi:2996
msgid ""
"A cons cell with the form @code{(foreground-color . @var{color-name})} or "
"@code{(background-color . @var{color-name})}.  These elements specify just "
"the foreground color or just the background color.  @xref{Color Names}, for "
"the supported forms of @var{color-name}."
msgstr ""

# type: itemize
#: lispref/text.texi:3000
msgid ""
"A cons cell of @code{(foreground-color . @var{color-name})} is equivalent to "
"specifying @code{(:foreground @var{color-name})}; likewise for the "
"background."
msgstr ""

# type: table
#: lispref/text.texi:3004
msgid ""
"You can use Font Lock Mode (@pxref{Font Lock Mode}), to dynamically update "
"@code{face} properties based on the contents of the text."
msgstr ""

# type: item
#: lispref/text.texi:3005
#, no-wrap
msgid "font-lock-face"
msgstr ""

# type: kindex
#: lispref/text.texi:3006
#, no-wrap
msgid "font-lock-face @r{(text property)}"
msgstr ""

# type: table
#: lispref/text.texi:3013
msgid ""
"The @code{font-lock-face} property is the same in all respects as the @code"
"{face} property, but its state of activation is controlled by @code{font-"
"lock-mode}.  This can be advantageous for special buffers which are not "
"intended to be user-editable, or for static areas of text which are always "
"fontified in the same way.  @xref{Precalculated Fontification}."
msgstr ""

# type: table
#: lispref/text.texi:3017
msgid ""
"Strictly speaking, @code{font-lock-face} is not a built-in text property; "
"rather, it is implemented in Font Lock mode using @code{char-property-alias-"
"alist}.  @xref{Examining Properties}."
msgstr ""

# type: table
#: lispref/text.texi:3019
msgid "This property is new in Emacs 22.1."
msgstr ""

# type: kindex
#: lispref/text.texi:3021
#, no-wrap
msgid "mouse-face @r{(text property)}"
msgstr ""

# type: table
#: lispref/text.texi:3026
msgid ""
"The property @code{mouse-face} is used instead of @code{face} when the mouse "
"is on or near the character.  For this purpose, ``near'' means that all text "
"between the character and where the mouse is have the same @code{mouse-face} "
"property value."
msgstr ""

# type: item
#: lispref/text.texi:3027
#, no-wrap
msgid "fontified"
msgstr ""

# type: kindex
#: lispref/text.texi:3028
#, no-wrap
msgid "fontified @r{(text property)}"
msgstr ""

# type: table
#: lispref/text.texi:3034
msgid ""
"This property says whether the text is ready for display.  If @code{nil}, "
"Emacs's redisplay routine calls the functions in @code{fontification-"
"functions} (@pxref{Auto Faces}) to prepare this part of the buffer before it "
"is displayed.  It is used internally by the ``just in time'' font locking "
"code."
msgstr ""

# type: table
#: lispref/text.texi:3040
msgid ""
"This property activates various features that change the way text is "
"displayed.  For example, it can make text appear taller or shorter, higher "
"or lower, wider or narrow, or replaced with an image.  @xref{Display "
"Property}."
msgstr ""

# type: kindex
#: lispref/text.texi:3042
#, no-wrap
msgid "help-echo @r{(text property)}"
msgstr ""

# type: cindex
#: lispref/text.texi:3043
#, no-wrap
msgid "tooltip"
msgstr ""

# type: anchor{#1}
#: lispref/text.texi:3049
msgid "Text help-echo"
msgstr ""

# type: table
#: lispref/text.texi:3049
msgid ""
"If text has a string as its @code{help-echo} property, then when you move "
"the mouse onto that text, Emacs displays that string in the echo area, or in "
"the tooltip window (@pxref{Tooltips,,, emacs, The GNU Emacs Manual})."
msgstr ""

# type: table
#: lispref/text.texi:3057
msgid ""
"If the value of the @code{help-echo} property is a function, that function "
"is called with three arguments, @var{window}, @var{object} and @var{pos} and "
"should return a help string or @code{nil} for none.  The first argument, @var"
"{window} is the window in which the help was found.  The second, @var"
"{object}, is the buffer, overlay or string which had the @code{help-echo} "
"property.  The @var{pos} argument is as follows:"
msgstr ""

# type: itemize
#: lispref/text.texi:3061
msgid "If @var{object} is a buffer, @var{pos} is the position in the buffer."
msgstr ""

# type: itemize
#: lispref/text.texi:3064
msgid ""
"If @var{object} is an overlay, that overlay has a @code{help-echo} property, "
"and @var{pos} is the position in the overlay's buffer."
msgstr ""

# type: itemize
#: lispref/text.texi:3068
msgid ""
"If @var{object} is a string (an overlay string or a string displayed with "
"the @code{display} property), @var{pos} is the position in that string."
msgstr ""

# type: table
#: lispref/text.texi:3072
msgid ""
"If the value of the @code{help-echo} property is neither a function nor a "
"string, it is evaluated to obtain a help string."
msgstr ""

# type: table
#: lispref/text.texi:3075
msgid ""
"You can alter the way help text is displayed by setting the variable @code"
"{show-help-function} (@pxref{Help display})."
msgstr ""

# type: table
#: lispref/text.texi:3077
msgid "This feature is used in the mode line and for other active text."
msgstr ""

# type: cindex
#: lispref/text.texi:3079
#, no-wrap
msgid "keymap of character"
msgstr ""

# type: kindex
#: lispref/text.texi:3080
#, no-wrap
msgid "keymap @r{(text property)}"
msgstr ""

# type: table
#: lispref/text.texi:3086
msgid ""
"The @code{keymap} property specifies an additional keymap for commands.  "
"When this keymap applies, it is used for key lookup before the minor mode "
"keymaps and before the buffer's local map.  @xref{Active Keymaps}.  If the "
"property value is a symbol, the symbol's function definition is used as the "
"keymap."
msgstr ""

# type: table
#: lispref/text.texi:3092
msgid ""
"The property's value for the character before point applies if it is non-"
"@code{nil} and rear-sticky, and the property's value for the character after "
"point applies if it is non-@code{nil} and front-sticky.  (For mouse clicks, "
"the position of the click is used instead of the position of point.)"
msgstr ""

# type: kindex
#: lispref/text.texi:3094
#, no-wrap
msgid "local-map @r{(text property)}"
msgstr ""

# type: table
#: lispref/text.texi:3099
msgid ""
"This property works like @code{keymap} except that it specifies a keymap to "
"use @emph{instead of} the buffer's local map.  For most purposes (perhaps "
"all purposes), it is better to use the @code{keymap} property."
msgstr ""

# type: table
#: lispref/text.texi:3103
msgid ""
"The @code{syntax-table} property overrides what the syntax table says about "
"this particular character.  @xref{Syntax Properties}."
msgstr ""

# type: item
#: lispref/text.texi:3104
#, no-wrap
msgid "read-only"
msgstr ""

# type: cindex
#: lispref/text.texi:3105
#, no-wrap
msgid "read-only character"
msgstr ""

# type: kindex
#: lispref/text.texi:3106
#, no-wrap
msgid "read-only @r{(text property)}"
msgstr ""

# type: table
#: lispref/text.texi:3111
msgid ""
"If a character has the property @code{read-only}, then modifying that "
"character is not allowed.  Any command that would do so gets an error, @code"
"{text-read-only}.  If the property value is a string, that string is used as "
"the error message."
msgstr ""

# type: table
#: lispref/text.texi:3116
msgid ""
"Insertion next to a read-only character is an error if inserting ordinary "
"text there would inherit the @code{read-only} property due to stickiness.  "
"Thus, you can control permission to insert next to read-only text by "
"controlling the stickiness.  @xref{Sticky Properties}."
msgstr ""

# type: table
#: lispref/text.texi:3121
msgid ""
"Since changing properties counts as modifying the buffer, it is not possible "
"to remove a @code{read-only} property unless you know the special trick: "
"bind @code{inhibit-read-only} to a non-@code{nil} value and then remove the "
"property.  @xref{Read Only Buffers}."
msgstr ""

# type: kindex
#: lispref/text.texi:3123
#, no-wrap
msgid "invisible @r{(text property)}"
msgstr ""

# type: table
#: lispref/text.texi:3126
msgid ""
"A non-@code{nil} @code{invisible} property can make a character invisible on "
"the screen.  @xref{Invisible Text}, for details."
msgstr ""

# type: kindex
#: lispref/text.texi:3128
#, no-wrap
msgid "intangible @r{(text property)}"
msgstr ""

# type: table
#: lispref/text.texi:3134
msgid ""
"If a group of consecutive characters have equal and non-@code{nil} @code"
"{intangible} properties, then you cannot place point between them.  If you "
"try to move point forward into the group, point actually moves to the end of "
"the group.  If you try to move point backward into the group, point actually "
"moves to the start of the group."
msgstr ""

# type: table
#: lispref/text.texi:3138
msgid ""
"If consecutive characters have unequal non-@code{nil} @code{intangible} "
"properties, they belong to separate groups; each group is separately treated "
"as described above."
msgstr ""

# type: table
#: lispref/text.texi:3141
msgid ""
"When the variable @code{inhibit-point-motion-hooks} is non-@code{nil}, the "
"@code{intangible} property is ignored."
msgstr ""

# type: item
#: lispref/text.texi:3142
#, no-wrap
msgid "field"
msgstr ""

# type: kindex
#: lispref/text.texi:3143
#, no-wrap
msgid "field @r{(text property)}"
msgstr ""

# type: table
#: lispref/text.texi:3148
msgid ""
"Consecutive characters with the same @code{field} property constitute a @dfn"
"{field}.  Some motion functions including @code{forward-word} and @code"
"{beginning-of-line} stop moving at a field boundary.  @xref{Fields}."
msgstr ""

# type: kindex
#: lispref/text.texi:3150
#, no-wrap
msgid "cursor @r{(text property)}"
msgstr ""

# type: table
#: lispref/text.texi:3155
msgid ""
"Normally, the cursor is displayed at the end of any overlay and text "
"property strings present at the current window position.  You can place the "
"cursor on any desired character of these strings by giving that character a "
"non-@code{nil} @var{cursor} text property."
msgstr ""

# type: item
#: lispref/text.texi:3156
#, no-wrap
msgid "pointer"
msgstr ""

# type: kindex
#: lispref/text.texi:3157
#, no-wrap
msgid "pointer @r{(text property)}"
msgstr ""

# type: table
#: lispref/text.texi:3161
msgid ""
"This specifies a specific pointer shape when the mouse pointer is over this "
"text or image.  @xref{Pointer Shape}, for possible pointer shapes."
msgstr ""

# type: table
#: lispref/text.texi:3168
msgid ""
"A newline can have a @code{line-spacing} text or overlay property that "
"controls the height of the display line ending with that newline.  The "
"property value overrides the default frame line spacing and the buffer local "
"@code{line-spacing} variable.  @xref{Line Height}."
msgstr ""

# type: item
#: lispref/text.texi:3169
#, no-wrap
msgid "line-height"
msgstr ""

# type: table
#: lispref/text.texi:3174
msgid ""
"A newline can have a @code{line-height} text or overlay property that "
"controls the total height of the display line ending in that newline.  @xref"
"{Line Height}."
msgstr ""

# type: cindex
#: lispref/text.texi:3176
#, no-wrap
msgid "change hooks for a character"
msgstr ""

# type: cindex
#: lispref/text.texi:3177
#, no-wrap
msgid "hooks for changing a character"
msgstr ""

# type: kindex
#: lispref/text.texi:3178
#, no-wrap
msgid "modification-hooks @r{(text property)}"
msgstr ""

# type: table
#: lispref/text.texi:3186
msgid ""
"If a character has the property @code{modification-hooks}, then its value "
"should be a list of functions; modifying that character calls all of those "
"functions.  Each function receives two arguments: the beginning and end of "
"the part of the buffer being modified.  Note that if a particular "
"modification hook function appears on several characters being modified by a "
"single primitive, you can't predict how many times the function will be "
"called."
msgstr ""

# type: table
#: lispref/text.texi:3193
msgid ""
"Overlays also support the @code{modification-hooks} property, but the "
"details are somewhat different (@pxref{Overlay Properties})."
msgstr ""

# type: kindex
#: lispref/text.texi:3196
#, no-wrap
msgid "insert-in-front-hooks @r{(text property)}"
msgstr ""

# type: kindex
#: lispref/text.texi:3197
#, no-wrap
msgid "insert-behind-hooks @r{(text property)}"
msgstr ""

# type: table
#: lispref/text.texi:3204
msgid ""
"The operation of inserting text in a buffer also calls the functions listed "
"in the @code{insert-in-front-hooks} property of the following character and "
"in the @code{insert-behind-hooks} property of the preceding character.  "
"These functions receive two arguments, the beginning and end of the inserted "
"text.  The functions are called @emph{after} the actual insertion takes "
"place."
msgstr ""

# type: table
#: lispref/text.texi:3207
msgid ""
"See also @ref{Change Hooks}, for other hooks that are called when you change "
"text in a buffer."
msgstr ""

# type: item
#: lispref/text.texi:3208
#, no-wrap
msgid "point-entered"
msgstr ""

# type: itemx
#: lispref/text.texi:3209
#, no-wrap
msgid "point-left"
msgstr ""

# type: cindex
#: lispref/text.texi:3210
#, no-wrap
msgid "hooks for motion of point"
msgstr ""

# type: kindex
#: lispref/text.texi:3211
#, no-wrap
msgid "point-entered @r{(text property)}"
msgstr ""

# type: kindex
#: lispref/text.texi:3212
#, no-wrap
msgid "point-left @r{(text property)}"
msgstr ""

# type: table
#: lispref/text.texi:3216
msgid ""
"The special properties @code{point-entered} and @code{point-left} record "
"hook functions that report motion of point.  Each time point moves, Emacs "
"compares these two property values:"
msgstr ""

# type: itemize
#: lispref/text.texi:3221
msgid ""
"the @code{point-left} property of the character after the old location, and"
msgstr ""

# type: itemize
#: lispref/text.texi:3224
msgid ""
"the @code{point-entered} property of the character after the new location."
msgstr ""

# type: table
#: lispref/text.texi:3229
msgid ""
"If these two values differ, each of them is called (if not @code{nil})  with "
"two arguments: the old value of point, and the new one."
msgstr ""

# type: table
#: lispref/text.texi:3236
msgid ""
"The same comparison is made for the characters before the old and new "
"locations.  The result may be to execute two @code{point-left} functions "
"(which may be the same function) and/or two @code{point-entered} functions "
"(which may be the same function).  In any case, all the @code{point-left} "
"functions are called first, followed by all the @code{point-entered} "
"functions."
msgstr ""

# type: table
#: lispref/text.texi:3240
msgid ""
"It is possible with @code{char-after} to examine characters at various "
"buffer positions without moving point to those positions.  Only an actual "
"change in the value of point runs these hook functions."
msgstr ""

# type: defvar
#: lispref/text.texi:3241
#, no-wrap
msgid "inhibit-point-motion-hooks"
msgstr ""

# type: defvar
#: lispref/text.texi:3246
msgid ""
"When this variable is non-@code{nil}, @code{point-left} and @code{point-"
"entered} hooks are not run, and the @code{intangible} property has no "
"effect.  Do not set this variable globally; bind it with @code{let}."
msgstr ""

# type: defvar
#: lispref/text.texi:3248
#, no-wrap
msgid "show-help-function"
msgstr ""

# type: anchor{#1}
#: lispref/text.texi:3256
msgid "Help display"
msgstr ""

# type: defvar
#: lispref/text.texi:3256
msgid ""
"If this variable is non-@code{nil}, it specifies a function called to "
"display help strings.  These may be @code{help-echo} properties, menu help "
"strings (@pxref{Simple Menu Items}, @pxref{Extended Menu Items}), or tool "
"bar help strings (@pxref{Tool Bar}).  The specified function is called with "
"one argument, the help string to display.  Tooltip mode (@pxref{Tooltips,,, "
"emacs, The GNU Emacs Manual}) provides an example."
msgstr ""

# type: item
#: lispref/text.texi:3258
#, no-wrap
msgid "composition"
msgstr ""

# type: kindex
#: lispref/text.texi:3259
#, no-wrap
msgid "composition @r{(text property)}"
msgstr ""

# type: table
#: lispref/text.texi:3265
msgid ""
"This text property is used to display a sequence of characters as a single "
"glyph composed from components.  For instance, in Thai a base consonant is "
"composed with the following combining vowel as a single glyph.  The value "
"should be a character or a sequence (vector, list, or string) of integers."
msgstr ""

# type: itemize
#: lispref/text.texi:3270
msgid ""
"If it is a character, it means to display that character instead of the text "
"in the region."
msgstr ""

# type: itemize
#: lispref/text.texi:3274
msgid ""
"If it is a string, it means to display that string's contents instead of the "
"text in the region."
msgstr ""

# type: itemize
#: lispref/text.texi:3279
msgid ""
"If it is a vector or list, the elements are characters interleaved with "
"internal codes specifying how to compose the following character with the "
"previous one."
msgstr ""

# type: subsection
#: lispref/text.texi:3283
#, no-wrap
msgid "Formatted Text Properties"
msgstr ""

# type: Plain text
#: lispref/text.texi:3288
msgid ""
"These text properties affect the behavior of the fill commands.  They are "
"used for representing formatted text.  @xref{Filling}, and @ref{Margins}."
msgstr ""

# type: item
#: lispref/text.texi:3290
#, no-wrap
msgid "hard"
msgstr ""

# type: table
#: lispref/text.texi:3296
msgid ""
"If a newline character has this property, it is a ``hard'' newline.  The "
"fill commands do not alter hard newlines and do not move words across them.  "
"However, this property takes effect only if the @code{use-hard-newlines} "
"minor mode is enabled.  @xref{Hard and Soft Newlines,, Hard and Soft "
"Newlines, emacs, The GNU Emacs Manual}."
msgstr ""

# type: itemx
#: lispref/text.texi:3297 lispref/windows.texi:2200
#, no-wrap
msgid "right-margin"
msgstr ""

# type: table
#: lispref/text.texi:3300
msgid ""
"This property specifies an extra right margin for filling this part of the "
"text."
msgstr ""

# type: table
#: lispref/text.texi:3304
msgid ""
"This property specifies an extra left margin for filling this part of the "
"text."
msgstr ""

# type: item
#: lispref/text.texi:3305
#, no-wrap
msgid "justification"
msgstr ""

# type: table
#: lispref/text.texi:3308
msgid ""
"This property specifies the style of justification for filling this part of "
"the text."
msgstr ""

# type: subsection
#: lispref/text.texi:3311
#, no-wrap
msgid "Stickiness of Text Properties"
msgstr ""

# type: cindex
#: lispref/text.texi:3312
#, no-wrap
msgid "sticky text properties"
msgstr ""

# type: cindex
#: lispref/text.texi:3313
#, no-wrap
msgid "inheritance of text properties"
msgstr ""

# type: Plain text
#: lispref/text.texi:3317
msgid ""
"Self-inserting characters normally take on the same properties as the "
"preceding character.  This is called @dfn{inheritance} of properties."
msgstr ""

# type: Plain text
#: lispref/text.texi:3327
msgid ""
"In a Lisp program, you can do insertion with inheritance or without, "
"depending on your choice of insertion primitive.  The ordinary text "
"insertion functions such as @code{insert} do not inherit any properties.  "
"They insert text with precisely the properties of the string being inserted, "
"and no others.  This is correct for programs that copy text from one context "
"to another---for example, into or out of the kill ring.  To insert with "
"inheritance, use the special primitives described in this section.  Self-"
"inserting characters inherit properties because they work using these "
"primitives."
msgstr ""

# type: Plain text
#: lispref/text.texi:3335
msgid ""
"When you do insertion with inheritance, @emph{which} properties are "
"inherited, and from where, depends on which properties are @dfn{sticky}.  "
"Insertion after a character inherits those of its properties that are @dfn"
"{rear-sticky}.  Insertion before a character inherits those of its "
"properties that are @dfn{front-sticky}.  When both sides offer different "
"sticky values for the same property, the previous character's value takes "
"precedence."
msgstr ""

# type: Plain text
#: lispref/text.texi:3339
msgid ""
"By default, a text property is rear-sticky but not front-sticky; thus, the "
"default is to inherit all the properties of the preceding character, and "
"nothing from the following character."
msgstr ""

# type: Plain text
#: lispref/text.texi:3346
msgid ""
"You can control the stickiness of various text properties with two specific "
"text properties, @code{front-sticky} and @code{rear-nonsticky}, and with the "
"variable @code{text-property-default-nonsticky}.  You can use the variable "
"to specify a different default for a given property.  You can use those two "
"text properties to make any specific properties sticky or nonsticky in any "
"particular part of the text."
msgstr ""

# type: Plain text
#: lispref/text.texi:3354
msgid ""
"If a character's @code{front-sticky} property is @code{t}, then all its "
"properties are front-sticky.  If the @code{front-sticky} property is a list, "
"then the sticky properties of the character are those whose names are in the "
"list.  For example, if a character has a @code{front-sticky} property whose "
"value is @code{(face read-only)}, then insertion before the character can "
"inherit its @code{face} property and its @code{read-only} property, but no "
"others."
msgstr ""

# type: Plain text
#: lispref/text.texi:3362
msgid ""
"The @code{rear-nonsticky} property works the opposite way.  Most properties "
"are rear-sticky by default, so the @code{rear-nonsticky} property says which "
"properties are @emph{not} rear-sticky.  If a character's @code{rear-"
"nonsticky} property is @code{t}, then none of its properties are rear-"
"sticky.  If the @code{rear-nonsticky} property is a list, properties are "
"rear-sticky @emph{unless} their names are in the list."
msgstr ""

# type: defvar
#: lispref/text.texi:3363
#, no-wrap
msgid "text-property-default-nonsticky"
msgstr ""

# type: defvar
#: lispref/text.texi:3368
msgid ""
"This variable holds an alist which defines the default rear-stickiness of "
"various text properties.  Each element has the form @code{(@var{property} . "
"@var{nonstickiness})}, and it defines the stickiness of a particular text "
"property, @var{property}."
msgstr ""

# type: defvar
#: lispref/text.texi:3373
msgid ""
"If @var{nonstickiness} is non-@code{nil}, this means that the property @var"
"{property} is rear-nonsticky by default.  Since all properties are front-"
"nonsticky by default, this makes @var{property} nonsticky in both directions "
"by default."
msgstr ""

# type: defvar
#: lispref/text.texi:3377
msgid ""
"The text properties @code{front-sticky} and @code{rear-nonsticky}, when "
"used, take precedence over the default @var{nonstickiness} specified in @code"
"{text-property-default-nonsticky}."
msgstr ""

# type: Plain text
#: lispref/text.texi:3380
msgid "Here are the functions that insert text with inheritance of properties:"
msgstr ""

# type: defun
#: lispref/text.texi:3381
#, no-wrap
msgid "insert-and-inherit &rest strings"
msgstr ""

# type: defun
#: lispref/text.texi:3384
msgid ""
"Insert the strings @var{strings}, just like the function @code{insert}, but "
"inherit any sticky properties from the adjoining text."
msgstr ""

# type: defun
#: lispref/text.texi:3386
#, no-wrap
msgid "insert-before-markers-and-inherit &rest strings"
msgstr ""

# type: defun
#: lispref/text.texi:3390
msgid ""
"Insert the strings @var{strings}, just like the function @code{insert-before-"
"markers}, but inherit any sticky properties from the adjoining text."
msgstr ""

# type: Plain text
#: lispref/text.texi:3394
msgid ""
"@xref{Insertion}, for the ordinary insertion functions which do not inherit."
msgstr ""

# type: subsection
#: lispref/text.texi:3396
#, no-wrap
msgid "Saving Text Properties in Files"
msgstr ""

# type: cindex
#: lispref/text.texi:3397
#, no-wrap
msgid "text properties in files"
msgstr ""

# type: cindex
#: lispref/text.texi:3398
#, no-wrap
msgid "saving text properties"
msgstr ""

# type: Plain text
#: lispref/text.texi:3403
msgid ""
"You can save text properties in files (along with the text itself), and "
"restore the same text properties when visiting or inserting the files, using "
"these two hooks:"
msgstr ""

# type: defvar
#: lispref/text.texi:3408
msgid ""
"This variable's value is a list of functions for @code{write-region} to run "
"to encode text properties in some fashion as annotations to the text being "
"written in the file.  @xref{Writing to Files}."
msgstr ""

# type: defvar
#: lispref/text.texi:3414
msgid ""
"Each function in the list is called with two arguments: the start and end of "
"the region to be written.  These functions should not alter the contents of "
"the buffer.  Instead, they should return lists indicating annotations to "
"write in the file in addition to the text in the buffer."
msgstr ""

# type: defvar
#: lispref/text.texi:3419
msgid ""
"Each function should return a list of elements of the form @code{(@var"
"{position} . @var{string})}, where @var{position} is an integer specifying "
"the relative position within the text to be written, and @var{string} is the "
"annotation to add there."
msgstr ""

# type: defvar
#: lispref/text.texi:3423
msgid ""
"Each list returned by one of these functions must be already sorted in "
"increasing order by @var{position}.  If there is more than one function, "
"@code{write-region} merges the lists destructively into one sorted list."
msgstr ""

# type: defvar
#: lispref/text.texi:3434
msgid ""
"This variable holds a list of functions for @code{insert-file-contents} to "
"call after inserting a file's contents.  These functions should scan the "
"inserted text for annotations, and convert them to the text properties they "
"stand for."
msgstr ""

# type: defvar
#: lispref/text.texi:3441
msgid ""
"Each function receives one argument, the length of the inserted text; point "
"indicates the start of that text.  The function should scan that text for "
"annotations, delete them, and create the text properties that the "
"annotations specify.  The function should return the updated length of the "
"inserted text, as it stands after those changes.  The value returned by one "
"function becomes the argument to the next function."
msgstr ""

# type: defvar
#: lispref/text.texi:3444
msgid ""
"These functions should always return with point at the beginning of the "
"inserted text."
msgstr ""

# type: defvar
#: lispref/text.texi:3448
msgid ""
"The intended use of @code{after-insert-file-functions} is for converting "
"some sort of textual annotations into actual text properties.  But other "
"uses may be possible."
msgstr ""

# type: Plain text
#: lispref/text.texi:3454
msgid ""
"We invite users to write Lisp programs to store and retrieve text properties "
"in files, using these hooks, and thus to experiment with various data "
"formats and find good ones.  Eventually we hope users will produce good, "
"general extensions we can install in Emacs."
msgstr ""

# type: Plain text
#: lispref/text.texi:3459
msgid ""
"We suggest not trying to handle arbitrary Lisp objects as text property "
"names or values---because a program that general is probably difficult to "
"write, and slow.  Instead, choose a set of possible data types that are "
"reasonably flexible, and not too hard to encode."
msgstr ""

# type: Plain text
#: lispref/text.texi:3461
msgid "@xref{Format Conversion}, for a related feature."
msgstr ""

# type: subsection
#: lispref/text.texi:3465
#, no-wrap
msgid "Lazy Computation of Text Properties"
msgstr ""

# type: Plain text
#: lispref/text.texi:3470
msgid ""
"Instead of computing text properties for all the text in the buffer, you can "
"arrange to compute the text properties for parts of the text when and if "
"something depends on them."
msgstr ""

# type: Plain text
#: lispref/text.texi:3474
msgid ""
"The primitive that extracts text from the buffer along with its properties "
"is @code{buffer-substring}.  Before examining the properties, this function "
"runs the abnormal hook @code{buffer-access-fontify-functions}."
msgstr ""

# type: defvar
#: lispref/text.texi:3482
msgid ""
"This variable holds a list of functions for computing text properties.  "
"Before @code{buffer-substring} copies the text and text properties for a "
"portion of the buffer, it calls all the functions in this list.  Each of the "
"functions receives two arguments that specify the range of the buffer being "
"accessed.  (The buffer itself is always the current buffer.)"
msgstr ""

# type: Plain text
#: lispref/text.texi:3486
msgid ""
"The function @code{buffer-substring-no-properties} does not call these "
"functions, since it ignores text properties anyway."
msgstr ""

# type: Plain text
#: lispref/text.texi:3490
msgid ""
"In order to prevent the hook functions from being called more than once for "
"the same part of the buffer, you can use the variable @code{buffer-access-"
"fontified-property}."
msgstr ""

# type: defvar
#: lispref/text.texi:3491
#, no-wrap
msgid "buffer-access-fontified-property"
msgstr ""

# type: defvar
#: lispref/text.texi:3496
msgid ""
"If this variable's value is non-@code{nil}, it is a symbol which is used as "
"a text property name.  A non-@code{nil} value for that text property means, "
"``the other text properties for this character have already been computed.''"
msgstr ""

# type: defvar
#: lispref/text.texi:3502
msgid ""
"If all the characters in the range specified for @code{buffer-substring} "
"have a non-@code{nil} value for this property, @code{buffer-substring} does "
"not call the @code{buffer-access-fontify-functions} functions.  It assumes "
"these characters already have the right text properties, and just copies the "
"properties they already have."
msgstr ""

# type: defvar
#: lispref/text.texi:3507
msgid ""
"The normal way to use this feature is that the @code{buffer-access-fontify-"
"functions} functions add this property, as well as others, to the characters "
"they operate on.  That way, they avoid being called over and over for the "
"same text."
msgstr ""

# type: subsection
#: lispref/text.texi:3510
#, no-wrap
msgid "Defining Clickable Text"
msgstr ""

# type: cindex
#: lispref/text.texi:3511
#, no-wrap
msgid "clickable text"
msgstr ""

# type: Plain text
#: lispref/text.texi:3518
msgid ""
"@dfn{Clickable text} is text that can be clicked, with either the the mouse "
"or via keyboard commands, to produce some result.  Many major modes use "
"clickable text to implement features such as hyper-links.  The @code{button} "
"package provides an easy way to insert and manipulate clickable text.  @xref"
"{Buttons}."
msgstr ""

# type: Plain text
#: lispref/text.texi:3523
msgid ""
"In this section, we will explain how to manually set up clickable text in a "
"buffer using text properties.  This involves two things: (1)  indicating "
"clickability when the mouse moves over the text, and (2)  making @kbd{RET} "
"or a mouse click on that text do something."
msgstr ""

# type: Plain text
#: lispref/text.texi:3530
msgid ""
"Indicating clickability usually involves highlighting the text, and often "
"involves displaying helpful information about the action, such as which "
"mouse button to press, or a short summary of the action.  This can be done "
"with the @code{mouse-face} and @code{help-echo} text properties.  @xref"
"{Special Properties}.  Here is an example of how Dired does it:"
msgstr ""

# type: smallexample
#: lispref/text.texi:3542
#, no-wrap
msgid ""
"(condition-case nil\n"
"    (if (dired-move-to-filename)\n"
"        (add-text-properties\n"
"         (point)\n"
"         (save-excursion\n"
"           (dired-move-to-end-of-filename)\n"
"           (point))\n"
"         '(mouse-face highlight\n"
"           help-echo \"mouse-2: visit this file in other window\")))\n"
"  (error nil))\n"
msgstr ""

# type: Plain text
#: lispref/text.texi:3547
msgid ""
"The first two arguments to @code{add-text-properties} specify the beginning "
"and end of the text."
msgstr ""

# type: Plain text
#: lispref/text.texi:3552
msgid ""
"The usual way to make the mouse do something when you click it on this text "
"is to define @code{mouse-2} in the major mode's keymap.  The job of checking "
"whether the click was on clickable text is done by the command definition.  "
"Here is how Dired does it:"
msgstr ""

# type: smallexample
#: lispref/text.texi:3574
#, no-wrap
msgid ""
"(defun dired-mouse-find-file-other-window (event)\n"
"  \"In Dired, visit the file or directory name you click on.\"\n"
"  (interactive \"e\")\n"
"  (let (window pos file)\n"
"    (save-excursion\n"
"      (setq window (posn-window (event-end event))\n"
"            pos (posn-point (event-end event)))\n"
"      (if (not (windowp window))\n"
"          (error \"No file chosen\"))\n"
"      (set-buffer (window-buffer window))\n"
"      (goto-char pos)\n"
"      (setq file (dired-get-file-for-visit)))\n"
"    (if (file-directory-p file)\n"
"        (or (and (cdr dired-subdir-alist)\n"
"                 (dired-goto-subdir file))\n"
"            (progn\n"
"              (select-window window)\n"
"              (dired-other-window file)))\n"
"      (select-window window)\n"
"      (find-file-other-window (file-name-sans-versions file t)))))\n"
msgstr ""

# type: Plain text
#: lispref/text.texi:3583
msgid ""
"The reason for the @code{save-excursion} construct is to avoid changing the "
"current buffer.  In this case, Dired uses the functions @code{posn-window} "
"and @code{posn-point} to determine which buffer the click happened in and "
"where, and in that buffer, @code{dired-get-file-for-visit} to determine "
"which file to visit."
msgstr ""

# type: Plain text
#: lispref/text.texi:3587
msgid ""
"Instead of defining a mouse command for the major mode, you can define a key "
"binding for the clickable text itself, using the @code{keymap} text property:"
msgstr ""

# type: example
#: lispref/text.texi:3596
#, no-wrap
msgid ""
"(let ((map (make-sparse-keymap)))\n"
"  (define-key map [mouse-2] 'operate-this-button)\n"
"  (put-text-property (point)\n"
"                     (save-excursion\n"
"                       (dired-move-to-end-of-filename)\n"
"                       (point))\n"
"                     'keymap map))\n"
msgstr ""

# type: Plain text
#: lispref/text.texi:3603
msgid ""
"This method makes it possible to define different commands for various "
"clickable pieces of text.  Also, the major mode definition (or the global "
"definition) remains available for the rest of the text in the buffer."
msgstr ""

# type: cindex
#: lispref/text.texi:3606
#, no-wrap
msgid "follow links"
msgstr ""

# type: cindex
#: lispref/text.texi:3607
#, no-wrap
msgid "mouse-1"
msgstr ""

# type: Plain text
#: lispref/text.texi:3616
msgid ""
"The normal Emacs command for activating text in read-only buffers is @key"
"{Mouse-2}, which includes following textual links.  However, most graphical "
"applications use @key{Mouse-1} for following links.  For compatibility, @key"
"{Mouse-1} follows links in Emacs too, when you click on a link quickly "
"without moving the mouse.  The user can customize this behavior through the "
"variable @code{mouse-1-click-follows-link}."
msgstr ""

# type: Plain text
#: lispref/text.texi:3622
msgid ""
"To define text as a link at the Lisp level, you should bind the @code{mouse-"
"2} event to a command to follow the link.  Then, to indicate that @key{Mouse-"
"1} should also follow the link, you should specify a @code{follow-link} "
"condition either as a text property or as a key binding:"
msgstr ""

# type: item
#: lispref/text.texi:3624
#, no-wrap
msgid "@code{follow-link} property"
msgstr ""

# type: table
#: lispref/text.texi:3627
msgid ""
"If the clickable text has a non-@code{nil} @code{follow-link} text or "
"overlay property, that specifies the condition."
msgstr ""

# type: item
#: lispref/text.texi:3628
#, no-wrap
msgid "@code{follow-link} event"
msgstr ""

# type: table
#: lispref/text.texi:3631
msgid ""
"If there is a binding for the @code{follow-link} event, either on the "
"clickable text or in the local keymap, the binding is the condition."
msgstr ""

# type: Plain text
#: lispref/text.texi:3637
msgid ""
"Regardless of how you set the @code{follow-link} condition, its value is "
"used as follows to determine whether the given position is inside a link, "
"and (if so) to compute an @dfn{action code} saying how @key{Mouse-1} should "
"handle the link."
msgstr ""

# type: table
#: lispref/text.texi:3643
msgid ""
"If the condition is @code{mouse-face}, a position is inside a link if there "
"is a non-@code{nil} @code{mouse-face} property at that position.  The action "
"code is always @code{t}."
msgstr ""

# type: table
#: lispref/text.texi:3645
msgid "For example, here is how Info mode handles @key{Mouse-1}:"
msgstr ""

# type: smallexample
#: lispref/text.texi:3648
#, no-wrap
msgid "(define-key Info-mode-map [follow-link] 'mouse-face)\n"
msgstr ""

# type: item
#: lispref/text.texi:3650
#, no-wrap
msgid "a function"
msgstr ""

# type: table
#: lispref/text.texi:3655
msgid ""
"If the condition is a valid function, @var{func}, then a position @var{pos} "
"is inside a link if @code{(@var{func} @var{pos})} evaluates to non-@code"
"{nil}.  The value returned by @var{func} serves as the action code."
msgstr ""

# type: table
#: lispref/text.texi:3658
msgid ""
"For example, here is how pcvs enables @key{Mouse-1} to follow links on file "
"names only:"
msgstr ""

# type: smallexample
#: lispref/text.texi:3663
#, no-wrap
msgid ""
"(define-key map [follow-link]\n"
"  (lambda (pos)\n"
"    (eq (get-char-property pos 'face) 'cvs-filename-face)))\n"
msgstr ""

# type: table
#: lispref/text.texi:3670
msgid ""
"If the condition value is anything else, then the position is inside a link "
"and the condition itself is the action code.  Clearly you should only "
"specify this kind of condition on the text that constitutes a link."
msgstr ""

# type: Plain text
#: lispref/text.texi:3674
msgid "The action code tells @key{Mouse-1} how to follow the link:"
msgstr ""

# type: item
#: lispref/text.texi:3676
#, no-wrap
msgid "a string or vector"
msgstr ""

# type: table
#: lispref/text.texi:3683
msgid ""
"If the action code is a string or vector, the @key{Mouse-1} event is "
"translated into the first element of the string or vector; i.e., the action "
"of the @key{Mouse-1} click is the local or global binding of that character "
"or symbol.  Thus, if the action code is @code{\"foo\"}, @key{Mouse-1} "
"translates into @kbd{f}.  If it is @code{[foo]}, @key{Mouse-1} translates "
"into @key{foo}."
msgstr ""

# type: table
#: lispref/text.texi:3687
msgid ""
"For any other non-@code{nil} action code, the @code{mouse-1} event is "
"translated into a @code{mouse-2} event at the same position."
msgstr ""

# type: Plain text
#: lispref/text.texi:3693
msgid ""
"To define @key{Mouse-1} to activate a button defined with @code{define-"
"button-type}, give the button a @code{follow-link} property with a value as "
"specified above to determine how to follow the link.  For example, here is "
"how Help mode handles @key{Mouse-1}:"
msgstr ""

# type: smallexample
#: lispref/text.texi:3698
#, no-wrap
msgid ""
"(define-button-type 'help-xref\n"
"  'follow-link t\n"
"  'action #'help-button-action)\n"
msgstr ""

# type: Plain text
#: lispref/text.texi:3703
msgid ""
"To define @key{Mouse-1} on a widget defined with @code{define-widget}, give "
"the widget a @code{:follow-link} property with a value as specified above to "
"determine how to follow the link."
msgstr ""

# type: Plain text
#: lispref/text.texi:3706
msgid ""
"For example, here is how the @code{link} widget specifies that a @key{Mouse-"
"1} click shall be translated to @key{RET}:"
msgstr ""

# type: smallexample
#: lispref/text.texi:3715
#, no-wrap
msgid ""
"(define-widget 'link 'item\n"
"  \"An embedded link.\"\n"
"  :button-prefix 'widget-link-prefix\n"
"  :button-suffix 'widget-link-suffix\n"
"  :follow-link \"\\C-m\"\n"
"  :help-echo \"Follow the link.\"\n"
"  :format \"%[%t%]\")\n"
msgstr ""

# type: defun
#: lispref/text.texi:3717
#, no-wrap
msgid "mouse-on-link-p pos"
msgstr ""

# type: defun
#: lispref/text.texi:3721
msgid ""
"This function returns non-@code{nil} if position @var{pos} in the current "
"buffer is on a link.  @var{pos} can also be a mouse event location, as "
"returned by @code{event-start} (@pxref{Accessing Events})."
msgstr ""

# type: subsection
#: lispref/text.texi:3724
#, no-wrap
msgid "Defining and Using Fields"
msgstr ""

# type: cindex
#: lispref/text.texi:3725
#, no-wrap
msgid "fields"
msgstr ""

# type: Plain text
#: lispref/text.texi:3732
msgid ""
"A field is a range of consecutive characters in the buffer that are "
"identified by having the same value (comparing with @code{eq}) of the @code"
"{field} property (either a text-property or an overlay property).  This "
"section describes special functions that are available for operating on "
"fields."
msgstr ""

# type: Plain text
#: lispref/text.texi:3736
msgid ""
"You specify a field with a buffer position, @var{pos}.  We think of each "
"field as containing a range of buffer positions, so the position you specify "
"stands for the field containing that position."
msgstr ""

# type: Plain text
#: lispref/text.texi:3744
msgid ""
"When the characters before and after @var{pos} are part of the same field, "
"there is no doubt which field contains @var{pos}: the one those characters "
"both belong to.  When @var{pos} is at a boundary between fields, which field "
"it belongs to depends on the stickiness of the @code{field} properties of "
"the two surrounding characters (@pxref{Sticky Properties}).  The field whose "
"property would be inherited by text inserted at @var{pos} is the field that "
"contains @var{pos}."
msgstr ""

# type: Plain text
#: lispref/text.texi:3752
msgid ""
"There is an anomalous case where newly inserted text at @var{pos} would not "
"inherit the @code{field} property from either side.  This happens if the "
"previous character's @code{field} property is not rear-sticky, and the "
"following character's @code{field} property is not front-sticky.  In this "
"case, @var{pos} belongs to neither the preceding field nor the following "
"field; the field functions treat it as belonging to an empty field whose "
"beginning and end are both at @var{pos}."
msgstr ""

# type: Plain text
#: lispref/text.texi:3756
msgid ""
"In all of these functions, if @var{pos} is omitted or @code{nil}, the value "
"of point is used by default.  If narrowing is in effect, then @var{pos} "
"should fall within the accessible portion.  @xref{Narrowing}."
msgstr ""

# type: defun
#: lispref/text.texi:3757
#, no-wrap
msgid "field-beginning &optional pos escape-from-edge limit"
msgstr ""

# type: defun
#: lispref/text.texi:3759
msgid ""
"This function returns the beginning of the field specified by @var{pos}."
msgstr ""

# type: defun
#: lispref/text.texi:3765
msgid ""
"If @var{pos} is at the beginning of its field, and @var{escape-from-edge} is "
"non-@code{nil}, then the return value is always the beginning of the "
"preceding field that @emph{ends} at @var{pos}, regardless of the stickiness "
"of the @code{field} properties around @var{pos}."
msgstr ""

# type: defun
#: lispref/text.texi:3769
msgid ""
"If @var{limit} is non-@code{nil}, it is a buffer position; if the beginning "
"of the field is before @var{limit}, then @var{limit} will be returned "
"instead."
msgstr ""

# type: defun
#: lispref/text.texi:3771
#, no-wrap
msgid "field-end &optional pos escape-from-edge limit"
msgstr ""

# type: defun
#: lispref/text.texi:3773
msgid "This function returns the end of the field specified by @var{pos}."
msgstr ""

# type: defun
#: lispref/text.texi:3778
msgid ""
"If @var{pos} is at the end of its field, and @var{escape-from-edge} is non-"
"@code{nil}, then the return value is always the end of the following field "
"that @emph{begins} at @var{pos}, regardless of the stickiness of the @code"
"{field} properties around @var{pos}."
msgstr ""

# type: defun
#: lispref/text.texi:3782
msgid ""
"If @var{limit} is non-@code{nil}, it is a buffer position; if the end of the "
"field is after @var{limit}, then @var{limit} will be returned instead."
msgstr ""

# type: defun
#: lispref/text.texi:3784
#, no-wrap
msgid "field-string &optional pos"
msgstr ""

# type: defun
#: lispref/text.texi:3787
msgid ""
"This function returns the contents of the field specified by @var{pos}, as a "
"string."
msgstr ""

# type: defun
#: lispref/text.texi:3789
#, no-wrap
msgid "field-string-no-properties &optional pos"
msgstr ""

# type: defun
#: lispref/text.texi:3792
msgid ""
"This function returns the contents of the field specified by @var{pos}, as a "
"string, discarding text properties."
msgstr ""

# type: defun
#: lispref/text.texi:3794
#, no-wrap
msgid "delete-field &optional pos"
msgstr ""

# type: defun
#: lispref/text.texi:3796
msgid "This function deletes the text of the field specified by @var{pos}."
msgstr ""

# type: defun
#: lispref/text.texi:3798
#, no-wrap
msgid "constrain-to-field new-pos old-pos &optional escape-from-edge only-in-line inhibit-capture-property"
msgstr ""

# type: defun
#: lispref/text.texi:3802
msgid ""
"This function ``constrains'' @var{new-pos} to the field that @var{old-pos} "
"belongs to---in other words, it returns the position closest to @var{new-"
"pos} that is in the same field as @var{old-pos}."
msgstr ""

# type: defun
#: lispref/text.texi:3806
msgid ""
"If @var{new-pos} is @code{nil}, then @code{constrain-to-field} uses the "
"value of point instead, and moves point to the resulting position as well as "
"returning it."
msgstr ""

# type: defun
#: lispref/text.texi:3818
msgid ""
"If @var{old-pos} is at the boundary of two fields, then the acceptable final "
"positions depend on the argument @var{escape-from-edge}.  If @var{escape-"
"from-edge} is @code{nil}, then @var{new-pos} must be in the field whose @code"
"{field} property equals what new characters inserted at @var{old-pos} would "
"inherit.  (This depends on the stickiness of the @code{field} property for "
"the characters before and after @var{old-pos}.)  If @var{escape-from-edge} "
"is non-@code{nil}, @var{new-pos} can be anywhere in the two adjacent "
"fields.  Additionally, if two fields are separated by another field with the "
"special value @code{boundary}, then any point within this special field is "
"also considered to be ``on the boundary.''"
msgstr ""

# type: defun
#: lispref/text.texi:3823
msgid ""
"Commands like @kbd{C-a} with no argumemt, that normally move backward to a "
"specific kind of location and stay there once there, probably should specify "
"@code{nil} for @var{escape-from-edge}.  Other motion commands that check "
"fields should probably pass @code{t}."
msgstr ""

# type: defun
#: lispref/text.texi:3830
msgid ""
"If the optional argument @var{only-in-line} is non-@code{nil}, and "
"constraining @var{new-pos} in the usual way would move it to a different "
"line, @var{new-pos} is returned unconstrained.  This used in commands that "
"move by line, such as @code{next-line} and @code{beginning-of-line}, so that "
"they respect field boundaries only in the case where they can still move to "
"the right line."
msgstr ""

# type: defun
#: lispref/text.texi:3834
msgid ""
"If the optional argument @var{inhibit-capture-property} is non-@code{nil}, "
"and @var{old-pos} has a non-@code{nil} property of that name, then any field "
"boundaries are ignored."
msgstr ""

# type: defun
#: lispref/text.texi:3838
msgid ""
"You can cause @code{constrain-to-field} to ignore all field boundaries (and "
"so never constrain anything) by binding the variable @code{inhibit-field-"
"text-motion} to a non-@code{nil} value."
msgstr ""

# type: subsection
#: lispref/text.texi:3841
#, no-wrap
msgid "Why Text Properties are not Intervals"
msgstr ""

# type: Plain text
#: lispref/text.texi:3850
msgid ""
"Some editors that support adding attributes to text in the buffer do so by "
"letting the user specify ``intervals'' within the text, and adding the "
"properties to the intervals.  Those editors permit the user or the "
"programmer to determine where individual intervals start and end.  We "
"deliberately provided a different sort of interface in Emacs Lisp to avoid "
"certain paradoxical behavior associated with text modification."
msgstr ""

# type: Plain text
#: lispref/text.texi:3855
msgid ""
"If the actual subdivision into intervals is meaningful, that means you can "
"distinguish between a buffer that is just one interval with a certain "
"property, and a buffer containing the same text subdivided into two "
"intervals, both of which have that property."
msgstr ""

# type: Plain text
#: lispref/text.texi:3862
msgid ""
"Suppose you take the buffer with just one interval and kill part of the "
"text.  The text remaining in the buffer is one interval, and the copy in the "
"kill ring (and the undo list) becomes a separate interval.  Then if you yank "
"back the killed text, you get two intervals with the same properties.  Thus, "
"editing does not preserve the distinction between one interval and two."
msgstr ""

# type: Plain text
#: lispref/text.texi:3871
msgid ""
"Suppose we ``fix'' this problem by coalescing the two intervals when the "
"text is inserted.  That works fine if the buffer originally was a single "
"interval.  But suppose instead that we have two adjacent intervals with the "
"same properties, and we kill the text of one interval and yank it back.  The "
"same interval-coalescence feature that rescues the other case causes trouble "
"in this one: after yanking, we have just one interval.  One again, editing "
"does not preserve the distinction between one interval and two."
msgstr ""

# type: Plain text
#: lispref/text.texi:3874
msgid ""
"Insertion of text at the border between intervals also raises questions that "
"have no satisfactory answer."
msgstr ""

# type: Plain text
#: lispref/text.texi:3879
msgid ""
"However, it is easy to arrange for editing to behave consistently for "
"questions of the form, ``What are the properties of this character?'' So we "
"have decided these are the only questions that make sense; we have not "
"implemented asking questions about where intervals start or end."
msgstr ""

# type: Plain text
#: lispref/text.texi:3884
msgid ""
"In practice, you can usually use the text property search functions in place "
"of explicit interval boundaries.  You can think of them as finding the "
"boundaries of intervals, assuming that intervals are always coalesced "
"whenever possible.  @xref{Property Search}."
msgstr ""

# type: Plain text
#: lispref/text.texi:3887
msgid ""
"Emacs also provides explicit intervals as a presentation feature; see @ref"
"{Overlays}."
msgstr ""

# type: section
#: lispref/text.texi:3889
#, no-wrap
msgid "Substituting for a Character Code"
msgstr ""

# type: Plain text
#: lispref/text.texi:3893
msgid ""
"The following functions replace characters within a specified region based "
"on their character codes."
msgstr ""

# type: defun
#: lispref/text.texi:3894
#, no-wrap
msgid "subst-char-in-region start end old-char new-char &optional noundo"
msgstr ""

# type: cindex
#: lispref/text.texi:3895
#, no-wrap
msgid "replace characters"
msgstr ""

# type: defun
#: lispref/text.texi:3899
msgid ""
"This function replaces all occurrences of the character @var{old-char} with "
"the character @var{new-char} in the region of the current buffer defined by "
"@var{start} and @var{end}."
msgstr ""

# type: cindex
#: lispref/text.texi:3900
#, no-wrap
msgid "undo avoidance"
msgstr ""

# type: defun
#: lispref/text.texi:3905
msgid ""
"If @var{noundo} is non-@code{nil}, then @code{subst-char-in-region} does not "
"record the change for undo and does not mark the buffer as modified.  This "
"was useful for controlling the old selective display feature (@pxref"
"{Selective Display})."
msgstr ""

# type: defun
#: lispref/text.texi:3908
msgid "@code{subst-char-in-region} does not move point and returns @code{nil}."
msgstr ""

# type: group
#: lispref/text.texi:3914
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of the buffer before.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: group
#: lispref/text.texi:3919
#, no-wrap
msgid ""
"(subst-char-in-region 1 20 ?i ?X)\n"
"     @result{} nil\n"
"\n"
msgstr ""

# type: group
#: lispref/text.texi:3923
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"ThXs Xs the contents of the buffer before.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: defun
#: lispref/text.texi:3927
#, no-wrap
msgid "translate-region start end table"
msgstr ""

# type: defun
#: lispref/text.texi:3930
msgid ""
"This function applies a translation table to the characters in the buffer "
"between positions @var{start} and @var{end}."
msgstr ""

# type: defun
#: lispref/text.texi:3936
msgid ""
"The translation table @var{table} is a string or a char-table; @code{(aref "
"@var{table} @var{ochar})} gives the translated character corresponding to "
"@var{ochar}.  If @var{table} is a string, any characters with codes larger "
"than the length of @var{table} are not altered by the translation."
msgstr ""

# type: defun
#: lispref/text.texi:3941
msgid ""
"The return value of @code{translate-region} is the number of characters that "
"were actually changed by the translation.  This does not count characters "
"that were mapped into themselves in the translation table."
msgstr ""

# type: cindex
#: lispref/text.texi:3945
#, no-wrap
msgid "registers"
msgstr ""

# type: Plain text
#: lispref/text.texi:3953
msgid ""
"A register is a sort of variable used in Emacs editing that can hold a "
"variety of different kinds of values.  Each register is named by a single "
"character.  All @acronym{ASCII} characters and their meta variants (but with "
"the exception of @kbd{C-g}) can be used to name registers.  Thus, there are "
"255 possible registers.  A register is designated in Emacs Lisp by the "
"character that is its name."
msgstr ""

# type: defvar
#: lispref/text.texi:3954
#, no-wrap
msgid "register-alist"
msgstr ""

# type: defvar
#: lispref/text.texi:3958
msgid ""
"This variable is an alist of elements of the form @code{(@var{name} .  @var"
"{contents})}.  Normally, there is one element for each Emacs register that "
"has been used."
msgstr ""

# type: defvar
#: lispref/text.texi:3961
msgid ""
"The object @var{name} is a character (an integer) identifying the register."
msgstr ""

# type: Plain text
#: lispref/text.texi:3964
msgid "The @var{contents} of a register can have several possible types:"
msgstr ""

# type: item
#: lispref/text.texi:3966
#, no-wrap
msgid "a number"
msgstr ""

# type: table
#: lispref/text.texi:3969
msgid ""
"A number stands for itself.  If @code{insert-register} finds a number in the "
"register, it converts the number to decimal."
msgstr ""

# type: item
#: lispref/text.texi:3970
#, no-wrap
msgid "a marker"
msgstr ""

# type: table
#: lispref/text.texi:3972
msgid "A marker represents a buffer position to jump to."
msgstr ""

# type: table
#: lispref/text.texi:3975
msgid "A string is text saved in the register."
msgstr ""

# type: item
#: lispref/text.texi:3976
#, no-wrap
msgid "a rectangle"
msgstr ""

# type: table
#: lispref/text.texi:3978
msgid "A rectangle is represented by a list of strings."
msgstr ""

# type: code{#1}
#: lispref/text.texi:3979
#, no-wrap
msgid "(@var{window-configuration} @var{position})"
msgstr ""

# type: table
#: lispref/text.texi:3982
msgid ""
"This represents a window configuration to restore in one frame, and a "
"position to jump to in the current buffer."
msgstr ""

# type: code{#1}
#: lispref/text.texi:3983
#, no-wrap
msgid "(@var{frame-configuration} @var{position})"
msgstr ""

# type: table
#: lispref/text.texi:3986
msgid ""
"This represents a frame configuration to restore, and a position to jump to "
"in the current buffer."
msgstr ""

# type: item
#: lispref/text.texi:3987
#, no-wrap
msgid "(file @var{filename})"
msgstr ""

# type: table
#: lispref/text.texi:3990
msgid ""
"This represents a file to visit; jumping to this value visits file @var"
"{filename}."
msgstr ""

# type: item
#: lispref/text.texi:3991
#, no-wrap
msgid "(file-query @var{filename} @var{position})"
msgstr ""

# type: table
#: lispref/text.texi:3996
msgid ""
"This represents a file to visit and a position in it; jumping to this value "
"visits file @var{filename} and goes to buffer position @var{position}.  "
"Restoring this type of position asks the user for confirmation first."
msgstr ""

# type: Plain text
#: lispref/text.texi:4000
msgid ""
"The functions in this section return unpredictable values unless otherwise "
"stated."
msgstr ""

# type: defun
#: lispref/text.texi:4001
#, no-wrap
msgid "get-register reg"
msgstr ""

# type: defun
#: lispref/text.texi:4004
msgid ""
"This function returns the contents of the register @var{reg}, or @code{nil} "
"if it has no contents."
msgstr ""

# type: defun
#: lispref/text.texi:4006
#, no-wrap
msgid "set-register reg value"
msgstr ""

# type: defun
#: lispref/text.texi:4010
msgid ""
"This function sets the contents of register @var{reg} to @var{value}.  A "
"register can be set to any value, but the other register functions expect "
"only certain data types.  The return value is @var{value}."
msgstr ""

# type: deffn
#: lispref/text.texi:4012
#, no-wrap
msgid "Command view-register reg"
msgstr ""

# type: deffn
#: lispref/text.texi:4014
msgid "This command displays what is contained in register @var{reg}."
msgstr ""

# type: deffn
#: lispref/text.texi:4017
#, no-wrap
msgid "Command point-to-register reg"
msgstr ""

# type: deffn
#: lispref/text.texi:4020
#, no-wrap
msgid ""
"This command stores both the current location of point and the current\n"
"buffer in register @var{reg} as a marker.\n"
msgstr ""

# type: deffn
#: lispref/text.texi:4022
#, no-wrap
msgid "Command jump-to-register reg"
msgstr ""

# type: deffnx
#: lispref/text.texi:4023
#, no-wrap
msgid "Command register-to-point reg"
msgstr ""

# type: deffn
#: lispref/text.texi:4026
#, no-wrap
msgid ""
"This command restores the status recorded in register @var{reg}.\n"
"\n"
msgstr ""

# type: deffn
#: lispref/text.texi:4031
#, no-wrap
msgid ""
"If @var{reg} contains a marker, it moves point to the position stored in\n"
"the marker.  Since both the buffer and the location within the buffer\n"
"are stored by the @code{point-to-register} function, this command can\n"
"switch you to another buffer.\n"
"\n"
msgstr ""

# type: deffn
#: lispref/text.texi:4034
#, no-wrap
msgid ""
"If @var{reg} contains a window configuration or a frame configuration.\n"
"@code{jump-to-register} restores that configuration.\n"
msgstr ""

# type: deffn
#: lispref/text.texi:4037
#, no-wrap
msgid "Command insert-register reg &optional beforep"
msgstr ""

# type: deffn
#: lispref/text.texi:4040
msgid ""
"This command inserts contents of register @var{reg} into the current buffer."
msgstr ""

# type: deffn
#: lispref/text.texi:4046
msgid ""
"Normally, this command puts point before the inserted text, and the mark "
"after it.  However, if the optional second argument @var{beforep} is non-"
"@code{nil}, it puts the mark before and point after.  You can pass a non-"
"@code{nil} second argument @var{beforep} to this function interactively by "
"supplying any prefix argument."
msgstr ""

# type: deffn
#: lispref/text.texi:4050
msgid ""
"If the register contains a rectangle, then the rectangle is inserted with "
"its upper left corner at point.  This means that text is inserted in the "
"current line and underneath it on successive lines."
msgstr ""

# type: deffn
#: lispref/text.texi:4054
msgid ""
"If the register contains something other than saved text (a string) or a "
"rectangle (a list), currently useless things happen.  This may be changed in "
"the future."
msgstr ""

# type: deffn
#: lispref/text.texi:4057
#, no-wrap
msgid "Command copy-to-register reg start end &optional delete-flag"
msgstr ""

# type: deffn
#: lispref/text.texi:4061
#, no-wrap
msgid ""
"This command copies the region from @var{start} to @var{end} into\n"
"register @var{reg}.  If @var{delete-flag} is non-@code{nil}, it deletes\n"
"the region from the buffer after copying it into the register.\n"
msgstr ""

# type: deffn
#: lispref/text.texi:4063
#, no-wrap
msgid "Command prepend-to-register reg start end &optional delete-flag"
msgstr ""

# type: deffn
#: lispref/text.texi:4067
#, no-wrap
msgid ""
"This command prepends the region from @var{start} to @var{end} into\n"
"register @var{reg}.  If @var{delete-flag} is non-@code{nil}, it deletes\n"
"the region from the buffer after copying it to the register.\n"
msgstr ""

# type: deffn
#: lispref/text.texi:4069
#, no-wrap
msgid "Command append-to-register reg start end &optional delete-flag"
msgstr ""

# type: deffn
#: lispref/text.texi:4074
#, no-wrap
msgid ""
"This command appends the region from @var{start} to @var{end} to the\n"
"text already in register @var{reg}.  If @var{delete-flag} is\n"
"non-@code{nil}, it deletes the region from the buffer after copying it\n"
"to the register.\n"
msgstr ""

# type: deffn
#: lispref/text.texi:4076
#, no-wrap
msgid "Command copy-rectangle-to-register reg start end &optional delete-flag"
msgstr ""

# type: deffn
#: lispref/text.texi:4080
#, no-wrap
msgid ""
"This command copies a rectangular region from @var{start} to @var{end}\n"
"into register @var{reg}.  If @var{delete-flag} is non-@code{nil}, it\n"
"deletes the region from the buffer after copying it to the register.\n"
msgstr ""

# type: deffn
#: lispref/text.texi:4082
#, no-wrap
msgid "Command window-configuration-to-register reg"
msgstr ""

# type: deffn
#: lispref/text.texi:4085
#, no-wrap
msgid ""
"This function stores the window configuration of the selected frame in\n"
"register @var{reg}.\n"
msgstr ""

# type: deffn
#: lispref/text.texi:4087
#, no-wrap
msgid "Command frame-configuration-to-register reg"
msgstr ""

# type: deffn
#: lispref/text.texi:4090
#, no-wrap
msgid ""
"This function stores the current frame configuration in register\n"
"@var{reg}.\n"
msgstr ""

# type: section
#: lispref/text.texi:4094
#, no-wrap
msgid "Transposition of Text"
msgstr ""

# type: Plain text
#: lispref/text.texi:4097
msgid "This subroutine is used by the transposition commands."
msgstr ""

# type: defun
#: lispref/text.texi:4098
#, no-wrap
msgid "transpose-regions start1 end1 start2 end2 &optional leave-markers"
msgstr ""

# type: defun
#: lispref/text.texi:4103
msgid ""
"This function exchanges two nonoverlapping portions of the buffer.  "
"Arguments @var{start1} and @var{end1} specify the bounds of one portion and "
"arguments @var{start2} and @var{end2} specify the bounds of the other "
"portion."
msgstr ""

# type: defun
#: lispref/text.texi:4110
msgid ""
"Normally, @code{transpose-regions} relocates markers with the transposed "
"text; a marker previously positioned within one of the two transposed "
"portions moves along with that portion, thus remaining between the same two "
"characters in their new position.  However, if @var{leave-markers} is non-"
"@code{nil}, @code{transpose-regions} does not do this---it leaves all "
"markers unrelocated."
msgstr ""

# type: section
#: lispref/text.texi:4113
#, no-wrap
msgid "Base 64 Encoding"
msgstr ""

# type: cindex
#: lispref/text.texi:4114
#, no-wrap
msgid "base 64 encoding"
msgstr ""

# type: Plain text
#: lispref/text.texi:4126
msgid ""
"Base 64 code is used in email to encode a sequence of 8-bit bytes as a "
"longer sequence of @acronym{ASCII} graphic characters.  It is defined in "
"Internet RFC@footnote{ An RFC, an acronym for @dfn{Request for Comments}, is "
"a numbered Internet informational document describing a standard.  RFCs are "
"usually written by technical experts acting on their own initiative, and are "
"traditionally written in a pragmatic, experience-driven manner.  }2045.  "
"This section describes the functions for converting to and from this code."
msgstr ""

# type: defun
#: lispref/text.texi:4127
#, no-wrap
msgid "base64-encode-region beg end &optional no-line-break"
msgstr ""

# type: defun
#: lispref/text.texi:4134
msgid ""
"This function converts the region from @var{beg} to @var{end} into base 64 "
"code.  It returns the length of the encoded text.  An error is signaled if a "
"character in the region is multibyte, i.e.@: in a multibyte buffer the "
"region must contain only characters from the charsets @code{ascii}, @code"
"{eight-bit-control} and @code{eight-bit-graphic}."
msgstr ""

# type: defun
#: lispref/text.texi:4139
msgid ""
"Normally, this function inserts newline characters into the encoded text, to "
"avoid overlong lines.  However, if the optional argument @var{no-line-break} "
"is non-@code{nil}, these newlines are not added, so the output is just one "
"long line."
msgstr ""

# type: defun
#: lispref/text.texi:4141
#, no-wrap
msgid "base64-encode-string string &optional no-line-break"
msgstr ""

# type: defun
#: lispref/text.texi:4146
msgid ""
"This function converts the string @var{string} into base 64 code.  It "
"returns a string containing the encoded text.  As for @code{base64-encode-"
"region}, an error is signaled if a character in the string is multibyte."
msgstr ""

# type: defun
#: lispref/text.texi:4151
msgid ""
"Normally, this function inserts newline characters into the encoded text, to "
"avoid overlong lines.  However, if the optional argument @var{no-line-break} "
"is non-@code{nil}, these newlines are not added, so the result string is "
"just one long line."
msgstr ""

# type: defun
#: lispref/text.texi:4153
#, no-wrap
msgid "base64-decode-region beg end"
msgstr ""

# type: defun
#: lispref/text.texi:4157
msgid ""
"This function converts the region from @var{beg} to @var{end} from base 64 "
"code into the corresponding decoded text.  It returns the length of the "
"decoded text."
msgstr ""

# type: defun
#: lispref/text.texi:4159 lispref/text.texi:4167
msgid "The decoding functions ignore newline characters in the encoded text."
msgstr ""

# type: defun
#: lispref/text.texi:4161
#, no-wrap
msgid "base64-decode-string string"
msgstr ""

# type: defun
#: lispref/text.texi:4165
msgid ""
"This function converts the string @var{string} from base 64 code into the "
"corresponding decoded text.  It returns a unibyte string containing the "
"decoded text."
msgstr ""

# type: cindex
#: lispref/text.texi:4171
#, no-wrap
msgid "MD5 checksum"
msgstr ""

# type: cindex
#: lispref/text.texi:4172
#, no-wrap
msgid "message digest computation"
msgstr ""

# type: Plain text
#: lispref/text.texi:4183
msgid ""
"MD5 cryptographic checksums, or @dfn{message digests}, are 128-bit "
"``fingerprints'' of a document or program.  They are used to verify that you "
"have an exact and unaltered copy of the data.  The algorithm to calculate "
"the MD5 message digest is defined in Internet RFC@footnote{ For an "
"explanation of what is an RFC, see the footnote in @ref{Base 64}.  }1321.  "
"This section describes the Emacs facilities for computing message digests."
msgstr ""

# type: defun
#: lispref/text.texi:4184
#, no-wrap
msgid "md5 object &optional start end coding-system noerror"
msgstr ""

# type: defun
#: lispref/text.texi:4187
msgid ""
"This function returns the MD5 message digest of @var{object}, which should "
"be a buffer or a string."
msgstr ""

# type: defun
#: lispref/text.texi:4192
msgid ""
"The two optional arguments @var{start} and @var{end} are character positions "
"specifying the portion of @var{object} to compute the message digest for.  "
"If they are @code{nil} or omitted, the digest is computed for the whole of "
"@var{object}."
msgstr ""

# type: defun
#: lispref/text.texi:4202
msgid ""
"The function @code{md5} does not compute the message digest directly from "
"the internal Emacs representation of the text (@pxref{Text "
"Representations}).  Instead, it encodes the text using a coding system, and "
"computes the message digest from the encoded text.  The optional fourth "
"argument @var{coding-system} specifies which coding system to use for "
"encoding the text.  It should be the same coding system that you used to "
"read the text, or that you used or will use when saving or sending the "
"text.  @xref{Coding Systems}, for more information about coding systems."
msgstr ""

# type: defun
#: lispref/text.texi:4210
msgid ""
"If @var{coding-system} is @code{nil} or omitted, the default depends on @var"
"{object}.  If @var{object} is a buffer, the default for @var{coding-system} "
"is whatever coding system would be chosen by default for writing this text "
"into a file.  If @var{object} is a string, the user's most preferred coding "
"system (@pxref{Recognize Coding, prefer-coding-system, the description of "
"@code{prefer-coding-system}, emacs, GNU Emacs Manual}) is used."
msgstr ""

# type: defun
#: lispref/text.texi:4215
msgid ""
"Normally, @code{md5} signals an error if the text can't be encoded using the "
"specified or chosen coding system.  However, if @var{noerror} is non-@code"
"{nil}, it silently uses @code{raw-text} coding instead."
msgstr ""

# type: section
#: lispref/text.texi:4218
#, no-wrap
msgid "Atomic Change Groups"
msgstr ""

# type: cindex
#: lispref/text.texi:4219
#, no-wrap
msgid "atomic changes"
msgstr ""

# type: Plain text
#: lispref/text.texi:4227
msgid ""
"In data base terminology, an @dfn{atomic} change is an indivisible change---"
"it can succeed entirely or it can fail entirely, but it cannot partly "
"succeed.  A Lisp program can make a series of changes to one or several "
"buffers as an @dfn{atomic change group}, meaning that either the entire "
"series of changes will be installed in their buffers or, in case of an "
"error, none of them will be."
msgstr ""

# type: Plain text
#: lispref/text.texi:4231
msgid ""
"To do this for one buffer, the one already current, simply write a call to "
"@code{atomic-change-group} around the code that makes the changes, like this:"
msgstr ""

# type: example
#: lispref/text.texi:4236
#, no-wrap
msgid ""
"(atomic-change-group\n"
"  (insert foo)\n"
"  (delete-region x y))\n"
msgstr ""

# type: Plain text
#: lispref/text.texi:4243
msgid ""
"If an error (or other nonlocal exit) occurs inside the body of @code{atomic-"
"change-group}, it unmakes all the changes in that buffer that were during "
"the execution of the body.  This kind of change group has no effect on any "
"other buffers---any such changes remain."
msgstr ""

# type: Plain text
#: lispref/text.texi:4247
msgid ""
"If you need something more sophisticated, such as to make changes in various "
"buffers constitute one atomic group, you must directly call lower-level "
"functions that @code{atomic-change-group} uses."
msgstr ""

# type: defun
#: lispref/text.texi:4248
#, no-wrap
msgid "prepare-change-group &optional buffer"
msgstr ""

# type: defun
#: lispref/text.texi:4253
msgid ""
"This function sets up a change group for buffer @var{buffer}, which defaults "
"to the current buffer.  It returns a ``handle'' that represents the change "
"group.  You must use this handle to activate the change group and "
"subsequently to finish it."
msgstr ""

# type: Plain text
#: lispref/text.texi:4257
msgid ""
"To use the change group, you must @dfn{activate} it.  You must do this "
"before making any changes in the text of @var{buffer}."
msgstr ""

# type: defun
#: lispref/text.texi:4258
#, no-wrap
msgid "activate-change-group handle"
msgstr ""

# type: defun
#: lispref/text.texi:4260
msgid "This function activates the change group that @var{handle} designates."
msgstr ""

# type: Plain text
#: lispref/text.texi:4267
msgid ""
"After you activate the change group, any changes you make in that buffer "
"become part of it.  Once you have made all the desired changes in the "
"buffer, you must @dfn{finish} the change group.  There are two ways to do "
"this: you can either accept (and finalize) all the changes, or cancel them "
"all."
msgstr ""

# type: defun
#: lispref/text.texi:4268
#, no-wrap
msgid "accept-change-group handle"
msgstr ""

# type: defun
#: lispref/text.texi:4271
msgid ""
"This function accepts all the changes in the change group specified by @var"
"{handle}, making them final."
msgstr ""

# type: defun
#: lispref/text.texi:4273
#, no-wrap
msgid "cancel-change-group handle"
msgstr ""

# type: defun
#: lispref/text.texi:4276
msgid ""
"This function cancels and undoes all the changes in the change group "
"specified by @var{handle}."
msgstr ""

# type: Plain text
#: lispref/text.texi:4288
msgid ""
"Your code should use @code{unwind-protect} to make sure the group is always "
"finished.  The call to @code{activate-change-group} should be inside the "
"@code{unwind-protect}, in case the user types @kbd{C-g} just after it runs.  "
"(This is one reason why @code{prepare-change-group} and @code{activate-"
"change-group} are separate functions, because normally you would call @code"
"{prepare-change-group} before the start of that @code{unwind-protect}.)  "
"Once you finish the group, don't use the handle again---in particular, don't "
"try to finish the same group twice."
msgstr ""

# type: Plain text
#: lispref/text.texi:4292
msgid ""
"To make a multibuffer change group, call @code{prepare-change-group} once "
"for each buffer you want to cover, then use @code{nconc} to combine the "
"returned values, like this:"
msgstr ""

# type: example
#: lispref/text.texi:4296
#, no-wrap
msgid ""
"(nconc (prepare-change-group buffer-1)\n"
"       (prepare-change-group buffer-2))\n"
msgstr ""

# type: Plain text
#: lispref/text.texi:4301
msgid ""
"You can then activate the multibuffer change group with a single call to "
"@code{activate-change-group}, and finish it with a single call to @code"
"{accept-change-group} or @code{cancel-change-group}."
msgstr ""

# type: Plain text
#: lispref/text.texi:4306
msgid ""
"Nested use of several change groups for the same buffer works as you would "
"expect.  Non-nested use of change groups for the same buffer will get Emacs "
"confused, so don't let it happen; the first change group you start for any "
"given buffer should be the last one finished."
msgstr ""

# type: cindex
#: lispref/text.texi:4309
#, no-wrap
msgid "change hooks"
msgstr ""

# type: cindex
#: lispref/text.texi:4310
#, no-wrap
msgid "hooks for text changes"
msgstr ""

# type: Plain text
#: lispref/text.texi:4316
msgid ""
"These hook variables let you arrange to take notice of all changes in all "
"buffers (or in a particular buffer, if you make them buffer-local).  See "
"also @ref{Special Properties}, for how to detect changes to specific parts "
"of the text."
msgstr ""

# type: Plain text
#: lispref/text.texi:4321
msgid ""
"The functions you use in these hooks should save and restore the match data "
"if they do anything that uses regular expressions; otherwise, they will "
"interfere in bizarre ways with the editing operations that call them."
msgstr ""

# type: defvar
#: lispref/text.texi:4327
msgid ""
"This variable holds a list of functions to call before any buffer "
"modification.  Each function gets two arguments, the beginning and end of "
"the region that is about to change, represented as integers.  The buffer "
"that is about to change is always the current buffer."
msgstr ""

# type: defvar
#: lispref/text.texi:4335
msgid ""
"This variable holds a list of functions to call after any buffer "
"modification.  Each function receives three arguments: the beginning and end "
"of the region just changed, and the length of the text that existed before "
"the change.  All three arguments are integers.  The buffer that's about to "
"change is always the current buffer."
msgstr ""

# type: defvar
#: lispref/text.texi:4340
msgid ""
"The length of the old text is the difference between the buffer positions "
"before and after that text as it was before the change.  As for the changed "
"text, its length is simply the difference between the first two arguments."
msgstr ""

# type: Plain text
#: lispref/text.texi:4344
msgid ""
"Output of messages into the @samp{*Messages*} buffer does not call these "
"functions."
msgstr ""

# type: defmac
#: lispref/text.texi:4345
#, no-wrap
msgid "combine-after-change-calls body@dots{}"
msgstr ""

# type: defmac
#: lispref/text.texi:4349
msgid ""
"The macro executes @var{body} normally, but arranges to call the after-"
"change functions just once for a series of several changes---if that seems "
"safe."
msgstr ""

# type: defmac
#: lispref/text.texi:4356
msgid ""
"If a program makes several text changes in the same area of the buffer, "
"using the macro @code{combine-after-change-calls} around that part of the "
"program can make it run considerably faster when after-change hooks are in "
"use.  When the after-change hooks are ultimately called, the arguments "
"specify a portion of the buffer including all of the changes made within the "
"@code{combine-after-change-calls} body."
msgstr ""

# type: defmac
#: lispref/text.texi:4360
msgid ""
"@strong{Warning:} You must not alter the values of @code{after-change-"
"functions} within the body of a @code{combine-after-change-calls} form."
msgstr ""

# type: defmac
#: lispref/text.texi:4365
msgid ""
"@strong{Warning:} if the changes you combine occur in widely scattered parts "
"of the buffer, this will still work, but it is not advisable, because it may "
"lead to inefficient behavior for some change hook functions."
msgstr ""

# type: Plain text
#: lispref/text.texi:4373
msgid ""
"The two variables above are temporarily bound to @code{nil} during the time "
"that any of these functions is running.  This means that if one of these "
"functions changes the buffer, that change won't run these functions.  If you "
"do want a hook function to make changes that run these functions, make it "
"bind these variables back to their usual values."
msgstr ""

# type: Plain text
#: lispref/text.texi:4381
msgid ""
"One inconvenient result of this protective feature is that you cannot have a "
"function in @code{after-change-functions} or @code{before-change-functions} "
"which changes the value of that variable.  But that's not a real "
"limitation.  If you want those functions to change the list of functions to "
"run, simply add one fixed function to the hook, and code that function to "
"look in another variable for other functions to call.  Here is an example:"
msgstr ""

# type: example
#: lispref/text.texi:4389
#, no-wrap
msgid ""
"(setq my-own-after-change-functions nil)\n"
"(defun indirect-after-change-function (beg end len)\n"
"  (let ((list my-own-after-change-functions))\n"
"    (while list\n"
"      (funcall (car list) beg end len)\n"
"      (setq list (cdr list)))))\n"
"\n"
msgstr ""

# type: group
#: lispref/text.texi:4393
#, no-wrap
msgid ""
"(add-hooks 'after-change-functions\n"
"           'indirect-after-change-function)\n"
msgstr ""

# type: defvar
#: lispref/text.texi:4399
msgid ""
"This variable is a normal hook that is run whenever a buffer is changed that "
"was previously in the unmodified state."
msgstr ""

# type: defvar
#: lispref/text.texi:4401
#, no-wrap
msgid "inhibit-modification-hooks"
msgstr ""

# type: defvar
#: lispref/text.texi:4407
msgid ""
"If this variable is non-@code{nil}, all of the change hooks are disabled; "
"none of them run.  This affects all the hook variables described above in "
"this section, as well as the hooks attached to certain special text "
"properties (@pxref{Special Properties}) and overlay properties (@pxref"
"{Overlay Properties})."
msgstr ""

# type: ignore
#: lispref/text.texi:4411
#, no-wrap
msgid "   arch-tag: 3721e738-a1cb-4085-bc1a-6cb8d8e1d32b\n"
msgstr ""

# type: appendix
#: lispref/tips.texi:8
#, no-wrap
msgid "Tips and Conventions"
msgstr ""

# type: cindex
#: lispref/tips.texi:9
#, no-wrap
msgid "tips for writing Lisp"
msgstr ""

# type: cindex
#: lispref/tips.texi:10
#, no-wrap
msgid "standards of coding style"
msgstr ""

# type: cindex
#: lispref/tips.texi:11
#, no-wrap
msgid "coding standards"
msgstr ""

# type: Plain text
#: lispref/tips.texi:17
msgid ""
"This chapter describes no additional features of Emacs Lisp.  Instead it "
"gives advice on making effective use of the features described in the "
"previous chapters, and describes conventions Emacs Lisp programmers should "
"follow."
msgstr ""

# type: Plain text
#: lispref/tips.texi:23
msgid ""
"You can automatically check some of the conventions described below by "
"running the command @kbd{M-x checkdoc RET} when visiting a Lisp file.  It "
"cannot check all of the conventions, and not all the warnings it gives "
"necessarily correspond to problems, but it is worth examining them all."
msgstr ""

# type: node
#: lispref/tips.texi:33 lispref/tips.texi:35
#, no-wrap
msgid "Coding Conventions"
msgstr ""

# type: menu
#: lispref/tips.texi:33
msgid "Conventions for clean and robust programs."
msgstr ""

# type: section
#: lispref/tips.texi:33 lispref/tips.texi:296 lispref/tips.texi:297
#, no-wrap
msgid "Key Binding Conventions"
msgstr ""

# type: menu
#: lispref/tips.texi:33
msgid "Which keys should be bound by which programs."
msgstr ""

# type: node
#: lispref/tips.texi:33 lispref/tips.texi:376
#, no-wrap
msgid "Programming Tips"
msgstr ""

# type: menu
#: lispref/tips.texi:33
msgid "Making Emacs code fit smoothly in Emacs."
msgstr ""

# type: node
#: lispref/tips.texi:33 lispref/tips.texi:501
#, no-wrap
msgid "Compilation Tips"
msgstr ""

# type: menu
#: lispref/tips.texi:33
msgid "Making compiled code run fast."
msgstr ""

# type: node
#: lispref/tips.texi:33 lispref/tips.texi:562
#, no-wrap
msgid "Warning Tips"
msgstr ""

# type: menu
#: lispref/tips.texi:33
msgid "Turning off compiler warnings."
msgstr ""

# type: node
#: lispref/tips.texi:33 lispref/tips.texi:603
#, no-wrap
msgid "Documentation Tips"
msgstr ""

# type: menu
#: lispref/tips.texi:33
msgid "Writing readable documentation strings."
msgstr ""

# type: node
#: lispref/tips.texi:33 lispref/tips.texi:869
#, no-wrap
msgid "Comment Tips"
msgstr ""

# type: menu
#: lispref/tips.texi:33
msgid "Conventions for writing comments."
msgstr ""

# type: node
#: lispref/tips.texi:33 lispref/tips.texi:974
#, no-wrap
msgid "Library Headers"
msgstr ""

# type: menu
#: lispref/tips.texi:33
msgid "Standard headers for library packages."
msgstr ""

# type: section
#: lispref/tips.texi:36
#, no-wrap
msgid "Emacs Lisp Coding Conventions"
msgstr ""

# type: cindex
#: lispref/tips.texi:38
#, no-wrap
msgid "coding conventions in Emacs Lisp"
msgstr ""

# type: Plain text
#: lispref/tips.texi:41
msgid ""
"Here are conventions that you should follow when writing Emacs Lisp code "
"intended for widespread use:"
msgstr ""

# type: itemize
#: lispref/tips.texi:47
msgid ""
"Simply loading the package should not change Emacs's editing behavior.  "
"Include a command or commands to enable and disable the feature, or to "
"invoke it."
msgstr ""

# type: itemize
#: lispref/tips.texi:52
msgid ""
"This convention is mandatory for any file that includes custom definitions.  "
"If fixing such a file to follow this convention requires an incompatible "
"change, go ahead and make the incompatible change; don't postpone it."
msgstr ""

# type: itemize
#: lispref/tips.texi:61
msgid ""
"Since all global variables share the same name space, and all functions "
"share another name space, you should choose a short word to distinguish your "
"program from other Lisp programs@footnote{The benefits of a Common Lisp-"
"style package system are considered not to outweigh the costs.}.  Then take "
"care to begin the names of all global variables, constants, and functions in "
"your program with the chosen prefix.  This helps avoid name conflicts."
msgstr ""

# type: itemize
#: lispref/tips.texi:67
msgid ""
"Occasionally, for a command name intended for users to use, it is more "
"convenient if some words come before the package's name prefix.  And "
"constructs that define functions, variables, etc., work better if they start "
"with @samp{defun} or @samp{defvar}, so put the name prefix later on in the "
"name."
msgstr ""

# type: itemize
#: lispref/tips.texi:74
msgid ""
"This recommendation applies even to names for traditional Lisp primitives "
"that are not primitives in Emacs Lisp---such as @code{copy-list}.  Believe "
"it or not, there is more than one plausible way to define @code{copy-list}.  "
"Play it safe; append your name prefix to produce a name like @code{foo-copy-"
"list} or @code{mylib-copy-list} instead."
msgstr ""

# type: itemize
#: lispref/tips.texi:80
msgid ""
"If you write a function that you think ought to be added to Emacs under a "
"certain name, such as @code{twiddle-files}, don't call it by that name in "
"your program.  Call it @code{mylib-twiddle-files} in your program, and send "
"mail to @samp{bug-gnu-emacs@@gnu.org} suggesting we add it to Emacs.  If and "
"when we do, we can change the name easily enough."
msgstr ""

# type: itemize
#: lispref/tips.texi:83
msgid ""
"If one prefix is insufficient, your package can use two or three alternative "
"common prefixes, so long as they make sense."
msgstr ""

# type: itemize
#: lispref/tips.texi:87
msgid ""
"Separate the prefix from the rest of the symbol name with a hyphen, @samp"
"{-}.  This will be consistent with Emacs itself and with most Emacs Lisp "
"programs."
msgstr ""

# type: itemize
#: lispref/tips.texi:90
msgid "Put a call to @code{provide} at the end of each separate Lisp file."
msgstr ""

# type: itemize
#: lispref/tips.texi:95
msgid ""
"If a file requires certain other Lisp programs to be loaded beforehand, then "
"the comments at the beginning of the file should say so.  Also, use @code"
"{require} to make sure they are loaded."
msgstr ""

# type: itemize
#: lispref/tips.texi:100
msgid ""
"If one file @var{foo} uses a macro defined in another file @var{bar}, @var"
"{foo} should contain this expression before the first use of the macro:"
msgstr ""

# type: example
#: lispref/tips.texi:103
#, no-wrap
msgid "(eval-when-compile (require '@var{bar}))\n"
msgstr ""

# type: itemize
#: lispref/tips.texi:111
msgid ""
"(And the library @var{bar} should contain @code{(provide '@var{bar})}, to "
"make the @code{require} work.)  This will cause @var{bar} to be loaded when "
"you byte-compile @var{foo}.  Otherwise, you risk compiling @var{foo} without "
"the necessary macro loaded, and that would produce compiled code that won't "
"work right.  @xref{Compiling Macros}."
msgstr ""

# type: itemize
#: lispref/tips.texi:114
msgid ""
"Using @code{eval-when-compile} avoids loading @var{bar} when the compiled "
"version of @var{foo} is @emph{used}."
msgstr ""

# type: itemize
#: lispref/tips.texi:120
msgid ""
"Please don't require the @code{cl} package of Common Lisp extensions at run "
"time.  Use of this package is optional, and it is not part of the standard "
"Emacs namespace.  If your package loads @code{cl} at run time, that could "
"cause name clashes for users who don't use that package."
msgstr ""

# type: itemize
#: lispref/tips.texi:125
msgid ""
"However, there is no problem with using the @code{cl} package at compile "
"time, with @code{(eval-when-compile (require 'cl))}.  That's sufficient for "
"using the macros in the @code{cl} package, because the compiler expands them "
"before generating the byte-code."
msgstr ""

# type: itemize
#: lispref/tips.texi:129
msgid ""
"When defining a major mode, please follow the major mode conventions.  @xref"
"{Major Mode Conventions}."
msgstr ""

# type: itemize
#: lispref/tips.texi:133
msgid ""
"When defining a minor mode, please follow the minor mode conventions.  @xref"
"{Minor Mode Conventions}."
msgstr ""

# type: itemize
#: lispref/tips.texi:139
msgid ""
"If the purpose of a function is to tell you whether a certain condition is "
"true or false, give the function a name that ends in @samp{p}.  If the name "
"is one word, add just @samp{p}; if the name is multiple words, add @samp{-"
"p}.  Examples are @code{framep} and @code{frame-live-p}."
msgstr ""

# type: itemize
#: lispref/tips.texi:143
msgid ""
"If a user option variable records a true-or-false condition, give it a name "
"that ends in @samp{-flag}."
msgstr ""

# type: itemize
#: lispref/tips.texi:149
msgid ""
"If the purpose of a variable is to store a single function, give it a name "
"that ends in @samp{-function}.  If the purpose of a variable is to store a "
"list of functions (i.e., the variable is a hook), please follow the naming "
"conventions for hooks.  @xref{Hooks}."
msgstr ""

# type: cindex
#: lispref/tips.texi:151
#, no-wrap
msgid "unloading packages, preparing for"
msgstr ""

# type: itemize
#: lispref/tips.texi:157
msgid ""
"If loading the file adds functions to hooks, define a function @code{@var"
"{feature}-unload-hook}, where @var{feature} is the name of the feature the "
"package provides, and make it undo any such changes.  Using @code{unload-"
"feature} to unload the file will run this function.  @xref{Unloading}."
msgstr ""

# type: itemize
#: lispref/tips.texi:163
msgid ""
"It is a bad idea to define aliases for the Emacs primitives.  Normally you "
"should use the standard names instead.  The case where an alias may be "
"useful is where it facilitates backwards compatibility or portability."
msgstr ""

# type: itemize
#: lispref/tips.texi:170
msgid ""
"If a package needs to define an alias or a new function for compatibility "
"with some other version of Emacs, name it with the package prefix, not with "
"the raw name with which it occurs in the other version.  Here is an example "
"from Gnus, which provides many examples of such compatibility issues."
msgstr ""

# type: example
#: lispref/tips.texi:176
#, no-wrap
msgid ""
"(defalias 'gnus-point-at-bol\n"
"  (if (fboundp 'point-at-bol)\n"
"      'point-at-bol\n"
"    'line-beginning-position))\n"
msgstr ""

# type: itemize
#: lispref/tips.texi:186
msgid ""
"Redefining (or advising) an Emacs primitive is a bad idea.  It may do the "
"right thing for a particular program, but there is no telling what other "
"programs might break as a result.  In any case, it is a problem for "
"debugging, because the advised function doesn't do what its source code says "
"it does.  If the programmer investigating the problem is unaware that there "
"is advice on the function, the experience can be very frustrating."
msgstr ""

# type: itemize
#: lispref/tips.texi:189
msgid ""
"We hope to remove all the places in Emacs that advise primitives.  In the "
"mean time, please don't add any more."
msgstr ""

# type: itemize
#: lispref/tips.texi:193
msgid ""
"It is likewise a bad idea for one Lisp package to advise a function in "
"another Lisp package."
msgstr ""

# type: itemize
#: lispref/tips.texi:201
msgid ""
"Likewise, avoid using @code{eval-after-load} (@pxref{Hooks for Loading}) in "
"libraries and packages.  This feature is meant for personal customizations; "
"using it in a Lisp program is unclean, because it modifies the behavior of "
"another Lisp file in a way that's not visible in that file.  This is an "
"obstacle for debugging, much like advising a function in the other package."
msgstr ""

# type: itemize
#: lispref/tips.texi:207
msgid ""
"If a file does replace any of the functions or library programs of standard "
"Emacs, prominent comments at the beginning of the file should say which "
"functions are replaced, and how the behavior of the replacements differs "
"from that of the originals."
msgstr ""

# type: itemize
#: lispref/tips.texi:211
msgid ""
"Constructs that define a function or variable should be macros, not "
"functions, and their names should start with @samp{def}."
msgstr ""

# type: itemize
#: lispref/tips.texi:218
msgid ""
"A macro that defines a function or variable should have a name that starts "
"with @samp{define-}.  The macro should receive the name to be defined as the "
"first argument.  That will help various tools find the definition "
"automatically.  Avoid constructing the names in the macro itself, since that "
"would confuse these tools."
msgstr ""

# type: itemize
#: lispref/tips.texi:224
msgid ""
"Please keep the names of your Emacs Lisp source files to 13 characters or "
"less.  This way, if the files are compiled, the compiled files' names will "
"be 14 characters or less, which is short enough to fit on all kinds of Unix "
"systems."
msgstr ""

# type: itemize
#: lispref/tips.texi:231
msgid ""
"In some other systems there is a convention of choosing variable names that "
"begin and end with @samp{*}.  We don't use that convention in Emacs Lisp, so "
"please don't use it in your programs.  (Emacs uses such names only for "
"special-purpose buffers.)  The users will find Emacs more coherent if all "
"libraries use the same conventions."
msgstr ""

# type: itemize
#: lispref/tips.texi:237
msgid ""
"If your program contains non-ASCII characters in string or character "
"constants, you should make sure Emacs always decodes these characters the "
"same way, regardless of the user's settings.  There are two ways to do that:"
msgstr ""

# type: itemize
#: lispref/tips.texi:242
msgid ""
"Use coding system @code{emacs-mule}, and specify that for @code{coding} in "
"the @samp{-*-} line or the local variables list."
msgstr ""

# type: example
#: lispref/tips.texi:245
#, no-wrap
msgid ";; XXX.el  -*- coding: emacs-mule; -*-\n"
msgstr ""

# type: itemize
#: lispref/tips.texi:252
msgid ""
"Use one of the coding systems based on ISO 2022 (such as iso-8859-@var{n} "
"and iso-2022-7bit), and specify it with @samp{!} at the end for @code"
"{coding}.  (The @samp{!} turns off any possible character translation.)"
msgstr ""

# type: example
#: lispref/tips.texi:255
#, no-wrap
msgid ";; XXX.el -*- coding: iso-latin-2!; -*-\n"
msgstr ""

# type: itemize
#: lispref/tips.texi:261
msgid ""
"Indent each function with @kbd{C-M-q} (@code{indent-sexp}) using the default "
"indentation parameters."
msgstr ""

# type: itemize
#: lispref/tips.texi:267
msgid ""
"Don't make a habit of putting close-parentheses on lines by themselves; Lisp "
"programmers find this disconcerting.  Once in a while, when there is a "
"sequence of many consecutive close-parentheses, it may make sense to split "
"the sequence in one or two significant places."
msgstr ""

# type: itemize
#: lispref/tips.texi:271
msgid ""
"Please put a copyright notice and copying permission notice on the file if "
"you distribute copies.  Use a notice like this one:"
msgstr ""

# type: smallexample
#: lispref/tips.texi:274
#, no-wrap
msgid ""
";; Copyright (C) @var{year} @var{name}\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/tips.texi:279
#, no-wrap
msgid ""
";; This program is free software; you can redistribute it and/or\n"
";; modify it under the terms of the GNU General Public License as\n"
";; published by the Free Software Foundation; either version 2 of\n"
";; the License, or (at your option) any later version.\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/tips.texi:284
#, no-wrap
msgid ""
";; This program is distributed in the hope that it will be\n"
";; useful, but WITHOUT ANY WARRANTY; without even the implied\n"
";; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n"
";; PURPOSE.  See the GNU General Public License for more details.\n"
"\n"
msgstr ""

# type: smallexample
#: lispref/tips.texi:289
#, no-wrap
msgid ""
";; You should have received a copy of the GNU General Public\n"
";; License along with this program; if not, write to the Free\n"
";; Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n"
";; Boston, MA 02110-1301 USA\n"
msgstr ""

# type: itemize
#: lispref/tips.texi:294
msgid ""
"If you have signed papers to assign the copyright to the Foundation, then "
"use @samp{Free Software Foundation, Inc.} as @var{name}.  Otherwise, use "
"your name.  See also @xref{Library Headers}."
msgstr ""

# type: cindex
#: lispref/tips.texi:298
#, no-wrap
msgid "key binding, conventions for"
msgstr ""

# type: cindex
#: lispref/tips.texi:302
#, no-wrap
msgid "mouse-2"
msgstr ""

# type: cindex
#: lispref/tips.texi:303
#, no-wrap
msgid "references, following"
msgstr ""

# type: itemize
#: lispref/tips.texi:308
msgid ""
"Special major modes used for read-only text should usually redefine @kbd"
"{mouse-2} and @key{RET} to trace some sort of reference in the text.  Modes "
"such as Dired, Info, Compilation, and Occur redefine it in this way."
msgstr ""

# type: itemize
#: lispref/tips.texi:311
msgid ""
"In addition, they should mark the text as a kind of ``link'' so that @kbd"
"{mouse-1} will follow it also.  @xref{Links and Mouse-1}."
msgstr ""

# type: cindex
#: lispref/tips.texi:313
#, no-wrap
msgid "reserved keys"
msgstr ""

# type: cindex
#: lispref/tips.texi:314
#, no-wrap
msgid "keys, reserved"
msgstr ""

# type: itemize
#: lispref/tips.texi:319
msgid ""
"Please do not define @kbd{C-c @var{letter}} as a key in Lisp programs.  "
"Sequences consisting of @kbd{C-c} and a letter (either upper or lower case) "
"are reserved for users; they are the @strong{only} sequences reserved for "
"users, so do not block them."
msgstr ""

# type: itemize
#: lispref/tips.texi:323
msgid ""
"Changing all the Emacs major modes to respect this convention was a lot of "
"work; abandoning this convention would make that work go to waste, and "
"inconvenience users.  Please comply with it."
msgstr ""

# type: itemize
#: lispref/tips.texi:327
msgid ""
"Function keys @key{F5} through @key{F9} without modifier keys are also "
"reserved for users to define."
msgstr ""

# type: itemize
#: lispref/tips.texi:333
msgid ""
"Applications should not bind mouse events based on button 1 with the shift "
"key held down.  These events include @kbd{S-mouse-1}, @kbd{M-S-mouse-1}, @kbd"
"{C-S-mouse-1}, and so on.  They are reserved for users."
msgstr ""

# type: itemize
#: lispref/tips.texi:337
msgid ""
"Sequences consisting of @kbd{C-c} followed by a control character or a digit "
"are reserved for major modes."
msgstr ""

# type: itemize
#: lispref/tips.texi:341
msgid ""
"Sequences consisting of @kbd{C-c} followed by @kbd{@{}, @kbd{@}}, @kbd{<}, "
"@kbd{>}, @kbd{:} or @kbd{;} are also reserved for major modes."
msgstr ""

# type: itemize
#: lispref/tips.texi:347
msgid ""
"Sequences consisting of @kbd{C-c} followed by any other punctuation "
"character are allocated for minor modes.  Using them in a major mode is not "
"absolutely prohibited, but if you do that, the major mode binding may be "
"shadowed from time to time by minor modes."
msgstr ""

# type: itemize
#: lispref/tips.texi:352
msgid ""
"Do not bind @kbd{C-h} following any prefix character (including @kbd{C-c}).  "
"If you don't bind @kbd{C-h}, it is automatically available as a help "
"character for listing the subcommands of the prefix character."
msgstr ""

# type: itemize
#: lispref/tips.texi:357
msgid ""
"Do not bind a key sequence ending in @key{ESC} except following another @key"
"{ESC}.  (That is, it is OK to bind a sequence ending in @kbd{@key{ESC} @key"
"{ESC}}.)"
msgstr ""

# type: itemize
#: lispref/tips.texi:361
msgid ""
"The reason for this rule is that a non-prefix binding for @key{ESC} in any "
"context prevents recognition of escape sequences as function keys in that "
"context."
msgstr ""

# type: itemize
#: lispref/tips.texi:366
msgid ""
"Anything which acts like a temporary mode or state which the user can enter "
"and leave should define @kbd{@key{ESC} @key{ESC}} or @kbd{@key{ESC} @key"
"{ESC} @key{ESC}} as a way to escape."
msgstr ""

# type: itemize
#: lispref/tips.texi:374
msgid ""
"For a state which accepts ordinary Emacs commands, or more generally any "
"kind of state in which @key{ESC} followed by a function key or arrow key is "
"potentially meaningful, then you must not define @kbd{@key{ESC} @key{ESC}}, "
"since that would preclude recognizing an escape sequence after @key{ESC}.  "
"In these states, you should define @kbd{@key{ESC} @key{ESC} @key{ESC}} as "
"the way to escape.  Otherwise, define @kbd{@key{ESC} @key{ESC}} instead."
msgstr ""

# type: section
#: lispref/tips.texi:377
#, no-wrap
msgid "Emacs Programming Tips"
msgstr ""

# type: cindex
#: lispref/tips.texi:378
#, no-wrap
msgid "programming conventions"
msgstr ""

# type: Plain text
#: lispref/tips.texi:382
msgid ""
"Following these conventions will make your program fit better into Emacs "
"when it runs."
msgstr ""

# type: itemize
#: lispref/tips.texi:388
msgid ""
"Don't use @code{next-line} or @code{previous-line} in programs; nearly "
"always, @code{forward-line} is more convenient as well as more predictable "
"and robust.  @xref{Text Lines}."
msgstr ""

# type: itemize
#: lispref/tips.texi:394
msgid ""
"Don't call functions that set the mark, unless setting the mark is one of "
"the intended features of your program.  The mark is a user-level feature, so "
"it is incorrect to change the mark except to supply a value for the user's "
"benefit.  @xref{The Mark}."
msgstr ""

# type: itemize
#: lispref/tips.texi:396
msgid "In particular, don't use any of these functions:"
msgstr ""

# type: itemize
#: lispref/tips.texi:400
msgid "@code{beginning-of-buffer}, @code{end-of-buffer}"
msgstr ""

# type: itemize
#: lispref/tips.texi:402
msgid "@code{replace-string}, @code{replace-regexp}"
msgstr ""

# type: itemize
#: lispref/tips.texi:404
msgid "@code{insert-file}, @code{insert-buffer}"
msgstr ""

# type: itemize
#: lispref/tips.texi:410
msgid ""
"If you just want to move point, or replace a certain string, or insert a "
"file or buffer's contents, without any of the other features intended for "
"interactive users, you can replace these functions with one or two lines of "
"simple Lisp code."
msgstr ""

# type: itemize
#: lispref/tips.texi:415
msgid ""
"Use lists rather than vectors, except when there is a particular reason to "
"use a vector.  Lisp has more facilities for manipulating lists than for "
"vectors, and working with lists is usually more convenient."
msgstr ""

# type: itemize
#: lispref/tips.texi:419
msgid ""
"Vectors are advantageous for tables that are substantial in size and are "
"accessed in random order (not searched front to back), provided there is no "
"need to insert or delete elements (only lists allow that)."
msgstr ""

# type: itemize
#: lispref/tips.texi:423
msgid ""
"The recommended way to show a message in the echo area is with the @code"
"{message} function, not @code{princ}.  @xref{The Echo Area}."
msgstr ""

# type: itemize
#: lispref/tips.texi:428
msgid ""
"When you encounter an error condition, call the function @code{error} (or "
"@code{signal}).  The function @code{error} does not return.  @xref{Signaling "
"Errors}."
msgstr ""

# type: itemize
#: lispref/tips.texi:431
msgid ""
"Do not use @code{message}, @code{throw}, @code{sleep-for}, or @code{beep} to "
"report errors."
msgstr ""

# type: itemize
#: lispref/tips.texi:435
msgid ""
"An error message should start with a capital letter but should not end with "
"a period."
msgstr ""

# type: itemize
#: lispref/tips.texi:440
msgid ""
"A question asked in the minibuffer with @code{y-or-n-p} or @code{yes-or-no-"
"p} should start with a capital letter and end with @samp{? }."
msgstr ""

# type: itemize
#: lispref/tips.texi:445
msgid ""
"When you mention a default value in a minibuffer prompt, put it and the word "
"@samp{default} inside parentheses.  It should look like this:"
msgstr ""

# type: example
#: lispref/tips.texi:448
#, no-wrap
msgid "Enter the answer (default 42):\n"
msgstr ""

# type: itemize
#: lispref/tips.texi:457
msgid ""
"In @code{interactive}, if you use a Lisp expression to produce a list of "
"arguments, don't try to provide the ``correct'' default values for region or "
"position arguments.  Instead, provide @code{nil} for those arguments if they "
"were not specified, and have the function body compute the default value "
"when the argument is @code{nil}.  For instance, write this:"
msgstr ""

# type: example
#: lispref/tips.texi:464
#, no-wrap
msgid ""
"(defun foo (pos)\n"
"  (interactive\n"
"   (list (if @var{specified} @var{specified-pos})))\n"
"  (unless pos (setq pos @var{default-pos}))\n"
"  ...)\n"
msgstr ""

# type: itemize
#: lispref/tips.texi:468
msgid "rather than this:"
msgstr ""

# type: example
#: lispref/tips.texi:475
#, no-wrap
msgid ""
"(defun foo (pos)\n"
"  (interactive\n"
"   (list (if @var{specified} @var{specified-pos}\n"
"             @var{default-pos})))\n"
"  ...)\n"
msgstr ""

# type: itemize
#: lispref/tips.texi:480
msgid ""
"This is so that repetition of the command will recompute these defaults "
"based on the current circumstances."
msgstr ""

# type: itemize
#: lispref/tips.texi:485
msgid ""
"You do not need to take such precautions when you use interactive specs @samp"
"{d}, @samp{m} and @samp{r}, because they make special arrangements to "
"recompute the argument values on repetition of the command."
msgstr ""

# type: itemize
#: lispref/tips.texi:492
msgid ""
"Many commands that take a long time to execute display a message that says "
"something like @samp{Operating...} when they start, and change it to @samp"
"{Operating...done} when they finish.  Please keep the style of these "
"messages uniform: @emph{no} space around the ellipsis, and @emph{no} period "
"after @samp{done}."
msgstr ""

# type: itemize
#: lispref/tips.texi:499
msgid ""
"Try to avoid using recursive edits.  Instead, do what the Rmail @kbd{e} "
"command does: use a new local keymap that contains one command defined to "
"switch back to the old local keymap.  Or do what the @code{edit-options} "
"command does: switch to another buffer and let the user switch back at "
"will.  @xref{Recursive Editing}."
msgstr ""

# type: section
#: lispref/tips.texi:502
#, no-wrap
msgid "Tips for Making Compiled Code Fast"
msgstr ""

# type: cindex
#: lispref/tips.texi:503
#, no-wrap
msgid "execution speed"
msgstr ""

# type: cindex
#: lispref/tips.texi:504
#, no-wrap
msgid "speedups"
msgstr ""

# type: Plain text
#: lispref/tips.texi:508
msgid ""
"Here are ways of improving the execution speed of byte-compiled Lisp "
"programs."
msgstr ""

# type: cindex
#: lispref/tips.texi:511
#, no-wrap
msgid "profiling"
msgstr ""

# type: cindex
#: lispref/tips.texi:512
#, no-wrap
msgid "timing programs"
msgstr ""

# type: file{#1}
#: lispref/tips.texi:513
#, no-wrap
msgid "elp.el"
msgstr ""

# type: itemize
#: lispref/tips.texi:516
msgid ""
"Profile your program with the @file{elp} library.  See the file @file{elp."
"el} for instructions."
msgstr ""

# type: file{#1}
#: lispref/tips.texi:518
#, no-wrap
msgid "benchmark.el"
msgstr ""

# type: cindex
#: lispref/tips.texi:519
#, no-wrap
msgid "benchmarking"
msgstr ""

# type: itemize
#: lispref/tips.texi:523
msgid ""
"Check the speed of individual Emacs Lisp forms using the @file{benchmark} "
"library.  See the functions @code{benchmark-run} and @code{benchmark-run-"
"compiled} in @file{benchmark.el}."
msgstr ""

# type: itemize
#: lispref/tips.texi:528
msgid ""
"Use iteration rather than recursion whenever possible.  Function calls are "
"slow in Emacs Lisp even when a compiled function is calling another compiled "
"function."
msgstr ""

# type: itemize
#: lispref/tips.texi:534
msgid ""
"Using the primitive list-searching functions @code{memq}, @code{member}, "
"@code{assq}, or @code{assoc} is even faster than explicit iteration.  It can "
"be worth rearranging a data structure so that one of these primitive search "
"functions can be used."
msgstr ""

# type: itemize
#: lispref/tips.texi:542
msgid ""
"Certain built-in functions are handled specially in byte-compiled code, "
"avoiding the need for an ordinary function call.  It is a good idea to use "
"these functions rather than alternatives.  To see whether a function is "
"handled specially by the compiler, examine its @code{byte-compile} "
"property.  If the property is non-@code{nil}, then the function is handled "
"specially."
msgstr ""

# type: itemize
#: lispref/tips.texi:545
msgid ""
"For example, the following input will show you that @code{aref} is compiled "
"specially (@pxref{Array Functions}):"
msgstr ""

# type: group
#: lispref/tips.texi:550
#, no-wrap
msgid ""
"(get 'aref 'byte-compile)\n"
"     @result{} byte-compile-two-args\n"
msgstr ""

# type: itemize
#: lispref/tips.texi:560
msgid ""
"If calling a small function accounts for a substantial part of your "
"program's running time, make the function inline.  This eliminates the "
"function call overhead.  Since making a function inline reduces the "
"flexibility of changing the program, don't do it unless it gives a "
"noticeable speedup in something slow enough that users care about the "
"speed.  @xref{Inline Functions}."
msgstr ""

# type: section
#: lispref/tips.texi:563
#, no-wrap
msgid "Tips for Avoiding Compiler Warnings"
msgstr ""

# type: cindex
#: lispref/tips.texi:564
#, no-wrap
msgid "byte compiler warnings, how to avoid"
msgstr ""

# type: itemize
#: lispref/tips.texi:570
msgid ""
"Try to avoid compiler warnings about undefined free variables, by adding "
"dummy @code{defvar} definitions for these variables, like this:"
msgstr ""

# type: example
#: lispref/tips.texi:573
#, no-wrap
msgid "(defvar foo)\n"
msgstr ""

# type: itemize
#: lispref/tips.texi:577
msgid ""
"Such a definition has no effect except to tell the compiler not to warn "
"about uses of the variable @code{foo} in this file."
msgstr ""

# type: itemize
#: lispref/tips.texi:582
msgid ""
"If you use many functions and variables from a certain file, you can add a "
"@code{require} for that package to avoid compilation warnings for them.  For "
"instance,"
msgstr ""

# type: example
#: lispref/tips.texi:586
#, no-wrap
msgid ""
"(eval-when-compile\n"
"  (require 'foo))\n"
msgstr ""

# type: itemize
#: lispref/tips.texi:596
msgid ""
"If you bind a variable in one function, and use it or set it in another "
"function, the compiler warns about the latter function unless the variable "
"has a definition.  But adding a definition would be unclean if the variable "
"has a short name, since Lisp packages should not define short variable "
"names.  The right thing to do is to rename this variable to start with the "
"name prefix used for the other functions and variables in your package."
msgstr ""

# type: itemize
#: lispref/tips.texi:601
msgid ""
"The last resort for avoiding a warning, when you want to do something that "
"usually is a mistake but it's not a mistake in this one case, is to put a "
"call to @code{with-no-warnings} around it."
msgstr ""

# type: section
#: lispref/tips.texi:604
#, no-wrap
msgid "Tips for Documentation Strings"
msgstr ""

# type: cindex
#: lispref/tips.texi:605
#, no-wrap
msgid "documentation strings, conventions and tips"
msgstr ""

# type: findex
#: lispref/tips.texi:607
#, no-wrap
msgid "checkdoc-minor-mode"
msgstr "checkdoc-minor-mode"

# type: Plain text
#: lispref/tips.texi:611
msgid ""
"Here are some tips and conventions for the writing of documentation "
"strings.  You can check many of these conventions by running the command @kbd"
"{M-x checkdoc-minor-mode}."
msgstr ""

# type: itemize
#: lispref/tips.texi:616
msgid ""
"Every command, function, or variable intended for users to know about should "
"have a documentation string."
msgstr ""

# type: itemize
#: lispref/tips.texi:623
msgid ""
"An internal variable or subroutine of a Lisp program might as well have a "
"documentation string.  In earlier Emacs versions, you could save space by "
"using a comment instead of a documentation string, but that is no longer the "
"case---documentation strings now take up very little space in a running "
"Emacs."
msgstr ""

# type: itemize
#: lispref/tips.texi:629
msgid ""
"Format the documentation string so that it fits in an Emacs window on an 80-"
"column screen.  It is a good idea for most lines to be no wider than 60 "
"characters.  The first line should not be wider than 67 characters or it "
"will look bad in the output of @code{apropos}."
msgstr ""

# type: itemize
#: lispref/tips.texi:634
msgid ""
"You can fill the text if that looks good.  However, rather than blindly "
"filling the entire documentation string, you can often make it much more "
"readable by choosing certain line breaks with care.  Use blank lines between "
"topics if the documentation string is long."
msgstr ""

# type: itemize
#: lispref/tips.texi:641
msgid ""
"The first line of the documentation string should consist of one or two "
"complete sentences that stand on their own as a summary.  @kbd{M-x apropos} "
"displays just the first line, and if that line's contents don't stand on "
"their own, the result looks bad.  In particular, start the first line with a "
"capital letter and end with a period."
msgstr ""

# type: itemize
#: lispref/tips.texi:645
msgid ""
"For a function, the first line should briefly answer the question, ``What "
"does this function do?'' For a variable, the first line should briefly "
"answer the question, ``What does this value mean?''"
msgstr ""

# type: itemize
#: lispref/tips.texi:649
msgid ""
"Don't limit the documentation string to one line; use as many lines as you "
"need to explain the details of how to use the function or variable.  Please "
"use complete sentences for the rest of the text too."
msgstr ""

# type: itemize
#: lispref/tips.texi:655
msgid ""
"When the user tries to use a disabled command, Emacs displays just the first "
"paragraph of its documentation string---everything through the first blank "
"line.  If you wish, you can choose which information to include before the "
"first blank line so as to make this display useful."
msgstr ""

# type: itemize
#: lispref/tips.texi:663
msgid ""
"The first line should mention all the important arguments of the function, "
"and should mention them in the order that they are written in a function "
"call.  If the function has many arguments, then it is not feasible to "
"mention them all in the first line; in that case, the first line should "
"mention the first few arguments, including the most important arguments."
msgstr ""

# type: itemize
#: lispref/tips.texi:670
msgid ""
"When a function's documentation string mentions the value of an argument of "
"the function, use the argument name in capital letters as if it were a name "
"for that value.  Thus, the documentation string of the function @code{eval} "
"refers to its second argument as @samp{FORM}, because the actual argument "
"name is @code{form}:"
msgstr ""

# type: example
#: lispref/tips.texi:673
#, no-wrap
msgid "Evaluate FORM and return its value.\n"
msgstr ""

# type: itemize
#: lispref/tips.texi:679
msgid ""
"Also write metasyntactic variables in capital letters, such as when you show "
"the decomposition of a list or vector into subunits, some of which may "
"vary.  @samp{KEY} and @samp{VALUE} in the following example illustrate this "
"practice:"
msgstr ""

# type: example
#: lispref/tips.texi:683
#, no-wrap
msgid ""
"The argument TABLE should be an alist whose elements\n"
"have the form (KEY . VALUE).  Here, KEY is ...\n"
msgstr ""

# type: itemize
#: lispref/tips.texi:689
msgid ""
"Never change the case of a Lisp symbol when you mention it in a doc string.  "
"If the symbol's name is @code{foo}, write ``foo,'' not ``Foo'' (which is a "
"different symbol)."
msgstr ""

# type: itemize
#: lispref/tips.texi:694
msgid ""
"This might appear to contradict the policy of writing function argument "
"values, but there is no real contradiction; the argument @emph{value} is not "
"the same thing as the @emph{symbol} which the function uses to hold the "
"value."
msgstr ""

# type: itemize
#: lispref/tips.texi:698
msgid ""
"If this puts a lower-case letter at the beginning of a sentence and that "
"annoys you, rewrite the sentence so that the symbol is not at the start of "
"it."
msgstr ""

# type: itemize
#: lispref/tips.texi:701
msgid "Do not start or end a documentation string with whitespace."
msgstr ""

# type: itemize
#: lispref/tips.texi:708
msgid ""
"@strong{Do not} indent subsequent lines of a documentation string so that "
"the text is lined up in the source code with the text of the first line.  "
"This looks nice in the source code, but looks bizarre when users view the "
"documentation.  Remember that the indentation before the starting double-"
"quote is not part of the string!"
msgstr ""

# type: anchor{#1}
#: lispref/tips.texi:710
msgid "Docstring hyperlinks"
msgstr ""

# type: iftex
#: lispref/tips.texi:716
msgid ""
"When a documentation string refers to a Lisp symbol, write it as it would be "
"printed (which usually means in lower case), with single-quotes around it.  "
"For example: @samp{`lambda'}.  There are two exceptions: write @code{t} and "
"@code{nil} without single-quotes."
msgstr ""

# type: ifnottex
#: lispref/tips.texi:723
msgid ""
"When a documentation string refers to a Lisp symbol, write it as it would be "
"printed (which usually means in lower case), with single-quotes around it.  "
"For example: @samp{lambda}.  There are two exceptions: write t and nil "
"without single-quotes.  (In this manual, we use a different convention, with "
"single-quotes for all symbols.)"
msgstr ""

# type: cindex
#: lispref/tips.texi:725
#, no-wrap
msgid "hyperlinks in documentation strings"
msgstr ""

# type: itemize
#: lispref/tips.texi:735
msgid ""
"Help mode automatically creates a hyperlink when a documentation string uses "
"a symbol name inside single quotes, if the symbol has either a function or a "
"variable definition.  You do not need to do anything special to make use of "
"this feature.  However, when a symbol has both a function definition and a "
"variable definition, and you want to refer to just one of them, you can "
"specify which one by writing one of the words @samp{variable}, @samp"
"{option}, @samp{function}, or @samp{command}, immediately before the symbol "
"name.  (Case makes no difference in recognizing these indicator words.)  For "
"example, if you write"
msgstr ""

# type: example
#: lispref/tips.texi:738
#, no-wrap
msgid "This function sets the variable `buffer-file-name'.\n"
msgstr ""

# type: itemize
#: lispref/tips.texi:743
msgid ""
"then the hyperlink will refer only to the variable documentation of @code"
"{buffer-file-name}, and not to its function documentation."
msgstr ""

# type: itemize
#: lispref/tips.texi:748
msgid ""
"If a symbol has a function definition and/or a variable definition, but "
"those are irrelevant to the use of the symbol that you are documenting, you "
"can write the words @samp{symbol} or @samp{program} before the symbol name "
"to prevent making any hyperlink.  For example,"
msgstr ""

# type: example
#: lispref/tips.texi:753
#, no-wrap
msgid ""
"If the argument KIND-OF-RESULT is the symbol `list',\n"
"this function returns a list of all the objects\n"
"that satisfy the criterion.\n"
msgstr ""

# type: itemize
#: lispref/tips.texi:758
msgid ""
"does not make a hyperlink to the documentation, irrelevant here, of the "
"function @code{list}."
msgstr ""

# type: itemize
#: lispref/tips.texi:763
msgid ""
"Normally, no hyperlink is made for a variable without variable "
"documentation.  You can force a hyperlink for such variables by preceding "
"them with one of the words @samp{variable} or @samp{option}."
msgstr ""

# type: itemize
#: lispref/tips.texi:768
msgid ""
"Hyperlinks for faces are only made if the face name is preceded or followed "
"by the word @samp{face}.  In that case, only the face documentation will be "
"shown, even if the symbol is also defined as a variable or as a function."
msgstr ""

# type: itemize
#: lispref/tips.texi:773
msgid ""
"To make a hyperlink to Info documentation, write the name of the Info node "
"(or anchor) in single quotes, preceded by @samp{info node}, @samp{Info "
"node}, @samp{info anchor} or @samp{Info anchor}.  The Info file name "
"defaults to @samp{emacs}.  For example,"
msgstr ""

# type: smallexample
#: lispref/tips.texi:776
#, no-wrap
msgid "See Info node `Font Lock' and Info node `(elisp)Font Lock Basics'.\n"
msgstr ""

# type: itemize
#: lispref/tips.texi:780
msgid ""
"Finally, to create a hyperlink to URLs, write the URL in single quotes, "
"preceded by @samp{URL}. For example,"
msgstr ""

# type: smallexample
#: lispref/tips.texi:784
#, no-wrap
msgid ""
"The home page for the GNU project has more information (see URL\n"
"`http://www.gnu.org/').\n"
msgstr ""

# type: itemize
#: lispref/tips.texi:794
msgid ""
"Don't write key sequences directly in documentation strings.  Instead, use "
"the @samp{\\\\[@dots{}]} construct to stand for them.  For example, instead "
"of writing @samp{C-f}, write the construct @samp{\\\\[forward-char]}.  When "
"Emacs displays the documentation string, it substitutes whatever key is "
"currently bound to @code{forward-char}.  (This is normally @samp{C-f}, but "
"it may be some other character if the user has moved key bindings.)  @xref"
"{Keys in Documentation}."
msgstr ""

# type: itemize
#: lispref/tips.texi:803
msgid ""
"In documentation strings for a major mode, you will want to refer to the key "
"bindings of that mode's local map, rather than global ones.  Therefore, use "
"the construct @samp{\\\\<@dots{}>} once in the documentation string to "
"specify which key map to use.  Do this before the first use of @samp{\\"
"\\[@dots{}]}.  The text inside the @samp{\\\\<@dots{}>} should be the name "
"of the variable containing the local keymap for the major mode."
msgstr ""

# type: itemize
#: lispref/tips.texi:808
msgid ""
"It is not practical to use @samp{\\\\[@dots{}]} very many times, because "
"display of the documentation string will become slow.  So use this to "
"describe the most important commands in your major mode, and then use @samp"
"{\\\\@{@dots{}@}} to display the rest of the mode's keymap."
msgstr ""

# type: itemize
#: lispref/tips.texi:816
msgid ""
"For consistency, phrase the verb in the first sentence of a function's "
"documentation string as an imperative---for instance, use ``Return the cons "
"of A and B.'' in preference to ``Returns the cons of A and B@.'' Usually it "
"looks good to do likewise for the rest of the first paragraph.  Subsequent "
"paragraphs usually look better if each sentence is indicative and has a "
"proper subject."
msgstr ""

# type: itemize
#: lispref/tips.texi:823
msgid ""
"The documentation string for a function that is a yes-or-no predicate should "
"start with words such as ``Return t if,'' to indicate explicitly what "
"constitutes ``truth.'' The word ``return'' avoids starting the sentence with "
"lower-case ``t,'' which could be somewhat distracting."
msgstr ""

# type: itemize
#: lispref/tips.texi:827
msgid ""
"If a line in a documentation string begins with an open-parenthesis, write a "
"backslash before the open-parenthesis, like this:"
msgstr ""

# type: example
#: lispref/tips.texi:831
#, no-wrap
msgid ""
"The argument FOO can be either a number\n"
"\\(a buffer position) or a string (a file name).\n"
msgstr ""

# type: itemize
#: lispref/tips.texi:835
msgid ""
"This prevents the open-parenthesis from being treated as the start of a "
"defun (@pxref{Defuns,, Defuns, emacs, The GNU Emacs Manual})."
msgstr ""

# type: itemize
#: lispref/tips.texi:841
msgid ""
"Write documentation strings in the active voice, not the passive, and in the "
"present tense, not the future.  For instance, use ``Return a list containing "
"A and B.'' instead of ``A list containing A and B will be returned.''"
msgstr ""

# type: itemize
#: lispref/tips.texi:846
msgid ""
"Avoid using the word ``cause'' (or its equivalents) unnecessarily.  Instead "
"of, ``Cause Emacs to display text in boldface,'' write just ``Display text "
"in boldface.''"
msgstr ""

# type: itemize
#: lispref/tips.texi:851
msgid ""
"When a command is meaningful only in a certain mode or situation, do mention "
"that in the documentation string.  For example, the documentation of @code"
"{dired-find-file} is:"
msgstr ""

# type: example
#: lispref/tips.texi:854
#, no-wrap
msgid "In Dired, visit the file or directory named on this line.\n"
msgstr ""

# type: itemize
#: lispref/tips.texi:861
msgid ""
"When you define a variable that users ought to set interactively, you "
"normally should use @code{defcustom}.  However, if for some reason you use "
"@code{defvar} instead, start the doc string with a @samp{*}.  @xref{Defining "
"Variables}."
msgstr ""

# type: itemize
#: lispref/tips.texi:867
msgid ""
"The documentation string for a variable that is a yes-or-no flag should "
"start with words such as ``Non-nil means,'' to make it clear that all non-"
"@code{nil} values are equivalent and indicate explicitly what @code{nil} and "
"non-@code{nil} mean."
msgstr ""

# type: section
#: lispref/tips.texi:870
#, no-wrap
msgid "Tips on Writing Comments"
msgstr ""

# type: cindex
#: lispref/tips.texi:871
#, no-wrap
msgid "comments, Lisp convention for"
msgstr ""

# type: Plain text
#: lispref/tips.texi:875
msgid ""
"We recommend these conventions for where to put comments and how to indent "
"them:"
msgstr ""

# type: item
#: lispref/tips.texi:877
#, no-wrap
msgid ";"
msgstr ""

# type: table
#: lispref/tips.texi:884
msgid ""
"Comments that start with a single semicolon, @samp{;}, should all be aligned "
"to the same column on the right of the source code.  Such comments usually "
"explain how the code on the same line does its job.  In Lisp mode and "
"related modes, the @kbd{M-;} (@code{indent-for-comment})  command "
"automatically inserts such a @samp{;} in the right place, or aligns such a "
"comment if it is already present."
msgstr ""

# type: table
#: lispref/tips.texi:886
msgid "This and following examples are taken from the Emacs sources."
msgstr ""

# type: group
#: lispref/tips.texi:893
#, no-wrap
msgid ""
"(setq base-version-list                 ; there was a base\n"
"      (assoc (substring fn 0 start-vn)  ; version to which\n"
"             file-version-assoc-list))  ; this looks like\n"
"                                        ; a subversion\n"
msgstr ""

# type: item
#: lispref/tips.texi:896
#, no-wrap
msgid ";;"
msgstr ""

# type: table
#: lispref/tips.texi:901
msgid ""
"Comments that start with two semicolons, @samp{;;}, should be aligned to the "
"same level of indentation as the code.  Such comments usually describe the "
"purpose of the following lines or the state of the program at that point.  "
"For example:"
msgstr ""

# type: group
#: lispref/tips.texi:909
#, no-wrap
msgid ""
"(prog1 (setq auto-fill-function\n"
"             @dots{}\n"
"             @dots{}\n"
"  ;; update mode line\n"
"  (force-mode-line-update)))\n"
msgstr ""

# type: table
#: lispref/tips.texi:913
msgid "We also normally use two semicolons for comments outside functions."
msgstr ""

# type: group
#: lispref/tips.texi:919
#, no-wrap
msgid ""
";; This Lisp code is run in Emacs\n"
";; when it is to operate as a server\n"
";; for other processes.\n"
msgstr ""

# type: table
#: lispref/tips.texi:927
msgid ""
"Every function that has no documentation string (presumably one that is used "
"only internally within the package it belongs to), should instead have a two-"
"semicolon comment right before the function, explaining what the function "
"does and how to call it properly.  Explain precisely what each argument "
"means and how the function interprets its possible values."
msgstr ""

# type: item
#: lispref/tips.texi:928
#, no-wrap
msgid ";;;"
msgstr ""

# type: table
#: lispref/tips.texi:938
msgid ""
"Comments that start with three semicolons, @samp{;;;}, should start at the "
"left margin.  These are used, occasionally, for comments within functions "
"that should start at the margin.  We also use them sometimes for comments "
"that are between functions---whether to use two or three semicolons depends "
"on whether the comment should be considered a ``heading'' by Outline minor "
"mode.  By default, comments starting with at least three semicolons "
"(followed by a single space and a non-whitespace character) are considered "
"headings, comments starting with two or less are not."
msgstr ""

# type: table
#: lispref/tips.texi:947
msgid ""
"Another use for triple-semicolon comments is for commenting out lines within "
"a function.  We use three semicolons for this precisely so that they remain "
"at the left margin.  By default, Outline minor mode does not consider a "
"comment to be a heading (even if it starts with at least three semicolons) "
"if the semicolons are followed by at least two spaces.  Thus, if you add an "
"introductory comment to the commented out code, make sure to indent it by at "
"least two spaces after the three semicolons."
msgstr ""

# type: smallexample
#: lispref/tips.texi:953
#, no-wrap
msgid ""
"(defun foo (a)\n"
";;;  This is no longer necessary.\n"
";;;  (force-mode-line-update)\n"
"  (message \"Finished with %s\" a))\n"
msgstr ""

# type: table
#: lispref/tips.texi:956
msgid "When commenting out entire functions, use two semicolons."
msgstr ""

# type: item
#: lispref/tips.texi:957
#, no-wrap
msgid ";;;;"
msgstr ""

# type: table
#: lispref/tips.texi:961
msgid ""
"Comments that start with four semicolons, @samp{;;;;}, should be aligned to "
"the left margin and are used for headings of major sections of a program.  "
"For example:"
msgstr ""

# type: smallexample
#: lispref/tips.texi:964
#, no-wrap
msgid ";;;; The kill ring\n"
msgstr ""

# type: Plain text
#: lispref/tips.texi:973
msgid ""
"The indentation commands of the Lisp modes in Emacs, such as @kbd{M-;} (@code"
"{indent-for-comment}) and @key{TAB} (@code{lisp-indent-line}), automatically "
"indent comments according to these conventions, depending on the number of "
"semicolons.  @xref{Comments,, Manipulating Comments, emacs, The GNU Emacs "
"Manual}."
msgstr ""

# type: section
#: lispref/tips.texi:975
#, no-wrap
msgid "Conventional Headers for Emacs Libraries"
msgstr ""

# type: cindex
#: lispref/tips.texi:976
#, no-wrap
msgid "header comments"
msgstr ""

# type: cindex
#: lispref/tips.texi:977
#, no-wrap
msgid "library header comments"
msgstr ""

# type: Plain text
#: lispref/tips.texi:982
msgid ""
"Emacs has conventions for using special comments in Lisp libraries to divide "
"them into sections and give information such as who wrote them.  This "
"section explains these conventions."
msgstr ""

# type: Plain text
#: lispref/tips.texi:985
msgid ""
"We'll start with an example, a package that is included in the Emacs "
"distribution."
msgstr ""

# type: Plain text
#: lispref/tips.texi:994
msgid ""
"Parts of this example reflect its status as part of Emacs; for example, the "
"copyright notice lists the Free Software Foundation as the copyright holder, "
"and the copying permission says the file is part of Emacs.  When you write a "
"package and post it, the copyright holder would be you (unless your employer "
"claims to own it instead), and you should get the suggested copying "
"permission from the end of the GNU General Public License itself.  Don't say "
"your file is part of Emacs if we haven't installed it in Emacs yet!"
msgstr ""

# type: Plain text
#: lispref/tips.texi:996
msgid "With that warning out of the way, on to the example:"
msgstr ""

# type: group
#: lispref/tips.texi:1000
#, no-wrap
msgid ""
";;; lisp-mnt.el --- minor mode for Emacs Lisp maintainers\n"
"\n"
msgstr ""

# type: group
#: lispref/tips.texi:1002
#, no-wrap
msgid ";; Copyright (C) 1992 Free Software Foundation, Inc.\n"
msgstr ""

# type: smallexample
#: lispref/tips.texi:1008
#, no-wrap
msgid ""
";; Author: Eric S. Raymond <esr@@snark.thyrsus.com>\n"
";; Maintainer: Eric S. Raymond <esr@@snark.thyrsus.com>\n"
";; Created: 14 Jul 1992\n"
";; Version: 1.2\n"
msgstr ""

# type: group
#: lispref/tips.texi:1010
#, no-wrap
msgid ""
";; Keywords: docs\n"
"\n"
msgstr ""

# type: group
#: lispref/tips.texi:1015
#, no-wrap
msgid ""
";; This file is part of GNU Emacs.\n"
"@dots{}\n"
";; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n"
";; Boston, MA 02110-1301, USA.\n"
msgstr ""

# type: Plain text
#: lispref/tips.texi:1019
msgid "The very first line should have this format:"
msgstr ""

# type: example
#: lispref/tips.texi:1022
#, no-wrap
msgid ";;; @var{filename} --- @var{description}\n"
msgstr ""

# type: Plain text
#: lispref/tips.texi:1027
msgid ""
"The description should be complete in one line.  If the file needs a @samp{-"
"*-} specification, put it after @var{description}."
msgstr ""

# type: Plain text
#: lispref/tips.texi:1031
msgid ""
"After the copyright notice come several @dfn{header comment} lines, each "
"beginning with @samp{;; @var{header-name}:}.  Here is a table of the "
"conventional possibilities for @var{header-name}:"
msgstr ""

# type: item
#: lispref/tips.texi:1033
#, no-wrap
msgid "Author"
msgstr ""

# type: table
#: lispref/tips.texi:1036
msgid ""
"This line states the name and net address of at least the principal author "
"of the library."
msgstr ""

# type: table
#: lispref/tips.texi:1039
msgid ""
"If there are multiple authors, you can list them on continuation lines led "
"by @code{;;} and a tab character, like this:"
msgstr ""

# type: group
#: lispref/tips.texi:1046
#, no-wrap
msgid ""
";; Author: Ashwin Ram <Ram-Ashwin@@cs.yale.edu>\n"
";;      Dave Sill <de5@@ornl.gov>\n"
";;      Dave Brennan <brennan@@hal.com>\n"
";;      Eric Raymond <esr@@snark.thyrsus.com>\n"
msgstr ""

# type: item
#: lispref/tips.texi:1049
#, no-wrap
msgid "Maintainer"
msgstr ""

# type: table
#: lispref/tips.texi:1055
msgid ""
"This line should contain a single name/address as in the Author line, or an "
"address only, or the string @samp{FSF}.  If there is no maintainer line, the "
"person(s) in the Author field are presumed to be the maintainers.  The "
"example above is mildly bogus because the maintainer line is redundant."
msgstr ""

# type: table
#: lispref/tips.texi:1059
msgid ""
"The idea behind the @samp{Author} and @samp{Maintainer} lines is to make "
"possible a Lisp function to ``send mail to the maintainer'' without having "
"to mine the name out by hand."
msgstr ""

# type: table
#: lispref/tips.texi:1062
msgid ""
"Be sure to surround the network address with @samp{<@dots{}>} if you include "
"the person's full name as well as the network address."
msgstr ""

# type: item
#: lispref/tips.texi:1063
#, no-wrap
msgid "Created"
msgstr ""

# type: table
#: lispref/tips.texi:1066
msgid ""
"This optional line gives the original creation date of the file.  For "
"historical interest only."
msgstr ""

# type: item
#: lispref/tips.texi:1067
#, no-wrap
msgid "Version"
msgstr ""

# type: table
#: lispref/tips.texi:1070
msgid ""
"If you wish to record version numbers for the individual Lisp program, put "
"them in this line."
msgstr ""

# type: item
#: lispref/tips.texi:1071
#, no-wrap
msgid "Adapted-By"
msgstr ""

# type: table
#: lispref/tips.texi:1075
msgid ""
"In this header line, place the name of the person who adapted the library "
"for installation (to make it fit the style conventions, for example)."
msgstr ""

# type: item
#: lispref/tips.texi:1076
#, no-wrap
msgid "Keywords"
msgstr ""

# type: table
#: lispref/tips.texi:1079
msgid ""
"This line lists keywords for the @code{finder-by-keyword} help command.  "
"Please use that command to see a list of the meaningful keywords."
msgstr ""

# type: table
#: lispref/tips.texi:1083
msgid ""
"This field is important; it's how people will find your package when they're "
"looking for things by topic area.  To separate the keywords, you can use "
"spaces, commas, or both."
msgstr ""

# type: Plain text
#: lispref/tips.texi:1089
msgid ""
"Just about every Lisp library ought to have the @samp{Author} and @samp"
"{Keywords} header comment lines.  Use the others if they are appropriate.  "
"You can also put in header lines with other header names---they have no "
"standard meanings, so they can't do any harm."
msgstr ""

# type: Plain text
#: lispref/tips.texi:1093
msgid ""
"We use additional stylized comments to subdivide the contents of the library "
"file.  These should be separated by blank lines from anything else.  Here is "
"a table of them:"
msgstr ""

# type: item
#: lispref/tips.texi:1095
#, no-wrap
msgid ";;; Commentary:"
msgstr ""

# type: table
#: lispref/tips.texi:1101
msgid ""
"This begins introductory comments that explain how the library works.  It "
"should come right after the copying permissions, terminated by a @samp"
"{Change Log}, @samp{History} or @samp{Code} comment line.  This text is used "
"by the Finder package, so it should make sense in that context."
msgstr ""

# type: item
#: lispref/tips.texi:1102
#, no-wrap
msgid ";;; Documentation:"
msgstr ""

# type: table
#: lispref/tips.texi:1105
msgid ""
"This was used in some files in place of @samp{;;; Commentary:}, but it is "
"deprecated."
msgstr ""

# type: item
#: lispref/tips.texi:1106
#, no-wrap
msgid ";;; Change Log:"
msgstr ""

# type: table
#: lispref/tips.texi:1112
msgid ""
"This begins change log information stored in the library file (if you store "
"the change history there).  For Lisp files distributed with Emacs, the "
"change history is kept in the file @file{ChangeLog} and not in the source "
"file at all; these files generally do not have a @samp{;;; Change Log:} "
"line.  @samp{History} is an alternative to @samp{Change Log}."
msgstr ""

# type: item
#: lispref/tips.texi:1113
#, no-wrap
msgid ";;; Code:"
msgstr ""

# type: table
#: lispref/tips.texi:1115
msgid "This begins the actual code of the program."
msgstr ""

# type: item
#: lispref/tips.texi:1116
#, no-wrap
msgid ";;; @var{filename} ends here"
msgstr ""

# type: table
#: lispref/tips.texi:1120
msgid ""
"This is the @dfn{footer line}; it appears at the very end of the file.  Its "
"purpose is to enable people to detect truncated versions of the file from "
"the lack of a footer line."
msgstr ""

# type: ignore
#: lispref/tips.texi:1124
#, no-wrap
msgid "   arch-tag: 9ea911c2-6b1d-47dd-88b7-0a94e8b27c2e\n"
msgstr ""

# type: Plain text
#: lispref/variables.texi:15
msgid ""
"A @dfn{variable} is a name used in a program to stand for a value.  Nearly "
"all programming languages have variables of some sort.  In the text of a "
"Lisp program, variables are written using the syntax for symbols."
msgstr ""

# type: Plain text
#: lispref/variables.texi:22
msgid ""
"In Lisp, unlike most programming languages, programs are represented "
"primarily as Lisp objects and only secondarily as text.  The Lisp objects "
"used for variables are symbols: the symbol name is the variable name, and "
"the variable's value is stored in the value cell of the symbol.  The use of "
"a symbol as a variable is independent of its use as a function name.  @xref"
"{Symbol Components}."
msgstr ""

# type: Plain text
#: lispref/variables.texi:28
msgid ""
"The Lisp objects that constitute a Lisp program determine the textual form "
"of the program---it is simply the read syntax for those Lisp objects.  This "
"is why, for example, a variable in a textual Lisp program is written using "
"the read syntax for the symbol that represents the variable."
msgstr ""

# type: menu
#: lispref/variables.texi:48 lispref/variables.texi:50
#: lispref/variables.texi:51 lispref/vol1.texi:459 lispref/vol2.texi:460
#, no-wrap
msgid "Global Variables"
msgstr ""

# type: menu
#: lispref/variables.texi:48 lispref/vol1.texi:459 lispref/vol2.texi:460
msgid "Variable values that exist permanently, everywhere."
msgstr ""

# type: menu
#: lispref/variables.texi:48 lispref/variables.texi:101 lispref/vol1.texi:459
#: lispref/vol2.texi:460
#, no-wrap
msgid "Constant Variables"
msgstr ""

# type: menu
#: lispref/variables.texi:48 lispref/vol1.texi:459 lispref/vol2.texi:460
msgid "Certain \"variables\" have values that never change."
msgstr ""

# type: menu
#: lispref/variables.texi:48 lispref/vol1.texi:459 lispref/vol2.texi:460
msgid "Variable values that exist only temporarily."
msgstr ""

# type: menu
#: lispref/variables.texi:48 lispref/variables.texi:285 lispref/vol1.texi:459
#: lispref/vol2.texi:460
#, no-wrap
msgid "Void Variables"
msgstr ""

# type: menu
#: lispref/variables.texi:48 lispref/vol1.texi:459 lispref/vol2.texi:460
msgid "Symbols that lack values."
msgstr ""

# type: menu
#: lispref/variables.texi:48 lispref/vol1.texi:459 lispref/vol2.texi:460
msgid "A definition says a symbol is used as a variable."
msgstr ""

# type: node
#: lispref/variables.texi:48 lispref/variables.texi:591
#, no-wrap
msgid "Tips for Defining"
msgstr ""

# type: menu
#: lispref/variables.texi:48
msgid "Things you should think about when you"
msgstr ""

# type: menu
#: lispref/variables.texi:48
msgid "define a variable."
msgstr ""

# type: menu
#: lispref/variables.texi:48 lispref/variables.texi:698 lispref/vol1.texi:459
#: lispref/vol2.texi:460
#, no-wrap
msgid "Accessing Variables"
msgstr ""

# type: menu
#: lispref/variables.texi:48 lispref/vol1.texi:459 lispref/vol2.texi:460
msgid "Examining values of variables whose names"
msgstr ""

# type: menu
#: lispref/variables.texi:48 lispref/vol1.texi:459 lispref/vol2.texi:460
msgid "are known only at run time."
msgstr ""

# type: menu
#: lispref/variables.texi:48 lispref/vol1.texi:459 lispref/vol2.texi:460
msgid "Storing new values in variables."
msgstr ""

# type: menu
#: lispref/variables.texi:48 lispref/variables.texi:863 lispref/vol1.texi:459
#: lispref/vol2.texi:460
#, no-wrap
msgid "Variable Scoping"
msgstr ""

# type: menu
#: lispref/variables.texi:48 lispref/vol1.texi:459 lispref/vol2.texi:460
msgid "How Lisp chooses among local and global values."
msgstr ""

# type: menu
#: lispref/variables.texi:48 lispref/vol1.texi:459 lispref/vol2.texi:460
msgid "Variable values in effect only in one buffer."
msgstr ""

# type: section
#: lispref/variables.texi:48 lispref/variables.texi:1523
#: lispref/variables.texi:1524
#, no-wrap
msgid "Frame-Local Variables"
msgstr ""

# type: menu
#: lispref/variables.texi:48
msgid "Variable values in effect only in one frame."
msgstr ""

# type: node
#: lispref/variables.texi:48 lispref/variables.texi:1629
#, no-wrap
msgid "Future Local Variables"
msgstr ""

# type: menu
#: lispref/variables.texi:48
msgid "New kinds of local values we might add some day."
msgstr ""

# type: section
#: lispref/variables.texi:48 lispref/variables.texi:1648
#: lispref/variables.texi:1649
#, no-wrap
msgid "File Local Variables"
msgstr ""

# type: menu
#: lispref/variables.texi:48
msgid "Handling local variable lists in files."
msgstr ""

# type: section
#: lispref/variables.texi:48 lispref/variables.texi:1782
#: lispref/variables.texi:1783
#, no-wrap
msgid "Variable Aliases"
msgstr ""

# type: menu
#: lispref/variables.texi:48
msgid "Variables that are aliases for other variables."
msgstr ""

# type: section
#: lispref/variables.texi:48 lispref/variables.texi:1871
#: lispref/variables.texi:1872
#, no-wrap
msgid "Variables with Restricted Values"
msgstr ""

# type: menu
#: lispref/variables.texi:48
msgid "Non-constant variables whose value can"
msgstr ""

# type: menu
#: lispref/variables.texi:48
msgid "@emph{not} be an arbitrary Lisp object."
msgstr ""

# type: cindex
#: lispref/variables.texi:52
#, no-wrap
msgid "global variable"
msgstr ""

# type: Plain text
#: lispref/variables.texi:59
msgid ""
"The simplest way to use a variable is @dfn{globally}.  This means that the "
"variable has just one value at a time, and this value is in effect (at least "
"for the moment) throughout the Lisp system.  The value remains in effect "
"until you specify a new one.  When a new value replaces the old one, no "
"trace of the old value remains in the variable."
msgstr ""

# type: Plain text
#: lispref/variables.texi:61
msgid "You specify a value for a symbol with @code{setq}.  For example,"
msgstr ""

# type: example
#: lispref/variables.texi:64
#, no-wrap
msgid "(setq x '(a b))\n"
msgstr ""

# type: Plain text
#: lispref/variables.texi:70
msgid ""
"gives the variable @code{x} the value @code{(a b)}.  Note that @code{setq} "
"does not evaluate its first argument, the name of the variable, but it does "
"evaluate the second argument, the new value."
msgstr ""

# type: Plain text
#: lispref/variables.texi:73
msgid ""
"Once the variable has a value, you can refer to it by using the symbol by "
"itself as an expression.  Thus,"
msgstr ""

# type: group
#: lispref/variables.texi:77
#, no-wrap
msgid "x @result{} (a b)\n"
msgstr ""

# type: Plain text
#: lispref/variables.texi:82
msgid "assuming the @code{setq} form shown above has already been executed."
msgstr ""

# type: Plain text
#: lispref/variables.texi:85
msgid ""
"If you do set the same variable again, the new value replaces the old one:"
msgstr ""

# type: group
#: lispref/variables.texi:90
#, no-wrap
msgid ""
"x\n"
"     @result{} (a b)\n"
msgstr ""

# type: group
#: lispref/variables.texi:94
#, no-wrap
msgid ""
"(setq x 4)\n"
"     @result{} 4\n"
msgstr ""

# type: group
#: lispref/variables.texi:98
#, no-wrap
msgid ""
"x\n"
"     @result{} 4\n"
msgstr ""

# type: section
#: lispref/variables.texi:102
#, no-wrap
msgid "Variables that Never Change"
msgstr ""

# type: cindex
#: lispref/variables.texi:104
#, no-wrap
msgid "keyword symbol"
msgstr ""

# type: cindex
#: lispref/variables.texi:105
#, no-wrap
msgid "variable with constant value"
msgstr ""

# type: cindex
#: lispref/variables.texi:106
#, no-wrap
msgid "constant variables"
msgstr ""

# type: cindex
#: lispref/variables.texi:107
#, no-wrap
msgid "symbol that evaluates to itself"
msgstr ""

# type: cindex
#: lispref/variables.texi:108
#, no-wrap
msgid "symbol with constant value"
msgstr ""

# type: Plain text
#: lispref/variables.texi:118
msgid ""
"In Emacs Lisp, certain symbols normally evaluate to themselves.  These "
"include @code{nil} and @code{t}, as well as any symbol whose name starts "
"with @samp{:} (these are called @dfn{keywords}).  These symbols cannot be "
"rebound, nor can their values be changed.  Any attempt to set or bind @code"
"{nil} or @code{t} signals a @code{setting-constant} error.  The same is true "
"for a keyword (a symbol whose name starts with @samp{:}), if it is interned "
"in the standard obarray, except that setting such a symbol to itself is not "
"an error."
msgstr ""

# type: group
#: lispref/variables.texi:123
#, no-wrap
msgid ""
"nil @equiv{} 'nil\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/variables.texi:127
#, no-wrap
msgid ""
"(setq nil 500)\n"
"@error{} Attempt to set constant symbol: nil\n"
msgstr ""

# type: defun
#: lispref/variables.texi:130
#, no-wrap
msgid "keywordp object"
msgstr ""

# type: defun
#: lispref/variables.texi:134
msgid ""
"function returns @code{t} if @var{object} is a symbol whose name starts with "
"@samp{:}, interned in the standard obarray, and returns @code{nil} otherwise."
msgstr ""

# type: cindex
#: lispref/variables.texi:138
#, no-wrap
msgid "binding local variables"
msgstr ""

# type: cindex
#: lispref/variables.texi:139
#, no-wrap
msgid "local variables"
msgstr ""

# type: cindex
#: lispref/variables.texi:140
#, no-wrap
msgid "local binding"
msgstr ""

# type: cindex
#: lispref/variables.texi:141
#, no-wrap
msgid "global binding"
msgstr ""

# type: Plain text
#: lispref/variables.texi:148
msgid ""
"Global variables have values that last until explicitly superseded with new "
"values.  Sometimes it is useful to create variable values that exist "
"temporarily---only until a certain part of the program finishes.  These "
"values are called @dfn{local}, and the variables so used are called @dfn"
"{local variables}."
msgstr ""

# type: Plain text
#: lispref/variables.texi:153
msgid ""
"For example, when a function is called, its argument variables receive new "
"local values that last until the function exits.  The @code{let} special "
"form explicitly establishes new local values for specified variables; these "
"last until exit from the @code{let} form."
msgstr ""

# type: cindex
#: lispref/variables.texi:154
#, no-wrap
msgid "shadowing of variables"
msgstr ""

# type: Plain text
#: lispref/variables.texi:160
msgid ""
"Establishing a local value saves away the previous value (or lack of one) of "
"the variable.  When the life span of the local value is over, the previous "
"value is restored.  In the mean time, we say that the previous value is @dfn"
"{shadowed} and @dfn{not visible}.  Both global and local values may be "
"shadowed (@pxref{Scope})."
msgstr ""

# type: Plain text
#: lispref/variables.texi:165
msgid ""
"If you set a variable (such as with @code{setq}) while it is local, this "
"replaces the local value; it does not alter the global value, or previous "
"local values, that are shadowed.  To model this behavior, we speak of a @dfn"
"{local binding} of the variable as well as a local value."
msgstr ""

# type: Plain text
#: lispref/variables.texi:173
msgid ""
"The local binding is a conceptual place that holds a local value.  Entry to "
"a function, or a special form such as @code{let}, creates the local binding; "
"exit from the function or from the @code{let} removes the local binding.  As "
"long as the local binding lasts, the variable's value is stored within it.  "
"Use of @code{setq} or @code{set} while there is a local binding stores a "
"different value into the local binding; it does not create a new binding."
msgstr ""

# type: Plain text
#: lispref/variables.texi:176
msgid ""
"We also speak of the @dfn{global binding}, which is where (conceptually) the "
"global value is kept."
msgstr ""

# type: cindex
#: lispref/variables.texi:177
#, no-wrap
msgid "current binding"
msgstr ""

# type: Plain text
#: lispref/variables.texi:187
msgid ""
"A variable can have more than one local binding at a time (for example, if "
"there are nested @code{let} forms that bind it).  In such a case, the most "
"recently created local binding that still exists is the @dfn{current "
"binding} of the variable.  (This rule is called @dfn{dynamic scoping}; see "
"@ref{Variable Scoping}.)  If there are no local bindings, the variable's "
"global binding is its current binding.  We sometimes call the current "
"binding the @dfn{most-local existing binding}, for emphasis.  Ordinary "
"evaluation of a symbol always returns the value of its current binding."
msgstr ""

# type: Plain text
#: lispref/variables.texi:190
msgid ""
"The special forms @code{let} and @code{let*} exist to create local bindings."
msgstr ""

# type: defspec
#: lispref/variables.texi:191
#, no-wrap
msgid "let (bindings@dots{}) forms@dots{}"
msgstr ""

# type: defspec
#: lispref/variables.texi:195
msgid ""
"This special form binds variables according to @var{bindings} and then "
"evaluates all of the @var{forms} in textual order.  The @code{let}-form "
"returns the value of the last form in @var{forms}."
msgstr ""

# type: defspec
#: lispref/variables.texi:201
msgid ""
"Each of the @var{bindings} is either @w{(i) a} symbol, in which case that "
"symbol is bound to @code{nil}; or @w{(ii) a} list of the form @code{(@var"
"{symbol} @var{value-form})}, in which case @var{symbol} is bound to the "
"result of evaluating @var{value-form}.  If @var{value-form} is omitted, @code"
"{nil} is used."
msgstr ""

# type: defspec
#: lispref/variables.texi:206
msgid ""
"All of the @var{value-form}s in @var{bindings} are evaluated in the order "
"they appear and @emph{before} binding any of the symbols to them.  Here is "
"an example of this: @code{z} is bound to the old value of @code{y}, which is "
"2, not the new value of @code{y}, which is 1."
msgstr ""

# type: group
#: lispref/variables.texi:211 lispref/variables.texi:233
#, no-wrap
msgid ""
"(setq y 2)\n"
"     @result{} 2\n"
msgstr ""

# type: group
#: lispref/variables.texi:217
#, no-wrap
msgid ""
"(let ((y 1)\n"
"      (z y))\n"
"  (list y z))\n"
"     @result{} (1 2)\n"
msgstr ""

# type: defspec
#: lispref/variables.texi:221
#, no-wrap
msgid "let* (bindings@dots{}) forms@dots{}"
msgstr ""

# type: defspec
#: lispref/variables.texi:228
msgid ""
"This special form is like @code{let}, but it binds each variable right after "
"computing its local value, before computing the local value for the next "
"variable.  Therefore, an expression in @var{bindings} can reasonably refer "
"to the preceding symbols bound in this @code{let*} form.  Compare the "
"following example with the example above for @code{let}."
msgstr ""

# type: group
#: lispref/variables.texi:239
#, no-wrap
msgid ""
"(let* ((y 1)\n"
"       (z y))    ; @r{Use the just-established value of @code{y}.}\n"
"  (list y z))\n"
"     @result{} (1 1)\n"
msgstr ""

# type: Plain text
#: lispref/variables.texi:245
msgid ""
"Here is a complete list of the other facilities that create local bindings:"
msgstr ""

# type: itemize
#: lispref/variables.texi:249
msgid "Function calls (@pxref{Functions})."
msgstr ""

# type: itemize
#: lispref/variables.texi:252
msgid "Macro calls (@pxref{Macros})."
msgstr ""

# type: itemize
#: lispref/variables.texi:255
msgid "@code{condition-case} (@pxref{Errors})."
msgstr ""

# type: Plain text
#: lispref/variables.texi:263
msgid ""
"Variables can also have buffer-local bindings (@pxref{Buffer-Local "
"Variables}) and frame-local bindings (@pxref{Frame-Local Variables}); a few "
"variables have terminal-local bindings (@pxref{Multiple Displays}).  These "
"kinds of bindings work somewhat like ordinary local bindings, but they are "
"localized depending on ``where'' you are in Emacs, rather than localized in "
"time."
msgstr ""

# type: defvar
#: lispref/variables.texi:264
#, no-wrap
msgid "max-specpdl-size"
msgstr ""

# type: anchor{#1}
#: lispref/variables.texi:266
msgid "Definition of max-specpdl-size"
msgstr ""

# type: cindex
#: lispref/variables.texi:266
#, no-wrap
msgid "variable limit error"
msgstr ""

# type: cindex
#: lispref/variables.texi:267
#, no-wrap
msgid "evaluation error"
msgstr ""

# type: cindex
#: lispref/variables.texi:268
#, no-wrap
msgid "infinite recursion"
msgstr ""

# type: defvar
#: lispref/variables.texi:274
msgid ""
"This variable defines the limit on the total number of local variable "
"bindings and @code{unwind-protect} cleanups (@pxref{Cleanups,, Cleaning Up "
"from Nonlocal Exits}) that are allowed before signaling an error (with data "
"@code{\"Variable binding depth exceeds max-specpdl-size\"})."
msgstr ""

# type: defvar
#: lispref/variables.texi:279
msgid ""
"This limit, with the associated error when it is exceeded, is one way that "
"Lisp avoids infinite recursion on an ill-defined function.  @code{max-lisp-"
"eval-depth} provides another limit on depth of nesting.  @xref{Definition of "
"max-lisp-eval-depth,, Eval}."
msgstr ""

# type: defvar
#: lispref/variables.texi:283
msgid ""
"The default value is 1000.  Entry to the Lisp debugger increases the value, "
"if there is little room left, to make sure the debugger itself has room to "
"execute."
msgstr ""

# type: section
#: lispref/variables.texi:286
#, no-wrap
msgid "When a Variable is ``Void''"
msgstr ""

# type: cindex
#: lispref/variables.texi:288
#, no-wrap
msgid "void variable"
msgstr ""

# type: Plain text
#: lispref/variables.texi:295
msgid ""
"If you have never given a symbol any value as a global variable, we say that "
"that symbol's global value is @dfn{void}.  In other words, the symbol's "
"value cell does not have any Lisp object in it.  If you try to evaluate the "
"symbol, you get a @code{void-variable} error rather than a value."
msgstr ""

# type: Plain text
#: lispref/variables.texi:300
msgid ""
"Note that a value of @code{nil} is not the same as void.  The symbol @code"
"{nil} is a Lisp object and can be the value of a variable just as any other "
"object can be; but it is @emph{a value}.  A void variable does not have any "
"value."
msgstr ""

# type: Plain text
#: lispref/variables.texi:303
msgid ""
"After you have given a variable a value, you can make it void once more "
"using @code{makunbound}."
msgstr ""

# type: defun
#: lispref/variables.texi:304
#, no-wrap
msgid "makunbound symbol"
msgstr ""

# type: defun
#: lispref/variables.texi:308
msgid ""
"This function makes the current variable binding of @var{symbol} void.  "
"Subsequent attempts to use this symbol's value as a variable will signal the "
"error @code{void-variable}, unless and until you set it again."
msgstr ""

# type: defun
#: lispref/variables.texi:310
msgid "@code{makunbound} returns @var{symbol}."
msgstr ""

# type: group
#: lispref/variables.texi:315
#, no-wrap
msgid ""
"(makunbound 'x)      ; @r{Make the global value of @code{x} void.}\n"
"     @result{} x\n"
msgstr ""

# type: group
#: lispref/variables.texi:319
#, no-wrap
msgid ""
"x\n"
"@error{} Symbol's value as variable is void: x\n"
msgstr ""

# type: defun
#: lispref/variables.texi:330
msgid ""
"If @var{symbol} is locally bound, @code{makunbound} affects the most local "
"existing binding.  This is the only way a symbol can have a void local "
"binding, since all the constructs that create local bindings create them "
"with values.  In this case, the voidness lasts at most as long as the "
"binding does; when the binding is removed due to exit from the construct "
"that made it, the previous local or global binding is reexposed as usual, "
"and the variable is no longer void unless the newly reexposed binding was "
"void all along."
msgstr ""

# type: group
#: lispref/variables.texi:339
#, no-wrap
msgid ""
"(setq x 1)               ; @r{Put a value in the global binding.}\n"
"     @result{} 1\n"
"(let ((x 2))             ; @r{Locally bind it.}\n"
"  (makunbound 'x)        ; @r{Void the local binding.}\n"
"  x)\n"
"@error{} Symbol's value as variable is void: x\n"
msgstr ""

# type: group
#: lispref/variables.texi:343
#, no-wrap
msgid ""
"x                        ; @r{The global binding is unchanged.}\n"
"     @result{} 1\n"
"\n"
msgstr ""

# type: group
#: lispref/variables.texi:349
#, no-wrap
msgid ""
"(let ((x 2))             ; @r{Locally bind it.}\n"
"  (let ((x 3))           ; @r{And again.}\n"
"    (makunbound 'x)      ; @r{Void the innermost-local binding.}\n"
"    x))                  ; @r{And refer: it's void.}\n"
"@error{} Symbol's value as variable is void: x\n"
msgstr ""

# type: group
#: lispref/variables.texi:357
#, no-wrap
msgid ""
"(let ((x 2))\n"
"  (let ((x 3))\n"
"    (makunbound 'x))     ; @r{Void inner binding, then remove it.}\n"
"  x)                     ; @r{Now outer @code{let} binding is visible.}\n"
"     @result{} 2\n"
msgstr ""

# type: Plain text
#: lispref/variables.texi:364
msgid ""
"A variable that has been made void with @code{makunbound} is "
"indistinguishable from one that has never received a value and has always "
"been void."
msgstr ""

# type: Plain text
#: lispref/variables.texi:367
msgid ""
"You can use the function @code{boundp} to test whether a variable is "
"currently void."
msgstr ""

# type: defun
#: lispref/variables.texi:368
#, no-wrap
msgid "boundp variable"
msgstr ""

# type: defun
#: lispref/variables.texi:372
msgid ""
"@code{boundp} returns @code{t} if @var{variable} (a symbol) is not void; "
"more precisely, if its current binding is not void.  It returns @code{nil} "
"otherwise."
msgstr ""

# type: group
#: lispref/variables.texi:377
#, no-wrap
msgid ""
"(boundp 'abracadabra)          ; @r{Starts out void.}\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/variables.texi:382
#, no-wrap
msgid ""
"(let ((abracadabra 5))         ; @r{Locally bind it.}\n"
"  (boundp 'abracadabra))\n"
"     @result{} t\n"
msgstr ""

# type: group
#: lispref/variables.texi:386
#, no-wrap
msgid ""
"(boundp 'abracadabra)          ; @r{Still globally void.}\n"
"     @result{} nil\n"
msgstr ""

# type: group
#: lispref/variables.texi:390
#, no-wrap
msgid ""
"(setq abracadabra 5)           ; @r{Make it globally nonvoid.}\n"
"     @result{} 5\n"
msgstr ""

# type: group
#: lispref/variables.texi:394
#, no-wrap
msgid ""
"(boundp 'abracadabra)\n"
"     @result{} t\n"
msgstr ""

# type: section
#: lispref/variables.texi:399
#, no-wrap
msgid "Defining Global Variables"
msgstr ""

# type: cindex
#: lispref/variables.texi:400
#, no-wrap
msgid "variable definition"
msgstr ""

# type: Plain text
#: lispref/variables.texi:405
msgid ""
"You may announce your intention to use a symbol as a global variable with a "
"@dfn{variable definition}: a special form, either @code{defconst} or @code"
"{defvar}."
msgstr ""

# type: Plain text
#: lispref/variables.texi:413
msgid ""
"In Emacs Lisp, definitions serve three purposes.  First, they inform people "
"who read the code that certain symbols are @emph{intended} to be used a "
"certain way (as variables).  Second, they inform the Lisp system of these "
"things, supplying a value and documentation.  Third, they provide "
"information to utilities such as @code{etags} and @code{make-docfile}, which "
"create data bases of the functions and variables in a program."
msgstr ""

# type: Plain text
#: lispref/variables.texi:421
msgid ""
"The difference between @code{defconst} and @code{defvar} is primarily a "
"matter of intent, serving to inform human readers of whether the value "
"should ever change.  Emacs Lisp does not restrict the ways in which a "
"variable can be used based on @code{defconst} or @code{defvar} "
"declarations.  However, it does make a difference for initialization: @code"
"{defconst} unconditionally initializes the variable, while @code{defvar} "
"initializes it only if it is void."
msgstr ""

# type: ignore
#: lispref/variables.texi:430
#, no-wrap
msgid ""
"  One would expect user option variables to be defined with\n"
"@code{defconst}, since programs do not change them.  Unfortunately, this\n"
"has bad results if the definition is in a library that is not preloaded:\n"
"@code{defconst} would override any prior value when the library is\n"
"loaded.  Users would like to be able to set user options in their init\n"
"files, and override the default values given in the definitions.  For\n"
"this reason, user options must be defined with @code{defvar}.\n"
msgstr ""

# type: defspec
#: lispref/variables.texi:432
#, no-wrap
msgid "defvar symbol [value [doc-string]]"
msgstr ""

# type: defspec
#: lispref/variables.texi:438
msgid ""
"This special form defines @var{symbol} as a variable and can also initialize "
"and document it.  The definition informs a person reading your code that @var"
"{symbol} is used as a variable that might be set or changed.  Note that @var"
"{symbol} is not evaluated; the symbol to be defined must appear explicitly "
"in the @code{defvar}."
msgstr ""

# type: defspec
#: lispref/variables.texi:444
msgid ""
"If @var{symbol} is void and @var{value} is specified, @code{defvar} "
"evaluates it and sets @var{symbol} to the result.  But if @var{symbol} "
"already has a value (i.e., it is not void), @var{value} is not even "
"evaluated, and @var{symbol}'s value remains unchanged.  If @var{value} is "
"omitted, the value of @var{symbol} is not changed in any case."
msgstr ""

# type: defspec
#: lispref/variables.texi:449
msgid ""
"If @var{symbol} has a buffer-local binding in the current buffer, @code"
"{defvar} operates on the default value, which is buffer-independent, not the "
"current (buffer-local) binding.  It sets the default value if the default "
"value is void.  @xref{Buffer-Local Variables}."
msgstr ""

# type: defspec
#: lispref/variables.texi:454
msgid ""
"When you evaluate a top-level @code{defvar} form with @kbd{C-M-x} in Emacs "
"Lisp mode (@code{eval-defun}), a special feature of @code{eval-defun} "
"arranges to set the variable unconditionally, without testing whether its "
"value is void."
msgstr ""

# type: defspec
#: lispref/variables.texi:460
msgid ""
"If the @var{doc-string} argument appears, it specifies the documentation for "
"the variable.  (This opportunity to specify documentation is one of the main "
"benefits of defining the variable.)  The documentation is stored in the "
"symbol's @code{variable-documentation} property.  The Emacs help functions "
"(@pxref{Documentation}) look for this property."
msgstr ""

# type: defspec
#: lispref/variables.texi:468
msgid ""
"If the variable is a user option that users would want to set interactively, "
"you should use @samp{*} as the first character of @var{doc-string}.  This "
"lets users set the variable conveniently using the @code{set-variable} "
"command.  Note that you should nearly always use @code{defcustom} instead of "
"@code{defvar} to define these variables, so that users can use @kbd{M-x "
"customize} and related commands to set them.  @xref{Customization}."
msgstr ""

# type: defspec
#: lispref/variables.texi:471
msgid ""
"Here are some examples.  This form defines @code{foo} but does not "
"initialize it:"
msgstr ""

# type: group
#: lispref/variables.texi:476
#, no-wrap
msgid ""
"(defvar foo)\n"
"     @result{} foo\n"
msgstr ""

# type: defspec
#: lispref/variables.texi:481
msgid ""
"This example initializes the value of @code{bar} to @code{23}, and gives it "
"a documentation string:"
msgstr ""

# type: group
#: lispref/variables.texi:487
#, no-wrap
msgid ""
"(defvar bar 23\n"
"  \"The normal weight of a bar.\")\n"
"     @result{} bar\n"
msgstr ""

# type: defspec
#: lispref/variables.texi:494
msgid ""
"The following form changes the documentation string for @code{bar}, making "
"it a user option, but does not change the value, since @code{bar} already "
"has a value.  (The addition @code{(1+ nil)} would get an error if it were "
"evaluated, but since it is not evaluated, there is no error.)"
msgstr ""

# type: group
#: lispref/variables.texi:500
#, no-wrap
msgid ""
"(defvar bar (1+ nil)\n"
"  \"*The normal weight of a bar.\")\n"
"     @result{} bar\n"
msgstr ""

# type: group
#: lispref/variables.texi:504
#, no-wrap
msgid ""
"bar\n"
"     @result{} 23\n"
msgstr ""

# type: defspec
#: lispref/variables.texi:508
msgid "Here is an equivalent expression for the @code{defvar} special form:"
msgstr ""

# type: group
#: lispref/variables.texi:519
#, no-wrap
msgid ""
"(defvar @var{symbol} @var{value} @var{doc-string})\n"
"@equiv{}\n"
"(progn\n"
"  (if (not (boundp '@var{symbol}))\n"
"      (setq @var{symbol} @var{value}))\n"
"  (if '@var{doc-string}\n"
"    (put '@var{symbol} 'variable-documentation '@var{doc-string}))\n"
"  '@var{symbol})\n"
msgstr ""

# type: defspec
#: lispref/variables.texi:524
msgid ""
"The @code{defvar} form returns @var{symbol}, but it is normally used at top "
"level in a file where its value does not matter."
msgstr ""

# type: defspec
#: lispref/variables.texi:526
#, no-wrap
msgid "defconst symbol value [doc-string]"
msgstr ""

# type: defspec
#: lispref/variables.texi:532
msgid ""
"This special form defines @var{symbol} as a value and initializes it.  It "
"informs a person reading your code that @var{symbol} has a standard global "
"value, established here, that should not be changed by the user or by other "
"programs.  Note that @var{symbol} is not evaluated; the symbol to be defined "
"must appear explicitly in the @code{defconst}."
msgstr ""

# type: defspec
#: lispref/variables.texi:539
msgid ""
"@code{defconst} always evaluates @var{value}, and sets the value of @var"
"{symbol} to the result.  If @var{symbol} does have a buffer-local binding in "
"the current buffer, @code{defconst} sets the default value, not the buffer-"
"local value.  (But you should not be making buffer-local bindings for a "
"symbol that is defined with @code{defconst}.)"
msgstr ""

# type: defspec
#: lispref/variables.texi:543
msgid ""
"Here, @code{pi} is a constant that presumably ought not to be changed by "
"anyone (attempts by the Indiana State Legislature notwithstanding).  As the "
"second form illustrates, however, this is only advisory."
msgstr ""

# type: group
#: lispref/variables.texi:548
#, no-wrap
msgid ""
"(defconst pi 3.1415 \"Pi to five places.\")\n"
"     @result{} pi\n"
msgstr ""

# type: group
#: lispref/variables.texi:552
#, no-wrap
msgid ""
"(setq pi 3)\n"
"     @result{} pi\n"
msgstr ""

# type: group
#: lispref/variables.texi:556
#, no-wrap
msgid ""
"pi\n"
"     @result{} 3\n"
msgstr ""

# type: defun
#: lispref/variables.texi:560
#, no-wrap
msgid "user-variable-p variable"
msgstr ""

# type: cindex
#: lispref/variables.texi:561
#, no-wrap
msgid "user option"
msgstr ""

# type: defun
#: lispref/variables.texi:566
msgid ""
"This function returns @code{t} if @var{variable} is a user option---a "
"variable intended to be set by the user for customization---and @code{nil} "
"otherwise.  (Variables other than user options exist for the internal "
"purposes of Lisp programs, and users need not know about them.)"
msgstr ""

# type: defun
#: lispref/variables.texi:573
msgid ""
"User option variables are distinguished from other variables either though "
"being declared using @code{defcustom}@footnote{They may also be declared "
"equivalently in @file{cus-start.el}.} or by the first character of their "
"@code{variable-documentation} property.  If the property exists and is a "
"string, and its first character is @samp{*}, then the variable is a user "
"option.  Aliases of user options are also user options."
msgstr ""

# type: kindex
#: lispref/variables.texi:575
#, no-wrap
msgid "variable-interactive"
msgstr ""

# type: Plain text
#: lispref/variables.texi:582
msgid ""
"If a user option variable has a @code{variable-interactive} property, the "
"@code{set-variable} command uses that value to control reading the new value "
"for the variable.  The property's value is used as if it were specified in "
"@code{interactive} (@pxref{Using Interactive}).  However, this feature is "
"largely obsoleted by @code{defcustom} (@pxref{Customization})."
msgstr ""

# type: Plain text
#: lispref/variables.texi:590
msgid ""
"@strong{Warning:} If the @code{defconst} and @code{defvar} special forms are "
"used while the variable has a local binding (made with @code{let}, or a "
"function argument), they set the local-binding's value; the top-level "
"binding is not changed.  This is not what you usually want.  To prevent it, "
"use these special forms at top level in a file, where normally no local "
"binding is in effect, and make sure to load the file before making a local "
"binding for the variable."
msgstr ""

# type: section
#: lispref/variables.texi:592
#, no-wrap
msgid "Tips for Defining Variables Robustly"
msgstr ""

# type: Plain text
#: lispref/variables.texi:597
msgid ""
"When you define a variable whose value is a function, or a list of "
"functions, use a name that ends in @samp{-function} or @samp{-functions}, "
"respectively."
msgstr ""

# type: Plain text
#: lispref/variables.texi:600
msgid ""
"There are several other variable name conventions; here is a complete list:"
msgstr ""

# type: item
#: lispref/variables.texi:602
#, no-wrap
msgid "@dots{}-hook"
msgstr ""

# type: table
#: lispref/variables.texi:604
msgid "The variable is a normal hook (@pxref{Hooks})."
msgstr ""

# type: item
#: lispref/variables.texi:605
#, no-wrap
msgid "@dots{}-function"
msgstr ""

# type: table
#: lispref/variables.texi:607
msgid "The value is a function."
msgstr ""

# type: item
#: lispref/variables.texi:608
#, no-wrap
msgid "@dots{}-functions"
msgstr ""

# type: table
#: lispref/variables.texi:610
msgid "The value is a list of functions."
msgstr ""

# type: item
#: lispref/variables.texi:611
#, no-wrap
msgid "@dots{}-form"
msgstr ""

# type: table
#: lispref/variables.texi:613
msgid "The value is a form (an expression)."
msgstr ""

# type: item
#: lispref/variables.texi:614
#, no-wrap
msgid "@dots{}-forms"
msgstr ""

# type: table
#: lispref/variables.texi:616
msgid "The value is a list of forms (expressions)."
msgstr ""

# type: item
#: lispref/variables.texi:617
#, no-wrap
msgid "@dots{}-predicate"
msgstr ""

# type: table
#: lispref/variables.texi:621
msgid ""
"The value is a predicate---a function of one argument that returns non-@code"
"{nil} for ``good'' arguments and @code{nil} for ``bad'' arguments."
msgstr ""

# type: item
#: lispref/variables.texi:622
#, no-wrap
msgid "@dots{}-flag"
msgstr ""

# type: table
#: lispref/variables.texi:624
msgid "The value is significant only as to whether it is @code{nil} or not."
msgstr ""

# type: item
#: lispref/variables.texi:625
#, no-wrap
msgid "@dots{}-program"
msgstr ""

# type: table
#: lispref/variables.texi:627
msgid "The value is a program name."
msgstr ""

# type: item
#: lispref/variables.texi:628
#, no-wrap
msgid "@dots{}-command"
msgstr ""

# type: table
#: lispref/variables.texi:630
msgid "The value is a whole shell command."
msgstr ""

# type: item
#: lispref/variables.texi:631
#, no-wrap
msgid "@dots{}-switches"
msgstr ""

# type: table
#: lispref/variables.texi:633
msgid "The value specifies options for a command."
msgstr ""

# type: Plain text
#: lispref/variables.texi:637
msgid ""
"When you define a variable, always consider whether you should mark it as "
"``risky''; see @ref{File Local Variables}."
msgstr ""

# type: Plain text
#: lispref/variables.texi:641
msgid ""
"When defining and initializing a variable that holds a complicated value "
"(such as a keymap with bindings in it), it's best to put the entire "
"computation of the value into the @code{defvar}, like this:"
msgstr ""

# type: example
#: lispref/variables.texi:649
#, no-wrap
msgid ""
"(defvar my-mode-map\n"
"  (let ((map (make-sparse-keymap)))\n"
"    (define-key map \"\\C-c\\C-a\" 'my-command)\n"
"    @dots{}\n"
"    map)\n"
"  @var{docstring})\n"
msgstr ""

# type: Plain text
#: lispref/variables.texi:660
msgid ""
"This method has several benefits.  First, if the user quits while loading "
"the file, the variable is either still uninitialized or initialized "
"properly, never in-between.  If it is still uninitialized, reloading the "
"file will initialize it properly.  Second, reloading the file once the "
"variable is initialized will not alter it; that is important if the user has "
"run hooks to alter part of the contents (such as, to rebind keys).  Third, "
"evaluating the @code{defvar} form with @kbd{C-M-x} @emph{will} reinitialize "
"the map completely."
msgstr ""

# type: Plain text
#: lispref/variables.texi:664
msgid ""
"Putting so much code in the @code{defvar} form has one disadvantage: it puts "
"the documentation string far away from the line which names the variable.  "
"Here's a safe way to avoid that:"
msgstr ""

# type: example
#: lispref/variables.texi:673
#, no-wrap
msgid ""
"(defvar my-mode-map nil\n"
"  @var{docstring})\n"
"(unless my-mode-map\n"
"  (let ((map (make-sparse-keymap)))\n"
"    (define-key map \"\\C-c\\C-a\" 'my-command)\n"
"    @dots{}\n"
"    (setq my-mode-map map)))\n"
msgstr ""

# type: Plain text
#: lispref/variables.texi:679
msgid ""
"This has all the same advantages as putting the initialization inside the "
"@code{defvar}, except that you must type @kbd{C-M-x} twice, once on each "
"form, if you do want to reinitialize the variable."
msgstr ""

# type: Plain text
#: lispref/variables.texi:681
msgid "But be careful not to write the code like this:"
msgstr ""

# type: example
#: lispref/variables.texi:689
#, no-wrap
msgid ""
"(defvar my-mode-map nil\n"
"  @var{docstring})\n"
"(unless my-mode-map\n"
"  (setq my-mode-map (make-sparse-keymap))\n"
"  (define-key my-mode-map \"\\C-c\\C-a\" 'my-command)\n"
"  @dots{})\n"
msgstr ""

# type: Plain text
#: lispref/variables.texi:697
msgid ""
"This code sets the variable, then alters it, but it does so in more than one "
"step.  If the user quits just after the @code{setq}, that leaves the "
"variable neither correctly initialized nor void nor @code{nil}.  Once that "
"happens, reloading the file will not initialize the variable; it will remain "
"incomplete."
msgstr ""

# type: section
#: lispref/variables.texi:699
#, no-wrap
msgid "Accessing Variable Values"
msgstr ""

# type: Plain text
#: lispref/variables.texi:706
msgid ""
"The usual way to reference a variable is to write the symbol which names it "
"(@pxref{Symbol Forms}).  This requires you to specify the variable name when "
"you write the program.  Usually that is exactly what you want to do.  "
"Occasionally you need to choose at run time which variable to reference; "
"then you can use @code{symbol-value}."
msgstr ""

# type: defun
#: lispref/variables.texi:707
#, no-wrap
msgid "symbol-value symbol"
msgstr ""

# type: defun
#: lispref/variables.texi:711
msgid ""
"This function returns the value of @var{symbol}.  This is the value in the "
"innermost local binding of the symbol, or its global value if it has no "
"local bindings."
msgstr ""

# type: group
#: lispref/variables.texi:716
#, no-wrap
msgid ""
"(setq abracadabra 5)\n"
"     @result{} 5\n"
msgstr ""

# type: group
#: lispref/variables.texi:720
#, no-wrap
msgid ""
"(setq foo 9)\n"
"     @result{} 9\n"
msgstr ""

# type: group
#: lispref/variables.texi:728
#, no-wrap
msgid ""
";; @r{Here the symbol @code{abracadabra}}\n"
";;   @r{is the symbol whose value is examined.}\n"
"(let ((abracadabra 'foo))\n"
"  (symbol-value 'abracadabra))\n"
"     @result{} foo\n"
msgstr ""

# type: group
#: lispref/variables.texi:737
#, no-wrap
msgid ""
";; @r{Here, the value of @code{abracadabra},}\n"
";;   @r{which is @code{foo},}\n"
";;   @r{is the symbol whose value is examined.}\n"
"(let ((abracadabra 'foo))\n"
"  (symbol-value abracadabra))\n"
"     @result{} 9\n"
msgstr ""

# type: group
#: lispref/variables.texi:742
#, no-wrap
msgid ""
"(symbol-value 'abracadabra)\n"
"     @result{} 5\n"
msgstr ""

# type: defun
#: lispref/variables.texi:747
msgid ""
"A @code{void-variable} error is signaled if the current binding of @var"
"{symbol} is void."
msgstr ""

# type: section
#: lispref/variables.texi:750
#, no-wrap
msgid "How to Alter a Variable Value"
msgstr ""

# type: Plain text
#: lispref/variables.texi:755
msgid ""
"The usual way to change the value of a variable is with the special form "
"@code{setq}.  When you need to compute the choice of variable at run time, "
"use the function @code{set}."
msgstr ""

# type: defspec
#: lispref/variables.texi:756
#, no-wrap
msgid "setq [symbol form]@dots{}"
msgstr ""

# type: defspec
#: lispref/variables.texi:761
msgid ""
"This special form is the most common method of changing a variable's value.  "
"Each @var{symbol} is given a new value, which is the result of evaluating "
"the corresponding @var{form}.  The most-local existing binding of the symbol "
"is changed."
msgstr ""

# type: defspec
#: lispref/variables.texi:765
msgid ""
"@code{setq} does not evaluate @var{symbol}; it sets the symbol that you "
"write.  We say that this argument is @dfn{automatically quoted}.  The @samp"
"{q} in @code{setq} stands for ``quoted.''"
msgstr ""

# type: defspec
#: lispref/variables.texi:767
msgid "The value of the @code{setq} form is the value of the last @var{form}."
msgstr ""

# type: group
#: lispref/variables.texi:772
#, no-wrap
msgid ""
"(setq x (1+ 2))\n"
"     @result{} 3\n"
msgstr ""

# type: example
#: lispref/variables.texi:775
#, no-wrap
msgid ""
"x                   ; @r{@code{x} now has a global value.}\n"
"     @result{} 3\n"
msgstr ""

# type: group
#: lispref/variables.texi:780
#, no-wrap
msgid ""
"(let ((x 5))\n"
"  (setq x 6)        ; @r{The local binding of @code{x} is set.}\n"
"  x)\n"
"     @result{} 6\n"
msgstr ""

# type: example
#: lispref/variables.texi:783
#, no-wrap
msgid ""
"x                   ; @r{The global value is unchanged.}\n"
"     @result{} 3\n"
msgstr ""

# type: defspec
#: lispref/variables.texi:788
msgid ""
"Note that the first @var{form} is evaluated, then the first @var{symbol} is "
"set, then the second @var{form} is evaluated, then the second @var{symbol} "
"is set, and so on:"
msgstr ""

# type: group
#: lispref/variables.texi:794
#, no-wrap
msgid ""
"(setq x 10          ; @r{Notice that @code{x} is set before}\n"
"      y (1+ x))     ;   @r{the value of @code{y} is computed.}\n"
"     @result{} 11\n"
msgstr ""

# type: defun
#: lispref/variables.texi:798
#, no-wrap
msgid "set symbol value"
msgstr ""

# type: defun
#: lispref/variables.texi:802
msgid ""
"This function sets @var{symbol}'s value to @var{value}, then returns @var"
"{value}.  Since @code{set} is a function, the expression written for @var"
"{symbol} is evaluated to obtain the symbol to set."
msgstr ""

# type: defun
#: lispref/variables.texi:805
msgid ""
"The most-local existing binding of the variable is the binding that is set; "
"shadowed bindings are not affected."
msgstr ""

# type: group
#: lispref/variables.texi:810
#, no-wrap
msgid ""
"(set one 1)\n"
"@error{} Symbol's value as variable is void: one\n"
msgstr ""

# type: group
#: lispref/variables.texi:814
#, no-wrap
msgid ""
"(set 'one 1)\n"
"     @result{} 1\n"
msgstr ""

# type: group
#: lispref/variables.texi:818
#, no-wrap
msgid ""
"(set 'two 'one)\n"
"     @result{} one\n"
msgstr ""

# type: group
#: lispref/variables.texi:822
#, no-wrap
msgid ""
"(set two 2)         ; @r{@code{two} evaluates to symbol @code{one}.}\n"
"     @result{} 2\n"
msgstr ""

# type: group
#: lispref/variables.texi:830
#, no-wrap
msgid ""
"one                 ; @r{So it is @code{one} that was set.}\n"
"     @result{} 2\n"
"(let ((one 1))      ; @r{This binding of @code{one} is set,}\n"
"  (set 'one 3)      ;   @r{not the global value.}\n"
"  one)\n"
"     @result{} 3\n"
msgstr ""

# type: group
#: lispref/variables.texi:834
#, no-wrap
msgid ""
"one\n"
"     @result{} 2\n"
msgstr ""

# type: defun
#: lispref/variables.texi:839
msgid ""
"If @var{symbol} is not actually a symbol, a @code{wrong-type-argument} error "
"is signaled."
msgstr ""

# type: example
#: lispref/variables.texi:843
#, no-wrap
msgid ""
"(set '(x y) 'z)\n"
"@error{} Wrong type argument: symbolp, (x y)\n"
msgstr ""

# type: defun
#: lispref/variables.texi:853
msgid ""
"Logically speaking, @code{set} is a more fundamental primitive than @code"
"{setq}.  Any use of @code{setq} can be trivially rewritten to use @code"
"{set}; @code{setq} could even be defined as a macro, given the availability "
"of @code{set}.  However, @code{set} itself is rarely used; beginners hardly "
"need to know about it.  It is useful only for choosing at run time which "
"variable to set.  For example, the command @code{set-variable}, which reads "
"a variable name from the user and then sets the variable, needs to use @code"
"{set}."
msgstr ""

# type: cindex
#: lispref/variables.texi:854
#, no-wrap
msgid "CL note---@code{set} local"
msgstr ""

# type: quotation
#: lispref/variables.texi:860
msgid ""
"@b{Common Lisp note:} In Common Lisp, @code{set} always changes the symbol's "
"``special'' or dynamic value, ignoring any lexical bindings.  In Emacs Lisp, "
"all variables and all bindings are dynamic, so @code{set} always affects the "
"most local existing binding."
msgstr ""

# type: menu
#: lispref/variables.texi:864 lispref/vol1.texi:461 lispref/vol2.texi:462
#, no-wrap
msgid "Scoping Rules for Variable Bindings"
msgstr ""

# type: Plain text
#: lispref/variables.texi:870
msgid ""
"A given symbol @code{foo} can have several local variable bindings, "
"established at different places in the Lisp program, as well as a global "
"binding.  The most recently established binding takes precedence over the "
"others."
msgstr ""

# type: cindex
#: lispref/variables.texi:871
#, no-wrap
msgid "scope"
msgstr ""

# type: cindex
#: lispref/variables.texi:872
#, no-wrap
msgid "extent"
msgstr ""

# type: cindex
#: lispref/variables.texi:873
#, no-wrap
msgid "dynamic scoping"
msgstr ""

# type: cindex
#: lispref/variables.texi:874
#, no-wrap
msgid "lexical scoping"
msgstr ""

# type: Plain text
#: lispref/variables.texi:882
msgid ""
"Local bindings in Emacs Lisp have @dfn{indefinite scope} and @dfn{dynamic "
"extent}.  @dfn{Scope} refers to @emph{where} textually in the source code "
"the binding can be accessed.  ``Indefinite scope'' means that any part of "
"the program can potentially access the variable binding.  @dfn{Extent} "
"refers to @emph{when}, as the program is executing, the binding exists.  "
"``Dynamic extent'' means that the binding lasts as long as the activation of "
"the construct that established it."
msgstr ""

# type: Plain text
#: lispref/variables.texi:887
msgid ""
"The combination of dynamic extent and indefinite scope is called @dfn"
"{dynamic scoping}.  By contrast, most programming languages use @dfn{lexical "
"scoping}, in which references to a local variable must be located textually "
"within the function or block that binds the variable."
msgstr ""

# type: cindex
#: lispref/variables.texi:888
#, no-wrap
msgid "CL note---special variables"
msgstr ""

# type: quotation
#: lispref/variables.texi:892
msgid ""
"@b{Common Lisp note:} Variables declared ``special'' in Common Lisp are "
"dynamically scoped, like all variables in Emacs Lisp."
msgstr ""

# type: menu
#: lispref/variables.texi:900 lispref/variables.texi:902
#: lispref/variables.texi:903 lispref/vol1.texi:468 lispref/vol2.texi:469
#, no-wrap
msgid "Scope"
msgstr ""

# type: menu
#: lispref/variables.texi:900
msgid "Scope means where in the program a value is visible."
msgstr ""

# type: menu
#: lispref/variables.texi:900 lispref/vol1.texi:468 lispref/vol2.texi:469
msgid "Comparison with other languages."
msgstr ""

# type: menu
#: lispref/variables.texi:900 lispref/variables.texi:970
#: lispref/variables.texi:971 lispref/vol1.texi:468 lispref/vol2.texi:469
#, no-wrap
msgid "Extent"
msgstr ""

# type: menu
#: lispref/variables.texi:900 lispref/vol1.texi:468 lispref/vol2.texi:469
msgid "Extent means how long in time a value exists."
msgstr ""

# type: menu
#: lispref/variables.texi:900 lispref/variables.texi:1006
#: lispref/vol1.texi:468 lispref/vol2.texi:469
#, no-wrap
msgid "Impl of Scope"
msgstr ""

# type: menu
#: lispref/variables.texi:900 lispref/vol1.texi:468 lispref/vol2.texi:469
msgid "Two ways to implement dynamic scoping."
msgstr ""

# type: menu
#: lispref/variables.texi:900 lispref/variables.texi:1047
#: lispref/vol1.texi:468 lispref/vol2.texi:469
#, no-wrap
msgid "Using Scoping"
msgstr ""

# type: menu
#: lispref/variables.texi:900
msgid "How to use dynamic scoping carefully and avoid problems."
msgstr ""

# type: Plain text
#: lispref/variables.texi:909
msgid ""
"Emacs Lisp uses @dfn{indefinite scope} for local variable bindings.  This "
"means that any function anywhere in the program text might access a given "
"binding of a variable.  Consider the following function definitions:"
msgstr ""

# type: group
#: lispref/variables.texi:914
#, no-wrap
msgid ""
"(defun binder (x)   ; @r{@code{x} is bound in @code{binder}.}\n"
"   (foo 5))         ; @r{@code{foo} is some other function.}\n"
msgstr ""

# type: group
#: lispref/variables.texi:919
#, no-wrap
msgid ""
"(defun user ()      ; @r{@code{x} is used ``free'' in @code{user}.}\n"
"  (list x))\n"
msgstr ""

# type: Plain text
#: lispref/variables.texi:928
msgid ""
"In a lexically scoped language, the binding of @code{x} in @code{binder} "
"would never be accessible in @code{user}, because @code{user} is not "
"textually contained within the function @code{binder}.  However, in "
"dynamically-scoped Emacs Lisp, @code{user} may or may not refer to the "
"binding of @code{x} established in @code{binder}, depending on the "
"circumstances:"
msgstr ""

# type: itemize
#: lispref/variables.texi:934
msgid ""
"If we call @code{user} directly without calling @code{binder} at all, then "
"whatever binding of @code{x} is found, it cannot come from @code{binder}."
msgstr ""

# type: itemize
#: lispref/variables.texi:938
msgid ""
"If we define @code{foo} as follows and then call @code{binder}, then the "
"binding made in @code{binder} will be seen in @code{user}:"
msgstr ""

# type: group
#: lispref/variables.texi:943
#, no-wrap
msgid ""
"(defun foo (lose)\n"
"  (user))\n"
msgstr ""

# type: itemize
#: lispref/variables.texi:950
msgid ""
"However, if we define @code{foo} as follows and then call @code{binder}, "
"then the binding made in @code{binder} @emph{will not} be seen in @code"
"{user}:"
msgstr ""

# type: example
#: lispref/variables.texi:954
#, no-wrap
msgid ""
"(defun foo (x)\n"
"  (user))\n"
msgstr ""

# type: itemize
#: lispref/variables.texi:961
msgid ""
"Here, when @code{foo} is called by @code{binder}, it binds @code{x}.  (The "
"binding in @code{foo} is said to @dfn{shadow} the one made in @code"
"{binder}.)  Therefore, @code{user} will access the @code{x} bound by @code"
"{foo} instead of the one bound by @code{binder}."
msgstr ""

# type: Plain text
#: lispref/variables.texi:969
msgid ""
"Emacs Lisp uses dynamic scoping because simple implementations of lexical "
"scoping are slow.  In addition, every Lisp system needs to offer dynamic "
"scoping at least as an option; if lexical scoping is the norm, there must be "
"a way to specify dynamic scoping instead for a particular variable.  It "
"might not be a bad thing for Emacs to offer both, but implementing it with "
"dynamic scoping only was much easier."
msgstr ""

# type: Plain text
#: lispref/variables.texi:978
msgid ""
"@dfn{Extent} refers to the time during program execution that a variable "
"name is valid.  In Emacs Lisp, a variable is valid only while the form that "
"bound it is executing.  This is called @dfn{dynamic extent}.  ``Local'' or "
"``automatic'' variables in most languages, including C and Pascal, have "
"dynamic extent."
msgstr ""

# type: Plain text
#: lispref/variables.texi:983
msgid ""
"One alternative to dynamic extent is @dfn{indefinite extent}.  This means "
"that a variable binding can live on past the exit from the form that made "
"the binding.  Common Lisp and Scheme, for example, support this, but Emacs "
"Lisp does not."
msgstr ""

# type: Plain text
#: lispref/variables.texi:989
msgid ""
"To illustrate this, the function below, @code{make-add}, returns a function "
"that purports to add @var{n} to its own argument @var{m}.  This would work "
"in Common Lisp, but it does not do the job in Emacs Lisp, because after the "
"call to @code{make-add} exits, the variable @code{n} is no longer bound to "
"the actual argument 2."
msgstr ""

# type: example
#: lispref/variables.texi:999
#, no-wrap
msgid ""
"(defun make-add (n)\n"
"    (function (lambda (m) (+ n m))))  ; @r{Return a function.}\n"
"     @result{} make-add\n"
"(fset 'add2 (make-add 2))  ; @r{Define function @code{add2}}\n"
"                           ;   @r{with @code{(make-add 2)}.}\n"
"     @result{} (lambda (m) (+ n m))\n"
"(add2 4)                   ; @r{Try to add 2 to 4.}\n"
"@error{} Symbol's value as variable is void: n\n"
msgstr ""

# type: cindex
#: lispref/variables.texi:1001
#, no-wrap
msgid "closures not available"
msgstr ""

# type: Plain text
#: lispref/variables.texi:1005
msgid ""
"Some Lisp dialects have ``closures,'' objects that are like functions but "
"record additional variable bindings.  Emacs Lisp does not have closures."
msgstr ""

# type: subsection
#: lispref/variables.texi:1007
#, no-wrap
msgid "Implementation of Dynamic Scoping"
msgstr ""

# type: cindex
#: lispref/variables.texi:1008
#, no-wrap
msgid "deep binding"
msgstr ""

# type: Plain text
#: lispref/variables.texi:1013
msgid ""
"A simple sample implementation (which is not how Emacs Lisp actually works) "
"may help you understand dynamic binding.  This technique is called @dfn{deep "
"binding} and was used in early Lisp systems."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1019
msgid ""
"Suppose there is a stack of bindings, which are variable-value pairs.  At "
"entry to a function or to a @code{let} form, we can push bindings onto the "
"stack for the arguments or local variables created there.  We can pop those "
"bindings from the stack at exit from the binding construct."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1024
msgid ""
"We can find the value of a variable by searching the stack from top to "
"bottom for a binding for that variable; the value from that binding is the "
"value of the variable.  To set the variable, we search for the current "
"binding, then store the new value into that binding."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1030
msgid ""
"As you can see, a function's bindings remain in effect as long as it "
"continues execution, even during its calls to other functions.  That is why "
"we say the extent of the binding is dynamic.  And any other function can "
"refer to the bindings, if it uses the same variables while the bindings are "
"in effect.  That is why we say the scope is indefinite."
msgstr ""

# type: cindex
#: lispref/variables.texi:1031
#, no-wrap
msgid "shallow binding"
msgstr ""

# type: Plain text
#: lispref/variables.texi:1036
msgid ""
"The actual implementation of variable scoping in GNU Emacs Lisp uses a "
"technique called @dfn{shallow binding}.  Each variable has a standard place "
"in which its current value is always found---the value cell of the symbol."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1042
msgid ""
"In shallow binding, setting the variable works by storing a value in the "
"value cell.  Creating a new binding works by pushing the old value "
"(belonging to a previous binding) onto a stack, and storing the new local "
"value in the value cell.  Eliminating a binding works by popping the old "
"value off the stack, into the value cell."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1046
msgid ""
"We use shallow binding because it has the same results as deep binding, but "
"runs faster, since there is never a need to search for a binding."
msgstr ""

# type: subsection
#: lispref/variables.texi:1048
#, no-wrap
msgid "Proper Use of Dynamic Scoping"
msgstr ""

# type: Plain text
#: lispref/variables.texi:1053
msgid ""
"Binding a variable in one function and using it in another is a powerful "
"technique, but if used without restraint, it can make programs hard to "
"understand.  There are two clean ways to use this technique:"
msgstr ""

# type: itemize
#: lispref/variables.texi:1059
msgid ""
"Use or bind the variable only in a few related functions, written close "
"together in one file.  Such a variable is used for communication within one "
"program."
msgstr ""

# type: itemize
#: lispref/variables.texi:1063
msgid ""
"You should write comments to inform other programmers that they can see all "
"uses of the variable before them, and to advise them not to add uses "
"elsewhere."
msgstr ""

# type: itemize
#: lispref/variables.texi:1071
msgid ""
"Give the variable a well-defined, documented meaning, and make all "
"appropriate functions refer to it (but not bind it or set it) wherever that "
"meaning is relevant.  For example, the variable @code{case-fold-search} is "
"defined as ``non-@code{nil} means ignore case when searching''; various "
"search and replace functions refer to it directly or through their "
"subroutines, but do not bind or set it."
msgstr ""

# type: itemize
#: lispref/variables.texi:1074
msgid ""
"Then you can bind the variable in other programs, knowing reliably what the "
"effect will be."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1081
msgid ""
"In either case, you should define the variable with @code{defvar}.  This "
"helps other people understand your program by telling them to look for inter-"
"function usage.  It also avoids a warning from the byte compiler.  Choose "
"the variable's name to avoid name conflicts---don't use short names like "
"@code{x}."
msgstr ""

# type: cindex
#: lispref/variables.texi:1084
#, no-wrap
msgid "variable, buffer-local"
msgstr ""

# type: cindex
#: lispref/variables.texi:1085
#, no-wrap
msgid "buffer-local variables"
msgstr ""

# type: Plain text
#: lispref/variables.texi:1093
msgid ""
"Global and local variable bindings are found in most programming languages "
"in one form or another.  Emacs, however, also supports additional, unusual "
"kinds of variable binding: @dfn{buffer-local} bindings, which apply only in "
"one buffer, and @dfn{frame-local} bindings, which apply only in one frame.  "
"Having different values for a variable in different buffers and/or frames is "
"an important customization method."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1098
msgid ""
"This section describes buffer-local bindings; for frame-local bindings, see "
"the following section, @ref{Frame-Local Variables}.  (A few variables have "
"bindings that are local to each terminal; see @ref{Multiple Displays}.)"
msgstr ""

# type: menu
#: lispref/variables.texi:1104 lispref/variables.texi:1106
#: lispref/vol1.texi:475 lispref/vol2.texi:476
#, no-wrap
msgid "Intro to Buffer-Local"
msgstr ""

# type: menu
#: lispref/variables.texi:1104 lispref/vol1.texi:475 lispref/vol2.texi:476
msgid "Introduction and concepts."
msgstr ""

# type: menu
#: lispref/variables.texi:1104 lispref/vol1.texi:475 lispref/vol2.texi:476
msgid "Creating and destroying buffer-local bindings."
msgstr ""

# type: menu
#: lispref/variables.texi:1104 lispref/variables.texi:1404
#: lispref/vol1.texi:475 lispref/vol2.texi:476
#, no-wrap
msgid "Default Value"
msgstr ""

# type: menu
#: lispref/variables.texi:1104 lispref/vol1.texi:475 lispref/vol2.texi:476
msgid "The default value is seen in buffers"
msgstr ""

# type: menu
#: lispref/variables.texi:1104
msgid "that don't have their own buffer-local values."
msgstr ""

# type: subsection
#: lispref/variables.texi:1107
#, no-wrap
msgid "Introduction to Buffer-Local Variables"
msgstr ""

# type: Plain text
#: lispref/variables.texi:1115
msgid ""
"A buffer-local variable has a buffer-local binding associated with a "
"particular buffer.  The binding is in effect when that buffer is current; "
"otherwise, it is not in effect.  If you set the variable while a buffer-"
"local binding is in effect, the new value goes in that binding, so its other "
"bindings are unchanged.  This means that the change is visible only in the "
"buffer where you made it."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1119
msgid ""
"The variable's ordinary binding, which is not associated with any specific "
"buffer, is called the @dfn{default binding}.  In most cases, this is the "
"global binding."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1128
msgid ""
"A variable can have buffer-local bindings in some buffers but not in other "
"buffers.  The default binding is shared by all the buffers that don't have "
"their own bindings for the variable.  (This includes all newly-created "
"buffers.)  If you set the variable in a buffer that does not have a buffer-"
"local binding for it, this sets the default binding (assuming there are no "
"frame-local bindings to complicate the matter), so the new value is visible "
"in all the buffers that see the default binding."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1135
msgid ""
"The most common use of buffer-local bindings is for major modes to change "
"variables that control the behavior of commands.  For example, C mode and "
"Lisp mode both set the variable @code{paragraph-start} to specify that only "
"blank lines separate paragraphs.  They do this by making the variable buffer-"
"local in the buffer that is being put into C mode or Lisp mode, and then "
"setting it to the new value for that mode.  @xref{Major Modes}."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1141
msgid ""
"The usual way to make a buffer-local binding is with @code{make-local-"
"variable}, which is what major mode commands typically use.  This affects "
"just the current buffer; all other buffers (including those yet to be "
"created) will continue to share the default value unless they are explicitly "
"given their own buffer-local bindings."
msgstr ""

# type: cindex
#: lispref/variables.texi:1142
#, no-wrap
msgid "automatically buffer-local"
msgstr ""

# type: Plain text
#: lispref/variables.texi:1155
msgid ""
"A more powerful operation is to mark the variable as @dfn{automatically "
"buffer-local} by calling @code{make-variable-buffer-local}.  You can think "
"of this as making the variable local in all buffers, even those yet to be "
"created.  More precisely, the effect is that setting the variable "
"automatically makes the variable local to the current buffer if it is not "
"already so.  All buffers start out by sharing the default value of the "
"variable as usual, but setting the variable creates a buffer-local binding "
"for the current buffer.  The new value is stored in the buffer-local "
"binding, leaving the default binding untouched.  This means that the default "
"value cannot be changed with @code{setq} in any buffer; the only way to "
"change it is with @code{setq-default}."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1167
msgid ""
"@strong{Warning:} When a variable has buffer-local or frame-local bindings "
"in one or more buffers, @code{let} rebinds the binding that's currently in "
"effect.  For instance, if the current buffer has a buffer-local value, @code"
"{let} temporarily rebinds that.  If no buffer-local or frame-local bindings "
"are in effect, @code{let} rebinds the default value.  If inside the @code"
"{let} you then change to a different current buffer in which a different "
"binding is in effect, you won't see the @code{let} binding any more.  And if "
"you exit the @code{let} while still in the other buffer, you won't see the "
"unbinding occur (though it will occur properly).  Here is an example to "
"illustrate:"
msgstr ""

# type: group
#: lispref/variables.texi:1173
#, no-wrap
msgid ""
"(setq foo 'g)\n"
"(set-buffer \"a\")\n"
"(make-local-variable 'foo)\n"
msgstr ""

# type: example
#: lispref/variables.texi:1180
#, no-wrap
msgid ""
"(setq foo 'a)\n"
"(let ((foo 'temp))\n"
"  ;; foo @result{} 'temp  ; @r{let binding in buffer @samp{a}}\n"
"  (set-buffer \"b\")\n"
"  ;; foo @result{} 'g     ; @r{the global value since foo is not local in @samp{b}}\n"
"  @var{body}@dots{})\n"
msgstr ""

# type: group
#: lispref/variables.texi:1183
#, no-wrap
msgid ""
"foo @result{} 'g        ; @r{exiting restored the local value in buffer @samp{a},}\n"
"                 ; @r{but we don't see that in buffer @samp{b}}\n"
msgstr ""

# type: group
#: lispref/variables.texi:1187
#, no-wrap
msgid ""
"(set-buffer \"a\") ; @r{verify the local value was restored}\n"
"foo @result{} 'a\n"
msgstr ""

# type: Plain text
#: lispref/variables.texi:1192
msgid ""
"Note that references to @code{foo} in @var{body} access the buffer-local "
"binding of buffer @samp{b}."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1196
msgid ""
"When a file specifies local variable values, these become buffer-local "
"values when you visit the file.  @xref{File Variables,,, emacs, The GNU "
"Emacs Manual}."
msgstr ""

# type: subsection
#: lispref/variables.texi:1198
#, no-wrap
msgid "Creating and Deleting Buffer-Local Bindings"
msgstr ""

# type: deffn
#: lispref/variables.texi:1200
#, no-wrap
msgid "Command make-local-variable variable"
msgstr ""

# type: deffn
#: lispref/variables.texi:1204
msgid ""
"This function creates a buffer-local binding in the current buffer for @var"
"{variable} (a symbol).  Other buffers are not affected.  The value returned "
"is @var{variable}."
msgstr ""

# type: deffn
#: lispref/variables.texi:1209
msgid ""
"The buffer-local value of @var{variable} starts out as the same value @var"
"{variable} previously had.  If @var{variable} was void, it remains void."
msgstr ""

# type: group
#: lispref/variables.texi:1215
#, no-wrap
msgid ""
";; @r{In buffer @samp{b1}:}\n"
"(setq foo 5)                ; @r{Affects all buffers.}\n"
"     @result{} 5\n"
msgstr ""

# type: group
#: lispref/variables.texi:1219
#, no-wrap
msgid ""
"(make-local-variable 'foo)  ; @r{Now it is local in @samp{b1}.}\n"
"     @result{} foo\n"
msgstr ""

# type: group
#: lispref/variables.texi:1223
#, no-wrap
msgid ""
"foo                         ; @r{That did not change}\n"
"     @result{} 5                   ;   @r{the value.}\n"
msgstr ""

# type: group
#: lispref/variables.texi:1227
#, no-wrap
msgid ""
"(setq foo 6)                ; @r{Change the value}\n"
"     @result{} 6                   ;   @r{in @samp{b1}.}\n"
msgstr ""

# type: group
#: lispref/variables.texi:1231
#, no-wrap
msgid ""
"foo\n"
"     @result{} 6\n"
msgstr ""

# type: group
#: lispref/variables.texi:1239
#, no-wrap
msgid ""
";; @r{In buffer @samp{b2}, the value hasn't changed.}\n"
"(save-excursion\n"
"  (set-buffer \"b2\")\n"
"  foo)\n"
"     @result{} 5\n"
msgstr ""

# type: deffn
#: lispref/variables.texi:1247
msgid ""
"Making a variable buffer-local within a @code{let}-binding for that variable "
"does not work reliably, unless the buffer in which you do this is not "
"current either on entry to or exit from the @code{let}.  This is because "
"@code{let} does not distinguish between different kinds of bindings; it "
"knows only which variable the binding was made for."
msgstr ""

# type: deffn
#: lispref/variables.texi:1251
msgid ""
"If the variable is terminal-local, this function signals an error.  Such "
"variables cannot have buffer-local bindings as well.  @xref{Multiple "
"Displays}."
msgstr ""

# type: deffn
#: lispref/variables.texi:1256
msgid ""
"@strong{Warning:} do not use @code{make-local-variable} for a hook "
"variable.  The hook variables are automatically made buffer-local as needed "
"if you use the @var{local} argument to @code{add-hook} or @code{remove-hook}."
msgstr ""

# type: deffn
#: lispref/variables.texi:1258
#, no-wrap
msgid "Command make-variable-buffer-local variable"
msgstr ""

# type: deffn
#: lispref/variables.texi:1262
msgid ""
"This function marks @var{variable} (a symbol) automatically buffer-local, so "
"that any subsequent attempt to set it will make it local to the current "
"buffer at the time."
msgstr ""

# type: deffn
#: lispref/variables.texi:1268
msgid ""
"A peculiar wrinkle of this feature is that binding the variable (with @code"
"{let} or other binding constructs) does not create a buffer-local binding "
"for it.  Only setting the variable (with @code{set} or @code{setq}), while "
"the variable does not have a @code{let}-style binding that was made in the "
"current buffer, does so."
msgstr ""

# type: deffn
#: lispref/variables.texi:1274
msgid ""
"If @var{variable} does not have a default value, then calling this command "
"will give it a default value of @code{nil}.  If @var{variable} already has a "
"default value, that value remains unchanged.  Subsequently calling @code"
"{makunbound} on @var{variable} will result in a void buffer-local value and "
"leave the default value unaffected."
msgstr ""

# type: deffn
#: lispref/variables.texi:1276
msgid "The value returned is @var{variable}."
msgstr ""

# type: deffn
#: lispref/variables.texi:1282
msgid ""
"@strong{Warning:} Don't assume that you should use @code{make-variable-"
"buffer-local} for user-option variables, simply because users @emph{might} "
"want to customize them differently in different buffers.  Users can make any "
"variable local, when they wish to.  It is better to leave the choice to them."
msgstr ""

# type: deffn
#: lispref/variables.texi:1288
msgid ""
"The time to use @code{make-variable-buffer-local} is when it is crucial that "
"no two buffers ever share the same binding.  For example, when a variable is "
"used for internal purposes in a Lisp program which depends on having "
"separate values in separate buffers, then using @code{make-variable-buffer-"
"local} can be the best solution."
msgstr ""

# type: defun
#: lispref/variables.texi:1290
#, no-wrap
msgid "local-variable-p variable &optional buffer"
msgstr ""

# type: defun
#: lispref/variables.texi:1294
msgid ""
"This returns @code{t} if @var{variable} is buffer-local in buffer @var"
"{buffer} (which defaults to the current buffer); otherwise, @code{nil}."
msgstr ""

# type: defun
#: lispref/variables.texi:1296
#, no-wrap
msgid "local-variable-if-set-p variable &optional buffer"
msgstr ""

# type: defun
#: lispref/variables.texi:1300
msgid ""
"This returns @code{t} if @var{variable} will become buffer-local in buffer "
"@var{buffer} (which defaults to the current buffer) if it is set there."
msgstr ""

# type: defun
#: lispref/variables.texi:1302
#, no-wrap
msgid "buffer-local-value variable buffer"
msgstr ""

# type: defun
#: lispref/variables.texi:1307
msgid ""
"This function returns the buffer-local binding of @var{variable} (a symbol) "
"in buffer @var{buffer}.  If @var{variable} does not have a buffer-local "
"binding in buffer @var{buffer}, it returns the default value (@pxref{Default "
"Value}) of @var{variable} instead."
msgstr ""

# type: defun
#: lispref/variables.texi:1309
#, no-wrap
msgid "buffer-local-variables &optional buffer"
msgstr ""

# type: defun
#: lispref/variables.texi:1316
msgid ""
"This function returns a list describing the buffer-local variables in buffer "
"@var{buffer}.  (If @var{buffer} is omitted, the current buffer is used.)  It "
"returns an association list (@pxref{Association Lists}) in which each "
"element contains one buffer-local variable and its value.  However, when a "
"variable's buffer-local binding in @var{buffer} is void, then the variable "
"appears directly in the resulting list."
msgstr ""

# type: group
#: lispref/variables.texi:1323
#, no-wrap
msgid ""
"(make-local-variable 'foobar)\n"
"(makunbound 'foobar)\n"
"(make-local-variable 'bind-me)\n"
"(setq bind-me 69)\n"
msgstr ""

# type: example
#: lispref/variables.texi:1330
#, no-wrap
msgid ""
"(setq lcl (buffer-local-variables))\n"
"    ;; @r{First, built-in variables local in all buffers:}\n"
"@result{} ((mark-active . nil)\n"
"    (buffer-undo-list . nil)\n"
"    (mode-name . \"Fundamental\")\n"
"    @dots{}\n"
msgstr ""

# type: group
#: lispref/variables.texi:1336
#, no-wrap
msgid ""
"    ;; @r{Next, non-built-in buffer-local variables.}\n"
"    ;; @r{This one is buffer-local and void:}\n"
"    foobar\n"
"    ;; @r{This one is buffer-local and nonvoid:}\n"
"    (bind-me . 69))\n"
msgstr ""

# type: defun
#: lispref/variables.texi:1341
msgid ""
"Note that storing new values into the @sc{cdr}s of cons cells in this list "
"does @emph{not} change the buffer-local values of the variables."
msgstr ""

# type: deffn
#: lispref/variables.texi:1343
#, no-wrap
msgid "Command kill-local-variable variable"
msgstr ""

# type: deffn
#: lispref/variables.texi:1350
msgid ""
"This function deletes the buffer-local binding (if any) for @var{variable} "
"(a symbol) in the current buffer.  As a result, the default binding of @var"
"{variable} becomes visible in this buffer.  This typically results in a "
"change in the value of @var{variable}, since the default value is usually "
"different from the buffer-local value just eliminated."
msgstr ""

# type: deffn
#: lispref/variables.texi:1355
msgid ""
"If you kill the buffer-local binding of a variable that automatically "
"becomes buffer-local when set, this makes the default value visible in the "
"current buffer.  However, if you set the variable again, that will once "
"again create a buffer-local binding for it."
msgstr ""

# type: deffn
#: lispref/variables.texi:1357
msgid "@code{kill-local-variable} returns @var{variable}."
msgstr ""

# type: deffn
#: lispref/variables.texi:1361
msgid ""
"This function is a command because it is sometimes useful to kill one buffer-"
"local variable interactively, just as it is useful to create buffer-local "
"variables interactively."
msgstr ""

# type: defun
#: lispref/variables.texi:1363
#, no-wrap
msgid "kill-all-local-variables"
msgstr ""

# type: defun
#: lispref/variables.texi:1367
msgid ""
"This function eliminates all the buffer-local variable bindings of the "
"current buffer except for variables marked as ``permanent.'' As a result, "
"the buffer will see the default values of most variables."
msgstr ""

# type: defun
#: lispref/variables.texi:1373
msgid ""
"This function also resets certain other information pertaining to the "
"buffer: it sets the local keymap to @code{nil}, the syntax table to the "
"value of @code{(standard-syntax-table)}, the case table to @code{(standard-"
"case-table)}, and the abbrev table to the value of @code{fundamental-mode-"
"abbrev-table}."
msgstr ""

# type: defun
#: lispref/variables.texi:1376
msgid ""
"The very first thing this function does is run the normal hook @code{change-"
"major-mode-hook} (see below)."
msgstr ""

# type: defun
#: lispref/variables.texi:1381
msgid ""
"Every major mode command begins by calling this function, which has the "
"effect of switching to Fundamental mode and erasing most of the effects of "
"the previous major mode.  To ensure that this does its job, the variables "
"that major modes set should not be marked permanent."
msgstr ""

# type: defun
#: lispref/variables.texi:1383
msgid "@code{kill-all-local-variables} returns @code{nil}."
msgstr ""

# type: defvar
#: lispref/variables.texi:1391
msgid ""
"The function @code{kill-all-local-variables} runs this normal hook before it "
"does anything else.  This gives major modes a way to arrange for something "
"special to be done if the user switches to a different major mode.  It is "
"also useful for buffer-specific minor modes that should be forgotten if the "
"user changes the major mode."
msgstr ""

# type: defvar
#: lispref/variables.texi:1395
msgid ""
"For best results, make this variable buffer-local, so that it will disappear "
"after doing its job and will not interfere with the subsequent major mode.  "
"@xref{Hooks}."
msgstr ""

# type: cindex
#: lispref/variables.texi:1398
#, no-wrap
msgid "permanent local variable"
msgstr ""

# type: Plain text
#: lispref/variables.texi:1403
msgid ""
"A buffer-local variable is @dfn{permanent} if the variable name (a symbol) "
"has a @code{permanent-local} property that is non-@code{nil}.  Permanent "
"locals are appropriate for data pertaining to where the file came from or "
"how to save it, rather than with how to edit the contents."
msgstr ""

# type: subsection
#: lispref/variables.texi:1405
#, no-wrap
msgid "The Default Value of a Buffer-Local Variable"
msgstr ""

# type: cindex
#: lispref/variables.texi:1406
#, no-wrap
msgid "default value"
msgstr ""

# type: Plain text
#: lispref/variables.texi:1412
msgid ""
"The global value of a variable with buffer-local bindings is also called the "
"@dfn{default} value, because it is the value that is in effect whenever "
"neither the current buffer nor the selected frame has its own binding for "
"the variable."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1420
msgid ""
"The functions @code{default-value} and @code{setq-default} access and change "
"a variable's default value regardless of whether the current buffer has a "
"buffer-local binding.  For example, you could use @code{setq-default} to "
"change the default setting of @code{paragraph-start} for most buffers; and "
"this would work even when you are in a C or Lisp mode buffer that has a "
"buffer-local value for this variable."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1425
msgid ""
"The special forms @code{defvar} and @code{defconst} also set the default "
"value (if they set the variable at all), rather than any buffer-local or "
"frame-local value."
msgstr ""

# type: defun
#: lispref/variables.texi:1426
#, no-wrap
msgid "default-value symbol"
msgstr ""

# type: defun
#: lispref/variables.texi:1431
msgid ""
"This function returns @var{symbol}'s default value.  This is the value that "
"is seen in buffers and frames that do not have their own values for this "
"variable.  If @var{symbol} is not buffer-local, this is equivalent to @code"
"{symbol-value} (@pxref{Accessing Variables})."
msgstr ""

# type: defun
#: lispref/variables.texi:1434
#, no-wrap
msgid "default-boundp symbol"
msgstr ""

# type: defun
#: lispref/variables.texi:1438
msgid ""
"The function @code{default-boundp} tells you whether @var{symbol}'s default "
"value is nonvoid.  If @code{(default-boundp 'foo)} returns @code{nil}, then "
"@code{(default-value 'foo)} would get an error."
msgstr ""

# type: defun
#: lispref/variables.texi:1441
msgid ""
"@code{default-boundp} is to @code{default-value} as @code{boundp} is to @code"
"{symbol-value}."
msgstr ""

# type: defspec
#: lispref/variables.texi:1443
#, no-wrap
msgid "setq-default [symbol form]@dots{}"
msgstr ""

# type: defspec
#: lispref/variables.texi:1448
msgid ""
"This special form gives each @var{symbol} a new default value, which is the "
"result of evaluating the corresponding @var{form}.  It does not evaluate @var"
"{symbol}, but does evaluate @var{form}.  The value of the @code{setq-"
"default} form is the value of the last @var{form}."
msgstr ""

# type: defspec
#: lispref/variables.texi:1455
msgid ""
"If a @var{symbol} is not buffer-local for the current buffer, and is not "
"marked automatically buffer-local, @code{setq-default} has the same effect "
"as @code{setq}.  If @var{symbol} is buffer-local for the current buffer, "
"then this changes the value that other buffers will see (as long as they "
"don't have a buffer-local value), but not the value that the current buffer "
"sees."
msgstr ""

# type: group
#: lispref/variables.texi:1461
#, no-wrap
msgid ""
";; @r{In buffer @samp{foo}:}\n"
"(make-local-variable 'buffer-local)\n"
"     @result{} buffer-local\n"
msgstr ""

# type: group
#: lispref/variables.texi:1465
#, no-wrap
msgid ""
"(setq buffer-local 'value-in-foo)\n"
"     @result{} value-in-foo\n"
msgstr ""

# type: group
#: lispref/variables.texi:1469
#, no-wrap
msgid ""
"(setq-default buffer-local 'new-default)\n"
"     @result{} new-default\n"
msgstr ""

# type: group
#: lispref/variables.texi:1473
#, no-wrap
msgid ""
"buffer-local\n"
"     @result{} value-in-foo\n"
msgstr ""

# type: group
#: lispref/variables.texi:1477 lispref/variables.texi:1487
#, no-wrap
msgid ""
"(default-value 'buffer-local)\n"
"     @result{} new-default\n"
msgstr ""

# type: group
#: lispref/variables.texi:1483
#, no-wrap
msgid ""
";; @r{In (the new) buffer @samp{bar}:}\n"
"buffer-local\n"
"     @result{} new-default\n"
msgstr ""

# type: group
#: lispref/variables.texi:1491
#, no-wrap
msgid ""
"(setq buffer-local 'another-default)\n"
"     @result{} another-default\n"
msgstr ""

# type: group
#: lispref/variables.texi:1495
#, no-wrap
msgid ""
"(default-value 'buffer-local)\n"
"     @result{} another-default\n"
msgstr ""

# type: group
#: lispref/variables.texi:1503
#, no-wrap
msgid ""
";; @r{Back in buffer @samp{foo}:}\n"
"buffer-local\n"
"     @result{} value-in-foo\n"
"(default-value 'buffer-local)\n"
"     @result{} another-default\n"
msgstr ""

# type: defun
#: lispref/variables.texi:1507
#, no-wrap
msgid "set-default symbol value"
msgstr ""

# type: defun
#: lispref/variables.texi:1510
msgid ""
"This function is like @code{setq-default}, except that @var{symbol} is an "
"ordinary evaluated argument."
msgstr ""

# type: group
#: lispref/variables.texi:1515
#, no-wrap
msgid ""
"(set-default (car '(a b c)) 23)\n"
"     @result{} 23\n"
msgstr ""

# type: group
#: lispref/variables.texi:1519
#, no-wrap
msgid ""
"(default-value 'a)\n"
"     @result{} 23\n"
msgstr ""

# type: cindex
#: lispref/variables.texi:1525
#, no-wrap
msgid "frame-local variables"
msgstr ""

# type: Plain text
#: lispref/variables.texi:1533
msgid ""
"Just as variables can have buffer-local bindings, they can also have frame-"
"local bindings.  These bindings belong to one frame, and are in effect when "
"that frame is selected.  Frame-local bindings are actually frame parameters: "
"you create a frame-local binding in a specific frame by calling @code{modify-"
"frame-parameters} and specifying the variable name as the parameter name."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1536
msgid ""
"To enable frame-local bindings for a certain variable, call the function "
"@code{make-variable-frame-local}."
msgstr ""

# type: deffn
#: lispref/variables.texi:1537
#, no-wrap
msgid "Command make-variable-frame-local variable"
msgstr ""

# type: deffn
#: lispref/variables.texi:1542
msgid ""
"Enable the use of frame-local bindings for @var{variable}.  This does not in "
"itself create any frame-local bindings for the variable; however, if some "
"frame already has a value for @var{variable} as a frame parameter, that "
"value automatically becomes a frame-local binding."
msgstr ""

# type: deffn
#: lispref/variables.texi:1546
msgid ""
"If @var{variable} does not have a default value, then calling this command "
"will give it a default value of @code{nil}.  If @var{variable} already has a "
"default value, that value remains unchanged."
msgstr ""

# type: deffn
#: lispref/variables.texi:1551
msgid ""
"If the variable is terminal-local, this function signals an error, because "
"such variables cannot have frame-local bindings as well.  @xref{Multiple "
"Displays}.  A few variables that are implemented specially in Emacs can be "
"buffer-local, but can never be frame-local."
msgstr ""

# type: deffn
#: lispref/variables.texi:1553
msgid "This command returns @var{variable}."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1560
msgid ""
"Buffer-local bindings take precedence over frame-local bindings.  Thus, "
"consider a variable @code{foo}: if the current buffer has a buffer-local "
"binding for @code{foo}, that binding is active; otherwise, if the selected "
"frame has a frame-local binding for @code{foo}, that binding is active; "
"otherwise, the default binding of @code{foo} is active."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1562
msgid "Here is an example.  First we prepare a few bindings for @code{foo}:"
msgstr ""

# type: example
#: lispref/variables.texi:1566
#, no-wrap
msgid ""
"(setq f1 (selected-frame))\n"
"(make-variable-frame-local 'foo)\n"
"\n"
msgstr ""

# type: example
#: lispref/variables.texi:1571
#, no-wrap
msgid ""
";; @r{Make a buffer-local binding for @code{foo} in @samp{b1}.}\n"
"(set-buffer (get-buffer-create \"b1\"))\n"
"(make-local-variable 'foo)\n"
"(setq foo '(b 1))\n"
"\n"
msgstr ""

# type: example
#: lispref/variables.texi:1576
#, no-wrap
msgid ""
";; @r{Make a frame-local binding for @code{foo} in a new frame.}\n"
";; @r{Store that frame in @code{f2}.}\n"
"(setq f2 (make-frame))\n"
"(modify-frame-parameters f2 '((foo . (f 2))))\n"
msgstr ""

# type: Plain text
#: lispref/variables.texi:1581
msgid ""
"Now we examine @code{foo} in various contexts.  Whenever the buffer @samp"
"{b1} is current, its buffer-local binding is in effect, regardless of the "
"selected frame:"
msgstr ""

# type: example
#: lispref/variables.texi:1587
#, no-wrap
msgid ""
"(select-frame f1)\n"
"(set-buffer (get-buffer-create \"b1\"))\n"
"foo\n"
"     @result{} (b 1)\n"
"\n"
msgstr ""

# type: example
#: lispref/variables.texi:1592
#, no-wrap
msgid ""
"(select-frame f2)\n"
"(set-buffer (get-buffer-create \"b1\"))\n"
"foo\n"
"     @result{} (b 1)\n"
msgstr ""

# type: Plain text
#: lispref/variables.texi:1597
msgid ""
"Otherwise, the frame gets a chance to provide the binding; when frame @code"
"{f2} is selected, its frame-local binding is in effect:"
msgstr ""

# type: example
#: lispref/variables.texi:1603
#, no-wrap
msgid ""
"(select-frame f2)\n"
"(set-buffer (get-buffer \"*scratch*\"))\n"
"foo\n"
"     @result{} (f 2)\n"
msgstr ""

# type: Plain text
#: lispref/variables.texi:1608
msgid ""
"When neither the current buffer nor the selected frame provides a binding, "
"the default binding is used:"
msgstr ""

# type: example
#: lispref/variables.texi:1614
#, no-wrap
msgid ""
"(select-frame f1)\n"
"(set-buffer (get-buffer \"*scratch*\"))\n"
"foo\n"
"     @result{} nil\n"
msgstr ""

# type: Plain text
#: lispref/variables.texi:1620
msgid ""
"When the active binding of a variable is a frame-local binding, setting the "
"variable changes that binding.  You can observe the result with @code{frame-"
"parameters}:"
msgstr ""

# type: example
#: lispref/variables.texi:1627
#, no-wrap
msgid ""
"(select-frame f2)\n"
"(set-buffer (get-buffer \"*scratch*\"))\n"
"(setq foo 'nobody)\n"
"(assq 'foo (frame-parameters f2))\n"
"     @result{} (foo . nobody)\n"
msgstr ""

# type: section
#: lispref/variables.texi:1630
#, no-wrap
msgid "Possible Future Local Variables"
msgstr ""

# type: Plain text
#: lispref/variables.texi:1639
msgid ""
"We have considered the idea of bindings that are local to a category of "
"frames---for example, all color frames, or all frames with dark "
"backgrounds.  We have not implemented them because it is not clear that this "
"feature is really useful.  You can get more or less the same results by "
"adding a function to @code{after-make-frame-functions}, set up to define a "
"particular frame parameter according to the appropriate conditions for each "
"frame."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1644
msgid ""
"It would also be possible to implement window-local bindings.  We don't know "
"of many situations where they would be useful, and it seems that indirect "
"buffers (@pxref{Indirect Buffers}) with buffer-local bindings offer a way to "
"handle these situations more robustly."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1647
msgid ""
"If sufficient application is found for either of these two kinds of local "
"bindings, we will provide it in a subsequent Emacs version."
msgstr ""

# type: cindex
#: lispref/variables.texi:1650
#, no-wrap
msgid "file local variables"
msgstr ""

# type: Plain text
#: lispref/variables.texi:1658
msgid ""
"A file can specify local variable values; Emacs uses these to create buffer-"
"local bindings for those variables in the buffer visiting that file.  @xref"
"{File variables, , Local Variables in Files, emacs, The GNU Emacs Manual}, "
"for basic information about file local variables.  This section describes "
"the functions and variables that affect processing of file local variables."
msgstr ""

# type: defopt
#: lispref/variables.texi:1659
#, no-wrap
msgid "enable-local-variables"
msgstr "enable-local-variables"

# type: defopt
#: lispref/variables.texi:1662
msgid ""
"This variable controls whether to process file local variables.  The "
"possible values are:"
msgstr ""

# type: item
#: lispref/variables.texi:1664
#, no-wrap
msgid "@code{t} (the default)"
msgstr ""

# type: table
#: lispref/variables.texi:1666
msgid "Set the safe variables, and query (once) about any unsafe variables."
msgstr ""

# type: code{#1}
#: lispref/variables.texi:1666
#, no-wrap
msgid ":safe"
msgstr ":safe"

# type: table
#: lispref/variables.texi:1668
msgid "Set only the safe variables and do not query."
msgstr ""

# type: code{#1}
#: lispref/variables.texi:1668
#, no-wrap
msgid ":all"
msgstr ":all"

# type: table
#: lispref/variables.texi:1670
msgid "Set all the variables and do not query."
msgstr ""

# type: table
#: lispref/variables.texi:1672
msgid "Don't set any variables."
msgstr ""

# type: table
#: lispref/variables.texi:1674
msgid "Query (once) about all the variables."
msgstr ""

# type: defun
#: lispref/variables.texi:1677
#, no-wrap
msgid "hack-local-variables &optional mode-only"
msgstr ""

# type: defun
#: lispref/variables.texi:1684
msgid ""
"This function parses, and binds or evaluates as appropriate, any local "
"variables specified by the contents of the current buffer.  The variable "
"@code{enable-local-variables} has its effect here.  However, this function "
"does not look for the @samp{mode:} local variable in the @w{@samp{-*-}} "
"line.  @code{set-auto-mode} does that, also taking @code{enable-local-"
"variables} into account (@pxref{Auto Major Mode})."
msgstr ""

# type: defun
#: lispref/variables.texi:1689
msgid ""
"If the optional argument @var{mode-only} is non-@code{nil}, then all this "
"function does is return @code{t} if the @w{@samp{-*-}} line or the local "
"variables list specifies a mode and @code{nil} otherwise.  It does not set "
"the mode nor any other file local variable."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1695
msgid ""
"If a file local variable could specify a function that would be called "
"later, or an expression that would be executed later, simply visiting a file "
"could take over your Emacs.  Emacs takes several measures to prevent this."
msgstr ""

# type: cindex
#: lispref/variables.texi:1696
#, no-wrap
msgid "safe local variable"
msgstr ""

# type: Plain text
#: lispref/variables.texi:1706
msgid ""
"You can specify safe values for a variable with a @code{safe-local-variable} "
"property.  The property has to be a function of one argument; any value is "
"safe if the function returns non-@code{nil} given that value.  Many commonly "
"encountered file variables standardly have @code{safe-local-variable} "
"properties, including @code{fill-column}, @code{fill-prefix}, and @code"
"{indent-tabs-mode}.  For boolean-valued variables that are safe, use @code"
"{booleanp} as the property value.  Lambda expressions should be quoted so "
"that @code{describe-variable} can display the predicate."
msgstr ""

# type: defopt
#: lispref/variables.texi:1707
#, no-wrap
msgid "safe-local-variable-values"
msgstr ""

# type: defopt
#: lispref/variables.texi:1712
msgid ""
"This variable provides another way to mark some variable values as safe.  It "
"is a list of cons cells @code{(@var{var} . @var{val})}, where @var{var} is a "
"variable name and @var{val} is a value which is safe for that variable."
msgstr ""

# type: defopt
#: lispref/variables.texi:1718
msgid ""
"When Emacs asks the user whether or not to obey a set of file local variable "
"specifications, the user can choose to mark them as safe.  Doing so adds "
"those variable/value pairs to @code{safe-local-variable-values}, and saves "
"it to the user's custom file."
msgstr ""

# type: defun
#: lispref/variables.texi:1720
#, no-wrap
msgid "safe-local-variable-p sym val"
msgstr ""

# type: defun
#: lispref/variables.texi:1723
msgid ""
"This function returns non-@code{nil} if it is safe to give @var{sym} the "
"value @var{val}, based on the above criteria."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1736
msgid ""
"Some variables are considered @dfn{risky}.  A variable whose name ends in "
"any of @samp{-command}, @samp{-frame-alist}, @samp{-function}, @samp{-"
"functions}, @samp{-hook}, @samp{-hooks}, @samp{-form}, @samp{-forms}, @samp{-"
"map}, @samp{-map-alist}, @samp{-mode-alist}, @samp{-program}, or @samp{-"
"predicate} is considered risky.  The variables @samp{font-lock-keywords}, "
"@samp{font-lock-keywords} followed by a digit, and @samp{font-lock-syntactic-"
"keywords} are also considered risky.  Finally, any variable whose name has a "
"non-@code{nil} @code{risky-local-variable} property is considered risky."
msgstr ""

# type: defun
#: lispref/variables.texi:1737
#, no-wrap
msgid "risky-local-variable-p sym"
msgstr ""

# type: defun
#: lispref/variables.texi:1740
msgid ""
"This function returns non-@code{nil} if @var{sym} is a risky variable, based "
"on the above criteria."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1747
msgid ""
"If a variable is risky, it will not be entered automatically into @code{safe-"
"local-variable-values} as described above.  Therefore, Emacs will always "
"query before setting a risky variable, unless the user explicitly allows the "
"setting by customizing @code{safe-local-variable-values} directly."
msgstr ""

# type: defvar
#: lispref/variables.texi:1748
#, no-wrap
msgid "ignored-local-variables"
msgstr ""

# type: defvar
#: lispref/variables.texi:1752
msgid ""
"This variable holds a list of variables that should not be given local "
"values by files.  Any value specified for one of these variables is "
"completely ignored."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1756
msgid ""
"The @samp{Eval:} ``variable'' is also a potential loophole, so Emacs "
"normally asks for confirmation before handling it."
msgstr ""

# type: defopt
#: lispref/variables.texi:1757
#, no-wrap
msgid "enable-local-eval"
msgstr "enable-local-eval"

# type: defopt
#: lispref/variables.texi:1763
msgid ""
"This variable controls processing of @samp{Eval:} in @samp{-*-} lines or "
"local variables lists in files being visited.  A value of @code{t} means "
"process them unconditionally; @code{nil} means ignore them; anything else "
"means ask the user what to do for each file.  The default value is @code"
"{maybe}."
msgstr ""

# type: defopt
#: lispref/variables.texi:1765
#, no-wrap
msgid "safe-local-eval-forms"
msgstr "safe-local-eval-forms"

# type: defopt
#: lispref/variables.texi:1769
msgid ""
"This variable holds a list of expressions that are safe to evaluate when "
"found in the @samp{Eval:} ``variable'' in a file local variables list."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1777
msgid ""
"If the expression is a function call and the function has a @code{safe-local-"
"eval-function} property, the property value determines whether the "
"expression is safe to evaluate.  The property value can be a predicate to "
"call to test the expression, a list of such predicates (it's safe if any "
"predicate succeeds), or @code{t} (always safe provided the arguments are "
"constant)."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1781
msgid ""
"Text properties are also potential loopholes, since their values could "
"include functions to call.  So Emacs discards all text properties from "
"string values specified for file local variables."
msgstr ""

# type: cindex
#: lispref/variables.texi:1784
#, no-wrap
msgid "variable aliases"
msgstr ""

# type: Plain text
#: lispref/variables.texi:1793
msgid ""
"It is sometimes useful to make two variables synonyms, so that both "
"variables always have the same value, and changing either one also changes "
"the other.  Whenever you change the name of a variable---either because you "
"realize its old name was not well chosen, or because its meaning has partly "
"changed---it can be useful to keep the old name as an @emph{alias} of the "
"new one for compatibility.  You can do this with @code{defvaralias}."
msgstr ""

# type: defun
#: lispref/variables.texi:1794
#, no-wrap
msgid "defvaralias new-alias base-variable &optional docstring"
msgstr ""

# type: defun
#: lispref/variables.texi:1801
msgid ""
"This function defines the symbol @var{new-alias} as a variable alias for "
"symbol @var{base-variable}. This means that retrieving the value of @var{new-"
"alias} returns the value of @var{base-variable}, and changing the value of "
"@var{new-alias} changes the value of @var{base-variable}.  The two aliased "
"variable names always share the same value and the same bindings."
msgstr ""

# type: defun
#: lispref/variables.texi:1807
msgid ""
"If the @var{docstring} argument is non-@code{nil}, it specifies the "
"documentation for @var{new-alias}; otherwise, the alias gets the same "
"documentation as @var{base-variable} has, if any, unless @var{base-variable} "
"is itself an alias, in which case @var{new-alias} gets the documentation of "
"the variable at the end of the chain of aliases."
msgstr ""

# type: defun
#: lispref/variables.texi:1809
msgid "This function returns @var{base-variable}."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1815
msgid ""
"Variable aliases are convenient for replacing an old name for a variable "
"with a new name.  @code{make-obsolete-variable} declares that the old name "
"is obsolete and therefore that it may be removed at some stage in the future."
msgstr ""

# type: defun
#: lispref/variables.texi:1816
#, no-wrap
msgid "make-obsolete-variable obsolete-name current-name &optional when"
msgstr ""

# type: defun
#: lispref/variables.texi:1822
msgid ""
"This function makes the byte-compiler warn that the variable @var{obsolete-"
"name} is obsolete.  If @var{current-name} is a symbol, it is the variable's "
"new name; then the warning message says to use @var{current-name} instead of "
"@var{obsolete-name}.  If @var{current-name} is a string, this is the message "
"and there is no replacement variable."
msgstr ""

# type: defun
#: lispref/variables.texi:1826
msgid ""
"If provided, @var{when} should be a string indicating when the variable was "
"first made obsolete---for example, a date or a release number."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1830
msgid ""
"You can make two variables synonyms and declare one obsolete at the same "
"time using the macro @code{define-obsolete-variable-alias}."
msgstr ""

# type: defmac
#: lispref/variables.texi:1831
#, no-wrap
msgid "define-obsolete-variable-alias obsolete-name current-name &optional when docstring"
msgstr ""

# type: defmac
#: lispref/variables.texi:1835
msgid ""
"This macro marks the variable @var{obsolete-name} as obsolete and also makes "
"it an alias for the variable @var{current-name}.  It is equivalent to the "
"following:"
msgstr ""

# type: example
#: lispref/variables.texi:1839
#, no-wrap
msgid ""
"(defvaralias @var{obsolete-name} @var{current-name} @var{docstring})\n"
"(make-obsolete-variable @var{obsolete-name} @var{current-name} @var{when})\n"
msgstr ""

# type: defun
#: lispref/variables.texi:1842
#, no-wrap
msgid "indirect-variable variable"
msgstr ""

# type: defun
#: lispref/variables.texi:1846
msgid ""
"This function returns the variable at the end of the chain of aliases of @var"
"{variable}.  If @var{variable} is not a symbol, or if @var{variable} is not "
"defined as an alias, the function returns @var{variable}."
msgstr ""

# type: defun
#: lispref/variables.texi:1849
msgid ""
"This function signals a @code{cyclic-variable-indirection} error if there is "
"a loop in the chain of symbols."
msgstr ""

# type: example
#: lispref/variables.texi:1860
#, no-wrap
msgid ""
"(defvaralias 'foo 'bar)\n"
"(indirect-variable 'foo)\n"
"     @result{} bar\n"
"(indirect-variable 'bar)\n"
"     @result{} bar\n"
"(setq bar 2)\n"
"bar\n"
"     @result{} 2\n"
msgstr ""

# type: group
#: lispref/variables.texi:1863
#, no-wrap
msgid ""
"foo\n"
"     @result{} 2\n"
msgstr ""

# type: example
#: lispref/variables.texi:1869
#, no-wrap
msgid ""
"(setq foo 0)\n"
"bar\n"
"     @result{} 0\n"
"foo\n"
"     @result{} 0\n"
msgstr ""

# type: Plain text
#: lispref/variables.texi:1883
msgid ""
"Ordinary Lisp variables can be assigned any value that is a valid Lisp "
"object.  However, certain Lisp variables are not defined in Lisp, but in C.  "
"Most of these variables are defined in the C code using @code{DEFVAR_LISP}.  "
"Like variables defined in Lisp, these can take on any value.  However, some "
"variables are defined using @code{DEFVAR_INT} or @code{DEFVAR_BOOL}.  @xref"
"{Defining Lisp variables in C,, Writing Emacs Primitives}, in particular the "
"description of functions of the type @code{syms_of_@var{filename}}, for a "
"brief discussion of the C implementation."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1887
msgid ""
"Variables of type @code{DEFVAR_BOOL} can only take on the values @code{nil} "
"or @code{t}.  Attempting to assign them any other value will set them to "
"@code{t}:"
msgstr ""

# type: example
#: lispref/variables.texi:1892
#, no-wrap
msgid ""
"(let ((display-hourglass 5))\n"
"  display-hourglass)\n"
"     @result{} t\n"
msgstr ""

# type: defvar
#: lispref/variables.texi:1896
msgid "This variable holds a list of all variables of type @code{DEFVAR_BOOL}."
msgstr ""

# type: Plain text
#: lispref/variables.texi:1900
msgid ""
"Variables of type @code{DEFVAR_INT} can only take on integer values.  "
"Attempting to assign them any other value will result in an error:"
msgstr ""

# type: example
#: lispref/variables.texi:1904
#, no-wrap
msgid ""
"(setq window-min-height 5.0)\n"
"@error{} Wrong type argument: integerp, 5.0\n"
msgstr ""

# type: ignore
#: lispref/variables.texi:1908
#, no-wrap
msgid "   arch-tag: 5ff62c44-2b51-47bb-99d4-fea5aeec5d3e\n"
msgstr ""

# type: Plain text
#: lispref/vol1.texi:3 lispref/vol2.texi:3
msgid ""
"This file is obsolete, and no longer part of the Emacs Lisp Reference "
"Manual.  It is still present in CVS in case we ever want to use some of it "
"again."
msgstr ""

# type: settitle
#: lispref/vol1.texi:12
#, no-wrap
msgid "GNU Emacs Lisp Reference Manual: Volume 1"
msgstr ""

# type: tex
#: lispref/vol1.texi:20 lispref/vol2.texi:21
#, no-wrap
msgid ""
"%%%% Experiment with smaller skip before sections and subsections.\n"
"%%%% --rjc 30mar92\n"
"\n"
msgstr ""

# type: tex
#: lispref/vol1.texi:23 lispref/vol2.texi:24
#, no-wrap
msgid ""
"\\global\\secheadingskip = 17pt plus 6pt minus 3pt\n"
"\\global\\subsecheadingskip = 14pt plus 6pt minus 3pt\n"
"\n"
msgstr ""

# type: tex
#: lispref/vol1.texi:27 lispref/vol2.texi:28
#, no-wrap
msgid ""
"% The defaults are:\n"
"%   \\secheadingskip = 21pt plus 8pt minus 4pt\n"
"%   \\subsecheadingskip = 17pt plus 8pt minus 4pt\n"
msgstr ""

# type: tex
#: lispref/vol1.texi:38
#, no-wrap
msgid "\\global\\chapno=0\n"
msgstr ""

# type: tex
#: lispref/vol1.texi:50 lispref/vol2.texi:51
#, no-wrap
msgid ""
"\\message{}\n"
"\\message{Redefining contents commands...}\n"
"\\message{}\n"
"\n"
msgstr ""

# type: tex
#: lispref/vol1.texi:52 lispref/vol2.texi:53
#, no-wrap
msgid ""
"% Special @contents  command\n"
"\n"
msgstr ""

# type: tex
#: lispref/vol1.texi:60
#, no-wrap
msgid ""
"% This inputs fixed up table of contents file rather than create new one.\n"
"\\global\\def\\contents{%\n"
"   \\startcontents{Table of Contents}%\n"
"      \\input elisp1-toc-ready.toc\n"
"   \\endgroup\n"
"   \\vfill \\eject\n"
"}\n"
"\n"
msgstr ""

# type: tex
#: lispref/vol1.texi:83
#, no-wrap
msgid ""
"% Special @summarycontents  command\n"
"% This inputs fixed up table of contents file rather than create new one.\n"
"\\global\\def\\summarycontents{%\n"
"   \\startcontents{Short Contents}%\n"
"      %\n"
"      \\let\\chapentry = \\shortchapentry\n"
"      \\let\\unnumbchapentry = \\shortunnumberedentry\n"
"      % We want a true roman here for the page numbers.\n"
"      \\secfonts\n"
"      \\let\\rm=\\shortcontrm \\let\\bf=\\shortcontbf \\let\\sl=\\shortcontsl\n"
"      \\rm\n"
"      \\advance\\baselineskip by 1pt % Open it up a little.\n"
"      \\def\\secentry ##1##2##3##4{}\n"
"      \\def\\unnumbsecentry ##1##2{}\n"
"      \\def\\subsecentry ##1##2##3##4##5{}\n"
"      \\def\\unnumbsubsecentry ##1##2{}\n"
"      \\def\\subsubsecentry ##1##2##3##4##5##6{}\n"
"      \\def\\unnumbsubsubsecentry ##1##2{}\n"
"      \\input elisp1-toc-ready.toc\n"
"   \\endgroup\n"
"   \\vfill \\eject\n"
"}\n"
"\n"
msgstr ""

# type: tex
#: lispref/vol1.texi:87
#, no-wrap
msgid ""
"\\message{}\n"
"\\message{Formatting special two volume edition...Volume 1...}\n"
"\\message{}\n"
msgstr ""

# type: ifinfo
#: lispref/vol1.texi:125 lispref/vol2.texi:126
msgid "This file documents GNU Emacs Lisp."
msgstr ""

# type: ifinfo
#: lispref/vol1.texi:135 lispref/vol2.texi:136
msgid ""
"This is edition 2.4 of the GNU Emacs Lisp Reference Manual.  It corresponds "
"to Emacs Version 19.29."
msgstr ""

# type: ifinfo
#: lispref/vol1.texi:139 lispref/vol2.texi:140
msgid ""
"Published by the Free Software Foundation 51 Franklin Street, Fifth Floor "
"Boston, MA 02110-1301 USA"
msgstr ""

# type: shorttitlepage
#: lispref/vol1.texi:144
#, no-wrap
msgid "The GNU Emacs Lisp Reference Manual: Volume 1"
msgstr ""

# type: titlefont{#1}
#: lispref/vol1.texi:152 lispref/vol2.texi:153
#, no-wrap
msgid "Reference Manual"
msgstr ""

# type: titlepage
#: lispref/vol1.texi:166 lispref/vol2.texi:167
msgid ""
"Copyright @copyright{} 1990, 1991, 1992, 1993, 1994, 1995 Free Software "
"Foundation, Inc."
msgstr ""

# type: titlepage
#: lispref/vol1.texi:171 lispref/vol2.texi:172
msgid "Edition 2.4 @* Revised for Emacs Version 19.29,@* June, 1995.@*"
msgstr ""

# type: titlepage
#: lispref/vol1.texi:173 lispref/vol2.texi:174
msgid "ISBN 1-882114-71-X"
msgstr ""

# type: titlepage
#: lispref/vol1.texi:178 lispref/vol2.texi:179
msgid ""
"Published by the Free Software Foundation @* 51 Franklin Street, Fifth Floor "
"@* Boston, MA 02110-1301 USA"
msgstr ""

# type: titlepage
#: lispref/vol1.texi:183 lispref/vol2.texi:184
msgid ""
"Permission is granted to make and distribute verbatim copies of this manual "
"provided the copyright notice and this permission notice are preserved on "
"all copies."
msgstr ""

# type: titlepage
#: lispref/vol1.texi:190 lispref/vol2.texi:191
msgid ""
"Permission is granted to copy and distribute modified versions of this "
"manual under the conditions for verbatim copying, provided also that the "
"section entitled ``GNU General Public License'' is included exactly as in "
"the original, and provided that the entire resulting derived work is "
"distributed under the terms of a permission notice identical to this one."
msgstr ""

# type: titlepage
#: lispref/vol1.texi:196 lispref/vol2.texi:197
msgid ""
"Permission is granted to copy and distribute translations of this manual "
"into another language, under the above conditions for modified versions, "
"except that the section entitled ``GNU General Public License'' may be "
"included in a translation approved by the Free Software Foundation instead "
"of in the original English."
msgstr ""

# type: menu
#: lispref/vol1.texi:202 lispref/vol1.texi:212 lispref/vol2.texi:203
#: lispref/vol2.texi:213
#, no-wrap
msgid "Copying"
msgstr ""

# type: ifinfo
#: lispref/vol1.texi:207 lispref/vol2.texi:208
msgid ""
"This Info file contains edition 2.4 of the GNU Emacs Lisp Reference Manual, "
"corresponding to GNU Emacs version 19.29."
msgstr ""

# type: menu
#: lispref/vol1.texi:250 lispref/vol2.texi:251
msgid "Making multiple X windows."
msgstr ""

# type: menu
#: lispref/vol1.texi:261 lispref/vol2.texi:262
msgid "Parameters controlling screen usage."
msgstr ""

# type: menu
#: lispref/vol1.texi:261 lispref/vol2.texi:262
msgid "The bell"
msgstr ""

# type: menu
#: lispref/vol1.texi:261 lispref/vol2.texi:262
msgid "Waiting for input."
msgstr ""

# type: menu
#: lispref/vol1.texi:271 lispref/vol2.texi:272
msgid "Advice for writing Lisp programs."
msgstr ""

# type: menu
#: lispref/vol1.texi:271 lispref/vol2.texi:272
msgid "List of variables local in all buffers."
msgstr ""

# type: menu
#: lispref/vol1.texi:276 lispref/vol2.texi:277
msgid "--- The Detailed Node Listing ---"
msgstr ""

# type: menu
#: lispref/vol1.texi:279 lispref/vol2.texi:280
msgid ""
"Here are other nodes that are inferiors of those already listed, mentioned "
"here so you can get to them in one step:"
msgstr ""

# type: menu
#: lispref/vol1.texi:296 lispref/vol2.texi:297
msgid "The format we use for examples that print output."
msgstr ""

# type: menu
#: lispref/vol1.texi:331 lispref/vol2.texi:332
msgid "variable, property list, or itself."
msgstr ""

# type: menu
#: lispref/vol1.texi:333 lispref/vol2.texi:334
msgid "List Type"
msgstr ""

# type: menu
#: lispref/vol1.texi:336 lispref/vol2.texi:337
msgid "An alternative syntax for lists."
msgstr ""

# type: menu
#: lispref/vol1.texi:347 lispref/vol2.texi:348
msgid "What makes buffers visible."
msgstr ""

# type: menu
#: lispref/vol1.texi:347 lispref/vol2.texi:348
msgid "Save what the screen looks like."
msgstr ""

# type: menu
#: lispref/vol1.texi:347 lispref/vol2.texi:348
msgid "Syntax Table Type"
msgstr ""

# type: menu
#: lispref/vol1.texi:347 lispref/vol2.texi:348
msgid "What a character means."
msgstr ""

# type: menu
#: lispref/vol1.texi:369 lispref/vol2.texi:370
msgid "Converting characters or strings and vice versa."
msgstr ""

# type: menu
#: lispref/vol1.texi:369 lispref/vol2.texi:370
msgid "@code{format}: Emacs's analog of @code{printf}."
msgstr ""

# type: menu
#: lispref/vol1.texi:369 lispref/vol2.texi:370
msgid "Character Case"
msgstr ""

# type: menu
#: lispref/vol1.texi:380 lispref/vol2.texi:381
msgid "Lists as Boxes"
msgstr ""

# type: menu
#: lispref/vol1.texi:380 lispref/vol2.texi:381
msgid "Graphical notation to explain lists."
msgstr ""

# type: menu
#: lispref/vol1.texi:411 lispref/vol2.texi:412
msgid "Avoiding evaluation (to put constants in"
msgstr ""

# type: menu
#: lispref/vol1.texi:411 lispref/vol2.texi:412
msgid "the program)."
msgstr ""

# type: menu
#: lispref/vol1.texi:431 lispref/vol2.texi:432
msgid "@code{if}, @code{cond}."
msgstr ""

# type: menu
#: lispref/vol1.texi:439 lispref/vol2.texi:440
msgid "Arranging to run a cleanup form if an"
msgstr ""

# type: menu
#: lispref/vol1.texi:439 lispref/vol2.texi:440
msgid "error happens."
msgstr ""

# type: menu
#: lispref/vol1.texi:468 lispref/vol2.texi:469
msgid "Scope means where in the program a value"
msgstr ""

# type: menu
#: lispref/vol1.texi:468 lispref/vol2.texi:469
msgid "is visible"
msgstr ""

# type: menu
#: lispref/vol1.texi:468 lispref/vol2.texi:469
msgid "How to use dynamic scoping carefully and"
msgstr ""

# type: menu
#: lispref/vol1.texi:468 lispref/vol2.texi:469
msgid "avoid problems."
msgstr ""

# type: menu
#: lispref/vol1.texi:475 lispref/vol2.texi:476
msgid "that don't have their own local values."
msgstr ""

# type: menu
#: lispref/vol1.texi:490 lispref/vol2.texi:491
msgid "Lisp functions vs primitives; terminology."
msgstr ""

# type: menu
#: lispref/vol1.texi:490 lispref/vol2.texi:491
msgid "Lambda-expressions are functions with no names."
msgstr ""

# type: menu
#: lispref/vol1.texi:490 lispref/vol2.texi:491
msgid "that have a special bearing on how"
msgstr ""

# type: menu
#: lispref/vol1.texi:490 lispref/vol2.texi:491
msgid "functions work."
msgstr ""

# type: menu
#: lispref/vol1.texi:527 lispref/vol2.texi:528
msgid "How to find errors that show up in"
msgstr ""

# type: menu
#: lispref/vol1.texi:527 lispref/vol2.texi:528
msgid "byte compilation."
msgstr ""

# type: menu
#: lispref/vol1.texi:552 lispref/vol2.texi:553
msgid "Various data types that can be used as"
msgstr ""

# type: menu
#: lispref/vol1.texi:552 lispref/vol2.texi:553
msgid "input streams."
msgstr ""

# type: menu
#: lispref/vol1.texi:552 lispref/vol2.texi:553
msgid "output streams."
msgstr ""

# type: menu
#: lispref/vol1.texi:615 lispref/vol2.texi:616
msgid "Keymap Terminology"
msgstr ""

# type: menu
#: lispref/vol1.texi:615 lispref/vol2.texi:616
msgid "Definitions of terms pertaining to keymaps."
msgstr ""

# type: menu
#: lispref/vol1.texi:615 lispref/vol2.texi:616
msgid "A keymap can define a menu for X"
msgstr ""

# type: menu
#: lispref/vol1.texi:615 lispref/vol2.texi:616
msgid "or for use from the terminal."
msgstr ""

# type: menu
#: lispref/vol1.texi:615 lispref/vol2.texi:616
msgid ""
"to override the standard (global) bindings.  Each minor mode can also "
"override them."
msgstr ""

# type: menu
#: lispref/vol1.texi:615 lispref/vol2.texi:616
msgid "How extracting elements from keymaps works."
msgstr ""

# type: menu
#: lispref/vol1.texi:623 lispref/vol2.texi:624
msgid "How to use hooks; how to write code that"
msgstr ""

# type: menu
#: lispref/vol1.texi:623 lispref/vol2.texi:624
msgid "provides hooks."
msgstr ""

# type: menu
#: lispref/vol1.texi:664 lispref/vol2.texi:665
msgid "Reading files into other buffers."
msgstr ""

# type: menu
#: lispref/vol1.texi:664 lispref/vol2.texi:665
msgid "Changing File Attributes"
msgstr ""

# type: menu
#: lispref/vol1.texi:675 lispref/vol2.texi:676
msgid "A link?"
msgstr ""

# type: menu
#: lispref/vol1.texi:686 lispref/vol2.texi:687
msgid "Some file names are relative to a"
msgstr ""

# type: menu
#: lispref/vol1.texi:686 lispref/vol2.texi:687
msgid "current directory."
msgstr ""

# type: menu
#: lispref/vol1.texi:695 lispref/vol2.texi:696
msgid "How backup files are made; how their names"
msgstr ""

# type: menu
#: lispref/vol1.texi:695 lispref/vol2.texi:696
msgid "are chosen."
msgstr ""

# type: menu
#: lispref/vol1.texi:695 lispref/vol2.texi:696
msgid "How auto-save files are made; how their"
msgstr ""

# type: menu
#: lispref/vol1.texi:695 lispref/vol2.texi:696
msgid "names are chosen."
msgstr ""

# type: menu
#: lispref/vol1.texi:695 lispref/vol2.texi:696
msgid "@code{revert-buffer}, and how to customize"
msgstr ""

# type: menu
#: lispref/vol1.texi:695 lispref/vol2.texi:696
msgid "what it does."
msgstr ""

# type: menu
#: lispref/vol1.texi:703 lispref/vol2.texi:704
msgid "Two alternatives: renaming the old file"
msgstr ""

# type: menu
#: lispref/vol1.texi:703 lispref/vol2.texi:704
msgid "or copying it."
msgstr ""

# type: menu
#: lispref/vol1.texi:720 lispref/vol2.texi:721
msgid "The buffer file name indicates which file"
msgstr ""

# type: menu
#: lispref/vol1.texi:720 lispref/vol2.texi:721
msgid "is visited."
msgstr ""

# type: menu
#: lispref/vol1.texi:720 lispref/vol2.texi:721
msgid "\"behind Emacs's back\"."
msgstr ""

# type: menu
#: lispref/vol1.texi:720 lispref/vol2.texi:721
msgid "Modifying text is not allowed in a"
msgstr ""

# type: menu
#: lispref/vol1.texi:720 lispref/vol2.texi:721
msgid "read-only buffer."
msgstr ""

# type: menu
#: lispref/vol1.texi:720 lispref/vol2.texi:721
msgid "so primitives will access its contents."
msgstr ""

# type: node
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
#: lispref/windows.texi:40
#, no-wrap
msgid "Basic Windows"
msgstr ""

# type: menu
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
msgid "Basic information on using windows."
msgstr ""

# type: section
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
#: lispref/windows.texi:149 lispref/windows.texi:150
#, no-wrap
msgid "Splitting Windows"
msgstr ""

# type: menu
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
msgid "Splitting one window into two windows."
msgstr ""

# type: section
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
#: lispref/windows.texi:356 lispref/windows.texi:357
#, no-wrap
msgid "Deleting Windows"
msgstr ""

# type: menu
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
msgid "Deleting a window gives its space to other windows."
msgstr ""

# type: section
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
#: lispref/windows.texi:431 lispref/windows.texi:432
#, no-wrap
msgid "Selecting Windows"
msgstr ""

# type: menu
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
msgid "The selected window is the one that you edit in."
msgstr ""

# type: node
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
#: lispref/windows.texi:550
#, no-wrap
msgid "Cyclic Window Ordering"
msgstr ""

# type: menu
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
msgid "Moving around the existing windows."
msgstr ""

# type: section
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
#: lispref/windows.texi:683 lispref/windows.texi:684
#, no-wrap
msgid "Buffers and Windows"
msgstr ""

# type: menu
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
msgid "Each window displays the contents of a buffer."
msgstr ""

# type: node
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
#: lispref/windows.texi:785
#, no-wrap
msgid "Displaying Buffers"
msgstr ""

# type: menu
#: lispref/vol1.texi:739 lispref/vol2.texi:740
msgid "Higher-lever functions for displaying a buffer"
msgstr ""

# type: menu
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
msgid "and choosing a window for it."
msgstr ""

# type: node
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
#: lispref/windows.texi:1165
#, no-wrap
msgid "Window Point"
msgstr ""

# type: menu
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
msgid "Each window has its own location of point."
msgstr ""

# type: node
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
#: lispref/windows.texi:1225
#, no-wrap
msgid "Window Start"
msgstr ""

# type: menu
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
msgid "The display-start position controls which text"
msgstr ""

# type: menu
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
msgid "is on-screen in the window."
msgstr ""

# type: node
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
#: lispref/windows.texi:1624
#, no-wrap
msgid "Vertical Scrolling"
msgstr ""

# type: menu
#: lispref/vol1.texi:739 lispref/vol2.texi:740
msgid "Moving text up and down in the window."
msgstr ""

# type: section
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
#: lispref/windows.texi:1692 lispref/windows.texi:1693
#, no-wrap
msgid "Horizontal Scrolling"
msgstr ""

# type: menu
#: lispref/vol1.texi:739 lispref/vol2.texi:740
msgid "Moving text sideways on the window."
msgstr ""

# type: node
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
#: lispref/windows.texi:1831
#, no-wrap
msgid "Size of Window"
msgstr ""

# type: menu
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
msgid "Accessing the size of a window."
msgstr ""

# type: node
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
#: lispref/windows.texi:1987
#, no-wrap
msgid "Resizing Windows"
msgstr ""

# type: menu
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
msgid "Changing the size of a window."
msgstr ""

# type: menu
#: lispref/vol1.texi:739 lispref/vol2.texi:740 lispref/windows.texi:38
msgid "Saving and restoring the state of the screen."
msgstr ""

# type: menu
#: lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "Creating frames on other X displays."
msgstr ""

# type: menu
#: lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "Raising a frame makes it hide other X windows;"
msgstr ""

# type: menu
#: lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "lowering it makes the others hide them."
msgstr ""

# type: menu
#: lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "Pointer Shapes"
msgstr ""

# type: menu
#: lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "X Selections"
msgstr ""

# type: menu
#: lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "Server Data"
msgstr ""

# type: menu
#: lispref/vol1.texi:765 lispref/vol2.texi:766
msgid "Getting info about the X server."
msgstr ""

# type: menu
#: lispref/vol1.texi:793 lispref/vol2.texi:794
msgid "Finding the marker's buffer or character"
msgstr ""

# type: menu
#: lispref/vol1.texi:793 lispref/vol2.texi:794
msgid "position."
msgstr ""

# type: menu
#: lispref/vol1.texi:793 lispref/vol2.texi:794
msgid "Changing Markers"
msgstr ""

# type: menu
#: lispref/vol1.texi:815 lispref/vol2.texi:816
msgid "Where removed text sometimes is saved for"
msgstr ""

# type: menu
#: lispref/vol1.texi:815 lispref/vol2.texi:816
msgid "later use."
msgstr ""

# type: menu
#: lispref/vol1.texi:815 lispref/vol2.texi:816
msgid "Accessing"
msgstr ""

# type: menu
#: lispref/vol1.texi:815 lispref/vol2.texi:816
msgid "the text or position stored in a register."
msgstr ""

# type: menu
#: lispref/vol1.texi:823 lispref/vol2.texi:824
msgid "Variables that hold kill-ring data."
msgstr ""

# type: menu
#: lispref/vol1.texi:843 lispref/vol2.texi:844
msgid "Finding out which part of the text matched"
msgstr ""

# type: menu
#: lispref/vol1.texi:843 lispref/vol2.texi:844
msgid "various parts of a regexp, after regexp search."
msgstr ""

# type: menu
#: lispref/vol1.texi:843 lispref/vol2.texi:844
msgid "Saving and restoring this information."
msgstr ""

# type: menu
#: lispref/vol1.texi:864 lispref/vol2.texi:865
msgid "Abbrevs And Abbrev Expansion"
msgstr ""

# type: menu
#: lispref/vol1.texi:901 lispref/vol2.texi:902
msgid "Customizing Emacs start-up processing."
msgstr ""

# type: menu
#: lispref/vol1.texi:901 lispref/vol2.texi:902
msgid "Recording terminal input for debugging."
msgstr ""

# type: menu
#: lispref/vol1.texi:901 lispref/vol2.texi:902
msgid "Recording terminal output for debugging."
msgstr ""

# type: menu
#: lispref/vol1.texi:901 lispref/vol2.texi:902
msgid "Flow Control"
msgstr ""

# type: menu
#: lispref/vol1.texi:901 lispref/vol2.texi:902
msgid "How to turn output flow control on or off."
msgstr ""

# type: menu
#: lispref/vol1.texi:909 lispref/vol2.texi:910
msgid "Start-up Summary"
msgstr ""

# type: menu
#: lispref/vol1.texi:909 lispref/vol2.texi:910
msgid "Sequence of actions Emacs performs at start-up."
msgstr ""

# type: menu
#: lispref/vol1.texi:909 lispref/vol2.texi:910
msgid "Command Line Arguments"
msgstr ""

# type: menu
#: lispref/vol1.texi:909 lispref/vol2.texi:910
msgid "How command line arguments are processed,"
msgstr ""

# type: menu
#: lispref/vol1.texi:911 lispref/vol2.texi:912
msgid "Getting out of Emacs"
msgstr ""

# type: menu
#: lispref/vol1.texi:928 lispref/vol2.texi:929
msgid "Where messages are displayed."
msgstr ""

# type: menu
#: lispref/vol1.texi:928 lispref/vol2.texi:929
msgid "Forcing display update and waiting for user."
msgstr ""

# type: menu
#: lispref/vol1.texi:928 lispref/vol2.texi:929
msgid "How control characters are displayed."
msgstr ""

# type: menu
#: lispref/vol1.texi:936 lispref/vol2.texi:937
msgid "How to preload Lisp libraries into Emacs."
msgstr ""

# type: include
#: lispref/vol1.texi:1006
#, no-wrap
msgid "index-vol1.texi"
msgstr ""

# type: ignore
#: lispref/vol1.texi:1021
#, no-wrap
msgid "   arch-tag: 9594760d-8801-4d1b-aeb9-f3b3166b5be2\n"
msgstr ""

# type: settitle
#: lispref/vol2.texi:13
#, no-wrap
msgid "GNU Emacs Lisp Reference Manual: Volume 2"
msgstr ""

# type: tex
#: lispref/vol2.texi:39
#, no-wrap
msgid "\\global\\chapno=20\n"
msgstr ""

# type: tex
#: lispref/vol2.texi:61
#, no-wrap
msgid ""
"% This inputs fixed up table of contents file rather than create new one.\n"
"\\global\\def\\contents{%\n"
"   \\startcontents{Table of Contents}%\n"
"      \\input elisp2-toc-ready.toc\n"
"   \\endgroup\n"
"   \\vfill \\eject\n"
"}\n"
"\n"
msgstr ""

# type: tex
#: lispref/vol2.texi:84
#, no-wrap
msgid ""
"% Special @summarycontents  command\n"
"% This inputs fixed up table of contents file rather than create new one.\n"
"\\global\\def\\summarycontents{%\n"
"   \\startcontents{Short Contents}%\n"
"      %\n"
"      \\let\\chapentry = \\shortchapentry\n"
"      \\let\\unnumbchapentry = \\shortunnumberedentry\n"
"      % We want a true roman here for the page numbers.\n"
"      \\secfonts\n"
"      \\let\\rm=\\shortcontrm \\let\\bf=\\shortcontbf \\let\\sl=\\shortcontsl\n"
"      \\rm\n"
"      \\advance\\baselineskip by 1pt % Open it up a little.\n"
"      \\def\\secentry ##1##2##3##4{}\n"
"      \\def\\unnumbsecentry ##1##2{}\n"
"      \\def\\subsecentry ##1##2##3##4##5{}\n"
"      \\def\\unnumbsubsecentry ##1##2{}\n"
"      \\def\\subsubsecentry ##1##2##3##4##5##6{}\n"
"      \\def\\unnumbsubsubsecentry ##1##2{}\n"
"      \\input elisp2-toc-ready.toc\n"
"   \\endgroup\n"
"   \\vfill \\eject\n"
"}\n"
"\n"
msgstr ""

# type: tex
#: lispref/vol2.texi:88
#, no-wrap
msgid ""
"\\message{}\n"
"\\message{Formatting special two volume edition...Volume 2...}\n"
"\\message{}\n"
msgstr ""

# type: shorttitlepage
#: lispref/vol2.texi:145
#, no-wrap
msgid "The GNU Emacs Lisp Reference Manual: Volume 2"
msgstr ""

# type: include
#: lispref/vol2.texi:1006
#, no-wrap
msgid "index-vol2.texi"
msgstr ""

# type: ignore
#: lispref/vol2.texi:1021
#, no-wrap
msgid "   arch-tag: dfdbecf8-fec2-49c1-8427-3e8ac8b0b849\n"
msgstr ""

# type: Plain text
#: lispref/windows.texi:13
msgid ""
"This chapter describes most of the functions and variables related to Emacs "
"windows.  See @ref{Display}, for information on how text is displayed in "
"windows."
msgstr ""

# type: menu
#: lispref/windows.texi:38
msgid "Higher-level functions for displaying a buffer"
msgstr ""

# type: node
#: lispref/windows.texi:38 lispref/windows.texi:909
#, no-wrap
msgid "Choosing Window"
msgstr ""

# type: menu
#: lispref/windows.texi:38
msgid "How to choose a window for displaying a buffer."
msgstr ""

# type: section
#: lispref/windows.texi:38 lispref/windows.texi:1417 lispref/windows.texi:1418
#, no-wrap
msgid "Textual Scrolling"
msgstr ""

# type: menu
#: lispref/windows.texi:38
msgid "Moving text up and down through the window."
msgstr ""

# type: menu
#: lispref/windows.texi:38
msgid "Moving the contents up and down on the window."
msgstr ""

# type: menu
#: lispref/windows.texi:38
msgid "Moving the contents sideways on the window."
msgstr ""

# type: section
#: lispref/windows.texi:38 lispref/windows.texi:2150 lispref/windows.texi:2151
#, no-wrap
msgid "Coordinates and Windows"
msgstr ""

# type: menu
#: lispref/windows.texi:38
msgid "Converting coordinates to windows."
msgstr ""

# type: node
#: lispref/windows.texi:38 lispref/windows.texi:2211
#, no-wrap
msgid "Window Tree"
msgstr ""

# type: menu
#: lispref/windows.texi:38
msgid "The layout and sizes of all windows in a frame."
msgstr ""

# type: node
#: lispref/windows.texi:38 lispref/windows.texi:2359
#, no-wrap
msgid "Window Hooks"
msgstr ""

# type: menu
#: lispref/windows.texi:38
msgid "Hooks for scrolling, window size changes,"
msgstr ""

# type: menu
#: lispref/windows.texi:38
msgid "redisplay going past a certain point,"
msgstr ""

# type: menu
#: lispref/windows.texi:38
msgid "or window configuration changes."
msgstr ""

# type: section
#: lispref/windows.texi:41
#, no-wrap
msgid "Basic Concepts of Emacs Windows"
msgstr ""

# type: cindex
#: lispref/windows.texi:43
#, no-wrap
msgid "selected window"
msgstr ""

# type: Plain text
#: lispref/windows.texi:49
msgid ""
"A @dfn{window} in Emacs is the physical area of the screen in which a buffer "
"is displayed.  The term is also used to refer to a Lisp object that "
"represents that screen area in Emacs Lisp.  It should be clear from the "
"context which is meant."
msgstr ""

# type: Plain text
#: lispref/windows.texi:54
msgid ""
"Emacs groups windows into frames.  A frame represents an area of screen "
"available for Emacs to use.  Each frame always contains at least one window, "
"but you can subdivide it vertically or horizontally into multiple "
"nonoverlapping Emacs windows."
msgstr ""

# type: Plain text
#: lispref/windows.texi:62
msgid ""
"In each frame, at any time, one and only one window is designated as @dfn"
"{selected within the frame}.  The frame's cursor appears in that window, but "
"the other windows have ``non-selected'' cursors, normally less visible.  At "
"any time, one frame is the selected frame; and the window selected within "
"that frame is @dfn{the selected window}.  The selected window's buffer is "
"usually the current buffer (except when @code{set-buffer} has been used).  "
"@xref{Current Buffer}."
msgstr ""

# type: defvar
#: lispref/windows.texi:66
msgid ""
"If this variable is @code{nil}, Emacs displays only one cursor, in the "
"selected window.  Other windows have no cursor at all."
msgstr ""

# type: Plain text
#: lispref/windows.texi:74
msgid ""
"For practical purposes, a window exists only while it is displayed in a "
"frame.  Once removed from the frame, the window is effectively deleted and "
"should not be used, @emph{even though there may still be references to it} "
"from other Lisp objects.  Restoring a saved window configuration is the only "
"way for a window no longer on the screen to come back to life.  (@xref"
"{Deleting Windows}.)"
msgstr ""

# type: Plain text
#: lispref/windows.texi:76
msgid "Each window has the following attributes:"
msgstr ""

# type: itemize
#: lispref/windows.texi:80
msgid "containing frame"
msgstr ""

# type: itemize
#: lispref/windows.texi:83
msgid "window height"
msgstr ""

# type: itemize
#: lispref/windows.texi:86
msgid "window width"
msgstr ""

# type: itemize
#: lispref/windows.texi:89
msgid "window edges with respect to the screen or frame"
msgstr ""

# type: itemize
#: lispref/windows.texi:92
msgid "the buffer it displays"
msgstr ""

# type: itemize
#: lispref/windows.texi:95
msgid "position within the buffer at the upper left of the window"
msgstr ""

# type: itemize
#: lispref/windows.texi:98
msgid "amount of horizontal scrolling, in columns"
msgstr ""

# type: itemize
#: lispref/windows.texi:104
msgid "the mark"
msgstr ""

# type: itemize
#: lispref/windows.texi:107
msgid "how recently the window was selected"
msgstr ""

# type: itemize
#: lispref/windows.texi:110
msgid "fringe settings"
msgstr ""

# type: itemize
#: lispref/windows.texi:116
msgid "scroll-bar settings"
msgstr ""

# type: cindex
#: lispref/windows.texi:118
#, no-wrap
msgid "multiple windows"
msgstr ""

# type: Plain text
#: lispref/windows.texi:124
msgid ""
"Users create multiple windows so they can look at several buffers at once.  "
"Lisp libraries use multiple windows for a variety of reasons, but most often "
"to display related information.  In Rmail, for example, you can move through "
"a summary buffer in one window while the other window shows messages one at "
"a time as they are reached."
msgstr ""

# type: Plain text
#: lispref/windows.texi:131
msgid ""
"The meaning of ``window'' in Emacs is similar to what it means in the "
"context of general-purpose window systems such as X, but not identical.  The "
"X Window System places X windows on the screen; Emacs uses one or more X "
"windows as frames, and subdivides them into Emacs windows.  When you use "
"Emacs on a character-only terminal, Emacs treats the whole terminal screen "
"as one frame."
msgstr ""

# type: cindex
#: lispref/windows.texi:132
#, no-wrap
msgid "terminal screen"
msgstr ""

# type: cindex
#: lispref/windows.texi:133
#, no-wrap
msgid "screen of terminal"
msgstr ""

# type: cindex
#: lispref/windows.texi:134
#, no-wrap
msgid "tiled windows"
msgstr ""

# type: Plain text
#: lispref/windows.texi:141
msgid ""
"Most window systems support arbitrarily located overlapping windows.  In "
"contrast, Emacs windows are @dfn{tiled}; they never overlap, and together "
"they fill the whole screen or frame.  Because of the way in which Emacs "
"creates new windows and resizes them, not all conceivable tilings of windows "
"on an Emacs frame are actually possible.  @xref{Splitting Windows}, and @ref"
"{Size of Window}."
msgstr ""

# type: Plain text
#: lispref/windows.texi:144
msgid ""
"@xref{Display}, for information on how the contents of the window's buffer "
"are displayed in the window."
msgstr ""

# type: defun
#: lispref/windows.texi:145
#, no-wrap
msgid "windowp object"
msgstr ""

# type: defun
#: lispref/windows.texi:147
msgid "This function returns @code{t} if @var{object} is a window."
msgstr ""

# type: cindex
#: lispref/windows.texi:151
#, no-wrap
msgid "splitting windows"
msgstr ""

# type: cindex
#: lispref/windows.texi:152
#, no-wrap
msgid "window splitting"
msgstr ""

# type: Plain text
#: lispref/windows.texi:158
msgid ""
"The functions described here are the primitives used to split a window into "
"two windows.  Two higher level functions sometimes split a window, but not "
"always: @code{pop-to-buffer} and @code{display-buffer} (@pxref{Displaying "
"Buffers})."
msgstr ""

# type: Plain text
#: lispref/windows.texi:162
msgid ""
"The functions described here do not accept a buffer as an argument.  The two "
"``halves'' of the split window initially display the same buffer previously "
"visible in the window that was split."
msgstr ""

# type: deffn
#: lispref/windows.texi:163
#, no-wrap
msgid "Command split-window &optional window size horizontal"
msgstr ""

# type: deffn
#: lispref/windows.texi:166
msgid ""
"This function splits a new window out of @var{window}'s screen area.  It "
"returns the new window."
msgstr ""

# type: deffn
#: lispref/windows.texi:175
msgid ""
"If @var{horizontal} is non-@code{nil}, then @var{window} splits into two "
"side by side windows.  The original window @var{window} keeps the leftmost "
"@var{size} columns, and gives the rest of the columns to the new window.  "
"Otherwise, it splits into windows one above the other, and @var{window} "
"keeps the upper @var{size} lines and gives the rest of the lines to the new "
"window.  The original window is therefore the left-hand or upper of the two, "
"and the new window is the right-hand or lower."
msgstr ""

# type: deffn
#: lispref/windows.texi:178
msgid ""
"If @var{window} is omitted or @code{nil}, that stands for the selected "
"window.  When you split the selected window, it remains selected."
msgstr ""

# type: deffn
#: lispref/windows.texi:183
msgid ""
"If @var{size} is omitted or @code{nil}, then @var{window} is divided evenly "
"into two parts.  (If there is an odd line, it is allocated to the new "
"window.)  When @code{split-window} is called interactively, all its "
"arguments are @code{nil}."
msgstr ""

# type: deffn
#: lispref/windows.texi:187
msgid ""
"If splitting would result in making a window that is smaller than @code"
"{window-min-height} or @code{window-min-width}, the function signals an "
"error and does not split the window at all."
msgstr ""

# type: deffn
#: lispref/windows.texi:190
msgid ""
"The following example starts with one window on a screen that is 50 lines "
"high by 80 columns wide; then it splits the window."
msgstr ""

# type: group
#: lispref/windows.texi:197
#, no-wrap
msgid ""
"(setq w (selected-window))\n"
"     @result{} #<window 8 on windows.texi>\n"
"(window-edges)          ; @r{Edges in order:}\n"
"     @result{} (0 0 80 50)     ;   @r{left--top--right--bottom}\n"
msgstr ""

# type: group
#: lispref/windows.texi:203
#, no-wrap
msgid ""
";; @r{Returns window created}\n"
"(setq w2 (split-window w 15))\n"
"     @result{} #<window 28 on windows.texi>\n"
msgstr ""

# type: group
#: lispref/windows.texi:208
#, no-wrap
msgid ""
"(window-edges w2)\n"
"     @result{} (0 15 80 50)    ; @r{Bottom window;}\n"
"                        ;   @r{top is line 15}\n"
msgstr ""

# type: group
#: lispref/windows.texi:212
#, no-wrap
msgid ""
"(window-edges w)\n"
"     @result{} (0 0 80 15)     ; @r{Top window}\n"
msgstr ""

# type: deffn
#: lispref/windows.texi:216
msgid "The screen looks like this:"
msgstr ""

# type: group
#: lispref/windows.texi:228
#, no-wrap
msgid ""
"         __________\n"
"        |          |  line 0\n"
"        |    w     |\n"
"        |__________|\n"
"        |          |  line 15\n"
"        |    w2    |\n"
"        |__________|\n"
"                      line 50\n"
" column 0   column 80\n"
msgstr ""

# type: deffn
#: lispref/windows.texi:232
msgid "Next, split the top window horizontally:"
msgstr ""

# type: group
#: lispref/windows.texi:237
#, no-wrap
msgid ""
"(setq w3 (split-window w 35 t))\n"
"     @result{} #<window 32 on windows.texi>\n"
msgstr ""

# type: group
#: lispref/windows.texi:241
#, no-wrap
msgid ""
"(window-edges w3)\n"
"     @result{} (35 0 80 15)  ; @r{Left edge at column 35}\n"
msgstr ""

# type: group
#: lispref/windows.texi:245
#, no-wrap
msgid ""
"(window-edges w)\n"
"     @result{} (0 0 35 15)   ; @r{Right edge at column 35}\n"
msgstr ""

# type: group
#: lispref/windows.texi:249
#, no-wrap
msgid ""
"(window-edges w2)\n"
"     @result{} (0 15 80 50)  ; @r{Bottom window unchanged}\n"
msgstr ""

# type: deffn
#: lispref/windows.texi:254
msgid "Now the screen looks like this:"
msgstr ""

# type: group
#: lispref/windows.texi:267
#, no-wrap
msgid ""
"     column 35\n"
"         __________\n"
"        |   |      |  line 0\n"
"        | w |  w3  |\n"
"        |___|______|\n"
"        |          |  line 15\n"
"        |    w2    |\n"
"        |__________|\n"
"                      line 50\n"
" column 0   column 80\n"
msgstr ""

# type: deffn
#: lispref/windows.texi:274
msgid ""
"Normally, Emacs indicates the border between two side-by-side windows with a "
"scroll bar (@pxref{Layout Parameters,Scroll Bars}) or @samp{|} characters.  "
"The display table can specify alternative border characters; see @ref"
"{Display Tables}."
msgstr ""

# type: deffn
#: lispref/windows.texi:276
#, no-wrap
msgid "Command split-window-vertically &optional size"
msgstr ""

# type: deffn
#: lispref/windows.texi:284
msgid ""
"This function splits the selected window into two windows, one above the "
"other, leaving the upper of the two windows selected, with @var{size} "
"lines.  (If @var{size} is negative, then the lower of the two windows gets "
"@minus{} @var{size} lines and the upper window gets the rest, but the upper "
"window is still the one selected.)  However, if @code{split-window-keep-"
"point} (see below) is @code{nil}, then either window can be selected."
msgstr ""

# type: deffn
#: lispref/windows.texi:288
msgid ""
"In other respects, this function is similar to @code{split-window}.  In "
"particular, the upper window is the original one and the return value is the "
"new, lower window."
msgstr ""

# type: defopt
#: lispref/windows.texi:290
#, no-wrap
msgid "split-window-keep-point"
msgstr "split-window-keep-point"

# type: defopt
#: lispref/windows.texi:293
msgid ""
"If this variable is non-@code{nil} (the default), then @code{split-window-"
"vertically} behaves as described above."
msgstr ""

# type: defopt
#: lispref/windows.texi:298
msgid ""
"If it is @code{nil}, then @code{split-window-vertically} adjusts point in "
"each of the two windows to avoid scrolling.  (This is useful on slow "
"terminals.)  It selects whichever window contains the screen line that point "
"was previously on."
msgstr ""

# type: defopt
#: lispref/windows.texi:301
msgid ""
"This variable only affects the behavior of @code{split-window-vertically}.  "
"It has no effect on the other functions described here."
msgstr ""

# type: deffn
#: lispref/windows.texi:303
#, no-wrap
msgid "Command split-window-horizontally &optional size"
msgstr ""

# type: deffn
#: lispref/windows.texi:309
msgid ""
"This function splits the selected window into two windows side-by-side, "
"leaving the selected window on the left with @var{size} columns.  If @var"
"{size} is negative, the rightmost window gets @minus{} @var{size} columns, "
"but the leftmost window still remains selected."
msgstr ""

# type: deffn
#: lispref/windows.texi:312
msgid ""
"This function is basically an interface to @code{split-window}.  You could "
"define a simplified version of the function like this:"
msgstr ""

# type: group
#: lispref/windows.texi:318
#, no-wrap
msgid ""
"(defun split-window-horizontally (&optional arg)\n"
"  \"Split selected window into two windows, side by side...\"\n"
"  (interactive \"P\")\n"
msgstr ""

# type: group
#: lispref/windows.texi:324
#, no-wrap
msgid ""
"  (let ((size (and arg (prefix-numeric-value arg))))\n"
"    (and size (< size 0)\n"
"\t (setq size (+ (window-width) size)))\n"
"    (split-window nil size t)))\n"
msgstr ""

# type: defun
#: lispref/windows.texi:328
#, no-wrap
msgid "one-window-p &optional no-mini all-frames"
msgstr ""

# type: defun
#: lispref/windows.texi:333
msgid ""
"This function returns non-@code{nil} if there is only one window.  The "
"argument @var{no-mini}, if non-@code{nil}, means don't count the minibuffer "
"even if it is active; otherwise, the minibuffer window is counted when it is "
"active."
msgstr ""

# type: defun
#: lispref/windows.texi:336 lispref/windows.texi:596
msgid ""
"The argument @var{all-frames} specifies which frames to consider.  Here are "
"the possible values and their meanings:"
msgstr ""

# type: table
#: lispref/windows.texi:341
msgid ""
"Count the windows in the selected frame, plus the minibuffer used by that "
"frame even if it lies in some other frame."
msgstr ""

# type: table
#: lispref/windows.texi:344
msgid "Count all windows in all existing frames."
msgstr ""

# type: table
#: lispref/windows.texi:347
msgid "Count all windows in all visible frames."
msgstr ""

# type: table
#: lispref/windows.texi:350
msgid "Count all windows in all visible or iconified frames."
msgstr ""

# type: table
#: lispref/windows.texi:353
msgid "Count precisely the windows in the selected frame, and no others."
msgstr ""

# type: cindex
#: lispref/windows.texi:358
#, no-wrap
msgid "deleting windows"
msgstr ""

# type: Plain text
#: lispref/windows.texi:367
msgid ""
"A window remains visible on its frame unless you @dfn{delete} it by calling "
"certain functions that delete windows.  A deleted window cannot appear on "
"the screen, but continues to exist as a Lisp object until there are no "
"references to it.  There is no way to cancel the deletion of a window aside "
"from restoring a saved window configuration (@pxref{Window "
"Configurations}).  Restoring a window configuration also deletes any windows "
"that aren't part of that configuration."
msgstr ""

# type: Plain text
#: lispref/windows.texi:370
msgid ""
"When you delete a window, the space it took up is given to one adjacent "
"sibling."
msgstr ""

# type: defun
#: lispref/windows.texi:372
#, no-wrap
msgid "window-live-p window"
msgstr ""

# type: defun
#: lispref/windows.texi:375
msgid ""
"This function returns @code{nil} if @var{window} is deleted, and @code{t} "
"otherwise."
msgstr ""

# type: defun
#: lispref/windows.texi:378
msgid ""
"@strong{Warning:} Erroneous information or fatal errors may result from "
"using a deleted window as if it were live."
msgstr ""

# type: deffn
#: lispref/windows.texi:380
#, no-wrap
msgid "Command delete-window &optional window"
msgstr ""

# type: deffn
#: lispref/windows.texi:385
msgid ""
"This function removes @var{window} from display, and returns @code{nil}.  If "
"@var{window} is omitted, then the selected window is deleted.  An error is "
"signaled if there is only one window when @code{delete-window} is called."
msgstr ""

# type: deffn
#: lispref/windows.texi:387
#, no-wrap
msgid "Command delete-other-windows &optional window"
msgstr ""

# type: deffn
#: lispref/windows.texi:391
msgid ""
"This function makes @var{window} the only window on its frame, by deleting "
"the other windows in that frame.  If @var{window} is omitted or @code{nil}, "
"then the selected window is used by default."
msgstr ""

# type: deffn
#: lispref/windows.texi:393
msgid "The return value is @code{nil}."
msgstr ""

# type: deffn
#: lispref/windows.texi:395
#, no-wrap
msgid "Command delete-windows-on buffer-or-name &optional frame"
msgstr ""

# type: deffn
#: lispref/windows.texi:400
msgid ""
"This function deletes all windows showing @var{buffer-or-name}.  If there "
"are no windows showing @var{buffer-or-name}, it does nothing.  @var{buffer-"
"or-name} must be a buffer or the name of an existing buffer."
msgstr ""

# type: deffn
#: lispref/windows.texi:408
msgid ""
"@code{delete-windows-on} operates frame by frame.  If a frame has several "
"windows showing different buffers, then those showing @var{buffer-or-name} "
"are removed, and the others expand to fill the space.  If all windows in "
"some frame are showing @var{buffer-or-name} (including the case where there "
"is only one window), then the frame winds up with a single window showing "
"another buffer chosen with @code{other-buffer}.  @xref{The Buffer List}."
msgstr ""

# type: deffn
#: lispref/windows.texi:414
msgid ""
"The argument @var{frame} controls which frames to operate on.  This function "
"does not use it in quite the same way as the other functions which scan all "
"windows; specifically, the values @code{t} and @code{nil} have the opposite "
"of their meanings in other functions.  Here are the full details:"
msgstr ""

# type: itemize
#: lispref/windows.texi:418
msgid "If it is @code{nil}, operate on all frames."
msgstr ""

# type: itemize
#: lispref/windows.texi:420
msgid "If it is @code{t}, operate on the selected frame."
msgstr ""

# type: itemize
#: lispref/windows.texi:422
msgid "If it is @code{visible}, operate on all visible frames."
msgstr ""

# type: itemize
#: lispref/windows.texi:424
msgid "If it is 0, operate on all visible or iconified frames."
msgstr ""

# type: itemize
#: lispref/windows.texi:426
msgid "If it is a frame, operate on that frame."
msgstr ""

# type: deffn
#: lispref/windows.texi:429
msgid "This function always returns @code{nil}."
msgstr ""

# type: cindex
#: lispref/windows.texi:433
#, no-wrap
msgid "selecting a window"
msgstr ""

# type: Plain text
#: lispref/windows.texi:437
msgid ""
"When a window is selected, the buffer in the window becomes the current "
"buffer, and the cursor will appear in it."
msgstr ""

# type: defun
#: lispref/windows.texi:438
#, no-wrap
msgid "selected-window"
msgstr ""

# type: defun
#: lispref/windows.texi:441
msgid ""
"This function returns the selected window.  This is the window in which the "
"cursor appears and to which many commands apply."
msgstr ""

# type: defun
#: lispref/windows.texi:443
#, no-wrap
msgid "select-window window &optional norecord"
msgstr ""

# type: defun
#: lispref/windows.texi:448
msgid ""
"This function makes @var{window} the selected window.  The cursor then "
"appears in @var{window} (on redisplay).  Unless @var{window} was already "
"selected, @code{select-window} makes @var{window}'s buffer the current "
"buffer."
msgstr ""

# type: defun
#: lispref/windows.texi:452
msgid ""
"Normally @var{window}'s selected buffer is moved to the front of the buffer "
"list, but if @var{norecord} is non-@code{nil}, the buffer list order is "
"unchanged."
msgstr ""

# type: defun
#: lispref/windows.texi:454
msgid "The return value is @var{window}."
msgstr ""

# type: group
#: lispref/windows.texi:460
#, no-wrap
msgid ""
"(setq w (next-window))\n"
"(select-window w)\n"
"     @result{} #<window 65 on windows.texi>\n"
msgstr ""

# type: defmac
#: lispref/windows.texi:464
#, no-wrap
msgid "save-selected-window forms@dots{}"
msgstr ""

# type: defmac
#: lispref/windows.texi:469
msgid ""
"This macro records the selected frame, as well as the selected window of "
"each frame, executes @var{forms} in sequence, then restores the earlier "
"selected frame and windows.  It also saves and restores the current buffer.  "
"It returns the value of the last form in @var{forms}."
msgstr ""

# type: defmac
#: lispref/windows.texi:477
msgid ""
"This macro does not save or restore anything about the sizes, arrangement or "
"contents of windows; therefore, if the @var{forms} change them, the change "
"persists.  If the previously selected window of some frame is no longer live "
"at the time of exit from @var{forms}, that frame's selected window is left "
"alone.  If the previously selected window is no longer live, then whatever "
"window is selected at the end of @var{forms} remains selected."
msgstr ""

# type: defmac
#: lispref/windows.texi:479
#, no-wrap
msgid "with-selected-window window forms@dots{}"
msgstr ""

# type: defmac
#: lispref/windows.texi:485
msgid ""
"This macro selects @var{window} (without changing the buffer list), executes "
"@var{forms} in sequence, then restores the previously selected window and "
"current buffer.  It is just like @code{save-selected-window}, except that it "
"explicitly selects @var{window}, also without altering the buffer list "
"sequence."
msgstr ""

# type: cindex
#: lispref/windows.texi:487
#, no-wrap
msgid "finding windows"
msgstr ""

# type: Plain text
#: lispref/windows.texi:490
msgid ""
"The following functions choose one of the windows on the screen, offering "
"various criteria for the choice."
msgstr ""

# type: defun
#: lispref/windows.texi:491
#, no-wrap
msgid "get-lru-window &optional frame dedicated"
msgstr ""

# type: defun
#: lispref/windows.texi:495
msgid ""
"This function returns the window least recently ``used'' (that is, "
"selected).  If any full-width windows are present, it only considers these.  "
"The selected window is always the most recently used window."
msgstr ""

# type: defun
#: lispref/windows.texi:502
msgid ""
"The selected window can be the least recently used window if it is the only "
"window.  A newly created window becomes the least recently used window until "
"it is selected.  A minibuffer window is never a candidate.  Dedicated "
"windows are never candidates unless the @var{dedicated} argument is non-@code"
"{nil}, so if all existing windows are dedicated, the value is @code{nil}."
msgstr ""

# type: defun
#: lispref/windows.texi:504
msgid "The argument @var{frame} controls which windows are considered."
msgstr ""

# type: itemize
#: lispref/windows.texi:508 lispref/windows.texi:754
msgid "If it is @code{nil}, consider windows on the selected frame."
msgstr ""

# type: itemize
#: lispref/windows.texi:510 lispref/windows.texi:756 lispref/windows.texi:946
msgid "If it is @code{t}, consider windows on all frames."
msgstr ""

# type: itemize
#: lispref/windows.texi:512 lispref/windows.texi:758 lispref/windows.texi:948
msgid "If it is @code{visible}, consider windows on all visible frames."
msgstr ""

# type: itemize
#: lispref/windows.texi:514 lispref/windows.texi:760 lispref/windows.texi:950
msgid "If it is 0, consider windows on all visible or iconified frames."
msgstr ""

# type: itemize
#: lispref/windows.texi:516 lispref/windows.texi:762 lispref/windows.texi:952
msgid "If it is a frame, consider windows on that frame."
msgstr ""

# type: defun
#: lispref/windows.texi:519
#, no-wrap
msgid "get-largest-window &optional frame dedicated"
msgstr ""

# type: defun
#: lispref/windows.texi:526
msgid ""
"This function returns the window with the largest area (height times "
"width).  If there are no side-by-side windows, then this is the window with "
"the most lines.  A minibuffer window is never a candidate.  Dedicated "
"windows are never candidates unless the @var{dedicated} argument is non-@code"
"{nil}, so if all existing windows are dedicated, the value is @code{nil}."
msgstr ""

# type: defun
#: lispref/windows.texi:530
msgid ""
"If there are two candidate windows of the same size, this function prefers "
"the one that comes first in the cyclic ordering of windows (see following "
"section), starting from the selected window."
msgstr ""

# type: defun
#: lispref/windows.texi:533
msgid ""
"The argument @var{frame} controls which set of windows to consider.  See "
"@code{get-lru-window}, above."
msgstr ""

# type: cindex
#: lispref/windows.texi:535
#, no-wrap
msgid "window that satisfies a predicate"
msgstr ""

# type: cindex
#: lispref/windows.texi:536
#, no-wrap
msgid "conditional selection of windows"
msgstr ""

# type: defun
#: lispref/windows.texi:537
#, no-wrap
msgid "get-window-with-predicate predicate &optional minibuf all-frames default"
msgstr ""

# type: defun
#: lispref/windows.texi:544
msgid ""
"This function returns a window satisfying @var{predicate}.  It cycles "
"through all visible windows using @code{walk-windows} (@pxref{Cyclic Window "
"Ordering}), calling @var{predicate} on each one of them with that window as "
"its argument.  The function returns the first window for which @var"
"{predicate} returns a non-@code{nil} value; if that never happens, it "
"returns @var{default}."
msgstr ""

# type: defun
#: lispref/windows.texi:548
msgid ""
"The optional arguments @var{minibuf} and @var{all-frames} specify the set of "
"windows to include in the scan.  See the description of @code{next-window} "
"in @ref{Cyclic Window Ordering}, for details."
msgstr ""

# type: section
#: lispref/windows.texi:552
#, no-wrap
msgid "Cyclic Ordering of Windows"
msgstr ""

# type: cindex
#: lispref/windows.texi:553
#, no-wrap
msgid "cyclic ordering of windows"
msgstr ""

# type: cindex
#: lispref/windows.texi:554
#, no-wrap
msgid "ordering of windows, cyclic"
msgstr ""

# type: cindex
#: lispref/windows.texi:555
#, no-wrap
msgid "window ordering, cyclic"
msgstr ""

# type: Plain text
#: lispref/windows.texi:561
msgid ""
"When you use the command @kbd{C-x o} (@code{other-window}) to select the "
"next window, it moves through all the windows on the screen in a specific "
"cyclic order.  For any given configuration of windows, this order never "
"varies.  It is called the @dfn{cyclic ordering of windows}."
msgstr ""

# type: Plain text
#: lispref/windows.texi:565
msgid ""
"This ordering generally goes from top to bottom, and from left to right.  "
"But it may go down first or go right first, depending on the order in which "
"the windows were split."
msgstr ""

# type: Plain text
#: lispref/windows.texi:573
msgid ""
"If the first split was vertical (into windows one above each other), and "
"then the subwindows were split horizontally, then the ordering is left to "
"right in the top of the frame, and then left to right in the next lower part "
"of the frame, and so on.  If the first split was horizontal, the ordering is "
"top to bottom in the left part, and so on.  In general, within each set of "
"siblings at any level in the window tree, the order is left to right, or top "
"to bottom."
msgstr ""

# type: defun
#: lispref/windows.texi:574
#, no-wrap
msgid "next-window &optional window minibuf all-frames"
msgstr ""

# type: cindex
#: lispref/windows.texi:575
#, no-wrap
msgid "minibuffer window, and @code{next-window}"
msgstr ""

# type: defun
#: lispref/windows.texi:581
msgid ""
"This function returns the window following @var{window} in the cyclic "
"ordering of windows.  This is the window that @kbd{C-x o} would select if "
"typed when @var{window} is selected.  If @var{window} is the only window "
"visible, then this function returns @var{window}.  If omitted, @var{window} "
"defaults to the selected window."
msgstr ""

# type: defun
#: lispref/windows.texi:587
msgid ""
"The value of the argument @var{minibuf} determines whether the minibuffer is "
"included in the window order.  Normally, when @var{minibuf} is @code{nil}, "
"the minibuffer is included if it is currently active; this is the behavior "
"of @kbd{C-x o}.  (The minibuffer window is active while the minibuffer is in "
"use.  @xref{Minibuffers}.)"
msgstr ""

# type: defun
#: lispref/windows.texi:590
msgid ""
"If @var{minibuf} is @code{t}, then the cyclic ordering includes the "
"minibuffer window even if it is not active."
msgstr ""

# type: defun
#: lispref/windows.texi:593
msgid ""
"If @var{minibuf} is neither @code{t} nor @code{nil}, then the minibuffer "
"window is not included even if it is active."
msgstr ""

# type: table
#: lispref/windows.texi:603
msgid ""
"Consider all the windows in @var{window}'s frame, plus the minibuffer used "
"by that frame even if it lies in some other frame.  If the minibuffer counts "
"(as determined by @var{minibuf}), then all windows on all frames that share "
"that minibuffer count too."
msgstr ""

# type: table
#: lispref/windows.texi:606
msgid "Consider all windows in all existing frames."
msgstr ""

# type: table
#: lispref/windows.texi:610
msgid ""
"Consider all windows in all visible frames.  (To get useful results, you "
"must ensure @var{window} is in a visible frame.)"
msgstr ""

# type: table
#: lispref/windows.texi:613
msgid "Consider all windows in all visible or iconified frames."
msgstr ""

# type: item
#: lispref/windows.texi:614
#, no-wrap
msgid "a frame"
msgstr ""

# type: table
#: lispref/windows.texi:616
msgid "Consider all windows on that frame."
msgstr ""

# type: table
#: lispref/windows.texi:619
msgid "Consider precisely the windows in @var{window}'s frame, and no others."
msgstr ""

# type: defun
#: lispref/windows.texi:623
msgid ""
"This example assumes there are two windows, both displaying the buffer @samp"
"{windows.texi}:"
msgstr ""

# type: group
#: lispref/windows.texi:628
#, no-wrap
msgid ""
"(selected-window)\n"
"     @result{} #<window 56 on windows.texi>\n"
msgstr ""

# type: group
#: lispref/windows.texi:632
#, no-wrap
msgid ""
"(next-window (selected-window))\n"
"     @result{} #<window 52 on windows.texi>\n"
msgstr ""

# type: group
#: lispref/windows.texi:636
#, no-wrap
msgid ""
"(next-window (next-window (selected-window)))\n"
"     @result{} #<window 56 on windows.texi>\n"
msgstr ""

# type: defun
#: lispref/windows.texi:640
#, no-wrap
msgid "previous-window &optional window minibuf all-frames"
msgstr ""

# type: defun
#: lispref/windows.texi:644
msgid ""
"This function returns the window preceding @var{window} in the cyclic "
"ordering of windows.  The other arguments specify which windows to include "
"in the cycle, as in @code{next-window}."
msgstr ""

# type: deffn
#: lispref/windows.texi:646
#, no-wrap
msgid "Command other-window count &optional all-frames"
msgstr ""

# type: deffn
#: lispref/windows.texi:650
msgid ""
"This function selects the @var{count}th following window in the cyclic "
"order.  If count is negative, then it moves back @minus{}@var{count} windows "
"in the cycle, rather than forward.  It returns @code{nil}."
msgstr ""

# type: deffn
#: lispref/windows.texi:654
msgid ""
"The argument @var{all-frames} has the same meaning as in @code{next-window}, "
"but the @var{minibuf} argument of @code{next-window} is always effectively "
"@code{nil}."
msgstr ""

# type: defun
#: lispref/windows.texi:659
#, no-wrap
msgid "walk-windows proc &optional minibuf all-frames"
msgstr ""

# type: defun
#: lispref/windows.texi:663
msgid ""
"This function cycles through all windows.  It calls the function @code{proc} "
"once for each window, with the window as its sole argument."
msgstr ""

# type: defun
#: lispref/windows.texi:667
msgid ""
"The optional arguments @var{minibuf} and @var{all-frames} specify the set of "
"windows to include in the scan.  See @code{next-window}, above, for details."
msgstr ""

# type: defun
#: lispref/windows.texi:669
#, no-wrap
msgid "window-list &optional frame minibuf window"
msgstr ""

# type: defun
#: lispref/windows.texi:674
msgid ""
"This function returns a list of the windows on @var{frame}, starting with "
"@var{window}.  If @var{frame} is @code{nil} or omitted, @code{window-list} "
"uses the selected frame instead; if @var{window} is @code{nil} or omitted, "
"it uses the selected window."
msgstr ""

# type: defun
#: lispref/windows.texi:681
msgid ""
"The value of @var{minibuf} determines if the minibuffer window is included "
"in the result list.  If @var{minibuf} is @code{t}, the result always "
"includes the minibuffer window.  If @var{minibuf} is @code{nil} or omitted, "
"that includes the minibuffer window if it is active.  If @var{minibuf} is "
"neither @code{nil} nor @code{t}, the result never includes the minibuffer "
"window."
msgstr ""

# type: cindex
#: lispref/windows.texi:685
#, no-wrap
msgid "examining windows"
msgstr ""

# type: cindex
#: lispref/windows.texi:686
#, no-wrap
msgid "windows, controlling precisely"
msgstr ""

# type: cindex
#: lispref/windows.texi:687
#, no-wrap
msgid "buffers, controlled in windows"
msgstr ""

# type: Plain text
#: lispref/windows.texi:691
msgid ""
"This section describes low-level functions to examine windows or to display "
"buffers in windows in a precisely controlled fashion."
msgstr ""

# type: iftex
#: lispref/windows.texi:693
msgid "See the following section for"
msgstr ""

# type: ifnottex
#: lispref/windows.texi:696
msgid "@xref{Displaying Buffers}, for"
msgstr ""

# type: Plain text
#: lispref/windows.texi:701
msgid ""
"related functions that find a window to use and specify a buffer for it.  "
"The functions described there are easier to use than these, but they employ "
"heuristics in choosing or creating a window; use these functions when you "
"need complete control."
msgstr ""

# type: defun
#: lispref/windows.texi:702
#, no-wrap
msgid "set-window-buffer window buffer-or-name &optional keep-margins"
msgstr ""

# type: defun
#: lispref/windows.texi:708
msgid ""
"This function makes @var{window} display @var{buffer-or-name} as its "
"contents.  It returns @code{nil}.  @var{buffer-or-name} must be a buffer, or "
"the name of an existing buffer.  This is the fundamental primitive for "
"changing which buffer is displayed in a window, and all ways of doing that "
"call this function."
msgstr ""

# type: group
#: lispref/windows.texi:713
#, no-wrap
msgid ""
"(set-window-buffer (selected-window) \"foo\")\n"
"     @result{} nil\n"
msgstr ""

# type: defun
#: lispref/windows.texi:721
msgid ""
"Normally, displaying @var{buffer} in @var{window} resets the window's "
"display margins, fringe widths, scroll bar settings, and position based on "
"the local variables of @var{buffer}.  However, if @var{keep-margins} is non-"
"@code{nil}, the display margins and fringe widths of @var{window} remain "
"unchanged.  @xref{Fringes}."
msgstr ""

# type: defvar
#: lispref/windows.texi:727
msgid ""
"This buffer-local variable records the number of times a buffer is displayed "
"in a window.  It is incremented each time @code{set-window-buffer} is called "
"for the buffer."
msgstr ""

# type: defun
#: lispref/windows.texi:729
#, no-wrap
msgid "window-buffer &optional window"
msgstr ""

# type: defun
#: lispref/windows.texi:733
msgid ""
"This function returns the buffer that @var{window} is displaying.  If @var"
"{window} is omitted, this function returns the buffer for the selected "
"window."
msgstr ""

# type: group
#: lispref/windows.texi:738
#, no-wrap
msgid ""
"(window-buffer)\n"
"     @result{} #<buffer windows.texi>\n"
msgstr ""

# type: defun
#: lispref/windows.texi:742
#, no-wrap
msgid "get-buffer-window buffer-or-name &optional all-frames"
msgstr ""

# type: defun
#: lispref/windows.texi:748
msgid ""
"This function returns a window currently displaying @var{buffer-or-name}, or "
"@code{nil} if there is none.  If there are several such windows, then the "
"function returns the first one in the cyclic ordering of windows, starting "
"from the selected window.  @xref{Cyclic Window Ordering}."
msgstr ""

# type: defun
#: lispref/windows.texi:750
msgid "The argument @var{all-frames} controls which windows to consider."
msgstr ""

# type: defun
#: lispref/windows.texi:765
#, no-wrap
msgid "get-buffer-window-list buffer-or-name &optional minibuf all-frames"
msgstr ""

# type: defun
#: lispref/windows.texi:768
msgid ""
"This function returns a list of all the windows currently displaying @var"
"{buffer-or-name}."
msgstr ""

# type: defun
#: lispref/windows.texi:774
msgid ""
"The two optional arguments work like the optional arguments of @code{next-"
"window} (@pxref{Cyclic Window Ordering}); they are @emph{not} like the "
"single optional argument of @code{get-buffer-window}.  Perhaps we should "
"change @code{get-buffer-window} in the future to make it compatible with the "
"other functions."
msgstr ""

# type: defvar
#: lispref/windows.texi:783
msgid ""
"This variable records the time at which a buffer was last made visible in a "
"window.  It is always local in each buffer; each time @code{set-window-"
"buffer} is called, it sets this variable to @code{(current-time)} in the "
"specified buffer (@pxref{Time of Day}).  When a buffer is first created, "
"@code{buffer-display-time} starts out with the value @code{nil}."
msgstr ""

# type: section
#: lispref/windows.texi:786
#, no-wrap
msgid "Displaying Buffers in Windows"
msgstr ""

# type: cindex
#: lispref/windows.texi:787
#, no-wrap
msgid "switching to a buffer"
msgstr ""

# type: cindex
#: lispref/windows.texi:788
#, no-wrap
msgid "displaying a buffer"
msgstr ""

# type: Plain text
#: lispref/windows.texi:795
msgid ""
"In this section we describe convenient functions that choose a window "
"automatically and use it to display a specified buffer.  These functions can "
"also split an existing window in certain circumstances.  We also describe "
"variables that parameterize the heuristics used for choosing a window."
msgstr ""

# type: iftex
#: lispref/windows.texi:797
msgid "See the preceding section for"
msgstr ""

# type: ifnottex
#: lispref/windows.texi:800
msgid "@xref{Buffers and Windows}, for"
msgstr ""

# type: Plain text
#: lispref/windows.texi:803
msgid ""
"low-level functions that give you more precise control.  All of these "
"functions work by calling @code{set-window-buffer}."
msgstr ""

# type: Plain text
#: lispref/windows.texi:811
msgid ""
"Do not use the functions in this section in order to make a buffer current "
"so that a Lisp program can access or modify it; they are too drastic for "
"that purpose, since they change the display of buffers in windows, which "
"would be gratuitous and surprise the user.  Instead, use @code{set-buffer} "
"and @code{save-current-buffer} (@pxref{Current Buffer}), which designate "
"buffers as current for programmed access without affecting the display of "
"buffers in windows."
msgstr ""

# type: deffn
#: lispref/windows.texi:812
#, no-wrap
msgid "Command switch-to-buffer buffer-or-name &optional norecord"
msgstr ""

# type: deffn
#: lispref/windows.texi:819
msgid ""
"This function makes @var{buffer-or-name} the current buffer, and also "
"displays the buffer in the selected window.  This means that a human can see "
"the buffer and subsequent keyboard commands will apply to it.  Contrast this "
"with @code{set-buffer}, which makes @var{buffer-or-name} the current buffer "
"but does not display it in the selected window.  @xref{Current Buffer}."
msgstr ""

# type: deffn
#: lispref/windows.texi:825
msgid ""
"If @var{buffer-or-name} does not identify an existing buffer, then a new "
"buffer by that name is created.  The major mode for the new buffer is set "
"according to the variable @code{default-major-mode}.  @xref{Auto Major "
"Mode}.  If @var{buffer-or-name} is @code{nil}, @code{switch-to-buffer} "
"chooses a buffer using @code{other-buffer}."
msgstr ""

# type: deffn
#: lispref/windows.texi:831
msgid ""
"Normally the specified buffer is put at the front of the buffer list (both "
"the selected frame's buffer list and the frame-independent buffer list).  "
"This affects the operation of @code{other-buffer}.  However, if @var"
"{norecord} is non-@code{nil}, this is not done.  @xref{The Buffer List}."
msgstr ""

# type: deffn
#: lispref/windows.texi:835
msgid ""
"The @code{switch-to-buffer} function is often used interactively, as the "
"binding of @kbd{C-x b}.  It is also used frequently in programs.  It returns "
"the buffer that it switched to."
msgstr ""

# type: Plain text
#: lispref/windows.texi:839
msgid ""
"The next two functions are similar to @code{switch-to-buffer}, except for "
"the described features."
msgstr ""

# type: deffn
#: lispref/windows.texi:840
#, no-wrap
msgid "Command switch-to-buffer-other-window buffer-or-name &optional norecord"
msgstr ""

# type: deffn
#: lispref/windows.texi:845
msgid ""
"This function makes @var{buffer-or-name} the current buffer and displays it "
"in a window not currently selected.  It then selects that window.  The "
"handling of the buffer is the same as in @code{switch-to-buffer}."
msgstr ""

# type: deffn
#: lispref/windows.texi:851
msgid ""
"The currently selected window is absolutely never used to do the job.  If it "
"is the only window, then it is split to make a distinct window for this "
"purpose.  If the selected window is already displaying the buffer, then it "
"continues to do so, but another window is nonetheless found to display it in "
"as well."
msgstr ""

# type: defun
#: lispref/windows.texi:854 lispref/windows.texi:897
msgid ""
"This function updates the buffer list just like @code{switch-to-buffer} "
"unless @var{norecord} is non-@code{nil}."
msgstr ""

# type: defun
#: lispref/windows.texi:856
#, no-wrap
msgid "pop-to-buffer buffer-or-name &optional other-window norecord"
msgstr ""

# type: defun
#: lispref/windows.texi:863
msgid ""
"This function makes @var{buffer-or-name} the current buffer and switches to "
"it in some window, preferably not the window previously selected.  The "
"``popped-to'' window becomes the selected window within its frame.  The "
"return value is the buffer that was switched to.  If @var{buffer-or-name} is "
"@code{nil}, that means to choose some other buffer, but you don't specify "
"which."
msgstr ""

# type: defun
#: lispref/windows.texi:869
msgid ""
"If the variable @code{pop-up-frames} is non-@code{nil}, @code{pop-to-buffer} "
"looks for a window in any visible frame already displaying the buffer; if "
"there is one, it returns that window and makes it be selected within its "
"frame.  If there is none, it creates a new frame and displays the buffer in "
"it."
msgstr ""

# type: defun
#: lispref/windows.texi:874
msgid ""
"If @code{pop-up-frames} is @code{nil}, then @code{pop-to-buffer} operates "
"entirely within the selected frame.  (If the selected frame has just a "
"minibuffer, @code{pop-to-buffer} operates within the most recently selected "
"frame that was not just a minibuffer.)"
msgstr ""

# type: defun
#: lispref/windows.texi:878
msgid ""
"If the variable @code{pop-up-windows} is non-@code{nil}, windows may be "
"split to create a new window that is different from the original window.  "
"For details, see @ref{Choosing Window}."
msgstr ""

# type: defun
#: lispref/windows.texi:886
msgid ""
"If @var{other-window} is non-@code{nil}, @code{pop-to-buffer} finds or "
"creates another window even if @var{buffer-or-name} is already visible in "
"the selected window.  Thus @var{buffer-or-name} could end up displayed in "
"two windows.  On the other hand, if @var{buffer-or-name} is already "
"displayed in the selected window and @var{other-window} is @code{nil}, then "
"the selected window is considered sufficient display for @var{buffer-or-"
"name}, so that nothing needs to be done."
msgstr ""

# type: defun
#: lispref/windows.texi:889
msgid ""
"All the variables that affect @code{display-buffer} affect @code{pop-to-"
"buffer} as well.  @xref{Choosing Window}."
msgstr ""

# type: defun
#: lispref/windows.texi:894
msgid ""
"If @var{buffer-or-name} is a string that does not name an existing buffer, a "
"buffer by that name is created.  The major mode for the new buffer is set "
"according to the variable @code{default-major-mode}.  @xref{Auto Major Mode}."
msgstr ""

# type: deffn
#: lispref/windows.texi:899
#, no-wrap
msgid "Command replace-buffer-in-windows buffer-or-name"
msgstr ""

# type: deffn
#: lispref/windows.texi:905
msgid ""
"This function replaces @var{buffer-or-name} with some other buffer in all "
"windows displaying it.  It chooses the other buffer with @code{other-"
"buffer}.  In the usual applications of this function, you don't care which "
"other buffer is used; you just want to make sure that @var{buffer-or-name} "
"is no longer displayed."
msgstr ""

# type: section
#: lispref/windows.texi:910
#, no-wrap
msgid "Choosing a Window for Display"
msgstr ""

# type: Plain text
#: lispref/windows.texi:916
msgid ""
"This section describes the basic facility that chooses a window to display a "
"buffer in---@code{display-buffer}.  All the higher-level functions and "
"commands use this subroutine.  Here we describe how to use @code{display-"
"buffer} and how to customize it."
msgstr ""

# type: deffn
#: lispref/windows.texi:917
#, no-wrap
msgid "Command display-buffer buffer-or-name &optional not-this-window frame"
msgstr ""

# type: deffn
#: lispref/windows.texi:923
msgid ""
"This command makes @var{buffer-or-name} appear in some window, like @code"
"{pop-to-buffer}, but it does not select that window and does not make the "
"buffer current.  The identity of the selected window is unaltered by this "
"function.  @var{buffer-or-name} must be a buffer, or the name of an existing "
"buffer."
msgstr ""

# type: deffn
#: lispref/windows.texi:930
msgid ""
"If @var{not-this-window} is non-@code{nil}, it means to display the "
"specified buffer in a window other than the selected one, even if it is "
"already on display in the selected window.  This can cause the buffer to "
"appear in two windows at once.  Otherwise, if @var{buffer-or-name} is "
"already being displayed in any window, that is good enough, so this function "
"does nothing."
msgstr ""

# type: deffn
#: lispref/windows.texi:933
msgid ""
"@code{display-buffer} returns the window chosen to display @var{buffer-or-"
"name}."
msgstr ""

# type: deffn
#: lispref/windows.texi:939
msgid ""
"If the argument @var{frame} is non-@code{nil}, it specifies which frames to "
"check when deciding whether the buffer is already displayed.  If the buffer "
"is already displayed in some window on one of these frames, @code{display-"
"buffer} simply returns that window.  Here are the possible values of @var"
"{frame}:"
msgstr ""

# type: itemize
#: lispref/windows.texi:944
msgid ""
"If it is @code{nil}, consider windows on the selected frame.  (Actually, the "
"last non-minibuffer frame.)"
msgstr ""

# type: deffn
#: lispref/windows.texi:956
msgid ""
"Precisely how @code{display-buffer} finds or creates a window depends on the "
"variables described below."
msgstr ""

# type: defopt
#: lispref/windows.texi:958
#, no-wrap
msgid "display-buffer-reuse-frames"
msgstr "display-buffer-reuse-frames"

# type: defopt
#: lispref/windows.texi:966
msgid ""
"If this variable is non-@code{nil}, @code{display-buffer} searches existing "
"frames for a window displaying the buffer.  If the buffer is already "
"displayed in a window in some frame, @code{display-buffer} makes the frame "
"visible and raises it, to use that window.  If the buffer is not already "
"displayed, or if @code{display-buffer-reuse-frames} is @code{nil}, @code"
"{display-buffer}'s behavior is determined by other variables, described "
"below."
msgstr ""

# type: defopt
#: lispref/windows.texi:968
#, no-wrap
msgid "pop-up-windows"
msgstr "pop-up-windows"

# type: defopt
#: lispref/windows.texi:973
msgid ""
"This variable controls whether @code{display-buffer} makes new windows.  If "
"it is non-@code{nil} and there is only one window, then that window is "
"split.  If it is @code{nil}, then @code{display-buffer} does not split the "
"single window, but uses it whole."
msgstr ""

# type: defopt
#: lispref/windows.texi:975
#, no-wrap
msgid "split-height-threshold"
msgstr "split-height-threshold"

# type: defopt
#: lispref/windows.texi:981
msgid ""
"This variable determines when @code{display-buffer} may split a window, if "
"there are multiple windows.  @code{display-buffer} always splits the largest "
"window if it has at least this many lines.  If the largest window is not "
"this tall, it is split only if it is the sole window and @code{pop-up-"
"windows} is non-@code{nil}."
msgstr ""

# type: defopt
#: lispref/windows.texi:983
#, no-wrap
msgid "even-window-heights"
msgstr "even-window-heights"

# type: defopt
#: lispref/windows.texi:990
msgid ""
"This variable determines if @code{display-buffer} should even out window "
"heights if the buffer gets displayed in an existing window, above or beneath "
"another existing window.  If @code{even-window-heights} is @code{t}, the "
"default, window heights will be evened out.  If @code{even-window-heights} "
"is @code{nil}, the original window heights will be left alone."
msgstr ""

# type: defopt
#: lispref/windows.texi:993
#, no-wrap
msgid "pop-up-frames"
msgstr "pop-up-frames"

# type: defopt
#: lispref/windows.texi:1000
msgid ""
"This variable controls whether @code{display-buffer} makes new frames.  If "
"it is non-@code{nil}, @code{display-buffer} looks for an existing window "
"already displaying the desired buffer, on any visible frame.  If it finds "
"one, it returns that window.  Otherwise it makes a new frame.  The variables "
"@code{pop-up-windows} and @code{split-height-threshold} do not matter if "
"@code{pop-up-frames} is non-@code{nil}."
msgstr ""

# type: defopt
#: lispref/windows.texi:1003
msgid ""
"If @code{pop-up-frames} is @code{nil}, then @code{display-buffer} either "
"splits a window or reuses one."
msgstr ""

# type: defopt
#: lispref/windows.texi:1005
msgid "@xref{Frames}, for more information."
msgstr ""

# type: defopt
#: lispref/windows.texi:1008
#, no-wrap
msgid "pop-up-frame-function"
msgstr "pop-up-frame-function"

# type: defopt
#: lispref/windows.texi:1011
msgid ""
"This variable specifies how to make a new frame if @code{pop-up-frames} is "
"non-@code{nil}."
msgstr ""

# type: defopt
#: lispref/windows.texi:1017
msgid ""
"Its value should be a function of no arguments.  When @code{display-buffer} "
"makes a new frame, it does so by calling that function, which should return "
"a frame.  The default value of the variable is a function that creates a "
"frame using parameters from @code{pop-up-frame-alist}."
msgstr ""

# type: defopt
#: lispref/windows.texi:1019
#, no-wrap
msgid "pop-up-frame-alist"
msgstr "pop-up-frame-alist"

# type: defopt
#: lispref/windows.texi:1023
msgid ""
"This variable holds an alist specifying frame parameters used when @code"
"{display-buffer} makes a new frame.  @xref{Frame Parameters}, for more "
"information about frame parameters."
msgstr ""

# type: defopt
#: lispref/windows.texi:1025
#, no-wrap
msgid "special-display-buffer-names"
msgstr "special-display-buffer-names"

# type: defopt
#: lispref/windows.texi:1029
msgid ""
"A list of buffer names for buffers that should be displayed specially.  If "
"the buffer's name is in this list, @code{display-buffer} handles the buffer "
"specially."
msgstr ""

# type: defopt
#: lispref/windows.texi:1031 lispref/windows.texi:1066
msgid "By default, special display means to give the buffer a dedicated frame."
msgstr ""

# type: defopt
#: lispref/windows.texi:1039
msgid ""
"If an element is a list, instead of a string, then the @sc{car} of the list "
"is the buffer name, and the rest of the list says how to create the frame.  "
"There are two possibilities for the rest of the list (its @sc{cdr}).  It can "
"be an alist, specifying frame parameters, or it can contain a function and "
"arguments to give to it.  (The function's first argument is always the "
"buffer to be displayed; the arguments from the list come after that.)"
msgstr ""

# type: example
#: lispref/windows.texi:1044
#, no-wrap
msgid "((\"myfile\" (minibuffer) (menu-bar-lines . 0)))\n"
msgstr ""

# type: defopt
#: lispref/windows.texi:1049
msgid ""
"specifies to display a buffer named @samp{myfile} in a dedicated frame with "
"specified @code{minibuffer} and @code{menu-bar-lines} parameters."
msgstr ""

# type: defopt
#: lispref/windows.texi:1057
msgid ""
"The list of frame parameters can also use the phony frame parameters @code"
"{same-frame} and @code{same-window}.  If the specified frame parameters "
"include @code{(same-window . @var{value})} and @var{value} is non-@code"
"{nil}, that means to display the buffer in the current selected window.  "
"Otherwise, if they include @code{(same-frame .  @var{value})} and @var"
"{value} is non-@code{nil}, that means to display the buffer in a new window "
"in the currently selected frame."
msgstr ""

# type: defopt
#: lispref/windows.texi:1059
#, no-wrap
msgid "special-display-regexps"
msgstr "special-display-regexps"

# type: defopt
#: lispref/windows.texi:1064
msgid ""
"A list of regular expressions that specify buffers that should be displayed "
"specially.  If the buffer's name matches any of the regular expressions in "
"this list, @code{display-buffer} handles the buffer specially."
msgstr ""

# type: defopt
#: lispref/windows.texi:1070
msgid ""
"If an element is a list, instead of a string, then the @sc{car} of the list "
"is the regular expression, and the rest of the list says how to create the "
"frame.  See above, under @code{special-display-buffer-names}."
msgstr ""

# type: defun
#: lispref/windows.texi:1072
#, no-wrap
msgid "special-display-p buffer-name"
msgstr ""

# type: defun
#: lispref/windows.texi:1078
msgid ""
"This function returns non-@code{nil} if displaying a buffer named @var"
"{buffer-name} with @code{display-buffer} would create a special frame.  The "
"value is @code{t} if it would use the default frame parameters, or else the "
"specified list of frame parameters."
msgstr ""

# type: defvar
#: lispref/windows.texi:1080
#, no-wrap
msgid "special-display-function"
msgstr "special-display-function"

# type: defvar
#: lispref/windows.texi:1084
msgid ""
"This variable holds the function to call to display a buffer specially.  It "
"receives the buffer as an argument, and should return the window in which it "
"is displayed."
msgstr ""

# type: defvar
#: lispref/windows.texi:1087
msgid ""
"The default value of this variable is @code{special-display-popup-frame}."
msgstr ""

# type: defun
#: lispref/windows.texi:1089
#, no-wrap
msgid "special-display-popup-frame buffer &optional args"
msgstr ""

# type: defun
#: lispref/windows.texi:1095
msgid ""
"This function makes @var{buffer} visible in a frame of its own.  If @var"
"{buffer} is already displayed in a window in some frame, it makes the frame "
"visible and raises it, to use that window.  Otherwise, it creates a frame "
"that will be dedicated to @var{buffer}.  This function returns the window it "
"used."
msgstr ""

# type: defun
#: lispref/windows.texi:1098
msgid ""
"If @var{args} is an alist, it specifies frame parameters for the new frame."
msgstr ""

# type: defun
#: lispref/windows.texi:1103
msgid ""
"If @var{args} is a list whose @sc{car} is a symbol, then @code{(car @var"
"{args})} is called as a function to actually create and set up the frame; it "
"is called with @var{buffer} as first argument, and @code{(cdr @var{args})} "
"as additional arguments."
msgstr ""

# type: defun
#: lispref/windows.texi:1108
msgid ""
"This function always uses an existing window displaying @var{buffer}, "
"whether or not it is in a frame of its own; but if you set up the above "
"variables in your init file, before @var{buffer} was created, then "
"presumably the window was previously made by this function."
msgstr ""

# type: defopt
#: lispref/windows.texi:1110
#, no-wrap
msgid "special-display-frame-alist"
msgstr "special-display-frame-alist"

# type: anchor{#1}
#: lispref/windows.texi:1114
msgid "Definition of special-display-frame-alist"
msgstr ""

# type: defopt
#: lispref/windows.texi:1114
msgid ""
"This variable holds frame parameters for @code{special-display-popup-frame} "
"to use when it creates a frame."
msgstr ""

# type: defopt
#: lispref/windows.texi:1116
#, no-wrap
msgid "same-window-buffer-names"
msgstr "same-window-buffer-names"

# type: defopt
#: lispref/windows.texi:1121
msgid ""
"A list of buffer names for buffers that should be displayed in the selected "
"window.  If the buffer's name is in this list, @code{display-buffer} handles "
"the buffer by switching to it in the selected window."
msgstr ""

# type: defopt
#: lispref/windows.texi:1123
#, no-wrap
msgid "same-window-regexps"
msgstr "same-window-regexps"

# type: defopt
#: lispref/windows.texi:1128
msgid ""
"A list of regular expressions that specify buffers that should be displayed "
"in the selected window.  If the buffer's name matches any of the regular "
"expressions in this list, @code{display-buffer} handles the buffer by "
"switching to it in the selected window."
msgstr ""

# type: defun
#: lispref/windows.texi:1130
#, no-wrap
msgid "same-window-p buffer-name"
msgstr ""

# type: defun
#: lispref/windows.texi:1134
msgid ""
"This function returns @code{t} if displaying a buffer named @var{buffer-"
"name} with @code{display-buffer} would put it in the selected window."
msgstr ""

# type: defvar
#: lispref/windows.texi:1137
#, no-wrap
msgid "display-buffer-function"
msgstr "display-buffer-function"

# type: defvar
#: lispref/windows.texi:1144
msgid ""
"This variable is the most flexible way to customize the behavior of @code"
"{display-buffer}.  If it is non-@code{nil}, it should be a function that "
"@code{display-buffer} calls to do the work.  The function should accept two "
"arguments, the first two arguments that @code{display-buffer} received.  It "
"should choose or create a window, display the specified buffer in it, and "
"then return the window."
msgstr ""

# type: defvar
#: lispref/windows.texi:1147
msgid ""
"This hook takes precedence over all the other options and hooks described "
"above."
msgstr ""

# type: cindex
#: lispref/windows.texi:1150
#, no-wrap
msgid "dedicated window"
msgstr ""

# type: Plain text
#: lispref/windows.texi:1154
msgid ""
"A window can be marked as ``dedicated'' to its buffer.  Then @code{display-"
"buffer} will not try to use that window to display any other buffer."
msgstr ""

# type: defun
#: lispref/windows.texi:1155
#, no-wrap
msgid "window-dedicated-p window"
msgstr ""

# type: defun
#: lispref/windows.texi:1158
msgid ""
"This function returns non-@code{nil} if @var{window} is marked as dedicated; "
"otherwise @code{nil}."
msgstr ""

# type: defun
#: lispref/windows.texi:1160
#, no-wrap
msgid "set-window-dedicated-p window flag"
msgstr ""

# type: defun
#: lispref/windows.texi:1163
msgid ""
"This function marks @var{window} as dedicated if @var{flag} is non-@code"
"{nil}, and nondedicated otherwise."
msgstr ""

# type: section
#: lispref/windows.texi:1166
#, no-wrap
msgid "Windows and Point"
msgstr ""

# type: cindex
#: lispref/windows.texi:1167
#, no-wrap
msgid "window position"
msgstr ""

# type: cindex
#: lispref/windows.texi:1168
#, no-wrap
msgid "window point"
msgstr ""

# type: cindex
#: lispref/windows.texi:1169
#, no-wrap
msgid "position in window"
msgstr ""

# type: cindex
#: lispref/windows.texi:1170
#, no-wrap
msgid "point in window"
msgstr ""

# type: Plain text
#: lispref/windows.texi:1175
msgid ""
"Each window has its own value of point, independent of the value of point in "
"other windows displaying the same buffer.  This makes it useful to have "
"multiple windows showing one buffer."
msgstr ""

# type: itemize
#: lispref/windows.texi:1181
msgid ""
"The window point is established when a window is first created; it is "
"initialized from the buffer's point, or from the window point of another "
"window opened on the buffer if such a window exists."
msgstr ""

# type: itemize
#: lispref/windows.texi:1189
msgid ""
"Selecting a window sets the value of point in its buffer from the window's "
"value of point.  Conversely, deselecting a window sets the window's value of "
"point from that of the buffer.  Thus, when you switch between windows that "
"display a given buffer, the point value for the selected window is in effect "
"in the buffer, while the point values for the other windows are stored in "
"those windows."
msgstr ""

# type: itemize
#: lispref/windows.texi:1193
msgid ""
"As long as the selected window displays the current buffer, the window's "
"point and the buffer's point always move together; they remain equal."
msgstr ""

# type: Plain text
#: lispref/windows.texi:1197
msgid "@xref{Positions}, for more details on buffer positions."
msgstr ""

# type: Plain text
#: lispref/windows.texi:1202
msgid ""
"As far as the user is concerned, point is where the cursor is, and when the "
"user switches to another buffer, the cursor jumps to the position of point "
"in that buffer."
msgstr ""

# type: defun
#: lispref/windows.texi:1203
#, no-wrap
msgid "window-point &optional window"
msgstr ""

# type: defun
#: lispref/windows.texi:1208
msgid ""
"This function returns the current position of point in @var{window}.  For a "
"nonselected window, this is the value point would have (in that window's "
"buffer) if that window were selected.  If @var{window} is @code{nil}, the "
"selected window is used."
msgstr ""

# type: defun
#: lispref/windows.texi:1211
msgid ""
"When @var{window} is the selected window and its buffer is also the current "
"buffer, the value returned is the same as point in that buffer."
msgstr ""

# type: defun
#: lispref/windows.texi:1215
msgid ""
"Strictly speaking, it would be more correct to return the ``top-level'' "
"value of point, outside of any @code{save-excursion} forms.  But that value "
"is hard to find."
msgstr ""

# type: defun
#: lispref/windows.texi:1217
#, no-wrap
msgid "set-window-point window position"
msgstr ""

# type: defun
#: lispref/windows.texi:1220
msgid ""
"This function positions point in @var{window} at position @var{position} in "
"@var{window}'s buffer.  It returns @var{position}."
msgstr ""

# type: defun
#: lispref/windows.texi:1223
msgid ""
"If @var{window} is selected, and its buffer is current, this simply does "
"@code{goto-char}."
msgstr ""

# type: section
#: lispref/windows.texi:1226
#, no-wrap
msgid "The Window Start Position"
msgstr ""

# type: cindex
#: lispref/windows.texi:1227
#, no-wrap
msgid "window start position"
msgstr ""

# type: Plain text
#: lispref/windows.texi:1235
msgid ""
"Each window contains a marker used to keep track of a buffer position that "
"specifies where in the buffer display should start.  This position is called "
"the @dfn{display-start} position of the window (or just the @dfn{start}).  "
"The character after this position is the one that appears at the upper left "
"corner of the window.  It is usually, but not inevitably, at the beginning "
"of a text line."
msgstr ""

# type: defun
#: lispref/windows.texi:1236
#, no-wrap
msgid "window-start &optional window"
msgstr ""

# type: cindex
#: lispref/windows.texi:1237
#, no-wrap
msgid "window top line"
msgstr ""

# type: defun
#: lispref/windows.texi:1241
msgid ""
"This function returns the display-start position of window @var{window}.  If "
"@var{window} is @code{nil}, the selected window is used.  For example,"
msgstr ""

# type: group
#: lispref/windows.texi:1246
#, no-wrap
msgid ""
"(window-start)\n"
"     @result{} 7058\n"
msgstr ""

# type: defun
#: lispref/windows.texi:1252
msgid ""
"When you create a window, or display a different buffer in it, the display-"
"start position is set to a display-start position recently used for the same "
"buffer, or 1 if the buffer doesn't have any."
msgstr ""

# type: defun
#: lispref/windows.texi:1259
msgid ""
"Redisplay updates the window-start position (if you have not specified it "
"explicitly since the previous redisplay)---for example, to make sure point "
"appears on the screen.  Nothing except redisplay automatically changes the "
"window-start position; if you move point, do not expect the window-start "
"position to change in response until after the next redisplay."
msgstr ""

# type: defun
#: lispref/windows.texi:1262
msgid ""
"For a realistic example of using @code{window-start}, see the description of "
"@code{count-lines}.  @xref{Definition of count-lines}."
msgstr ""

# type: defun
#: lispref/windows.texi:1264
#, no-wrap
msgid "window-end &optional window update"
msgstr ""

# type: defun
#: lispref/windows.texi:1268
msgid ""
"This function returns the position of the end of the display in window @var"
"{window}.  If @var{window} is @code{nil}, the selected window is used."
msgstr ""

# type: defun
#: lispref/windows.texi:1272
msgid ""
"Simply changing the buffer text or moving point does not update the value "
"that @code{window-end} returns.  The value is updated only when Emacs "
"redisplays and redisplay completes without being preempted."
msgstr ""

# type: defun
#: lispref/windows.texi:1276
msgid ""
"If the last redisplay of @var{window} was preempted, and did not finish, "
"Emacs does not know the position of the end of display in that window.  In "
"that case, this function returns @code{nil}."
msgstr ""

# type: defun
#: lispref/windows.texi:1282
msgid ""
"If @var{update} is non-@code{nil}, @code{window-end} always returns an up-to-"
"date value for where the window ends, based on the current @code{window-"
"start} value.  If the saved value is valid, @code{window-end} returns that; "
"otherwise it computes the correct value by scanning the buffer text."
msgstr ""

# type: defun
#: lispref/windows.texi:1288
msgid ""
"Even if @var{update} is non-@code{nil}, @code{window-end} does not attempt "
"to scroll the display if point has moved off the screen, the way real "
"redisplay would do.  It does not alter the @code{window-start} value.  In "
"effect, it reports where the displayed text will end if scrolling is not "
"required."
msgstr ""

# type: defun
#: lispref/windows.texi:1290
#, no-wrap
msgid "set-window-start window position &optional noforce"
msgstr ""

# type: defun
#: lispref/windows.texi:1293
msgid ""
"This function sets the display-start position of @var{window} to @var"
"{position} in @var{window}'s buffer.  It returns @var{position}."
msgstr ""

# type: defun
#: lispref/windows.texi:1302
msgid ""
"The display routines insist that the position of point be visible when a "
"buffer is displayed.  Normally, they change the display-start position (that "
"is, scroll the window) whenever necessary to make point visible.  However, "
"if you specify the start position with this function using @code{nil} for "
"@var{noforce}, it means you want display to start at @var{position} even if "
"that would put the location of point off the screen.  If this does place "
"point off screen, the display routines move point to the left margin on the "
"middle line in the window."
msgstr ""

# type: defun
#: lispref/windows.texi:1307
msgid ""
"For example, if point @w{is 1} and you set the start of the window @w{to 2}, "
"then point would be ``above'' the top of the window.  The display routines "
"will automatically move point if it is still 1 when redisplay occurs.  Here "
"is an example:"
msgstr ""

# type: group
#: lispref/windows.texi:1312
#, no-wrap
msgid ""
";; @r{Here is what @samp{foo} looks like before executing}\n"
";;   @r{the @code{set-window-start} expression.}\n"
msgstr ""

# type: group
#: lispref/windows.texi:1323
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"@point{}This is the contents of buffer foo.\n"
"2\n"
"3\n"
"4\n"
"5\n"
"6\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: group
#: lispref/windows.texi:1330
#, no-wrap
msgid ""
"(set-window-start\n"
" (selected-window)\n"
" (1+ (window-start)))\n"
"@result{} 2\n"
msgstr ""

# type: group
#: lispref/windows.texi:1343
#, no-wrap
msgid ""
";; @r{Here is what @samp{foo} looks like after executing}\n"
";;   @r{the @code{set-window-start} expression.}\n"
"---------- Buffer: foo ----------\n"
"his is the contents of buffer foo.\n"
"2\n"
"3\n"
"@point{}4\n"
"5\n"
"6\n"
"---------- Buffer: foo ----------\n"
msgstr ""

# type: defun
#: lispref/windows.texi:1349
msgid ""
"If @var{noforce} is non-@code{nil}, and @var{position} would place point off "
"screen at the next redisplay, then redisplay computes a new window-start "
"position that works well with point, and thus @var{position} is not used."
msgstr ""

# type: defun
#: lispref/windows.texi:1351
#, no-wrap
msgid "pos-visible-in-window-p &optional position window partially"
msgstr ""

# type: defun
#: lispref/windows.texi:1359
msgid ""
"This function returns non-@code{nil} if @var{position} is within the range "
"of text currently visible on the screen in @var{window}.  It returns @code"
"{nil} if @var{position} is scrolled vertically out of view.  Locations that "
"are partially obscured are not considered visible unless @var{partially} is "
"non-@code{nil}.  The argument @var{position} defaults to the current "
"position of point in @var{window}; @var{window}, to the selected window."
msgstr ""

# type: defun
#: lispref/windows.texi:1362
msgid ""
"If @var{position} is @code{t}, that means to check the last visible position "
"in @var{window}."
msgstr ""

# type: defun
#: lispref/windows.texi:1367
msgid ""
"The @code{pos-visible-in-window-p} function considers only vertical "
"scrolling.  If @var{position} is out of view only because @var{window} has "
"been scrolled horizontally, @code{pos-visible-in-window-p} returns non-@code"
"{nil} anyway.  @xref{Horizontal Scrolling}."
msgstr ""

# type: defun
#: lispref/windows.texi:1380
msgid ""
"If @var{position} is visible, @code{pos-visible-in-window-p} returns @code"
"{t} if @var{partially} is @code{nil}; if @var{partially} is non-@code{nil}, "
"and the character after @var{position} is fully visible, it returns a list "
"of the form @code{(@var{x} @var{y})}, where @var{x} and @var{y} are the "
"pixel coordinates relative to the top left corner of the window; otherwise "
"it returns an extended list of the form @code{(@var{x} @var{y} @var{rtop} "
"@var{rbot} @var{rowh} @var{vpos})}, where the @var{rtop} and @var{rbot} "
"specify the number of off-window pixels at the top and bottom of the row at "
"@var{position}, @var{rowh} specifies the visible height of that row, and @var"
"{vpos} specifies the vertical position (zero-based row number)  of that row."
msgstr ""

# type: group
#: lispref/windows.texi:1389
#, no-wrap
msgid ""
";; @r{If point is off the screen now, recenter it now.}\n"
"(or (pos-visible-in-window-p\n"
"     (point) (selected-window))\n"
"    (recenter 0))\n"
msgstr ""

# type: defun
#: lispref/windows.texi:1393
#, no-wrap
msgid "window-line-height &optional line window"
msgstr ""

# type: defun
#: lispref/windows.texi:1401
msgid ""
"This function returns information about text line @var{line} in @var"
"{window}.  If @var{line} is one of @code{header-line} or @code{mode-line}, "
"@code{window-line-height} returns information about the corresponding line "
"of the window.  Otherwise, @var{line} is a text line number starting from "
"0.  A negative number counts from the end of the window.  The argument @var"
"{line} defaults to the current line in @var{window}; @var{window}, to the "
"selected window."
msgstr ""

# type: defun
#: lispref/windows.texi:1405
msgid ""
"If the display is not up to date, @code{window-line-height} returns @code"
"{nil}.  In that case, @code{pos-visible-in-window-p} may be used to obtain "
"related information."
msgstr ""

# type: defun
#: lispref/windows.texi:1415
msgid ""
"If there is no line corresponding to the specified @var{line}, @code{window-"
"line-height} returns @code{nil}.  Otherwise, it returns a list @code{(@var"
"{height} @var{vpos} @var{ypos} @var{offbot})}, where @var{height} is the "
"height in pixels of the visible part of the line, @var{vpos} and @var{ypos} "
"are the vertical position in lines and pixels of the line relative to the "
"top of the first text line, and @var{offbot} is the number of off-window "
"pixels at the bottom of the text line.  If there are off-window pixels at "
"the top of the (first)  text line, @var{ypos} is negative."
msgstr ""

# type: cindex
#: lispref/windows.texi:1419
#, no-wrap
msgid "textual scrolling"
msgstr ""

# type: cindex
#: lispref/windows.texi:1420
#, no-wrap
msgid "scrolling textually"
msgstr ""

# type: Plain text
#: lispref/windows.texi:1426
msgid ""
"@dfn{Textual scrolling} means moving the text up or down through a window.  "
"It works by changing the value of the window's display-start location.  It "
"may also change the value of @code{window-point} to keep point on the screen."
msgstr ""

# type: Plain text
#: lispref/windows.texi:1430
msgid ""
"Textual scrolling was formerly called ``vertical scrolling,'' but we changed "
"its name to distinguish it from the new vertical fractional scrolling "
"feature (@pxref{Vertical Scrolling})."
msgstr ""

# type: Plain text
#: lispref/windows.texi:1438
msgid ""
"In the commands @code{scroll-up} and @code{scroll-down}, the directions "
"``up'' and ``down'' refer to the motion of the text in the buffer at which "
"you are looking through the window.  Imagine that the text is written on a "
"long roll of paper and that the scrolling commands move the paper up and "
"down.  Thus, if you are looking at text in the middle of a buffer and "
"repeatedly call @code{scroll-down}, you will eventually see the beginning of "
"the buffer."
msgstr ""

# type: Plain text
#: lispref/windows.texi:1447
msgid ""
"Some people have urged that the opposite convention be used: they imagine "
"that the window moves over text that remains in place.  Then ``down'' "
"commands would take you to the end of the buffer.  This view is more "
"consistent with the actual relationship between windows and the text in the "
"buffer, but it is less like what the user sees.  The position of a window on "
"the terminal does not move, and short scrolling commands clearly move the "
"text up or down on the screen.  We have chosen names that fit the user's "
"point of view."
msgstr ""

# type: Plain text
#: lispref/windows.texi:1452
msgid ""
"The textual scrolling functions (aside from @code{scroll-other-window}) have "
"unpredictable results if the current buffer is different from the buffer "
"that is displayed in the selected window.  @xref{Current Buffer}."
msgstr ""

# type: Plain text
#: lispref/windows.texi:1458
msgid ""
"If the window contains a row which is taller than the height of the window "
"(for example in the presence of a large image), the scroll functions will "
"adjust the window vscroll to scroll the partially visible row.  To disable "
"this feature, Lisp code may bind the variable `auto-window-vscroll' to @code"
"{nil} (@pxref{Vertical Scrolling})."
msgstr ""

# type: deffn
#: lispref/windows.texi:1459
#, no-wrap
msgid "Command scroll-up &optional count"
msgstr ""

# type: deffn
#: lispref/windows.texi:1463
msgid ""
"This function scrolls the text in the selected window upward @var{count} "
"lines.  If @var{count} is negative, scrolling is actually downward."
msgstr ""

# type: deffn
#: lispref/windows.texi:1467
msgid ""
"If @var{count} is @code{nil} (or omitted), then the length of scroll is @code"
"{next-screen-context-lines} lines less than the usable height of the window "
"(not counting its mode line)."
msgstr ""

# type: deffn
#: lispref/windows.texi:1470
msgid ""
"@code{scroll-up} returns @code{nil}, unless it gets an error because it "
"can't scroll any further."
msgstr ""

# type: deffn
#: lispref/windows.texi:1472
#, no-wrap
msgid "Command scroll-down &optional count"
msgstr ""

# type: deffn
#: lispref/windows.texi:1476
msgid ""
"This function scrolls the text in the selected window downward @var{count} "
"lines.  If @var{count} is negative, scrolling is actually upward."
msgstr ""

# type: deffn
#: lispref/windows.texi:1480
msgid ""
"If @var{count} is omitted or @code{nil}, then the length of the scroll is "
"@code{next-screen-context-lines} lines less than the usable height of the "
"window (not counting its mode line)."
msgstr ""

# type: deffn
#: lispref/windows.texi:1483
msgid ""
"@code{scroll-down} returns @code{nil}, unless it gets an error because it "
"can't scroll any further."
msgstr ""

# type: deffn
#: lispref/windows.texi:1485
#, no-wrap
msgid "Command scroll-other-window &optional count"
msgstr ""

# type: deffn
#: lispref/windows.texi:1489
msgid ""
"This function scrolls the text in another window upward @var{count} lines.  "
"Negative values of @var{count}, or @code{nil}, are handled as in @code"
"{scroll-up}."
msgstr ""

# type: deffn
#: lispref/windows.texi:1494
msgid ""
"You can specify which buffer to scroll by setting the variable @code{other-"
"window-scroll-buffer} to a buffer.  If that buffer isn't already displayed, "
"@code{scroll-other-window} displays it in some window."
msgstr ""

# type: deffn
#: lispref/windows.texi:1503
msgid ""
"When the selected window is the minibuffer, the next window is normally the "
"one at the top left corner.  You can specify a different window to scroll, "
"when the minibuffer is selected, by setting the variable @code{minibuffer-"
"scroll-window}.  This variable has no effect when any other window is "
"selected.  When it is non-@code{nil} and the minibuffer is selected, it "
"takes precedence over @code{other-window-scroll-buffer}.  @xref{Definition "
"of minibuffer-scroll-window}."
msgstr ""

# type: deffn
#: lispref/windows.texi:1510
msgid ""
"When the minibuffer is active, it is the next window if the selected window "
"is the one at the bottom right corner.  In this case, @code{scroll-other-"
"window} attempts to scroll the minibuffer.  If the minibuffer contains just "
"one line, it has nowhere to scroll to, so the line reappears after the echo "
"area momentarily displays the message @samp{Beginning of buffer}."
msgstr ""

# type: defvar
#: lispref/windows.texi:1513
#, no-wrap
msgid "other-window-scroll-buffer"
msgstr ""

# type: defvar
#: lispref/windows.texi:1516
msgid ""
"If this variable is non-@code{nil}, it tells @code{scroll-other-window} "
"which buffer to scroll."
msgstr ""

# type: defopt
#: lispref/windows.texi:1518
#, no-wrap
msgid "scroll-margin"
msgstr "scroll-margin"

# type: defopt
#: lispref/windows.texi:1524
msgid ""
"This option specifies the size of the scroll margin---a minimum number of "
"lines between point and the top or bottom of a window.  Whenever point gets "
"within this many lines of the top or bottom of the window, redisplay scrolls "
"the text automatically (if possible) to move point out of the margin, closer "
"to the center of the window."
msgstr ""

# type: defopt
#: lispref/windows.texi:1526
#, no-wrap
msgid "scroll-conservatively"
msgstr "scroll-conservatively"

# type: defopt
#: lispref/windows.texi:1535
msgid ""
"This variable controls how scrolling is done automatically when point moves "
"off the screen (or into the scroll margin).  If the value is a positive "
"integer @var{n}, then redisplay scrolls the text up to @var{n} lines in "
"either direction, if that will bring point back into proper view.  This "
"action is called @dfn{conservative scrolling}.  Otherwise, scrolling happens "
"in the usual way, under the control of other variables such as @code{scroll-"
"up-aggressively} and @code{scroll-down-aggressively}."
msgstr ""

# type: defopt
#: lispref/windows.texi:1538
msgid ""
"The default value is zero, which means that conservative scrolling never "
"happens."
msgstr ""

# type: defopt
#: lispref/windows.texi:1548
msgid ""
"The value of this variable should be either @code{nil} or a fraction @var{f} "
"between 0 and 1.  If it is a fraction, that specifies where on the screen to "
"put point when scrolling down.  More precisely, when a window scrolls down "
"because point is above the window start, the new start position is chosen to "
"put point @var{f} part of the window height from the top.  The larger @var"
"{f}, the more aggressive the scrolling."
msgstr ""

# type: defopt
#: lispref/windows.texi:1552
msgid ""
"A value of @code{nil} is equivalent to .5, since its effect is to center "
"point.  This variable automatically becomes buffer-local when set in any "
"fashion."
msgstr ""

# type: defopt
#: lispref/windows.texi:1558
msgid ""
"Likewise, for scrolling up.  The value, @var{f}, specifies how far point "
"should be placed from the bottom of the window; thus, as with @code{scroll-"
"up-aggressively}, a larger value scrolls more aggressively."
msgstr ""

# type: defopt
#: lispref/windows.texi:1560
#, no-wrap
msgid "scroll-step"
msgstr "scroll-step"

# type: defopt
#: lispref/windows.texi:1565
msgid ""
"This variable is an older variant of @code{scroll-conservatively}.  The "
"difference is that it if its value is @var{n}, that permits scrolling only "
"by precisely @var{n} lines, not a smaller number.  This feature does not "
"work with @code{scroll-margin}.  The default value is zero."
msgstr ""

# type: defopt
#: lispref/windows.texi:1567
#, no-wrap
msgid "scroll-preserve-screen-position"
msgstr "scroll-preserve-screen-position"

# type: defopt
#: lispref/windows.texi:1571
msgid ""
"If this option is @code{t}, scrolling which would move the current point "
"position out of the window chooses the new position of point so that the "
"vertical position of the cursor is unchanged, if possible."
msgstr ""

# type: defopt
#: lispref/windows.texi:1574
msgid ""
"If it is non-@code{nil} and not @code{t}, then the scrolling functions "
"always preserve the vertical position of point, if possible."
msgstr ""

# type: defopt
#: lispref/windows.texi:1576
#, no-wrap
msgid "next-screen-context-lines"
msgstr "next-screen-context-lines"

# type: defopt
#: lispref/windows.texi:1582
msgid ""
"The value of this variable is the number of lines of continuity to retain "
"when scrolling by full screens.  For example, @code{scroll-up} with an "
"argument of @code{nil} scrolls so that this many lines at the bottom of the "
"window appear instead at the top.  The default value is @code{2}."
msgstr ""

# type: deffn
#: lispref/windows.texi:1584
#, no-wrap
msgid "Command recenter &optional count"
msgstr ""

# type: cindex
#: lispref/windows.texi:1585
#, no-wrap
msgid "centering point"
msgstr ""

# type: deffn
#: lispref/windows.texi:1589
msgid ""
"This function scrolls the text in the selected window so that point is "
"displayed at a specified vertical position within the window.  It does not "
"``move point'' with respect to the text."
msgstr ""

# type: deffn
#: lispref/windows.texi:1596
msgid ""
"If @var{count} is a nonnegative number, that puts the line containing point "
"@var{count} lines down from the top of the window.  If @var{count} is a "
"negative number, then it counts upward from the bottom of the window, so "
"that @minus{}1 stands for the last usable line in the window.  If @var"
"{count} is a non-@code{nil} list, then it stands for the line in the middle "
"of the window."
msgstr ""

# type: deffn
#: lispref/windows.texi:1600
msgid ""
"If @var{count} is @code{nil}, @code{recenter} puts the line containing point "
"in the middle of the window, then clears and redisplays the entire selected "
"frame."
msgstr ""

# type: deffn
#: lispref/windows.texi:1606
msgid ""
"When @code{recenter} is called interactively, @var{count} is the raw prefix "
"argument.  Thus, typing @kbd{C-u} as the prefix sets the @var{count} to a "
"non-@code{nil} list, while typing @kbd{C-u 4} sets @var{count} to 4, which "
"positions the current line four lines from the top."
msgstr ""

# type: deffn
#: lispref/windows.texi:1610
msgid ""
"With an argument of zero, @code{recenter} positions the current line at the "
"top of the window.  This action is so handy that some people make a separate "
"key binding to do this.  For example,"
msgstr ""

# type: group
#: lispref/windows.texi:1618
#, no-wrap
msgid ""
"(defun line-to-top-of-window ()\n"
"  \"Scroll current line to top of window.\n"
"Replaces three keystroke sequence C-u 0 C-l.\"\n"
"  (interactive)\n"
"  (recenter 0))\n"
"\n"
msgstr ""

# type: group
#: lispref/windows.texi:1620
#, no-wrap
msgid "(global-set-key [kp-multiply] 'line-to-top-of-window)\n"
msgstr ""

# type: section
#: lispref/windows.texi:1625
#, no-wrap
msgid "Vertical Fractional Scrolling"
msgstr ""

# type: cindex
#: lispref/windows.texi:1626
#, no-wrap
msgid "vertical fractional scrolling"
msgstr ""

# type: Plain text
#: lispref/windows.texi:1635
msgid ""
"@dfn{Vertical fractional scrolling} means shifting the image in the window "
"up or down by a specified multiple or fraction of a line.  Each window has a "
"@dfn{vertical scroll position}, which is a number, never less than zero.  It "
"specifies how far to raise the contents of the window.  Raising the window "
"contents generally makes all or part of some lines disappear off the top, "
"and all or part of some other lines appear at the bottom.  The usual value "
"is zero."
msgstr ""

# type: Plain text
#: lispref/windows.texi:1641
msgid ""
"The vertical scroll position is measured in units of the normal line height, "
"which is the height of the default font.  Thus, if the value is .5, that "
"means the window contents are scrolled up half the normal line height.  If "
"it is 3.3, that means the window contents are scrolled up somewhat over "
"three times the normal line height."
msgstr ""

# type: Plain text
#: lispref/windows.texi:1646
msgid ""
"What fraction of a line the vertical scrolling covers, or how many lines, "
"depends on what the lines contain.  A value of .5 could scroll a line whose "
"height is very short off the screen, while a value of 3.3 could scroll just "
"part of the way through a tall line or an image."
msgstr ""

# type: defun
#: lispref/windows.texi:1647
#, no-wrap
msgid "window-vscroll &optional window pixels-p"
msgstr ""

# type: defun
#: lispref/windows.texi:1652
msgid ""
"This function returns the current vertical scroll position of @var{window}.  "
"If @var{window} is @code{nil}, the selected window is used.  If @var{pixels-"
"p} is non-@code{nil}, the return value is measured in pixels, rather than in "
"units of the normal line height."
msgstr ""

# type: group
#: lispref/windows.texi:1657
#, no-wrap
msgid ""
"(window-vscroll)\n"
"     @result{} 0\n"
msgstr ""

# type: defun
#: lispref/windows.texi:1661
#, no-wrap
msgid "set-window-vscroll window lines &optional pixels-p"
msgstr ""

# type: defun
#: lispref/windows.texi:1665
msgid ""
"This function sets @var{window}'s vertical scroll position to @var{lines}.  "
"The argument @var{lines} should be zero or positive; if not, it is taken as "
"zero."
msgstr ""

# type: defun
#: lispref/windows.texi:1667 lispref/windows.texi:1774
msgid "If @var{window} is @code{nil}, the selected window is used."
msgstr ""

# type: defun
#: lispref/windows.texi:1671
msgid ""
"The actual vertical scroll position must always correspond to an integral "
"number of pixels, so the value you specify is rounded accordingly."
msgstr ""

# type: defun
#: lispref/windows.texi:1673
msgid "The return value is the result of this rounding."
msgstr ""

# type: group
#: lispref/windows.texi:1678
#, no-wrap
msgid ""
"(set-window-vscroll (selected-window) 1.2)\n"
"     @result{} 1.13\n"
msgstr ""

# type: defun
#: lispref/windows.texi:1683
msgid ""
"If @var{pixels-p} is non-@code{nil}, @var{lines} specifies a number of "
"pixels.  In this case, the return value is @var{lines}."
msgstr ""

# type: defvar
#: lispref/windows.texi:1685
#, no-wrap
msgid "auto-window-vscroll"
msgstr ""

# type: defvar
#: lispref/windows.texi:1690
msgid ""
"If this variable is non-@code{nil}, the line-move, scroll-up, and scroll-"
"down functions will automatically modify the window vscroll to scroll "
"through display rows that are taller that the height of the window, for "
"example in the presence of large images."
msgstr ""

# type: cindex
#: lispref/windows.texi:1694
#, no-wrap
msgid "horizontal scrolling"
msgstr ""

# type: Plain text
#: lispref/windows.texi:1703
msgid ""
"@dfn{Horizontal scrolling} means shifting the image in the window left or "
"right by a specified multiple of the normal character width.  Each window "
"has a @dfn{horizontal scroll position}, which is a number, never less than "
"zero.  It specifies how far to shift the contents left.  Shifting the window "
"contents left generally makes all or part of some characters disappear off "
"the left, and all or part of some other characters appear at the right.  The "
"usual value is zero."
msgstr ""

# type: Plain text
#: lispref/windows.texi:1710
msgid ""
"The horizontal scroll position is measured in units of the normal character "
"width, which is the width of space in the default font.  Thus, if the value "
"is 5, that means the window contents are scrolled left by 5 times the normal "
"character width.  How many characters actually disappear off to the left "
"depends on their width, and could vary from line to line."
msgstr ""

# type: Plain text
#: lispref/windows.texi:1717
msgid ""
"Because we read from side to side in the ``inner loop,'' and from top to "
"bottom in the ``outer loop,'' the effect of horizontal scrolling is not like "
"that of textual or vertical scrolling.  Textual scrolling involves selection "
"of a portion of text to display, and vertical scrolling moves the window "
"contents contiguously; but horizontal scrolling causes part of @emph{each "
"line} to go off screen."
msgstr ""

# type: Plain text
#: lispref/windows.texi:1729
msgid ""
"Usually, no horizontal scrolling is in effect; then the leftmost column is "
"at the left edge of the window.  In this state, scrolling to the right is "
"meaningless, since there is no data to the left of the edge to be revealed "
"by it; so this is not allowed.  Scrolling to the left is allowed; it scrolls "
"the first columns of text off the edge of the window and can reveal "
"additional columns on the right that were truncated before.  Once a window "
"has a nonzero amount of leftward horizontal scrolling, you can scroll it "
"back to the right, but only so far as to reduce the net horizontal scroll to "
"zero.  There is no limit to how far left you can scroll, but eventually all "
"the text will disappear off the left edge."
msgstr ""

# type: vindex
#: lispref/windows.texi:1730
#, no-wrap
msgid "auto-hscroll-mode"
msgstr ""

# type: Plain text
#: lispref/windows.texi:1737
msgid ""
"If @code{auto-hscroll-mode} is set, redisplay automatically alters the "
"horizontal scrolling of a window as necessary to ensure that point is always "
"visible.  However, you can still set the horizontal scrolling value "
"explicitly.  The value you specify serves as a lower bound for automatic "
"scrolling, i.e. automatic scrolling will not scroll a window to a column "
"less than the specified one."
msgstr ""

# type: deffn
#: lispref/windows.texi:1738
#, no-wrap
msgid "Command scroll-left &optional count set-minimum"
msgstr ""

# type: deffn
#: lispref/windows.texi:1742
msgid ""
"This function scrolls the selected window @var{count} columns to the left "
"(or to the right if @var{count} is negative).  The default for @var{count} "
"is the window width, minus 2."
msgstr ""

# type: deffn
#: lispref/windows.texi:1746
msgid ""
"The return value is the total amount of leftward horizontal scrolling in "
"effect after the change---just like the value returned by @code{window-"
"hscroll} (below)."
msgstr ""

# type: deffn
#: lispref/windows.texi:1750
msgid ""
"Once you scroll a window as far right as it can go, back to its normal "
"position where the total leftward scrolling is zero, attempts to scroll any "
"farther right have no effect."
msgstr ""

# type: deffn
#: lispref/windows.texi:1756
msgid ""
"If @var{set-minimum} is non-@code{nil}, the new scroll amount becomes the "
"lower bound for automatic scrolling; that is, automatic scrolling will not "
"scroll a window to a column less than the value returned by this function.  "
"Interactive calls pass non-@code{nil} for @var{set-minimum}."
msgstr ""

# type: deffn
#: lispref/windows.texi:1758
#, no-wrap
msgid "Command scroll-right &optional count set-minimum"
msgstr ""

# type: deffn
#: lispref/windows.texi:1763
msgid ""
"This function scrolls the selected window @var{count} columns to the right "
"(or to the left if @var{count} is negative).  The default for @var{count} is "
"the window width, minus 2.  Aside from the direction of scrolling, this "
"works just like @code{scroll-left}."
msgstr ""

# type: defun
#: lispref/windows.texi:1765
#, no-wrap
msgid "window-hscroll &optional window"
msgstr ""

# type: defun
#: lispref/windows.texi:1769
msgid ""
"This function returns the total leftward horizontal scrolling of @var"
"{window}---the number of columns by which the text in @var{window} is "
"scrolled left past the left margin."
msgstr ""

# type: defun
#: lispref/windows.texi:1772
msgid ""
"The value is never negative.  It is zero when no horizontal scrolling has "
"been done in @var{window} (which is usually the case)."
msgstr ""

# type: group
#: lispref/windows.texi:1779
#, no-wrap
msgid ""
"(window-hscroll)\n"
"     @result{} 0\n"
msgstr ""

# type: group
#: lispref/windows.texi:1783
#, no-wrap
msgid ""
"(scroll-left 5)\n"
"     @result{} 5\n"
msgstr ""

# type: group
#: lispref/windows.texi:1787
#, no-wrap
msgid ""
"(window-hscroll)\n"
"     @result{} 5\n"
msgstr ""

# type: defun
#: lispref/windows.texi:1791
#, no-wrap
msgid "set-window-hscroll window columns"
msgstr ""

# type: defun
#: lispref/windows.texi:1797
msgid ""
"This function sets horizontal scrolling of @var{window}.  The value of @var"
"{columns} specifies the amount of scrolling, in terms of columns from the "
"left margin.  The argument @var{columns} should be zero or positive; if not, "
"it is taken as zero.  Fractional values of @var{columns} are not supported "
"at present."
msgstr ""

# type: defun
#: lispref/windows.texi:1805
msgid ""
"Note that @code{set-window-hscroll} may appear not to work if you test it by "
"evaluating a call with @kbd{M-:} in a simple way.  What happens is that the "
"function sets the horizontal scroll value and returns, but then redisplay "
"adjusts the horizontal scrolling to make point visible, and this overrides "
"what the function did.  You can observe the function's effect if you call it "
"while point is sufficiently far from the left margin that it will remain "
"visible."
msgstr ""

# type: defun
#: lispref/windows.texi:1807
msgid "The value returned is @var{columns}."
msgstr ""

# type: group
#: lispref/windows.texi:1812
#, no-wrap
msgid ""
"(set-window-hscroll (selected-window) 10)\n"
"     @result{} 10\n"
msgstr ""

# type: Plain text
#: lispref/windows.texi:1818
msgid ""
"Here is how you can determine whether a given position @var{position} is off "
"the screen due to horizontal scrolling:"
msgstr ""

# type: group
#: lispref/windows.texi:1828
#, no-wrap
msgid ""
"(defun hscroll-on-screen (window position)\n"
"  (save-excursion\n"
"    (goto-char position)\n"
"    (and\n"
"     (>= (- (current-column) (window-hscroll window)) 0)\n"
"     (< (- (current-column) (window-hscroll window))\n"
"        (window-width window)))))\n"
msgstr ""

# type: section
#: lispref/windows.texi:1832
#, no-wrap
msgid "The Size of a Window"
msgstr ""

# type: cindex
#: lispref/windows.texi:1833
#, no-wrap
msgid "window size"
msgstr ""

# type: cindex
#: lispref/windows.texi:1834
#, no-wrap
msgid "size of window"
msgstr ""

# type: Plain text
#: lispref/windows.texi:1841
msgid ""
"An Emacs window is rectangular, and its size information consists of the "
"height (the number of lines) and the width (the number of character "
"positions in each line).  The mode line is included in the height.  But the "
"width does not count the scroll bar or the column of @samp{|} characters "
"that separates side-by-side windows."
msgstr ""

# type: Plain text
#: lispref/windows.texi:1843
msgid "The following three functions return size information about a window:"
msgstr ""

# type: defun
#: lispref/windows.texi:1844
#, no-wrap
msgid "window-height &optional window"
msgstr ""

# type: defun
#: lispref/windows.texi:1849
msgid ""
"This function returns the number of lines in @var{window}, including its "
"mode line and header line, if any.  If @var{window} fills its entire frame "
"except for the echo area, this is typically one less than the value of @code"
"{frame-height} on that frame."
msgstr ""

# type: defun
#: lispref/windows.texi:1851 lispref/windows.texi:1881
msgid "If @var{window} is @code{nil}, the function uses the selected window."
msgstr ""

# type: group
#: lispref/windows.texi:1856
#, no-wrap
msgid ""
"(window-height)\n"
"     @result{} 23\n"
msgstr ""

# type: group
#: lispref/windows.texi:1860
#, no-wrap
msgid ""
"(split-window-vertically)\n"
"     @result{} #<window 4 on windows.texi>\n"
msgstr ""

# type: group
#: lispref/windows.texi:1864
#, no-wrap
msgid ""
"(window-height)\n"
"     @result{} 11\n"
msgstr ""

# type: defun
#: lispref/windows.texi:1868
#, no-wrap
msgid "window-body-height &optional window"
msgstr ""

# type: defun
#: lispref/windows.texi:1871
msgid ""
"Like @code{window-height} but the value does not include the mode line (if "
"any) or the header line (if any)."
msgstr ""

# type: defun
#: lispref/windows.texi:1873
#, no-wrap
msgid "window-width &optional window"
msgstr ""

# type: defun
#: lispref/windows.texi:1879
msgid ""
"This function returns the number of columns in @var{window}.  If @var"
"{window} fills its entire frame, this is the same as the value of @code"
"{frame-width} on that frame.  The width does not include the window's scroll "
"bar or the column of @samp{|} characters that separates side-by-side windows."
msgstr ""

# type: group
#: lispref/windows.texi:1886
#, no-wrap
msgid ""
"(window-width)\n"
"     @result{} 80\n"
msgstr ""

# type: defun
#: lispref/windows.texi:1890
#, no-wrap
msgid "window-edges &optional window"
msgstr ""

# type: defun
#: lispref/windows.texi:1893
msgid ""
"This function returns a list of the edge coordinates of @var{window}.  If "
"@var{window} is @code{nil}, the selected window is used."
msgstr ""

# type: defun
#: lispref/windows.texi:1899
msgid ""
"The order of the list is @code{(@var{left} @var{top} @var{right} @var"
"{bottom})}, all elements relative to 0, 0 at the top left corner of the "
"frame.  The element @var{right} of the value is one more than the rightmost "
"column used by @var{window}, and @var{bottom} is one more than the "
"bottommost row used by @var{window} and its mode-line."
msgstr ""

# type: defun
#: lispref/windows.texi:1907
msgid ""
"The edges include the space used by the window's scroll bar, display "
"margins, fringes, header line, and mode line, if it has them.  Also, if the "
"window has a neighbor on the right, its right edge value includes the width "
"of the separator line between the window and that neighbor.  Since the width "
"of the window does not include this separator, the width does not usually "
"equal the difference between the right and left edges."
msgstr ""

# type: defun
#: lispref/windows.texi:1909
#, no-wrap
msgid "window-inside-edges &optional window"
msgstr ""

# type: defun
#: lispref/windows.texi:1914
msgid ""
"This is similar to @code{window-edges}, but the edge values it returns "
"include only the text area of the window.  They do not include the header "
"line, mode line, scroll bar or vertical separator, fringes, or display "
"margins."
msgstr ""

# type: Plain text
#: lispref/windows.texi:1918
msgid ""
"Here are the results obtained on a typical 24-line terminal with just one "
"window, with menu bar enabled:"
msgstr ""

# type: group
#: lispref/windows.texi:1923
#, no-wrap
msgid ""
"(window-edges (selected-window))\n"
"     @result{} (0 1 80 23)\n"
msgstr ""

# type: group
#: lispref/windows.texi:1927
#, no-wrap
msgid ""
"(window-inside-edges (selected-window))\n"
"     @result{} (0 1 80 22)\n"
msgstr ""

# type: Plain text
#: lispref/windows.texi:1933
msgid ""
"The bottom edge is at line 23 because the last line is the echo area.  The "
"bottom inside edge is at line 22, which is the window's mode line."
msgstr ""

# type: Plain text
#: lispref/windows.texi:1943
msgid ""
"If @var{window} is at the upper left corner of its frame, and there is no "
"menu bar, then @var{bottom} returned by @code{window-edges} is the same as "
"the value of @code{(window-height)}, @var{right} is almost the same as the "
"value of @code{(window-width)}, and @var{top} and @var{left} are zero.  For "
"example, the edges of the following window are @w{@samp{0 0 8 5}}.  Assuming "
"that the frame has more than 8 columns, the last column of the window "
"(column 7) holds a border rather than text.  The last row (row 4) holds the "
"mode line, shown here with @samp{xxxxxxxxx}."
msgstr ""

# type: group
#: lispref/windows.texi:1953
#, no-wrap
msgid ""
"           0\n"
"           _______\n"
"        0 |       |\n"
"          |       |\n"
"          |       |\n"
"          |       |\n"
"          xxxxxxxxx  4\n"
"\n"
msgstr ""

# type: group
#: lispref/windows.texi:1955
#, no-wrap
msgid "                  7\n"
msgstr ""

# type: Plain text
#: lispref/windows.texi:1963
msgid ""
"In the following example, let's suppose that the frame is 7 columns wide.  "
"Then the edges of the left window are @w{@samp{0 0 4 3}} and the edges of "
"the right window are @w{@samp{4 0 7 3}}.  The inside edges of the left "
"window are @w{@samp{0 0 3 2}}, and the inside edges of the right window are "
"@w{@samp{4 0 7 2}},"
msgstr ""

# type: group
#: lispref/windows.texi:1970
#, no-wrap
msgid ""
"           ___ ___\n"
"          |   |   |\n"
"          |   |   |\n"
"          xxxxxxxxx\n"
"\n"
msgstr ""

# type: group
#: lispref/windows.texi:1972
#, no-wrap
msgid "           0  34  7\n"
msgstr ""

# type: defun
#: lispref/windows.texi:1975
#, no-wrap
msgid "window-pixel-edges &optional window"
msgstr ""

# type: defun
#: lispref/windows.texi:1979
msgid ""
"This function is like @code{window-edges} except that, on a graphical "
"display, the edge values are measured in pixels instead of in character "
"lines and columns."
msgstr ""

# type: defun
#: lispref/windows.texi:1981
#, no-wrap
msgid "window-inside-pixel-edges &optional window"
msgstr ""

# type: defun
#: lispref/windows.texi:1985
msgid ""
"This function is like @code{window-inside-edges} except that, on a graphical "
"display, the edge values are measured in pixels instead of in character "
"lines and columns."
msgstr ""

# type: section
#: lispref/windows.texi:1988
#, no-wrap
msgid "Changing the Size of a Window"
msgstr ""

# type: cindex
#: lispref/windows.texi:1989
#, no-wrap
msgid "window resizing"
msgstr ""

# type: cindex
#: lispref/windows.texi:1990
#, no-wrap
msgid "resize window"
msgstr ""

# type: cindex
#: lispref/windows.texi:1991
#, no-wrap
msgid "changing window size"
msgstr ""

# type: cindex
#: lispref/windows.texi:1992
#, no-wrap
msgid "window size, changing"
msgstr ""

# type: Plain text
#: lispref/windows.texi:1998
msgid ""
"The window size functions fall into two classes: high-level commands that "
"change the size of windows and low-level functions that access window size.  "
"Emacs does not permit overlapping windows or gaps between windows, so "
"resizing one window affects other windows."
msgstr ""

# type: deffn
#: lispref/windows.texi:1999
#, no-wrap
msgid "Command enlarge-window size &optional horizontal"
msgstr ""

# type: deffn
#: lispref/windows.texi:2005
msgid ""
"This function makes the selected window @var{size} lines taller, stealing "
"lines from neighboring windows.  It takes the lines from one window at a "
"time until that window is used up, then takes from another.  If a window "
"from which lines are stolen shrinks below @code{window-min-height} lines, "
"that window disappears."
msgstr ""

# type: deffn
#: lispref/windows.texi:2010
msgid ""
"If @var{horizontal} is non-@code{nil}, this function makes @var{window} "
"wider by @var{size} columns, stealing columns instead of lines.  If a window "
"from which columns are stolen shrinks below @code{window-min-width} columns, "
"that window disappears."
msgstr ""

# type: deffn
#: lispref/windows.texi:2014
msgid ""
"If the requested size would exceed that of the window's frame, then the "
"function makes the window occupy the entire height (or width) of the frame."
msgstr ""

# type: deffn
#: lispref/windows.texi:2021
msgid ""
"If there are various other windows from which lines or columns can be "
"stolen, and some of them specify fixed size (using @code{window-size-fixed}, "
"see below), they are left untouched while other windows are ``robbed.'' If "
"it would be necessary to alter the size of a fixed-size window, @code"
"{enlarge-window} gets an error instead."
msgstr ""

# type: deffn
#: lispref/windows.texi:2026
msgid ""
"If @var{size} is negative, this function shrinks the window by @minus{}@var"
"{size} lines or columns.  If that makes the window smaller than the minimum "
"size (@code{window-min-height} and @code{window-min-width}), @code{enlarge-"
"window} deletes the window."
msgstr ""

# type: deffn
#: lispref/windows.texi:2028
msgid "@code{enlarge-window} returns @code{nil}."
msgstr ""

# type: deffn
#: lispref/windows.texi:2030
#, no-wrap
msgid "Command enlarge-window-horizontally columns"
msgstr ""

# type: deffn
#: lispref/windows.texi:2033
msgid ""
"This function makes the selected window @var{columns} wider.  It could be "
"defined as follows:"
msgstr ""

# type: group
#: lispref/windows.texi:2039
#, no-wrap
msgid ""
"(defun enlarge-window-horizontally (columns)\n"
"  (interactive \"p\")\n"
"  (enlarge-window columns t))\n"
msgstr ""

# type: deffn
#: lispref/windows.texi:2043
#, no-wrap
msgid "Command shrink-window size &optional horizontal"
msgstr ""

# type: deffn
#: lispref/windows.texi:2048
msgid ""
"This function is like @code{enlarge-window} but negates the argument @var"
"{size}, making the selected window smaller by giving lines (or columns) to "
"the other windows.  If the window shrinks below @code{window-min-height} or "
"@code{window-min-width}, then it disappears."
msgstr ""

# type: deffn
#: lispref/windows.texi:2051
msgid ""
"If @var{size} is negative, the window is enlarged by @minus{}@var{size} "
"lines or columns."
msgstr ""

# type: deffn
#: lispref/windows.texi:2053
#, no-wrap
msgid "Command shrink-window-horizontally columns"
msgstr ""

# type: deffn
#: lispref/windows.texi:2056
msgid ""
"This function makes the selected window @var{columns} narrower.  It could be "
"defined as follows:"
msgstr ""

# type: group
#: lispref/windows.texi:2062
#, no-wrap
msgid ""
"(defun shrink-window-horizontally (columns)\n"
"  (interactive \"p\")\n"
"  (shrink-window columns t))\n"
msgstr ""

# type: defun
#: lispref/windows.texi:2066
#, no-wrap
msgid "adjust-window-trailing-edge window delta horizontal"
msgstr ""

# type: defun
#: lispref/windows.texi:2072
msgid ""
"This function makes the selected window @var{delta} lines taller or @var"
"{delta} columns wider, by moving the bottom or right edge.  This function "
"does not delete other windows; if it cannot make the requested size "
"adjustment, it signals an error.  On success, this function returns @code"
"{nil}."
msgstr ""

# type: defun
#: lispref/windows.texi:2074
#, no-wrap
msgid "fit-window-to-buffer &optional window max-height min-height"
msgstr ""

# type: defun
#: lispref/windows.texi:2078
msgid ""
"This function makes @var{window} the right height to display its contents "
"exactly.  If @var{window} is omitted or @code{nil}, it uses the selected "
"window."
msgstr ""

# type: defun
#: lispref/windows.texi:2084
msgid ""
"The argument @var{max-height} specifies the maximum height the window is "
"allowed to be; @code{nil} means use the frame height.  The argument @var{min-"
"height} specifies the minimum height for the window; @code{nil} means use "
"@code{window-min-height}.  All these height values include the mode-line and/"
"or header-line."
msgstr ""

# type: deffn
#: lispref/windows.texi:2086
#, no-wrap
msgid "Command shrink-window-if-larger-than-buffer &optional window"
msgstr ""

# type: deffn
#: lispref/windows.texi:2091
msgid ""
"This command shrinks @var{window} vertically to be as small as possible "
"while still showing the full contents of its buffer---but not less than @code"
"{window-min-height} lines.  If @var{window} is not given, it defaults to the "
"selected window."
msgstr ""

# type: deffn
#: lispref/windows.texi:2096
msgid ""
"However, the command does nothing if the window is already too small to "
"display the whole text of the buffer, or if part of the contents are "
"currently scrolled off screen, or if the window is not the full width of its "
"frame, or if the window is the only window in its frame."
msgstr ""

# type: deffn
#: lispref/windows.texi:2099
msgid ""
"This command returns non-@code{nil} if it actually shrank the window and "
"@code{nil} otherwise."
msgstr ""

# type: defvar
#: lispref/windows.texi:2105
msgid ""
"If this variable is non-@code{nil}, in any given buffer, then the size of "
"any window displaying the buffer remains fixed unless you explicitly change "
"it or Emacs has no other choice."
msgstr ""

# type: defvar
#: lispref/windows.texi:2109
msgid ""
"If the value is @code{height}, then only the window's height is fixed; if "
"the value is @code{width}, then only the window's width is fixed.  Any other "
"non-@code{nil} value fixes both the width and the height."
msgstr ""

# type: defvar
#: lispref/windows.texi:2111
msgid "This variable automatically becomes buffer-local when set."
msgstr ""

# type: defvar
#: lispref/windows.texi:2116
msgid ""
"Explicit size-change functions such as @code{enlarge-window} get an error if "
"they would have to change a window size which is fixed.  Therefore, when you "
"want to change the size of such a window, you should bind @code{window-size-"
"fixed} to @code{nil}, like this:"
msgstr ""

# type: example
#: lispref/windows.texi:2120
#, no-wrap
msgid ""
"(let ((window-size-fixed nil))\n"
"   (enlarge-window 10))\n"
msgstr ""

# type: defvar
#: lispref/windows.texi:2124
msgid ""
"Note that changing the frame size will change the size of a fixed-size "
"window, if there is no other alternative."
msgstr ""

# type: cindex
#: lispref/windows.texi:2126
#, no-wrap
msgid "minimum window size"
msgstr ""

# type: Plain text
#: lispref/windows.texi:2129
msgid ""
"The following two variables constrain the window-structure-changing "
"functions to a minimum height and width."
msgstr ""

# type: defopt
#: lispref/windows.texi:2130
#, no-wrap
msgid "window-min-height"
msgstr "window-min-height"

# type: defopt
#: lispref/windows.texi:2135
msgid ""
"The value of this variable determines how short a window may become before "
"it is automatically deleted.  Making a window smaller than @code{window-min-"
"height} automatically deletes it, and no window may be created shorter than "
"this.  The default value is 4."
msgstr ""

# type: defopt
#: lispref/windows.texi:2138
msgid ""
"The absolute minimum window height is one; actions that change window sizes "
"reset this variable to one if it is less than one."
msgstr ""

# type: defopt
#: lispref/windows.texi:2140
#, no-wrap
msgid "window-min-width"
msgstr "window-min-width"

# type: defopt
#: lispref/windows.texi:2145
msgid ""
"The value of this variable determines how narrow a window may become before "
"it is automatically deleted.  Making a window smaller than @code{window-min-"
"width} automatically deletes it, and no window may be created narrower than "
"this.  The default value is 10."
msgstr ""

# type: defopt
#: lispref/windows.texi:2148
msgid ""
"The absolute minimum window width is two; actions that change window sizes "
"reset this variable to two if it is less than two."
msgstr ""

# type: Plain text
#: lispref/windows.texi:2154
msgid "This section describes how to relate screen coordinates to windows."
msgstr ""

# type: defun
#: lispref/windows.texi:2155
#, no-wrap
msgid "window-at x y &optional frame"
msgstr ""

# type: defun
#: lispref/windows.texi:2160
msgid ""
"This function returns the window containing the specified cursor position in "
"the frame @var{frame}.  The coordinates @var{x} and @var{y} are measured in "
"characters and count from the top left corner of the frame.  If they are out "
"of range, @code{window-at} returns @code{nil}."
msgstr ""

# type: defun
#: lispref/windows.texi:2162
msgid "If you omit @var{frame}, the selected frame is used."
msgstr ""

# type: defun
#: lispref/windows.texi:2164
#, no-wrap
msgid "coordinates-in-window-p coordinates window"
msgstr ""

# type: defun
#: lispref/windows.texi:2167
msgid ""
"This function checks whether a particular frame position falls within the "
"window @var{window}."
msgstr ""

# type: defun
#: lispref/windows.texi:2171
msgid ""
"The argument @var{coordinates} is a cons cell of the form @code{(@var{x} . "
"@var{y})}.  The coordinates @var{x} and @var{y} are measured in characters, "
"and count from the top left corner of the screen or frame."
msgstr ""

# type: defun
#: lispref/windows.texi:2175
msgid ""
"The value returned by @code{coordinates-in-window-p} is non-@code{nil} if "
"the coordinates are inside @var{window}.  The value also indicates what part "
"of the window the position is in, as follows:"
msgstr ""

# type: item
#: lispref/windows.texi:2177
#, no-wrap
msgid "(@var{relx} . @var{rely})"
msgstr ""

# type: table
#: lispref/windows.texi:2182
msgid ""
"The coordinates are inside @var{window}.  The numbers @var{relx} and @var"
"{rely} are the equivalent window-relative coordinates for the specified "
"position, counting from 0 at the top left corner of the window."
msgstr ""

# type: item
#: lispref/windows.texi:2183
#, no-wrap
msgid "mode-line"
msgstr ""

# type: table
#: lispref/windows.texi:2185
msgid "The coordinates are in the mode line of @var{window}."
msgstr ""

# type: item
#: lispref/windows.texi:2186
#, no-wrap
msgid "header-line"
msgstr ""

# type: table
#: lispref/windows.texi:2188
msgid "The coordinates are in the header line of @var{window}."
msgstr ""

# type: item
#: lispref/windows.texi:2189
#, no-wrap
msgid "vertical-line"
msgstr ""

# type: table
#: lispref/windows.texi:2194
msgid ""
"The coordinates are in the vertical line between @var{window} and its "
"neighbor to the right.  This value occurs only if the window doesn't have a "
"scroll bar; positions in a scroll bar are considered outside the window for "
"these purposes."
msgstr ""

# type: table
#: lispref/windows.texi:2198
msgid "The coordinates are in the left or right fringe of the window."
msgstr ""

# type: table
#: lispref/windows.texi:2202
msgid "The coordinates are in the left or right margin of the window."
msgstr ""

# type: table
#: lispref/windows.texi:2205
msgid "The coordinates are not in any part of @var{window}."
msgstr ""

# type: defun
#: lispref/windows.texi:2209
msgid ""
"The function @code{coordinates-in-window-p} does not require a frame as "
"argument because it always uses the frame that @var{window} is on."
msgstr ""

# type: section
#: lispref/windows.texi:2212
#, no-wrap
msgid "The Window Tree"
msgstr ""

# type: cindex
#: lispref/windows.texi:2213
#, no-wrap
msgid "window tree"
msgstr ""

# type: Plain text
#: lispref/windows.texi:2217
msgid ""
"A @dfn{window tree} specifies the layout, size, and relationship between all "
"windows in one frame."
msgstr ""

# type: defun
#: lispref/windows.texi:2218
#, no-wrap
msgid "window-tree &optional frame"
msgstr ""

# type: defun
#: lispref/windows.texi:2221
msgid ""
"This function returns the window tree for frame @var{frame}.  If @var{frame} "
"is omitted, the selected frame is used."
msgstr ""

# type: defun
#: lispref/windows.texi:2225
msgid ""
"The return value is a list of the form @code{(@var{root} @var{mini})}, where "
"@var{root} represents the window tree of the frame's root window, and @var"
"{mini} is the frame's minibuffer window."
msgstr ""

# type: defun
#: lispref/windows.texi:2235
msgid ""
"If the root window is not split, @var{root} is the root window itself.  "
"Otherwise, @var{root} is a list @code{(@var{dir} @var{edges} @var{w1} @var"
"{w2} ...)} where @var{dir} is @code{nil} for a horizontal split, and @code"
"{t} for a vertical split, @var{edges} gives the combined size and position "
"of the subwindows in the split, and the rest of the elements are the "
"subwindows in the split.  Each of the subwindows may again be a window or a "
"list representing a window split, and so on.  The @var{edges} element is a "
"list @code{(@var{left}@var{ top}@var{ right}@var{ bottom})} similar to the "
"value returned by @code{window-edges}."
msgstr ""

# type: cindex
#: lispref/windows.texi:2239
#, no-wrap
msgid "window configurations"
msgstr ""

# type: cindex
#: lispref/windows.texi:2240
#, no-wrap
msgid "saving window information"
msgstr ""

# type: Plain text
#: lispref/windows.texi:2250
msgid ""
"A @dfn{window configuration} records the entire layout of one frame---all "
"windows, their sizes, which buffers they contain, what part of each buffer "
"is displayed, and the values of point and the mark; also their fringes, "
"margins, and scroll bar settings.  It also includes the values of @code"
"{window-min-height}, @code{window-min-width} and @code{minibuffer-scroll-"
"window}.  An exception is made for point in the selected window for the "
"current buffer; its value is not saved in the window configuration."
msgstr ""

# type: Plain text
#: lispref/windows.texi:2255
msgid ""
"You can bring back an entire previous layout by restoring a window "
"configuration previously saved.  If you want to record all frames instead of "
"just one, use a frame configuration instead of a window configuration.  @xref"
"{Frame Configurations}."
msgstr ""

# type: defun
#: lispref/windows.texi:2256
#, no-wrap
msgid "current-window-configuration &optional frame"
msgstr ""

# type: defun
#: lispref/windows.texi:2260
msgid ""
"This function returns a new object representing @var{frame}'s current window "
"configuration.  If @var{frame} is omitted, the selected frame is used."
msgstr ""

# type: defun
#: lispref/windows.texi:2262
#, no-wrap
msgid "set-window-configuration configuration"
msgstr ""

# type: defun
#: lispref/windows.texi:2266
msgid ""
"This function restores the configuration of windows and buffers as specified "
"by @var{configuration}, for the frame that @var{configuration} was created "
"for."
msgstr ""

# type: defun
#: lispref/windows.texi:2275
msgid ""
"The argument @var{configuration} must be a value that was previously "
"returned by @code{current-window-configuration}.  This configuration is "
"restored in the frame from which @var{configuration} was made, whether that "
"frame is selected or not.  This always counts as a window size change and "
"triggers execution of the @code{window-size-change-functions} (@pxref{Window "
"Hooks}), because @code{set-window-configuration} doesn't know how to tell "
"whether the new configuration actually differs from the old one."
msgstr ""

# type: defun
#: lispref/windows.texi:2280
msgid ""
"If the frame which @var{configuration} was saved from is dead, all this "
"function does is restore the three variables @code{window-min-height}, @code"
"{window-min-width} and @code{minibuffer-scroll-window}. In this case, the "
"function returns @code{nil}.  Otherwise, it returns @code{t}."
msgstr ""

# type: defun
#: lispref/windows.texi:2283
msgid ""
"Here is a way of using this function to get the same effect as @code{save-"
"window-excursion}:"
msgstr ""

# type: group
#: lispref/windows.texi:2291
#, no-wrap
msgid ""
"(let ((config (current-window-configuration)))\n"
"  (unwind-protect\n"
"      (progn (split-window-vertically nil)\n"
"             @dots{})\n"
"    (set-window-configuration config)))\n"
msgstr ""

# type: defspec
#: lispref/windows.texi:2295
#, no-wrap
msgid "save-window-excursion forms@dots{}"
msgstr ""

# type: defspec
#: lispref/windows.texi:2303
msgid ""
"This special form records the window configuration, executes @var{forms} in "
"sequence, then restores the earlier window configuration.  The window "
"configuration includes, for each window, the value of point and the portion "
"of the buffer that is visible.  It also includes the choice of selected "
"window.  However, it does not include the value of point in the current "
"buffer; use @code{save-excursion} also, if you wish to preserve that."
msgstr ""

# type: defspec
#: lispref/windows.texi:2305
msgid ""
"Don't use this construct when @code{save-selected-window} is sufficient."
msgstr ""

# type: defspec
#: lispref/windows.texi:2310
msgid ""
"Exit from @code{save-window-excursion} always triggers execution of the @code"
"{window-size-change-functions}.  (It doesn't know how to tell whether the "
"restored configuration actually differs from the one in effect at the end of "
"the @var{forms}.)"
msgstr ""

# type: defspec
#: lispref/windows.texi:2313
msgid ""
"The return value is the value of the final form in @var{forms}.  For example:"
msgstr ""

# type: group
#: lispref/windows.texi:2318
#, no-wrap
msgid ""
"(split-window)\n"
"     @result{} #<window 25 on control.texi>\n"
msgstr ""

# type: group
#: lispref/windows.texi:2322
#, no-wrap
msgid ""
"(setq w (selected-window))\n"
"     @result{} #<window 19 on control.texi>\n"
msgstr ""

# type: group
#: lispref/windows.texi:2330
#, no-wrap
msgid ""
"(save-window-excursion\n"
"  (delete-other-windows w)\n"
"  (switch-to-buffer \"foo\")\n"
"  'do-something)\n"
"     @result{} do-something\n"
"     ;; @r{The screen is now split again.}\n"
msgstr ""

# type: defun
#: lispref/windows.texi:2334
#, no-wrap
msgid "window-configuration-p object"
msgstr ""

# type: defun
#: lispref/windows.texi:2336
msgid ""
"This function returns @code{t} if @var{object} is a window configuration."
msgstr ""

# type: defun
#: lispref/windows.texi:2338
#, no-wrap
msgid "compare-window-configurations config1 config2"
msgstr ""

# type: defun
#: lispref/windows.texi:2343
msgid ""
"This function compares two window configurations as regards the structure of "
"windows, but ignores the values of point and mark and the saved scrolling "
"positions---it can return @code{t} even if those aspects differ."
msgstr ""

# type: defun
#: lispref/windows.texi:2347
msgid ""
"The function @code{equal} can also compare two window configurations; it "
"regards configurations as unequal if they differ in any respect, even a "
"saved point or mark."
msgstr ""

# type: defun
#: lispref/windows.texi:2349
#, no-wrap
msgid "window-configuration-frame config"
msgstr ""

# type: defun
#: lispref/windows.texi:2352
msgid ""
"This function returns the frame for which the window configuration @var"
"{config} was made."
msgstr ""

# type: Plain text
#: lispref/windows.texi:2358
msgid ""
"Other primitives to look inside of window configurations would make sense, "
"but are not implemented because we did not need them.  See the file @file"
"{winner.el} for some more operations on windows configurations."
msgstr ""

# type: section
#: lispref/windows.texi:2360
#, no-wrap
msgid "Hooks for Window Scrolling and Changes"
msgstr ""

# type: cindex
#: lispref/windows.texi:2361
#, no-wrap
msgid "hooks for window operations"
msgstr ""

# type: Plain text
#: lispref/windows.texi:2369
msgid ""
"This section describes how a Lisp program can take action whenever a window "
"displays a different part of its buffer or a different buffer.  There are "
"three actions that can change this: scrolling the window, switching buffers "
"in the window, and changing the size of the window.  The first two actions "
"run @code{window-scroll-functions}; the last runs @code{window-size-change-"
"functions}."
msgstr ""

# type: defvar
#: lispref/windows.texi:2375
msgid ""
"This variable holds a list of functions that Emacs should call before "
"redisplaying a window with scrolling.  It is not a normal hook, because each "
"function is called with two arguments: the window, and its new display-start "
"position."
msgstr ""

# type: defvar
#: lispref/windows.texi:2377
msgid "Displaying a different buffer in the window also runs these functions."
msgstr ""

# type: defvar
#: lispref/windows.texi:2381
msgid ""
"These functions must be careful in using @code{window-end} (@pxref{Window "
"Start}); if you need an up-to-date value, you must use the @var{update} "
"argument to ensure you get it."
msgstr ""

# type: defvar
#: lispref/windows.texi:2385
msgid ""
"@strong{Warning:} don't use this feature to alter the way the window is "
"scrolled.  It's not designed for that, and such use probably won't work."
msgstr ""

# type: defvar
#: lispref/windows.texi:2392
msgid ""
"This variable holds a list of functions to be called if the size of any "
"window changes for any reason.  The functions are called just once per "
"redisplay, and just once for each frame on which size changes have occurred."
msgstr ""

# type: defvar
#: lispref/windows.texi:2398
msgid ""
"Each function receives the frame as its sole argument.  There is no direct "
"way to find out which windows on that frame have changed size, or precisely "
"how.  However, if a size-change function records, at each call, the existing "
"windows and their sizes, it can also compare the present sizes and the "
"previous sizes."
msgstr ""

# type: defvar
#: lispref/windows.texi:2402
msgid ""
"Creating or deleting windows counts as a size change, and therefore causes "
"these functions to be called.  Changing the frame size also counts, because "
"it changes the sizes of the existing windows."
msgstr ""

# type: defvar
#: lispref/windows.texi:2408
msgid ""
"It is not a good idea to use @code{save-window-excursion} (@pxref{Window "
"Configurations}) in these functions, because that always counts as a size "
"change, and it would cause these functions to be called over and over.  In "
"most cases, @code{save-selected-window} (@pxref{Selecting Windows}) is what "
"you need here."
msgstr ""

# type: defvar
#: lispref/windows.texi:2418
msgid ""
"This abnormal hook is run whenever redisplay in a window uses text that "
"extends past a specified end trigger position.  You set the end trigger "
"position with the function @code{set-window-redisplay-end-trigger}.  The "
"functions are called with two arguments: the window, and the end trigger "
"position.  Storing @code{nil} for the end trigger position turns off the "
"feature, and the trigger value is automatically reset to @code{nil} just "
"after the hook is run."
msgstr ""

# type: defun
#: lispref/windows.texi:2420
#, no-wrap
msgid "set-window-redisplay-end-trigger window position"
msgstr ""

# type: defun
#: lispref/windows.texi:2423
msgid ""
"This function sets @var{window}'s end trigger position at @var{position}."
msgstr ""

# type: defun
#: lispref/windows.texi:2425
#, no-wrap
msgid "window-redisplay-end-trigger &optional window"
msgstr ""

# type: defun
#: lispref/windows.texi:2428
msgid ""
"This function returns @var{window}'s current end trigger position.  If @var"
"{window} is @code{nil} or omitted, it uses the selected window."
msgstr ""

# type: defvar
#: lispref/windows.texi:2436
msgid ""
"A normal hook that is run every time you change the window configuration of "
"an existing frame.  This includes splitting or deleting windows, changing "
"the sizes of windows, or displaying a different buffer in a window.  The "
"frame whose window configuration has changed is the selected frame when this "
"hook runs."
msgstr ""

# type: ignore
#: lispref/windows.texi:2440
#, no-wrap
msgid "   arch-tag: 3f6c36e8-df49-4986-b757-417feed88be3\n"
msgstr ""

# type: menu
#~ msgid "A description of an imaginary function, @code{foo}."
#~ msgstr "Une description d'une fonction imaginaire, @code{foo}."

# type: menu
#~ msgid "A description of an imaginary variable, @code{electric-future-map}."
#~ msgstr ""
#~ "Une description d'une variable imaginaire, @code{electric-futur-map}."

# type: Plain text
#~ msgid "@need 1500 More generally,"
#~ msgstr "@need 1500 Plus généralement,"

# type: Plain text
#~ msgid ""
#~ "Here is a description of the imaginary @code{electric-future-map} "
#~ "variable.@refill"
#~ msgstr ""
#~ "Voici une description de la variable imaginaire\n"
#~ "@code{electric-futur-map}.@refill "

# type: setfilename
#~ msgid "../info/numbers"
#~ msgstr "../info/nombres"

# type: tex
#~ msgid "@math{-2^{28}}"
#~ msgstr "@math{-2^{28}}"

# type: tex
#~ msgid "@math{2^{28}-1}),"
#~ msgstr "@math{2^{28}-1}),"

# type: table
#~ msgid "@samp{1.0e+INF}"
#~ msgstr "@samp{1.0e+INF}"

# type: table
#~ msgid "@samp{-1.0e+INF}"
#~ msgstr "@samp{-1.0e+INF}"

# type: Plain text
#~ msgid ""
#~ "@findex natnump @code{natnump} is an obsolete synonym for @code"
#~ "{wholenump}."
#~ msgstr ""
#~ "@cindex natnump\n"
#~ "\n"
#~ "@code{natnump} est un synonyme désuet pour @code{wholenump}."

# type: tex
#~ msgid "@math{-\\pi/2}"
#~ msgstr "@math{-\\pi/2}"

# type: tex
#~ msgid "@math{\\pi/2}"
#~ msgstr "@math{\\pi/2}"

# type: tex
#~ msgid "@math{\\pi}"
#~ msgstr "@math{\\pi}"

# type: tex
#~ msgid "@math{e}"
#~ msgstr "@math{e}"

# type: tex
#~ msgid "@i{e}"
#~ msgstr "@i{e}"

# type: Plain text
#~ msgid "@ifnottex"
#~ msgstr "@ifnottex"

# type: Plain text
#~ msgid "@noindent"
#~ msgstr "@noindent"

# type: Plain text
#~ msgid "@smallexample @group ; @r{ 29-bit binary values}"
#~ msgstr "@smallexample @group ; @r{ valeurs binaires 29-bit}"

# type: Plain text
#~ msgid "and @ifnottex pi/2"
#~ msgstr "et @ifnottex pi/2"

# type: Plain text
#~ msgid ""
#~ "@defun atan y &optional x The value of @code{(atan @var{y})} is a number "
#~ "between @ifnottex @minus{}pi/2"
#~ msgstr ""
#~ "@defun atan y &optional x\n"
#~ "\n"
#~ "La valeur de @code{(atan @var{y})} est un nombre entre @ifnottex\n"
#~ "@minus{}pi/2"

# type: Plain text
#~ msgid "@ifnottex @i{e}"
#~ msgstr "@ifnottex @i{e}"
